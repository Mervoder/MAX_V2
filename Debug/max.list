
max.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fe58  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  08010028  08010028  00011028  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080104b0  080104b0  00012240  2**0
                  CONTENTS
  4 .ARM          00000008  080104b0  080104b0  000114b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080104b8  080104b8  00012240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080104b8  080104b8  000114b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080104bc  080104bc  000114bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000240  20000000  080104c0  00012000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000025b0  20000240  08010700  00012240  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200027f0  08010700  000127f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00012240  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019f08  00000000  00000000  00012270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b1b  00000000  00000000  0002c178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017f8  00000000  00000000  0002fc98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012c3  00000000  00000000  00031490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026f32  00000000  00000000  00032753  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f2fb  00000000  00000000  00059685  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7206  00000000  00000000  00078980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015fb86  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007acc  00000000  00000000  0015fbcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00167698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000240 	.word	0x20000240
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08010010 	.word	0x08010010

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000244 	.word	0x20000244
 800020c:	08010010 	.word	0x08010010

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_ldivmod>:
 8000cb8:	b97b      	cbnz	r3, 8000cda <__aeabi_ldivmod+0x22>
 8000cba:	b972      	cbnz	r2, 8000cda <__aeabi_ldivmod+0x22>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bfbe      	ittt	lt
 8000cc0:	2000      	movlt	r0, #0
 8000cc2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000cc6:	e006      	blt.n	8000cd6 <__aeabi_ldivmod+0x1e>
 8000cc8:	bf08      	it	eq
 8000cca:	2800      	cmpeq	r0, #0
 8000ccc:	bf1c      	itt	ne
 8000cce:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000cd2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd6:	f000 b9eb 	b.w	80010b0 <__aeabi_idiv0>
 8000cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	db09      	blt.n	8000cfa <__aeabi_ldivmod+0x42>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db1a      	blt.n	8000d20 <__aeabi_ldivmod+0x68>
 8000cea:	f000 f883 	bl	8000df4 <__udivmoddi4>
 8000cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf6:	b004      	add	sp, #16
 8000cf8:	4770      	bx	lr
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db1b      	blt.n	8000d3c <__aeabi_ldivmod+0x84>
 8000d04:	f000 f876 	bl	8000df4 <__udivmoddi4>
 8000d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d10:	b004      	add	sp, #16
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	4252      	negs	r2, r2
 8000d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f865 	bl	8000df4 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4240      	negs	r0, r0
 8000d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3a:	4770      	bx	lr
 8000d3c:	4252      	negs	r2, r2
 8000d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d42:	f000 f857 	bl	8000df4 <__udivmoddi4>
 8000d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d4e:	b004      	add	sp, #16
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_uldivmod>:
 8000d58:	b953      	cbnz	r3, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5a:	b94a      	cbnz	r2, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5c:	2900      	cmp	r1, #0
 8000d5e:	bf08      	it	eq
 8000d60:	2800      	cmpeq	r0, #0
 8000d62:	bf1c      	itt	ne
 8000d64:	f04f 31ff 	movne.w	r1, #4294967295
 8000d68:	f04f 30ff 	movne.w	r0, #4294967295
 8000d6c:	f000 b9a0 	b.w	80010b0 <__aeabi_idiv0>
 8000d70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d78:	f000 f83c 	bl	8000df4 <__udivmoddi4>
 8000d7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d84:	b004      	add	sp, #16
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_d2lz>:
 8000d88:	b538      	push	{r3, r4, r5, lr}
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	4604      	mov	r4, r0
 8000d90:	460d      	mov	r5, r1
 8000d92:	f7ff febb 	bl	8000b0c <__aeabi_dcmplt>
 8000d96:	b928      	cbnz	r0, 8000da4 <__aeabi_d2lz+0x1c>
 8000d98:	4620      	mov	r0, r4
 8000d9a:	4629      	mov	r1, r5
 8000d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000da0:	f000 b80a 	b.w	8000db8 <__aeabi_d2ulz>
 8000da4:	4620      	mov	r0, r4
 8000da6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000daa:	f000 f805 	bl	8000db8 <__aeabi_d2ulz>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	bd38      	pop	{r3, r4, r5, pc}
 8000db6:	bf00      	nop

08000db8 <__aeabi_d2ulz>:
 8000db8:	b5d0      	push	{r4, r6, r7, lr}
 8000dba:	4b0c      	ldr	r3, [pc, #48]	@ (8000dec <__aeabi_d2ulz+0x34>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	4606      	mov	r6, r0
 8000dc0:	460f      	mov	r7, r1
 8000dc2:	f7ff fc31 	bl	8000628 <__aeabi_dmul>
 8000dc6:	f7ff ff07 	bl	8000bd8 <__aeabi_d2uiz>
 8000dca:	4604      	mov	r4, r0
 8000dcc:	f7ff fbb2 	bl	8000534 <__aeabi_ui2d>
 8000dd0:	4b07      	ldr	r3, [pc, #28]	@ (8000df0 <__aeabi_d2ulz+0x38>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f7ff fc28 	bl	8000628 <__aeabi_dmul>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4630      	mov	r0, r6
 8000dde:	4639      	mov	r1, r7
 8000de0:	f7ff fa6a 	bl	80002b8 <__aeabi_dsub>
 8000de4:	f7ff fef8 	bl	8000bd8 <__aeabi_d2uiz>
 8000de8:	4621      	mov	r1, r4
 8000dea:	bdd0      	pop	{r4, r6, r7, pc}
 8000dec:	3df00000 	.word	0x3df00000
 8000df0:	41f00000 	.word	0x41f00000

08000df4 <__udivmoddi4>:
 8000df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df8:	9d08      	ldr	r5, [sp, #32]
 8000dfa:	460c      	mov	r4, r1
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d14e      	bne.n	8000e9e <__udivmoddi4+0xaa>
 8000e00:	4694      	mov	ip, r2
 8000e02:	458c      	cmp	ip, r1
 8000e04:	4686      	mov	lr, r0
 8000e06:	fab2 f282 	clz	r2, r2
 8000e0a:	d962      	bls.n	8000ed2 <__udivmoddi4+0xde>
 8000e0c:	b14a      	cbz	r2, 8000e22 <__udivmoddi4+0x2e>
 8000e0e:	f1c2 0320 	rsb	r3, r2, #32
 8000e12:	4091      	lsls	r1, r2
 8000e14:	fa20 f303 	lsr.w	r3, r0, r3
 8000e18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1c:	4319      	orrs	r1, r3
 8000e1e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e26:	fa1f f68c 	uxth.w	r6, ip
 8000e2a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e2e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e32:	fb07 1114 	mls	r1, r7, r4, r1
 8000e36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e3a:	fb04 f106 	mul.w	r1, r4, r6
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d90a      	bls.n	8000e58 <__udivmoddi4+0x64>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e4a:	f080 8112 	bcs.w	8001072 <__udivmoddi4+0x27e>
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	f240 810f 	bls.w	8001072 <__udivmoddi4+0x27e>
 8000e54:	3c02      	subs	r4, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1a59      	subs	r1, r3, r1
 8000e5a:	fa1f f38e 	uxth.w	r3, lr
 8000e5e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e62:	fb07 1110 	mls	r1, r7, r0, r1
 8000e66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e6a:	fb00 f606 	mul.w	r6, r0, r6
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	d90a      	bls.n	8000e88 <__udivmoddi4+0x94>
 8000e72:	eb1c 0303 	adds.w	r3, ip, r3
 8000e76:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e7a:	f080 80fc 	bcs.w	8001076 <__udivmoddi4+0x282>
 8000e7e:	429e      	cmp	r6, r3
 8000e80:	f240 80f9 	bls.w	8001076 <__udivmoddi4+0x282>
 8000e84:	4463      	add	r3, ip
 8000e86:	3802      	subs	r0, #2
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e8e:	2100      	movs	r1, #0
 8000e90:	b11d      	cbz	r5, 8000e9a <__udivmoddi4+0xa6>
 8000e92:	40d3      	lsrs	r3, r2
 8000e94:	2200      	movs	r2, #0
 8000e96:	e9c5 3200 	strd	r3, r2, [r5]
 8000e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9e:	428b      	cmp	r3, r1
 8000ea0:	d905      	bls.n	8000eae <__udivmoddi4+0xba>
 8000ea2:	b10d      	cbz	r5, 8000ea8 <__udivmoddi4+0xb4>
 8000ea4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e7f5      	b.n	8000e9a <__udivmoddi4+0xa6>
 8000eae:	fab3 f183 	clz	r1, r3
 8000eb2:	2900      	cmp	r1, #0
 8000eb4:	d146      	bne.n	8000f44 <__udivmoddi4+0x150>
 8000eb6:	42a3      	cmp	r3, r4
 8000eb8:	d302      	bcc.n	8000ec0 <__udivmoddi4+0xcc>
 8000eba:	4290      	cmp	r0, r2
 8000ebc:	f0c0 80f0 	bcc.w	80010a0 <__udivmoddi4+0x2ac>
 8000ec0:	1a86      	subs	r6, r0, r2
 8000ec2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ec6:	2001      	movs	r0, #1
 8000ec8:	2d00      	cmp	r5, #0
 8000eca:	d0e6      	beq.n	8000e9a <__udivmoddi4+0xa6>
 8000ecc:	e9c5 6300 	strd	r6, r3, [r5]
 8000ed0:	e7e3      	b.n	8000e9a <__udivmoddi4+0xa6>
 8000ed2:	2a00      	cmp	r2, #0
 8000ed4:	f040 8090 	bne.w	8000ff8 <__udivmoddi4+0x204>
 8000ed8:	eba1 040c 	sub.w	r4, r1, ip
 8000edc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee0:	fa1f f78c 	uxth.w	r7, ip
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000eea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000eee:	fb08 4416 	mls	r4, r8, r6, r4
 8000ef2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ef6:	fb07 f006 	mul.w	r0, r7, r6
 8000efa:	4298      	cmp	r0, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x11c>
 8000efe:	eb1c 0303 	adds.w	r3, ip, r3
 8000f02:	f106 34ff 	add.w	r4, r6, #4294967295
 8000f06:	d202      	bcs.n	8000f0e <__udivmoddi4+0x11a>
 8000f08:	4298      	cmp	r0, r3
 8000f0a:	f200 80cd 	bhi.w	80010a8 <__udivmoddi4+0x2b4>
 8000f0e:	4626      	mov	r6, r4
 8000f10:	1a1c      	subs	r4, r3, r0
 8000f12:	fa1f f38e 	uxth.w	r3, lr
 8000f16:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f1a:	fb08 4410 	mls	r4, r8, r0, r4
 8000f1e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f22:	fb00 f707 	mul.w	r7, r0, r7
 8000f26:	429f      	cmp	r7, r3
 8000f28:	d908      	bls.n	8000f3c <__udivmoddi4+0x148>
 8000f2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f2e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f32:	d202      	bcs.n	8000f3a <__udivmoddi4+0x146>
 8000f34:	429f      	cmp	r7, r3
 8000f36:	f200 80b0 	bhi.w	800109a <__udivmoddi4+0x2a6>
 8000f3a:	4620      	mov	r0, r4
 8000f3c:	1bdb      	subs	r3, r3, r7
 8000f3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f42:	e7a5      	b.n	8000e90 <__udivmoddi4+0x9c>
 8000f44:	f1c1 0620 	rsb	r6, r1, #32
 8000f48:	408b      	lsls	r3, r1
 8000f4a:	fa22 f706 	lsr.w	r7, r2, r6
 8000f4e:	431f      	orrs	r7, r3
 8000f50:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f54:	fa04 f301 	lsl.w	r3, r4, r1
 8000f58:	ea43 030c 	orr.w	r3, r3, ip
 8000f5c:	40f4      	lsrs	r4, r6
 8000f5e:	fa00 f801 	lsl.w	r8, r0, r1
 8000f62:	0c38      	lsrs	r0, r7, #16
 8000f64:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f68:	fbb4 fef0 	udiv	lr, r4, r0
 8000f6c:	fa1f fc87 	uxth.w	ip, r7
 8000f70:	fb00 441e 	mls	r4, r0, lr, r4
 8000f74:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f78:	fb0e f90c 	mul.w	r9, lr, ip
 8000f7c:	45a1      	cmp	r9, r4
 8000f7e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f82:	d90a      	bls.n	8000f9a <__udivmoddi4+0x1a6>
 8000f84:	193c      	adds	r4, r7, r4
 8000f86:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f8a:	f080 8084 	bcs.w	8001096 <__udivmoddi4+0x2a2>
 8000f8e:	45a1      	cmp	r9, r4
 8000f90:	f240 8081 	bls.w	8001096 <__udivmoddi4+0x2a2>
 8000f94:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f98:	443c      	add	r4, r7
 8000f9a:	eba4 0409 	sub.w	r4, r4, r9
 8000f9e:	fa1f f983 	uxth.w	r9, r3
 8000fa2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000fa6:	fb00 4413 	mls	r4, r0, r3, r4
 8000faa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fae:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fb2:	45a4      	cmp	ip, r4
 8000fb4:	d907      	bls.n	8000fc6 <__udivmoddi4+0x1d2>
 8000fb6:	193c      	adds	r4, r7, r4
 8000fb8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000fbc:	d267      	bcs.n	800108e <__udivmoddi4+0x29a>
 8000fbe:	45a4      	cmp	ip, r4
 8000fc0:	d965      	bls.n	800108e <__udivmoddi4+0x29a>
 8000fc2:	3b02      	subs	r3, #2
 8000fc4:	443c      	add	r4, r7
 8000fc6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000fca:	fba0 9302 	umull	r9, r3, r0, r2
 8000fce:	eba4 040c 	sub.w	r4, r4, ip
 8000fd2:	429c      	cmp	r4, r3
 8000fd4:	46ce      	mov	lr, r9
 8000fd6:	469c      	mov	ip, r3
 8000fd8:	d351      	bcc.n	800107e <__udivmoddi4+0x28a>
 8000fda:	d04e      	beq.n	800107a <__udivmoddi4+0x286>
 8000fdc:	b155      	cbz	r5, 8000ff4 <__udivmoddi4+0x200>
 8000fde:	ebb8 030e 	subs.w	r3, r8, lr
 8000fe2:	eb64 040c 	sbc.w	r4, r4, ip
 8000fe6:	fa04 f606 	lsl.w	r6, r4, r6
 8000fea:	40cb      	lsrs	r3, r1
 8000fec:	431e      	orrs	r6, r3
 8000fee:	40cc      	lsrs	r4, r1
 8000ff0:	e9c5 6400 	strd	r6, r4, [r5]
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	e750      	b.n	8000e9a <__udivmoddi4+0xa6>
 8000ff8:	f1c2 0320 	rsb	r3, r2, #32
 8000ffc:	fa20 f103 	lsr.w	r1, r0, r3
 8001000:	fa0c fc02 	lsl.w	ip, ip, r2
 8001004:	fa24 f303 	lsr.w	r3, r4, r3
 8001008:	4094      	lsls	r4, r2
 800100a:	430c      	orrs	r4, r1
 800100c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001010:	fa00 fe02 	lsl.w	lr, r0, r2
 8001014:	fa1f f78c 	uxth.w	r7, ip
 8001018:	fbb3 f0f8 	udiv	r0, r3, r8
 800101c:	fb08 3110 	mls	r1, r8, r0, r3
 8001020:	0c23      	lsrs	r3, r4, #16
 8001022:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001026:	fb00 f107 	mul.w	r1, r0, r7
 800102a:	4299      	cmp	r1, r3
 800102c:	d908      	bls.n	8001040 <__udivmoddi4+0x24c>
 800102e:	eb1c 0303 	adds.w	r3, ip, r3
 8001032:	f100 36ff 	add.w	r6, r0, #4294967295
 8001036:	d22c      	bcs.n	8001092 <__udivmoddi4+0x29e>
 8001038:	4299      	cmp	r1, r3
 800103a:	d92a      	bls.n	8001092 <__udivmoddi4+0x29e>
 800103c:	3802      	subs	r0, #2
 800103e:	4463      	add	r3, ip
 8001040:	1a5b      	subs	r3, r3, r1
 8001042:	b2a4      	uxth	r4, r4
 8001044:	fbb3 f1f8 	udiv	r1, r3, r8
 8001048:	fb08 3311 	mls	r3, r8, r1, r3
 800104c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001050:	fb01 f307 	mul.w	r3, r1, r7
 8001054:	42a3      	cmp	r3, r4
 8001056:	d908      	bls.n	800106a <__udivmoddi4+0x276>
 8001058:	eb1c 0404 	adds.w	r4, ip, r4
 800105c:	f101 36ff 	add.w	r6, r1, #4294967295
 8001060:	d213      	bcs.n	800108a <__udivmoddi4+0x296>
 8001062:	42a3      	cmp	r3, r4
 8001064:	d911      	bls.n	800108a <__udivmoddi4+0x296>
 8001066:	3902      	subs	r1, #2
 8001068:	4464      	add	r4, ip
 800106a:	1ae4      	subs	r4, r4, r3
 800106c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001070:	e739      	b.n	8000ee6 <__udivmoddi4+0xf2>
 8001072:	4604      	mov	r4, r0
 8001074:	e6f0      	b.n	8000e58 <__udivmoddi4+0x64>
 8001076:	4608      	mov	r0, r1
 8001078:	e706      	b.n	8000e88 <__udivmoddi4+0x94>
 800107a:	45c8      	cmp	r8, r9
 800107c:	d2ae      	bcs.n	8000fdc <__udivmoddi4+0x1e8>
 800107e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001082:	eb63 0c07 	sbc.w	ip, r3, r7
 8001086:	3801      	subs	r0, #1
 8001088:	e7a8      	b.n	8000fdc <__udivmoddi4+0x1e8>
 800108a:	4631      	mov	r1, r6
 800108c:	e7ed      	b.n	800106a <__udivmoddi4+0x276>
 800108e:	4603      	mov	r3, r0
 8001090:	e799      	b.n	8000fc6 <__udivmoddi4+0x1d2>
 8001092:	4630      	mov	r0, r6
 8001094:	e7d4      	b.n	8001040 <__udivmoddi4+0x24c>
 8001096:	46d6      	mov	lr, sl
 8001098:	e77f      	b.n	8000f9a <__udivmoddi4+0x1a6>
 800109a:	4463      	add	r3, ip
 800109c:	3802      	subs	r0, #2
 800109e:	e74d      	b.n	8000f3c <__udivmoddi4+0x148>
 80010a0:	4606      	mov	r6, r0
 80010a2:	4623      	mov	r3, r4
 80010a4:	4608      	mov	r0, r1
 80010a6:	e70f      	b.n	8000ec8 <__udivmoddi4+0xd4>
 80010a8:	3e02      	subs	r6, #2
 80010aa:	4463      	add	r3, ip
 80010ac:	e730      	b.n	8000f10 <__udivmoddi4+0x11c>
 80010ae:	bf00      	nop

080010b0 <__aeabi_idiv0>:
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop

080010b4 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	/* chip id read try count */
	uint8_t try_count = 5;
 80010bc:	2305      	movs	r3, #5
 80010be:	73bb      	strb	r3, [r7, #14]
	uint8_t chip_id = 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f001 facb 	bl	8002660 <null_ptr_check>
 80010ca:	4603      	mov	r3, r0
 80010cc:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt ==  BME280_OK) {
 80010ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d133      	bne.n	800113e <bme280_init+0x8a>
		while (try_count) {
 80010d6:	e028      	b.n	800112a <bme280_init+0x76>
			/* Read the chip-id of bme280 sensor */
			rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 80010d8:	f107 010d 	add.w	r1, r7, #13
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2201      	movs	r2, #1
 80010e0:	20d0      	movs	r0, #208	@ 0xd0
 80010e2:	f000 f832 	bl	800114a <bme280_get_regs>
 80010e6:	4603      	mov	r3, r0
 80010e8:	73fb      	strb	r3, [r7, #15]
			/* Check for chip id validity */
			if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID)) {
 80010ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d114      	bne.n	800111c <bme280_init+0x68>
 80010f2:	7b7b      	ldrb	r3, [r7, #13]
 80010f4:	2b60      	cmp	r3, #96	@ 0x60
 80010f6:	d111      	bne.n	800111c <bme280_init+0x68>
				dev->chip_id = chip_id;
 80010f8:	7b7a      	ldrb	r2, [r7, #13]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	701a      	strb	r2, [r3, #0]
				/* Reset the sensor */
				rslt = bme280_soft_reset(dev);
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f000 f978 	bl	80013f4 <bme280_soft_reset>
 8001104:	4603      	mov	r3, r0
 8001106:	73fb      	strb	r3, [r7, #15]
				if (rslt == BME280_OK) {
 8001108:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d110      	bne.n	8001132 <bme280_init+0x7e>
					/* Read the calibration data */
					rslt = get_calib_data(dev);
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f001 f919 	bl	8002348 <get_calib_data>
 8001116:	4603      	mov	r3, r0
 8001118:	73fb      	strb	r3, [r7, #15]
				}
				break;
 800111a:	e00a      	b.n	8001132 <bme280_init+0x7e>
			}
			/* Wait for 1 ms */
			dev->delay_ms(1);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	2001      	movs	r0, #1
 8001122:	4798      	blx	r3
			--try_count;
 8001124:	7bbb      	ldrb	r3, [r7, #14]
 8001126:	3b01      	subs	r3, #1
 8001128:	73bb      	strb	r3, [r7, #14]
		while (try_count) {
 800112a:	7bbb      	ldrb	r3, [r7, #14]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d1d3      	bne.n	80010d8 <bme280_init+0x24>
 8001130:	e000      	b.n	8001134 <bme280_init+0x80>
				break;
 8001132:	bf00      	nop
		}
		/* Chip id check failed */
		if (!try_count)
 8001134:	7bbb      	ldrb	r3, [r7, #14]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d101      	bne.n	800113e <bme280_init+0x8a>
			rslt = BME280_E_DEV_NOT_FOUND;
 800113a:	23fe      	movs	r3, #254	@ 0xfe
 800113c:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 800113e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001142:	4618      	mov	r0, r3
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 800114a:	b590      	push	{r4, r7, lr}
 800114c:	b087      	sub	sp, #28
 800114e:	af00      	add	r7, sp, #0
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607b      	str	r3, [r7, #4]
 8001154:	4603      	mov	r3, r0
 8001156:	73fb      	strb	r3, [r7, #15]
 8001158:	4613      	mov	r3, r2
 800115a:	81bb      	strh	r3, [r7, #12]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f001 fa7f 	bl	8002660 <null_ptr_check>
 8001162:	4603      	mov	r3, r0
 8001164:	75fb      	strb	r3, [r7, #23]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8001166:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d117      	bne.n	800119e <bme280_get_regs+0x54>
		/* If interface selected is SPI */
		if (dev->intf != BME280_I2C_INTF)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	789b      	ldrb	r3, [r3, #2]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d003      	beq.n	800117e <bme280_get_regs+0x34>
			reg_addr = reg_addr | 0x80;
 8001176:	7bfb      	ldrb	r3, [r7, #15]
 8001178:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800117c:	73fb      	strb	r3, [r7, #15]
		/* Read the data  */
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	685c      	ldr	r4, [r3, #4]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	7858      	ldrb	r0, [r3, #1]
 8001186:	89bb      	ldrh	r3, [r7, #12]
 8001188:	7bf9      	ldrb	r1, [r7, #15]
 800118a:	68ba      	ldr	r2, [r7, #8]
 800118c:	47a0      	blx	r4
 800118e:	4603      	mov	r3, r0
 8001190:	75fb      	strb	r3, [r7, #23]
		/* Check for communication error */
		if (rslt != BME280_OK)
 8001192:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <bme280_get_regs+0x54>
			rslt = BME280_E_COMM_FAIL;
 800119a:	23fc      	movs	r3, #252	@ 0xfc
 800119c:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800119e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	371c      	adds	r7, #28
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd90      	pop	{r4, r7, pc}

080011aa <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 80011aa:	b590      	push	{r4, r7, lr}
 80011ac:	b08d      	sub	sp, #52	@ 0x34
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	60f8      	str	r0, [r7, #12]
 80011b2:	60b9      	str	r1, [r7, #8]
 80011b4:	603b      	str	r3, [r7, #0]
 80011b6:	4613      	mov	r3, r2
 80011b8:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

	if (len > 10)
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	2b0a      	cmp	r3, #10
 80011be:	d901      	bls.n	80011c4 <bme280_set_regs+0x1a>
		len = 10;
 80011c0:	230a      	movs	r3, #10
 80011c2:	71fb      	strb	r3, [r7, #7]

	uint16_t temp_len;
	uint8_t reg_addr_cnt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80011c4:	6838      	ldr	r0, [r7, #0]
 80011c6:	f001 fa4b 	bl	8002660 <null_ptr_check>
 80011ca:	4603      	mov	r3, r0
 80011cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	/* Check for arguments validity */
	if ((rslt ==  BME280_OK) && (reg_addr != NULL) && (reg_data != NULL)) {
 80011d0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d156      	bne.n	8001286 <bme280_set_regs+0xdc>
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d053      	beq.n	8001286 <bme280_set_regs+0xdc>
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d050      	beq.n	8001286 <bme280_set_regs+0xdc>
		if (len != 0) {
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d049      	beq.n	800127e <bme280_set_regs+0xd4>
			temp_buff[0] = reg_data[0];
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	753b      	strb	r3, [r7, #20]
			/* If interface selected is SPI */
			if (dev->intf != BME280_I2C_INTF) {
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	789b      	ldrb	r3, [r3, #2]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d01a      	beq.n	800122e <bme280_set_regs+0x84>
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80011f8:	2300      	movs	r3, #0
 80011fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80011fe:	e011      	b.n	8001224 <bme280_set_regs+0x7a>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8001200:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001204:	68fa      	ldr	r2, [r7, #12]
 8001206:	4413      	add	r3, r2
 8001208:	781a      	ldrb	r2, [r3, #0]
 800120a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800120e:	68f9      	ldr	r1, [r7, #12]
 8001210:	440b      	add	r3, r1
 8001212:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001216:	b2d2      	uxtb	r2, r2
 8001218:	701a      	strb	r2, [r3, #0]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800121a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800121e:	3301      	adds	r3, #1
 8001220:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001224:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	429a      	cmp	r2, r3
 800122c:	d3e8      	bcc.n	8001200 <bme280_set_regs+0x56>
			}
			/* Burst write mode */
			if (len > 1) {
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d90d      	bls.n	8001250 <bme280_set_regs+0xa6>
				/* Interleave register address w.r.t data for
				burst write*/
				interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	f107 0114 	add.w	r1, r7, #20
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	68f8      	ldr	r0, [r7, #12]
 800123e:	f001 f8c8 	bl	80023d2 <interleave_reg_addr>
				temp_len = ((len * 2) - 1);
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	b29b      	uxth	r3, r3
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	b29b      	uxth	r3, r3
 800124a:	3b01      	subs	r3, #1
 800124c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800124e:	e001      	b.n	8001254 <bme280_set_regs+0xaa>
			} else {
				temp_len = len;
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	85bb      	strh	r3, [r7, #44]	@ 0x2c
			}
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	689c      	ldr	r4, [r3, #8]
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	7858      	ldrb	r0, [r3, #1]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	7819      	ldrb	r1, [r3, #0]
 8001260:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001262:	f107 0214 	add.w	r2, r7, #20
 8001266:	47a0      	blx	r4
 8001268:	4603      	mov	r3, r0
 800126a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			/* Check for communication error */
			if (rslt != BME280_OK)
 800126e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8001272:	2b00      	cmp	r3, #0
 8001274:	d00b      	beq.n	800128e <bme280_set_regs+0xe4>
				rslt = BME280_E_COMM_FAIL;
 8001276:	23fc      	movs	r3, #252	@ 0xfc
 8001278:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (len != 0) {
 800127c:	e007      	b.n	800128e <bme280_set_regs+0xe4>
		} else {
			rslt = BME280_E_INVALID_LEN;
 800127e:	23fd      	movs	r3, #253	@ 0xfd
 8001280:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (len != 0) {
 8001284:	e003      	b.n	800128e <bme280_set_regs+0xe4>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8001286:	23ff      	movs	r3, #255	@ 0xff
 8001288:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800128c:	e000      	b.n	8001290 <bme280_set_regs+0xe6>
		if (len != 0) {
 800128e:	bf00      	nop
	}


	return rslt;
 8001290:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8001294:	4618      	mov	r0, r3
 8001296:	3734      	adds	r7, #52	@ 0x34
 8001298:	46bd      	mov	sp, r7
 800129a:	bd90      	pop	{r4, r7, pc}

0800129c <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	6039      	str	r1, [r7, #0]
 80012a6:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t sensor_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80012a8:	6838      	ldr	r0, [r7, #0]
 80012aa:	f001 f9d9 	bl	8002660 <null_ptr_check>
 80012ae:	4603      	mov	r3, r0
 80012b0:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 80012b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d13f      	bne.n	800133a <bme280_set_sensor_settings+0x9e>
		rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 80012ba:	f107 030e 	add.w	r3, r7, #14
 80012be:	6839      	ldr	r1, [r7, #0]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f000 f874 	bl	80013ae <bme280_get_sensor_mode>
 80012c6:	4603      	mov	r3, r0
 80012c8:	73fb      	strb	r3, [r7, #15]
		if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 80012ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d107      	bne.n	80012e2 <bme280_set_sensor_settings+0x46>
 80012d2:	7bbb      	ldrb	r3, [r7, #14]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d004      	beq.n	80012e2 <bme280_set_sensor_settings+0x46>
			rslt = put_device_to_sleep(dev);
 80012d8:	6838      	ldr	r0, [r7, #0]
 80012da:	f000 fb36 	bl	800194a <put_device_to_sleep>
 80012de:	4603      	mov	r3, r0
 80012e0:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK) {
 80012e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d127      	bne.n	800133a <bme280_set_sensor_settings+0x9e>
			/* Check if user wants to change oversampling
			   settings */
			if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	4619      	mov	r1, r3
 80012ee:	2007      	movs	r0, #7
 80012f0:	f001 f99a 	bl	8002628 <are_settings_changed>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d009      	beq.n	800130e <bme280_set_sensor_settings+0x72>
				rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	683a      	ldr	r2, [r7, #0]
 8001304:	4618      	mov	r0, r3
 8001306:	f000 f972 	bl	80015ee <set_osr_settings>
 800130a:	4603      	mov	r3, r0
 800130c:	73fb      	strb	r3, [r7, #15]
			/* Check if user wants to change filter and/or
			   standby settings */
			if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 800130e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d111      	bne.n	800133a <bme280_set_sensor_settings+0x9e>
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	4619      	mov	r1, r3
 800131a:	2018      	movs	r0, #24
 800131c:	f001 f984 	bl	8002628 <are_settings_changed>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d009      	beq.n	800133a <bme280_set_sensor_settings+0x9e>
				rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	683a      	ldr	r2, [r7, #0]
 8001330:	4618      	mov	r0, r3
 8001332:	f000 f9f9 	bl	8001728 <set_filter_standby_settings>
 8001336:	4603      	mov	r3, r0
 8001338:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
 800133a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800133e:	4618      	mov	r0, r3
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b084      	sub	sp, #16
 800134a:	af00      	add	r7, sp, #0
 800134c:	4603      	mov	r3, r0
 800134e:	6039      	str	r1, [r7, #0]
 8001350:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t last_set_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001352:	6838      	ldr	r0, [r7, #0]
 8001354:	f001 f984 	bl	8002660 <null_ptr_check>
 8001358:	4603      	mov	r3, r0
 800135a:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 800135c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d11e      	bne.n	80013a2 <bme280_set_sensor_mode+0x5c>
		rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 8001364:	f107 030e 	add.w	r3, r7, #14
 8001368:	6839      	ldr	r1, [r7, #0]
 800136a:	4618      	mov	r0, r3
 800136c:	f000 f81f 	bl	80013ae <bme280_get_sensor_mode>
 8001370:	4603      	mov	r3, r0
 8001372:	73fb      	strb	r3, [r7, #15]
		/* If the sensor is not in sleep mode put the device to sleep
		   mode */
		if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 8001374:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d107      	bne.n	800138c <bme280_set_sensor_mode+0x46>
 800137c:	7bbb      	ldrb	r3, [r7, #14]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d004      	beq.n	800138c <bme280_set_sensor_mode+0x46>
			rslt = put_device_to_sleep(dev);
 8001382:	6838      	ldr	r0, [r7, #0]
 8001384:	f000 fae1 	bl	800194a <put_device_to_sleep>
 8001388:	4603      	mov	r3, r0
 800138a:	73fb      	strb	r3, [r7, #15]
		/* Set the power mode */
		if (rslt == BME280_OK)
 800138c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d106      	bne.n	80013a2 <bme280_set_sensor_mode+0x5c>
			rslt = write_power_mode(sensor_mode, dev);
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	6839      	ldr	r1, [r7, #0]
 8001398:	4618      	mov	r0, r3
 800139a:	f000 faa3 	bl	80018e4 <write_power_mode>
 800139e:	4603      	mov	r3, r0
 80013a0:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80013a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b084      	sub	sp, #16
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
 80013b6:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80013b8:	6838      	ldr	r0, [r7, #0]
 80013ba:	f001 f951 	bl	8002660 <null_ptr_check>
 80013be:	4603      	mov	r3, r0
 80013c0:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 80013c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d10e      	bne.n	80013e8 <bme280_get_sensor_mode+0x3a>
		/* Read the power mode register */
		rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	2201      	movs	r2, #1
 80013ce:	6879      	ldr	r1, [r7, #4]
 80013d0:	20f4      	movs	r0, #244	@ 0xf4
 80013d2:	f7ff feba 	bl	800114a <bme280_get_regs>
 80013d6:	4603      	mov	r3, r0
 80013d8:	73fb      	strb	r3, [r7, #15]
		/* Assign the power mode in the device structure */
		*sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	f003 0303 	and.w	r3, r3, #3
 80013e2:	b2da      	uxtb	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
 80013e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3710      	adds	r7, #16
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_RESET_ADDR;
 80013fc:	23e0      	movs	r3, #224	@ 0xe0
 80013fe:	73bb      	strb	r3, [r7, #14]
	/* 0xB6 is the soft reset command */
	uint8_t soft_rst_cmd = 0xB6;
 8001400:	23b6      	movs	r3, #182	@ 0xb6
 8001402:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f001 f92b 	bl	8002660 <null_ptr_check>
 800140a:	4603      	mov	r3, r0
 800140c:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 800140e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d10d      	bne.n	8001432 <bme280_soft_reset+0x3e>
		/* Write the soft reset command in the sensor */
		rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001416:	f107 010d 	add.w	r1, r7, #13
 800141a:	f107 000e 	add.w	r0, r7, #14
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2201      	movs	r2, #1
 8001422:	f7ff fec2 	bl	80011aa <bme280_set_regs>
 8001426:	4603      	mov	r3, r0
 8001428:	73fb      	strb	r3, [r7, #15]
		/* As per data sheet, startup time is 2 ms. */
		dev->delay_ms(2);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	68db      	ldr	r3, [r3, #12]
 800142e:	2002      	movs	r0, #2
 8001430:	4798      	blx	r3
	}

	return rslt;
 8001432:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001436:	4618      	mov	r0, r3
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b08a      	sub	sp, #40	@ 0x28
 8001442:	af00      	add	r7, sp, #0
 8001444:	4603      	mov	r3, r0
 8001446:	60b9      	str	r1, [r7, #8]
 8001448:	607a      	str	r2, [r7, #4]
 800144a:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	/* Array to store the pressure, temperature and humidity data read from
	the sensor */
	uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
 800144c:	2300      	movs	r3, #0
 800144e:	61fb      	str	r3, [r7, #28]
 8001450:	2300      	movs	r3, #0
 8001452:	623b      	str	r3, [r7, #32]
	struct bme280_uncomp_data uncomp_data = {0};
 8001454:	f107 0310 	add.w	r3, r7, #16
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f001 f8fd 	bl	8002660 <null_ptr_check>
 8001466:	4603      	mov	r3, r0
 8001468:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if ((rslt == BME280_OK) && (comp_data != NULL)) {
 800146c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001470:	2b00      	cmp	r3, #0
 8001472:	d124      	bne.n	80014be <bme280_get_sensor_data+0x80>
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d021      	beq.n	80014be <bme280_get_sensor_data+0x80>
		/* Read the pressure and temperature data from the sensor */
		rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 800147a:	f107 011c 	add.w	r1, r7, #28
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2208      	movs	r2, #8
 8001482:	20f7      	movs	r0, #247	@ 0xf7
 8001484:	f7ff fe61 	bl	800114a <bme280_get_regs>
 8001488:	4603      	mov	r3, r0
 800148a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		if (rslt == BME280_OK) {
 800148e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001492:	2b00      	cmp	r3, #0
 8001494:	d116      	bne.n	80014c4 <bme280_get_sensor_data+0x86>
			/* Parse the read data from the sensor */
			bme280_parse_sensor_data(reg_data, &uncomp_data);
 8001496:	f107 0210 	add.w	r2, r7, #16
 800149a:	f107 031c 	add.w	r3, r7, #28
 800149e:	4611      	mov	r1, r2
 80014a0:	4618      	mov	r0, r3
 80014a2:	f000 f815 	bl	80014d0 <bme280_parse_sensor_data>
			/* Compensate the pressure and/or temperature and/or
			   humidity data from the sensor */
			rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	3310      	adds	r3, #16
 80014aa:	f107 0110 	add.w	r1, r7, #16
 80014ae:	7bf8      	ldrb	r0, [r7, #15]
 80014b0:	68ba      	ldr	r2, [r7, #8]
 80014b2:	f000 f853 	bl	800155c <bme280_compensate_data>
 80014b6:	4603      	mov	r3, r0
 80014b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (rslt == BME280_OK) {
 80014bc:	e002      	b.n	80014c4 <bme280_get_sensor_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 80014be:	23ff      	movs	r3, #255	@ 0xff
 80014c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	return rslt;
 80014c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3728      	adds	r7, #40	@ 0x28
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b087      	sub	sp, #28
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
	uint32_t data_xlsb;
	uint32_t data_lsb;
	uint32_t data_msb;

	/* Store the parsed register values for pressure data */
	data_msb = (uint32_t)reg_data[0] << 12;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	031b      	lsls	r3, r3, #12
 80014e0:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[1] << 4;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	3301      	adds	r3, #1
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	011b      	lsls	r3, r3, #4
 80014ea:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[2] >> 4;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3302      	adds	r3, #2
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	091b      	lsrs	r3, r3, #4
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	60fb      	str	r3, [r7, #12]
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 80014f8:	697a      	ldr	r2, [r7, #20]
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	431a      	orrs	r2, r3
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	431a      	orrs	r2, r3
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	601a      	str	r2, [r3, #0]

	/* Store the parsed register values for temperature data */
	data_msb = (uint32_t)reg_data[3] << 12;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	3303      	adds	r3, #3
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	031b      	lsls	r3, r3, #12
 800150e:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[4] << 4;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3304      	adds	r3, #4
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	011b      	lsls	r3, r3, #4
 8001518:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[5] >> 4;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	3305      	adds	r3, #5
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	091b      	lsrs	r3, r3, #4
 8001522:	b2db      	uxtb	r3, r3
 8001524:	60fb      	str	r3, [r7, #12]
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8001526:	697a      	ldr	r2, [r7, #20]
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	431a      	orrs	r2, r3
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	431a      	orrs	r2, r3
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	605a      	str	r2, [r3, #4]

	/* Store the parsed register values for temperature data */
	data_lsb = (uint32_t)reg_data[6] << 8;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3306      	adds	r3, #6
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	021b      	lsls	r3, r3, #8
 800153c:	613b      	str	r3, [r7, #16]
	data_msb = (uint32_t)reg_data[7];
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	3307      	adds	r3, #7
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	617b      	str	r3, [r7, #20]
	uncomp_data->humidity = data_msb | data_lsb;
 8001546:	697a      	ldr	r2, [r7, #20]
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	431a      	orrs	r2, r3
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	609a      	str	r2, [r3, #8]
}
 8001550:	bf00      	nop
 8001552:	371c      	adds	r7, #28
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <bme280_compensate_data>:
 * temperature and/or humidity data according to the component selected
 * by the user.
 */
int8_t bme280_compensate_data(uint8_t sensor_comp, const struct bme280_uncomp_data *uncomp_data,
				     struct bme280_data *comp_data, struct bme280_calib_data *calib_data)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0
 8001562:	60b9      	str	r1, [r7, #8]
 8001564:	607a      	str	r2, [r7, #4]
 8001566:	603b      	str	r3, [r7, #0]
 8001568:	4603      	mov	r3, r0
 800156a:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_OK;
 800156c:	2300      	movs	r3, #0
 800156e:	75fb      	strb	r3, [r7, #23]

	if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL)) {
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d033      	beq.n	80015de <bme280_compensate_data+0x82>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d030      	beq.n	80015de <bme280_compensate_data+0x82>
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d02d      	beq.n	80015de <bme280_compensate_data+0x82>
		/* Initialize to zero */
		comp_data->temperature = 0;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	605a      	str	r2, [r3, #4]
		comp_data->pressure = 0;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
		comp_data->humidity = 0;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
		/* If pressure or temperature component is selected */
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
 8001594:	7bfb      	ldrb	r3, [r7, #15]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	2b00      	cmp	r3, #0
 800159c:	d006      	beq.n	80015ac <bme280_compensate_data+0x50>
			/* Compensate the temperature data */
			comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 800159e:	6839      	ldr	r1, [r7, #0]
 80015a0:	68b8      	ldr	r0, [r7, #8]
 80015a2:	f000 fa1f 	bl	80019e4 <compensate_temperature>
 80015a6:	4602      	mov	r2, r0
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	605a      	str	r2, [r3, #4]
		}
		if (sensor_comp & BME280_PRESS) {
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d006      	beq.n	80015c4 <bme280_compensate_data+0x68>
			/* Compensate the pressure data */
			comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 80015b6:	6839      	ldr	r1, [r7, #0]
 80015b8:	68b8      	ldr	r0, [r7, #8]
 80015ba:	f000 fa75 	bl	8001aa8 <compensate_pressure>
 80015be:	4602      	mov	r2, r0
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	601a      	str	r2, [r3, #0]
		}
		if (sensor_comp & BME280_HUM) {
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
 80015c6:	f003 0304 	and.w	r3, r3, #4
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d009      	beq.n	80015e2 <bme280_compensate_data+0x86>
			/* Compensate the humidity data */
			comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 80015ce:	6839      	ldr	r1, [r7, #0]
 80015d0:	68b8      	ldr	r0, [r7, #8]
 80015d2:	f000 fe0d 	bl	80021f0 <compensate_humidity>
 80015d6:	4602      	mov	r2, r0
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	609a      	str	r2, [r3, #8]
		if (sensor_comp & BME280_HUM) {
 80015dc:	e001      	b.n	80015e2 <bme280_compensate_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 80015de:	23ff      	movs	r3, #255	@ 0xff
 80015e0:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80015e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3718      	adds	r7, #24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <set_osr_settings>:
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings,
				const struct bme280_dev *dev)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b086      	sub	sp, #24
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	4603      	mov	r3, r0
 80015f6:	60b9      	str	r1, [r7, #8]
 80015f8:	607a      	str	r2, [r7, #4]
 80015fa:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 80015fc:	2301      	movs	r3, #1
 80015fe:	75fb      	strb	r3, [r7, #23]

	if (desired_settings & BME280_OSR_HUM_SEL)
 8001600:	7bfb      	ldrb	r3, [r7, #15]
 8001602:	f003 0304 	and.w	r3, r3, #4
 8001606:	2b00      	cmp	r3, #0
 8001608:	d005      	beq.n	8001616 <set_osr_settings+0x28>
		rslt = set_osr_humidity_settings(settings, dev);
 800160a:	6879      	ldr	r1, [r7, #4]
 800160c:	68b8      	ldr	r0, [r7, #8]
 800160e:	f000 f815 	bl	800163c <set_osr_humidity_settings>
 8001612:	4603      	mov	r3, r0
 8001614:	75fb      	strb	r3, [r7, #23]
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 8001616:	7bfb      	ldrb	r3, [r7, #15]
 8001618:	f003 0303 	and.w	r3, r3, #3
 800161c:	2b00      	cmp	r3, #0
 800161e:	d007      	beq.n	8001630 <set_osr_settings+0x42>
		rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 8001620:	7bfb      	ldrb	r3, [r7, #15]
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	68b9      	ldr	r1, [r7, #8]
 8001626:	4618      	mov	r0, r3
 8001628:	f000 f842 	bl	80016b0 <set_osr_press_temp_settings>
 800162c:	4603      	mov	r3, r0
 800162e:	75fb      	strb	r3, [r7, #23]

	return rslt;
 8001630:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001634:	4618      	mov	r0, r3
 8001636:	3718      	adds	r7, #24
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t ctrl_hum;
	uint8_t ctrl_meas;
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 8001646:	23f2      	movs	r3, #242	@ 0xf2
 8001648:	733b      	strb	r3, [r7, #12]

	ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	789b      	ldrb	r3, [r3, #2]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	b2db      	uxtb	r3, r3
 8001654:	73bb      	strb	r3, [r7, #14]
	/* Write the humidity control value in the register */
	rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 8001656:	f107 010e 	add.w	r1, r7, #14
 800165a:	f107 000c 	add.w	r0, r7, #12
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	2201      	movs	r2, #1
 8001662:	f7ff fda2 	bl	80011aa <bme280_set_regs>
 8001666:	4603      	mov	r3, r0
 8001668:	73fb      	strb	r3, [r7, #15]
	/* Humidity related changes will be only effective after a
	   write operation to ctrl_meas register */
	if (rslt == BME280_OK) {
 800166a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d118      	bne.n	80016a4 <set_osr_humidity_settings+0x68>
		reg_addr = BME280_CTRL_MEAS_ADDR;
 8001672:	23f4      	movs	r3, #244	@ 0xf4
 8001674:	733b      	strb	r3, [r7, #12]
		rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 8001676:	7b38      	ldrb	r0, [r7, #12]
 8001678:	f107 010d 	add.w	r1, r7, #13
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	2201      	movs	r2, #1
 8001680:	f7ff fd63 	bl	800114a <bme280_get_regs>
 8001684:	4603      	mov	r3, r0
 8001686:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK)
 8001688:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d109      	bne.n	80016a4 <set_osr_humidity_settings+0x68>
			rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 8001690:	f107 010d 	add.w	r1, r7, #13
 8001694:	f107 000c 	add.w	r0, r7, #12
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	2201      	movs	r2, #1
 800169c:	f7ff fd85 	bl	80011aa <bme280_set_regs>
 80016a0:	4603      	mov	r3, r0
 80016a2:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80016a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3710      	adds	r7, #16
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <set_osr_press_temp_settings>:
 * @brief This API sets the pressure and/or temperature oversampling settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
 80016bc:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 80016be:	23f4      	movs	r3, #244	@ 0xf4
 80016c0:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 80016c2:	7db8      	ldrb	r0, [r7, #22]
 80016c4:	f107 0115 	add.w	r1, r7, #21
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2201      	movs	r2, #1
 80016cc:	f7ff fd3d 	bl	800114a <bme280_get_regs>
 80016d0:	4603      	mov	r3, r0
 80016d2:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 80016d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d11f      	bne.n	800171c <set_osr_press_temp_settings+0x6c>
		if (desired_settings & BME280_OSR_PRESS_SEL)
 80016dc:	7bfb      	ldrb	r3, [r7, #15]
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d005      	beq.n	80016f2 <set_osr_press_temp_settings+0x42>
			fill_osr_press_settings(&reg_data, settings);
 80016e6:	f107 0315 	add.w	r3, r7, #21
 80016ea:	68b9      	ldr	r1, [r7, #8]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f000 f88e 	bl	800180e <fill_osr_press_settings>
		if (desired_settings & BME280_OSR_TEMP_SEL)
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
 80016f4:	f003 0302 	and.w	r3, r3, #2
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d005      	beq.n	8001708 <set_osr_press_temp_settings+0x58>
			fill_osr_temp_settings(&reg_data, settings);
 80016fc:	f107 0315 	add.w	r3, r7, #21
 8001700:	68b9      	ldr	r1, [r7, #8]
 8001702:	4618      	mov	r0, r3
 8001704:	f000 f8a0 	bl	8001848 <fill_osr_temp_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8001708:	f107 0115 	add.w	r1, r7, #21
 800170c:	f107 0016 	add.w	r0, r7, #22
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2201      	movs	r2, #1
 8001714:	f7ff fd49 	bl	80011aa <bme280_set_regs>
 8001718:	4603      	mov	r3, r0
 800171a:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800171c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001720:	4618      	mov	r0, r3
 8001722:	3718      	adds	r7, #24
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <set_filter_standby_settings>:
 * @brief This internal API sets the filter and/or standby duration settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
 8001734:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CONFIG_ADDR;
 8001736:	23f5      	movs	r3, #245	@ 0xf5
 8001738:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 800173a:	7db8      	ldrb	r0, [r7, #22]
 800173c:	f107 0115 	add.w	r1, r7, #21
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2201      	movs	r2, #1
 8001744:	f7ff fd01 	bl	800114a <bme280_get_regs>
 8001748:	4603      	mov	r3, r0
 800174a:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 800174c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d11f      	bne.n	8001794 <set_filter_standby_settings+0x6c>
		if (desired_settings & BME280_FILTER_SEL)
 8001754:	7bfb      	ldrb	r3, [r7, #15]
 8001756:	f003 0308 	and.w	r3, r3, #8
 800175a:	2b00      	cmp	r3, #0
 800175c:	d005      	beq.n	800176a <set_filter_standby_settings+0x42>
			fill_filter_settings(&reg_data, settings);
 800175e:	f107 0315 	add.w	r3, r7, #21
 8001762:	68b9      	ldr	r1, [r7, #8]
 8001764:	4618      	mov	r0, r3
 8001766:	f000 f81b 	bl	80017a0 <fill_filter_settings>
		if (desired_settings & BME280_STANDBY_SEL)
 800176a:	7bfb      	ldrb	r3, [r7, #15]
 800176c:	f003 0310 	and.w	r3, r3, #16
 8001770:	2b00      	cmp	r3, #0
 8001772:	d005      	beq.n	8001780 <set_filter_standby_settings+0x58>
			fill_standby_settings(&reg_data, settings);
 8001774:	f107 0315 	add.w	r3, r7, #21
 8001778:	68b9      	ldr	r1, [r7, #8]
 800177a:	4618      	mov	r0, r3
 800177c:	f000 f82d 	bl	80017da <fill_standby_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8001780:	f107 0115 	add.w	r1, r7, #21
 8001784:	f107 0016 	add.w	r0, r7, #22
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2201      	movs	r2, #1
 800178c:	f7ff fd0d 	bl	80011aa <bme280_set_regs>
 8001790:	4603      	mov	r3, r0
 8001792:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8001794:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001798:	4618      	mov	r0, r3
 800179a:	3718      	adds	r7, #24
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	b25b      	sxtb	r3, r3
 80017b0:	f023 031c 	bic.w	r3, r3, #28
 80017b4:	b25a      	sxtb	r2, r3
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	78db      	ldrb	r3, [r3, #3]
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	b25b      	sxtb	r3, r3
 80017be:	f003 031c 	and.w	r3, r3, #28
 80017c2:	b25b      	sxtb	r3, r3
 80017c4:	4313      	orrs	r3, r2
 80017c6:	b25b      	sxtb	r3, r3
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	701a      	strb	r2, [r3, #0]
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80017da:	b480      	push	{r7}
 80017dc:	b083      	sub	sp, #12
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
 80017e2:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	b25b      	sxtb	r3, r3
 80017ea:	f003 031f 	and.w	r3, r3, #31
 80017ee:	b25a      	sxtb	r2, r3
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	791b      	ldrb	r3, [r3, #4]
 80017f4:	015b      	lsls	r3, r3, #5
 80017f6:	b25b      	sxtb	r3, r3
 80017f8:	4313      	orrs	r3, r2
 80017fa:	b25b      	sxtb	r3, r3
 80017fc:	b2da      	uxtb	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	701a      	strb	r2, [r3, #0]
}
 8001802:	bf00      	nop
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800180e:	b480      	push	{r7}
 8001810:	b083      	sub	sp, #12
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
 8001816:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	b25b      	sxtb	r3, r3
 800181e:	f023 031c 	bic.w	r3, r3, #28
 8001822:	b25a      	sxtb	r2, r3
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	b25b      	sxtb	r3, r3
 800182c:	f003 031c 	and.w	r3, r3, #28
 8001830:	b25b      	sxtb	r3, r3
 8001832:	4313      	orrs	r3, r2
 8001834:	b25b      	sxtb	r3, r3
 8001836:	b2da      	uxtb	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	701a      	strb	r2, [r3, #0]
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	b25b      	sxtb	r3, r3
 8001858:	f003 031f 	and.w	r3, r3, #31
 800185c:	b25a      	sxtb	r2, r3
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	785b      	ldrb	r3, [r3, #1]
 8001862:	015b      	lsls	r3, r3, #5
 8001864:	b25b      	sxtb	r3, r3
 8001866:	4313      	orrs	r3, r2
 8001868:	b25b      	sxtb	r3, r3
 800186a:	b2da      	uxtb	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	701a      	strb	r2, [r3, #0]
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	b2da      	uxtb	r2, r3
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	709a      	strb	r2, [r3, #2]
	settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3302      	adds	r3, #2
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	109b      	asrs	r3, r3, #2
 800189c:	b2db      	uxtb	r3, r3
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	701a      	strb	r2, [r3, #0]
	settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3302      	adds	r3, #2
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	095b      	lsrs	r3, r3, #5
 80018b0:	b2da      	uxtb	r2, r3
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	705a      	strb	r2, [r3, #1]
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	3303      	adds	r3, #3
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	109b      	asrs	r3, r3, #2
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	f003 0307 	and.w	r3, r3, #7
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	70da      	strb	r2, [r3, #3]
	settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	3303      	adds	r3, #3
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	095b      	lsrs	r3, r3, #5
 80018d2:	b2da      	uxtb	r2, r3
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	711a      	strb	r2, [r3, #4]
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <write_power_mode>:
/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	6039      	str	r1, [r7, #0]
 80018ee:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 80018f0:	23f4      	movs	r3, #244	@ 0xf4
 80018f2:	73bb      	strb	r3, [r7, #14]
	/* Variable to store the value read from power mode register */
	uint8_t sensor_mode_reg_val;

	/* Read the power mode register */
	rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 80018f4:	7bb8      	ldrb	r0, [r7, #14]
 80018f6:	f107 010d 	add.w	r1, r7, #13
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	2201      	movs	r2, #1
 80018fe:	f7ff fc24 	bl	800114a <bme280_get_regs>
 8001902:	4603      	mov	r3, r0
 8001904:	73fb      	strb	r3, [r7, #15]
	/* Set the power mode */
	if (rslt == BME280_OK) {
 8001906:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d117      	bne.n	800193e <write_power_mode+0x5a>
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 800190e:	7b7b      	ldrb	r3, [r7, #13]
 8001910:	b25b      	sxtb	r3, r3
 8001912:	f023 0303 	bic.w	r3, r3, #3
 8001916:	b25a      	sxtb	r2, r3
 8001918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191c:	f003 0303 	and.w	r3, r3, #3
 8001920:	b25b      	sxtb	r3, r3
 8001922:	4313      	orrs	r3, r2
 8001924:	b25b      	sxtb	r3, r3
 8001926:	b2db      	uxtb	r3, r3
 8001928:	737b      	strb	r3, [r7, #13]
		/* Write the power mode in the register */
		rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 800192a:	f107 010d 	add.w	r1, r7, #13
 800192e:	f107 000e 	add.w	r0, r7, #14
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	2201      	movs	r2, #1
 8001936:	f7ff fc38 	bl	80011aa <bme280_set_regs>
 800193a:	4603      	mov	r3, r0
 800193c:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 800193e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001942:	4618      	mov	r0, r3
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b086      	sub	sp, #24
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_data[4];
	struct bme280_settings settings;

	rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 8001952:	f107 0110 	add.w	r1, r7, #16
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2204      	movs	r2, #4
 800195a:	20f2      	movs	r0, #242	@ 0xf2
 800195c:	f7ff fbf5 	bl	800114a <bme280_get_regs>
 8001960:	4603      	mov	r3, r0
 8001962:	75fb      	strb	r3, [r7, #23]
	if (rslt == BME280_OK) {
 8001964:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d118      	bne.n	800199e <put_device_to_sleep+0x54>
		parse_device_settings(reg_data, &settings);
 800196c:	f107 0208 	add.w	r2, r7, #8
 8001970:	f107 0310 	add.w	r3, r7, #16
 8001974:	4611      	mov	r1, r2
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff ff80 	bl	800187c <parse_device_settings>
		rslt = bme280_soft_reset(dev);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff fd39 	bl	80013f4 <bme280_soft_reset>
 8001982:	4603      	mov	r3, r0
 8001984:	75fb      	strb	r3, [r7, #23]
		if (rslt == BME280_OK)
 8001986:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d107      	bne.n	800199e <put_device_to_sleep+0x54>
			rslt = reload_device_settings(&settings, dev);
 800198e:	f107 0308 	add.w	r3, r7, #8
 8001992:	6879      	ldr	r1, [r7, #4]
 8001994:	4618      	mov	r0, r3
 8001996:	f000 f808 	bl	80019aa <reload_device_settings>
 800199a:	4603      	mov	r3, r0
 800199c:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800199e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3718      	adds	r7, #24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b084      	sub	sp, #16
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
 80019b2:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	201f      	movs	r0, #31
 80019ba:	f7ff fe18 	bl	80015ee <set_osr_settings>
 80019be:	4603      	mov	r3, r0
 80019c0:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME280_OK)
 80019c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d106      	bne.n	80019d8 <reload_device_settings+0x2e>
		rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 80019ca:	683a      	ldr	r2, [r7, #0]
 80019cc:	6879      	ldr	r1, [r7, #4]
 80019ce:	201f      	movs	r0, #31
 80019d0:	f7ff feaa 	bl	8001728 <set_filter_standby_settings>
 80019d4:	4603      	mov	r3, r0
 80019d6:	73fb      	strb	r3, [r7, #15]

	return rslt;
 80019d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in integer data type.
 */
static int32_t compensate_temperature(const struct bme280_uncomp_data *uncomp_data,
						struct bme280_calib_data *calib_data)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b089      	sub	sp, #36	@ 0x24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
	int32_t var1;
	int32_t var2;
	int32_t temperature;
	int32_t temperature_min = -4000;
 80019ee:	4b2d      	ldr	r3, [pc, #180]	@ (8001aa4 <compensate_temperature+0xc0>)
 80019f0:	61bb      	str	r3, [r7, #24]
	int32_t temperature_max = 8500;
 80019f2:	f242 1334 	movw	r3, #8500	@ 0x2134
 80019f6:	617b      	str	r3, [r7, #20]

	var1 = (int32_t)((uncomp_data->temperature / 8) - ((int32_t)calib_data->dig_T1 * 2));
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	08db      	lsrs	r3, r3, #3
 80019fe:	683a      	ldr	r2, [r7, #0]
 8001a00:	8812      	ldrh	r2, [r2, #0]
 8001a02:	0052      	lsls	r2, r2, #1
 8001a04:	1a9b      	subs	r3, r3, r2
 8001a06:	613b      	str	r3, [r7, #16]
	var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a0e:	461a      	mov	r2, r3
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	fb02 f303 	mul.w	r3, r2, r3
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	da01      	bge.n	8001a1e <compensate_temperature+0x3a>
 8001a1a:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8001a1e:	12db      	asrs	r3, r3, #11
 8001a20:	613b      	str	r3, [r7, #16]
	var2 = (int32_t)((uncomp_data->temperature / 16) - ((int32_t)calib_data->dig_T1));
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	091b      	lsrs	r3, r3, #4
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	8812      	ldrh	r2, [r2, #0]
 8001a2c:	1a9b      	subs	r3, r3, r2
 8001a2e:	60fb      	str	r3, [r7, #12]
	var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_T3)) / 16384;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	fb03 f303 	mul.w	r3, r3, r3
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	da01      	bge.n	8001a3e <compensate_temperature+0x5a>
 8001a3a:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8001a3e:	131b      	asrs	r3, r3, #12
 8001a40:	461a      	mov	r2, r3
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a48:	fb02 f303 	mul.w	r3, r2, r3
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	da02      	bge.n	8001a56 <compensate_temperature+0x72>
 8001a50:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 8001a54:	333f      	adds	r3, #63	@ 0x3f
 8001a56:	139b      	asrs	r3, r3, #14
 8001a58:	60fb      	str	r3, [r7, #12]
	calib_data->t_fine = var1 + var2;
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	441a      	add	r2, r3
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	625a      	str	r2, [r3, #36]	@ 0x24
	temperature = (calib_data->t_fine * 5 + 128) / 256;
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a68:	4613      	mov	r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4413      	add	r3, r2
 8001a6e:	3380      	adds	r3, #128	@ 0x80
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	da00      	bge.n	8001a76 <compensate_temperature+0x92>
 8001a74:	33ff      	adds	r3, #255	@ 0xff
 8001a76:	121b      	asrs	r3, r3, #8
 8001a78:	61fb      	str	r3, [r7, #28]

	if (temperature < temperature_min)
 8001a7a:	69fa      	ldr	r2, [r7, #28]
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	da02      	bge.n	8001a88 <compensate_temperature+0xa4>
		temperature = temperature_min;
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	61fb      	str	r3, [r7, #28]
 8001a86:	e005      	b.n	8001a94 <compensate_temperature+0xb0>
	else if (temperature > temperature_max)
 8001a88:	69fa      	ldr	r2, [r7, #28]
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	dd01      	ble.n	8001a94 <compensate_temperature+0xb0>
		temperature = temperature_max;
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	61fb      	str	r3, [r7, #28]

	return temperature;
 8001a94:	69fb      	ldr	r3, [r7, #28]
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3724      	adds	r7, #36	@ 0x24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	fffff060 	.word	0xfffff060

08001aa8 <compensate_pressure>:
 * return the compensated pressure data in integer data type with higher
 * accuracy.
 */
static uint32_t compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8001aa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001aac:	b0ea      	sub	sp, #424	@ 0x1a8
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	f8c7 0174 	str.w	r0, [r7, #372]	@ 0x174
 8001ab4:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int64_t var4;
	uint32_t pressure;
	uint32_t pressure_min = 3000000;
 8001ab8:	4bbf      	ldr	r3, [pc, #764]	@ (8001db8 <compensate_pressure+0x310>)
 8001aba:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
	uint32_t pressure_max = 11000000;
 8001abe:	4bbf      	ldr	r3, [pc, #764]	@ (8001dbc <compensate_pressure+0x314>)
 8001ac0:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c

	var1 = ((int64_t)calib_data->t_fine) - 128000;
 8001ac4:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aca:	17da      	asrs	r2, r3, #31
 8001acc:	4698      	mov	r8, r3
 8001ace:	4691      	mov	r9, r2
 8001ad0:	f5b8 3afa 	subs.w	sl, r8, #128000	@ 0x1f400
 8001ad4:	f149 3bff 	adc.w	fp, r9, #4294967295
 8001ad8:	e9c7 ab64 	strd	sl, fp, [r7, #400]	@ 0x190
	var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
 8001adc:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001ae0:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001ae4:	fb03 f102 	mul.w	r1, r3, r2
 8001ae8:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001aec:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001af0:	fb02 f303 	mul.w	r3, r2, r3
 8001af4:	18ca      	adds	r2, r1, r3
 8001af6:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001afa:	fba3 4503 	umull	r4, r5, r3, r3
 8001afe:	1953      	adds	r3, r2, r5
 8001b00:	461d      	mov	r5, r3
 8001b02:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001b06:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001b0a:	b21b      	sxth	r3, r3
 8001b0c:	17da      	asrs	r2, r3, #31
 8001b0e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001b12:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 8001b16:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	fb03 f205 	mul.w	r2, r3, r5
 8001b20:	460b      	mov	r3, r1
 8001b22:	fb04 f303 	mul.w	r3, r4, r3
 8001b26:	4413      	add	r3, r2
 8001b28:	4602      	mov	r2, r0
 8001b2a:	fba4 1202 	umull	r1, r2, r4, r2
 8001b2e:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 8001b32:	460a      	mov	r2, r1
 8001b34:	f8c7 2128 	str.w	r2, [r7, #296]	@ 0x128
 8001b38:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001b3c:	4413      	add	r3, r2
 8001b3e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001b42:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	@ 0x128
 8001b46:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
 8001b4a:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
	var2 = var2 + ((var1 * (int64_t)calib_data->dig_P5) * 131072);
 8001b4e:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001b52:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001b56:	b21b      	sxth	r3, r3
 8001b58:	17da      	asrs	r2, r3, #31
 8001b5a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8001b5e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001b62:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001b66:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	@ 0x118
 8001b6a:	462a      	mov	r2, r5
 8001b6c:	fb02 f203 	mul.w	r2, r2, r3
 8001b70:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001b74:	4621      	mov	r1, r4
 8001b76:	fb01 f303 	mul.w	r3, r1, r3
 8001b7a:	441a      	add	r2, r3
 8001b7c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001b80:	4621      	mov	r1, r4
 8001b82:	fba3 1301 	umull	r1, r3, r3, r1
 8001b86:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8001b90:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001b94:	18d3      	adds	r3, r2, r3
 8001b96:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8001b9a:	f04f 0000 	mov.w	r0, #0
 8001b9e:	f04f 0100 	mov.w	r1, #0
 8001ba2:	e9d7 455a 	ldrd	r4, r5, [r7, #360]	@ 0x168
 8001ba6:	462b      	mov	r3, r5
 8001ba8:	0459      	lsls	r1, r3, #17
 8001baa:	4623      	mov	r3, r4
 8001bac:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001bb0:	4623      	mov	r3, r4
 8001bb2:	0458      	lsls	r0, r3, #17
 8001bb4:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8001bb8:	1814      	adds	r4, r2, r0
 8001bba:	f8c7 40a8 	str.w	r4, [r7, #168]	@ 0xa8
 8001bbe:	414b      	adcs	r3, r1
 8001bc0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001bc4:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 8001bc8:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
	var2 = var2 + (((int64_t)calib_data->dig_P4) * 34359738368);
 8001bcc:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001bd0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001bd4:	b21b      	sxth	r3, r3
 8001bd6:	17da      	asrs	r2, r3, #31
 8001bd8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8001bdc:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 8001be0:	f04f 0000 	mov.w	r0, #0
 8001be4:	f04f 0100 	mov.w	r1, #0
 8001be8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001bec:	00d9      	lsls	r1, r3, #3
 8001bee:	2000      	movs	r0, #0
 8001bf0:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8001bf4:	1814      	adds	r4, r2, r0
 8001bf6:	f8c7 40a0 	str.w	r4, [r7, #160]	@ 0xa0
 8001bfa:	414b      	adcs	r3, r1
 8001bfc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001c00:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	@ 0xa0
 8001c04:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
	var1 = ((var1 * var1 * (int64_t)calib_data->dig_P3) / 256) + ((var1 * ((int64_t)calib_data->dig_P2) * 4096));
 8001c08:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001c0c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001c10:	fb03 f102 	mul.w	r1, r3, r2
 8001c14:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001c18:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001c1c:	fb02 f303 	mul.w	r3, r2, r3
 8001c20:	18ca      	adds	r2, r1, r3
 8001c22:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001c26:	fba3 1303 	umull	r1, r3, r3, r3
 8001c2a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8001c2e:	460b      	mov	r3, r1
 8001c30:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8001c34:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001c38:	18d3      	adds	r3, r2, r3
 8001c3a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8001c3e:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001c42:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001c46:	b21b      	sxth	r3, r3
 8001c48:	17da      	asrs	r2, r3, #31
 8001c4a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8001c4e:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8001c52:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 8001c56:	462b      	mov	r3, r5
 8001c58:	e9d7 8942 	ldrd	r8, r9, [r7, #264]	@ 0x108
 8001c5c:	4642      	mov	r2, r8
 8001c5e:	fb02 f203 	mul.w	r2, r2, r3
 8001c62:	464b      	mov	r3, r9
 8001c64:	4621      	mov	r1, r4
 8001c66:	fb01 f303 	mul.w	r3, r1, r3
 8001c6a:	4413      	add	r3, r2
 8001c6c:	4622      	mov	r2, r4
 8001c6e:	4641      	mov	r1, r8
 8001c70:	fba2 1201 	umull	r1, r2, r2, r1
 8001c74:	f8c7 215c 	str.w	r2, [r7, #348]	@ 0x15c
 8001c78:	460a      	mov	r2, r1
 8001c7a:	f8c7 2158 	str.w	r2, [r7, #344]	@ 0x158
 8001c7e:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 8001c82:	4413      	add	r3, r2
 8001c84:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8001c88:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	da09      	bge.n	8001ca4 <compensate_pressure+0x1fc>
 8001c90:	f112 01ff 	adds.w	r1, r2, #255	@ 0xff
 8001c94:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8001c98:	f143 0300 	adc.w	r3, r3, #0
 8001c9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001ca0:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8001ca4:	f04f 0000 	mov.w	r0, #0
 8001ca8:	f04f 0100 	mov.w	r1, #0
 8001cac:	0a10      	lsrs	r0, r2, #8
 8001cae:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001cb2:	1219      	asrs	r1, r3, #8
 8001cb4:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001cb8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001cbc:	b21b      	sxth	r3, r3
 8001cbe:	17da      	asrs	r2, r3, #31
 8001cc0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001cc4:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8001cc8:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001ccc:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	@ 0x100
 8001cd0:	464a      	mov	r2, r9
 8001cd2:	fb02 f203 	mul.w	r2, r2, r3
 8001cd6:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001cda:	4644      	mov	r4, r8
 8001cdc:	fb04 f303 	mul.w	r3, r4, r3
 8001ce0:	441a      	add	r2, r3
 8001ce2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001ce6:	4644      	mov	r4, r8
 8001ce8:	fba3 4304 	umull	r4, r3, r3, r4
 8001cec:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001cf0:	4623      	mov	r3, r4
 8001cf2:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001cf6:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001cfa:	18d3      	adds	r3, r2, r3
 8001cfc:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001d00:	f04f 0200 	mov.w	r2, #0
 8001d04:	f04f 0300 	mov.w	r3, #0
 8001d08:	e9d7 8954 	ldrd	r8, r9, [r7, #336]	@ 0x150
 8001d0c:	464c      	mov	r4, r9
 8001d0e:	0323      	lsls	r3, r4, #12
 8001d10:	4644      	mov	r4, r8
 8001d12:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001d16:	4644      	mov	r4, r8
 8001d18:	0322      	lsls	r2, r4, #12
 8001d1a:	1884      	adds	r4, r0, r2
 8001d1c:	f8c7 4090 	str.w	r4, [r7, #144]	@ 0x90
 8001d20:	eb41 0303 	adc.w	r3, r1, r3
 8001d24:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001d28:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	@ 0x90
 8001d2c:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
	var3 = ((int64_t)1) * 140737488355328;
 8001d30:	f04f 0200 	mov.w	r2, #0
 8001d34:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001d38:	e9c7 2360 	strd	r2, r3, [r7, #384]	@ 0x180
	var1 = (var3 + var1) * ((int64_t)calib_data->dig_P1) / 8589934592;
 8001d3c:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	@ 0x180
 8001d40:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8001d44:	1884      	adds	r4, r0, r2
 8001d46:	f8c7 40f8 	str.w	r4, [r7, #248]	@ 0xf8
 8001d4a:	eb41 0303 	adc.w	r3, r1, r3
 8001d4e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001d52:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001d56:	88db      	ldrh	r3, [r3, #6]
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8001d60:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001d64:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8001d68:	462b      	mov	r3, r5
 8001d6a:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 8001d6e:	4642      	mov	r2, r8
 8001d70:	fb02 f203 	mul.w	r2, r2, r3
 8001d74:	464b      	mov	r3, r9
 8001d76:	4621      	mov	r1, r4
 8001d78:	fb01 f303 	mul.w	r3, r1, r3
 8001d7c:	4413      	add	r3, r2
 8001d7e:	4622      	mov	r2, r4
 8001d80:	4641      	mov	r1, r8
 8001d82:	fba2 1201 	umull	r1, r2, r2, r1
 8001d86:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001d8a:	460a      	mov	r2, r1
 8001d8c:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001d90:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001d94:	4413      	add	r3, r2
 8001d96:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001d9a:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	da0e      	bge.n	8001dc0 <compensate_pressure+0x318>
 8001da2:	1e51      	subs	r1, r2, #1
 8001da4:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8001da8:	f143 0301 	adc.w	r3, r3, #1
 8001dac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001db0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001db4:	e004      	b.n	8001dc0 <compensate_pressure+0x318>
 8001db6:	bf00      	nop
 8001db8:	002dc6c0 	.word	0x002dc6c0
 8001dbc:	00a7d8c0 	.word	0x00a7d8c0
 8001dc0:	f04f 0000 	mov.w	r0, #0
 8001dc4:	f04f 0100 	mov.w	r1, #0
 8001dc8:	1058      	asrs	r0, r3, #1
 8001dca:	17d9      	asrs	r1, r3, #31
 8001dcc:	e9c7 0164 	strd	r0, r1, [r7, #400]	@ 0x190

	/* To avoid divide by zero exception */
	if (var1 != 0) {
 8001dd0:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	f000 81fc 	beq.w	80021d2 <compensate_pressure+0x72a>
		var4 = 1048576 - uncomp_data->pressure;
 8001dda:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001de4:	2200      	movs	r2, #0
 8001de6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001dea:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001dee:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	@ 0x80
 8001df2:	e9c7 345e 	strd	r3, r4, [r7, #376]	@ 0x178
		var4 = (((var4 * 2147483648) - var2) * 3125) / var1;
 8001df6:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 8001dfa:	f04f 0000 	mov.w	r0, #0
 8001dfe:	f04f 0100 	mov.w	r1, #0
 8001e02:	07d9      	lsls	r1, r3, #31
 8001e04:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8001e08:	07d0      	lsls	r0, r2, #31
 8001e0a:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8001e0e:	1a84      	subs	r4, r0, r2
 8001e10:	f8c7 40e8 	str.w	r4, [r7, #232]	@ 0xe8
 8001e14:	eb61 0303 	sbc.w	r3, r1, r3
 8001e18:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001e1c:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001e20:	4622      	mov	r2, r4
 8001e22:	462b      	mov	r3, r5
 8001e24:	1891      	adds	r1, r2, r2
 8001e26:	67b9      	str	r1, [r7, #120]	@ 0x78
 8001e28:	415b      	adcs	r3, r3
 8001e2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001e2c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8001e30:	4621      	mov	r1, r4
 8001e32:	1851      	adds	r1, r2, r1
 8001e34:	6739      	str	r1, [r7, #112]	@ 0x70
 8001e36:	4629      	mov	r1, r5
 8001e38:	414b      	adcs	r3, r1
 8001e3a:	677b      	str	r3, [r7, #116]	@ 0x74
 8001e3c:	f04f 0200 	mov.w	r2, #0
 8001e40:	f04f 0300 	mov.w	r3, #0
 8001e44:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8001e48:	4649      	mov	r1, r9
 8001e4a:	018b      	lsls	r3, r1, #6
 8001e4c:	4641      	mov	r1, r8
 8001e4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e52:	4641      	mov	r1, r8
 8001e54:	018a      	lsls	r2, r1, #6
 8001e56:	4641      	mov	r1, r8
 8001e58:	1889      	adds	r1, r1, r2
 8001e5a:	66b9      	str	r1, [r7, #104]	@ 0x68
 8001e5c:	4649      	mov	r1, r9
 8001e5e:	eb43 0101 	adc.w	r1, r3, r1
 8001e62:	66f9      	str	r1, [r7, #108]	@ 0x6c
 8001e64:	f04f 0200 	mov.w	r2, #0
 8001e68:	f04f 0300 	mov.w	r3, #0
 8001e6c:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8001e70:	4649      	mov	r1, r9
 8001e72:	008b      	lsls	r3, r1, #2
 8001e74:	4641      	mov	r1, r8
 8001e76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001e7a:	4641      	mov	r1, r8
 8001e7c:	008a      	lsls	r2, r1, #2
 8001e7e:	4610      	mov	r0, r2
 8001e80:	4619      	mov	r1, r3
 8001e82:	4603      	mov	r3, r0
 8001e84:	4622      	mov	r2, r4
 8001e86:	189b      	adds	r3, r3, r2
 8001e88:	663b      	str	r3, [r7, #96]	@ 0x60
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	462a      	mov	r2, r5
 8001e8e:	eb42 0303 	adc.w	r3, r2, r3
 8001e92:	667b      	str	r3, [r7, #100]	@ 0x64
 8001e94:	f04f 0200 	mov.w	r2, #0
 8001e98:	f04f 0300 	mov.w	r3, #0
 8001e9c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8001ea0:	4649      	mov	r1, r9
 8001ea2:	008b      	lsls	r3, r1, #2
 8001ea4:	4641      	mov	r1, r8
 8001ea6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001eaa:	4641      	mov	r1, r8
 8001eac:	008a      	lsls	r2, r1, #2
 8001eae:	4610      	mov	r0, r2
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	4622      	mov	r2, r4
 8001eb6:	189b      	adds	r3, r3, r2
 8001eb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001ebc:	462b      	mov	r3, r5
 8001ebe:	460a      	mov	r2, r1
 8001ec0:	eb42 0303 	adc.w	r3, r2, r3
 8001ec4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001ec8:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8001ecc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001ed0:	f7fe fef2 	bl	8000cb8 <__aeabi_ldivmod>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	e9c7 235e 	strd	r2, r3, [r7, #376]	@ 0x178
		var1 = (((int64_t)calib_data->dig_P9) * (var4 / 8192) * (var4 / 8192)) / 33554432;
 8001edc:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001ee0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001ee4:	b21b      	sxth	r3, r3
 8001ee6:	17da      	asrs	r2, r3, #31
 8001ee8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001eec:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001ef0:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	da08      	bge.n	8001f0a <compensate_pressure+0x462>
 8001ef8:	f641 71ff 	movw	r1, #8191	@ 0x1fff
 8001efc:	1851      	adds	r1, r2, r1
 8001efe:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001f00:	f143 0300 	adc.w	r3, r3, #0
 8001f04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001f06:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001f0a:	f04f 0000 	mov.w	r0, #0
 8001f0e:	f04f 0100 	mov.w	r1, #0
 8001f12:	0b50      	lsrs	r0, r2, #13
 8001f14:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001f18:	1359      	asrs	r1, r3, #13
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001f22:	4629      	mov	r1, r5
 8001f24:	fb02 f001 	mul.w	r0, r2, r1
 8001f28:	4621      	mov	r1, r4
 8001f2a:	fb01 f103 	mul.w	r1, r1, r3
 8001f2e:	4401      	add	r1, r0
 8001f30:	4620      	mov	r0, r4
 8001f32:	fba0 2302 	umull	r2, r3, r0, r2
 8001f36:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8001f40:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8001f44:	18cb      	adds	r3, r1, r3
 8001f46:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8001f4a:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	da08      	bge.n	8001f64 <compensate_pressure+0x4bc>
 8001f52:	f641 71ff 	movw	r1, #8191	@ 0x1fff
 8001f56:	1851      	adds	r1, r2, r1
 8001f58:	6539      	str	r1, [r7, #80]	@ 0x50
 8001f5a:	f143 0300 	adc.w	r3, r3, #0
 8001f5e:	657b      	str	r3, [r7, #84]	@ 0x54
 8001f60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001f64:	f04f 0000 	mov.w	r0, #0
 8001f68:	f04f 0100 	mov.w	r1, #0
 8001f6c:	0b50      	lsrs	r0, r2, #13
 8001f6e:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001f72:	1359      	asrs	r1, r3, #13
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	@ 0x140
 8001f7c:	4629      	mov	r1, r5
 8001f7e:	fb02 f001 	mul.w	r0, r2, r1
 8001f82:	4621      	mov	r1, r4
 8001f84:	fb01 f103 	mul.w	r1, r1, r3
 8001f88:	4401      	add	r1, r0
 8001f8a:	4620      	mov	r0, r4
 8001f8c:	fba0 2302 	umull	r2, r3, r0, r2
 8001f90:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8001f94:	4613      	mov	r3, r2
 8001f96:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8001f9a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001f9e:	18cb      	adds	r3, r1, r3
 8001fa0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8001fa4:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	da08      	bge.n	8001fbe <compensate_pressure+0x516>
 8001fac:	f06f 417e 	mvn.w	r1, #4261412864	@ 0xfe000000
 8001fb0:	1851      	adds	r1, r2, r1
 8001fb2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001fb4:	f143 0300 	adc.w	r3, r3, #0
 8001fb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001fba:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001fbe:	f04f 0000 	mov.w	r0, #0
 8001fc2:	f04f 0100 	mov.w	r1, #0
 8001fc6:	0e50      	lsrs	r0, r2, #25
 8001fc8:	ea40 10c3 	orr.w	r0, r0, r3, lsl #7
 8001fcc:	1659      	asrs	r1, r3, #25
 8001fce:	e9c7 0164 	strd	r0, r1, [r7, #400]	@ 0x190
		var2 = (((int64_t)calib_data->dig_P8) * var4) / 524288;
 8001fd2:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001fd6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001fda:	b21b      	sxth	r3, r3
 8001fdc:	17da      	asrs	r2, r3, #31
 8001fde:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001fe2:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001fe6:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8001fea:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001fee:	462a      	mov	r2, r5
 8001ff0:	fb02 f203 	mul.w	r2, r2, r3
 8001ff4:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001ff8:	4621      	mov	r1, r4
 8001ffa:	fb01 f303 	mul.w	r3, r1, r3
 8001ffe:	441a      	add	r2, r3
 8002000:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8002004:	4621      	mov	r1, r4
 8002006:	fba3 1301 	umull	r1, r3, r3, r1
 800200a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800200e:	460b      	mov	r3, r1
 8002010:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8002014:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002018:	18d3      	adds	r3, r2, r3
 800201a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800201e:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8002022:	2b00      	cmp	r3, #0
 8002024:	da07      	bge.n	8002036 <compensate_pressure+0x58e>
 8002026:	4971      	ldr	r1, [pc, #452]	@ (80021ec <compensate_pressure+0x744>)
 8002028:	1851      	adds	r1, r2, r1
 800202a:	6439      	str	r1, [r7, #64]	@ 0x40
 800202c:	f143 0300 	adc.w	r3, r3, #0
 8002030:	647b      	str	r3, [r7, #68]	@ 0x44
 8002032:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002036:	f04f 0000 	mov.w	r0, #0
 800203a:	f04f 0100 	mov.w	r1, #0
 800203e:	0cd0      	lsrs	r0, r2, #19
 8002040:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 8002044:	14d9      	asrs	r1, r3, #19
 8002046:	e9c7 0162 	strd	r0, r1, [r7, #392]	@ 0x188
		var4 = ((var4 + var1 + var2) / 256) + (((int64_t)calib_data->dig_P7) * 16);
 800204a:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	@ 0x178
 800204e:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8002052:	1884      	adds	r4, r0, r2
 8002054:	f8c7 40c8 	str.w	r4, [r7, #200]	@ 0xc8
 8002058:	eb41 0303 	adc.w	r3, r1, r3
 800205c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002060:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8002064:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8002068:	4621      	mov	r1, r4
 800206a:	1889      	adds	r1, r1, r2
 800206c:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 8002070:	4629      	mov	r1, r5
 8002072:	eb43 0101 	adc.w	r1, r3, r1
 8002076:	f8c7 10c4 	str.w	r1, [r7, #196]	@ 0xc4
 800207a:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 800207e:	2b00      	cmp	r3, #0
 8002080:	da07      	bge.n	8002092 <compensate_pressure+0x5ea>
 8002082:	f112 01ff 	adds.w	r1, r2, #255	@ 0xff
 8002086:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002088:	f143 0300 	adc.w	r3, r3, #0
 800208c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800208e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002092:	f04f 0000 	mov.w	r0, #0
 8002096:	f04f 0100 	mov.w	r1, #0
 800209a:	0a10      	lsrs	r0, r2, #8
 800209c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80020a0:	1219      	asrs	r1, r3, #8
 80020a2:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80020a6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80020aa:	b21b      	sxth	r3, r3
 80020ac:	17da      	asrs	r2, r3, #31
 80020ae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80020b2:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80020b6:	f04f 0200 	mov.w	r2, #0
 80020ba:	f04f 0300 	mov.w	r3, #0
 80020be:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80020c2:	464c      	mov	r4, r9
 80020c4:	0123      	lsls	r3, r4, #4
 80020c6:	4644      	mov	r4, r8
 80020c8:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80020cc:	4644      	mov	r4, r8
 80020ce:	0122      	lsls	r2, r4, #4
 80020d0:	1884      	adds	r4, r0, r2
 80020d2:	633c      	str	r4, [r7, #48]	@ 0x30
 80020d4:	eb41 0303 	adc.w	r3, r1, r3
 80020d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80020da:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80020de:	e9c7 345e 	strd	r3, r4, [r7, #376]	@ 0x178
		pressure = (uint32_t)(((var4 / 2) * 100) / 128);
 80020e2:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 80020e6:	0fd9      	lsrs	r1, r3, #31
 80020e8:	2000      	movs	r0, #0
 80020ea:	62b9      	str	r1, [r7, #40]	@ 0x28
 80020ec:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80020ee:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 80020f2:	4621      	mov	r1, r4
 80020f4:	1889      	adds	r1, r1, r2
 80020f6:	6239      	str	r1, [r7, #32]
 80020f8:	4629      	mov	r1, r5
 80020fa:	eb43 0101 	adc.w	r1, r3, r1
 80020fe:	6279      	str	r1, [r7, #36]	@ 0x24
 8002100:	f04f 0200 	mov.w	r2, #0
 8002104:	f04f 0300 	mov.w	r3, #0
 8002108:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800210c:	4621      	mov	r1, r4
 800210e:	084a      	lsrs	r2, r1, #1
 8002110:	4629      	mov	r1, r5
 8002112:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8002116:	4629      	mov	r1, r5
 8002118:	104b      	asrs	r3, r1, #1
 800211a:	4610      	mov	r0, r2
 800211c:	4619      	mov	r1, r3
 800211e:	4602      	mov	r2, r0
 8002120:	460b      	mov	r3, r1
 8002122:	1894      	adds	r4, r2, r2
 8002124:	61bc      	str	r4, [r7, #24]
 8002126:	415b      	adcs	r3, r3
 8002128:	61fb      	str	r3, [r7, #28]
 800212a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800212e:	1814      	adds	r4, r2, r0
 8002130:	613c      	str	r4, [r7, #16]
 8002132:	414b      	adcs	r3, r1
 8002134:	617b      	str	r3, [r7, #20]
 8002136:	f04f 0200 	mov.w	r2, #0
 800213a:	f04f 0300 	mov.w	r3, #0
 800213e:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002142:	464c      	mov	r4, r9
 8002144:	0163      	lsls	r3, r4, #5
 8002146:	4644      	mov	r4, r8
 8002148:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800214c:	4644      	mov	r4, r8
 800214e:	0162      	lsls	r2, r4, #5
 8002150:	4644      	mov	r4, r8
 8002152:	18a4      	adds	r4, r4, r2
 8002154:	60bc      	str	r4, [r7, #8]
 8002156:	464c      	mov	r4, r9
 8002158:	eb43 0404 	adc.w	r4, r3, r4
 800215c:	60fc      	str	r4, [r7, #12]
 800215e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002162:	4623      	mov	r3, r4
 8002164:	181b      	adds	r3, r3, r0
 8002166:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800216a:	462b      	mov	r3, r5
 800216c:	eb41 0303 	adc.w	r3, r1, r3
 8002170:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002174:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 8002178:	2b00      	cmp	r3, #0
 800217a:	da07      	bge.n	800218c <compensate_pressure+0x6e4>
 800217c:	f112 017f 	adds.w	r1, r2, #127	@ 0x7f
 8002180:	6039      	str	r1, [r7, #0]
 8002182:	f143 0300 	adc.w	r3, r3, #0
 8002186:	607b      	str	r3, [r7, #4]
 8002188:	e9d7 2300 	ldrd	r2, r3, [r7]
 800218c:	f04f 0000 	mov.w	r0, #0
 8002190:	f04f 0100 	mov.w	r1, #0
 8002194:	09d0      	lsrs	r0, r2, #7
 8002196:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 800219a:	11d9      	asrs	r1, r3, #7
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
 80021a0:	4613      	mov	r3, r2
 80021a2:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4

		if (pressure < pressure_min)
 80021a6:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 80021aa:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d204      	bcs.n	80021bc <compensate_pressure+0x714>
			pressure = pressure_min;
 80021b2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80021b6:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80021ba:	e00e      	b.n	80021da <compensate_pressure+0x732>
		else if (pressure > pressure_max)
 80021bc:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 80021c0:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d908      	bls.n	80021da <compensate_pressure+0x732>
			pressure = pressure_max;
 80021c8:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 80021cc:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80021d0:	e003      	b.n	80021da <compensate_pressure+0x732>
	} else {
		pressure = pressure_min;
 80021d2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80021d6:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
	}

	return pressure;
 80021da:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
}
 80021de:	4618      	mov	r0, r3
 80021e0:	f507 77d4 	add.w	r7, r7, #424	@ 0x1a8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021ea:	bf00      	nop
 80021ec:	0007ffff 	.word	0x0007ffff

080021f0 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in integer data type.
 */
static uint32_t compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b08b      	sub	sp, #44	@ 0x2c
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
	int32_t var2;
	int32_t var3;
	int32_t var4;
	int32_t var5;
	uint32_t humidity;
	uint32_t humidity_max = 102400;
 80021fa:	f44f 33c8 	mov.w	r3, #102400	@ 0x19000
 80021fe:	623b      	str	r3, [r7, #32]

	var1 = calib_data->t_fine - ((int32_t)76800);
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002204:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8002208:	61fb      	str	r3, [r7, #28]
	var2 = (int32_t)(uncomp_data->humidity * 16384);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	039b      	lsls	r3, r3, #14
 8002210:	61bb      	str	r3, [r7, #24]
	var3 = (int32_t)(((int32_t)calib_data->dig_H4) * 1048576);
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002218:	051b      	lsls	r3, r3, #20
 800221a:	617b      	str	r3, [r7, #20]
	var4 = ((int32_t)calib_data->dig_H5) * var1;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002222:	461a      	mov	r2, r3
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	fb02 f303 	mul.w	r3, r2, r3
 800222a:	613b      	str	r3, [r7, #16]
	var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	1ad2      	subs	r2, r2, r3
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800223a:	2b00      	cmp	r3, #0
 800223c:	da02      	bge.n	8002244 <compensate_humidity+0x54>
 800223e:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8002242:	337f      	adds	r3, #127	@ 0x7f
 8002244:	13db      	asrs	r3, r3, #15
 8002246:	60fb      	str	r3, [r7, #12]
	var2 = (var1 * ((int32_t)calib_data->dig_H6)) / 1024;
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	f993 3022 	ldrsb.w	r3, [r3, #34]	@ 0x22
 800224e:	461a      	mov	r2, r3
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	fb02 f303 	mul.w	r3, r2, r3
 8002256:	2b00      	cmp	r3, #0
 8002258:	da01      	bge.n	800225e <compensate_humidity+0x6e>
 800225a:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 800225e:	129b      	asrs	r3, r3, #10
 8002260:	61bb      	str	r3, [r7, #24]
	var3 = (var1 * ((int32_t)calib_data->dig_H3)) / 2048;
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	7f1b      	ldrb	r3, [r3, #28]
 8002266:	461a      	mov	r2, r3
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	fb02 f303 	mul.w	r3, r2, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	da01      	bge.n	8002276 <compensate_humidity+0x86>
 8002272:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8002276:	12db      	asrs	r3, r3, #11
 8002278:	617b      	str	r3, [r7, #20]
	var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	fb02 f303 	mul.w	r3, r2, r3
 8002286:	2b00      	cmp	r3, #0
 8002288:	da01      	bge.n	800228e <compensate_humidity+0x9e>
 800228a:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 800228e:	129b      	asrs	r3, r3, #10
 8002290:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8002294:	613b      	str	r3, [r7, #16]
	var2 = ((var4 * ((int32_t)calib_data->dig_H2)) + 8192) / 16384;
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800229c:	461a      	mov	r2, r3
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	fb02 f303 	mul.w	r3, r2, r3
 80022a4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	da02      	bge.n	80022b2 <compensate_humidity+0xc2>
 80022ac:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 80022b0:	333f      	adds	r3, #63	@ 0x3f
 80022b2:	139b      	asrs	r3, r3, #14
 80022b4:	61bb      	str	r3, [r7, #24]
	var3 = var5 * var2;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	fb02 f303 	mul.w	r3, r2, r3
 80022be:	617b      	str	r3, [r7, #20]
	var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	da02      	bge.n	80022cc <compensate_humidity+0xdc>
 80022c6:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 80022ca:	337f      	adds	r3, #127	@ 0x7f
 80022cc:	13db      	asrs	r3, r3, #15
 80022ce:	461a      	mov	r2, r3
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	da02      	bge.n	80022dc <compensate_humidity+0xec>
 80022d6:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 80022da:	337f      	adds	r3, #127	@ 0x7f
 80022dc:	13db      	asrs	r3, r3, #15
 80022de:	fb02 f303 	mul.w	r3, r2, r3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	da00      	bge.n	80022e8 <compensate_humidity+0xf8>
 80022e6:	337f      	adds	r3, #127	@ 0x7f
 80022e8:	11db      	asrs	r3, r3, #7
 80022ea:	613b      	str	r3, [r7, #16]
	var5 = var3 - ((var4 * ((int32_t)calib_data->dig_H1)) / 16);
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	7e1b      	ldrb	r3, [r3, #24]
 80022f0:	461a      	mov	r2, r3
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	fb02 f303 	mul.w	r3, r2, r3
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	da00      	bge.n	80022fe <compensate_humidity+0x10e>
 80022fc:	330f      	adds	r3, #15
 80022fe:	111b      	asrs	r3, r3, #4
 8002300:	425b      	negs	r3, r3
 8002302:	461a      	mov	r2, r3
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	4413      	add	r3, r2
 8002308:	60fb      	str	r3, [r7, #12]
	var5 = (var5 < 0 ? 0 : var5);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002310:	60fb      	str	r3, [r7, #12]
	var5 = (var5 > 419430400 ? 419430400 : var5);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8002318:	bfa8      	it	ge
 800231a:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 800231e:	60fb      	str	r3, [r7, #12]
	humidity = (uint32_t)(var5 / 4096);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2b00      	cmp	r3, #0
 8002324:	da01      	bge.n	800232a <compensate_humidity+0x13a>
 8002326:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 800232a:	131b      	asrs	r3, r3, #12
 800232c:	627b      	str	r3, [r7, #36]	@ 0x24

	if (humidity > humidity_max)
 800232e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002330:	6a3b      	ldr	r3, [r7, #32]
 8002332:	429a      	cmp	r2, r3
 8002334:	d901      	bls.n	800233a <compensate_humidity+0x14a>
		humidity = humidity_max;
 8002336:	6a3b      	ldr	r3, [r7, #32]
 8002338:	627b      	str	r3, [r7, #36]	@ 0x24

	return humidity;
 800233a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800233c:	4618      	mov	r0, r3
 800233e:	372c      	adds	r7, #44	@ 0x2c
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b08a      	sub	sp, #40	@ 0x28
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 8002350:	2388      	movs	r3, #136	@ 0x88
 8002352:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	/* Array to store calibration data */
	uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = {0};
 8002356:	2300      	movs	r3, #0
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	f107 0310 	add.w	r3, r7, #16
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]
 8002362:	605a      	str	r2, [r3, #4]
 8002364:	609a      	str	r2, [r3, #8]
 8002366:	60da      	str	r2, [r3, #12]
 8002368:	611a      	str	r2, [r3, #16]
 800236a:	829a      	strh	r2, [r3, #20]

	/* Read the calibration data from the sensor */
	rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 800236c:	f107 010c 	add.w	r1, r7, #12
 8002370:	f897 0026 	ldrb.w	r0, [r7, #38]	@ 0x26
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	221a      	movs	r2, #26
 8002378:	f7fe fee7 	bl	800114a <bme280_get_regs>
 800237c:	4603      	mov	r3, r0
 800237e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (rslt == BME280_OK) {
 8002382:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002386:	2b00      	cmp	r3, #0
 8002388:	d11d      	bne.n	80023c6 <get_calib_data+0x7e>
		/* Parse temperature and pressure calibration data and store
		   it in device structure */
		parse_temp_press_calib_data(calib_data, dev);
 800238a:	f107 030c 	add.w	r3, r7, #12
 800238e:	6879      	ldr	r1, [r7, #4]
 8002390:	4618      	mov	r0, r3
 8002392:	f000 f84a 	bl	800242a <parse_temp_press_calib_data>

		reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 8002396:	23e1      	movs	r3, #225	@ 0xe1
 8002398:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		/* Read the humidity calibration data from the sensor */
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 800239c:	f107 010c 	add.w	r1, r7, #12
 80023a0:	f897 0026 	ldrb.w	r0, [r7, #38]	@ 0x26
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2207      	movs	r2, #7
 80023a8:	f7fe fecf 	bl	800114a <bme280_get_regs>
 80023ac:	4603      	mov	r3, r0
 80023ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (rslt == BME280_OK) {
 80023b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d105      	bne.n	80023c6 <get_calib_data+0x7e>
			/* Parse humidity calibration data and store it in
			   device structure */
			parse_humidity_calib_data(calib_data, dev);
 80023ba:	f107 030c 	add.w	r3, r7, #12
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f000 f8e2 	bl	800258a <parse_humidity_calib_data>
		}
	}

	return rslt;
 80023c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3728      	adds	r7, #40	@ 0x28
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 80023d2:	b480      	push	{r7}
 80023d4:	b087      	sub	sp, #28
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	60f8      	str	r0, [r7, #12]
 80023da:	60b9      	str	r1, [r7, #8]
 80023dc:	607a      	str	r2, [r7, #4]
 80023de:	70fb      	strb	r3, [r7, #3]
	uint8_t index;

	for (index = 1; index < len; index++) {
 80023e0:	2301      	movs	r3, #1
 80023e2:	75fb      	strb	r3, [r7, #23]
 80023e4:	e016      	b.n	8002414 <interleave_reg_addr+0x42>
		temp_buff[(index * 2) - 1] = reg_addr[index];
 80023e6:	7dfb      	ldrb	r3, [r7, #23]
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	441a      	add	r2, r3
 80023ec:	7dfb      	ldrb	r3, [r7, #23]
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	3b01      	subs	r3, #1
 80023f2:	68b9      	ldr	r1, [r7, #8]
 80023f4:	440b      	add	r3, r1
 80023f6:	7812      	ldrb	r2, [r2, #0]
 80023f8:	701a      	strb	r2, [r3, #0]
		temp_buff[index * 2] = reg_data[index];
 80023fa:	7dfb      	ldrb	r3, [r7, #23]
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	441a      	add	r2, r3
 8002400:	7dfb      	ldrb	r3, [r7, #23]
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	4619      	mov	r1, r3
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	440b      	add	r3, r1
 800240a:	7812      	ldrb	r2, [r2, #0]
 800240c:	701a      	strb	r2, [r3, #0]
	for (index = 1; index < len; index++) {
 800240e:	7dfb      	ldrb	r3, [r7, #23]
 8002410:	3301      	adds	r3, #1
 8002412:	75fb      	strb	r3, [r7, #23]
 8002414:	7dfa      	ldrb	r2, [r7, #23]
 8002416:	78fb      	ldrb	r3, [r7, #3]
 8002418:	429a      	cmp	r2, r3
 800241a:	d3e4      	bcc.n	80023e6 <interleave_reg_addr+0x14>
	}
}
 800241c:	bf00      	nop
 800241e:	bf00      	nop
 8002420:	371c      	adds	r7, #28
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr

0800242a <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 800242a:	b480      	push	{r7}
 800242c:	b085      	sub	sp, #20
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
 8002432:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	3310      	adds	r3, #16
 8002438:	60fb      	str	r3, [r7, #12]

	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	3301      	adds	r3, #1
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	021b      	lsls	r3, r3, #8
 8002442:	b21a      	sxth	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	b21b      	sxth	r3, r3
 800244a:	4313      	orrs	r3, r2
 800244c:	b21b      	sxth	r3, r3
 800244e:	b29a      	uxth	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	801a      	strh	r2, [r3, #0]
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	3303      	adds	r3, #3
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	021b      	lsls	r3, r3, #8
 800245c:	b21a      	sxth	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	3302      	adds	r3, #2
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	b21b      	sxth	r3, r3
 8002466:	4313      	orrs	r3, r2
 8002468:	b21a      	sxth	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	805a      	strh	r2, [r3, #2]
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	3305      	adds	r3, #5
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	021b      	lsls	r3, r3, #8
 8002476:	b21a      	sxth	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3304      	adds	r3, #4
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	b21b      	sxth	r3, r3
 8002480:	4313      	orrs	r3, r2
 8002482:	b21a      	sxth	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	809a      	strh	r2, [r3, #4]
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3307      	adds	r3, #7
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	021b      	lsls	r3, r3, #8
 8002490:	b21a      	sxth	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	3306      	adds	r3, #6
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	b21b      	sxth	r3, r3
 800249a:	4313      	orrs	r3, r2
 800249c:	b21b      	sxth	r3, r3
 800249e:	b29a      	uxth	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	80da      	strh	r2, [r3, #6]
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3309      	adds	r3, #9
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	021b      	lsls	r3, r3, #8
 80024ac:	b21a      	sxth	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	3308      	adds	r3, #8
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	b21b      	sxth	r3, r3
 80024b6:	4313      	orrs	r3, r2
 80024b8:	b21a      	sxth	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	811a      	strh	r2, [r3, #8]
	calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	330b      	adds	r3, #11
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	021b      	lsls	r3, r3, #8
 80024c6:	b21a      	sxth	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	330a      	adds	r3, #10
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	b21b      	sxth	r3, r3
 80024d0:	4313      	orrs	r3, r2
 80024d2:	b21a      	sxth	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	815a      	strh	r2, [r3, #10]
	calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	330d      	adds	r3, #13
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	021b      	lsls	r3, r3, #8
 80024e0:	b21a      	sxth	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	330c      	adds	r3, #12
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	b21b      	sxth	r3, r3
 80024ea:	4313      	orrs	r3, r2
 80024ec:	b21a      	sxth	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	819a      	strh	r2, [r3, #12]
	calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	330f      	adds	r3, #15
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	021b      	lsls	r3, r3, #8
 80024fa:	b21a      	sxth	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	330e      	adds	r3, #14
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	b21b      	sxth	r3, r3
 8002504:	4313      	orrs	r3, r2
 8002506:	b21a      	sxth	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	81da      	strh	r2, [r3, #14]
	calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3311      	adds	r3, #17
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	021b      	lsls	r3, r3, #8
 8002514:	b21a      	sxth	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	3310      	adds	r3, #16
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	b21b      	sxth	r3, r3
 800251e:	4313      	orrs	r3, r2
 8002520:	b21a      	sxth	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	821a      	strh	r2, [r3, #16]
	calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	3313      	adds	r3, #19
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	021b      	lsls	r3, r3, #8
 800252e:	b21a      	sxth	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	3312      	adds	r3, #18
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	b21b      	sxth	r3, r3
 8002538:	4313      	orrs	r3, r2
 800253a:	b21a      	sxth	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	825a      	strh	r2, [r3, #18]
	calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	3315      	adds	r3, #21
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	021b      	lsls	r3, r3, #8
 8002548:	b21a      	sxth	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	3314      	adds	r3, #20
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	b21b      	sxth	r3, r3
 8002552:	4313      	orrs	r3, r2
 8002554:	b21a      	sxth	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	829a      	strh	r2, [r3, #20]
	calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	3317      	adds	r3, #23
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	021b      	lsls	r3, r3, #8
 8002562:	b21a      	sxth	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	3316      	adds	r3, #22
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	b21b      	sxth	r3, r3
 800256c:	4313      	orrs	r3, r2
 800256e:	b21a      	sxth	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	82da      	strh	r2, [r3, #22]
	calib_data->dig_H1 = reg_data[25];
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	3319      	adds	r3, #25
 8002578:	781a      	ldrb	r2, [r3, #0]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	761a      	strb	r2, [r3, #24]

}
 800257e:	bf00      	nop
 8002580:	3714      	adds	r7, #20
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr

0800258a <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 800258a:	b480      	push	{r7}
 800258c:	b087      	sub	sp, #28
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
 8002592:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	3310      	adds	r3, #16
 8002598:	617b      	str	r3, [r7, #20]
	int16_t dig_H4_lsb;
	int16_t dig_H4_msb;
	int16_t dig_H5_lsb;
	int16_t dig_H5_msb;

	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	3301      	adds	r3, #1
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	021b      	lsls	r3, r3, #8
 80025a2:	b21a      	sxth	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	b21b      	sxth	r3, r3
 80025aa:	4313      	orrs	r3, r2
 80025ac:	b21a      	sxth	r2, r3
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	835a      	strh	r2, [r3, #26]
	calib_data->dig_H3 = reg_data[2];
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	3302      	adds	r3, #2
 80025b6:	781a      	ldrb	r2, [r3, #0]
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	771a      	strb	r2, [r3, #28]

	dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	3303      	adds	r3, #3
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	b25b      	sxtb	r3, r3
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	011b      	lsls	r3, r3, #4
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	827b      	strh	r3, [r7, #18]
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	3304      	adds	r3, #4
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	b21b      	sxth	r3, r3
 80025d4:	f003 030f 	and.w	r3, r3, #15
 80025d8:	823b      	strh	r3, [r7, #16]
	calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 80025da:	8a7a      	ldrh	r2, [r7, #18]
 80025dc:	8a3b      	ldrh	r3, [r7, #16]
 80025de:	4313      	orrs	r3, r2
 80025e0:	b21a      	sxth	r2, r3
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	83da      	strh	r2, [r3, #30]

	dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	3305      	adds	r3, #5
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	b25b      	sxtb	r3, r3
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	011b      	lsls	r3, r3, #4
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	81fb      	strh	r3, [r7, #14]
	dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	3304      	adds	r3, #4
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	091b      	lsrs	r3, r3, #4
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	81bb      	strh	r3, [r7, #12]
	calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 8002602:	89fa      	ldrh	r2, [r7, #14]
 8002604:	89bb      	ldrh	r3, [r7, #12]
 8002606:	4313      	orrs	r3, r2
 8002608:	b21a      	sxth	r2, r3
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	841a      	strh	r2, [r3, #32]
	calib_data->dig_H6 = (int8_t)reg_data[6];
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	3306      	adds	r3, #6
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	b25a      	sxtb	r2, r3
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 800261c:	bf00      	nop
 800261e:	371c      	adds	r7, #28
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	4603      	mov	r3, r0
 8002630:	460a      	mov	r2, r1
 8002632:	71fb      	strb	r3, [r7, #7]
 8002634:	4613      	mov	r3, r2
 8002636:	71bb      	strb	r3, [r7, #6]
	uint8_t settings_changed = FALSE;
 8002638:	2300      	movs	r3, #0
 800263a:	73fb      	strb	r3, [r7, #15]

	if (sub_settings & desired_settings) {
 800263c:	79fa      	ldrb	r2, [r7, #7]
 800263e:	79bb      	ldrb	r3, [r7, #6]
 8002640:	4013      	ands	r3, r2
 8002642:	b2db      	uxtb	r3, r3
 8002644:	2b00      	cmp	r3, #0
 8002646:	d002      	beq.n	800264e <are_settings_changed+0x26>
		/* User wants to modify this particular settings */
		settings_changed = TRUE;
 8002648:	2301      	movs	r3, #1
 800264a:	73fb      	strb	r3, [r7, #15]
 800264c:	e001      	b.n	8002652 <are_settings_changed+0x2a>
	} else {
		/* User don't want to modify this particular settings */
		settings_changed = FALSE;
 800264e:	2300      	movs	r3, #0
 8002650:	73fb      	strb	r3, [r7, #15]
	}

	return settings_changed;
 8002652:	7bfb      	ldrb	r3, [r7, #15]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3714      	adds	r7, #20
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00b      	beq.n	8002686 <null_ptr_check+0x26>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d007      	beq.n	8002686 <null_ptr_check+0x26>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d003      	beq.n	8002686 <null_ptr_check+0x26>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d102      	bne.n	800268c <null_ptr_check+0x2c>
		/* Device structure pointer is not valid */
		rslt = BME280_E_NULL_PTR;
 8002686:	23ff      	movs	r3, #255	@ 0xff
 8002688:	73fb      	strb	r3, [r7, #15]
 800268a:	e001      	b.n	8002690 <null_ptr_check+0x30>
	} else {
		/* Device structure is fine */
		rslt = BME280_OK;
 800268c:	2300      	movs	r3, #0
 800268e:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8002690:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002694:	4618      	mov	r0, r3
 8002696:	3714      	adds	r7, #20
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <FIRFilter_Init>:
static float MAF_IMPULSE_RESPONSE [4] = {0.25f , 0.25f , 0.25f , 0.25f};



void FIRFilter_Init(FIRFilter *fir)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
	for (uint8_t n = 0; n< FIR_FILTER_LENGHT; n++)
 80026a8:	2300      	movs	r3, #0
 80026aa:	73fb      	strb	r3, [r7, #15]
 80026ac:	e009      	b.n	80026c2 <FIRFilter_Init+0x22>
	{
		fir->buf[n] =0.0f; // filtre buffer temizleme
 80026ae:	7bfb      	ldrb	r3, [r7, #15]
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	4413      	add	r3, r2
 80026b6:	f04f 0200 	mov.w	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
	for (uint8_t n = 0; n< FIR_FILTER_LENGHT; n++)
 80026bc:	7bfb      	ldrb	r3, [r7, #15]
 80026be:	3301      	adds	r3, #1
 80026c0:	73fb      	strb	r3, [r7, #15]
 80026c2:	7bfb      	ldrb	r3, [r7, #15]
 80026c4:	2b0f      	cmp	r3, #15
 80026c6:	d9f2      	bls.n	80026ae <FIRFilter_Init+0xe>

	}

	fir->bufIndex =0; // index reset
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	fir->out = 0; // clear output
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f04f 0200 	mov.w	r2, #0
 80026d6:	645a      	str	r2, [r3, #68]	@ 0x44
}
 80026d8:	bf00      	nop
 80026da:	3714      	adds	r7, #20
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <FIRFilter_Update>:




float FIRFilter_Update(FIRFilter *fir , float inp)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	ed87 0a00 	vstr	s0, [r7]
	// son gelen veriyi buffer'a kaydet
	fir->buf[fir->bufIndex] =inp;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	4413      	add	r3, r2
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	601a      	str	r2, [r3, #0]

	// buffer indexini arttır
	fir->bufIndex++;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002706:	3301      	adds	r3, #1
 8002708:	b2da      	uxtb	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	// index uzunluğu taşması kontrolü

	if(fir->bufIndex == FIR_FILTER_LENGHT) fir->bufIndex=0;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002716:	2b10      	cmp	r3, #16
 8002718:	d103      	bne.n	8002722 <FIRFilter_Update+0x3e>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	fir->out =0;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f04f 0200 	mov.w	r2, #0
 8002728:	645a      	str	r2, [r3, #68]	@ 0x44

	uint8_t sumIndex = fir->bufIndex;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002730:	73fb      	strb	r3, [r7, #15]

	for (uint8_t n = 0; n< FIR_FILTER_LENGHT; n++)
 8002732:	2300      	movs	r3, #0
 8002734:	73bb      	strb	r3, [r7, #14]
 8002736:	e021      	b.n	800277c <FIRFilter_Update+0x98>
	{
		// index kontrol
		if(sumIndex >0) sumIndex --;
 8002738:	7bfb      	ldrb	r3, [r7, #15]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <FIRFilter_Update+0x62>
 800273e:	7bfb      	ldrb	r3, [r7, #15]
 8002740:	3b01      	subs	r3, #1
 8002742:	73fb      	strb	r3, [r7, #15]
 8002744:	e001      	b.n	800274a <FIRFilter_Update+0x66>
		else sumIndex = FIR_FILTER_LENGHT-1;
 8002746:	230f      	movs	r3, #15
 8002748:	73fb      	strb	r3, [r7, #15]

		// convulution toplam kısmı
		fir->out += FIR_IMPULSE_RESPONSE[n] * fir->buf[sumIndex];
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 8002750:	7bbb      	ldrb	r3, [r7, #14]
 8002752:	4a11      	ldr	r2, [pc, #68]	@ (8002798 <FIRFilter_Update+0xb4>)
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	4413      	add	r3, r2
 8002758:	edd3 6a00 	vldr	s13, [r3]
 800275c:	7bfb      	ldrb	r3, [r7, #15]
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	4413      	add	r3, r2
 8002764:	edd3 7a00 	vldr	s15, [r3]
 8002768:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800276c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
	for (uint8_t n = 0; n< FIR_FILTER_LENGHT; n++)
 8002776:	7bbb      	ldrb	r3, [r7, #14]
 8002778:	3301      	adds	r3, #1
 800277a:	73bb      	strb	r3, [r7, #14]
 800277c:	7bbb      	ldrb	r3, [r7, #14]
 800277e:	2b0f      	cmp	r3, #15
 8002780:	d9da      	bls.n	8002738 <FIRFilter_Update+0x54>

	}

	return fir->out;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002786:	ee07 3a90 	vmov	s15, r3

}
 800278a:	eeb0 0a67 	vmov.f32	s0, s15
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr
 8002798:	20000000 	.word	0x20000000

0800279c <MAFilter_Init>:



void MAFilter_Init(FIRFilter *fir)
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
	for (uint8_t n = 0; n< MAV_FILTER_LENGHT; n++)
 80027a4:	2300      	movs	r3, #0
 80027a6:	73fb      	strb	r3, [r7, #15]
 80027a8:	e009      	b.n	80027be <MAFilter_Init+0x22>
	{
		fir->buf[n] =0.0f; // filtre buffer temizleme
 80027aa:	7bfb      	ldrb	r3, [r7, #15]
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	4413      	add	r3, r2
 80027b2:	f04f 0200 	mov.w	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]
	for (uint8_t n = 0; n< MAV_FILTER_LENGHT; n++)
 80027b8:	7bfb      	ldrb	r3, [r7, #15]
 80027ba:	3301      	adds	r3, #1
 80027bc:	73fb      	strb	r3, [r7, #15]
 80027be:	7bfb      	ldrb	r3, [r7, #15]
 80027c0:	2b03      	cmp	r3, #3
 80027c2:	d9f2      	bls.n	80027aa <MAFilter_Init+0xe>

	}

	fir->bufIndex =0; // index reset
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	fir->out = 0; // clear output
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f04f 0200 	mov.w	r2, #0
 80027d2:	645a      	str	r2, [r3, #68]	@ 0x44
}
 80027d4:	bf00      	nop
 80027d6:	3714      	adds	r7, #20
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <LSM6DSLTR_Init>:

extern LSM6DSLTR;
extern I2C_HandleTypeDef hi2c1;

void LSM6DSLTR_Init()
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af04      	add	r7, sp, #16
	uint8_t data1;

	// Gyro ve Accel interrupt pin 1 aktif
	data1= 0x03;
 80027e6:	2303      	movs	r3, #3
 80027e8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, LSM6DSL_Write_Address, INT1_CTR, 1, &data1, 1, 1);
 80027ea:	2301      	movs	r3, #1
 80027ec:	9302      	str	r3, [sp, #8]
 80027ee:	2301      	movs	r3, #1
 80027f0:	9301      	str	r3, [sp, #4]
 80027f2:	1dfb      	adds	r3, r7, #7
 80027f4:	9300      	str	r3, [sp, #0]
 80027f6:	2301      	movs	r3, #1
 80027f8:	220d      	movs	r2, #13
 80027fa:	21d4      	movs	r1, #212	@ 0xd4
 80027fc:	481f      	ldr	r0, [pc, #124]	@ (800287c <LSM6DSLTR_Init+0x9c>)
 80027fe:	f005 fb0f 	bl	8007e20 <HAL_I2C_Mem_Write>

	data1 = 0xA4; // 16G 6.66khz
 8002802:	23a4      	movs	r3, #164	@ 0xa4
 8002804:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, LSM6DSL_Write_Address, CTRL1_XL, 1, &data1,  1, 1);
 8002806:	2301      	movs	r3, #1
 8002808:	9302      	str	r3, [sp, #8]
 800280a:	2301      	movs	r3, #1
 800280c:	9301      	str	r3, [sp, #4]
 800280e:	1dfb      	adds	r3, r7, #7
 8002810:	9300      	str	r3, [sp, #0]
 8002812:	2301      	movs	r3, #1
 8002814:	2210      	movs	r2, #16
 8002816:	21d4      	movs	r1, #212	@ 0xd4
 8002818:	4818      	ldr	r0, [pc, #96]	@ (800287c <LSM6DSLTR_Init+0x9c>)
 800281a:	f005 fb01 	bl	8007e20 <HAL_I2C_Mem_Write>

	data1 = 0xA4; // 500 dps 6.6khz
 800281e:	23a4      	movs	r3, #164	@ 0xa4
 8002820:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, LSM6DSL_Write_Address,CTRL2_G, 1, &data1, 1, 1);
 8002822:	2301      	movs	r3, #1
 8002824:	9302      	str	r3, [sp, #8]
 8002826:	2301      	movs	r3, #1
 8002828:	9301      	str	r3, [sp, #4]
 800282a:	1dfb      	adds	r3, r7, #7
 800282c:	9300      	str	r3, [sp, #0]
 800282e:	2301      	movs	r3, #1
 8002830:	2211      	movs	r2, #17
 8002832:	21d4      	movs	r1, #212	@ 0xd4
 8002834:	4811      	ldr	r0, [pc, #68]	@ (800287c <LSM6DSLTR_Init+0x9c>)
 8002836:	f005 faf3 	bl	8007e20 <HAL_I2C_Mem_Write>

	data1= 0x00;
 800283a:	2300      	movs	r3, #0
 800283c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, LSM6DSL_Write_Address, CTRL3_C, 1, &data1, 1, 1);
 800283e:	2301      	movs	r3, #1
 8002840:	9302      	str	r3, [sp, #8]
 8002842:	2301      	movs	r3, #1
 8002844:	9301      	str	r3, [sp, #4]
 8002846:	1dfb      	adds	r3, r7, #7
 8002848:	9300      	str	r3, [sp, #0]
 800284a:	2301      	movs	r3, #1
 800284c:	2212      	movs	r2, #18
 800284e:	21d4      	movs	r1, #212	@ 0xd4
 8002850:	480a      	ldr	r0, [pc, #40]	@ (800287c <LSM6DSLTR_Init+0x9c>)
 8002852:	f005 fae5 	bl	8007e20 <HAL_I2C_Mem_Write>

	data1= 0x08;
 8002856:	2308      	movs	r3, #8
 8002858:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, LSM6DSL_Write_Address, CTRL4_C, 1, &data1, 1, 1);
 800285a:	2301      	movs	r3, #1
 800285c:	9302      	str	r3, [sp, #8]
 800285e:	2301      	movs	r3, #1
 8002860:	9301      	str	r3, [sp, #4]
 8002862:	1dfb      	adds	r3, r7, #7
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	2301      	movs	r3, #1
 8002868:	2213      	movs	r2, #19
 800286a:	21d4      	movs	r1, #212	@ 0xd4
 800286c:	4803      	ldr	r0, [pc, #12]	@ (800287c <LSM6DSLTR_Init+0x9c>)
 800286e:	f005 fad7 	bl	8007e20 <HAL_I2C_Mem_Write>




}
 8002872:	bf00      	nop
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	200002a8 	.word	0x200002a8

08002880 <LSM6DSLTR_Read_Accel_Data>:


void LSM6DSLTR_Read_Accel_Data(LSM6DSLTR* Lsm_Sensor)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b088      	sub	sp, #32
 8002884:	af04      	add	r7, sp, #16
 8002886:	6078      	str	r0, [r7, #4]
	uint8_t data;
	uint8_t s;
	int16_t accel;


	HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTZ_L_XL, 1, &data, 1, 1);
 8002888:	2301      	movs	r3, #1
 800288a:	9302      	str	r3, [sp, #8]
 800288c:	2301      	movs	r3, #1
 800288e:	9301      	str	r3, [sp, #4]
 8002890:	f107 030d 	add.w	r3, r7, #13
 8002894:	9300      	str	r3, [sp, #0]
 8002896:	2301      	movs	r3, #1
 8002898:	222c      	movs	r2, #44	@ 0x2c
 800289a:	21d5      	movs	r1, #213	@ 0xd5
 800289c:	4864      	ldr	r0, [pc, #400]	@ (8002a30 <LSM6DSLTR_Read_Accel_Data+0x1b0>)
 800289e:	f005 fbb9 	bl	8008014 <HAL_I2C_Mem_Read>

	HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTZ_H_XL, 1, &s, 1, 1);
 80028a2:	2301      	movs	r3, #1
 80028a4:	9302      	str	r3, [sp, #8]
 80028a6:	2301      	movs	r3, #1
 80028a8:	9301      	str	r3, [sp, #4]
 80028aa:	f107 030c 	add.w	r3, r7, #12
 80028ae:	9300      	str	r3, [sp, #0]
 80028b0:	2301      	movs	r3, #1
 80028b2:	222d      	movs	r2, #45	@ 0x2d
 80028b4:	21d5      	movs	r1, #213	@ 0xd5
 80028b6:	485e      	ldr	r0, [pc, #376]	@ (8002a30 <LSM6DSLTR_Read_Accel_Data+0x1b0>)
 80028b8:	f005 fbac 	bl	8008014 <HAL_I2C_Mem_Read>

	accel = (int16_t) ( (s << 8 ) | (data));
 80028bc:	7b3b      	ldrb	r3, [r7, #12]
 80028be:	021b      	lsls	r3, r3, #8
 80028c0:	b21a      	sxth	r2, r3
 80028c2:	7b7b      	ldrb	r3, [r7, #13]
 80028c4:	b21b      	sxth	r3, r3
 80028c6:	4313      	orrs	r3, r2
 80028c8:	81fb      	strh	r3, [r7, #14]

	Lsm_Sensor->Accel_Z = (float)accel* 0.000488*9.81; // 16g mg/LSB 0.488
 80028ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80028ce:	ee07 3a90 	vmov	s15, r3
 80028d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028d6:	ee17 0a90 	vmov	r0, s15
 80028da:	f7fd fe4d 	bl	8000578 <__aeabi_f2d>
 80028de:	a350      	add	r3, pc, #320	@ (adr r3, 8002a20 <LSM6DSLTR_Read_Accel_Data+0x1a0>)
 80028e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e4:	f7fd fea0 	bl	8000628 <__aeabi_dmul>
 80028e8:	4602      	mov	r2, r0
 80028ea:	460b      	mov	r3, r1
 80028ec:	4610      	mov	r0, r2
 80028ee:	4619      	mov	r1, r3
 80028f0:	a34d      	add	r3, pc, #308	@ (adr r3, 8002a28 <LSM6DSLTR_Read_Accel_Data+0x1a8>)
 80028f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f6:	f7fd fe97 	bl	8000628 <__aeabi_dmul>
 80028fa:	4602      	mov	r2, r0
 80028fc:	460b      	mov	r3, r1
 80028fe:	4610      	mov	r0, r2
 8002900:	4619      	mov	r1, r3
 8002902:	f7fe f989 	bl	8000c18 <__aeabi_d2f>
 8002906:	4602      	mov	r2, r0
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	609a      	str	r2, [r3, #8]



	HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTX_L_XL, 1, &data, 1, 1);
 800290c:	2301      	movs	r3, #1
 800290e:	9302      	str	r3, [sp, #8]
 8002910:	2301      	movs	r3, #1
 8002912:	9301      	str	r3, [sp, #4]
 8002914:	f107 030d 	add.w	r3, r7, #13
 8002918:	9300      	str	r3, [sp, #0]
 800291a:	2301      	movs	r3, #1
 800291c:	2228      	movs	r2, #40	@ 0x28
 800291e:	21d5      	movs	r1, #213	@ 0xd5
 8002920:	4843      	ldr	r0, [pc, #268]	@ (8002a30 <LSM6DSLTR_Read_Accel_Data+0x1b0>)
 8002922:	f005 fb77 	bl	8008014 <HAL_I2C_Mem_Read>

	HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTX_H_XL, 1, &s, 1, 1);
 8002926:	2301      	movs	r3, #1
 8002928:	9302      	str	r3, [sp, #8]
 800292a:	2301      	movs	r3, #1
 800292c:	9301      	str	r3, [sp, #4]
 800292e:	f107 030c 	add.w	r3, r7, #12
 8002932:	9300      	str	r3, [sp, #0]
 8002934:	2301      	movs	r3, #1
 8002936:	2229      	movs	r2, #41	@ 0x29
 8002938:	21d5      	movs	r1, #213	@ 0xd5
 800293a:	483d      	ldr	r0, [pc, #244]	@ (8002a30 <LSM6DSLTR_Read_Accel_Data+0x1b0>)
 800293c:	f005 fb6a 	bl	8008014 <HAL_I2C_Mem_Read>

	accel = (int16_t) ( (s << 8 ) | (data));
 8002940:	7b3b      	ldrb	r3, [r7, #12]
 8002942:	021b      	lsls	r3, r3, #8
 8002944:	b21a      	sxth	r2, r3
 8002946:	7b7b      	ldrb	r3, [r7, #13]
 8002948:	b21b      	sxth	r3, r3
 800294a:	4313      	orrs	r3, r2
 800294c:	81fb      	strh	r3, [r7, #14]

	Lsm_Sensor->Accel_X= (float)accel* 0.000488*9.81; // 16g mg/LSB 0.488
 800294e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002952:	ee07 3a90 	vmov	s15, r3
 8002956:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800295a:	ee17 0a90 	vmov	r0, s15
 800295e:	f7fd fe0b 	bl	8000578 <__aeabi_f2d>
 8002962:	a32f      	add	r3, pc, #188	@ (adr r3, 8002a20 <LSM6DSLTR_Read_Accel_Data+0x1a0>)
 8002964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002968:	f7fd fe5e 	bl	8000628 <__aeabi_dmul>
 800296c:	4602      	mov	r2, r0
 800296e:	460b      	mov	r3, r1
 8002970:	4610      	mov	r0, r2
 8002972:	4619      	mov	r1, r3
 8002974:	a32c      	add	r3, pc, #176	@ (adr r3, 8002a28 <LSM6DSLTR_Read_Accel_Data+0x1a8>)
 8002976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800297a:	f7fd fe55 	bl	8000628 <__aeabi_dmul>
 800297e:	4602      	mov	r2, r0
 8002980:	460b      	mov	r3, r1
 8002982:	4610      	mov	r0, r2
 8002984:	4619      	mov	r1, r3
 8002986:	f7fe f947 	bl	8000c18 <__aeabi_d2f>
 800298a:	4602      	mov	r2, r0
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	601a      	str	r2, [r3, #0]



	HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTY_L_XL, 1, &data, 1, 1);
 8002990:	2301      	movs	r3, #1
 8002992:	9302      	str	r3, [sp, #8]
 8002994:	2301      	movs	r3, #1
 8002996:	9301      	str	r3, [sp, #4]
 8002998:	f107 030d 	add.w	r3, r7, #13
 800299c:	9300      	str	r3, [sp, #0]
 800299e:	2301      	movs	r3, #1
 80029a0:	222a      	movs	r2, #42	@ 0x2a
 80029a2:	21d5      	movs	r1, #213	@ 0xd5
 80029a4:	4822      	ldr	r0, [pc, #136]	@ (8002a30 <LSM6DSLTR_Read_Accel_Data+0x1b0>)
 80029a6:	f005 fb35 	bl	8008014 <HAL_I2C_Mem_Read>

	HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTY_H_XL, 1, &s, 1, 1);
 80029aa:	2301      	movs	r3, #1
 80029ac:	9302      	str	r3, [sp, #8]
 80029ae:	2301      	movs	r3, #1
 80029b0:	9301      	str	r3, [sp, #4]
 80029b2:	f107 030c 	add.w	r3, r7, #12
 80029b6:	9300      	str	r3, [sp, #0]
 80029b8:	2301      	movs	r3, #1
 80029ba:	222b      	movs	r2, #43	@ 0x2b
 80029bc:	21d5      	movs	r1, #213	@ 0xd5
 80029be:	481c      	ldr	r0, [pc, #112]	@ (8002a30 <LSM6DSLTR_Read_Accel_Data+0x1b0>)
 80029c0:	f005 fb28 	bl	8008014 <HAL_I2C_Mem_Read>

	accel = (int16_t) ( (s << 8 ) | (data));
 80029c4:	7b3b      	ldrb	r3, [r7, #12]
 80029c6:	021b      	lsls	r3, r3, #8
 80029c8:	b21a      	sxth	r2, r3
 80029ca:	7b7b      	ldrb	r3, [r7, #13]
 80029cc:	b21b      	sxth	r3, r3
 80029ce:	4313      	orrs	r3, r2
 80029d0:	81fb      	strh	r3, [r7, #14]

	Lsm_Sensor->Accel_Y = (float)accel* 0.000488*9.81; // 16g mg/LSB 0.488
 80029d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029d6:	ee07 3a90 	vmov	s15, r3
 80029da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029de:	ee17 0a90 	vmov	r0, s15
 80029e2:	f7fd fdc9 	bl	8000578 <__aeabi_f2d>
 80029e6:	a30e      	add	r3, pc, #56	@ (adr r3, 8002a20 <LSM6DSLTR_Read_Accel_Data+0x1a0>)
 80029e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ec:	f7fd fe1c 	bl	8000628 <__aeabi_dmul>
 80029f0:	4602      	mov	r2, r0
 80029f2:	460b      	mov	r3, r1
 80029f4:	4610      	mov	r0, r2
 80029f6:	4619      	mov	r1, r3
 80029f8:	a30b      	add	r3, pc, #44	@ (adr r3, 8002a28 <LSM6DSLTR_Read_Accel_Data+0x1a8>)
 80029fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029fe:	f7fd fe13 	bl	8000628 <__aeabi_dmul>
 8002a02:	4602      	mov	r2, r0
 8002a04:	460b      	mov	r3, r1
 8002a06:	4610      	mov	r0, r2
 8002a08:	4619      	mov	r1, r3
 8002a0a:	f7fe f905 	bl	8000c18 <__aeabi_d2f>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	605a      	str	r2, [r3, #4]


}
 8002a14:	bf00      	nop
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	f3af 8000 	nop.w
 8002a20:	0a5accd5 	.word	0x0a5accd5
 8002a24:	3f3ffb48 	.word	0x3f3ffb48
 8002a28:	51eb851f 	.word	0x51eb851f
 8002a2c:	40239eb8 	.word	0x40239eb8
 8002a30:	200002a8 	.word	0x200002a8

08002a34 <LSM6DSLTR_Read_Gyro_Data>:

void LSM6DSLTR_Read_Gyro_Data(LSM6DSLTR* Lsm_Sensor){
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b088      	sub	sp, #32
 8002a38:	af04      	add	r7, sp, #16
 8002a3a:	6078      	str	r0, [r7, #4]
     	uint8_t data;
		uint8_t s;
		int16_t gyro;


		HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTX_L_G, 1, &data, 1, 1);
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	9302      	str	r3, [sp, #8]
 8002a40:	2301      	movs	r3, #1
 8002a42:	9301      	str	r3, [sp, #4]
 8002a44:	f107 030d 	add.w	r3, r7, #13
 8002a48:	9300      	str	r3, [sp, #0]
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	2222      	movs	r2, #34	@ 0x22
 8002a4e:	21d5      	movs	r1, #213	@ 0xd5
 8002a50:	4843      	ldr	r0, [pc, #268]	@ (8002b60 <LSM6DSLTR_Read_Gyro_Data+0x12c>)
 8002a52:	f005 fadf 	bl	8008014 <HAL_I2C_Mem_Read>

		HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTX_H_G, 1, &s, 1, 1);
 8002a56:	2301      	movs	r3, #1
 8002a58:	9302      	str	r3, [sp, #8]
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	9301      	str	r3, [sp, #4]
 8002a5e:	f107 030c 	add.w	r3, r7, #12
 8002a62:	9300      	str	r3, [sp, #0]
 8002a64:	2301      	movs	r3, #1
 8002a66:	2223      	movs	r2, #35	@ 0x23
 8002a68:	21d5      	movs	r1, #213	@ 0xd5
 8002a6a:	483d      	ldr	r0, [pc, #244]	@ (8002b60 <LSM6DSLTR_Read_Gyro_Data+0x12c>)
 8002a6c:	f005 fad2 	bl	8008014 <HAL_I2C_Mem_Read>

		gyro = (int16_t) ( (s << 8 ) | (data));
 8002a70:	7b3b      	ldrb	r3, [r7, #12]
 8002a72:	021b      	lsls	r3, r3, #8
 8002a74:	b21a      	sxth	r2, r3
 8002a76:	7b7b      	ldrb	r3, [r7, #13]
 8002a78:	b21b      	sxth	r3, r3
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	81fb      	strh	r3, [r7, #14]

		Lsm_Sensor->Gyro_X = (float)gyro*gyro_constant;
 8002a7e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a82:	ee07 3a90 	vmov	s15, r3
 8002a86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a8a:	4b36      	ldr	r3, [pc, #216]	@ (8002b64 <LSM6DSLTR_Read_Gyro_Data+0x130>)
 8002a8c:	edd3 7a00 	vldr	s15, [r3]
 8002a90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	edc3 7a03 	vstr	s15, [r3, #12]



		HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTY_L_G, 1, &data, 1, 1);
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	9302      	str	r3, [sp, #8]
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	9301      	str	r3, [sp, #4]
 8002aa2:	f107 030d 	add.w	r3, r7, #13
 8002aa6:	9300      	str	r3, [sp, #0]
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	2224      	movs	r2, #36	@ 0x24
 8002aac:	21d5      	movs	r1, #213	@ 0xd5
 8002aae:	482c      	ldr	r0, [pc, #176]	@ (8002b60 <LSM6DSLTR_Read_Gyro_Data+0x12c>)
 8002ab0:	f005 fab0 	bl	8008014 <HAL_I2C_Mem_Read>

		HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTY_H_G, 1, &s, 1, 1);
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	9302      	str	r3, [sp, #8]
 8002ab8:	2301      	movs	r3, #1
 8002aba:	9301      	str	r3, [sp, #4]
 8002abc:	f107 030c 	add.w	r3, r7, #12
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	2225      	movs	r2, #37	@ 0x25
 8002ac6:	21d5      	movs	r1, #213	@ 0xd5
 8002ac8:	4825      	ldr	r0, [pc, #148]	@ (8002b60 <LSM6DSLTR_Read_Gyro_Data+0x12c>)
 8002aca:	f005 faa3 	bl	8008014 <HAL_I2C_Mem_Read>

		gyro = (int16_t) ( (s << 8 ) | (data));
 8002ace:	7b3b      	ldrb	r3, [r7, #12]
 8002ad0:	021b      	lsls	r3, r3, #8
 8002ad2:	b21a      	sxth	r2, r3
 8002ad4:	7b7b      	ldrb	r3, [r7, #13]
 8002ad6:	b21b      	sxth	r3, r3
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	81fb      	strh	r3, [r7, #14]

		Lsm_Sensor->Gyro_Y = (float)gyro*gyro_constant;
 8002adc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ae0:	ee07 3a90 	vmov	s15, r3
 8002ae4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ae8:	4b1e      	ldr	r3, [pc, #120]	@ (8002b64 <LSM6DSLTR_Read_Gyro_Data+0x130>)
 8002aea:	edd3 7a00 	vldr	s15, [r3]
 8002aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	edc3 7a04 	vstr	s15, [r3, #16]


		HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTZ_L_G, 1, &data, 1, 1);
 8002af8:	2301      	movs	r3, #1
 8002afa:	9302      	str	r3, [sp, #8]
 8002afc:	2301      	movs	r3, #1
 8002afe:	9301      	str	r3, [sp, #4]
 8002b00:	f107 030d 	add.w	r3, r7, #13
 8002b04:	9300      	str	r3, [sp, #0]
 8002b06:	2301      	movs	r3, #1
 8002b08:	2226      	movs	r2, #38	@ 0x26
 8002b0a:	21d5      	movs	r1, #213	@ 0xd5
 8002b0c:	4814      	ldr	r0, [pc, #80]	@ (8002b60 <LSM6DSLTR_Read_Gyro_Data+0x12c>)
 8002b0e:	f005 fa81 	bl	8008014 <HAL_I2C_Mem_Read>

		HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTZ_H_G, 1, &s, 1, 1);
 8002b12:	2301      	movs	r3, #1
 8002b14:	9302      	str	r3, [sp, #8]
 8002b16:	2301      	movs	r3, #1
 8002b18:	9301      	str	r3, [sp, #4]
 8002b1a:	f107 030c 	add.w	r3, r7, #12
 8002b1e:	9300      	str	r3, [sp, #0]
 8002b20:	2301      	movs	r3, #1
 8002b22:	2227      	movs	r2, #39	@ 0x27
 8002b24:	21d5      	movs	r1, #213	@ 0xd5
 8002b26:	480e      	ldr	r0, [pc, #56]	@ (8002b60 <LSM6DSLTR_Read_Gyro_Data+0x12c>)
 8002b28:	f005 fa74 	bl	8008014 <HAL_I2C_Mem_Read>

		gyro = (int16_t) ( (s << 8 ) | (data));
 8002b2c:	7b3b      	ldrb	r3, [r7, #12]
 8002b2e:	021b      	lsls	r3, r3, #8
 8002b30:	b21a      	sxth	r2, r3
 8002b32:	7b7b      	ldrb	r3, [r7, #13]
 8002b34:	b21b      	sxth	r3, r3
 8002b36:	4313      	orrs	r3, r2
 8002b38:	81fb      	strh	r3, [r7, #14]

		Lsm_Sensor->Gyro_Z = (float)gyro*gyro_constant;
 8002b3a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b3e:	ee07 3a90 	vmov	s15, r3
 8002b42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b46:	4b07      	ldr	r3, [pc, #28]	@ (8002b64 <LSM6DSLTR_Read_Gyro_Data+0x130>)
 8002b48:	edd3 7a00 	vldr	s15, [r3]
 8002b4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	edc3 7a05 	vstr	s15, [r3, #20]

}
 8002b56:	bf00      	nop
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	200002a8 	.word	0x200002a8
 8002b64:	20000040 	.word	0x20000040

08002b68 <calculate_roll_pitch>:
	return HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8);

}


void calculate_roll_pitch(LSM6DSLTR *Lsm_Sensor) {
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	ed2d 8b02 	vpush	{d8}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
    Lsm_Sensor->Roll = atan2f(Lsm_Sensor->Accel_Y, sqrtf(Lsm_Sensor->Accel_X * Lsm_Sensor->Accel_X + Lsm_Sensor->Accel_Z * Lsm_Sensor->Accel_Z)) * 180.0f / 3.14;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	ed93 8a01 	vldr	s16, [r3, #4]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	ed93 7a00 	vldr	s14, [r3]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	edd3 7a00 	vldr	s15, [r3]
 8002b86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	edd3 6a02 	vldr	s13, [r3, #8]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	edd3 7a02 	vldr	s15, [r3, #8]
 8002b96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b9e:	eeb0 0a67 	vmov.f32	s0, s15
 8002ba2:	f00c f9a7 	bl	800eef4 <sqrtf>
 8002ba6:	eef0 7a40 	vmov.f32	s15, s0
 8002baa:	eef0 0a67 	vmov.f32	s1, s15
 8002bae:	eeb0 0a48 	vmov.f32	s0, s16
 8002bb2:	f00c f99d 	bl	800eef0 <atan2f>
 8002bb6:	eef0 7a40 	vmov.f32	s15, s0
 8002bba:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8002c70 <calculate_roll_pitch+0x108>
 8002bbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bc2:	ee17 0a90 	vmov	r0, s15
 8002bc6:	f7fd fcd7 	bl	8000578 <__aeabi_f2d>
 8002bca:	a327      	add	r3, pc, #156	@ (adr r3, 8002c68 <calculate_roll_pitch+0x100>)
 8002bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd0:	f7fd fe54 	bl	800087c <__aeabi_ddiv>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	4610      	mov	r0, r2
 8002bda:	4619      	mov	r1, r3
 8002bdc:	f7fe f81c 	bl	8000c18 <__aeabi_d2f>
 8002be0:	4602      	mov	r2, r0
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	619a      	str	r2, [r3, #24]
    Lsm_Sensor->Pitch = atan2f(-Lsm_Sensor->Accel_X, sqrtf(Lsm_Sensor->Accel_Y * Lsm_Sensor->Accel_Y + Lsm_Sensor->Accel_Z * Lsm_Sensor->Accel_Z)) * 180.0f / 3.14;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	edd3 7a00 	vldr	s15, [r3]
 8002bec:	eeb1 8a67 	vneg.f32	s16, s15
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	ed93 7a01 	vldr	s14, [r3, #4]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	edd3 7a01 	vldr	s15, [r3, #4]
 8002bfc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	edd3 6a02 	vldr	s13, [r3, #8]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c14:	eeb0 0a67 	vmov.f32	s0, s15
 8002c18:	f00c f96c 	bl	800eef4 <sqrtf>
 8002c1c:	eef0 7a40 	vmov.f32	s15, s0
 8002c20:	eef0 0a67 	vmov.f32	s1, s15
 8002c24:	eeb0 0a48 	vmov.f32	s0, s16
 8002c28:	f00c f962 	bl	800eef0 <atan2f>
 8002c2c:	eef0 7a40 	vmov.f32	s15, s0
 8002c30:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8002c70 <calculate_roll_pitch+0x108>
 8002c34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c38:	ee17 0a90 	vmov	r0, s15
 8002c3c:	f7fd fc9c 	bl	8000578 <__aeabi_f2d>
 8002c40:	a309      	add	r3, pc, #36	@ (adr r3, 8002c68 <calculate_roll_pitch+0x100>)
 8002c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c46:	f7fd fe19 	bl	800087c <__aeabi_ddiv>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	4610      	mov	r0, r2
 8002c50:	4619      	mov	r1, r3
 8002c52:	f7fd ffe1 	bl	8000c18 <__aeabi_d2f>
 8002c56:	4602      	mov	r2, r0
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	61da      	str	r2, [r3, #28]
}
 8002c5c:	bf00      	nop
 8002c5e:	3708      	adds	r7, #8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	ecbd 8b02 	vpop	{d8}
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	51eb851f 	.word	0x51eb851f
 8002c6c:	40091eb8 	.word	0x40091eb8
 8002c70:	43340000 	.word	0x43340000

08002c74 <update_angles>:
void update_angles(LSM6DSLTR *Lsm_Sensor) {
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
    uint32_t current_time = HAL_GetTick(); // Şu anki zamanı al
 8002c7c:	f003 fc28 	bl	80064d0 <HAL_GetTick>
 8002c80:	60f8      	str	r0, [r7, #12]

    // Zaman farkını hesapla (saniye cinsinden)
    float dt = (current_time - prev_time) / 1000.0f;
 8002c82:	4b26      	ldr	r3, [pc, #152]	@ (8002d1c <update_angles+0xa8>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	ee07 3a90 	vmov	s15, r3
 8002c8e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c92:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8002d20 <update_angles+0xac>
 8002c96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c9a:	edc7 7a02 	vstr	s15, [r7, #8]

    // Roll ve pitch açılarını güncelle (tamamlayıcı filtre)
    Lsm_Sensor->Roll = ALPHA * (Lsm_Sensor->Roll + Lsm_Sensor->Gyro_X * dt) + (1 - ALPHA) * Lsm_Sensor->Roll;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	ed93 7a06 	vldr	s14, [r3, #24]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	edd3 6a03 	vldr	s13, [r3, #12]
 8002caa:	edd7 7a02 	vldr	s15, [r7, #8]
 8002cae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cb6:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8002d24 <update_angles+0xb0>
 8002cba:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	edd3 7a06 	vldr	s15, [r3, #24]
 8002cc4:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8002d28 <update_angles+0xb4>
 8002cc8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ccc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	edc3 7a06 	vstr	s15, [r3, #24]
    Lsm_Sensor->Pitch = ALPHA * (Lsm_Sensor->Pitch + Lsm_Sensor->Gyro_Y * dt) + (1 - ALPHA) * Lsm_Sensor->Pitch;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	ed93 7a07 	vldr	s14, [r3, #28]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	edd3 6a04 	vldr	s13, [r3, #16]
 8002ce2:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ce6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cee:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8002d24 <update_angles+0xb0>
 8002cf2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	edd3 7a07 	vldr	s15, [r3, #28]
 8002cfc:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8002d28 <update_angles+0xb4>
 8002d00:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	edc3 7a07 	vstr	s15, [r3, #28]

    // Yaw açısını jiroskop verileriyle güncelle (basit zamanla entegrasyon)
  //  Lsm_Sensor->Yaw += Lsm_Sensor->Gyro_Z * dt;

    // Önceki zamanı güncelle
    prev_time = current_time;
 8002d0e:	4a03      	ldr	r2, [pc, #12]	@ (8002d1c <update_angles+0xa8>)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6013      	str	r3, [r2, #0]
}
 8002d14:	bf00      	nop
 8002d16:	3710      	adds	r7, #16
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	2000025c 	.word	0x2000025c
 8002d20:	447a0000 	.word	0x447a0000
 8002d24:	3f7ae148 	.word	0x3f7ae148
 8002d28:	3ca3d700 	.word	0x3ca3d700

08002d2c <W25Q_Delay>:
#define W25Q_SPI hspi1

#define numBLOCK 32  // number of total blocks for 16Mb flash, 32x16x16 pages and 32x16x16x256 Bytes

void W25Q_Delay(uint32_t time)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
	HAL_Delay(time);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f003 fbd7 	bl	80064e8 <HAL_Delay>
}
 8002d3a:	bf00      	nop
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
	...

08002d44 <csLOW>:

void csLOW (void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8002d48:	2200      	movs	r2, #0
 8002d4a:	2102      	movs	r1, #2
 8002d4c:	4802      	ldr	r0, [pc, #8]	@ (8002d58 <csLOW+0x14>)
 8002d4e:	f004 fbcb 	bl	80074e8 <HAL_GPIO_WritePin>
}
 8002d52:	bf00      	nop
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	40020800 	.word	0x40020800

08002d5c <csHIGH>:

void csHIGH (void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8002d60:	2201      	movs	r2, #1
 8002d62:	2102      	movs	r1, #2
 8002d64:	4802      	ldr	r0, [pc, #8]	@ (8002d70 <csHIGH+0x14>)
 8002d66:	f004 fbbf 	bl	80074e8 <HAL_GPIO_WritePin>
}
 8002d6a:	bf00      	nop
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	40020800 	.word	0x40020800

08002d74 <SPI_Write>:

void SPI_Write (uint8_t *data, uint8_t len)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(&W25Q_SPI, data, len, 2000);
 8002d80:	78fb      	ldrb	r3, [r7, #3]
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002d88:	6879      	ldr	r1, [r7, #4]
 8002d8a:	4803      	ldr	r0, [pc, #12]	@ (8002d98 <SPI_Write+0x24>)
 8002d8c:	f006 fe85 	bl	8009a9a <HAL_SPI_Transmit>
}
 8002d90:	bf00      	nop
 8002d92:	3708      	adds	r7, #8
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	200002fc 	.word	0x200002fc

08002d9c <SPI_Read>:

void SPI_Read (uint8_t *data, uint32_t len)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
	HAL_SPI_Receive(&W25Q_SPI, data, len, 5000);
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002dae:	6879      	ldr	r1, [r7, #4]
 8002db0:	4803      	ldr	r0, [pc, #12]	@ (8002dc0 <SPI_Read+0x24>)
 8002db2:	f006 ffae 	bl	8009d12 <HAL_SPI_Receive>
}
 8002db6:	bf00      	nop
 8002db8:	3708      	adds	r7, #8
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	200002fc 	.word	0x200002fc

08002dc4 <W25Q_Read>:
	csHIGH();
	return ((rData[0]<<16)|(rData[1]<<8)|rData[2]);
}

void W25Q_Read (uint32_t startPage, uint8_t offset, uint32_t size, uint8_t *rData)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b088      	sub	sp, #32
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	607a      	str	r2, [r7, #4]
 8002dce:	603b      	str	r3, [r7, #0]
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	72fb      	strb	r3, [r7, #11]
	uint8_t tData[5];
	uint32_t memAddr = (startPage*256) + offset;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	021a      	lsls	r2, r3, #8
 8002dd8:	7afb      	ldrb	r3, [r7, #11]
 8002dda:	4413      	add	r3, r2
 8002ddc:	61fb      	str	r3, [r7, #28]
write_enable();
 8002dde:	f000 f84d 	bl	8002e7c <write_enable>
	if (numBLOCK<512)   // Chip Size<256Mb
	{
		tData[0] = 0x03;  // enable Read
 8002de2:	2303      	movs	r3, #3
 8002de4:	753b      	strb	r3, [r7, #20]
		tData[1] = (memAddr>>16)&0xFF;  // MSB of the memory Address
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	0c1b      	lsrs	r3, r3, #16
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	757b      	strb	r3, [r7, #21]
		tData[2] = (memAddr>>8)&0xFF;
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	0a1b      	lsrs	r3, r3, #8
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	75bb      	strb	r3, [r7, #22]
		tData[3] = (memAddr)&0xFF; // LSB of the memory Address
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	75fb      	strb	r3, [r7, #23]
		tData[2] = (memAddr>>16)&0xFF;
		tData[3] = (memAddr>>8)&0xFF;
		tData[4] = (memAddr)&0xFF; // LSB of the memory Address
	}

	csLOW();  // pull the CS Low
 8002dfc:	f7ff ffa2 	bl	8002d44 <csLOW>
	if (numBLOCK<512)
	{
		SPI_Write(tData, 4);  // send read instruction along with the 24 bit memory address
 8002e00:	f107 0314 	add.w	r3, r7, #20
 8002e04:	2104      	movs	r1, #4
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7ff ffb4 	bl	8002d74 <SPI_Write>
	else
	{
		SPI_Write(tData, 5);  // send read instruction along with the 32 bit memory address
	}

	SPI_Read(rData, size);  // Read the data
 8002e0c:	6879      	ldr	r1, [r7, #4]
 8002e0e:	6838      	ldr	r0, [r7, #0]
 8002e10:	f7ff ffc4 	bl	8002d9c <SPI_Read>
	csHIGH();  // pull the CS High
 8002e14:	f7ff ffa2 	bl	8002d5c <csHIGH>
}
 8002e18:	bf00      	nop
 8002e1a:	3720      	adds	r7, #32
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <W25Q_FastRead>:

void W25Q_FastRead (uint32_t startPage, uint8_t offset, uint32_t size, uint8_t *rData)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b088      	sub	sp, #32
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	607a      	str	r2, [r7, #4]
 8002e2a:	603b      	str	r3, [r7, #0]
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	72fb      	strb	r3, [r7, #11]
	uint8_t tData[6];
	uint32_t memAddr = (startPage*256) + offset;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	021a      	lsls	r2, r3, #8
 8002e34:	7afb      	ldrb	r3, [r7, #11]
 8002e36:	4413      	add	r3, r2
 8002e38:	61fb      	str	r3, [r7, #28]

	if (numBLOCK<512)   // Chip Size<256Mb
	{
		tData[0] = 0x0B;  // enable Fast Read
 8002e3a:	230b      	movs	r3, #11
 8002e3c:	753b      	strb	r3, [r7, #20]
		tData[1] = (memAddr>>16)&0xFF;  // MSB of the memory Address
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	0c1b      	lsrs	r3, r3, #16
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	757b      	strb	r3, [r7, #21]
		tData[2] = (memAddr>>8)&0xFF;
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	0a1b      	lsrs	r3, r3, #8
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	75bb      	strb	r3, [r7, #22]
		tData[3] = (memAddr)&0xFF; // LSB of the memory Address
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	75fb      	strb	r3, [r7, #23]
		tData[4] = 0;  // Dummy clock
 8002e54:	2300      	movs	r3, #0
 8002e56:	763b      	strb	r3, [r7, #24]
		tData[3] = (memAddr>>8)&0xFF;
		tData[4] = (memAddr)&0xFF; // LSB of the memory Address
		tData[5] = 0;  // Dummy clock
	}

	csLOW();  // pull the CS Low
 8002e58:	f7ff ff74 	bl	8002d44 <csLOW>
	if (numBLOCK<512)
	{
		SPI_Write(tData, 5);  // send read instruction along with the 24 bit memory address
 8002e5c:	f107 0314 	add.w	r3, r7, #20
 8002e60:	2105      	movs	r1, #5
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7ff ff86 	bl	8002d74 <SPI_Write>
	else
	{
		SPI_Write(tData, 6);  // send read instruction along with the 32 bit memory address
	}

	SPI_Read(rData, size);  // Read the data
 8002e68:	6879      	ldr	r1, [r7, #4]
 8002e6a:	6838      	ldr	r0, [r7, #0]
 8002e6c:	f7ff ff96 	bl	8002d9c <SPI_Read>
	csHIGH();  // pull the CS High
 8002e70:	f7ff ff74 	bl	8002d5c <csHIGH>
}
 8002e74:	bf00      	nop
 8002e76:	3720      	adds	r7, #32
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <write_enable>:

void write_enable (void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
	uint8_t tData = 0x06;  // enable write
 8002e82:	2306      	movs	r3, #6
 8002e84:	71fb      	strb	r3, [r7, #7]
	csLOW();
 8002e86:	f7ff ff5d 	bl	8002d44 <csLOW>
	SPI_Write(&tData, 1);
 8002e8a:	1dfb      	adds	r3, r7, #7
 8002e8c:	2101      	movs	r1, #1
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7ff ff70 	bl	8002d74 <SPI_Write>
	csHIGH();
 8002e94:	f7ff ff62 	bl	8002d5c <csHIGH>
	W25Q_Delay(5);  // 5ms delay
 8002e98:	2005      	movs	r0, #5
 8002e9a:	f7ff ff47 	bl	8002d2c <W25Q_Delay>
}
 8002e9e:	bf00      	nop
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <write_disable>:

void write_disable(void)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b082      	sub	sp, #8
 8002eaa:	af00      	add	r7, sp, #0
	uint8_t tData = 0x04;  // disable write
 8002eac:	2304      	movs	r3, #4
 8002eae:	71fb      	strb	r3, [r7, #7]
	csLOW();
 8002eb0:	f7ff ff48 	bl	8002d44 <csLOW>
	SPI_Write(&tData, 1);
 8002eb4:	1dfb      	adds	r3, r7, #7
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7ff ff5b 	bl	8002d74 <SPI_Write>
	csHIGH();
 8002ebe:	f7ff ff4d 	bl	8002d5c <csHIGH>
	W25Q_Delay(5);  // 5ms delay
 8002ec2:	2005      	movs	r0, #5
 8002ec4:	f7ff ff32 	bl	8002d2c <W25Q_Delay>
}
 8002ec8:	bf00      	nop
 8002eca:	3708      	adds	r7, #8
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <bytestowrite>:

uint32_t bytestowrite (uint32_t size, uint16_t offset)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	460b      	mov	r3, r1
 8002eda:	807b      	strh	r3, [r7, #2]
	if ((size+offset)<256) return size;
 8002edc:	887a      	ldrh	r2, [r7, #2]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	2bff      	cmp	r3, #255	@ 0xff
 8002ee4:	d801      	bhi.n	8002eea <bytestowrite+0x1a>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	e002      	b.n	8002ef0 <bytestowrite+0x20>
	else return 256-offset;
 8002eea:	887b      	ldrh	r3, [r7, #2]
 8002eec:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <bytestomodify>:

uint32_t bytestomodify (uint32_t size, uint16_t offset)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	460b      	mov	r3, r1
 8002f06:	807b      	strh	r3, [r7, #2]
	if ((size+offset)<4096) return size;
 8002f08:	887a      	ldrh	r2, [r7, #2]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f12:	d201      	bcs.n	8002f18 <bytestomodify+0x1c>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	e002      	b.n	8002f1e <bytestomodify+0x22>
	else return 4096-offset;
 8002f18:	887b      	ldrh	r3, [r7, #2]
 8002f1a:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr

08002f2a <W25Q_Erase_Sector>:

void W25Q_Erase_Sector (uint16_t numsector)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b086      	sub	sp, #24
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	4603      	mov	r3, r0
 8002f32:	80fb      	strh	r3, [r7, #6]
	uint8_t tData[6];
	uint32_t memAddr = numsector*16*256;   // Each sector contains 16 pages * 256 bytes
 8002f34:	88fb      	ldrh	r3, [r7, #6]
 8002f36:	031b      	lsls	r3, r3, #12
 8002f38:	617b      	str	r3, [r7, #20]

	write_enable();
 8002f3a:	f7ff ff9f 	bl	8002e7c <write_enable>

	if (numBLOCK<512)   // Chip Size<256Mb
	{
		tData[0] = 0x20;  // Erase sector
 8002f3e:	2320      	movs	r3, #32
 8002f40:	733b      	strb	r3, [r7, #12]
		tData[1] = (memAddr>>16)&0xFF;  // MSB of the memory Address
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	0c1b      	lsrs	r3, r3, #16
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	737b      	strb	r3, [r7, #13]
		tData[2] = (memAddr>>8)&0xFF;
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	0a1b      	lsrs	r3, r3, #8
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	73bb      	strb	r3, [r7, #14]
		tData[3] = (memAddr)&0xFF; // LSB of the memory Address
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	73fb      	strb	r3, [r7, #15]

		csLOW();
 8002f58:	f7ff fef4 	bl	8002d44 <csLOW>
		SPI_Write(tData, 4);
 8002f5c:	f107 030c 	add.w	r3, r7, #12
 8002f60:	2104      	movs	r1, #4
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7ff ff06 	bl	8002d74 <SPI_Write>
		csHIGH();
 8002f68:	f7ff fef8 	bl	8002d5c <csHIGH>
		csLOW();  // pull the CS LOW
		SPI_Write(tData, 5);
		csHIGH();  // pull the HIGH
	}

	W25Q_Delay(450);  // 450ms delay for sector erase
 8002f6c:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8002f70:	f7ff fedc 	bl	8002d2c <W25Q_Delay>

	write_disable();
 8002f74:	f7ff ff97 	bl	8002ea6 <write_disable>

}
 8002f78:	bf00      	nop
 8002f7a:	3718      	adds	r7, #24
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <W25Q_Write_Clean>:


void W25Q_Write_Clean (uint32_t page, uint16_t offset, uint32_t size, uint8_t *data)
{
 8002f80:	b590      	push	{r4, r7, lr}
 8002f82:	b0d3      	sub	sp, #332	@ 0x14c
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	f507 74a4 	add.w	r4, r7, #328	@ 0x148
 8002f8a:	f5a4 749e 	sub.w	r4, r4, #316	@ 0x13c
 8002f8e:	6020      	str	r0, [r4, #0]
 8002f90:	4608      	mov	r0, r1
 8002f92:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 8002f96:	f5a1 71a2 	sub.w	r1, r1, #324	@ 0x144
 8002f9a:	600a      	str	r2, [r1, #0]
 8002f9c:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8002fa0:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 8002fa4:	6013      	str	r3, [r2, #0]
 8002fa6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002faa:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8002fae:	4602      	mov	r2, r0
 8002fb0:	801a      	strh	r2, [r3, #0]
	uint8_t tData[266];
	uint32_t startPage = page;
 8002fb2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002fb6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
	uint32_t endPage  = startPage + ((size+offset-1)/256);
 8002fc0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002fc4:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8002fc8:	881a      	ldrh	r2, [r3, #0]
 8002fca:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002fce:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	0a1b      	lsrs	r3, r3, #8
 8002fda:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002fde:	4413      	add	r3, r2
 8002fe0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	uint32_t numPages = endPage-startPage+1;
 8002fe4:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8002fe8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	3301      	adds	r3, #1
 8002ff0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128

	uint16_t startSector  = startPage/16;
 8002ff4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8002ff8:	091b      	lsrs	r3, r3, #4
 8002ffa:	f8a7 3142 	strh.w	r3, [r7, #322]	@ 0x142
	uint16_t endSector  = endPage/16;
 8002ffe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003002:	091b      	lsrs	r3, r3, #4
 8003004:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
	uint16_t numSectors = endSector-startSector+1;
 8003008:	f8b7 2126 	ldrh.w	r2, [r7, #294]	@ 0x126
 800300c:	f8b7 3142 	ldrh.w	r3, [r7, #322]	@ 0x142
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	b29b      	uxth	r3, r3
 8003014:	3301      	adds	r3, #1
 8003016:	f8a7 3124 	strh.w	r3, [r7, #292]	@ 0x124
	for (uint16_t i=0; i<numSectors; i++)
 800301a:	2300      	movs	r3, #0
 800301c:	f8a7 3140 	strh.w	r3, [r7, #320]	@ 0x140
 8003020:	e00c      	b.n	800303c <W25Q_Write_Clean+0xbc>
	{
		W25Q_Erase_Sector(startSector++);
 8003022:	f8b7 3142 	ldrh.w	r3, [r7, #322]	@ 0x142
 8003026:	1c5a      	adds	r2, r3, #1
 8003028:	f8a7 2142 	strh.w	r2, [r7, #322]	@ 0x142
 800302c:	4618      	mov	r0, r3
 800302e:	f7ff ff7c 	bl	8002f2a <W25Q_Erase_Sector>
	for (uint16_t i=0; i<numSectors; i++)
 8003032:	f8b7 3140 	ldrh.w	r3, [r7, #320]	@ 0x140
 8003036:	3301      	adds	r3, #1
 8003038:	f8a7 3140 	strh.w	r3, [r7, #320]	@ 0x140
 800303c:	f8b7 2140 	ldrh.w	r2, [r7, #320]	@ 0x140
 8003040:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 8003044:	429a      	cmp	r2, r3
 8003046:	d3ec      	bcc.n	8003022 <W25Q_Write_Clean+0xa2>
	}

	uint32_t dataPosition = 0;
 8003048:	2300      	movs	r3, #0
 800304a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c

	// write the data
	for (uint32_t i=0; i<numPages; i++)
 800304e:	2300      	movs	r3, #0
 8003050:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8003054:	e0c0      	b.n	80031d8 <W25Q_Write_Clean+0x258>
	{
		uint32_t memAddr = (startPage*256)+offset;
 8003056:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800305a:	021a      	lsls	r2, r3, #8
 800305c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003060:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8003064:	881b      	ldrh	r3, [r3, #0]
 8003066:	4413      	add	r3, r2
 8003068:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
		uint16_t bytesremaining  = bytestowrite(size, offset);
 800306c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003070:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8003074:	881a      	ldrh	r2, [r3, #0]
 8003076:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800307a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800307e:	4611      	mov	r1, r2
 8003080:	6818      	ldr	r0, [r3, #0]
 8003082:	f7ff ff25 	bl	8002ed0 <bytestowrite>
 8003086:	4603      	mov	r3, r0
 8003088:	f8a7 311e 	strh.w	r3, [r7, #286]	@ 0x11e
		uint32_t indx = 0;
 800308c:	2300      	movs	r3, #0
 800308e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134

		write_enable();
 8003092:	f7ff fef3 	bl	8002e7c <write_enable>

		if (numBLOCK<512)   // Chip Size<256Mb
		{
			tData[0] = 0x02;  // page program
 8003096:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800309a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800309e:	2202      	movs	r2, #2
 80030a0:	701a      	strb	r2, [r3, #0]
			tData[1] = (memAddr>>16)&0xFF;  // MSB of the memory Address
 80030a2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80030a6:	0c1b      	lsrs	r3, r3, #16
 80030a8:	b2da      	uxtb	r2, r3
 80030aa:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80030ae:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80030b2:	705a      	strb	r2, [r3, #1]
			tData[2] = (memAddr>>8)&0xFF;
 80030b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80030b8:	0a1b      	lsrs	r3, r3, #8
 80030ba:	b2da      	uxtb	r2, r3
 80030bc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80030c0:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80030c4:	709a      	strb	r2, [r3, #2]
			tData[3] = (memAddr)&0xFF; // LSB of the memory Address
 80030c6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80030ca:	b2da      	uxtb	r2, r3
 80030cc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80030d0:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80030d4:	70da      	strb	r2, [r3, #3]

			indx = 4;
 80030d6:	2304      	movs	r3, #4
 80030d8:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
			tData[4] = (memAddr)&0xFF; // LSB of the memory Address

			indx = 5;
		}

		uint16_t bytestosend  = bytesremaining + indx;
 80030dc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80030e0:	b29a      	uxth	r2, r3
 80030e2:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 80030e6:	4413      	add	r3, r2
 80030e8:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c

		for (uint16_t i=0; i<bytesremaining; i++)
 80030ec:	2300      	movs	r3, #0
 80030ee:	f8a7 3132 	strh.w	r3, [r7, #306]	@ 0x132
 80030f2:	e01a      	b.n	800312a <W25Q_Write_Clean+0x1aa>
		{
			tData[indx++] = data[i+dataPosition];
 80030f4:	f8b7 2132 	ldrh.w	r2, [r7, #306]	@ 0x132
 80030f8:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80030fc:	4413      	add	r3, r2
 80030fe:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8003102:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 8003106:	6812      	ldr	r2, [r2, #0]
 8003108:	441a      	add	r2, r3
 800310a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800310e:	1c59      	adds	r1, r3, #1
 8003110:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8003114:	7811      	ldrb	r1, [r2, #0]
 8003116:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 800311a:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 800311e:	54d1      	strb	r1, [r2, r3]
		for (uint16_t i=0; i<bytesremaining; i++)
 8003120:	f8b7 3132 	ldrh.w	r3, [r7, #306]	@ 0x132
 8003124:	3301      	adds	r3, #1
 8003126:	f8a7 3132 	strh.w	r3, [r7, #306]	@ 0x132
 800312a:	f8b7 2132 	ldrh.w	r2, [r7, #306]	@ 0x132
 800312e:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 8003132:	429a      	cmp	r2, r3
 8003134:	d3de      	bcc.n	80030f4 <W25Q_Write_Clean+0x174>
		}

		if (bytestosend > 250)
 8003136:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 800313a:	2bfa      	cmp	r3, #250	@ 0xfa
 800313c:	d916      	bls.n	800316c <W25Q_Write_Clean+0x1ec>
		{
			csLOW();
 800313e:	f7ff fe01 	bl	8002d44 <csLOW>
			SPI_Write(tData, 100);
 8003142:	f107 0310 	add.w	r3, r7, #16
 8003146:	2164      	movs	r1, #100	@ 0x64
 8003148:	4618      	mov	r0, r3
 800314a:	f7ff fe13 	bl	8002d74 <SPI_Write>
			SPI_Write(tData+100, bytestosend-100);
 800314e:	f107 0310 	add.w	r3, r7, #16
 8003152:	3364      	adds	r3, #100	@ 0x64
 8003154:	f8b7 211c 	ldrh.w	r2, [r7, #284]	@ 0x11c
 8003158:	b2d2      	uxtb	r2, r2
 800315a:	3a64      	subs	r2, #100	@ 0x64
 800315c:	b2d2      	uxtb	r2, r2
 800315e:	4611      	mov	r1, r2
 8003160:	4618      	mov	r0, r3
 8003162:	f7ff fe07 	bl	8002d74 <SPI_Write>
			csHIGH();
 8003166:	f7ff fdf9 	bl	8002d5c <csHIGH>
 800316a:	e00c      	b.n	8003186 <W25Q_Write_Clean+0x206>

		}

		else
		{
			csLOW();
 800316c:	f7ff fdea 	bl	8002d44 <csLOW>
			SPI_Write(tData, bytestosend);
 8003170:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 8003174:	b2da      	uxtb	r2, r3
 8003176:	f107 0310 	add.w	r3, r7, #16
 800317a:	4611      	mov	r1, r2
 800317c:	4618      	mov	r0, r3
 800317e:	f7ff fdf9 	bl	8002d74 <SPI_Write>
			csHIGH();
 8003182:	f7ff fdeb 	bl	8002d5c <csHIGH>
		}


		startPage++;
 8003186:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800318a:	3301      	adds	r3, #1
 800318c:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
		offset = 0;
 8003190:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003194:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8003198:	2200      	movs	r2, #0
 800319a:	801a      	strh	r2, [r3, #0]
		size = size-bytesremaining;
 800319c:	f8b7 211e 	ldrh.w	r2, [r7, #286]	@ 0x11e
 80031a0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80031a4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80031a8:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 80031ac:	f5a1 71a2 	sub.w	r1, r1, #324	@ 0x144
 80031b0:	6809      	ldr	r1, [r1, #0]
 80031b2:	1a8a      	subs	r2, r1, r2
 80031b4:	601a      	str	r2, [r3, #0]
		dataPosition = dataPosition+bytesremaining;
 80031b6:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 80031ba:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 80031be:	4413      	add	r3, r2
 80031c0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c

		W25Q_Delay(5);
 80031c4:	2005      	movs	r0, #5
 80031c6:	f7ff fdb1 	bl	8002d2c <W25Q_Delay>
		write_disable();
 80031ca:	f7ff fe6c 	bl	8002ea6 <write_disable>
	for (uint32_t i=0; i<numPages; i++)
 80031ce:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80031d2:	3301      	adds	r3, #1
 80031d4:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80031d8:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 80031dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80031e0:	429a      	cmp	r2, r3
 80031e2:	f4ff af38 	bcc.w	8003056 <W25Q_Write_Clean+0xd6>

	}
}
 80031e6:	bf00      	nop
 80031e8:	bf00      	nop
 80031ea:	f507 77a6 	add.w	r7, r7, #332	@ 0x14c
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd90      	pop	{r4, r7, pc}

080031f2 <W25Q_Write>:

void W25Q_Write (uint32_t page, uint16_t offset, uint32_t size, uint8_t *data)
{
 80031f2:	b590      	push	{r4, r7, lr}
 80031f4:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 80031f8:	b085      	sub	sp, #20
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8003200:	f844 0c24 	str.w	r0, [r4, #-36]
 8003204:	4608      	mov	r0, r1
 8003206:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 800320a:	f841 2c2c 	str.w	r2, [r1, #-44]
 800320e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8003212:	f842 3c30 	str.w	r3, [r2, #-48]
 8003216:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800321a:	4602      	mov	r2, r0
 800321c:	f823 2c26 	strh.w	r2, [r3, #-38]
	uint16_t startSector  = page/16;
 8003220:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003224:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8003228:	091b      	lsrs	r3, r3, #4
 800322a:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800322e:	f102 020e 	add.w	r2, r2, #14
 8003232:	8013      	strh	r3, [r2, #0]
	uint16_t endSector  = (page + ((size+offset-1)/256))/16;
 8003234:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003238:	f833 2c26 	ldrh.w	r2, [r3, #-38]
 800323c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003240:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003244:	4413      	add	r3, r2
 8003246:	3b01      	subs	r3, #1
 8003248:	0a1a      	lsrs	r2, r3, #8
 800324a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800324e:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8003252:	4413      	add	r3, r2
 8003254:	091b      	lsrs	r3, r3, #4
 8003256:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 800325a:	f102 021e 	add.w	r2, r2, #30
 800325e:	8013      	strh	r3, [r2, #0]
	uint16_t numSectors = endSector-startSector+1;
 8003260:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8003264:	f103 031e 	add.w	r3, r3, #30
 8003268:	881a      	ldrh	r2, [r3, #0]
 800326a:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800326e:	f103 030e 	add.w	r3, r3, #14
 8003272:	881b      	ldrh	r3, [r3, #0]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	b29b      	uxth	r3, r3
 8003278:	3301      	adds	r3, #1
 800327a:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 800327e:	f102 021c 	add.w	r2, r2, #28
 8003282:	8013      	strh	r3, [r2, #0]

	uint8_t previousData[4096];
	uint32_t sectorOffset = ((page%16)*256)+offset;
 8003284:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003288:	f853 3c24 	ldr.w	r3, [r3, #-36]
 800328c:	f003 030f 	and.w	r3, r3, #15
 8003290:	021a      	lsls	r2, r3, #8
 8003292:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003296:	f833 3c26 	ldrh.w	r3, [r3, #-38]
 800329a:	4413      	add	r3, r2
 800329c:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80032a0:	f102 0208 	add.w	r2, r2, #8
 80032a4:	6013      	str	r3, [r2, #0]
	uint32_t dataindx = 0;
 80032a6:	2300      	movs	r3, #0
 80032a8:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80032ac:	f102 0204 	add.w	r2, r2, #4
 80032b0:	6013      	str	r3, [r2, #0]
	write_enable();
 80032b2:	f7ff fde3 	bl	8002e7c <write_enable>

	for (uint16_t i=0; i<numSectors; i++)
 80032b6:	2300      	movs	r3, #0
 80032b8:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80032bc:	f102 0202 	add.w	r2, r2, #2
 80032c0:	8013      	strh	r3, [r2, #0]
 80032c2:	e0a5      	b.n	8003410 <W25Q_Write+0x21e>
	{
		uint32_t startPage = startSector*16;
 80032c4:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80032c8:	f103 030e 	add.w	r3, r3, #14
 80032cc:	881b      	ldrh	r3, [r3, #0]
 80032ce:	011b      	lsls	r3, r3, #4
 80032d0:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80032d4:	f102 0218 	add.w	r2, r2, #24
 80032d8:	6013      	str	r3, [r2, #0]
		W25Q_FastRead(startPage, 0, 4096, previousData);
 80032da:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80032de:	3b1c      	subs	r3, #28
 80032e0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80032e4:	2100      	movs	r1, #0
 80032e6:	f507 5080 	add.w	r0, r7, #4096	@ 0x1000
 80032ea:	f100 0018 	add.w	r0, r0, #24
 80032ee:	6800      	ldr	r0, [r0, #0]
 80032f0:	f7ff fd96 	bl	8002e20 <W25Q_FastRead>

		uint16_t bytesRemaining = bytestomodify(size, sectorOffset);
 80032f4:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80032f8:	f103 0308 	add.w	r3, r3, #8
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	b29b      	uxth	r3, r3
 8003300:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8003304:	4619      	mov	r1, r3
 8003306:	f852 0c2c 	ldr.w	r0, [r2, #-44]
 800330a:	f7ff fdf7 	bl	8002efc <bytestomodify>
 800330e:	4603      	mov	r3, r0
 8003310:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8003314:	f102 0216 	add.w	r2, r2, #22
 8003318:	8013      	strh	r3, [r2, #0]
		for (uint16_t i=0; i<bytesRemaining; i++)
 800331a:	2300      	movs	r3, #0
 800331c:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8003320:	8013      	strh	r3, [r2, #0]
 8003322:	e023      	b.n	800336c <W25Q_Write+0x17a>
		{
			previousData[i+sectorOffset] = data[i+dataindx];
 8003324:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8003328:	881a      	ldrh	r2, [r3, #0]
 800332a:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800332e:	f103 0304 	add.w	r3, r3, #4
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4413      	add	r3, r2
 8003336:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800333a:	f852 2c30 	ldr.w	r2, [r2, #-48]
 800333e:	441a      	add	r2, r3
 8003340:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8003344:	8819      	ldrh	r1, [r3, #0]
 8003346:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800334a:	f103 0308 	add.w	r3, r3, #8
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	440b      	add	r3, r1
 8003352:	7812      	ldrb	r2, [r2, #0]
 8003354:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8003358:	440b      	add	r3, r1
 800335a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		for (uint16_t i=0; i<bytesRemaining; i++)
 800335e:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8003362:	881b      	ldrh	r3, [r3, #0]
 8003364:	3301      	adds	r3, #1
 8003366:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800336a:	8013      	strh	r3, [r2, #0]
 800336c:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8003370:	881a      	ldrh	r2, [r3, #0]
 8003372:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8003376:	f103 0316 	add.w	r3, r3, #22
 800337a:	881b      	ldrh	r3, [r3, #0]
 800337c:	429a      	cmp	r2, r3
 800337e:	d3d1      	bcc.n	8003324 <W25Q_Write+0x132>
		}

		W25Q_Write_Clean(startPage, 0, 4096, previousData);
 8003380:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003384:	3b1c      	subs	r3, #28
 8003386:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800338a:	2100      	movs	r1, #0
 800338c:	f507 5080 	add.w	r0, r7, #4096	@ 0x1000
 8003390:	f100 0018 	add.w	r0, r0, #24
 8003394:	6800      	ldr	r0, [r0, #0]
 8003396:	f7ff fdf3 	bl	8002f80 <W25Q_Write_Clean>

		startSector++;
 800339a:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800339e:	f103 030e 	add.w	r3, r3, #14
 80033a2:	881b      	ldrh	r3, [r3, #0]
 80033a4:	3301      	adds	r3, #1
 80033a6:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80033aa:	f102 020e 	add.w	r2, r2, #14
 80033ae:	8013      	strh	r3, [r2, #0]
		sectorOffset = 0;
 80033b0:	2300      	movs	r3, #0
 80033b2:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80033b6:	f102 0208 	add.w	r2, r2, #8
 80033ba:	6013      	str	r3, [r2, #0]
		dataindx = dataindx+bytesRemaining;
 80033bc:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80033c0:	f103 0316 	add.w	r3, r3, #22
 80033c4:	881b      	ldrh	r3, [r3, #0]
 80033c6:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80033ca:	f102 0204 	add.w	r2, r2, #4
 80033ce:	6812      	ldr	r2, [r2, #0]
 80033d0:	4413      	add	r3, r2
 80033d2:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80033d6:	f102 0204 	add.w	r2, r2, #4
 80033da:	6013      	str	r3, [r2, #0]
		size = size-bytesRemaining;
 80033dc:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80033e0:	f103 0316 	add.w	r3, r3, #22
 80033e4:	881b      	ldrh	r3, [r3, #0]
 80033e6:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80033ea:	4611      	mov	r1, r2
 80033ec:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80033f0:	f852 2c2c 	ldr.w	r2, [r2, #-44]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	f841 3c2c 	str.w	r3, [r1, #-44]
	for (uint16_t i=0; i<numSectors; i++)
 80033fa:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80033fe:	f103 0302 	add.w	r3, r3, #2
 8003402:	881b      	ldrh	r3, [r3, #0]
 8003404:	3301      	adds	r3, #1
 8003406:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800340a:	f102 0202 	add.w	r2, r2, #2
 800340e:	8013      	strh	r3, [r2, #0]
 8003410:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8003414:	f103 0302 	add.w	r3, r3, #2
 8003418:	881a      	ldrh	r2, [r3, #0]
 800341a:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800341e:	f103 031c 	add.w	r3, r3, #28
 8003422:	881b      	ldrh	r3, [r3, #0]
 8003424:	429a      	cmp	r2, r3
 8003426:	f4ff af4d 	bcc.w	80032c4 <W25Q_Write+0xd2>
	}
}
 800342a:	bf00      	nop
 800342c:	bf00      	nop
 800342e:	f507 5781 	add.w	r7, r7, #4128	@ 0x1020
 8003432:	3714      	adds	r7, #20
 8003434:	46bd      	mov	sp, r7
 8003436:	bd90      	pop	{r4, r7, pc}

08003438 <KalmanFilter_Init>:
 */


#include "kalman.h"

void KalmanFilter_Init(KalmanFilter *kf, float Q, float R, float initial_value) {
 8003438:	b480      	push	{r7}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	ed87 0a02 	vstr	s0, [r7, #8]
 8003444:	edc7 0a01 	vstr	s1, [r7, #4]
 8003448:	ed87 1a00 	vstr	s2, [r7]
    kf->Q = Q;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	68ba      	ldr	r2, [r7, #8]
 8003450:	601a      	str	r2, [r3, #0]
    kf->R = R;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	605a      	str	r2, [r3, #4]
    kf->x = initial_value;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	609a      	str	r2, [r3, #8]
    kf->P = 1.0;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003464:	60da      	str	r2, [r3, #12]
    kf->K = 0.0;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f04f 0200 	mov.w	r2, #0
 800346c:	611a      	str	r2, [r3, #16]
}
 800346e:	bf00      	nop
 8003470:	3714      	adds	r7, #20
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
	...

0800347c <KalmanFilter_Update>:

float KalmanFilter_Update(KalmanFilter *kf, float measurement) {
 800347c:	b5b0      	push	{r4, r5, r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	ed87 0a00 	vstr	s0, [r7]
    // Prediction update
    kf->P += kf->Q;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	ed93 7a03 	vldr	s14, [r3, #12]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	edd3 7a00 	vldr	s15, [r3]
 8003494:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	edc3 7a03 	vstr	s15, [r3, #12]

    // Measurement update
    kf->K = kf->P / (kf->P + kf->R);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	edd3 6a03 	vldr	s13, [r3, #12]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	ed93 7a03 	vldr	s14, [r3, #12]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	edd3 7a01 	vldr	s15, [r3, #4]
 80034b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	edc3 7a04 	vstr	s15, [r3, #16]
    kf->x += kf->K * (measurement - kf->x);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	ed93 7a02 	vldr	s14, [r3, #8]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	edd3 6a04 	vldr	s13, [r3, #16]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	edd3 7a02 	vldr	s15, [r3, #8]
 80034d0:	ed97 6a00 	vldr	s12, [r7]
 80034d4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80034d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	edc3 7a02 	vstr	s15, [r3, #8]
    kf->P *= (1.0 - kf->K);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7fd f844 	bl	8000578 <__aeabi_f2d>
 80034f0:	4604      	mov	r4, r0
 80034f2:	460d      	mov	r5, r1
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7fd f83d 	bl	8000578 <__aeabi_f2d>
 80034fe:	4602      	mov	r2, r0
 8003500:	460b      	mov	r3, r1
 8003502:	f04f 0000 	mov.w	r0, #0
 8003506:	490d      	ldr	r1, [pc, #52]	@ (800353c <KalmanFilter_Update+0xc0>)
 8003508:	f7fc fed6 	bl	80002b8 <__aeabi_dsub>
 800350c:	4602      	mov	r2, r0
 800350e:	460b      	mov	r3, r1
 8003510:	4620      	mov	r0, r4
 8003512:	4629      	mov	r1, r5
 8003514:	f7fd f888 	bl	8000628 <__aeabi_dmul>
 8003518:	4602      	mov	r2, r0
 800351a:	460b      	mov	r3, r1
 800351c:	4610      	mov	r0, r2
 800351e:	4619      	mov	r1, r3
 8003520:	f7fd fb7a 	bl	8000c18 <__aeabi_d2f>
 8003524:	4602      	mov	r2, r0
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	60da      	str	r2, [r3, #12]

    return kf->x;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	ee07 3a90 	vmov	s15, r3
}
 8003532:	eeb0 0a67 	vmov.f32	s0, s15
 8003536:	3708      	adds	r7, #8
 8003538:	46bd      	mov	sp, r7
 800353a:	bdb0      	pop	{r4, r5, r7, pc}
 800353c:	3ff00000 	.word	0x3ff00000

08003540 <prv_parse_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed integer
 */
static int32_t
prv_parse_number(lwgps_t* gh, const char* t) {
 8003540:	b480      	push	{r7}
 8003542:	b085      	sub	sp, #20
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
    int32_t res = 0;
 800354a:	2300      	movs	r3, #0
 800354c:	60fb      	str	r3, [r7, #12]
    uint8_t minus;

    if (t == NULL) {
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d106      	bne.n	8003562 <prv_parse_number+0x22>
        t = gh->p.term_str;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	3371      	adds	r3, #113	@ 0x71
 8003558:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 800355a:	e002      	b.n	8003562 <prv_parse_number+0x22>
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	3301      	adds	r3, #1
 8003560:	603b      	str	r3, [r7, #0]
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d003      	beq.n	8003570 <prv_parse_number+0x30>
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	2b20      	cmp	r3, #32
 800356e:	d0f5      	beq.n	800355c <prv_parse_number+0x1c>

    minus = (*t == '-' ? (++t, 1) : 0);
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	2b2d      	cmp	r3, #45	@ 0x2d
 8003576:	d104      	bne.n	8003582 <prv_parse_number+0x42>
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	3301      	adds	r3, #1
 800357c:	603b      	str	r3, [r7, #0]
 800357e:	2301      	movs	r3, #1
 8003580:	e000      	b.n	8003584 <prv_parse_number+0x44>
 8003582:	2300      	movs	r3, #0
 8003584:	72fb      	strb	r3, [r7, #11]
    for (; t != NULL && CIN(*t); ++t) {
 8003586:	e00d      	b.n	80035a4 <prv_parse_number+0x64>
        res = 10 * res + CTN(*t);
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	4613      	mov	r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	4413      	add	r3, r2
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	461a      	mov	r2, r3
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	3b30      	subs	r3, #48	@ 0x30
 800359a:	4413      	add	r3, r2
 800359c:	60fb      	str	r3, [r7, #12]
    for (; t != NULL && CIN(*t); ++t) {
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	3301      	adds	r3, #1
 80035a2:	603b      	str	r3, [r7, #0]
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d007      	beq.n	80035ba <prv_parse_number+0x7a>
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	2b2f      	cmp	r3, #47	@ 0x2f
 80035b0:	d903      	bls.n	80035ba <prv_parse_number+0x7a>
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	2b39      	cmp	r3, #57	@ 0x39
 80035b8:	d9e6      	bls.n	8003588 <prv_parse_number+0x48>
    }
    return minus ? -res : res;
 80035ba:	7afb      	ldrb	r3, [r7, #11]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d002      	beq.n	80035c6 <prv_parse_number+0x86>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	425b      	negs	r3, r3
 80035c4:	e000      	b.n	80035c8 <prv_parse_number+0x88>
 80035c6:	68fb      	ldr	r3, [r7, #12]
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3714      	adds	r7, #20
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <prv_parse_float_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed double in \ref lwgps_float_t format
 */
static lwgps_float_t
prv_parse_float_number(lwgps_t* gh, const char* t) {
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
    lwgps_float_t res;

    if (t == NULL) {
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d106      	bne.n	80035f2 <prv_parse_float_number+0x1e>
        t = gh->p.term_str;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	3371      	adds	r3, #113	@ 0x71
 80035e8:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 80035ea:	e002      	b.n	80035f2 <prv_parse_float_number+0x1e>
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	3301      	adds	r3, #1
 80035f0:	603b      	str	r3, [r7, #0]
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d003      	beq.n	8003600 <prv_parse_float_number+0x2c>
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	2b20      	cmp	r3, #32
 80035fe:	d0f5      	beq.n	80035ec <prv_parse_float_number+0x18>

#if LWGPS_CFG_DOUBLE
    res = strtod(t, NULL);                      /* Parse string to double */
 8003600:	2100      	movs	r1, #0
 8003602:	6838      	ldr	r0, [r7, #0]
 8003604:	f009 fcc4 	bl	800cf90 <strtod>
 8003608:	ed87 0b02 	vstr	d0, [r7, #8]
#else /* LWGPS_CFG_DOUBLE */
    res = strtof(t, NULL);                      /* Parse string to float */
#endif /* !LWGPS_CFG_DOUBLE */

    return FLT(res);                            /* Return casted value, based on float size */
 800360c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003610:	ec43 2b17 	vmov	d7, r2, r3
}
 8003614:	eeb0 0a47 	vmov.f32	s0, s14
 8003618:	eef0 0a67 	vmov.f32	s1, s15
 800361c:	3710      	adds	r7, #16
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
	...

08003624 <prv_parse_lat_long>:
 *                  NMEA output for latitude is ddmm.sss and longitude is dddmm.sss
 * \param[in]       gh: GPS handle
 * \return          Latitude/Longitude value in degrees
 */
static lwgps_float_t
prv_parse_lat_long(lwgps_t* gh) {
 8003624:	b580      	push	{r7, lr}
 8003626:	b088      	sub	sp, #32
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
    lwgps_float_t ll, deg, min;

    ll = prv_parse_float_number(gh, NULL);      /* Parse value as double */
 800362c:	2100      	movs	r1, #0
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f7ff ffd0 	bl	80035d4 <prv_parse_float_number>
 8003634:	ed87 0b06 	vstr	d0, [r7, #24]
    deg = FLT((int)((int)ll / 100));            /* Get absolute degrees value, interested in integer part only */
 8003638:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800363c:	f7fd faa4 	bl	8000b88 <__aeabi_d2iz>
 8003640:	4603      	mov	r3, r0
 8003642:	4a1d      	ldr	r2, [pc, #116]	@ (80036b8 <prv_parse_lat_long+0x94>)
 8003644:	fb82 1203 	smull	r1, r2, r2, r3
 8003648:	1152      	asrs	r2, r2, #5
 800364a:	17db      	asrs	r3, r3, #31
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	4618      	mov	r0, r3
 8003650:	f7fc ff80 	bl	8000554 <__aeabi_i2d>
 8003654:	4602      	mov	r2, r0
 8003656:	460b      	mov	r3, r1
 8003658:	e9c7 2304 	strd	r2, r3, [r7, #16]
    min = ll - (deg * FLT(100));                /* Get remaining part from full number, minutes */
 800365c:	f04f 0200 	mov.w	r2, #0
 8003660:	4b16      	ldr	r3, [pc, #88]	@ (80036bc <prv_parse_lat_long+0x98>)
 8003662:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003666:	f7fc ffdf 	bl	8000628 <__aeabi_dmul>
 800366a:	4602      	mov	r2, r0
 800366c:	460b      	mov	r3, r1
 800366e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003672:	f7fc fe21 	bl	80002b8 <__aeabi_dsub>
 8003676:	4602      	mov	r2, r0
 8003678:	460b      	mov	r3, r1
 800367a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    ll = deg + (min / FLT(60.0));               /* Calculate latitude/longitude */
 800367e:	f04f 0200 	mov.w	r2, #0
 8003682:	4b0f      	ldr	r3, [pc, #60]	@ (80036c0 <prv_parse_lat_long+0x9c>)
 8003684:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003688:	f7fd f8f8 	bl	800087c <__aeabi_ddiv>
 800368c:	4602      	mov	r2, r0
 800368e:	460b      	mov	r3, r1
 8003690:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003694:	f7fc fe12 	bl	80002bc <__adddf3>
 8003698:	4602      	mov	r2, r0
 800369a:	460b      	mov	r3, r1
 800369c:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return ll;
 80036a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036a4:	ec43 2b17 	vmov	d7, r2, r3
}
 80036a8:	eeb0 0a47 	vmov.f32	s0, s14
 80036ac:	eef0 0a67 	vmov.f32	s1, s15
 80036b0:	3720      	adds	r7, #32
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	51eb851f 	.word	0x51eb851f
 80036bc:	40590000 	.word	0x40590000
 80036c0:	404e0000 	.word	0x404e0000

080036c4 <prv_parse_term>:
 * \brief           Parse received term
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_parse_term(lwgps_t* gh) {
 80036c4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80036c8:	b082      	sub	sp, #8
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
    if (gh->p.term_num == 0) {                  /* Check string type */
 80036ce:	6879      	ldr	r1, [r7, #4]
 80036d0:	f891 107f 	ldrb.w	r1, [r1, #127]	@ 0x7f
 80036d4:	2900      	cmp	r1, #0
 80036d6:	d169      	bne.n	80037ac <prv_parse_term+0xe8>
        if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
        } else if (!strncmp(gh->p.term_str, "$GPGGA", 6) || !strncmp(gh->p.term_str, "$GNGGA", 6)) {
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	3371      	adds	r3, #113	@ 0x71
 80036dc:	2206      	movs	r2, #6
 80036de:	49ba      	ldr	r1, [pc, #744]	@ (80039c8 <prv_parse_term+0x304>)
 80036e0:	4618      	mov	r0, r3
 80036e2:	f009 fd6e 	bl	800d1c2 <strncmp>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d009      	beq.n	8003700 <prv_parse_term+0x3c>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	3371      	adds	r3, #113	@ 0x71
 80036f0:	2206      	movs	r2, #6
 80036f2:	49b6      	ldr	r1, [pc, #728]	@ (80039cc <prv_parse_term+0x308>)
 80036f4:	4618      	mov	r0, r3
 80036f6:	f009 fd64 	bl	800d1c2 <strncmp>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d104      	bne.n	800370a <prv_parse_term+0x46>
            gh->p.stat = STAT_GGA;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 8003708:	e04e      	b.n	80037a8 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
        } else if (!strncmp(gh->p.term_str, "$GPGSA", 6) || !strncmp(gh->p.term_str, "$GNGSA", 6)) {
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	3371      	adds	r3, #113	@ 0x71
 800370e:	2206      	movs	r2, #6
 8003710:	49af      	ldr	r1, [pc, #700]	@ (80039d0 <prv_parse_term+0x30c>)
 8003712:	4618      	mov	r0, r3
 8003714:	f009 fd55 	bl	800d1c2 <strncmp>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d009      	beq.n	8003732 <prv_parse_term+0x6e>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	3371      	adds	r3, #113	@ 0x71
 8003722:	2206      	movs	r2, #6
 8003724:	49ab      	ldr	r1, [pc, #684]	@ (80039d4 <prv_parse_term+0x310>)
 8003726:	4618      	mov	r0, r3
 8003728:	f009 fd4b 	bl	800d1c2 <strncmp>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d104      	bne.n	800373c <prv_parse_term+0x78>
            gh->p.stat = STAT_GSA;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2202      	movs	r2, #2
 8003736:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 800373a:	e035      	b.n	80037a8 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
        } else if (!strncmp(gh->p.term_str, "$GPGSV", 6) || !strncmp(gh->p.term_str, "$GNGSV", 6)) {
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	3371      	adds	r3, #113	@ 0x71
 8003740:	2206      	movs	r2, #6
 8003742:	49a5      	ldr	r1, [pc, #660]	@ (80039d8 <prv_parse_term+0x314>)
 8003744:	4618      	mov	r0, r3
 8003746:	f009 fd3c 	bl	800d1c2 <strncmp>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d009      	beq.n	8003764 <prv_parse_term+0xa0>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	3371      	adds	r3, #113	@ 0x71
 8003754:	2206      	movs	r2, #6
 8003756:	49a1      	ldr	r1, [pc, #644]	@ (80039dc <prv_parse_term+0x318>)
 8003758:	4618      	mov	r0, r3
 800375a:	f009 fd32 	bl	800d1c2 <strncmp>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d104      	bne.n	800376e <prv_parse_term+0xaa>
            gh->p.stat = STAT_GSV;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2203      	movs	r2, #3
 8003768:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 800376c:	e01c      	b.n	80037a8 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
        } else if (!strncmp(gh->p.term_str, "$GPRMC", 6) || !strncmp(gh->p.term_str, "$GNRMC", 6)) {
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	3371      	adds	r3, #113	@ 0x71
 8003772:	2206      	movs	r2, #6
 8003774:	499a      	ldr	r1, [pc, #616]	@ (80039e0 <prv_parse_term+0x31c>)
 8003776:	4618      	mov	r0, r3
 8003778:	f009 fd23 	bl	800d1c2 <strncmp>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d009      	beq.n	8003796 <prv_parse_term+0xd2>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	3371      	adds	r3, #113	@ 0x71
 8003786:	2206      	movs	r2, #6
 8003788:	4996      	ldr	r1, [pc, #600]	@ (80039e4 <prv_parse_term+0x320>)
 800378a:	4618      	mov	r0, r3
 800378c:	f009 fd19 	bl	800d1c2 <strncmp>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d104      	bne.n	80037a0 <prv_parse_term+0xdc>
            gh->p.stat = STAT_RMC;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2204      	movs	r2, #4
 800379a:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 800379e:	e003      	b.n	80037a8 <prv_parse_term+0xe4>
#if LWGPS_CFG_STATEMENT_PUBX
        } else if (!strncmp(gh->p.term_str, "$PUBX", 5)) {
            gh->p.stat = STAT_UBX;
#endif /* LWGPS_CFG_STATEMENT_PUBX */
        } else {
            gh->p.stat = STAT_UNKNOWN;          /* Invalid statement for library */
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
        }
        return 1;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e231      	b.n	8003c10 <prv_parse_term+0x54c>
    }

    /* Start parsing terms */
    if (gh->p.stat == STAT_UNKNOWN) {
 80037ac:	6879      	ldr	r1, [r7, #4]
 80037ae:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 80037b2:	2900      	cmp	r1, #0
 80037b4:	f000 822b 	beq.w	8003c0e <prv_parse_term+0x54a>
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {        /* Process GPGGA statement */
 80037b8:	6879      	ldr	r1, [r7, #4]
 80037ba:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 80037be:	2901      	cmp	r1, #1
 80037c0:	f040 80c9 	bne.w	8003956 <prv_parse_term+0x292>
        switch (gh->p.term_num) {
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 80037ca:	3b01      	subs	r3, #1
 80037cc:	2b0a      	cmp	r3, #10
 80037ce:	f200 8213 	bhi.w	8003bf8 <prv_parse_term+0x534>
 80037d2:	a201      	add	r2, pc, #4	@ (adr r2, 80037d8 <prv_parse_term+0x114>)
 80037d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d8:	08003805 	.word	0x08003805
 80037dc:	0800387f 	.word	0x0800387f
 80037e0:	08003895 	.word	0x08003895
 80037e4:	080038bf 	.word	0x080038bf
 80037e8:	080038d5 	.word	0x080038d5
 80037ec:	080038ff 	.word	0x080038ff
 80037f0:	08003913 	.word	0x08003913
 80037f4:	08003bf9 	.word	0x08003bf9
 80037f8:	08003927 	.word	0x08003927
 80037fc:	08003bf9 	.word	0x08003bf9
 8003800:	0800393f 	.word	0x0800393f
            case 1:                             /* Process UTC time */
                gh->p.data.gga.hours = 10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800380a:	3b30      	subs	r3, #48	@ 0x30
 800380c:	b2db      	uxtb	r3, r3
 800380e:	461a      	mov	r2, r3
 8003810:	0092      	lsls	r2, r2, #2
 8003812:	4413      	add	r3, r2
 8003814:	005b      	lsls	r3, r3, #1
 8003816:	b2da      	uxtb	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 800381e:	4413      	add	r3, r2
 8003820:	b2db      	uxtb	r3, r3
 8003822:	3b30      	subs	r3, #48	@ 0x30
 8003824:	b2da      	uxtb	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f883 20aa 	strb.w	r2, [r3, #170]	@ 0xaa
                gh->p.data.gga.minutes = 10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 8003832:	3b30      	subs	r3, #48	@ 0x30
 8003834:	b2db      	uxtb	r3, r3
 8003836:	461a      	mov	r2, r3
 8003838:	0092      	lsls	r2, r2, #2
 800383a:	4413      	add	r3, r2
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	b2da      	uxtb	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8003846:	4413      	add	r3, r2
 8003848:	b2db      	uxtb	r3, r3
 800384a:	3b30      	subs	r3, #48	@ 0x30
 800384c:	b2da      	uxtb	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f883 20ab 	strb.w	r2, [r3, #171]	@ 0xab
                gh->p.data.gga.seconds = 10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 800385a:	3b30      	subs	r3, #48	@ 0x30
 800385c:	b2db      	uxtb	r3, r3
 800385e:	461a      	mov	r2, r3
 8003860:	0092      	lsls	r2, r2, #2
 8003862:	4413      	add	r3, r2
 8003864:	005b      	lsls	r3, r3, #1
 8003866:	b2da      	uxtb	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 800386e:	4413      	add	r3, r2
 8003870:	b2db      	uxtb	r3, r3
 8003872:	3b30      	subs	r3, #48	@ 0x30
 8003874:	b2da      	uxtb	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
                break;
 800387c:	e1c7      	b.n	8003c0e <prv_parse_term+0x54a>
            case 2:                             /* Latitude */
                gh->p.data.gga.latitude = prv_parse_lat_long(gh);   /* Parse latitude */
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f7ff fed0 	bl	8003624 <prv_parse_lat_long>
 8003884:	eeb0 7a40 	vmov.f32	s14, s0
 8003888:	eef0 7a60 	vmov.f32	s15, s1
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	ed83 7b22 	vstr	d7, [r3, #136]	@ 0x88
                break;
 8003892:	e1bc      	b.n	8003c0e <prv_parse_term+0x54a>
            case 3:                             /* Latitude north/south information */
                if (gh->p.term_str[0] == 'S' || gh->p.term_str[0] == 's') {
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800389a:	2b53      	cmp	r3, #83	@ 0x53
 800389c:	d005      	beq.n	80038aa <prv_parse_term+0x1e6>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80038a4:	2b73      	cmp	r3, #115	@ 0x73
 80038a6:	f040 81a9 	bne.w	8003bfc <prv_parse_term+0x538>
                    gh->p.data.gga.latitude = -gh->p.data.gga.latitude;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 80038b0:	4690      	mov	r8, r2
 80038b2:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	e9c3 8922 	strd	r8, r9, [r3, #136]	@ 0x88
                }
                break;
 80038bc:	e19e      	b.n	8003bfc <prv_parse_term+0x538>
            case 4:                             /* Longitude */
                gh->p.data.gga.longitude = prv_parse_lat_long(gh);  /* Parse longitude */
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f7ff feb0 	bl	8003624 <prv_parse_lat_long>
 80038c4:	eeb0 7a40 	vmov.f32	s14, s0
 80038c8:	eef0 7a60 	vmov.f32	s15, s1
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	ed83 7b24 	vstr	d7, [r3, #144]	@ 0x90
                break;
 80038d2:	e19c      	b.n	8003c0e <prv_parse_term+0x54a>
            case 5:                             /* Longitude east/west information */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80038da:	2b57      	cmp	r3, #87	@ 0x57
 80038dc:	d005      	beq.n	80038ea <prv_parse_term+0x226>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80038e4:	2b77      	cmp	r3, #119	@ 0x77
 80038e6:	f040 818b 	bne.w	8003c00 <prv_parse_term+0x53c>
                    gh->p.data.gga.longitude = -gh->p.data.gga.longitude;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 80038f0:	4614      	mov	r4, r2
 80038f2:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	e9c3 4524 	strd	r4, r5, [r3, #144]	@ 0x90
                }
                break;
 80038fc:	e180      	b.n	8003c00 <prv_parse_term+0x53c>
            case 6:                             /* Fix status */
                gh->p.data.gga.fix = (uint8_t)prv_parse_number(gh, NULL);
 80038fe:	2100      	movs	r1, #0
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f7ff fe1d 	bl	8003540 <prv_parse_number>
 8003906:	4603      	mov	r3, r0
 8003908:	b2da      	uxtb	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
                break;
 8003910:	e17d      	b.n	8003c0e <prv_parse_term+0x54a>
            case 7:                             /* Satellites in use */
                gh->p.data.gga.sats_in_use = (uint8_t)prv_parse_number(gh, NULL);
 8003912:	2100      	movs	r1, #0
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f7ff fe13 	bl	8003540 <prv_parse_number>
 800391a:	4603      	mov	r3, r0
 800391c:	b2da      	uxtb	r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
                break;
 8003924:	e173      	b.n	8003c0e <prv_parse_term+0x54a>
            case 9:                             /* Altitude */
                gh->p.data.gga.altitude = prv_parse_float_number(gh, NULL);
 8003926:	2100      	movs	r1, #0
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f7ff fe53 	bl	80035d4 <prv_parse_float_number>
 800392e:	eeb0 7a40 	vmov.f32	s14, s0
 8003932:	eef0 7a60 	vmov.f32	s15, s1
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	ed83 7b26 	vstr	d7, [r3, #152]	@ 0x98
                break;
 800393c:	e167      	b.n	8003c0e <prv_parse_term+0x54a>
            case 11:                            /* Altitude above ellipsoid */
                gh->p.data.gga.geo_sep = prv_parse_float_number(gh, NULL);
 800393e:	2100      	movs	r1, #0
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f7ff fe47 	bl	80035d4 <prv_parse_float_number>
 8003946:	eeb0 7a40 	vmov.f32	s14, s0
 800394a:	eef0 7a60 	vmov.f32	s15, s1
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	ed83 7b28 	vstr	d7, [r3, #160]	@ 0xa0
                break;
 8003954:	e15b      	b.n	8003c0e <prv_parse_term+0x54a>
            default:
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {        /* Process GPGSA statement */
 8003956:	6879      	ldr	r1, [r7, #4]
 8003958:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 800395c:	2902      	cmp	r1, #2
 800395e:	f040 8083 	bne.w	8003a68 <prv_parse_term+0x3a4>
        switch (gh->p.term_num) {
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8003968:	3b02      	subs	r3, #2
 800396a:	2b0f      	cmp	r3, #15
 800396c:	d860      	bhi.n	8003a30 <prv_parse_term+0x36c>
 800396e:	a201      	add	r2, pc, #4	@ (adr r2, 8003974 <prv_parse_term+0x2b0>)
 8003970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003974:	080039b5 	.word	0x080039b5
 8003978:	08003a31 	.word	0x08003a31
 800397c:	08003a31 	.word	0x08003a31
 8003980:	08003a31 	.word	0x08003a31
 8003984:	08003a31 	.word	0x08003a31
 8003988:	08003a31 	.word	0x08003a31
 800398c:	08003a31 	.word	0x08003a31
 8003990:	08003a31 	.word	0x08003a31
 8003994:	08003a31 	.word	0x08003a31
 8003998:	08003a31 	.word	0x08003a31
 800399c:	08003a31 	.word	0x08003a31
 80039a0:	08003a31 	.word	0x08003a31
 80039a4:	08003a31 	.word	0x08003a31
 80039a8:	080039e9 	.word	0x080039e9
 80039ac:	08003a01 	.word	0x08003a01
 80039b0:	08003a19 	.word	0x08003a19
            case 2:                             /* Process fix mode */
                gh->p.data.gsa.fix_mode = (uint8_t)prv_parse_number(gh, NULL);
 80039b4:	2100      	movs	r1, #0
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f7ff fdc2 	bl	8003540 <prv_parse_number>
 80039bc:	4603      	mov	r3, r0
 80039be:	b2da      	uxtb	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
                break;
 80039c6:	e122      	b.n	8003c0e <prv_parse_term+0x54a>
 80039c8:	08010028 	.word	0x08010028
 80039cc:	08010030 	.word	0x08010030
 80039d0:	08010038 	.word	0x08010038
 80039d4:	08010040 	.word	0x08010040
 80039d8:	08010048 	.word	0x08010048
 80039dc:	08010050 	.word	0x08010050
 80039e0:	08010058 	.word	0x08010058
 80039e4:	08010060 	.word	0x08010060
            case 15:                            /* Process PDOP */
                gh->p.data.gsa.dop_p = prv_parse_float_number(gh, NULL);
 80039e8:	2100      	movs	r1, #0
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f7ff fdf2 	bl	80035d4 <prv_parse_float_number>
 80039f0:	eeb0 7a40 	vmov.f32	s14, s0
 80039f4:	eef0 7a60 	vmov.f32	s15, s1
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	ed83 7b26 	vstr	d7, [r3, #152]	@ 0x98
                break;
 80039fe:	e106      	b.n	8003c0e <prv_parse_term+0x54a>
            case 16:                            /* Process HDOP */
                gh->p.data.gsa.dop_h = prv_parse_float_number(gh, NULL);
 8003a00:	2100      	movs	r1, #0
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f7ff fde6 	bl	80035d4 <prv_parse_float_number>
 8003a08:	eeb0 7a40 	vmov.f32	s14, s0
 8003a0c:	eef0 7a60 	vmov.f32	s15, s1
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	ed83 7b22 	vstr	d7, [r3, #136]	@ 0x88
                break;
 8003a16:	e0fa      	b.n	8003c0e <prv_parse_term+0x54a>
            case 17:                            /* Process VDOP */
                gh->p.data.gsa.dop_v = prv_parse_float_number(gh, NULL);
 8003a18:	2100      	movs	r1, #0
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f7ff fdda 	bl	80035d4 <prv_parse_float_number>
 8003a20:	eeb0 7a40 	vmov.f32	s14, s0
 8003a24:	eef0 7a60 	vmov.f32	s15, s1
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	ed83 7b24 	vstr	d7, [r3, #144]	@ 0x90
                break;
 8003a2e:	e0ee      	b.n	8003c0e <prv_parse_term+0x54a>
            default:
                /* Parse satellite IDs */
                if (gh->p.term_num >= 3 && gh->p.term_num <= 14) {
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	f240 80e4 	bls.w	8003c04 <prv_parse_term+0x540>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8003a42:	2b0e      	cmp	r3, #14
 8003a44:	f200 80de 	bhi.w	8003c04 <prv_parse_term+0x540>
                    gh->p.data.gsa.satellites_ids[gh->p.term_num - 3] = (uint8_t)prv_parse_number(gh, NULL);
 8003a48:	2100      	movs	r1, #0
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7ff fd78 	bl	8003540 <prv_parse_number>
 8003a50:	4602      	mov	r2, r0
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8003a58:	3b03      	subs	r3, #3
 8003a5a:	b2d1      	uxtb	r1, r2
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	4413      	add	r3, r2
 8003a60:	460a      	mov	r2, r1
 8003a62:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
                }
                break;
 8003a66:	e0cd      	b.n	8003c04 <prv_parse_term+0x540>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {        /* Process GPGSV statement */
 8003a68:	6879      	ldr	r1, [r7, #4]
 8003a6a:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 8003a6e:	2903      	cmp	r1, #3
 8003a70:	d11b      	bne.n	8003aaa <prv_parse_term+0x3e6>
        switch (gh->p.term_num) {
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d002      	beq.n	8003a82 <prv_parse_term+0x3be>
 8003a7c:	2b03      	cmp	r3, #3
 8003a7e:	d00a      	beq.n	8003a96 <prv_parse_term+0x3d2>
                                break;
                        }
                    }
                }
#endif /* LWGPS_CFG_STATEMENT_GPGSV_SAT_DET */
                break;
 8003a80:	e0c5      	b.n	8003c0e <prv_parse_term+0x54a>
                gh->p.data.gsv.stat_num = (uint8_t)prv_parse_number(gh, NULL);
 8003a82:	2100      	movs	r1, #0
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f7ff fd5b 	bl	8003540 <prv_parse_number>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	b2da      	uxtb	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
                break;
 8003a94:	e0bb      	b.n	8003c0e <prv_parse_term+0x54a>
                gh->p.data.gsv.sats_in_view = (uint8_t)prv_parse_number(gh, NULL);
 8003a96:	2100      	movs	r1, #0
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f7ff fd51 	bl	8003540 <prv_parse_number>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	b2da      	uxtb	r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
                break;
 8003aa8:	e0b1      	b.n	8003c0e <prv_parse_term+0x54a>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {        /* Process GPRMC statement */
 8003aaa:	6879      	ldr	r1, [r7, #4]
 8003aac:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 8003ab0:	2904      	cmp	r1, #4
 8003ab2:	f040 80ac 	bne.w	8003c0e <prv_parse_term+0x54a>
        switch (gh->p.term_num) {
 8003ab6:	6879      	ldr	r1, [r7, #4]
 8003ab8:	f891 107f 	ldrb.w	r1, [r1, #127]	@ 0x7f
 8003abc:	3902      	subs	r1, #2
 8003abe:	2909      	cmp	r1, #9
 8003ac0:	f200 80a2 	bhi.w	8003c08 <prv_parse_term+0x544>
 8003ac4:	a001      	add	r0, pc, #4	@ (adr r0, 8003acc <prv_parse_term+0x408>)
 8003ac6:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8003aca:	bf00      	nop
 8003acc:	08003af5 	.word	0x08003af5
 8003ad0:	08003c09 	.word	0x08003c09
 8003ad4:	08003c09 	.word	0x08003c09
 8003ad8:	08003c09 	.word	0x08003c09
 8003adc:	08003c09 	.word	0x08003c09
 8003ae0:	08003b0f 	.word	0x08003b0f
 8003ae4:	08003b27 	.word	0x08003b27
 8003ae8:	08003b3f 	.word	0x08003b3f
 8003aec:	08003bb9 	.word	0x08003bb9
 8003af0:	08003bd1 	.word	0x08003bd1
            case 2:                             /* Process valid status */
                gh->p.data.rmc.is_valid = (gh->p.term_str[0] == 'A');
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8003afa:	2b41      	cmp	r3, #65	@ 0x41
 8003afc:	bf0c      	ite	eq
 8003afe:	2301      	moveq	r3, #1
 8003b00:	2300      	movne	r3, #0
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	461a      	mov	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
                break;
 8003b0c:	e07f      	b.n	8003c0e <prv_parse_term+0x54a>
            case 7:                             /* Process ground speed in knots */
                gh->p.data.rmc.speed = prv_parse_float_number(gh, NULL);
 8003b0e:	2100      	movs	r1, #0
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f7ff fd5f 	bl	80035d4 <prv_parse_float_number>
 8003b16:	eeb0 7a40 	vmov.f32	s14, s0
 8003b1a:	eef0 7a60 	vmov.f32	s15, s1
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	ed83 7b24 	vstr	d7, [r3, #144]	@ 0x90
                break;
 8003b24:	e073      	b.n	8003c0e <prv_parse_term+0x54a>
            case 8:                             /* Process true ground coarse */
                gh->p.data.rmc.course = prv_parse_float_number(gh, NULL);
 8003b26:	2100      	movs	r1, #0
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f7ff fd53 	bl	80035d4 <prv_parse_float_number>
 8003b2e:	eeb0 7a40 	vmov.f32	s14, s0
 8003b32:	eef0 7a60 	vmov.f32	s15, s1
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	ed83 7b26 	vstr	d7, [r3, #152]	@ 0x98
                break;
 8003b3c:	e067      	b.n	8003c0e <prv_parse_term+0x54a>
            case 9:                             /* Process date */
                gh->p.data.rmc.date = (uint8_t)(10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]));
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8003b44:	3b30      	subs	r3, #48	@ 0x30
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	461a      	mov	r2, r3
 8003b4a:	0092      	lsls	r2, r2, #2
 8003b4c:	4413      	add	r3, r2
 8003b4e:	005b      	lsls	r3, r3, #1
 8003b50:	b2da      	uxtb	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8003b58:	4413      	add	r3, r2
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	3b30      	subs	r3, #48	@ 0x30
 8003b5e:	b2da      	uxtb	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
                gh->p.data.rmc.month = (uint8_t)(10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]));
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 8003b6c:	3b30      	subs	r3, #48	@ 0x30
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	461a      	mov	r2, r3
 8003b72:	0092      	lsls	r2, r2, #2
 8003b74:	4413      	add	r3, r2
 8003b76:	005b      	lsls	r3, r3, #1
 8003b78:	b2da      	uxtb	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8003b80:	4413      	add	r3, r2
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	3b30      	subs	r3, #48	@ 0x30
 8003b86:	b2da      	uxtb	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
                gh->p.data.rmc.year = (uint8_t)(10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]));
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8003b94:	3b30      	subs	r3, #48	@ 0x30
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	461a      	mov	r2, r3
 8003b9a:	0092      	lsls	r2, r2, #2
 8003b9c:	4413      	add	r3, r2
 8003b9e:	005b      	lsls	r3, r3, #1
 8003ba0:	b2da      	uxtb	r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 8003ba8:	4413      	add	r3, r2
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	3b30      	subs	r3, #48	@ 0x30
 8003bae:	b2da      	uxtb	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f883 208b 	strb.w	r2, [r3, #139]	@ 0x8b
                break;
 8003bb6:	e02a      	b.n	8003c0e <prv_parse_term+0x54a>
            case 10:                            /* Process magnetic variation */
                gh->p.data.rmc.variation = prv_parse_float_number(gh, NULL);
 8003bb8:	2100      	movs	r1, #0
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f7ff fd0a 	bl	80035d4 <prv_parse_float_number>
 8003bc0:	eeb0 7a40 	vmov.f32	s14, s0
 8003bc4:	eef0 7a60 	vmov.f32	s15, s1
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	ed83 7b28 	vstr	d7, [r3, #160]	@ 0xa0
                break;
 8003bce:	e01e      	b.n	8003c0e <prv_parse_term+0x54a>
            case 11:                            /* Process magnetic variation east/west */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 8003bd0:	6879      	ldr	r1, [r7, #4]
 8003bd2:	f891 1071 	ldrb.w	r1, [r1, #113]	@ 0x71
 8003bd6:	2957      	cmp	r1, #87	@ 0x57
 8003bd8:	d004      	beq.n	8003be4 <prv_parse_term+0x520>
 8003bda:	6879      	ldr	r1, [r7, #4]
 8003bdc:	f891 1071 	ldrb.w	r1, [r1, #113]	@ 0x71
 8003be0:	2977      	cmp	r1, #119	@ 0x77
 8003be2:	d113      	bne.n	8003c0c <prv_parse_term+0x548>
                    gh->p.data.rmc.variation = -gh->p.data.rmc.variation;
 8003be4:	6879      	ldr	r1, [r7, #4]
 8003be6:	e9d1 0128 	ldrd	r0, r1, [r1, #160]	@ 0xa0
 8003bea:	4602      	mov	r2, r0
 8003bec:	f081 4300 	eor.w	r3, r1, #2147483648	@ 0x80000000
 8003bf0:	6879      	ldr	r1, [r7, #4]
 8003bf2:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
                }
                break;
 8003bf6:	e009      	b.n	8003c0c <prv_parse_term+0x548>
                break;
 8003bf8:	bf00      	nop
 8003bfa:	e008      	b.n	8003c0e <prv_parse_term+0x54a>
                break;
 8003bfc:	bf00      	nop
 8003bfe:	e006      	b.n	8003c0e <prv_parse_term+0x54a>
                break;
 8003c00:	bf00      	nop
 8003c02:	e004      	b.n	8003c0e <prv_parse_term+0x54a>
                break;
 8003c04:	bf00      	nop
 8003c06:	e002      	b.n	8003c0e <prv_parse_term+0x54a>
            default:
                break;
 8003c08:	bf00      	nop
 8003c0a:	e000      	b.n	8003c0e <prv_parse_term+0x54a>
                break;
 8003c0c:	bf00      	nop
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
#endif /* LWGPS_CFG_STATEMENT_PUBX */
    }
    return 1;
 8003c0e:	2301      	movs	r3, #1
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3708      	adds	r7, #8
 8003c14:	46bd      	mov	sp, r7
 8003c16:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003c1a:	bf00      	nop

08003c1c <prv_check_crc>:
 * \brief           Compare calculated CRC with received CRC
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_check_crc(lwgps_t* gh) {
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
    uint8_t crc;
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04) | (CHTN(gh->p.term_str[1]) & 0x0F);   /* Convert received CRC from string (hex) to number */
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8003c2a:	2b2f      	cmp	r3, #47	@ 0x2f
 8003c2c:	d90d      	bls.n	8003c4a <prv_check_crc+0x2e>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8003c34:	2b39      	cmp	r3, #57	@ 0x39
 8003c36:	d808      	bhi.n	8003c4a <prv_check_crc+0x2e>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8003c3e:	3b30      	subs	r3, #48	@ 0x30
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	b25b      	sxtb	r3, r3
 8003c44:	011b      	lsls	r3, r3, #4
 8003c46:	b25a      	sxtb	r2, r3
 8003c48:	e026      	b.n	8003c98 <prv_check_crc+0x7c>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8003c50:	2b60      	cmp	r3, #96	@ 0x60
 8003c52:	d90d      	bls.n	8003c70 <prv_check_crc+0x54>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8003c5a:	2b7a      	cmp	r3, #122	@ 0x7a
 8003c5c:	d808      	bhi.n	8003c70 <prv_check_crc+0x54>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8003c64:	3b57      	subs	r3, #87	@ 0x57
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	b25b      	sxtb	r3, r3
 8003c6a:	011b      	lsls	r3, r3, #4
 8003c6c:	b25a      	sxtb	r2, r3
 8003c6e:	e013      	b.n	8003c98 <prv_check_crc+0x7c>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8003c76:	2b40      	cmp	r3, #64	@ 0x40
 8003c78:	d90d      	bls.n	8003c96 <prv_check_crc+0x7a>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8003c80:	2b5a      	cmp	r3, #90	@ 0x5a
 8003c82:	d808      	bhi.n	8003c96 <prv_check_crc+0x7a>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8003c8a:	3b37      	subs	r3, #55	@ 0x37
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	b25b      	sxtb	r3, r3
 8003c90:	011b      	lsls	r3, r3, #4
 8003c92:	b25a      	sxtb	r2, r3
 8003c94:	e000      	b.n	8003c98 <prv_check_crc+0x7c>
 8003c96:	2200      	movs	r2, #0
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8003c9e:	2b2f      	cmp	r3, #47	@ 0x2f
 8003ca0:	d90c      	bls.n	8003cbc <prv_check_crc+0xa0>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8003ca8:	2b39      	cmp	r3, #57	@ 0x39
 8003caa:	d807      	bhi.n	8003cbc <prv_check_crc+0xa0>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8003cb2:	b25b      	sxtb	r3, r3
 8003cb4:	f003 030f 	and.w	r3, r3, #15
 8003cb8:	b25b      	sxtb	r3, r3
 8003cba:	e028      	b.n	8003d0e <prv_check_crc+0xf2>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8003cc2:	2b60      	cmp	r3, #96	@ 0x60
 8003cc4:	d90e      	bls.n	8003ce4 <prv_check_crc+0xc8>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8003ccc:	2b7a      	cmp	r3, #122	@ 0x7a
 8003cce:	d809      	bhi.n	8003ce4 <prv_check_crc+0xc8>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8003cd6:	3b57      	subs	r3, #87	@ 0x57
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	b25b      	sxtb	r3, r3
 8003cdc:	f003 030f 	and.w	r3, r3, #15
 8003ce0:	b25b      	sxtb	r3, r3
 8003ce2:	e014      	b.n	8003d0e <prv_check_crc+0xf2>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8003cea:	2b40      	cmp	r3, #64	@ 0x40
 8003cec:	d90e      	bls.n	8003d0c <prv_check_crc+0xf0>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8003cf4:	2b5a      	cmp	r3, #90	@ 0x5a
 8003cf6:	d809      	bhi.n	8003d0c <prv_check_crc+0xf0>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8003cfe:	3b37      	subs	r3, #55	@ 0x37
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	b25b      	sxtb	r3, r3
 8003d04:	f003 030f 	and.w	r3, r3, #15
 8003d08:	b25b      	sxtb	r3, r3
 8003d0a:	e000      	b.n	8003d0e <prv_check_crc+0xf2>
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	b25b      	sxtb	r3, r3
 8003d12:	73fb      	strb	r3, [r7, #15]
    return gh->p.crc_calc == crc;               /* They must match! */
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8003d1a:	7bfa      	ldrb	r2, [r7, #15]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	bf0c      	ite	eq
 8003d20:	2301      	moveq	r3, #1
 8003d22:	2300      	movne	r3, #0
 8003d24:	b2db      	uxtb	r3, r3
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3714      	adds	r7, #20
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr

08003d32 <prv_copy_from_tmp_memory>:
 * \brief           Copy temporary memory to user memory
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_copy_from_tmp_memory(lwgps_t* gh) {
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b082      	sub	sp, #8
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
    if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d136      	bne.n	8003db2 <prv_copy_from_tmp_memory+0x80>
        gh->latitude = gh->p.data.gga.latitude;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8003d4a:	6879      	ldr	r1, [r7, #4]
 8003d4c:	e9c1 2300 	strd	r2, r3, [r1]
        gh->longitude = gh->p.data.gga.longitude;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8003d56:	6879      	ldr	r1, [r7, #4]
 8003d58:	e9c1 2302 	strd	r2, r3, [r1, #8]
        gh->altitude = gh->p.data.gga.altitude;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 8003d62:	6879      	ldr	r1, [r7, #4]
 8003d64:	e9c1 2304 	strd	r2, r3, [r1, #16]
        gh->geo_sep = gh->p.data.gga.geo_sep;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 8003d6e:	6879      	ldr	r1, [r7, #4]
 8003d70:	e9c1 2306 	strd	r2, r3, [r1, #24]
        gh->sats_in_use = gh->p.data.gga.sats_in_use;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f893 20a8 	ldrb.w	r2, [r3, #168]	@ 0xa8
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f883 2020 	strb.w	r2, [r3, #32]
        gh->fix = gh->p.data.gga.fix;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f893 20a9 	ldrb.w	r2, [r3, #169]	@ 0xa9
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        gh->hours = gh->p.data.gga.hours;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f893 20aa 	ldrb.w	r2, [r3, #170]	@ 0xaa
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
        gh->minutes = gh->p.data.gga.minutes;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f893 20ab 	ldrb.w	r2, [r3, #171]	@ 0xab
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
        gh->seconds = gh->p.data.gga.seconds;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f893 20ac 	ldrb.w	r2, [r3, #172]	@ 0xac
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003db0:	e061      	b.n	8003e76 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d121      	bne.n	8003e00 <prv_copy_from_tmp_memory+0xce>
        gh->dop_h = gh->p.data.gsa.dop_h;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8003dc2:	6879      	ldr	r1, [r7, #4]
 8003dc4:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
        gh->dop_p = gh->p.data.gsa.dop_p;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 8003dce:	6879      	ldr	r1, [r7, #4]
 8003dd0:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
        gh->dop_v = gh->p.data.gsa.dop_v;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8003dda:	6879      	ldr	r1, [r7, #4]
 8003ddc:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
        gh->fix_mode = gh->p.data.gsa.fix_mode;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f893 20a0 	ldrb.w	r2, [r3, #160]	@ 0xa0
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        memcpy(gh->satellites_ids, gh->p.data.gsa.satellites_ids, sizeof(gh->satellites_ids));
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f103 0041 	add.w	r0, r3, #65	@ 0x41
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	33a1      	adds	r3, #161	@ 0xa1
 8003df6:	220c      	movs	r2, #12
 8003df8:	4619      	mov	r1, r3
 8003dfa:	f009 fa78 	bl	800d2ee <memcpy>
 8003dfe:	e03a      	b.n	8003e76 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8003e06:	2b03      	cmp	r3, #3
 8003e08:	d106      	bne.n	8003e18 <prv_copy_from_tmp_memory+0xe6>
        gh->sats_in_view = gh->p.data.gsv.sats_in_view;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f893 2088 	ldrb.w	r2, [r3, #136]	@ 0x88
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8003e16:	e02e      	b.n	8003e76 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8003e1e:	2b04      	cmp	r3, #4
 8003e20:	d129      	bne.n	8003e76 <prv_copy_from_tmp_memory+0x144>
        gh->course = gh->p.data.rmc.course;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 8003e28:	6879      	ldr	r1, [r7, #4]
 8003e2a:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
        gh->is_valid = gh->p.data.rmc.is_valid;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f893 2088 	ldrb.w	r2, [r3, #136]	@ 0x88
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
        gh->speed = gh->p.data.rmc.speed;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8003e40:	6879      	ldr	r1, [r7, #4]
 8003e42:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
        gh->variation = gh->p.data.rmc.variation;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 8003e4c:	6879      	ldr	r1, [r7, #4]
 8003e4e:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
        gh->date = gh->p.data.rmc.date;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f893 2089 	ldrb.w	r2, [r3, #137]	@ 0x89
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
        gh->month = gh->p.data.rmc.month;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f893 208a 	ldrb.w	r2, [r3, #138]	@ 0x8a
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
        gh->year = gh->p.data.rmc.year;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f893 208b 	ldrb.w	r2, [r3, #139]	@ 0x8b
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
        gh->clk_bias = gh->p.data.time.clk_bias;
        gh->clk_drift = gh->p.data.time.clk_drift;
        gh->tp_gran = gh->p.data.time.tp_gran;
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
    }
    return 1;
 8003e76:	2301      	movs	r3, #1
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3708      	adds	r7, #8
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       gh: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* gh) {
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
    memset(gh, 0x00, sizeof(*gh));              /* Reset structure */
 8003e88:	22b0      	movs	r2, #176	@ 0xb0
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f009 f990 	bl	800d1b2 <memset>
    return 1;
 8003e92:	2301      	movs	r3, #1
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3708      	adds	r7, #8
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <lwgps_process>:
 */
uint8_t
#if LWGPS_CFG_STATUS || __DOXYGEN__
lwgps_process(lwgps_t* gh, const void* data, size_t len, lwgps_process_fn evt_fn) {
#else /* LWGPS_CFG_STATUS */
lwgps_process(lwgps_t* gh, const void* data, size_t len) {
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
#endif /* !LWGPS_CFG_STATUS */
    const uint8_t* d = data;
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	617b      	str	r3, [r7, #20]

    for (; len > 0; ++d, --len) {               /* Process all bytes */
 8003eac:	e0ad      	b.n	800400a <lwgps_process+0x16e>
        if (*d == '$') {                        /* Check for beginning of NMEA line */
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	2b24      	cmp	r3, #36	@ 0x24
 8003eb4:	d128      	bne.n	8003f08 <lwgps_process+0x6c>
            memset(&gh->p, 0x00, sizeof(gh->p));/* Reset private memory */
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	3370      	adds	r3, #112	@ 0x70
 8003eba:	2240      	movs	r2, #64	@ 0x40
 8003ebc:	2100      	movs	r1, #0
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f009 f977 	bl	800d1b2 <memset>
            TERM_ADD(gh, *d);                   /* Add character to term */
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8003eca:	2b0b      	cmp	r3, #11
 8003ecc:	f200 8097 	bhi.w	8003ffe <lwgps_process+0x162>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	781a      	ldrb	r2, [r3, #0]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	440b      	add	r3, r1
 8003ee0:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8003eea:	3301      	adds	r3, #1
 8003eec:	b2da      	uxtb	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8003efa:	461a      	mov	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	4413      	add	r3, r2
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 8003f06:	e07a      	b.n	8003ffe <lwgps_process+0x162>
        } else if (*d == ',') {                 /* Term separator character */
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	2b2c      	cmp	r3, #44	@ 0x2c
 8003f0e:	d11d      	bne.n	8003f4c <lwgps_process+0xb0>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f7ff fbd7 	bl	80036c4 <prv_parse_term>
            CRC_ADD(gh, *d);                    /* Add character to CRC computation */
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f893 2081 	ldrb.w	r2, [r3, #129]	@ 0x81
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	4053      	eors	r3, r2
 8003f22:	b2da      	uxtb	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
            TERM_NEXT(gh);                      /* Start with next term */
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8003f40:	3301      	adds	r3, #1
 8003f42:	b2da      	uxtb	r2, r3
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
 8003f4a:	e058      	b.n	8003ffe <lwgps_process+0x162>
        } else if (*d == '*') {                 /* Start indicates end of data for CRC computation */
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f52:	d117      	bne.n	8003f84 <lwgps_process+0xe8>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	f7ff fbb5 	bl	80036c4 <prv_parse_term>
            gh->p.star = 1;                     /* STAR detected */
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
            TERM_NEXT(gh);                      /* Start with next term */
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8003f78:	3301      	adds	r3, #1
 8003f7a:	b2da      	uxtb	r2, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
 8003f82:	e03c      	b.n	8003ffe <lwgps_process+0x162>
        } else if (*d == '\r') {
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	2b0d      	cmp	r3, #13
 8003f8a:	d109      	bne.n	8003fa0 <lwgps_process+0x104>
            if (prv_check_crc(gh)) {            /* Check for CRC result */
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f7ff fe45 	bl	8003c1c <prv_check_crc>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d032      	beq.n	8003ffe <lwgps_process+0x162>
                /* CRC is OK, in theory we can copy data from statements to user data */
                prv_copy_from_tmp_memory(gh);   /* Copy memory from temporary to user memory */
 8003f98:	68f8      	ldr	r0, [r7, #12]
 8003f9a:	f7ff feca 	bl	8003d32 <prv_copy_from_tmp_memory>
 8003f9e:	e02e      	b.n	8003ffe <lwgps_process+0x162>
            } else if (evt_fn != NULL) {
                evt_fn(STAT_CHECKSUM_FAIL);
#endif /* LWGPS_CFG_STATUS */
            }
        } else {
            if (!gh->p.star) {                  /* Add to CRC only if star not yet detected */
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d109      	bne.n	8003fbe <lwgps_process+0x122>
                CRC_ADD(gh, *d);                /* Add to CRC */
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f893 2081 	ldrb.w	r2, [r3, #129]	@ 0x81
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	4053      	eors	r3, r2
 8003fb6:	b2da      	uxtb	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
            }
            TERM_ADD(gh, *d);                   /* Add character to term */
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8003fc4:	2b0b      	cmp	r3, #11
 8003fc6:	d81a      	bhi.n	8003ffe <lwgps_process+0x162>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8003fce:	4619      	mov	r1, r3
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	781a      	ldrb	r2, [r3, #0]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	440b      	add	r3, r1
 8003fd8:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	b2da      	uxtb	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
    for (; len > 0; ++d, --len) {               /* Process all bytes */
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	3301      	adds	r3, #1
 8004002:	617b      	str	r3, [r7, #20]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	3b01      	subs	r3, #1
 8004008:	607b      	str	r3, [r7, #4]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2b00      	cmp	r3, #0
 800400e:	f47f af4e 	bne.w	8003eae <lwgps_process+0x12>
        }
    }
    return 1;
 8004012:	2301      	movs	r3, #1
}
 8004014:	4618      	mov	r0, r3
 8004016:	3718      	adds	r7, #24
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <HAL_UART_RxCpltCallback>:
{
	return ( A - B) * (E - D ) / (C - B )+ D ;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
	if(huart==&huart2){
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4a29      	ldr	r2, [pc, #164]	@ (80040cc <HAL_UART_RxCpltCallback+0xb0>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d127      	bne.n	800407c <HAL_UART_RxCpltCallback+0x60>
	if(rx_data != '\n' && rx_index < RX_BUFFER_SIZE) {
 800402c:	4b28      	ldr	r3, [pc, #160]	@ (80040d0 <HAL_UART_RxCpltCallback+0xb4>)
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	2b0a      	cmp	r3, #10
 8004032:	d010      	beq.n	8004056 <HAL_UART_RxCpltCallback+0x3a>
 8004034:	4b27      	ldr	r3, [pc, #156]	@ (80040d4 <HAL_UART_RxCpltCallback+0xb8>)
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	b25b      	sxtb	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	db0b      	blt.n	8004056 <HAL_UART_RxCpltCallback+0x3a>
		rx_buffer[rx_index++] = rx_data;
 800403e:	4b25      	ldr	r3, [pc, #148]	@ (80040d4 <HAL_UART_RxCpltCallback+0xb8>)
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	1c5a      	adds	r2, r3, #1
 8004044:	b2d1      	uxtb	r1, r2
 8004046:	4a23      	ldr	r2, [pc, #140]	@ (80040d4 <HAL_UART_RxCpltCallback+0xb8>)
 8004048:	7011      	strb	r1, [r2, #0]
 800404a:	461a      	mov	r2, r3
 800404c:	4b20      	ldr	r3, [pc, #128]	@ (80040d0 <HAL_UART_RxCpltCallback+0xb4>)
 800404e:	7819      	ldrb	r1, [r3, #0]
 8004050:	4b21      	ldr	r3, [pc, #132]	@ (80040d8 <HAL_UART_RxCpltCallback+0xbc>)
 8004052:	5499      	strb	r1, [r3, r2]
 8004054:	e00d      	b.n	8004072 <HAL_UART_RxCpltCallback+0x56>
	} else {
		lwgps_process(&gps, rx_buffer, rx_index+1);
 8004056:	4b1f      	ldr	r3, [pc, #124]	@ (80040d4 <HAL_UART_RxCpltCallback+0xb8>)
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	3301      	adds	r3, #1
 800405c:	461a      	mov	r2, r3
 800405e:	491e      	ldr	r1, [pc, #120]	@ (80040d8 <HAL_UART_RxCpltCallback+0xbc>)
 8004060:	481e      	ldr	r0, [pc, #120]	@ (80040dc <HAL_UART_RxCpltCallback+0xc0>)
 8004062:	f7ff ff1b 	bl	8003e9c <lwgps_process>
		rx_index = 0;
 8004066:	4b1b      	ldr	r3, [pc, #108]	@ (80040d4 <HAL_UART_RxCpltCallback+0xb8>)
 8004068:	2200      	movs	r2, #0
 800406a:	701a      	strb	r2, [r3, #0]
		rx_data = 0;
 800406c:	4b18      	ldr	r3, [pc, #96]	@ (80040d0 <HAL_UART_RxCpltCallback+0xb4>)
 800406e:	2200      	movs	r2, #0
 8004070:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8004072:	2201      	movs	r2, #1
 8004074:	4916      	ldr	r1, [pc, #88]	@ (80040d0 <HAL_UART_RxCpltCallback+0xb4>)
 8004076:	4815      	ldr	r0, [pc, #84]	@ (80040cc <HAL_UART_RxCpltCallback+0xb0>)
 8004078:	f007 f86a 	bl	800b150 <HAL_UART_Receive_IT>
	}


	if(huart == &huart6){
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a18      	ldr	r2, [pc, #96]	@ (80040e0 <HAL_UART_RxCpltCallback+0xc4>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d11e      	bne.n	80040c2 <HAL_UART_RxCpltCallback+0xa6>
		if(rx_data_EGU != '\n' && rx_index_EGU <34){//sol taraf silinebilir
 8004084:	4b17      	ldr	r3, [pc, #92]	@ (80040e4 <HAL_UART_RxCpltCallback+0xc8>)
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	2b0a      	cmp	r3, #10
 800408a:	d00f      	beq.n	80040ac <HAL_UART_RxCpltCallback+0x90>
 800408c:	4b16      	ldr	r3, [pc, #88]	@ (80040e8 <HAL_UART_RxCpltCallback+0xcc>)
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	2b21      	cmp	r3, #33	@ 0x21
 8004092:	d80b      	bhi.n	80040ac <HAL_UART_RxCpltCallback+0x90>
			EGU_RX_BUFFER[rx_index_EGU++]=rx_data_EGU;
 8004094:	4b14      	ldr	r3, [pc, #80]	@ (80040e8 <HAL_UART_RxCpltCallback+0xcc>)
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	1c5a      	adds	r2, r3, #1
 800409a:	b2d1      	uxtb	r1, r2
 800409c:	4a12      	ldr	r2, [pc, #72]	@ (80040e8 <HAL_UART_RxCpltCallback+0xcc>)
 800409e:	7011      	strb	r1, [r2, #0]
 80040a0:	461a      	mov	r2, r3
 80040a2:	4b10      	ldr	r3, [pc, #64]	@ (80040e4 <HAL_UART_RxCpltCallback+0xc8>)
 80040a4:	7819      	ldrb	r1, [r3, #0]
 80040a6:	4b11      	ldr	r3, [pc, #68]	@ (80040ec <HAL_UART_RxCpltCallback+0xd0>)
 80040a8:	5499      	strb	r1, [r3, r2]
 80040aa:	e005      	b.n	80040b8 <HAL_UART_RxCpltCallback+0x9c>

		}
		else
		{
			rx_data_EGU=0;
 80040ac:	4b0d      	ldr	r3, [pc, #52]	@ (80040e4 <HAL_UART_RxCpltCallback+0xc8>)
 80040ae:	2200      	movs	r2, #0
 80040b0:	701a      	strb	r2, [r3, #0]
			rx_index_EGU=0;
 80040b2:	4b0d      	ldr	r3, [pc, #52]	@ (80040e8 <HAL_UART_RxCpltCallback+0xcc>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	701a      	strb	r2, [r3, #0]

		}
	HAL_UART_Receive_IT(&huart6, &rx_data_EGU, 1);
 80040b8:	2201      	movs	r2, #1
 80040ba:	490a      	ldr	r1, [pc, #40]	@ (80040e4 <HAL_UART_RxCpltCallback+0xc8>)
 80040bc:	4808      	ldr	r0, [pc, #32]	@ (80040e0 <HAL_UART_RxCpltCallback+0xc4>)
 80040be:	f007 f847 	bl	800b150 <HAL_UART_Receive_IT>
		}
}
 80040c2:	bf00      	nop
 80040c4:	3708      	adds	r7, #8
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	20000500 	.word	0x20000500
 80040d0:	2000067d 	.word	0x2000067d
 80040d4:	2000067c 	.word	0x2000067c
 80040d8:	200005fc 	.word	0x200005fc
 80040dc:	20002440 	.word	0x20002440
 80040e0:	20000588 	.word	0x20000588
 80040e4:	200005ee 	.word	0x200005ee
 80040e8:	200005ef 	.word	0x200005ef
 80040ec:	200005cc 	.word	0x200005cc

080040f0 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]

	if(htim==&htim11){ // 1 sn
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a14      	ldr	r2, [pc, #80]	@ (800414c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d102      	bne.n	8004106 <HAL_TIM_PeriodElapsedCallback+0x16>
   lora_flag=1;
 8004100:	4b13      	ldr	r3, [pc, #76]	@ (8004150 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8004102:	2201      	movs	r2, #1
 8004104:	701a      	strb	r2, [r3, #0]
//		}
//		buzzer_long_counter++;

	}

	if(htim==&htim10){ //30ms
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a12      	ldr	r2, [pc, #72]	@ (8004154 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d102      	bne.n	8004114 <HAL_TIM_PeriodElapsedCallback+0x24>
	sensor_flag=1;
 800410e:	4b12      	ldr	r3, [pc, #72]	@ (8004158 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8004110:	2201      	movs	r2, #1
 8004112:	701a      	strb	r2, [r3, #0]
//		}
//		buzzer_ariza_counter++;
	}


	if(htim==&htim6){ // 200 ms timer
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a11      	ldr	r2, [pc, #68]	@ (800415c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d112      	bne.n	8004142 <HAL_TIM_PeriodElapsedCallback+0x52>
	timer_200ms_flag = 1;
 800411c:	4b10      	ldr	r3, [pc, #64]	@ (8004160 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800411e:	2201      	movs	r2, #1
 8004120:	701a      	strb	r2, [r3, #0]
	egu_durum_flag=1;
 8004122:	4b10      	ldr	r3, [pc, #64]	@ (8004164 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8004124:	2201      	movs	r2, #1
 8004126:	701a      	strb	r2, [r3, #0]
//			buzzer_short_counter = 0;
//		}
//		buzzer_short_counter++;
//
//		counter++;
		if(counter == 15)
 8004128:	4b0f      	ldr	r3, [pc, #60]	@ (8004168 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	2b0f      	cmp	r3, #15
 800412e:	d108      	bne.n	8004142 <HAL_TIM_PeriodElapsedCallback+0x52>
		{
			adc_flag=1;
 8004130:	4b0e      	ldr	r3, [pc, #56]	@ (800416c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8004132:	2201      	movs	r2, #1
 8004134:	701a      	strb	r2, [r3, #0]
			counter =0;
 8004136:	4b0c      	ldr	r3, [pc, #48]	@ (8004168 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8004138:	2200      	movs	r2, #0
 800413a:	701a      	strb	r2, [r3, #0]
			HAL_ADC_Start_IT(&hadc1);
 800413c:	480c      	ldr	r0, [pc, #48]	@ (8004170 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800413e:	f002 fa3b 	bl	80065b8 <HAL_ADC_Start_IT>


	}


}
 8004142:	bf00      	nop
 8004144:	3708      	adds	r7, #8
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	20000474 	.word	0x20000474
 8004150:	200023e0 	.word	0x200023e0
 8004154:	2000042c 	.word	0x2000042c
 8004158:	200023e1 	.word	0x200023e1
 800415c:	2000039c 	.word	0x2000039c
 8004160:	20000685 	.word	0x20000685
 8004164:	200023e2 	.word	0x200023e2
 8004168:	200005f8 	.word	0x200005f8
 800416c:	200005f9 	.word	0x200005f9
 8004170:	20000260 	.word	0x20000260

08004174 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1 )
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a09      	ldr	r2, [pc, #36]	@ (80041a8 <HAL_ADC_ConvCpltCallback+0x34>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d10c      	bne.n	80041a0 <HAL_ADC_ConvCpltCallback+0x2c>
	{
		adc= HAL_ADC_GetValue(&hadc1);
 8004186:	4809      	ldr	r0, [pc, #36]	@ (80041ac <HAL_ADC_ConvCpltCallback+0x38>)
 8004188:	f002 fc04 	bl	8006994 <HAL_ADC_GetValue>
 800418c:	ee07 0a90 	vmov	s15, r0
 8004190:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004194:	4b06      	ldr	r3, [pc, #24]	@ (80041b0 <HAL_ADC_ConvCpltCallback+0x3c>)
 8004196:	edc3 7a00 	vstr	s15, [r3]


		adc_flag = 1;
 800419a:	4b06      	ldr	r3, [pc, #24]	@ (80041b4 <HAL_ADC_ConvCpltCallback+0x40>)
 800419c:	2201      	movs	r2, #1
 800419e:	701a      	strb	r2, [r3, #0]
	}
}
 80041a0:	bf00      	nop
 80041a2:	3708      	adds	r7, #8
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	40012000 	.word	0x40012000
 80041ac:	20000260 	.word	0x20000260
 80041b0:	200005f4 	.word	0x200005f4
 80041b4:	200005f9 	.word	0x200005f9

080041b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80041be:	f002 f921 	bl	8006404 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80041c2:	f000 fe01 	bl	8004dc8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80041c6:	f001 f8cb 	bl	8005360 <MX_GPIO_Init>
  MX_ADC1_Init();
 80041ca:	f000 fe69 	bl	8004ea0 <MX_ADC1_Init>
  MX_I2C1_Init();
 80041ce:	f000 feb9 	bl	8004f44 <MX_I2C1_Init>
  MX_SPI1_Init();
 80041d2:	f000 fee5 	bl	8004fa0 <MX_SPI1_Init>
  MX_UART4_Init();
 80041d6:	f001 f81b 	bl	8005210 <MX_UART4_Init>
  MX_USART2_UART_Init();
 80041da:	f001 f843 	bl	8005264 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80041de:	f001 f86b 	bl	80052b8 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 80041e2:	f001 f893 	bl	800530c <MX_USART6_UART_Init>
  MX_FATFS_Init();
 80041e6:	f007 ff4b 	bl	800c080 <MX_FATFS_Init>
  MX_TIM11_Init();
 80041ea:	f000 ffed 	bl	80051c8 <MX_TIM11_Init>
  MX_TIM10_Init();
 80041ee:	f000 ffc7 	bl	8005180 <MX_TIM10_Init>
  MX_TIM6_Init();
 80041f2:	f000 ff59 	bl	80050a8 <MX_TIM6_Init>
  MX_TIM7_Init();
 80041f6:	f000 ff8d 	bl	8005114 <MX_TIM7_Init>
  MX_TIM2_Init();
 80041fa:	f000 ff07 	bl	800500c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80041fe:	2201      	movs	r2, #1
 8004200:	2102      	movs	r1, #2
 8004202:	48c3      	ldr	r0, [pc, #780]	@ (8004510 <main+0x358>)
 8004204:	f003 f970 	bl	80074e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8004208:	2201      	movs	r2, #1
 800420a:	2104      	movs	r1, #4
 800420c:	48c1      	ldr	r0, [pc, #772]	@ (8004514 <main+0x35c>)
 800420e:	f003 f96b 	bl	80074e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8004212:	2201      	movs	r2, #1
 8004214:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004218:	48bd      	ldr	r0, [pc, #756]	@ (8004510 <main+0x358>)
 800421a:	f003 f965 	bl	80074e8 <HAL_GPIO_WritePin>

  ///KURTARMA PORTLARI KAPALI EMIN OL
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);//A
 800421e:	2200      	movs	r2, #0
 8004220:	2110      	movs	r1, #16
 8004222:	48bc      	ldr	r0, [pc, #752]	@ (8004514 <main+0x35c>)
 8004224:	f003 f960 	bl	80074e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);//B
 8004228:	2200      	movs	r2, #0
 800422a:	2108      	movs	r1, #8
 800422c:	48b9      	ldr	r0, [pc, #740]	@ (8004514 <main+0x35c>)
 800422e:	f003 f95b 	bl	80074e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);//C
 8004232:	2200      	movs	r2, #0
 8004234:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004238:	48b5      	ldr	r0, [pc, #724]	@ (8004510 <main+0x358>)
 800423a:	f003 f955 	bl	80074e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);//D
 800423e:	2200      	movs	r2, #0
 8004240:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004244:	48b2      	ldr	r0, [pc, #712]	@ (8004510 <main+0x358>)
 8004246:	f003 f94f 	bl	80074e8 <HAL_GPIO_WritePin>

  HAL_UART_Receive_IT(&huart2,&rx_data,1);
 800424a:	2201      	movs	r2, #1
 800424c:	49b2      	ldr	r1, [pc, #712]	@ (8004518 <main+0x360>)
 800424e:	48b3      	ldr	r0, [pc, #716]	@ (800451c <main+0x364>)
 8004250:	f006 ff7e 	bl	800b150 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, &rx_data_EGU, 1);
 8004254:	2201      	movs	r2, #1
 8004256:	49b2      	ldr	r1, [pc, #712]	@ (8004520 <main+0x368>)
 8004258:	48b2      	ldr	r0, [pc, #712]	@ (8004524 <main+0x36c>)
 800425a:	f006 ff79 	bl	800b150 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim11);
 800425e:	48b2      	ldr	r0, [pc, #712]	@ (8004528 <main+0x370>)
 8004260:	f006 f9f2 	bl	800a648 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim10);
 8004264:	48b1      	ldr	r0, [pc, #708]	@ (800452c <main+0x374>)
 8004266:	f006 f9ef 	bl	800a648 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 800426a:	48b1      	ldr	r0, [pc, #708]	@ (8004530 <main+0x378>)
 800426c:	f006 f9ec 	bl	800a648 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Stop_IT(&htim7);
 8004270:	48b0      	ldr	r0, [pc, #704]	@ (8004534 <main+0x37c>)
 8004272:	f006 fa59 	bl	800a728 <HAL_TIM_Base_Stop_IT>
  //HAL_TIM_Base_Start_IT(&htim2);

  MAFilter_Init(&accx);
 8004276:	48b0      	ldr	r0, [pc, #704]	@ (8004538 <main+0x380>)
 8004278:	f7fe fa90 	bl	800279c <MAFilter_Init>
  FIRFilter_Init(&IMU_GYROY);
 800427c:	48af      	ldr	r0, [pc, #700]	@ (800453c <main+0x384>)
 800427e:	f7fe fa0f 	bl	80026a0 <FIRFilter_Init>
  FIRFilter_Init(&IMU_GYROX);
 8004282:	48af      	ldr	r0, [pc, #700]	@ (8004540 <main+0x388>)
 8004284:	f7fe fa0c 	bl	80026a0 <FIRFilter_Init>
  FIRFilter_Init(&IMU_GYROZ);
 8004288:	48ae      	ldr	r0, [pc, #696]	@ (8004544 <main+0x38c>)
 800428a:	f7fe fa09 	bl	80026a0 <FIRFilter_Init>


  lwgps_init(&gps);
 800428e:	48ae      	ldr	r0, [pc, #696]	@ (8004548 <main+0x390>)
 8004290:	f7ff fdf6 	bl	8003e80 <lwgps_init>
 // W25Q_Reset();
  LSM6DSLTR_Init();
 8004294:	f7fe faa4 	bl	80027e0 <LSM6DSLTR_Init>
  E220_CONFIG(0x6,0x4A,0X10,1);
 8004298:	2301      	movs	r3, #1
 800429a:	2210      	movs	r2, #16
 800429c:	214a      	movs	r1, #74	@ 0x4a
 800429e:	2006      	movs	r0, #6
 80042a0:	f001 f90a 	bl	80054b8 <E220_CONFIG>
  HAL_ADC_Start_IT(&hadc1);
 80042a4:	48a9      	ldr	r0, [pc, #676]	@ (800454c <main+0x394>)
 80042a6:	f002 f987 	bl	80065b8 <HAL_ADC_Start_IT>

  dev.dev_id = BME280_I2C_ADDR_PRIM;
 80042aa:	4ba9      	ldr	r3, [pc, #676]	@ (8004550 <main+0x398>)
 80042ac:	2276      	movs	r2, #118	@ 0x76
 80042ae:	705a      	strb	r2, [r3, #1]
  dev.intf = BME280_I2C_INTF;
 80042b0:	4ba7      	ldr	r3, [pc, #668]	@ (8004550 <main+0x398>)
 80042b2:	2201      	movs	r2, #1
 80042b4:	709a      	strb	r2, [r3, #2]
  dev.read = user_i2c_read;
 80042b6:	4ba6      	ldr	r3, [pc, #664]	@ (8004550 <main+0x398>)
 80042b8:	4aa6      	ldr	r2, [pc, #664]	@ (8004554 <main+0x39c>)
 80042ba:	605a      	str	r2, [r3, #4]
  dev.write = user_i2c_write;
 80042bc:	4ba4      	ldr	r3, [pc, #656]	@ (8004550 <main+0x398>)
 80042be:	4aa6      	ldr	r2, [pc, #664]	@ (8004558 <main+0x3a0>)
 80042c0:	609a      	str	r2, [r3, #8]
  dev.delay_ms = user_delay_ms;
 80042c2:	4ba3      	ldr	r3, [pc, #652]	@ (8004550 <main+0x398>)
 80042c4:	4aa5      	ldr	r2, [pc, #660]	@ (800455c <main+0x3a4>)
 80042c6:	60da      	str	r2, [r3, #12]

  rslt = bme280_init(&dev);
 80042c8:	48a1      	ldr	r0, [pc, #644]	@ (8004550 <main+0x398>)
 80042ca:	f7fc fef3 	bl	80010b4 <bme280_init>
 80042ce:	4603      	mov	r3, r0
 80042d0:	461a      	mov	r2, r3
 80042d2:	4ba3      	ldr	r3, [pc, #652]	@ (8004560 <main+0x3a8>)
 80042d4:	701a      	strb	r2, [r3, #0]

  dev.settings.osr_h = BME280_OVERSAMPLING_1X;
 80042d6:	4b9e      	ldr	r3, [pc, #632]	@ (8004550 <main+0x398>)
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
  dev.settings.osr_p = BME280_OVERSAMPLING_4X;
 80042de:	4b9c      	ldr	r3, [pc, #624]	@ (8004550 <main+0x398>)
 80042e0:	2203      	movs	r2, #3
 80042e2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  dev.settings.osr_t = BME280_OVERSAMPLING_2X;
 80042e6:	4b9a      	ldr	r3, [pc, #616]	@ (8004550 <main+0x398>)
 80042e8:	2202      	movs	r2, #2
 80042ea:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  dev.settings.filter = BME280_FILTER_COEFF_16;
 80042ee:	4b98      	ldr	r3, [pc, #608]	@ (8004550 <main+0x398>)
 80042f0:	2204      	movs	r2, #4
 80042f2:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
  rslt = bme280_set_sensor_settings(BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL, &dev);
 80042f6:	4996      	ldr	r1, [pc, #600]	@ (8004550 <main+0x398>)
 80042f8:	200f      	movs	r0, #15
 80042fa:	f7fc ffcf 	bl	800129c <bme280_set_sensor_settings>
 80042fe:	4603      	mov	r3, r0
 8004300:	461a      	mov	r2, r3
 8004302:	4b97      	ldr	r3, [pc, #604]	@ (8004560 <main+0x3a8>)
 8004304:	701a      	strb	r2, [r3, #0]

  ////ALTITUDE OFFSET
   HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);
 8004306:	2110      	movs	r1, #16
 8004308:	4881      	ldr	r0, [pc, #516]	@ (8004510 <main+0x358>)
 800430a:	f003 f906 	bl	800751a <HAL_GPIO_TogglePin>
   Altitude_Offset();
 800430e:	f001 fbe3 	bl	8005ad8 <Altitude_Offset>
   HAL_Delay(1000);
 8004312:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004316:	f002 f8e7 	bl	80064e8 <HAL_Delay>
   HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);
 800431a:	2110      	movs	r1, #16
 800431c:	487c      	ldr	r0, [pc, #496]	@ (8004510 <main+0x358>)
 800431e:	f003 f8fc 	bl	800751a <HAL_GPIO_TogglePin>
   KalmanFilter_Init(&kf, 0.005, 0.1, 0.0); // Adjust Q=0.01 idi and R based on your system characteristics
 8004322:	ed9f 1a90 	vldr	s2, [pc, #576]	@ 8004564 <main+0x3ac>
 8004326:	eddf 0a90 	vldr	s1, [pc, #576]	@ 8004568 <main+0x3b0>
 800432a:	ed9f 0a90 	vldr	s0, [pc, #576]	@ 800456c <main+0x3b4>
 800432e:	4890      	ldr	r0, [pc, #576]	@ (8004570 <main+0x3b8>)
 8004330:	f7ff f882 	bl	8003438 <KalmanFilter_Init>

   W25Q_Read(1, 0,  256, test);
 8004334:	4b8f      	ldr	r3, [pc, #572]	@ (8004574 <main+0x3bc>)
 8004336:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800433a:	2100      	movs	r1, #0
 800433c:	2001      	movs	r0, #1
 800433e:	f7fe fd41 	bl	8002dc4 <W25Q_Read>

 //  W25Q_Read(1, 0, sizeof(flash_accX), flash_accX);
   buzzer_short = 0;
 8004342:	4b8d      	ldr	r3, [pc, #564]	@ (8004578 <main+0x3c0>)
 8004344:	2200      	movs	r2, #0
 8004346:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {

/********************* Sensor Ölçüm **************************************************/
	if(sensor_flag==1)
 8004348:	4b8c      	ldr	r3, [pc, #560]	@ (800457c <main+0x3c4>)
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	2b01      	cmp	r3, #1
 800434e:	f040 8154 	bne.w	80045fa <main+0x442>
	{
		 sensor_flag=0;
 8004352:	4b8a      	ldr	r3, [pc, #552]	@ (800457c <main+0x3c4>)
 8004354:	2200      	movs	r2, #0
 8004356:	701a      	strb	r2, [r3, #0]
		 prev_alt=altitude_kalman;
 8004358:	4b89      	ldr	r3, [pc, #548]	@ (8004580 <main+0x3c8>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a89      	ldr	r2, [pc, #548]	@ (8004584 <main+0x3cc>)
 800435e:	6013      	str	r3, [r2, #0]
		 rslt = bme280_set_sensor_mode(BME280_FORCED_MODE, &dev);
 8004360:	497b      	ldr	r1, [pc, #492]	@ (8004550 <main+0x398>)
 8004362:	2001      	movs	r0, #1
 8004364:	f7fc ffef 	bl	8001346 <bme280_set_sensor_mode>
 8004368:	4603      	mov	r3, r0
 800436a:	461a      	mov	r2, r3
 800436c:	4b7c      	ldr	r3, [pc, #496]	@ (8004560 <main+0x3a8>)
 800436e:	701a      	strb	r2, [r3, #0]
		/* �?��?�터 취�? */
		rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 8004370:	4a77      	ldr	r2, [pc, #476]	@ (8004550 <main+0x398>)
 8004372:	4985      	ldr	r1, [pc, #532]	@ (8004588 <main+0x3d0>)
 8004374:	2007      	movs	r0, #7
 8004376:	f7fd f862 	bl	800143e <bme280_get_sensor_data>
 800437a:	4603      	mov	r3, r0
 800437c:	461a      	mov	r2, r3
 800437e:	4b78      	ldr	r3, [pc, #480]	@ (8004560 <main+0x3a8>)
 8004380:	701a      	strb	r2, [r3, #0]

		if(rslt == BME280_OK)
 8004382:	4b77      	ldr	r3, [pc, #476]	@ (8004560 <main+0x3a8>)
 8004384:	f993 3000 	ldrsb.w	r3, [r3]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d14c      	bne.n	8004426 <main+0x26e>
		{
		  temperature = comp_data.temperature/100.00;
 800438c:	4b7e      	ldr	r3, [pc, #504]	@ (8004588 <main+0x3d0>)
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	4618      	mov	r0, r3
 8004392:	f7fc f8df 	bl	8000554 <__aeabi_i2d>
 8004396:	f04f 0200 	mov.w	r2, #0
 800439a:	4b7c      	ldr	r3, [pc, #496]	@ (800458c <main+0x3d4>)
 800439c:	f7fc fa6e 	bl	800087c <__aeabi_ddiv>
 80043a0:	4602      	mov	r2, r0
 80043a2:	460b      	mov	r3, r1
 80043a4:	4610      	mov	r0, r2
 80043a6:	4619      	mov	r1, r3
 80043a8:	f7fc fc36 	bl	8000c18 <__aeabi_d2f>
 80043ac:	4603      	mov	r3, r0
 80043ae:	4a78      	ldr	r2, [pc, #480]	@ (8004590 <main+0x3d8>)
 80043b0:	6013      	str	r3, [r2, #0]
		  humidity = comp_data.humidity;
 80043b2:	4b75      	ldr	r3, [pc, #468]	@ (8004588 <main+0x3d0>)
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	ee07 3a90 	vmov	s15, r3
 80043ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043be:	4b75      	ldr	r3, [pc, #468]	@ (8004594 <main+0x3dc>)
 80043c0:	edc3 7a00 	vstr	s15, [r3]
		  pressure = comp_data.pressure;
 80043c4:	4b70      	ldr	r3, [pc, #448]	@ (8004588 <main+0x3d0>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	ee07 3a90 	vmov	s15, r3
 80043cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043d0:	4b71      	ldr	r3, [pc, #452]	@ (8004598 <main+0x3e0>)
 80043d2:	edc3 7a00 	vstr	s15, [r3]
		  altitude=BME280_Get_Altitude()-offset_altitude;
 80043d6:	f001 f8cf 	bl	8005578 <BME280_Get_Altitude>
 80043da:	eeb0 7a40 	vmov.f32	s14, s0
 80043de:	4b6f      	ldr	r3, [pc, #444]	@ (800459c <main+0x3e4>)
 80043e0:	edd3 7a00 	vldr	s15, [r3]
 80043e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043e8:	4b6d      	ldr	r3, [pc, #436]	@ (80045a0 <main+0x3e8>)
 80043ea:	edc3 7a00 	vstr	s15, [r3]
		  altitude_kalman= KalmanFilter_Update(&kf, altitude);
 80043ee:	4b6c      	ldr	r3, [pc, #432]	@ (80045a0 <main+0x3e8>)
 80043f0:	edd3 7a00 	vldr	s15, [r3]
 80043f4:	eeb0 0a67 	vmov.f32	s0, s15
 80043f8:	485d      	ldr	r0, [pc, #372]	@ (8004570 <main+0x3b8>)
 80043fa:	f7ff f83f 	bl	800347c <KalmanFilter_Update>
 80043fe:	eef0 7a40 	vmov.f32	s15, s0
 8004402:	4b5f      	ldr	r3, [pc, #380]	@ (8004580 <main+0x3c8>)
 8004404:	edc3 7a00 	vstr	s15, [r3]
		  speed=(altitude_kalman-prev_alt)*20;
 8004408:	4b5d      	ldr	r3, [pc, #372]	@ (8004580 <main+0x3c8>)
 800440a:	ed93 7a00 	vldr	s14, [r3]
 800440e:	4b5d      	ldr	r3, [pc, #372]	@ (8004584 <main+0x3cc>)
 8004410:	edd3 7a00 	vldr	s15, [r3]
 8004414:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004418:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 800441c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004420:	4b60      	ldr	r3, [pc, #384]	@ (80045a4 <main+0x3ec>)
 8004422:	edc3 7a00 	vstr	s15, [r3]
    	}

		 LSM6DSLTR_Read_Accel_Data(&Lsm_Sensor);
 8004426:	4860      	ldr	r0, [pc, #384]	@ (80045a8 <main+0x3f0>)
 8004428:	f7fe fa2a 	bl	8002880 <LSM6DSLTR_Read_Accel_Data>
		 calculate_roll_pitch(&Lsm_Sensor);
 800442c:	485e      	ldr	r0, [pc, #376]	@ (80045a8 <main+0x3f0>)
 800442e:	f7fe fb9b 	bl	8002b68 <calculate_roll_pitch>
		 LSM6DSLTR_Read_Gyro_Data(&Lsm_Sensor);
 8004432:	485d      	ldr	r0, [pc, #372]	@ (80045a8 <main+0x3f0>)
 8004434:	f7fe fafe 	bl	8002a34 <LSM6DSLTR_Read_Gyro_Data>
		 update_angles(&Lsm_Sensor);
 8004438:	485b      	ldr	r0, [pc, #364]	@ (80045a8 <main+0x3f0>)
 800443a:	f7fe fc1b 	bl	8002c74 <update_angles>

		 Lsm_Sensor.Accel_X=FIRFilter_Update(&accx,  Lsm_Sensor.Accel_X);
 800443e:	4b5a      	ldr	r3, [pc, #360]	@ (80045a8 <main+0x3f0>)
 8004440:	edd3 7a00 	vldr	s15, [r3]
 8004444:	eeb0 0a67 	vmov.f32	s0, s15
 8004448:	483b      	ldr	r0, [pc, #236]	@ (8004538 <main+0x380>)
 800444a:	f7fe f94b 	bl	80026e4 <FIRFilter_Update>
 800444e:	eef0 7a40 	vmov.f32	s15, s0
 8004452:	4b55      	ldr	r3, [pc, #340]	@ (80045a8 <main+0x3f0>)
 8004454:	edc3 7a00 	vstr	s15, [r3]
		 Lsm_Sensor.Gyro_X=FIRFilter_Update(&IMU_GYROX,  Lsm_Sensor.Gyro_X);
 8004458:	4b53      	ldr	r3, [pc, #332]	@ (80045a8 <main+0x3f0>)
 800445a:	edd3 7a03 	vldr	s15, [r3, #12]
 800445e:	eeb0 0a67 	vmov.f32	s0, s15
 8004462:	4837      	ldr	r0, [pc, #220]	@ (8004540 <main+0x388>)
 8004464:	f7fe f93e 	bl	80026e4 <FIRFilter_Update>
 8004468:	eef0 7a40 	vmov.f32	s15, s0
 800446c:	4b4e      	ldr	r3, [pc, #312]	@ (80045a8 <main+0x3f0>)
 800446e:	edc3 7a03 	vstr	s15, [r3, #12]
		 Lsm_Sensor.Gyro_Y=FIRFilter_Update(&IMU_GYROY, Lsm_Sensor.Gyro_Y);
 8004472:	4b4d      	ldr	r3, [pc, #308]	@ (80045a8 <main+0x3f0>)
 8004474:	edd3 7a04 	vldr	s15, [r3, #16]
 8004478:	eeb0 0a67 	vmov.f32	s0, s15
 800447c:	482f      	ldr	r0, [pc, #188]	@ (800453c <main+0x384>)
 800447e:	f7fe f931 	bl	80026e4 <FIRFilter_Update>
 8004482:	eef0 7a40 	vmov.f32	s15, s0
 8004486:	4b48      	ldr	r3, [pc, #288]	@ (80045a8 <main+0x3f0>)
 8004488:	edc3 7a04 	vstr	s15, [r3, #16]
		 Lsm_Sensor.Gyro_Z=FIRFilter_Update(&IMU_GYROZ, Lsm_Sensor.Gyro_Z);
 800448c:	4b46      	ldr	r3, [pc, #280]	@ (80045a8 <main+0x3f0>)
 800448e:	edd3 7a05 	vldr	s15, [r3, #20]
 8004492:	eeb0 0a67 	vmov.f32	s0, s15
 8004496:	482b      	ldr	r0, [pc, #172]	@ (8004544 <main+0x38c>)
 8004498:	f7fe f924 	bl	80026e4 <FIRFilter_Update>
 800449c:	eef0 7a40 	vmov.f32	s15, s0
 80044a0:	4b41      	ldr	r3, [pc, #260]	@ (80045a8 <main+0x3f0>)
 80044a2:	edc3 7a05 	vstr	s15, [r3, #20]

		 toplam_pitch+= Lsm_Sensor.Pitch;
 80044a6:	4b40      	ldr	r3, [pc, #256]	@ (80045a8 <main+0x3f0>)
 80044a8:	ed93 7a07 	vldr	s14, [r3, #28]
 80044ac:	4b3f      	ldr	r3, [pc, #252]	@ (80045ac <main+0x3f4>)
 80044ae:	edd3 7a00 	vldr	s15, [r3]
 80044b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044b6:	4b3d      	ldr	r3, [pc, #244]	@ (80045ac <main+0x3f4>)
 80044b8:	edc3 7a00 	vstr	s15, [r3]
		 toplam_roll+= Lsm_Sensor.Roll;
 80044bc:	4b3a      	ldr	r3, [pc, #232]	@ (80045a8 <main+0x3f0>)
 80044be:	ed93 7a06 	vldr	s14, [r3, #24]
 80044c2:	4b3b      	ldr	r3, [pc, #236]	@ (80045b0 <main+0x3f8>)
 80044c4:	edd3 7a00 	vldr	s15, [r3]
 80044c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044cc:	4b38      	ldr	r3, [pc, #224]	@ (80045b0 <main+0x3f8>)
 80044ce:	edc3 7a00 	vstr	s15, [r3]

		 sensor_counter++;
 80044d2:	4b38      	ldr	r3, [pc, #224]	@ (80045b4 <main+0x3fc>)
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	3301      	adds	r3, #1
 80044d8:	b2da      	uxtb	r2, r3
 80044da:	4b36      	ldr	r3, [pc, #216]	@ (80045b4 <main+0x3fc>)
 80044dc:	701a      	strb	r2, [r3, #0]
		 if(sensor_counter == 6)
 80044de:	4b35      	ldr	r3, [pc, #212]	@ (80045b4 <main+0x3fc>)
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	2b06      	cmp	r3, #6
 80044e4:	d177      	bne.n	80045d6 <main+0x41e>
		 {
			 real_pitch = toplam_pitch/6;
 80044e6:	4b31      	ldr	r3, [pc, #196]	@ (80045ac <main+0x3f4>)
 80044e8:	ed93 7a00 	vldr	s14, [r3]
 80044ec:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 80044f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80044f4:	4b30      	ldr	r3, [pc, #192]	@ (80045b8 <main+0x400>)
 80044f6:	edc3 7a00 	vstr	s15, [r3]
			 real_roll = toplam_roll/6;
 80044fa:	4b2d      	ldr	r3, [pc, #180]	@ (80045b0 <main+0x3f8>)
 80044fc:	ed93 7a00 	vldr	s14, [r3]
 8004500:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 8004504:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004508:	4b2c      	ldr	r3, [pc, #176]	@ (80045bc <main+0x404>)
 800450a:	edc3 7a00 	vstr	s15, [r3]
 800450e:	e057      	b.n	80045c0 <main+0x408>
 8004510:	40020800 	.word	0x40020800
 8004514:	40020400 	.word	0x40020400
 8004518:	2000067d 	.word	0x2000067d
 800451c:	20000500 	.word	0x20000500
 8004520:	200005ee 	.word	0x200005ee
 8004524:	20000588 	.word	0x20000588
 8004528:	20000474 	.word	0x20000474
 800452c:	2000042c 	.word	0x2000042c
 8004530:	2000039c 	.word	0x2000039c
 8004534:	200003e4 	.word	0x200003e4
 8004538:	20002514 	.word	0x20002514
 800453c:	200025a4 	.word	0x200025a4
 8004540:	2000255c 	.word	0x2000255c
 8004544:	200025ec 	.word	0x200025ec
 8004548:	20002440 	.word	0x20002440
 800454c:	20000260 	.word	0x20000260
 8004550:	20002634 	.word	0x20002634
 8004554:	08005669 	.word	0x08005669
 8004558:	080056f1 	.word	0x080056f1
 800455c:	080056d9 	.word	0x080056d9
 8004560:	20002680 	.word	0x20002680
 8004564:	00000000 	.word	0x00000000
 8004568:	3dcccccd 	.word	0x3dcccccd
 800456c:	3ba3d70a 	.word	0x3ba3d70a
 8004570:	20002424 	.word	0x20002424
 8004574:	200022e0 	.word	0x200022e0
 8004578:	20000688 	.word	0x20000688
 800457c:	200023e1 	.word	0x200023e1
 8004580:	20002408 	.word	0x20002408
 8004584:	200023fc 	.word	0x200023fc
 8004588:	20002674 	.word	0x20002674
 800458c:	40590000 	.word	0x40590000
 8004590:	200023e4 	.word	0x200023e4
 8004594:	200023e8 	.word	0x200023e8
 8004598:	200023f4 	.word	0x200023f4
 800459c:	200023f0 	.word	0x200023f0
 80045a0:	200023ec 	.word	0x200023ec
 80045a4:	20002400 	.word	0x20002400
 80045a8:	200024f0 	.word	0x200024f0
 80045ac:	20002414 	.word	0x20002414
 80045b0:	20002418 	.word	0x20002418
 80045b4:	20002420 	.word	0x20002420
 80045b8:	2000240c 	.word	0x2000240c
 80045bc:	20002410 	.word	0x20002410
			 toplam_roll=0;
 80045c0:	4ba1      	ldr	r3, [pc, #644]	@ (8004848 <main+0x690>)
 80045c2:	f04f 0200 	mov.w	r2, #0
 80045c6:	601a      	str	r2, [r3, #0]
			 toplam_pitch=0;
 80045c8:	4ba0      	ldr	r3, [pc, #640]	@ (800484c <main+0x694>)
 80045ca:	f04f 0200 	mov.w	r2, #0
 80045ce:	601a      	str	r2, [r3, #0]
			 sensor_counter =0;
 80045d0:	4b9f      	ldr	r3, [pc, #636]	@ (8004850 <main+0x698>)
 80045d2:	2200      	movs	r2, #0
 80045d4:	701a      	strb	r2, [r3, #0]
		 }

		 magnetic_switch=HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 80045d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80045da:	489e      	ldr	r0, [pc, #632]	@ (8004854 <main+0x69c>)
 80045dc:	f002 ff6c 	bl	80074b8 <HAL_GPIO_ReadPin>
 80045e0:	4603      	mov	r3, r0
 80045e2:	461a      	mov	r2, r3
 80045e4:	4b9c      	ldr	r3, [pc, #624]	@ (8004858 <main+0x6a0>)
 80045e6:	701a      	strb	r2, [r3, #0]
//		 else {
//			 buzzer_short=0;
//			 buzzer_long =0;
//		 }

		 BUTTON_STATE=HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9);
 80045e8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80045ec:	4899      	ldr	r0, [pc, #612]	@ (8004854 <main+0x69c>)
 80045ee:	f002 ff63 	bl	80074b8 <HAL_GPIO_ReadPin>
 80045f2:	4603      	mov	r3, r0
 80045f4:	461a      	mov	r2, r3
 80045f6:	4b99      	ldr	r3, [pc, #612]	@ (800485c <main+0x6a4>)
 80045f8:	701a      	strb	r2, [r3, #0]


	}

/********************Lora Ayar ve Gönderme*****************************************************/
	if(lora_flag==1)
 80045fa:	4b99      	ldr	r3, [pc, #612]	@ (8004860 <main+0x6a8>)
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d12a      	bne.n	8004658 <main+0x4a0>
	{
	    lora_flag=0;
 8004602:	4b97      	ldr	r3, [pc, #604]	@ (8004860 <main+0x6a8>)
 8004604:	2200      	movs	r2, #0
 8004606:	701a      	strb	r2, [r3, #0]

		loratx[0]=0x8;
 8004608:	4b96      	ldr	r3, [pc, #600]	@ (8004864 <main+0x6ac>)
 800460a:	2208      	movs	r2, #8
 800460c:	701a      	strb	r2, [r3, #0]
		loratx[1]=0x2A;
 800460e:	4b95      	ldr	r3, [pc, #596]	@ (8004864 <main+0x6ac>)
 8004610:	222a      	movs	r2, #42	@ 0x2a
 8004612:	705a      	strb	r2, [r3, #1]
		loratx[2]=0x10;
 8004614:	4b93      	ldr	r3, [pc, #588]	@ (8004864 <main+0x6ac>)
 8004616:	2210      	movs	r2, #16
 8004618:	709a      	strb	r2, [r3, #2]
		loratx[3]=DEVICE_ID;
 800461a:	4b92      	ldr	r3, [pc, #584]	@ (8004864 <main+0x6ac>)
 800461c:	2202      	movs	r2, #2
 800461e:	70da      	strb	r2, [r3, #3]
		loratx[4]=gps.sats_in_view;
 8004620:	4b91      	ldr	r3, [pc, #580]	@ (8004868 <main+0x6b0>)
 8004622:	f893 204d 	ldrb.w	r2, [r3, #77]	@ 0x4d
 8004626:	4b8f      	ldr	r3, [pc, #572]	@ (8004864 <main+0x6ac>)
 8004628:	711a      	strb	r2, [r3, #4]

		union_converter();
 800462a:	f001 f89d 	bl	8005768 <union_converter>

		loratx[49]=v4_battery;
 800462e:	4b8f      	ldr	r3, [pc, #572]	@ (800486c <main+0x6b4>)
 8004630:	781a      	ldrb	r2, [r3, #0]
 8004632:	4b8c      	ldr	r3, [pc, #560]	@ (8004864 <main+0x6ac>)
 8004634:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
		loratx[50]=0x31;// v4mod
 8004638:	4b8a      	ldr	r3, [pc, #552]	@ (8004864 <main+0x6ac>)
 800463a:	2231      	movs	r2, #49	@ 0x31
 800463c:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
		loratx[51]=magnetic_switch;
 8004640:	4b85      	ldr	r3, [pc, #532]	@ (8004858 <main+0x6a0>)
 8004642:	781a      	ldrb	r2, [r3, #0]
 8004644:	4b87      	ldr	r3, [pc, #540]	@ (8004864 <main+0x6ac>)
 8004646:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

		////////EGU PART
		EGU_Buff_Load();
 800464a:	f001 f9e1 	bl	8005a10 <EGU_Buff_Load>

		HAL_UART_Transmit_IT(&huart3,loratx,sizeof(loratx));
 800464e:	2246      	movs	r2, #70	@ 0x46
 8004650:	4984      	ldr	r1, [pc, #528]	@ (8004864 <main+0x6ac>)
 8004652:	4887      	ldr	r0, [pc, #540]	@ (8004870 <main+0x6b8>)
 8004654:	f006 fd37 	bl	800b0c6 <HAL_UART_Transmit_IT>

	}


/************ EGÜ durum sorgusu gönder **************************************************/
	if(egu_durum_flag==1)
 8004658:	4b86      	ldr	r3, [pc, #536]	@ (8004874 <main+0x6bc>)
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	2b01      	cmp	r3, #1
 800465e:	d109      	bne.n	8004674 <main+0x4bc>
	{
		egu_durum_flag=0;
 8004660:	4b84      	ldr	r3, [pc, #528]	@ (8004874 <main+0x6bc>)
 8004662:	2200      	movs	r2, #0
 8004664:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart6, EGU_durum_sorgusu, 5, 1000);
 8004666:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800466a:	2205      	movs	r2, #5
 800466c:	4982      	ldr	r1, [pc, #520]	@ (8004878 <main+0x6c0>)
 800466e:	4883      	ldr	r0, [pc, #524]	@ (800487c <main+0x6c4>)
 8004670:	f006 fc97 	bl	800afa2 <HAL_UART_Transmit>
	}


/**************************Algoritma****************************************************/
		  switch(SUSTAINER){
 8004674:	4b82      	ldr	r3, [pc, #520]	@ (8004880 <main+0x6c8>)
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	2b06      	cmp	r3, #6
 800467a:	f200 8122 	bhi.w	80048c2 <main+0x70a>
 800467e:	a201      	add	r2, pc, #4	@ (adr r2, 8004684 <main+0x4cc>)
 8004680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004684:	080046a1 	.word	0x080046a1
 8004688:	080046c5 	.word	0x080046c5
 800468c:	080046d3 	.word	0x080046d3
 8004690:	0800471f 	.word	0x0800471f
 8004694:	08004773 	.word	0x08004773
 8004698:	080047d5 	.word	0x080047d5
 800469c:	0800483b 	.word	0x0800483b

		  case RAMPA:
				v4_mod=1;
 80046a0:	4b78      	ldr	r3, [pc, #480]	@ (8004884 <main+0x6cc>)
 80046a2:	2201      	movs	r2, #1
 80046a4:	701a      	strb	r2, [r3, #0]
			  //RAMPA MODU ROKET RAMPADA EGÜ SWİTCHLERİ VE ALT KADEME HABERLE�?ME KONTROL ET

				if(Lsm_Sensor.Accel_X > 5 )
 80046a6:	4b78      	ldr	r3, [pc, #480]	@ (8004888 <main+0x6d0>)
 80046a8:	edd3 7a00 	vldr	s15, [r3]
 80046ac:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80046b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046b8:	dc00      	bgt.n	80046bc <main+0x504>
				  {
					SUSTAINER=UCUS_BASLADI;
//					Buzzer(6, 300);
				  }

			  break;
 80046ba:	e102      	b.n	80048c2 <main+0x70a>
					SUSTAINER=UCUS_BASLADI;
 80046bc:	4b70      	ldr	r3, [pc, #448]	@ (8004880 <main+0x6c8>)
 80046be:	2201      	movs	r2, #1
 80046c0:	701a      	strb	r2, [r3, #0]
			  break;
 80046c2:	e0fe      	b.n	80048c2 <main+0x70a>

		  case UCUS_BASLADI:
				v4_mod=2;
 80046c4:	4b6f      	ldr	r3, [pc, #444]	@ (8004884 <main+0x6cc>)
 80046c6:	2202      	movs	r2, #2
 80046c8:	701a      	strb	r2, [r3, #0]
				// FLASH MEMORYE KAYDETMEYE BASLA

				SUSTAINER=KADEMEAYRILDIMI;
 80046ca:	4b6d      	ldr	r3, [pc, #436]	@ (8004880 <main+0x6c8>)
 80046cc:	2202      	movs	r2, #2
 80046ce:	701a      	strb	r2, [r3, #0]

			 break;
 80046d0:	e0f7      	b.n	80048c2 <main+0x70a>

		  case KADEMEAYRILDIMI:
				v4_mod=3;
 80046d2:	4b6c      	ldr	r3, [pc, #432]	@ (8004884 <main+0x6cc>)
 80046d4:	2203      	movs	r2, #3
 80046d6:	701a      	strb	r2, [r3, #0]
					  //ALT KADEMEDEN GELEN SİNYALE VE EGÜ SWİTCHLERİNE BAK
					  //BELLİ BİR SÜRE VE İRTİFA BOYUNCA AYRILMA OLMAZSA APOGEE YA GEÇ
				if(timer_start_flag == 0){
 80046d8:	4b6c      	ldr	r3, [pc, #432]	@ (800488c <main+0x6d4>)
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d109      	bne.n	80046f4 <main+0x53c>

					__HAL_TIM_SET_COUNTER(&htim7 , 0);
 80046e0:	4b6b      	ldr	r3, [pc, #428]	@ (8004890 <main+0x6d8>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2200      	movs	r2, #0
 80046e6:	625a      	str	r2, [r3, #36]	@ 0x24
					HAL_TIM_Base_Start(&htim7);
 80046e8:	4869      	ldr	r0, [pc, #420]	@ (8004890 <main+0x6d8>)
 80046ea:	f005 ff45 	bl	800a578 <HAL_TIM_Base_Start>
					timer_start_flag =1;
 80046ee:	4b67      	ldr	r3, [pc, #412]	@ (800488c <main+0x6d4>)
 80046f0:	2201      	movs	r2, #1
 80046f2:	701a      	strb	r2, [r3, #0]
				}
				/*manyetik switch
				 * */
				if((magnetic_switch==0) && TIM7->CNT >= 45000 && altitude_rampa_control == 1)
 80046f4:	4b58      	ldr	r3, [pc, #352]	@ (8004858 <main+0x6a0>)
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f040 80a2 	bne.w	8004842 <main+0x68a>
 80046fe:	4b65      	ldr	r3, [pc, #404]	@ (8004894 <main+0x6dc>)
 8004700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004702:	f64a 72c7 	movw	r2, #44999	@ 0xafc7
 8004706:	4293      	cmp	r3, r2
 8004708:	f240 809b 	bls.w	8004842 <main+0x68a>
 800470c:	4b62      	ldr	r3, [pc, #392]	@ (8004898 <main+0x6e0>)
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	2b01      	cmp	r3, #1
 8004712:	f040 8096 	bne.w	8004842 <main+0x68a>
				{
				  SUSTAINER=AYRILDI;
 8004716:	4b5a      	ldr	r3, [pc, #360]	@ (8004880 <main+0x6c8>)
 8004718:	2203      	movs	r2, #3
 800471a:	701a      	strb	r2, [r3, #0]

//				  Buzzer(10, 100);
				}

			 break;
 800471c:	e091      	b.n	8004842 <main+0x68a>

		  case AYRILDI:
				v4_mod=4;
 800471e:	4b59      	ldr	r3, [pc, #356]	@ (8004884 <main+0x6cc>)
 8004720:	2204      	movs	r2, #4
 8004722:	701a      	strb	r2, [r3, #0]
					  //MOTOR ATE�?LEME TALEBİ GÖNDER MEGU YE MESAJ AT

				HAL_UART_Transmit(&huart6, EGU_motor_atesleme, 5, 1000);
 8004724:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004728:	2205      	movs	r2, #5
 800472a:	495c      	ldr	r1, [pc, #368]	@ (800489c <main+0x6e4>)
 800472c:	4853      	ldr	r0, [pc, #332]	@ (800487c <main+0x6c4>)
 800472e:	f006 fc38 	bl	800afa2 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart6, EGU_motor_atesleme, 5, 1000);
 8004732:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004736:	2205      	movs	r2, #5
 8004738:	4958      	ldr	r1, [pc, #352]	@ (800489c <main+0x6e4>)
 800473a:	4850      	ldr	r0, [pc, #320]	@ (800487c <main+0x6c4>)
 800473c:	f006 fc31 	bl	800afa2 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart6, EGU_motor_atesleme, 5, 1000);
 8004740:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004744:	2205      	movs	r2, #5
 8004746:	4955      	ldr	r1, [pc, #340]	@ (800489c <main+0x6e4>)
 8004748:	484c      	ldr	r0, [pc, #304]	@ (800487c <main+0x6c4>)
 800474a:	f006 fc2a 	bl	800afa2 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart6, EGU_motor_atesleme, 5, 1000);
 800474e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004752:	2205      	movs	r2, #5
 8004754:	4951      	ldr	r1, [pc, #324]	@ (800489c <main+0x6e4>)
 8004756:	4849      	ldr	r0, [pc, #292]	@ (800487c <main+0x6c4>)
 8004758:	f006 fc23 	bl	800afa2 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart6, EGU_motor_atesleme, 5, 1000);
 800475c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004760:	2205      	movs	r2, #5
 8004762:	494e      	ldr	r1, [pc, #312]	@ (800489c <main+0x6e4>)
 8004764:	4845      	ldr	r0, [pc, #276]	@ (800487c <main+0x6c4>)
 8004766:	f006 fc1c 	bl	800afa2 <HAL_UART_Transmit>
				SUSTAINER=APOGEE;
 800476a:	4b45      	ldr	r3, [pc, #276]	@ (8004880 <main+0x6c8>)
 800476c:	2204      	movs	r2, #4
 800476e:	701a      	strb	r2, [r3, #0]

			 break;
 8004770:	e0a7      	b.n	80048c2 <main+0x70a>

		  case APOGEE:
				v4_mod=5;
 8004772:	4b44      	ldr	r3, [pc, #272]	@ (8004884 <main+0x6cc>)
 8004774:	2205      	movs	r2, #5
 8004776:	701a      	strb	r2, [r3, #0]
					  //AYRILMA GERÇEKLE�?MESE BİLE APOGEE İLE ROKETİ KURTAR *ucus basladı kısmına timer kuracam ona göre ayrıldımıdan APOGEEya geçecek


				if((real_pitch <= 32) && speed <= 2 && altitude < altitude_max )
 8004778:	4b49      	ldr	r3, [pc, #292]	@ (80048a0 <main+0x6e8>)
 800477a:	edd3 7a00 	vldr	s15, [r3]
 800477e:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 80048a4 <main+0x6ec>
 8004782:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800478a:	d900      	bls.n	800478e <main+0x5d6>
					SUSTAINER=SUSTAINER_ANA;
					altitude_rampa_control =0;
				}


			 break;
 800478c:	e099      	b.n	80048c2 <main+0x70a>
				if((real_pitch <= 32) && speed <= 2 && altitude < altitude_max )
 800478e:	4b46      	ldr	r3, [pc, #280]	@ (80048a8 <main+0x6f0>)
 8004790:	edd3 7a00 	vldr	s15, [r3]
 8004794:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8004798:	eef4 7ac7 	vcmpe.f32	s15, s14
 800479c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047a0:	d900      	bls.n	80047a4 <main+0x5ec>
			 break;
 80047a2:	e08e      	b.n	80048c2 <main+0x70a>
				if((real_pitch <= 32) && speed <= 2 && altitude < altitude_max )
 80047a4:	4b41      	ldr	r3, [pc, #260]	@ (80048ac <main+0x6f4>)
 80047a6:	ed93 7a00 	vldr	s14, [r3]
 80047aa:	4b41      	ldr	r3, [pc, #260]	@ (80048b0 <main+0x6f8>)
 80047ac:	edd3 7a00 	vldr	s15, [r3]
 80047b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80047b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047b8:	d400      	bmi.n	80047bc <main+0x604>
			 break;
 80047ba:	e082      	b.n	80048c2 <main+0x70a>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 80047bc:	2201      	movs	r2, #1
 80047be:	2108      	movs	r1, #8
 80047c0:	483c      	ldr	r0, [pc, #240]	@ (80048b4 <main+0x6fc>)
 80047c2:	f002 fe91 	bl	80074e8 <HAL_GPIO_WritePin>
					SUSTAINER=SUSTAINER_ANA;
 80047c6:	4b2e      	ldr	r3, [pc, #184]	@ (8004880 <main+0x6c8>)
 80047c8:	2205      	movs	r2, #5
 80047ca:	701a      	strb	r2, [r3, #0]
					altitude_rampa_control =0;
 80047cc:	4b32      	ldr	r3, [pc, #200]	@ (8004898 <main+0x6e0>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	701a      	strb	r2, [r3, #0]
			 break;
 80047d2:	e076      	b.n	80048c2 <main+0x70a>

		  case SUSTAINER_ANA:
				v4_mod=6;
 80047d4:	4b2b      	ldr	r3, [pc, #172]	@ (8004884 <main+0x6cc>)
 80047d6:	2206      	movs	r2, #6
 80047d8:	701a      	strb	r2, [r3, #0]
					  //AYRILDI VEYA APOGEEDAN GELEN APOGEE BİLGİSİNDEN SONRA İSTENEN İRTİFADA ANA PARA�?ÜT AÇ

				if(altitude <= 500 && speed < 0  && altitude_rampa_control == 0 )
 80047da:	4b34      	ldr	r3, [pc, #208]	@ (80048ac <main+0x6f4>)
 80047dc:	edd3 7a00 	vldr	s15, [r3]
 80047e0:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 80048b8 <main+0x700>
 80047e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047ec:	d900      	bls.n	80047f0 <main+0x638>

					SUSTAINER=FINISH;
					flash_flag=1;
				}

			  break;
 80047ee:	e067      	b.n	80048c0 <main+0x708>
				if(altitude <= 500 && speed < 0  && altitude_rampa_control == 0 )
 80047f0:	4b2d      	ldr	r3, [pc, #180]	@ (80048a8 <main+0x6f0>)
 80047f2:	edd3 7a00 	vldr	s15, [r3]
 80047f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80047fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047fe:	d400      	bmi.n	8004802 <main+0x64a>
			  break;
 8004800:	e05e      	b.n	80048c0 <main+0x708>
				if(altitude <= 500 && speed < 0  && altitude_rampa_control == 0 )
 8004802:	4b25      	ldr	r3, [pc, #148]	@ (8004898 <main+0x6e0>)
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d15a      	bne.n	80048c0 <main+0x708>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 800480a:	2200      	movs	r2, #0
 800480c:	2108      	movs	r1, #8
 800480e:	4829      	ldr	r0, [pc, #164]	@ (80048b4 <main+0x6fc>)
 8004810:	f002 fe6a 	bl	80074e8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, SET);
 8004814:	2201      	movs	r2, #1
 8004816:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800481a:	480e      	ldr	r0, [pc, #56]	@ (8004854 <main+0x69c>)
 800481c:	f002 fe64 	bl	80074e8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, RESET);
 8004820:	2200      	movs	r2, #0
 8004822:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004826:	480b      	ldr	r0, [pc, #44]	@ (8004854 <main+0x69c>)
 8004828:	f002 fe5e 	bl	80074e8 <HAL_GPIO_WritePin>
					SUSTAINER=FINISH;
 800482c:	4b14      	ldr	r3, [pc, #80]	@ (8004880 <main+0x6c8>)
 800482e:	2206      	movs	r2, #6
 8004830:	701a      	strb	r2, [r3, #0]
					flash_flag=1;
 8004832:	4b22      	ldr	r3, [pc, #136]	@ (80048bc <main+0x704>)
 8004834:	2201      	movs	r2, #1
 8004836:	701a      	strb	r2, [r3, #0]
			  break;
 8004838:	e042      	b.n	80048c0 <main+0x708>

		  case FINISH:
				v4_mod=7;
 800483a:	4b12      	ldr	r3, [pc, #72]	@ (8004884 <main+0x6cc>)
 800483c:	2207      	movs	r2, #7
 800483e:	701a      	strb	r2, [r3, #0]
					  //KURTARMA GERÇEKLE�?Tİ VERİ KAYDETMEYİ BIRAK VE BUZZERI AÇ


			  break;
 8004840:	e03f      	b.n	80048c2 <main+0x70a>
			 break;
 8004842:	bf00      	nop
 8004844:	e03d      	b.n	80048c2 <main+0x70a>
 8004846:	bf00      	nop
 8004848:	20002418 	.word	0x20002418
 800484c:	20002414 	.word	0x20002414
 8004850:	20002420 	.word	0x20002420
 8004854:	40020800 	.word	0x40020800
 8004858:	20000692 	.word	0x20000692
 800485c:	20000693 	.word	0x20000693
 8004860:	200023e0 	.word	0x200023e0
 8004864:	20002298 	.word	0x20002298
 8004868:	20002440 	.word	0x20002440
 800486c:	20000690 	.word	0x20000690
 8004870:	20000544 	.word	0x20000544
 8004874:	200023e2 	.word	0x200023e2
 8004878:	08010068 	.word	0x08010068
 800487c:	20000588 	.word	0x20000588
 8004880:	20002438 	.word	0x20002438
 8004884:	20000691 	.word	0x20000691
 8004888:	200024f0 	.word	0x200024f0
 800488c:	2000067e 	.word	0x2000067e
 8004890:	200003e4 	.word	0x200003e4
 8004894:	40001400 	.word	0x40001400
 8004898:	2000067f 	.word	0x2000067f
 800489c:	08010070 	.word	0x08010070
 80048a0:	2000240c 	.word	0x2000240c
 80048a4:	42000000 	.word	0x42000000
 80048a8:	20002400 	.word	0x20002400
 80048ac:	200023ec 	.word	0x200023ec
 80048b0:	2000068c 	.word	0x2000068c
 80048b4:	40020400 	.word	0x40020400
 80048b8:	43fa0000 	.word	0x43fa0000
 80048bc:	20000684 	.word	0x20000684
			  break;
 80048c0:	bf00      	nop
		  }


/**************************************************************************************/
		  if(altitude >30 && SUSTAINER <3)
 80048c2:	4baf      	ldr	r3, [pc, #700]	@ (8004b80 <main+0x9c8>)
 80048c4:	edd3 7a00 	vldr	s15, [r3]
 80048c8:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80048cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048d4:	dd06      	ble.n	80048e4 <main+0x72c>
 80048d6:	4bab      	ldr	r3, [pc, #684]	@ (8004b84 <main+0x9cc>)
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d802      	bhi.n	80048e4 <main+0x72c>
		  {
			  altitude_rampa_control =1;
 80048de:	4baa      	ldr	r3, [pc, #680]	@ (8004b88 <main+0x9d0>)
 80048e0:	2201      	movs	r2, #1
 80048e2:	701a      	strb	r2, [r3, #0]
		  }
/*************************************************************************************/
		  if(altitude>altitude_max) altitude_max = altitude_kalman;
 80048e4:	4ba6      	ldr	r3, [pc, #664]	@ (8004b80 <main+0x9c8>)
 80048e6:	ed93 7a00 	vldr	s14, [r3]
 80048ea:	4ba8      	ldr	r3, [pc, #672]	@ (8004b8c <main+0x9d4>)
 80048ec:	edd3 7a00 	vldr	s15, [r3]
 80048f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80048f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048f8:	dd03      	ble.n	8004902 <main+0x74a>
 80048fa:	4ba5      	ldr	r3, [pc, #660]	@ (8004b90 <main+0x9d8>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4aa3      	ldr	r2, [pc, #652]	@ (8004b8c <main+0x9d4>)
 8004900:	6013      	str	r3, [r2, #0]

		  if(speed>speed_max) speed_max = speed;
 8004902:	4ba4      	ldr	r3, [pc, #656]	@ (8004b94 <main+0x9dc>)
 8004904:	ed93 7a00 	vldr	s14, [r3]
 8004908:	4ba3      	ldr	r3, [pc, #652]	@ (8004b98 <main+0x9e0>)
 800490a:	edd3 7a00 	vldr	s15, [r3]
 800490e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004916:	dd03      	ble.n	8004920 <main+0x768>
 8004918:	4b9e      	ldr	r3, [pc, #632]	@ (8004b94 <main+0x9dc>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a9e      	ldr	r2, [pc, #632]	@ (8004b98 <main+0x9e0>)
 800491e:	6013      	str	r3, [r2, #0]

		  if( Lsm_Sensor.Accel_X> x_max) x_max =  Lsm_Sensor.Accel_X;
 8004920:	4b9e      	ldr	r3, [pc, #632]	@ (8004b9c <main+0x9e4>)
 8004922:	ed93 7a00 	vldr	s14, [r3]
 8004926:	4b9e      	ldr	r3, [pc, #632]	@ (8004ba0 <main+0x9e8>)
 8004928:	edd3 7a00 	vldr	s15, [r3]
 800492c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004934:	dd03      	ble.n	800493e <main+0x786>
 8004936:	4b99      	ldr	r3, [pc, #612]	@ (8004b9c <main+0x9e4>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a99      	ldr	r2, [pc, #612]	@ (8004ba0 <main+0x9e8>)
 800493c:	6013      	str	r3, [r2, #0]
/**************************************************************************************/
		  if(adc_flag ==1)
 800493e:	4b99      	ldr	r3, [pc, #612]	@ (8004ba4 <main+0x9ec>)
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	2b01      	cmp	r3, #1
 8004944:	d158      	bne.n	80049f8 <main+0x840>
		  {
			  if(adc > 2476) adc = 2234;
 8004946:	4b98      	ldr	r3, [pc, #608]	@ (8004ba8 <main+0x9f0>)
 8004948:	edd3 7a00 	vldr	s15, [r3]
 800494c:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8004bac <main+0x9f4>
 8004950:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004958:	dd02      	ble.n	8004960 <main+0x7a8>
 800495a:	4b93      	ldr	r3, [pc, #588]	@ (8004ba8 <main+0x9f0>)
 800495c:	4a94      	ldr	r2, [pc, #592]	@ (8004bb0 <main+0x9f8>)
 800495e:	601a      	str	r2, [r3, #0]
			  if(adc < 1755) adc = 1755;
 8004960:	4b91      	ldr	r3, [pc, #580]	@ (8004ba8 <main+0x9f0>)
 8004962:	edd3 7a00 	vldr	s15, [r3]
 8004966:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 8004bb4 <main+0x9fc>
 800496a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800496e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004972:	d502      	bpl.n	800497a <main+0x7c2>
 8004974:	4b8c      	ldr	r3, [pc, #560]	@ (8004ba8 <main+0x9f0>)
 8004976:	4a90      	ldr	r2, [pc, #576]	@ (8004bb8 <main+0xa00>)
 8004978:	601a      	str	r2, [r3, #0]
			  // 6V = 1755 adc val 1,41V
			  // 8.4V = 2476 adc val 1,99V 0,58V
			  adc_pil_val=(float)( ( ( (adc/4095)*3.3)-1.41) / (1.99-1.41) ) *100 ; // pil conv
 800497a:	4b8b      	ldr	r3, [pc, #556]	@ (8004ba8 <main+0x9f0>)
 800497c:	edd3 7a00 	vldr	s15, [r3]
 8004980:	ed9f 7a8e 	vldr	s14, [pc, #568]	@ 8004bbc <main+0xa04>
 8004984:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004988:	ee16 0a90 	vmov	r0, s13
 800498c:	f7fb fdf4 	bl	8000578 <__aeabi_f2d>
 8004990:	a375      	add	r3, pc, #468	@ (adr r3, 8004b68 <main+0x9b0>)
 8004992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004996:	f7fb fe47 	bl	8000628 <__aeabi_dmul>
 800499a:	4602      	mov	r2, r0
 800499c:	460b      	mov	r3, r1
 800499e:	4610      	mov	r0, r2
 80049a0:	4619      	mov	r1, r3
 80049a2:	a373      	add	r3, pc, #460	@ (adr r3, 8004b70 <main+0x9b8>)
 80049a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a8:	f7fb fc86 	bl	80002b8 <__aeabi_dsub>
 80049ac:	4602      	mov	r2, r0
 80049ae:	460b      	mov	r3, r1
 80049b0:	4610      	mov	r0, r2
 80049b2:	4619      	mov	r1, r3
 80049b4:	a370      	add	r3, pc, #448	@ (adr r3, 8004b78 <main+0x9c0>)
 80049b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ba:	f7fb ff5f 	bl	800087c <__aeabi_ddiv>
 80049be:	4602      	mov	r2, r0
 80049c0:	460b      	mov	r3, r1
 80049c2:	4610      	mov	r0, r2
 80049c4:	4619      	mov	r1, r3
 80049c6:	f7fc f927 	bl	8000c18 <__aeabi_d2f>
 80049ca:	ee07 0a10 	vmov	s14, r0
 80049ce:	eddf 7a7c 	vldr	s15, [pc, #496]	@ 8004bc0 <main+0xa08>
 80049d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049d6:	4b7b      	ldr	r3, [pc, #492]	@ (8004bc4 <main+0xa0c>)
 80049d8:	edc3 7a00 	vstr	s15, [r3]
			  v4_battery=adc_pil_val;
 80049dc:	4b79      	ldr	r3, [pc, #484]	@ (8004bc4 <main+0xa0c>)
 80049de:	edd3 7a00 	vldr	s15, [r3]
 80049e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049e6:	edc7 7a01 	vstr	s15, [r7, #4]
 80049ea:	793b      	ldrb	r3, [r7, #4]
 80049ec:	b2da      	uxtb	r2, r3
 80049ee:	4b76      	ldr	r3, [pc, #472]	@ (8004bc8 <main+0xa10>)
 80049f0:	701a      	strb	r2, [r3, #0]
			  adc_flag=0;
 80049f2:	4b6c      	ldr	r3, [pc, #432]	@ (8004ba4 <main+0x9ec>)
 80049f4:	2200      	movs	r2, #0
 80049f6:	701a      	strb	r2, [r3, #0]
		  }
/**********************Flash Kayıt*********************************************************/
	if( i_flag == 1 && flash_flag == 1 && SUSTAINER >=6 ) //
 80049f8:	4b74      	ldr	r3, [pc, #464]	@ (8004bcc <main+0xa14>)
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	f040 8081 	bne.w	8004b04 <main+0x94c>
 8004a02:	4b73      	ldr	r3, [pc, #460]	@ (8004bd0 <main+0xa18>)
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d17c      	bne.n	8004b04 <main+0x94c>
 8004a0a:	4b5e      	ldr	r3, [pc, #376]	@ (8004b84 <main+0x9cc>)
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	2b05      	cmp	r3, #5
 8004a10:	d978      	bls.n	8004b04 <main+0x94c>
	{

		W25Q_Write(page, 0, 256, flash_accX);
 8004a12:	4b70      	ldr	r3, [pc, #448]	@ (8004bd4 <main+0xa1c>)
 8004a14:	6818      	ldr	r0, [r3, #0]
 8004a16:	4b70      	ldr	r3, [pc, #448]	@ (8004bd8 <main+0xa20>)
 8004a18:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004a1c:	2100      	movs	r1, #0
 8004a1e:	f7fe fbe8 	bl	80031f2 <W25Q_Write>
		HAL_Delay(200);
 8004a22:	20c8      	movs	r0, #200	@ 0xc8
 8004a24:	f001 fd60 	bl	80064e8 <HAL_Delay>
		page++;
 8004a28:	4b6a      	ldr	r3, [pc, #424]	@ (8004bd4 <main+0xa1c>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	4a69      	ldr	r2, [pc, #420]	@ (8004bd4 <main+0xa1c>)
 8004a30:	6013      	str	r3, [r2, #0]
		W25Q_Write(page, 0, 256, flash_accY);
 8004a32:	4b68      	ldr	r3, [pc, #416]	@ (8004bd4 <main+0xa1c>)
 8004a34:	6818      	ldr	r0, [r3, #0]
 8004a36:	4b69      	ldr	r3, [pc, #420]	@ (8004bdc <main+0xa24>)
 8004a38:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004a3c:	2100      	movs	r1, #0
 8004a3e:	f7fe fbd8 	bl	80031f2 <W25Q_Write>
		HAL_Delay(200);
 8004a42:	20c8      	movs	r0, #200	@ 0xc8
 8004a44:	f001 fd50 	bl	80064e8 <HAL_Delay>
		page++;
 8004a48:	4b62      	ldr	r3, [pc, #392]	@ (8004bd4 <main+0xa1c>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	4a61      	ldr	r2, [pc, #388]	@ (8004bd4 <main+0xa1c>)
 8004a50:	6013      	str	r3, [r2, #0]
		W25Q_Write(page, 0, 256, flash_accZ);
 8004a52:	4b60      	ldr	r3, [pc, #384]	@ (8004bd4 <main+0xa1c>)
 8004a54:	6818      	ldr	r0, [r3, #0]
 8004a56:	4b62      	ldr	r3, [pc, #392]	@ (8004be0 <main+0xa28>)
 8004a58:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004a5c:	2100      	movs	r1, #0
 8004a5e:	f7fe fbc8 	bl	80031f2 <W25Q_Write>
		HAL_Delay(200);
 8004a62:	20c8      	movs	r0, #200	@ 0xc8
 8004a64:	f001 fd40 	bl	80064e8 <HAL_Delay>
		page++;
 8004a68:	4b5a      	ldr	r3, [pc, #360]	@ (8004bd4 <main+0xa1c>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	3301      	adds	r3, #1
 8004a6e:	4a59      	ldr	r2, [pc, #356]	@ (8004bd4 <main+0xa1c>)
 8004a70:	6013      	str	r3, [r2, #0]
		W25Q_Write(page, 0,256, flash_gyroX);
 8004a72:	4b58      	ldr	r3, [pc, #352]	@ (8004bd4 <main+0xa1c>)
 8004a74:	6818      	ldr	r0, [r3, #0]
 8004a76:	4b5b      	ldr	r3, [pc, #364]	@ (8004be4 <main+0xa2c>)
 8004a78:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004a7c:	2100      	movs	r1, #0
 8004a7e:	f7fe fbb8 	bl	80031f2 <W25Q_Write>
		HAL_Delay(200);
 8004a82:	20c8      	movs	r0, #200	@ 0xc8
 8004a84:	f001 fd30 	bl	80064e8 <HAL_Delay>
		page++;
 8004a88:	4b52      	ldr	r3, [pc, #328]	@ (8004bd4 <main+0xa1c>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	4a51      	ldr	r2, [pc, #324]	@ (8004bd4 <main+0xa1c>)
 8004a90:	6013      	str	r3, [r2, #0]
		W25Q_Write(page, 0, 256, flash_gyroY);
 8004a92:	4b50      	ldr	r3, [pc, #320]	@ (8004bd4 <main+0xa1c>)
 8004a94:	6818      	ldr	r0, [r3, #0]
 8004a96:	4b54      	ldr	r3, [pc, #336]	@ (8004be8 <main+0xa30>)
 8004a98:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	f7fe fba8 	bl	80031f2 <W25Q_Write>
		HAL_Delay(200);
 8004aa2:	20c8      	movs	r0, #200	@ 0xc8
 8004aa4:	f001 fd20 	bl	80064e8 <HAL_Delay>
		page++;
 8004aa8:	4b4a      	ldr	r3, [pc, #296]	@ (8004bd4 <main+0xa1c>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	3301      	adds	r3, #1
 8004aae:	4a49      	ldr	r2, [pc, #292]	@ (8004bd4 <main+0xa1c>)
 8004ab0:	6013      	str	r3, [r2, #0]
		W25Q_Write(page, 0,256, flash_gyroZ);
 8004ab2:	4b48      	ldr	r3, [pc, #288]	@ (8004bd4 <main+0xa1c>)
 8004ab4:	6818      	ldr	r0, [r3, #0]
 8004ab6:	4b4d      	ldr	r3, [pc, #308]	@ (8004bec <main+0xa34>)
 8004ab8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004abc:	2100      	movs	r1, #0
 8004abe:	f7fe fb98 	bl	80031f2 <W25Q_Write>
		HAL_Delay(200);
 8004ac2:	20c8      	movs	r0, #200	@ 0xc8
 8004ac4:	f001 fd10 	bl	80064e8 <HAL_Delay>
		page++;
 8004ac8:	4b42      	ldr	r3, [pc, #264]	@ (8004bd4 <main+0xa1c>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	3301      	adds	r3, #1
 8004ace:	4a41      	ldr	r2, [pc, #260]	@ (8004bd4 <main+0xa1c>)
 8004ad0:	6013      	str	r3, [r2, #0]
		W25Q_Write(page, 0,256, flash_altitude);
 8004ad2:	4b40      	ldr	r3, [pc, #256]	@ (8004bd4 <main+0xa1c>)
 8004ad4:	6818      	ldr	r0, [r3, #0]
 8004ad6:	4b46      	ldr	r3, [pc, #280]	@ (8004bf0 <main+0xa38>)
 8004ad8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004adc:	2100      	movs	r1, #0
 8004ade:	f7fe fb88 	bl	80031f2 <W25Q_Write>
		HAL_Delay(200);
 8004ae2:	20c8      	movs	r0, #200	@ 0xc8
 8004ae4:	f001 fd00 	bl	80064e8 <HAL_Delay>

		W25Q_Read(page, 0,  256, test);
 8004ae8:	4b3a      	ldr	r3, [pc, #232]	@ (8004bd4 <main+0xa1c>)
 8004aea:	6818      	ldr	r0, [r3, #0]
 8004aec:	4b41      	ldr	r3, [pc, #260]	@ (8004bf4 <main+0xa3c>)
 8004aee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004af2:	2100      	movs	r1, #0
 8004af4:	f7fe f966 	bl	8002dc4 <W25Q_Read>

		flash_flag=0;
 8004af8:	4b35      	ldr	r3, [pc, #212]	@ (8004bd0 <main+0xa18>)
 8004afa:	2200      	movs	r2, #0
 8004afc:	701a      	strb	r2, [r3, #0]
		i_flag=0;
 8004afe:	4b33      	ldr	r3, [pc, #204]	@ (8004bcc <main+0xa14>)
 8004b00:	2200      	movs	r2, #0
 8004b02:	701a      	strb	r2, [r3, #0]
	}
//
	if( timer_200ms_flag == 1 && i_flag ==0 /*&& SUSTAINER >=1*/)
 8004b04:	4b3c      	ldr	r3, [pc, #240]	@ (8004bf8 <main+0xa40>)
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	f47f ac1d 	bne.w	8004348 <main+0x190>
 8004b0e:	4b2f      	ldr	r3, [pc, #188]	@ (8004bcc <main+0xa14>)
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	f47f ac18 	bne.w	8004348 <main+0x190>
	{
		if(i >= 252) {
 8004b18:	4b38      	ldr	r3, [pc, #224]	@ (8004bfc <main+0xa44>)
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	2bfb      	cmp	r3, #251	@ 0xfb
 8004b1e:	d902      	bls.n	8004b26 <main+0x96e>
			i_flag=1;
 8004b20:	4b2a      	ldr	r3, [pc, #168]	@ (8004bcc <main+0xa14>)
 8004b22:	2201      	movs	r2, #1
 8004b24:	701a      	strb	r2, [r3, #0]
		}

		conv.fVal=Lsm_Sensor.Accel_X;
 8004b26:	4b1d      	ldr	r3, [pc, #116]	@ (8004b9c <main+0x9e4>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a35      	ldr	r2, [pc, #212]	@ (8004c00 <main+0xa48>)
 8004b2c:	6013      	str	r3, [r2, #0]

		flash_accX[i] = conv.array[0];
 8004b2e:	4b33      	ldr	r3, [pc, #204]	@ (8004bfc <main+0xa44>)
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	461a      	mov	r2, r3
 8004b34:	4b32      	ldr	r3, [pc, #200]	@ (8004c00 <main+0xa48>)
 8004b36:	7819      	ldrb	r1, [r3, #0]
 8004b38:	4b27      	ldr	r3, [pc, #156]	@ (8004bd8 <main+0xa20>)
 8004b3a:	5499      	strb	r1, [r3, r2]
		flash_accX[i+1] = conv.array[1];
 8004b3c:	4b2f      	ldr	r3, [pc, #188]	@ (8004bfc <main+0xa44>)
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	3301      	adds	r3, #1
 8004b42:	4a2f      	ldr	r2, [pc, #188]	@ (8004c00 <main+0xa48>)
 8004b44:	7851      	ldrb	r1, [r2, #1]
 8004b46:	4a24      	ldr	r2, [pc, #144]	@ (8004bd8 <main+0xa20>)
 8004b48:	54d1      	strb	r1, [r2, r3]
		flash_accX[i+2] = conv.array[2];
 8004b4a:	4b2c      	ldr	r3, [pc, #176]	@ (8004bfc <main+0xa44>)
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	3302      	adds	r3, #2
 8004b50:	4a2b      	ldr	r2, [pc, #172]	@ (8004c00 <main+0xa48>)
 8004b52:	7891      	ldrb	r1, [r2, #2]
 8004b54:	4a20      	ldr	r2, [pc, #128]	@ (8004bd8 <main+0xa20>)
 8004b56:	54d1      	strb	r1, [r2, r3]
		flash_accX[i+3] = conv.array[3];
 8004b58:	4b28      	ldr	r3, [pc, #160]	@ (8004bfc <main+0xa44>)
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	3303      	adds	r3, #3
 8004b5e:	4a28      	ldr	r2, [pc, #160]	@ (8004c00 <main+0xa48>)
 8004b60:	78d1      	ldrb	r1, [r2, #3]
 8004b62:	4a1d      	ldr	r2, [pc, #116]	@ (8004bd8 <main+0xa20>)
 8004b64:	54d1      	strb	r1, [r2, r3]
 8004b66:	e04d      	b.n	8004c04 <main+0xa4c>
 8004b68:	66666666 	.word	0x66666666
 8004b6c:	400a6666 	.word	0x400a6666
 8004b70:	28f5c28f 	.word	0x28f5c28f
 8004b74:	3ff68f5c 	.word	0x3ff68f5c
 8004b78:	28f5c290 	.word	0x28f5c290
 8004b7c:	3fe28f5c 	.word	0x3fe28f5c
 8004b80:	200023ec 	.word	0x200023ec
 8004b84:	20002438 	.word	0x20002438
 8004b88:	2000067f 	.word	0x2000067f
 8004b8c:	2000068c 	.word	0x2000068c
 8004b90:	20002408 	.word	0x20002408
 8004b94:	20002400 	.word	0x20002400
 8004b98:	20002404 	.word	0x20002404
 8004b9c:	200024f0 	.word	0x200024f0
 8004ba0:	2000241c 	.word	0x2000241c
 8004ba4:	200005f9 	.word	0x200005f9
 8004ba8:	200005f4 	.word	0x200005f4
 8004bac:	451ac000 	.word	0x451ac000
 8004bb0:	450ba000 	.word	0x450ba000
 8004bb4:	44db6000 	.word	0x44db6000
 8004bb8:	44db6000 	.word	0x44db6000
 8004bbc:	457ff000 	.word	0x457ff000
 8004bc0:	42c80000 	.word	0x42c80000
 8004bc4:	200005f0 	.word	0x200005f0
 8004bc8:	20000690 	.word	0x20000690
 8004bcc:	20000695 	.word	0x20000695
 8004bd0:	20000684 	.word	0x20000684
 8004bd4:	20000680 	.word	0x20000680
 8004bd8:	20000a98 	.word	0x20000a98
 8004bdc:	20001298 	.word	0x20001298
 8004be0:	20000e98 	.word	0x20000e98
 8004be4:	20001698 	.word	0x20001698
 8004be8:	20001a98 	.word	0x20001a98
 8004bec:	20001e98 	.word	0x20001e98
 8004bf0:	20000698 	.word	0x20000698
 8004bf4:	200022e0 	.word	0x200022e0
 8004bf8:	20000685 	.word	0x20000685
 8004bfc:	20000694 	.word	0x20000694
 8004c00:	20002684 	.word	0x20002684

		conv.fVal=Lsm_Sensor.Accel_Y;
 8004c04:	4b65      	ldr	r3, [pc, #404]	@ (8004d9c <main+0xbe4>)
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	4a65      	ldr	r2, [pc, #404]	@ (8004da0 <main+0xbe8>)
 8004c0a:	6013      	str	r3, [r2, #0]
		flash_accY[i] = conv.array[0];
 8004c0c:	4b65      	ldr	r3, [pc, #404]	@ (8004da4 <main+0xbec>)
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	461a      	mov	r2, r3
 8004c12:	4b63      	ldr	r3, [pc, #396]	@ (8004da0 <main+0xbe8>)
 8004c14:	7819      	ldrb	r1, [r3, #0]
 8004c16:	4b64      	ldr	r3, [pc, #400]	@ (8004da8 <main+0xbf0>)
 8004c18:	5499      	strb	r1, [r3, r2]
		flash_accY[i+1] = conv.array[1];
 8004c1a:	4b62      	ldr	r3, [pc, #392]	@ (8004da4 <main+0xbec>)
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	3301      	adds	r3, #1
 8004c20:	4a5f      	ldr	r2, [pc, #380]	@ (8004da0 <main+0xbe8>)
 8004c22:	7851      	ldrb	r1, [r2, #1]
 8004c24:	4a60      	ldr	r2, [pc, #384]	@ (8004da8 <main+0xbf0>)
 8004c26:	54d1      	strb	r1, [r2, r3]
		flash_accY[i+2] = conv.array[2];
 8004c28:	4b5e      	ldr	r3, [pc, #376]	@ (8004da4 <main+0xbec>)
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	3302      	adds	r3, #2
 8004c2e:	4a5c      	ldr	r2, [pc, #368]	@ (8004da0 <main+0xbe8>)
 8004c30:	7891      	ldrb	r1, [r2, #2]
 8004c32:	4a5d      	ldr	r2, [pc, #372]	@ (8004da8 <main+0xbf0>)
 8004c34:	54d1      	strb	r1, [r2, r3]
		flash_accY[i+3] = conv.array[3];
 8004c36:	4b5b      	ldr	r3, [pc, #364]	@ (8004da4 <main+0xbec>)
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	3303      	adds	r3, #3
 8004c3c:	4a58      	ldr	r2, [pc, #352]	@ (8004da0 <main+0xbe8>)
 8004c3e:	78d1      	ldrb	r1, [r2, #3]
 8004c40:	4a59      	ldr	r2, [pc, #356]	@ (8004da8 <main+0xbf0>)
 8004c42:	54d1      	strb	r1, [r2, r3]

		conv.fVal=Lsm_Sensor.Accel_Z;
 8004c44:	4b55      	ldr	r3, [pc, #340]	@ (8004d9c <main+0xbe4>)
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	4a55      	ldr	r2, [pc, #340]	@ (8004da0 <main+0xbe8>)
 8004c4a:	6013      	str	r3, [r2, #0]
		flash_accZ[i] = conv.array[0];
 8004c4c:	4b55      	ldr	r3, [pc, #340]	@ (8004da4 <main+0xbec>)
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	461a      	mov	r2, r3
 8004c52:	4b53      	ldr	r3, [pc, #332]	@ (8004da0 <main+0xbe8>)
 8004c54:	7819      	ldrb	r1, [r3, #0]
 8004c56:	4b55      	ldr	r3, [pc, #340]	@ (8004dac <main+0xbf4>)
 8004c58:	5499      	strb	r1, [r3, r2]
		flash_accZ[i+1] = conv.array[1];
 8004c5a:	4b52      	ldr	r3, [pc, #328]	@ (8004da4 <main+0xbec>)
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	3301      	adds	r3, #1
 8004c60:	4a4f      	ldr	r2, [pc, #316]	@ (8004da0 <main+0xbe8>)
 8004c62:	7851      	ldrb	r1, [r2, #1]
 8004c64:	4a51      	ldr	r2, [pc, #324]	@ (8004dac <main+0xbf4>)
 8004c66:	54d1      	strb	r1, [r2, r3]
		flash_accZ[i+2] = conv.array[2];
 8004c68:	4b4e      	ldr	r3, [pc, #312]	@ (8004da4 <main+0xbec>)
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	3302      	adds	r3, #2
 8004c6e:	4a4c      	ldr	r2, [pc, #304]	@ (8004da0 <main+0xbe8>)
 8004c70:	7891      	ldrb	r1, [r2, #2]
 8004c72:	4a4e      	ldr	r2, [pc, #312]	@ (8004dac <main+0xbf4>)
 8004c74:	54d1      	strb	r1, [r2, r3]
		flash_accZ[i+3] = conv.array[3];
 8004c76:	4b4b      	ldr	r3, [pc, #300]	@ (8004da4 <main+0xbec>)
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	3303      	adds	r3, #3
 8004c7c:	4a48      	ldr	r2, [pc, #288]	@ (8004da0 <main+0xbe8>)
 8004c7e:	78d1      	ldrb	r1, [r2, #3]
 8004c80:	4a4a      	ldr	r2, [pc, #296]	@ (8004dac <main+0xbf4>)
 8004c82:	54d1      	strb	r1, [r2, r3]

		conv.fVal=Lsm_Sensor.Gyro_X;
 8004c84:	4b45      	ldr	r3, [pc, #276]	@ (8004d9c <main+0xbe4>)
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	4a45      	ldr	r2, [pc, #276]	@ (8004da0 <main+0xbe8>)
 8004c8a:	6013      	str	r3, [r2, #0]
		flash_gyroX[i] = conv.array[0];
 8004c8c:	4b45      	ldr	r3, [pc, #276]	@ (8004da4 <main+0xbec>)
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	461a      	mov	r2, r3
 8004c92:	4b43      	ldr	r3, [pc, #268]	@ (8004da0 <main+0xbe8>)
 8004c94:	7819      	ldrb	r1, [r3, #0]
 8004c96:	4b46      	ldr	r3, [pc, #280]	@ (8004db0 <main+0xbf8>)
 8004c98:	5499      	strb	r1, [r3, r2]
		flash_gyroX[i+1] = conv.array[1];
 8004c9a:	4b42      	ldr	r3, [pc, #264]	@ (8004da4 <main+0xbec>)
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	4a3f      	ldr	r2, [pc, #252]	@ (8004da0 <main+0xbe8>)
 8004ca2:	7851      	ldrb	r1, [r2, #1]
 8004ca4:	4a42      	ldr	r2, [pc, #264]	@ (8004db0 <main+0xbf8>)
 8004ca6:	54d1      	strb	r1, [r2, r3]
		flash_gyroX[i+2] = conv.array[2];
 8004ca8:	4b3e      	ldr	r3, [pc, #248]	@ (8004da4 <main+0xbec>)
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	3302      	adds	r3, #2
 8004cae:	4a3c      	ldr	r2, [pc, #240]	@ (8004da0 <main+0xbe8>)
 8004cb0:	7891      	ldrb	r1, [r2, #2]
 8004cb2:	4a3f      	ldr	r2, [pc, #252]	@ (8004db0 <main+0xbf8>)
 8004cb4:	54d1      	strb	r1, [r2, r3]
		flash_gyroX[i+3] = conv.array[3];
 8004cb6:	4b3b      	ldr	r3, [pc, #236]	@ (8004da4 <main+0xbec>)
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	3303      	adds	r3, #3
 8004cbc:	4a38      	ldr	r2, [pc, #224]	@ (8004da0 <main+0xbe8>)
 8004cbe:	78d1      	ldrb	r1, [r2, #3]
 8004cc0:	4a3b      	ldr	r2, [pc, #236]	@ (8004db0 <main+0xbf8>)
 8004cc2:	54d1      	strb	r1, [r2, r3]

		conv.fVal=Lsm_Sensor.Gyro_Y;
 8004cc4:	4b35      	ldr	r3, [pc, #212]	@ (8004d9c <main+0xbe4>)
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	4a35      	ldr	r2, [pc, #212]	@ (8004da0 <main+0xbe8>)
 8004cca:	6013      	str	r3, [r2, #0]
		flash_gyroY[i] = conv.array[0];
 8004ccc:	4b35      	ldr	r3, [pc, #212]	@ (8004da4 <main+0xbec>)
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	4b33      	ldr	r3, [pc, #204]	@ (8004da0 <main+0xbe8>)
 8004cd4:	7819      	ldrb	r1, [r3, #0]
 8004cd6:	4b37      	ldr	r3, [pc, #220]	@ (8004db4 <main+0xbfc>)
 8004cd8:	5499      	strb	r1, [r3, r2]
		flash_gyroY[i+1] = conv.array[1];
 8004cda:	4b32      	ldr	r3, [pc, #200]	@ (8004da4 <main+0xbec>)
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	3301      	adds	r3, #1
 8004ce0:	4a2f      	ldr	r2, [pc, #188]	@ (8004da0 <main+0xbe8>)
 8004ce2:	7851      	ldrb	r1, [r2, #1]
 8004ce4:	4a33      	ldr	r2, [pc, #204]	@ (8004db4 <main+0xbfc>)
 8004ce6:	54d1      	strb	r1, [r2, r3]
		flash_gyroY[i+2] = conv.array[2];
 8004ce8:	4b2e      	ldr	r3, [pc, #184]	@ (8004da4 <main+0xbec>)
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	3302      	adds	r3, #2
 8004cee:	4a2c      	ldr	r2, [pc, #176]	@ (8004da0 <main+0xbe8>)
 8004cf0:	7891      	ldrb	r1, [r2, #2]
 8004cf2:	4a30      	ldr	r2, [pc, #192]	@ (8004db4 <main+0xbfc>)
 8004cf4:	54d1      	strb	r1, [r2, r3]
		flash_gyroY[i+3] = conv.array[3];
 8004cf6:	4b2b      	ldr	r3, [pc, #172]	@ (8004da4 <main+0xbec>)
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	3303      	adds	r3, #3
 8004cfc:	4a28      	ldr	r2, [pc, #160]	@ (8004da0 <main+0xbe8>)
 8004cfe:	78d1      	ldrb	r1, [r2, #3]
 8004d00:	4a2c      	ldr	r2, [pc, #176]	@ (8004db4 <main+0xbfc>)
 8004d02:	54d1      	strb	r1, [r2, r3]

		conv.fVal=Lsm_Sensor.Gyro_Z;
 8004d04:	4b25      	ldr	r3, [pc, #148]	@ (8004d9c <main+0xbe4>)
 8004d06:	695b      	ldr	r3, [r3, #20]
 8004d08:	4a25      	ldr	r2, [pc, #148]	@ (8004da0 <main+0xbe8>)
 8004d0a:	6013      	str	r3, [r2, #0]
		flash_gyroZ[i] = conv.array[0];
 8004d0c:	4b25      	ldr	r3, [pc, #148]	@ (8004da4 <main+0xbec>)
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	461a      	mov	r2, r3
 8004d12:	4b23      	ldr	r3, [pc, #140]	@ (8004da0 <main+0xbe8>)
 8004d14:	7819      	ldrb	r1, [r3, #0]
 8004d16:	4b28      	ldr	r3, [pc, #160]	@ (8004db8 <main+0xc00>)
 8004d18:	5499      	strb	r1, [r3, r2]
		flash_gyroZ[i+1] = conv.array[1];
 8004d1a:	4b22      	ldr	r3, [pc, #136]	@ (8004da4 <main+0xbec>)
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	3301      	adds	r3, #1
 8004d20:	4a1f      	ldr	r2, [pc, #124]	@ (8004da0 <main+0xbe8>)
 8004d22:	7851      	ldrb	r1, [r2, #1]
 8004d24:	4a24      	ldr	r2, [pc, #144]	@ (8004db8 <main+0xc00>)
 8004d26:	54d1      	strb	r1, [r2, r3]
		flash_gyroZ[i+2] = conv.array[2];
 8004d28:	4b1e      	ldr	r3, [pc, #120]	@ (8004da4 <main+0xbec>)
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	3302      	adds	r3, #2
 8004d2e:	4a1c      	ldr	r2, [pc, #112]	@ (8004da0 <main+0xbe8>)
 8004d30:	7891      	ldrb	r1, [r2, #2]
 8004d32:	4a21      	ldr	r2, [pc, #132]	@ (8004db8 <main+0xc00>)
 8004d34:	54d1      	strb	r1, [r2, r3]
		flash_gyroZ[i+3] = conv.array[3];
 8004d36:	4b1b      	ldr	r3, [pc, #108]	@ (8004da4 <main+0xbec>)
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	3303      	adds	r3, #3
 8004d3c:	4a18      	ldr	r2, [pc, #96]	@ (8004da0 <main+0xbe8>)
 8004d3e:	78d1      	ldrb	r1, [r2, #3]
 8004d40:	4a1d      	ldr	r2, [pc, #116]	@ (8004db8 <main+0xc00>)
 8004d42:	54d1      	strb	r1, [r2, r3]

		conv.fVal=altitude_kalman;
 8004d44:	4b1d      	ldr	r3, [pc, #116]	@ (8004dbc <main+0xc04>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a15      	ldr	r2, [pc, #84]	@ (8004da0 <main+0xbe8>)
 8004d4a:	6013      	str	r3, [r2, #0]
		flash_altitude[i] = conv.array[0];
 8004d4c:	4b15      	ldr	r3, [pc, #84]	@ (8004da4 <main+0xbec>)
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	461a      	mov	r2, r3
 8004d52:	4b13      	ldr	r3, [pc, #76]	@ (8004da0 <main+0xbe8>)
 8004d54:	7819      	ldrb	r1, [r3, #0]
 8004d56:	4b1a      	ldr	r3, [pc, #104]	@ (8004dc0 <main+0xc08>)
 8004d58:	5499      	strb	r1, [r3, r2]
		flash_altitude[i+1] = conv.array[1];
 8004d5a:	4b12      	ldr	r3, [pc, #72]	@ (8004da4 <main+0xbec>)
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	3301      	adds	r3, #1
 8004d60:	4a0f      	ldr	r2, [pc, #60]	@ (8004da0 <main+0xbe8>)
 8004d62:	7851      	ldrb	r1, [r2, #1]
 8004d64:	4a16      	ldr	r2, [pc, #88]	@ (8004dc0 <main+0xc08>)
 8004d66:	54d1      	strb	r1, [r2, r3]
		flash_altitude[i+2] = conv.array[2];
 8004d68:	4b0e      	ldr	r3, [pc, #56]	@ (8004da4 <main+0xbec>)
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	3302      	adds	r3, #2
 8004d6e:	4a0c      	ldr	r2, [pc, #48]	@ (8004da0 <main+0xbe8>)
 8004d70:	7891      	ldrb	r1, [r2, #2]
 8004d72:	4a13      	ldr	r2, [pc, #76]	@ (8004dc0 <main+0xc08>)
 8004d74:	54d1      	strb	r1, [r2, r3]
		flash_altitude[i+3] = conv.array[3];
 8004d76:	4b0b      	ldr	r3, [pc, #44]	@ (8004da4 <main+0xbec>)
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	3303      	adds	r3, #3
 8004d7c:	4a08      	ldr	r2, [pc, #32]	@ (8004da0 <main+0xbe8>)
 8004d7e:	78d1      	ldrb	r1, [r2, #3]
 8004d80:	4a0f      	ldr	r2, [pc, #60]	@ (8004dc0 <main+0xc08>)
 8004d82:	54d1      	strb	r1, [r2, r3]



		timer_200ms_flag =0;
 8004d84:	4b0f      	ldr	r3, [pc, #60]	@ (8004dc4 <main+0xc0c>)
 8004d86:	2200      	movs	r2, #0
 8004d88:	701a      	strb	r2, [r3, #0]

		i=i+4;
 8004d8a:	4b06      	ldr	r3, [pc, #24]	@ (8004da4 <main+0xbec>)
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	3304      	adds	r3, #4
 8004d90:	b2da      	uxtb	r2, r3
 8004d92:	4b04      	ldr	r3, [pc, #16]	@ (8004da4 <main+0xbec>)
 8004d94:	701a      	strb	r2, [r3, #0]
	if(sensor_flag==1)
 8004d96:	f7ff bad7 	b.w	8004348 <main+0x190>
 8004d9a:	bf00      	nop
 8004d9c:	200024f0 	.word	0x200024f0
 8004da0:	20002684 	.word	0x20002684
 8004da4:	20000694 	.word	0x20000694
 8004da8:	20001298 	.word	0x20001298
 8004dac:	20000e98 	.word	0x20000e98
 8004db0:	20001698 	.word	0x20001698
 8004db4:	20001a98 	.word	0x20001a98
 8004db8:	20001e98 	.word	0x20001e98
 8004dbc:	20002408 	.word	0x20002408
 8004dc0:	20000698 	.word	0x20000698
 8004dc4:	20000685 	.word	0x20000685

08004dc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b094      	sub	sp, #80	@ 0x50
 8004dcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004dce:	f107 031c 	add.w	r3, r7, #28
 8004dd2:	2234      	movs	r2, #52	@ 0x34
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f008 f9eb 	bl	800d1b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004ddc:	f107 0308 	add.w	r3, r7, #8
 8004de0:	2200      	movs	r2, #0
 8004de2:	601a      	str	r2, [r3, #0]
 8004de4:	605a      	str	r2, [r3, #4]
 8004de6:	609a      	str	r2, [r3, #8]
 8004de8:	60da      	str	r2, [r3, #12]
 8004dea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004dec:	2300      	movs	r3, #0
 8004dee:	607b      	str	r3, [r7, #4]
 8004df0:	4b29      	ldr	r3, [pc, #164]	@ (8004e98 <SystemClock_Config+0xd0>)
 8004df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004df4:	4a28      	ldr	r2, [pc, #160]	@ (8004e98 <SystemClock_Config+0xd0>)
 8004df6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dfa:	6413      	str	r3, [r2, #64]	@ 0x40
 8004dfc:	4b26      	ldr	r3, [pc, #152]	@ (8004e98 <SystemClock_Config+0xd0>)
 8004dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e04:	607b      	str	r3, [r7, #4]
 8004e06:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e08:	2300      	movs	r3, #0
 8004e0a:	603b      	str	r3, [r7, #0]
 8004e0c:	4b23      	ldr	r3, [pc, #140]	@ (8004e9c <SystemClock_Config+0xd4>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a22      	ldr	r2, [pc, #136]	@ (8004e9c <SystemClock_Config+0xd4>)
 8004e12:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004e16:	6013      	str	r3, [r2, #0]
 8004e18:	4b20      	ldr	r3, [pc, #128]	@ (8004e9c <SystemClock_Config+0xd4>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004e20:	603b      	str	r3, [r7, #0]
 8004e22:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004e24:	2301      	movs	r3, #1
 8004e26:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004e28:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004e2c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004e2e:	2302      	movs	r3, #2
 8004e30:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004e32:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004e36:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004e38:	2304      	movs	r3, #4
 8004e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004e3c:	23a8      	movs	r3, #168	@ 0xa8
 8004e3e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004e40:	2302      	movs	r3, #2
 8004e42:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8004e44:	2307      	movs	r3, #7
 8004e46:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004e48:	2302      	movs	r3, #2
 8004e4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004e4c:	f107 031c 	add.w	r3, r7, #28
 8004e50:	4618      	mov	r0, r3
 8004e52:	f004 fafb 	bl	800944c <HAL_RCC_OscConfig>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d001      	beq.n	8004e60 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8004e5c:	f000 fe80 	bl	8005b60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004e60:	230f      	movs	r3, #15
 8004e62:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 8004e64:	2303      	movs	r3, #3
 8004e66:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004e6c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004e70:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004e72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004e76:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004e78:	f107 0308 	add.w	r3, r7, #8
 8004e7c:	2105      	movs	r1, #5
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f003 ff9a 	bl	8008db8 <HAL_RCC_ClockConfig>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d001      	beq.n	8004e8e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8004e8a:	f000 fe69 	bl	8005b60 <Error_Handler>
  }
}
 8004e8e:	bf00      	nop
 8004e90:	3750      	adds	r7, #80	@ 0x50
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	40023800 	.word	0x40023800
 8004e9c:	40007000 	.word	0x40007000

08004ea0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004ea6:	463b      	mov	r3, r7
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	601a      	str	r2, [r3, #0]
 8004eac:	605a      	str	r2, [r3, #4]
 8004eae:	609a      	str	r2, [r3, #8]
 8004eb0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8004eb2:	4b21      	ldr	r3, [pc, #132]	@ (8004f38 <MX_ADC1_Init+0x98>)
 8004eb4:	4a21      	ldr	r2, [pc, #132]	@ (8004f3c <MX_ADC1_Init+0x9c>)
 8004eb6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004eb8:	4b1f      	ldr	r3, [pc, #124]	@ (8004f38 <MX_ADC1_Init+0x98>)
 8004eba:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004ebe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004ec0:	4b1d      	ldr	r3, [pc, #116]	@ (8004f38 <MX_ADC1_Init+0x98>)
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8004ec6:	4b1c      	ldr	r3, [pc, #112]	@ (8004f38 <MX_ADC1_Init+0x98>)
 8004ec8:	2200      	movs	r2, #0
 8004eca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004ecc:	4b1a      	ldr	r3, [pc, #104]	@ (8004f38 <MX_ADC1_Init+0x98>)
 8004ece:	2201      	movs	r2, #1
 8004ed0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004ed2:	4b19      	ldr	r3, [pc, #100]	@ (8004f38 <MX_ADC1_Init+0x98>)
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004eda:	4b17      	ldr	r3, [pc, #92]	@ (8004f38 <MX_ADC1_Init+0x98>)
 8004edc:	2200      	movs	r2, #0
 8004ede:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004ee0:	4b15      	ldr	r3, [pc, #84]	@ (8004f38 <MX_ADC1_Init+0x98>)
 8004ee2:	4a17      	ldr	r2, [pc, #92]	@ (8004f40 <MX_ADC1_Init+0xa0>)
 8004ee4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004ee6:	4b14      	ldr	r3, [pc, #80]	@ (8004f38 <MX_ADC1_Init+0x98>)
 8004ee8:	2200      	movs	r2, #0
 8004eea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8004eec:	4b12      	ldr	r3, [pc, #72]	@ (8004f38 <MX_ADC1_Init+0x98>)
 8004eee:	2201      	movs	r2, #1
 8004ef0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004ef2:	4b11      	ldr	r3, [pc, #68]	@ (8004f38 <MX_ADC1_Init+0x98>)
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004efa:	4b0f      	ldr	r3, [pc, #60]	@ (8004f38 <MX_ADC1_Init+0x98>)
 8004efc:	2201      	movs	r2, #1
 8004efe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004f00:	480d      	ldr	r0, [pc, #52]	@ (8004f38 <MX_ADC1_Init+0x98>)
 8004f02:	f001 fb15 	bl	8006530 <HAL_ADC_Init>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d001      	beq.n	8004f10 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8004f0c:	f000 fe28 	bl	8005b60 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8004f10:	230c      	movs	r3, #12
 8004f12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004f14:	2301      	movs	r3, #1
 8004f16:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004f1c:	463b      	mov	r3, r7
 8004f1e:	4619      	mov	r1, r3
 8004f20:	4805      	ldr	r0, [pc, #20]	@ (8004f38 <MX_ADC1_Init+0x98>)
 8004f22:	f001 fd59 	bl	80069d8 <HAL_ADC_ConfigChannel>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d001      	beq.n	8004f30 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8004f2c:	f000 fe18 	bl	8005b60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004f30:	bf00      	nop
 8004f32:	3710      	adds	r7, #16
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	20000260 	.word	0x20000260
 8004f3c:	40012000 	.word	0x40012000
 8004f40:	0f000001 	.word	0x0f000001

08004f44 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004f48:	4b12      	ldr	r3, [pc, #72]	@ (8004f94 <MX_I2C1_Init+0x50>)
 8004f4a:	4a13      	ldr	r2, [pc, #76]	@ (8004f98 <MX_I2C1_Init+0x54>)
 8004f4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8004f4e:	4b11      	ldr	r3, [pc, #68]	@ (8004f94 <MX_I2C1_Init+0x50>)
 8004f50:	4a12      	ldr	r2, [pc, #72]	@ (8004f9c <MX_I2C1_Init+0x58>)
 8004f52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004f54:	4b0f      	ldr	r3, [pc, #60]	@ (8004f94 <MX_I2C1_Init+0x50>)
 8004f56:	2200      	movs	r2, #0
 8004f58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004f5a:	4b0e      	ldr	r3, [pc, #56]	@ (8004f94 <MX_I2C1_Init+0x50>)
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004f60:	4b0c      	ldr	r3, [pc, #48]	@ (8004f94 <MX_I2C1_Init+0x50>)
 8004f62:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004f66:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004f68:	4b0a      	ldr	r3, [pc, #40]	@ (8004f94 <MX_I2C1_Init+0x50>)
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004f6e:	4b09      	ldr	r3, [pc, #36]	@ (8004f94 <MX_I2C1_Init+0x50>)
 8004f70:	2200      	movs	r2, #0
 8004f72:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004f74:	4b07      	ldr	r3, [pc, #28]	@ (8004f94 <MX_I2C1_Init+0x50>)
 8004f76:	2200      	movs	r2, #0
 8004f78:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004f7a:	4b06      	ldr	r3, [pc, #24]	@ (8004f94 <MX_I2C1_Init+0x50>)
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004f80:	4804      	ldr	r0, [pc, #16]	@ (8004f94 <MX_I2C1_Init+0x50>)
 8004f82:	f002 fae5 	bl	8007550 <HAL_I2C_Init>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d001      	beq.n	8004f90 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004f8c:	f000 fde8 	bl	8005b60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004f90:	bf00      	nop
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	200002a8 	.word	0x200002a8
 8004f98:	40005400 	.word	0x40005400
 8004f9c:	00061a80 	.word	0x00061a80

08004fa0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004fa4:	4b17      	ldr	r3, [pc, #92]	@ (8005004 <MX_SPI1_Init+0x64>)
 8004fa6:	4a18      	ldr	r2, [pc, #96]	@ (8005008 <MX_SPI1_Init+0x68>)
 8004fa8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004faa:	4b16      	ldr	r3, [pc, #88]	@ (8005004 <MX_SPI1_Init+0x64>)
 8004fac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004fb0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004fb2:	4b14      	ldr	r3, [pc, #80]	@ (8005004 <MX_SPI1_Init+0x64>)
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004fb8:	4b12      	ldr	r3, [pc, #72]	@ (8005004 <MX_SPI1_Init+0x64>)
 8004fba:	2200      	movs	r2, #0
 8004fbc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004fbe:	4b11      	ldr	r3, [pc, #68]	@ (8005004 <MX_SPI1_Init+0x64>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004fc4:	4b0f      	ldr	r3, [pc, #60]	@ (8005004 <MX_SPI1_Init+0x64>)
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004fca:	4b0e      	ldr	r3, [pc, #56]	@ (8005004 <MX_SPI1_Init+0x64>)
 8004fcc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004fd0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8004fd2:	4b0c      	ldr	r3, [pc, #48]	@ (8005004 <MX_SPI1_Init+0x64>)
 8004fd4:	2220      	movs	r2, #32
 8004fd6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004fd8:	4b0a      	ldr	r3, [pc, #40]	@ (8005004 <MX_SPI1_Init+0x64>)
 8004fda:	2200      	movs	r2, #0
 8004fdc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004fde:	4b09      	ldr	r3, [pc, #36]	@ (8005004 <MX_SPI1_Init+0x64>)
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fe4:	4b07      	ldr	r3, [pc, #28]	@ (8005004 <MX_SPI1_Init+0x64>)
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004fea:	4b06      	ldr	r3, [pc, #24]	@ (8005004 <MX_SPI1_Init+0x64>)
 8004fec:	220a      	movs	r2, #10
 8004fee:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004ff0:	4804      	ldr	r0, [pc, #16]	@ (8005004 <MX_SPI1_Init+0x64>)
 8004ff2:	f004 fcc9 	bl	8009988 <HAL_SPI_Init>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d001      	beq.n	8005000 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004ffc:	f000 fdb0 	bl	8005b60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005000:	bf00      	nop
 8005002:	bd80      	pop	{r7, pc}
 8005004:	200002fc 	.word	0x200002fc
 8005008:	40013000 	.word	0x40013000

0800500c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b086      	sub	sp, #24
 8005010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005012:	f107 0308 	add.w	r3, r7, #8
 8005016:	2200      	movs	r2, #0
 8005018:	601a      	str	r2, [r3, #0]
 800501a:	605a      	str	r2, [r3, #4]
 800501c:	609a      	str	r2, [r3, #8]
 800501e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005020:	463b      	mov	r3, r7
 8005022:	2200      	movs	r2, #0
 8005024:	601a      	str	r2, [r3, #0]
 8005026:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005028:	4b1e      	ldr	r3, [pc, #120]	@ (80050a4 <MX_TIM2_Init+0x98>)
 800502a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800502e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 8005030:	4b1c      	ldr	r3, [pc, #112]	@ (80050a4 <MX_TIM2_Init+0x98>)
 8005032:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8005036:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005038:	4b1a      	ldr	r3, [pc, #104]	@ (80050a4 <MX_TIM2_Init+0x98>)
 800503a:	2200      	movs	r2, #0
 800503c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 12000-1;
 800503e:	4b19      	ldr	r3, [pc, #100]	@ (80050a4 <MX_TIM2_Init+0x98>)
 8005040:	f642 62df 	movw	r2, #11999	@ 0x2edf
 8005044:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005046:	4b17      	ldr	r3, [pc, #92]	@ (80050a4 <MX_TIM2_Init+0x98>)
 8005048:	2200      	movs	r2, #0
 800504a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800504c:	4b15      	ldr	r3, [pc, #84]	@ (80050a4 <MX_TIM2_Init+0x98>)
 800504e:	2200      	movs	r2, #0
 8005050:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005052:	4814      	ldr	r0, [pc, #80]	@ (80050a4 <MX_TIM2_Init+0x98>)
 8005054:	f005 fa40 	bl	800a4d8 <HAL_TIM_Base_Init>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d001      	beq.n	8005062 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800505e:	f000 fd7f 	bl	8005b60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005062:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005066:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005068:	f107 0308 	add.w	r3, r7, #8
 800506c:	4619      	mov	r1, r3
 800506e:	480d      	ldr	r0, [pc, #52]	@ (80050a4 <MX_TIM2_Init+0x98>)
 8005070:	f005 fc91 	bl	800a996 <HAL_TIM_ConfigClockSource>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d001      	beq.n	800507e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800507a:	f000 fd71 	bl	8005b60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800507e:	2300      	movs	r3, #0
 8005080:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005082:	2300      	movs	r3, #0
 8005084:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005086:	463b      	mov	r3, r7
 8005088:	4619      	mov	r1, r3
 800508a:	4806      	ldr	r0, [pc, #24]	@ (80050a4 <MX_TIM2_Init+0x98>)
 800508c:	f005 feac 	bl	800ade8 <HAL_TIMEx_MasterConfigSynchronization>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d001      	beq.n	800509a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8005096:	f000 fd63 	bl	8005b60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800509a:	bf00      	nop
 800509c:	3718      	adds	r7, #24
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	20000354 	.word	0x20000354

080050a8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80050ae:	463b      	mov	r3, r7
 80050b0:	2200      	movs	r2, #0
 80050b2:	601a      	str	r2, [r3, #0]
 80050b4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80050b6:	4b15      	ldr	r3, [pc, #84]	@ (800510c <MX_TIM6_Init+0x64>)
 80050b8:	4a15      	ldr	r2, [pc, #84]	@ (8005110 <MX_TIM6_Init+0x68>)
 80050ba:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 840;
 80050bc:	4b13      	ldr	r3, [pc, #76]	@ (800510c <MX_TIM6_Init+0x64>)
 80050be:	f44f 7252 	mov.w	r2, #840	@ 0x348
 80050c2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80050c4:	4b11      	ldr	r3, [pc, #68]	@ (800510c <MX_TIM6_Init+0x64>)
 80050c6:	2200      	movs	r2, #0
 80050c8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 19999;
 80050ca:	4b10      	ldr	r3, [pc, #64]	@ (800510c <MX_TIM6_Init+0x64>)
 80050cc:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80050d0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80050d2:	4b0e      	ldr	r3, [pc, #56]	@ (800510c <MX_TIM6_Init+0x64>)
 80050d4:	2200      	movs	r2, #0
 80050d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80050d8:	480c      	ldr	r0, [pc, #48]	@ (800510c <MX_TIM6_Init+0x64>)
 80050da:	f005 f9fd 	bl	800a4d8 <HAL_TIM_Base_Init>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d001      	beq.n	80050e8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80050e4:	f000 fd3c 	bl	8005b60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80050e8:	2300      	movs	r3, #0
 80050ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80050ec:	2300      	movs	r3, #0
 80050ee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80050f0:	463b      	mov	r3, r7
 80050f2:	4619      	mov	r1, r3
 80050f4:	4805      	ldr	r0, [pc, #20]	@ (800510c <MX_TIM6_Init+0x64>)
 80050f6:	f005 fe77 	bl	800ade8 <HAL_TIMEx_MasterConfigSynchronization>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d001      	beq.n	8005104 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8005100:	f000 fd2e 	bl	8005b60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8005104:	bf00      	nop
 8005106:	3708      	adds	r7, #8
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}
 800510c:	2000039c 	.word	0x2000039c
 8005110:	40001000 	.word	0x40001000

08005114 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800511a:	463b      	mov	r3, r7
 800511c:	2200      	movs	r2, #0
 800511e:	601a      	str	r2, [r3, #0]
 8005120:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8005122:	4b15      	ldr	r3, [pc, #84]	@ (8005178 <MX_TIM7_Init+0x64>)
 8005124:	4a15      	ldr	r2, [pc, #84]	@ (800517c <MX_TIM7_Init+0x68>)
 8005126:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8400-1;
 8005128:	4b13      	ldr	r3, [pc, #76]	@ (8005178 <MX_TIM7_Init+0x64>)
 800512a:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 800512e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005130:	4b11      	ldr	r3, [pc, #68]	@ (8005178 <MX_TIM7_Init+0x64>)
 8005132:	2200      	movs	r2, #0
 8005134:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 59999;
 8005136:	4b10      	ldr	r3, [pc, #64]	@ (8005178 <MX_TIM7_Init+0x64>)
 8005138:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 800513c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800513e:	4b0e      	ldr	r3, [pc, #56]	@ (8005178 <MX_TIM7_Init+0x64>)
 8005140:	2200      	movs	r2, #0
 8005142:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005144:	480c      	ldr	r0, [pc, #48]	@ (8005178 <MX_TIM7_Init+0x64>)
 8005146:	f005 f9c7 	bl	800a4d8 <HAL_TIM_Base_Init>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d001      	beq.n	8005154 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8005150:	f000 fd06 	bl	8005b60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005154:	2300      	movs	r3, #0
 8005156:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005158:	2300      	movs	r3, #0
 800515a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800515c:	463b      	mov	r3, r7
 800515e:	4619      	mov	r1, r3
 8005160:	4805      	ldr	r0, [pc, #20]	@ (8005178 <MX_TIM7_Init+0x64>)
 8005162:	f005 fe41 	bl	800ade8 <HAL_TIMEx_MasterConfigSynchronization>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d001      	beq.n	8005170 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800516c:	f000 fcf8 	bl	8005b60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005170:	bf00      	nop
 8005172:	3708      	adds	r7, #8
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	200003e4 	.word	0x200003e4
 800517c:	40001400 	.word	0x40001400

08005180 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8005184:	4b0e      	ldr	r3, [pc, #56]	@ (80051c0 <MX_TIM10_Init+0x40>)
 8005186:	4a0f      	ldr	r2, [pc, #60]	@ (80051c4 <MX_TIM10_Init+0x44>)
 8005188:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1680;
 800518a:	4b0d      	ldr	r3, [pc, #52]	@ (80051c0 <MX_TIM10_Init+0x40>)
 800518c:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 8005190:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005192:	4b0b      	ldr	r3, [pc, #44]	@ (80051c0 <MX_TIM10_Init+0x40>)
 8005194:	2200      	movs	r2, #0
 8005196:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 3000-1;
 8005198:	4b09      	ldr	r3, [pc, #36]	@ (80051c0 <MX_TIM10_Init+0x40>)
 800519a:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 800519e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80051a0:	4b07      	ldr	r3, [pc, #28]	@ (80051c0 <MX_TIM10_Init+0x40>)
 80051a2:	2200      	movs	r2, #0
 80051a4:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80051a6:	4b06      	ldr	r3, [pc, #24]	@ (80051c0 <MX_TIM10_Init+0x40>)
 80051a8:	2200      	movs	r2, #0
 80051aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80051ac:	4804      	ldr	r0, [pc, #16]	@ (80051c0 <MX_TIM10_Init+0x40>)
 80051ae:	f005 f993 	bl	800a4d8 <HAL_TIM_Base_Init>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d001      	beq.n	80051bc <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80051b8:	f000 fcd2 	bl	8005b60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80051bc:	bf00      	nop
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	2000042c 	.word	0x2000042c
 80051c4:	40014400 	.word	0x40014400

080051c8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80051cc:	4b0e      	ldr	r3, [pc, #56]	@ (8005208 <MX_TIM11_Init+0x40>)
 80051ce:	4a0f      	ldr	r2, [pc, #60]	@ (800520c <MX_TIM11_Init+0x44>)
 80051d0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 16800;
 80051d2:	4b0d      	ldr	r3, [pc, #52]	@ (8005208 <MX_TIM11_Init+0x40>)
 80051d4:	f244 12a0 	movw	r2, #16800	@ 0x41a0
 80051d8:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80051da:	4b0b      	ldr	r3, [pc, #44]	@ (8005208 <MX_TIM11_Init+0x40>)
 80051dc:	2200      	movs	r2, #0
 80051de:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 12000-1;
 80051e0:	4b09      	ldr	r3, [pc, #36]	@ (8005208 <MX_TIM11_Init+0x40>)
 80051e2:	f642 62df 	movw	r2, #11999	@ 0x2edf
 80051e6:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80051e8:	4b07      	ldr	r3, [pc, #28]	@ (8005208 <MX_TIM11_Init+0x40>)
 80051ea:	2200      	movs	r2, #0
 80051ec:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80051ee:	4b06      	ldr	r3, [pc, #24]	@ (8005208 <MX_TIM11_Init+0x40>)
 80051f0:	2200      	movs	r2, #0
 80051f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80051f4:	4804      	ldr	r0, [pc, #16]	@ (8005208 <MX_TIM11_Init+0x40>)
 80051f6:	f005 f96f 	bl	800a4d8 <HAL_TIM_Base_Init>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d001      	beq.n	8005204 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8005200:	f000 fcae 	bl	8005b60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8005204:	bf00      	nop
 8005206:	bd80      	pop	{r7, pc}
 8005208:	20000474 	.word	0x20000474
 800520c:	40014800 	.word	0x40014800

08005210 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8005214:	4b11      	ldr	r3, [pc, #68]	@ (800525c <MX_UART4_Init+0x4c>)
 8005216:	4a12      	ldr	r2, [pc, #72]	@ (8005260 <MX_UART4_Init+0x50>)
 8005218:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800521a:	4b10      	ldr	r3, [pc, #64]	@ (800525c <MX_UART4_Init+0x4c>)
 800521c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005220:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8005222:	4b0e      	ldr	r3, [pc, #56]	@ (800525c <MX_UART4_Init+0x4c>)
 8005224:	2200      	movs	r2, #0
 8005226:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8005228:	4b0c      	ldr	r3, [pc, #48]	@ (800525c <MX_UART4_Init+0x4c>)
 800522a:	2200      	movs	r2, #0
 800522c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800522e:	4b0b      	ldr	r3, [pc, #44]	@ (800525c <MX_UART4_Init+0x4c>)
 8005230:	2200      	movs	r2, #0
 8005232:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8005234:	4b09      	ldr	r3, [pc, #36]	@ (800525c <MX_UART4_Init+0x4c>)
 8005236:	220c      	movs	r2, #12
 8005238:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800523a:	4b08      	ldr	r3, [pc, #32]	@ (800525c <MX_UART4_Init+0x4c>)
 800523c:	2200      	movs	r2, #0
 800523e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8005240:	4b06      	ldr	r3, [pc, #24]	@ (800525c <MX_UART4_Init+0x4c>)
 8005242:	2200      	movs	r2, #0
 8005244:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8005246:	4805      	ldr	r0, [pc, #20]	@ (800525c <MX_UART4_Init+0x4c>)
 8005248:	f005 fe5e 	bl	800af08 <HAL_UART_Init>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d001      	beq.n	8005256 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8005252:	f000 fc85 	bl	8005b60 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8005256:	bf00      	nop
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	200004bc 	.word	0x200004bc
 8005260:	40004c00 	.word	0x40004c00

08005264 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005268:	4b11      	ldr	r3, [pc, #68]	@ (80052b0 <MX_USART2_UART_Init+0x4c>)
 800526a:	4a12      	ldr	r2, [pc, #72]	@ (80052b4 <MX_USART2_UART_Init+0x50>)
 800526c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800526e:	4b10      	ldr	r3, [pc, #64]	@ (80052b0 <MX_USART2_UART_Init+0x4c>)
 8005270:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8005274:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005276:	4b0e      	ldr	r3, [pc, #56]	@ (80052b0 <MX_USART2_UART_Init+0x4c>)
 8005278:	2200      	movs	r2, #0
 800527a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800527c:	4b0c      	ldr	r3, [pc, #48]	@ (80052b0 <MX_USART2_UART_Init+0x4c>)
 800527e:	2200      	movs	r2, #0
 8005280:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005282:	4b0b      	ldr	r3, [pc, #44]	@ (80052b0 <MX_USART2_UART_Init+0x4c>)
 8005284:	2200      	movs	r2, #0
 8005286:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005288:	4b09      	ldr	r3, [pc, #36]	@ (80052b0 <MX_USART2_UART_Init+0x4c>)
 800528a:	220c      	movs	r2, #12
 800528c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800528e:	4b08      	ldr	r3, [pc, #32]	@ (80052b0 <MX_USART2_UART_Init+0x4c>)
 8005290:	2200      	movs	r2, #0
 8005292:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005294:	4b06      	ldr	r3, [pc, #24]	@ (80052b0 <MX_USART2_UART_Init+0x4c>)
 8005296:	2200      	movs	r2, #0
 8005298:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800529a:	4805      	ldr	r0, [pc, #20]	@ (80052b0 <MX_USART2_UART_Init+0x4c>)
 800529c:	f005 fe34 	bl	800af08 <HAL_UART_Init>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d001      	beq.n	80052aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80052a6:	f000 fc5b 	bl	8005b60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80052aa:	bf00      	nop
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	20000500 	.word	0x20000500
 80052b4:	40004400 	.word	0x40004400

080052b8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80052bc:	4b11      	ldr	r3, [pc, #68]	@ (8005304 <MX_USART3_UART_Init+0x4c>)
 80052be:	4a12      	ldr	r2, [pc, #72]	@ (8005308 <MX_USART3_UART_Init+0x50>)
 80052c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80052c2:	4b10      	ldr	r3, [pc, #64]	@ (8005304 <MX_USART3_UART_Init+0x4c>)
 80052c4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80052c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80052ca:	4b0e      	ldr	r3, [pc, #56]	@ (8005304 <MX_USART3_UART_Init+0x4c>)
 80052cc:	2200      	movs	r2, #0
 80052ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80052d0:	4b0c      	ldr	r3, [pc, #48]	@ (8005304 <MX_USART3_UART_Init+0x4c>)
 80052d2:	2200      	movs	r2, #0
 80052d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80052d6:	4b0b      	ldr	r3, [pc, #44]	@ (8005304 <MX_USART3_UART_Init+0x4c>)
 80052d8:	2200      	movs	r2, #0
 80052da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80052dc:	4b09      	ldr	r3, [pc, #36]	@ (8005304 <MX_USART3_UART_Init+0x4c>)
 80052de:	220c      	movs	r2, #12
 80052e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80052e2:	4b08      	ldr	r3, [pc, #32]	@ (8005304 <MX_USART3_UART_Init+0x4c>)
 80052e4:	2200      	movs	r2, #0
 80052e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80052e8:	4b06      	ldr	r3, [pc, #24]	@ (8005304 <MX_USART3_UART_Init+0x4c>)
 80052ea:	2200      	movs	r2, #0
 80052ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80052ee:	4805      	ldr	r0, [pc, #20]	@ (8005304 <MX_USART3_UART_Init+0x4c>)
 80052f0:	f005 fe0a 	bl	800af08 <HAL_UART_Init>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d001      	beq.n	80052fe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80052fa:	f000 fc31 	bl	8005b60 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80052fe:	bf00      	nop
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	20000544 	.word	0x20000544
 8005308:	40004800 	.word	0x40004800

0800530c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8005310:	4b11      	ldr	r3, [pc, #68]	@ (8005358 <MX_USART6_UART_Init+0x4c>)
 8005312:	4a12      	ldr	r2, [pc, #72]	@ (800535c <MX_USART6_UART_Init+0x50>)
 8005314:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 19200;
 8005316:	4b10      	ldr	r3, [pc, #64]	@ (8005358 <MX_USART6_UART_Init+0x4c>)
 8005318:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 800531c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800531e:	4b0e      	ldr	r3, [pc, #56]	@ (8005358 <MX_USART6_UART_Init+0x4c>)
 8005320:	2200      	movs	r2, #0
 8005322:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8005324:	4b0c      	ldr	r3, [pc, #48]	@ (8005358 <MX_USART6_UART_Init+0x4c>)
 8005326:	2200      	movs	r2, #0
 8005328:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800532a:	4b0b      	ldr	r3, [pc, #44]	@ (8005358 <MX_USART6_UART_Init+0x4c>)
 800532c:	2200      	movs	r2, #0
 800532e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8005330:	4b09      	ldr	r3, [pc, #36]	@ (8005358 <MX_USART6_UART_Init+0x4c>)
 8005332:	220c      	movs	r2, #12
 8005334:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005336:	4b08      	ldr	r3, [pc, #32]	@ (8005358 <MX_USART6_UART_Init+0x4c>)
 8005338:	2200      	movs	r2, #0
 800533a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800533c:	4b06      	ldr	r3, [pc, #24]	@ (8005358 <MX_USART6_UART_Init+0x4c>)
 800533e:	2200      	movs	r2, #0
 8005340:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8005342:	4805      	ldr	r0, [pc, #20]	@ (8005358 <MX_USART6_UART_Init+0x4c>)
 8005344:	f005 fde0 	bl	800af08 <HAL_UART_Init>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d001      	beq.n	8005352 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800534e:	f000 fc07 	bl	8005b60 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8005352:	bf00      	nop
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	20000588 	.word	0x20000588
 800535c:	40011400 	.word	0x40011400

08005360 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b08a      	sub	sp, #40	@ 0x28
 8005364:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005366:	f107 0314 	add.w	r3, r7, #20
 800536a:	2200      	movs	r2, #0
 800536c:	601a      	str	r2, [r3, #0]
 800536e:	605a      	str	r2, [r3, #4]
 8005370:	609a      	str	r2, [r3, #8]
 8005372:	60da      	str	r2, [r3, #12]
 8005374:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005376:	2300      	movs	r3, #0
 8005378:	613b      	str	r3, [r7, #16]
 800537a:	4b4c      	ldr	r3, [pc, #304]	@ (80054ac <MX_GPIO_Init+0x14c>)
 800537c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800537e:	4a4b      	ldr	r2, [pc, #300]	@ (80054ac <MX_GPIO_Init+0x14c>)
 8005380:	f043 0304 	orr.w	r3, r3, #4
 8005384:	6313      	str	r3, [r2, #48]	@ 0x30
 8005386:	4b49      	ldr	r3, [pc, #292]	@ (80054ac <MX_GPIO_Init+0x14c>)
 8005388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800538a:	f003 0304 	and.w	r3, r3, #4
 800538e:	613b      	str	r3, [r7, #16]
 8005390:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005392:	2300      	movs	r3, #0
 8005394:	60fb      	str	r3, [r7, #12]
 8005396:	4b45      	ldr	r3, [pc, #276]	@ (80054ac <MX_GPIO_Init+0x14c>)
 8005398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800539a:	4a44      	ldr	r2, [pc, #272]	@ (80054ac <MX_GPIO_Init+0x14c>)
 800539c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80053a2:	4b42      	ldr	r3, [pc, #264]	@ (80054ac <MX_GPIO_Init+0x14c>)
 80053a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053aa:	60fb      	str	r3, [r7, #12]
 80053ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80053ae:	2300      	movs	r3, #0
 80053b0:	60bb      	str	r3, [r7, #8]
 80053b2:	4b3e      	ldr	r3, [pc, #248]	@ (80054ac <MX_GPIO_Init+0x14c>)
 80053b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053b6:	4a3d      	ldr	r2, [pc, #244]	@ (80054ac <MX_GPIO_Init+0x14c>)
 80053b8:	f043 0301 	orr.w	r3, r3, #1
 80053bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80053be:	4b3b      	ldr	r3, [pc, #236]	@ (80054ac <MX_GPIO_Init+0x14c>)
 80053c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053c2:	f003 0301 	and.w	r3, r3, #1
 80053c6:	60bb      	str	r3, [r7, #8]
 80053c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80053ca:	2300      	movs	r3, #0
 80053cc:	607b      	str	r3, [r7, #4]
 80053ce:	4b37      	ldr	r3, [pc, #220]	@ (80054ac <MX_GPIO_Init+0x14c>)
 80053d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053d2:	4a36      	ldr	r2, [pc, #216]	@ (80054ac <MX_GPIO_Init+0x14c>)
 80053d4:	f043 0302 	orr.w	r3, r3, #2
 80053d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80053da:	4b34      	ldr	r3, [pc, #208]	@ (80054ac <MX_GPIO_Init+0x14c>)
 80053dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053de:	f003 0302 	and.w	r3, r3, #2
 80053e2:	607b      	str	r3, [r7, #4]
 80053e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|CS_Pin|Buzzer_Pin|GATE_D_Pin
 80053e6:	2200      	movs	r2, #0
 80053e8:	f644 4112 	movw	r1, #19474	@ 0x4c12
 80053ec:	4830      	ldr	r0, [pc, #192]	@ (80054b0 <MX_GPIO_Init+0x150>)
 80053ee:	f002 f87b 	bl	80074e8 <HAL_GPIO_WritePin>
                          |GATE_C_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M0_Pin|M1_Pin|FN_Pin|LED2_Pin
 80053f2:	2200      	movs	r2, #0
 80053f4:	f246 011f 	movw	r1, #24607	@ 0x601f
 80053f8:	482e      	ldr	r0, [pc, #184]	@ (80054b4 <MX_GPIO_Init+0x154>)
 80053fa:	f002 f875 	bl	80074e8 <HAL_GPIO_WritePin>
                          |LED1_Pin|GATE_B_Pin|GATE_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80053fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005402:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005404:	2300      	movs	r3, #0
 8005406:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005408:	2302      	movs	r3, #2
 800540a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800540c:	f107 0314 	add.w	r3, r7, #20
 8005410:	4619      	mov	r1, r3
 8005412:	4827      	ldr	r0, [pc, #156]	@ (80054b0 <MX_GPIO_Init+0x150>)
 8005414:	f001 febc 	bl	8007190 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 CS_Pin Buzzer_Pin GATE_D_Pin
                           GATE_C_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|CS_Pin|Buzzer_Pin|GATE_D_Pin
 8005418:	f644 4312 	movw	r3, #19474	@ 0x4c12
 800541c:	617b      	str	r3, [r7, #20]
                          |GATE_C_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800541e:	2301      	movs	r3, #1
 8005420:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005422:	2300      	movs	r3, #0
 8005424:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005426:	2300      	movs	r3, #0
 8005428:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800542a:	f107 0314 	add.w	r3, r7, #20
 800542e:	4619      	mov	r1, r3
 8005430:	481f      	ldr	r0, [pc, #124]	@ (80054b0 <MX_GPIO_Init+0x150>)
 8005432:	f001 fead 	bl	8007190 <HAL_GPIO_Init>

  /*Configure GPIO pins : M0_Pin M1_Pin FN_Pin LED2_Pin
                           LED1_Pin GATE_B_Pin GATE_A_Pin */
  GPIO_InitStruct.Pin = M0_Pin|M1_Pin|FN_Pin|LED2_Pin
 8005436:	f246 031f 	movw	r3, #24607	@ 0x601f
 800543a:	617b      	str	r3, [r7, #20]
                          |LED1_Pin|GATE_B_Pin|GATE_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800543c:	2301      	movs	r3, #1
 800543e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005440:	2300      	movs	r3, #0
 8005442:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005444:	2300      	movs	r3, #0
 8005446:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005448:	f107 0314 	add.w	r3, r7, #20
 800544c:	4619      	mov	r1, r3
 800544e:	4819      	ldr	r0, [pc, #100]	@ (80054b4 <MX_GPIO_Init+0x154>)
 8005450:	f001 fe9e 	bl	8007190 <HAL_GPIO_Init>

  /*Configure GPIO pin : SECINP_Pin */
  GPIO_InitStruct.Pin = SECINP_Pin;
 8005454:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005458:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800545a:	2300      	movs	r3, #0
 800545c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800545e:	2301      	movs	r3, #1
 8005460:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SECINP_GPIO_Port, &GPIO_InitStruct);
 8005462:	f107 0314 	add.w	r3, r7, #20
 8005466:	4619      	mov	r1, r3
 8005468:	4812      	ldr	r0, [pc, #72]	@ (80054b4 <MX_GPIO_Init+0x154>)
 800546a:	f001 fe91 	bl	8007190 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800546e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005472:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005474:	2300      	movs	r3, #0
 8005476:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005478:	2301      	movs	r3, #1
 800547a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800547c:	f107 0314 	add.w	r3, r7, #20
 8005480:	4619      	mov	r1, r3
 8005482:	480b      	ldr	r0, [pc, #44]	@ (80054b0 <MX_GPIO_Init+0x150>)
 8005484:	f001 fe84 	bl	8007190 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|INT2_Pin;
 8005488:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800548c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800548e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8005492:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005494:	2300      	movs	r3, #0
 8005496:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005498:	f107 0314 	add.w	r3, r7, #20
 800549c:	4619      	mov	r1, r3
 800549e:	4805      	ldr	r0, [pc, #20]	@ (80054b4 <MX_GPIO_Init+0x154>)
 80054a0:	f001 fe76 	bl	8007190 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80054a4:	bf00      	nop
 80054a6:	3728      	adds	r7, #40	@ 0x28
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	40023800 	.word	0x40023800
 80054b0:	40020800 	.word	0x40020800
 80054b4:	40020400 	.word	0x40020400

080054b8 <E220_CONFIG>:
		}


}
void E220_CONFIG(uint8_t ADDH, uint8_t ADDL, uint8_t CHN, uint8_t MODE)
{
 80054b8:	b590      	push	{r4, r7, lr}
 80054ba:	b087      	sub	sp, #28
 80054bc:	af00      	add	r7, sp, #0
 80054be:	4604      	mov	r4, r0
 80054c0:	4608      	mov	r0, r1
 80054c2:	4611      	mov	r1, r2
 80054c4:	461a      	mov	r2, r3
 80054c6:	4623      	mov	r3, r4
 80054c8:	71fb      	strb	r3, [r7, #7]
 80054ca:	4603      	mov	r3, r0
 80054cc:	71bb      	strb	r3, [r7, #6]
 80054ce:	460b      	mov	r3, r1
 80054d0:	717b      	strb	r3, [r7, #5]
 80054d2:	4613      	mov	r3, r2
 80054d4:	713b      	strb	r3, [r7, #4]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, SET);
 80054d6:	2201      	movs	r2, #1
 80054d8:	2104      	movs	r1, #4
 80054da:	4824      	ldr	r0, [pc, #144]	@ (800556c <E220_CONFIG+0xb4>)
 80054dc:	f002 f804 	bl	80074e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET);
 80054e0:	2201      	movs	r2, #1
 80054e2:	2102      	movs	r1, #2
 80054e4:	4821      	ldr	r0, [pc, #132]	@ (800556c <E220_CONFIG+0xb4>)
 80054e6:	f001 ffff 	bl	80074e8 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 80054ea:	2032      	movs	r0, #50	@ 0x32
 80054ec:	f000 fffc 	bl	80064e8 <HAL_Delay>

    char cfg_buff[8] = {0}; // E220 için 8 elemanlı bir dizi kullanıyoruz
 80054f0:	2300      	movs	r3, #0
 80054f2:	60fb      	str	r3, [r7, #12]
 80054f4:	2300      	movs	r3, #0
 80054f6:	613b      	str	r3, [r7, #16]
    enum {Transparent, Fixed} mode;
    mode = MODE;
 80054f8:	793b      	ldrb	r3, [r7, #4]
 80054fa:	75fb      	strb	r3, [r7, #23]

    cfg_buff[0] = ADDH;
 80054fc:	79fb      	ldrb	r3, [r7, #7]
 80054fe:	733b      	strb	r3, [r7, #12]
    cfg_buff[1] = ADDL;
 8005500:	79bb      	ldrb	r3, [r7, #6]
 8005502:	737b      	strb	r3, [r7, #13]
    cfg_buff[2] = 0x62;  // 62 2.4kbps 63 4.8 kpbs
 8005504:	2362      	movs	r3, #98	@ 0x62
 8005506:	73bb      	strb	r3, [r7, #14]
    cfg_buff[3] = 0x00;
 8005508:	2300      	movs	r3, #0
 800550a:	73fb      	strb	r3, [r7, #15]
    cfg_buff[4] = CHN;
 800550c:	797b      	ldrb	r3, [r7, #5]
 800550e:	743b      	strb	r3, [r7, #16]

    switch(mode){
 8005510:	7dfb      	ldrb	r3, [r7, #23]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d002      	beq.n	800551c <E220_CONFIG+0x64>
 8005516:	2b01      	cmp	r3, #1
 8005518:	d003      	beq.n	8005522 <E220_CONFIG+0x6a>
 800551a:	e005      	b.n	8005528 <E220_CONFIG+0x70>
        case Transparent:
            cfg_buff[5] = 0x00;  // opsiyon
 800551c:	2300      	movs	r3, #0
 800551e:	747b      	strb	r3, [r7, #17]
            break;
 8005520:	e004      	b.n	800552c <E220_CONFIG+0x74>
        case Fixed:
            cfg_buff[5] = 0x11;
 8005522:	2311      	movs	r3, #17
 8005524:	747b      	strb	r3, [r7, #17]
            break;
 8005526:	e001      	b.n	800552c <E220_CONFIG+0x74>
        default:
            cfg_buff[5] = 0x11;
 8005528:	2311      	movs	r3, #17
 800552a:	747b      	strb	r3, [r7, #17]
     }

     cfg_buff[6] = 0x00;
 800552c:	2300      	movs	r3, #0
 800552e:	74bb      	strb	r3, [r7, #18]
     cfg_buff[7] = 0x00;
 8005530:	2300      	movs	r3, #0
 8005532:	74fb      	strb	r3, [r7, #19]


    HAL_UART_Transmit(&huart3, (uint8_t*) cfg_buff, 8, 1000);
 8005534:	f107 010c 	add.w	r1, r7, #12
 8005538:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800553c:	2208      	movs	r2, #8
 800553e:	480c      	ldr	r0, [pc, #48]	@ (8005570 <E220_CONFIG+0xb8>)
 8005540:	f005 fd2f 	bl	800afa2 <HAL_UART_Transmit>

    HAL_Delay(25);
 8005544:	2019      	movs	r0, #25
 8005546:	f000 ffcf 	bl	80064e8 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET);
 800554a:	2200      	movs	r2, #0
 800554c:	2104      	movs	r1, #4
 800554e:	4807      	ldr	r0, [pc, #28]	@ (800556c <E220_CONFIG+0xb4>)
 8005550:	f001 ffca 	bl	80074e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 8005554:	2200      	movs	r2, #0
 8005556:	2102      	movs	r1, #2
 8005558:	4804      	ldr	r0, [pc, #16]	@ (800556c <E220_CONFIG+0xb4>)
 800555a:	f001 ffc5 	bl	80074e8 <HAL_GPIO_WritePin>
    HAL_Delay(25);
 800555e:	2019      	movs	r0, #25
 8005560:	f000 ffc2 	bl	80064e8 <HAL_Delay>
}
 8005564:	bf00      	nop
 8005566:	371c      	adds	r7, #28
 8005568:	46bd      	mov	sp, r7
 800556a:	bd90      	pop	{r4, r7, pc}
 800556c:	40020400 	.word	0x40020400
 8005570:	20000544 	.word	0x20000544
 8005574:	00000000 	.word	0x00000000

08005578 <BME280_Get_Altitude>:

float BME280_Get_Altitude(void)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
	float press = comp_data.pressure / 10000.0;
 800557e:	4b36      	ldr	r3, [pc, #216]	@ (8005658 <BME280_Get_Altitude+0xe0>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4618      	mov	r0, r3
 8005584:	f7fa ffd6 	bl	8000534 <__aeabi_ui2d>
 8005588:	a32b      	add	r3, pc, #172	@ (adr r3, 8005638 <BME280_Get_Altitude+0xc0>)
 800558a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800558e:	f7fb f975 	bl	800087c <__aeabi_ddiv>
 8005592:	4602      	mov	r2, r0
 8005594:	460b      	mov	r3, r1
 8005596:	4610      	mov	r0, r2
 8005598:	4619      	mov	r1, r3
 800559a:	f7fb fb3d 	bl	8000c18 <__aeabi_d2f>
 800559e:	4603      	mov	r3, r0
 80055a0:	607b      	str	r3, [r7, #4]
	float temp = comp_data.temperature / 100.0;
 80055a2:	4b2d      	ldr	r3, [pc, #180]	@ (8005658 <BME280_Get_Altitude+0xe0>)
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7fa ffd4 	bl	8000554 <__aeabi_i2d>
 80055ac:	f04f 0200 	mov.w	r2, #0
 80055b0:	4b2a      	ldr	r3, [pc, #168]	@ (800565c <BME280_Get_Altitude+0xe4>)
 80055b2:	f7fb f963 	bl	800087c <__aeabi_ddiv>
 80055b6:	4602      	mov	r2, r0
 80055b8:	460b      	mov	r3, r1
 80055ba:	4610      	mov	r0, r2
 80055bc:	4619      	mov	r1, r3
 80055be:	f7fb fb2b 	bl	8000c18 <__aeabi_d2f>
 80055c2:	4603      	mov	r3, r0
 80055c4:	603b      	str	r3, [r7, #0]
	alt = 44330 * (1 - pow((press / 1013.25),(1/5.255)));
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f7fa ffd6 	bl	8000578 <__aeabi_f2d>
 80055cc:	a31c      	add	r3, pc, #112	@ (adr r3, 8005640 <BME280_Get_Altitude+0xc8>)
 80055ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d2:	f7fb f953 	bl	800087c <__aeabi_ddiv>
 80055d6:	4602      	mov	r2, r0
 80055d8:	460b      	mov	r3, r1
 80055da:	ec43 2b17 	vmov	d7, r2, r3
 80055de:	ed9f 1b1a 	vldr	d1, [pc, #104]	@ 8005648 <BME280_Get_Altitude+0xd0>
 80055e2:	eeb0 0a47 	vmov.f32	s0, s14
 80055e6:	eef0 0a67 	vmov.f32	s1, s15
 80055ea:	f009 fc11 	bl	800ee10 <pow>
 80055ee:	ec53 2b10 	vmov	r2, r3, d0
 80055f2:	f04f 0000 	mov.w	r0, #0
 80055f6:	491a      	ldr	r1, [pc, #104]	@ (8005660 <BME280_Get_Altitude+0xe8>)
 80055f8:	f7fa fe5e 	bl	80002b8 <__aeabi_dsub>
 80055fc:	4602      	mov	r2, r0
 80055fe:	460b      	mov	r3, r1
 8005600:	4610      	mov	r0, r2
 8005602:	4619      	mov	r1, r3
 8005604:	a312      	add	r3, pc, #72	@ (adr r3, 8005650 <BME280_Get_Altitude+0xd8>)
 8005606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800560a:	f7fb f80d 	bl	8000628 <__aeabi_dmul>
 800560e:	4602      	mov	r2, r0
 8005610:	460b      	mov	r3, r1
 8005612:	4610      	mov	r0, r2
 8005614:	4619      	mov	r1, r3
 8005616:	f7fb faff 	bl	8000c18 <__aeabi_d2f>
 800561a:	4603      	mov	r3, r0
 800561c:	4a11      	ldr	r2, [pc, #68]	@ (8005664 <BME280_Get_Altitude+0xec>)
 800561e:	6013      	str	r3, [r2, #0]
	//alt = ((pow((P0/press), (1/5.257))-1) * (temp + 273.15)) / 0.0065;

	return (alt);
 8005620:	4b10      	ldr	r3, [pc, #64]	@ (8005664 <BME280_Get_Altitude+0xec>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	ee07 3a90 	vmov	s15, r3
}
 8005628:	eeb0 0a67 	vmov.f32	s0, s15
 800562c:	3708      	adds	r7, #8
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	f3af 8000 	nop.w
 8005638:	00000000 	.word	0x00000000
 800563c:	40c38800 	.word	0x40c38800
 8005640:	00000000 	.word	0x00000000
 8005644:	408faa00 	.word	0x408faa00
 8005648:	ccd9456c 	.word	0xccd9456c
 800564c:	3fc85b95 	.word	0x3fc85b95
 8005650:	00000000 	.word	0x00000000
 8005654:	40e5a540 	.word	0x40e5a540
 8005658:	20002674 	.word	0x20002674
 800565c:	40590000 	.word	0x40590000
 8005660:	3ff00000 	.word	0x3ff00000
 8005664:	200023f8 	.word	0x200023f8

08005668 <user_i2c_read>:
int8_t user_i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af02      	add	r7, sp, #8
 800566e:	603a      	str	r2, [r7, #0]
 8005670:	461a      	mov	r2, r3
 8005672:	4603      	mov	r3, r0
 8005674:	71fb      	strb	r3, [r7, #7]
 8005676:	460b      	mov	r3, r1
 8005678:	71bb      	strb	r3, [r7, #6]
 800567a:	4613      	mov	r3, r2
 800567c:	80bb      	strh	r3, [r7, #4]
  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 800567e:	79fb      	ldrb	r3, [r7, #7]
 8005680:	b29b      	uxth	r3, r3
 8005682:	005b      	lsls	r3, r3, #1
 8005684:	b299      	uxth	r1, r3
 8005686:	1dba      	adds	r2, r7, #6
 8005688:	230a      	movs	r3, #10
 800568a:	9300      	str	r3, [sp, #0]
 800568c:	2301      	movs	r3, #1
 800568e:	4811      	ldr	r0, [pc, #68]	@ (80056d4 <user_i2c_read+0x6c>)
 8005690:	f002 f8a2 	bl	80077d8 <HAL_I2C_Master_Transmit>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d002      	beq.n	80056a0 <user_i2c_read+0x38>
 800569a:	f04f 33ff 	mov.w	r3, #4294967295
 800569e:	e014      	b.n	80056ca <user_i2c_read+0x62>
  if(HAL_I2C_Master_Receive(&hi2c1, (id << 1) | 0x01, data, len, 10) != HAL_OK) return -1;
 80056a0:	79fb      	ldrb	r3, [r7, #7]
 80056a2:	005b      	lsls	r3, r3, #1
 80056a4:	b21b      	sxth	r3, r3
 80056a6:	f043 0301 	orr.w	r3, r3, #1
 80056aa:	b21b      	sxth	r3, r3
 80056ac:	b299      	uxth	r1, r3
 80056ae:	88bb      	ldrh	r3, [r7, #4]
 80056b0:	220a      	movs	r2, #10
 80056b2:	9200      	str	r2, [sp, #0]
 80056b4:	683a      	ldr	r2, [r7, #0]
 80056b6:	4807      	ldr	r0, [pc, #28]	@ (80056d4 <user_i2c_read+0x6c>)
 80056b8:	f002 f98c 	bl	80079d4 <HAL_I2C_Master_Receive>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d002      	beq.n	80056c8 <user_i2c_read+0x60>
 80056c2:	f04f 33ff 	mov.w	r3, #4294967295
 80056c6:	e000      	b.n	80056ca <user_i2c_read+0x62>

  return 0;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3708      	adds	r7, #8
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	200002a8 	.word	0x200002a8

080056d8 <user_delay_ms>:

void user_delay_ms(uint32_t period)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  HAL_Delay(period);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 ff01 	bl	80064e8 <HAL_Delay>
}
 80056e6:	bf00      	nop
 80056e8:	3708      	adds	r7, #8
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
	...

080056f0 <user_i2c_write>:
int8_t user_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b086      	sub	sp, #24
 80056f4:	af02      	add	r7, sp, #8
 80056f6:	603a      	str	r2, [r7, #0]
 80056f8:	461a      	mov	r2, r3
 80056fa:	4603      	mov	r3, r0
 80056fc:	71fb      	strb	r3, [r7, #7]
 80056fe:	460b      	mov	r3, r1
 8005700:	71bb      	strb	r3, [r7, #6]
 8005702:	4613      	mov	r3, r2
 8005704:	80bb      	strh	r3, [r7, #4]
  int8_t *buf;
  buf = malloc(len +1);
 8005706:	88bb      	ldrh	r3, [r7, #4]
 8005708:	3301      	adds	r3, #1
 800570a:	4618      	mov	r0, r3
 800570c:	f006 fd7e 	bl	800c20c <malloc>
 8005710:	4603      	mov	r3, r0
 8005712:	60fb      	str	r3, [r7, #12]
  buf[0] = reg_addr;
 8005714:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	701a      	strb	r2, [r3, #0]
  memcpy(buf +1, data, len);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	3301      	adds	r3, #1
 8005720:	88ba      	ldrh	r2, [r7, #4]
 8005722:	6839      	ldr	r1, [r7, #0]
 8005724:	4618      	mov	r0, r3
 8005726:	f007 fde2 	bl	800d2ee <memcpy>

  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 800572a:	79fb      	ldrb	r3, [r7, #7]
 800572c:	b29b      	uxth	r3, r3
 800572e:	005b      	lsls	r3, r3, #1
 8005730:	b299      	uxth	r1, r3
 8005732:	88bb      	ldrh	r3, [r7, #4]
 8005734:	3301      	adds	r3, #1
 8005736:	b29b      	uxth	r3, r3
 8005738:	f04f 32ff 	mov.w	r2, #4294967295
 800573c:	9200      	str	r2, [sp, #0]
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	4808      	ldr	r0, [pc, #32]	@ (8005764 <user_i2c_write+0x74>)
 8005742:	f002 f849 	bl	80077d8 <HAL_I2C_Master_Transmit>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d002      	beq.n	8005752 <user_i2c_write+0x62>
 800574c:	f04f 33ff 	mov.w	r3, #4294967295
 8005750:	e003      	b.n	800575a <user_i2c_write+0x6a>

  free(buf);
 8005752:	68f8      	ldr	r0, [r7, #12]
 8005754:	f006 fd62 	bl	800c21c <free>
  return 0;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	200002a8 	.word	0x200002a8

08005768 <union_converter>:

void union_converter(void)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b08e      	sub	sp, #56	@ 0x38
 800576c:	af00      	add	r7, sp, #0
	 float2unit8 f2u8_gpsalt;
    f2u8_gpsalt.fVal=gps.altitude;
 800576e:	4ba0      	ldr	r3, [pc, #640]	@ (80059f0 <union_converter+0x288>)
 8005770:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005774:	4610      	mov	r0, r2
 8005776:	4619      	mov	r1, r3
 8005778:	f7fb fa4e 	bl	8000c18 <__aeabi_d2f>
 800577c:	4603      	mov	r3, r0
 800577e:	62bb      	str	r3, [r7, #40]	@ 0x28
		 for(uint8_t i=0;i<4;i++)
 8005780:	2300      	movs	r3, #0
 8005782:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8005786:	e00f      	b.n	80057a8 <union_converter+0x40>
		 {
			loratx[i+5]=f2u8_gpsalt.array[i];
 8005788:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800578c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005790:	3305      	adds	r3, #5
 8005792:	3238      	adds	r2, #56	@ 0x38
 8005794:	443a      	add	r2, r7
 8005796:	f812 1c10 	ldrb.w	r1, [r2, #-16]
 800579a:	4a96      	ldr	r2, [pc, #600]	@ (80059f4 <union_converter+0x28c>)
 800579c:	54d1      	strb	r1, [r2, r3]
		 for(uint8_t i=0;i<4;i++)
 800579e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80057a2:	3301      	adds	r3, #1
 80057a4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80057a8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80057ac:	2b03      	cmp	r3, #3
 80057ae:	d9eb      	bls.n	8005788 <union_converter+0x20>
		 }

	 float2unit8 f2u8_latitude;
	 f2u8_latitude.fVal=gps.latitude;
 80057b0:	4b8f      	ldr	r3, [pc, #572]	@ (80059f0 <union_converter+0x288>)
 80057b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b6:	4610      	mov	r0, r2
 80057b8:	4619      	mov	r1, r3
 80057ba:	f7fb fa2d 	bl	8000c18 <__aeabi_d2f>
 80057be:	4603      	mov	r3, r0
 80057c0:	627b      	str	r3, [r7, #36]	@ 0x24
		 for(uint8_t i=0;i<4;i++)
 80057c2:	2300      	movs	r3, #0
 80057c4:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 80057c8:	e00f      	b.n	80057ea <union_converter+0x82>
		 {
			loratx[i+9]=f2u8_latitude.array[i];
 80057ca:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 80057ce:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80057d2:	3309      	adds	r3, #9
 80057d4:	3238      	adds	r2, #56	@ 0x38
 80057d6:	443a      	add	r2, r7
 80057d8:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 80057dc:	4a85      	ldr	r2, [pc, #532]	@ (80059f4 <union_converter+0x28c>)
 80057de:	54d1      	strb	r1, [r2, r3]
		 for(uint8_t i=0;i<4;i++)
 80057e0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80057e4:	3301      	adds	r3, #1
 80057e6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 80057ea:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80057ee:	2b03      	cmp	r3, #3
 80057f0:	d9eb      	bls.n	80057ca <union_converter+0x62>
		 }

	 float2unit8 f2u8_longitude;
	 f2u8_longitude.fVal=gps.longitude;
 80057f2:	4b7f      	ldr	r3, [pc, #508]	@ (80059f0 <union_converter+0x288>)
 80057f4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80057f8:	4610      	mov	r0, r2
 80057fa:	4619      	mov	r1, r3
 80057fc:	f7fb fa0c 	bl	8000c18 <__aeabi_d2f>
 8005800:	4603      	mov	r3, r0
 8005802:	623b      	str	r3, [r7, #32]
		 for(uint8_t i=0;i<4;i++)
 8005804:	2300      	movs	r3, #0
 8005806:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 800580a:	e00f      	b.n	800582c <union_converter+0xc4>
		 {
			loratx[i+13]=f2u8_longitude.array[i];
 800580c:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 8005810:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8005814:	330d      	adds	r3, #13
 8005816:	3238      	adds	r2, #56	@ 0x38
 8005818:	443a      	add	r2, r7
 800581a:	f812 1c18 	ldrb.w	r1, [r2, #-24]
 800581e:	4a75      	ldr	r2, [pc, #468]	@ (80059f4 <union_converter+0x28c>)
 8005820:	54d1      	strb	r1, [r2, r3]
		 for(uint8_t i=0;i<4;i++)
 8005822:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8005826:	3301      	adds	r3, #1
 8005828:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 800582c:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8005830:	2b03      	cmp	r3, #3
 8005832:	d9eb      	bls.n	800580c <union_converter+0xa4>
		 }

	 float2unit8 f2u8_altitude;
	 f2u8_altitude.fVal=altitude;
 8005834:	4b70      	ldr	r3, [pc, #448]	@ (80059f8 <union_converter+0x290>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	61fb      	str	r3, [r7, #28]
		 for(uint8_t i=0;i<4;i++)
 800583a:	2300      	movs	r3, #0
 800583c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 8005840:	e00f      	b.n	8005862 <union_converter+0xfa>
		 {
			loratx[i+17]=f2u8_altitude.array[i];
 8005842:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 8005846:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800584a:	3311      	adds	r3, #17
 800584c:	3238      	adds	r2, #56	@ 0x38
 800584e:	443a      	add	r2, r7
 8005850:	f812 1c1c 	ldrb.w	r1, [r2, #-28]
 8005854:	4a67      	ldr	r2, [pc, #412]	@ (80059f4 <union_converter+0x28c>)
 8005856:	54d1      	strb	r1, [r2, r3]
		 for(uint8_t i=0;i<4;i++)
 8005858:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800585c:	3301      	adds	r3, #1
 800585e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 8005862:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8005866:	2b03      	cmp	r3, #3
 8005868:	d9eb      	bls.n	8005842 <union_converter+0xda>
		 }
	 float2unit8 f2u8_speed;
	 f2u8_speed.fVal=speed;
 800586a:	4b64      	ldr	r3, [pc, #400]	@ (80059fc <union_converter+0x294>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	61bb      	str	r3, [r7, #24]
		 for(uint8_t i=0;i<4;i++)
 8005870:	2300      	movs	r3, #0
 8005872:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8005876:	e00f      	b.n	8005898 <union_converter+0x130>
		 {
			loratx[i+21]=f2u8_speed.array[i];
 8005878:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800587c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005880:	3315      	adds	r3, #21
 8005882:	3238      	adds	r2, #56	@ 0x38
 8005884:	443a      	add	r2, r7
 8005886:	f812 1c20 	ldrb.w	r1, [r2, #-32]
 800588a:	4a5a      	ldr	r2, [pc, #360]	@ (80059f4 <union_converter+0x28c>)
 800588c:	54d1      	strb	r1, [r2, r3]
		 for(uint8_t i=0;i<4;i++)
 800588e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005892:	3301      	adds	r3, #1
 8005894:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8005898:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800589c:	2b03      	cmp	r3, #3
 800589e:	d9eb      	bls.n	8005878 <union_converter+0x110>
		 }

	 float2unit8 f2u8_temp;
	 f2u8_temp.fVal=temperature;
 80058a0:	4b57      	ldr	r3, [pc, #348]	@ (8005a00 <union_converter+0x298>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	617b      	str	r3, [r7, #20]
		 for(uint8_t i=0;i<4;i++)
 80058a6:	2300      	movs	r3, #0
 80058a8:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 80058ac:	e00f      	b.n	80058ce <union_converter+0x166>
		 {
			loratx[i+25]=f2u8_temp.array[i];
 80058ae:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 80058b2:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80058b6:	3319      	adds	r3, #25
 80058b8:	3238      	adds	r2, #56	@ 0x38
 80058ba:	443a      	add	r2, r7
 80058bc:	f812 1c24 	ldrb.w	r1, [r2, #-36]
 80058c0:	4a4c      	ldr	r2, [pc, #304]	@ (80059f4 <union_converter+0x28c>)
 80058c2:	54d1      	strb	r1, [r2, r3]
		 for(uint8_t i=0;i<4;i++)
 80058c4:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80058c8:	3301      	adds	r3, #1
 80058ca:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 80058ce:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80058d2:	2b03      	cmp	r3, #3
 80058d4:	d9eb      	bls.n	80058ae <union_converter+0x146>
		 }

	 float2unit8 f2u8_accx;
	 f2u8_accx.fVal=Lsm_Sensor.Accel_X;
 80058d6:	4b4b      	ldr	r3, [pc, #300]	@ (8005a04 <union_converter+0x29c>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	613b      	str	r3, [r7, #16]
		 for(uint8_t i=0;i<4;i++)
 80058dc:	2300      	movs	r3, #0
 80058de:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 80058e2:	e00f      	b.n	8005904 <union_converter+0x19c>
		 {
			loratx[i+29]=f2u8_accx.array[i];
 80058e4:	f897 2031 	ldrb.w	r2, [r7, #49]	@ 0x31
 80058e8:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80058ec:	331d      	adds	r3, #29
 80058ee:	3238      	adds	r2, #56	@ 0x38
 80058f0:	443a      	add	r2, r7
 80058f2:	f812 1c28 	ldrb.w	r1, [r2, #-40]
 80058f6:	4a3f      	ldr	r2, [pc, #252]	@ (80059f4 <union_converter+0x28c>)
 80058f8:	54d1      	strb	r1, [r2, r3]
		 for(uint8_t i=0;i<4;i++)
 80058fa:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80058fe:	3301      	adds	r3, #1
 8005900:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 8005904:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8005908:	2b03      	cmp	r3, #3
 800590a:	d9eb      	bls.n	80058e4 <union_converter+0x17c>
		 }

	 float2unit8 f2u8_accy;
	 f2u8_accy.fVal=Lsm_Sensor.Accel_Y;
 800590c:	4b3d      	ldr	r3, [pc, #244]	@ (8005a04 <union_converter+0x29c>)
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	60fb      	str	r3, [r7, #12]
	 	 for(uint8_t i=0;i<4;i++)
 8005912:	2300      	movs	r3, #0
 8005914:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 8005918:	e00f      	b.n	800593a <union_converter+0x1d2>
		 {
			loratx[i+33]=f2u8_accy.array[i];
 800591a:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800591e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8005922:	3321      	adds	r3, #33	@ 0x21
 8005924:	3238      	adds	r2, #56	@ 0x38
 8005926:	443a      	add	r2, r7
 8005928:	f812 1c2c 	ldrb.w	r1, [r2, #-44]
 800592c:	4a31      	ldr	r2, [pc, #196]	@ (80059f4 <union_converter+0x28c>)
 800592e:	54d1      	strb	r1, [r2, r3]
	 	 for(uint8_t i=0;i<4;i++)
 8005930:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8005934:	3301      	adds	r3, #1
 8005936:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 800593a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800593e:	2b03      	cmp	r3, #3
 8005940:	d9eb      	bls.n	800591a <union_converter+0x1b2>
		 }

	 float2unit8 f2u8_accz;
	 f2u8_accz.fVal=Lsm_Sensor.Accel_Z;
 8005942:	4b30      	ldr	r3, [pc, #192]	@ (8005a04 <union_converter+0x29c>)
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	60bb      	str	r3, [r7, #8]
	 	 for(uint8_t i=0;i<4;i++)
 8005948:	2300      	movs	r3, #0
 800594a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800594e:	e00f      	b.n	8005970 <union_converter+0x208>
		 {
		    loratx[i+37]=f2u8_accz.array[i];
 8005950:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8005954:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005958:	3325      	adds	r3, #37	@ 0x25
 800595a:	3238      	adds	r2, #56	@ 0x38
 800595c:	443a      	add	r2, r7
 800595e:	f812 1c30 	ldrb.w	r1, [r2, #-48]
 8005962:	4a24      	ldr	r2, [pc, #144]	@ (80059f4 <union_converter+0x28c>)
 8005964:	54d1      	strb	r1, [r2, r3]
	 	 for(uint8_t i=0;i<4;i++)
 8005966:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800596a:	3301      	adds	r3, #1
 800596c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8005970:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005974:	2b03      	cmp	r3, #3
 8005976:	d9eb      	bls.n	8005950 <union_converter+0x1e8>
		 }

	 float2unit8 f2u8_roll;
	 f2u8_roll.fVal=real_roll;
 8005978:	4b23      	ldr	r3, [pc, #140]	@ (8005a08 <union_converter+0x2a0>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	607b      	str	r3, [r7, #4]
		 for(uint8_t i=0;i<4;i++)
 800597e:	2300      	movs	r3, #0
 8005980:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8005984:	e00f      	b.n	80059a6 <union_converter+0x23e>
		 {
			loratx[i+41]=f2u8_roll.array[i];
 8005986:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 800598a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800598e:	3329      	adds	r3, #41	@ 0x29
 8005990:	3238      	adds	r2, #56	@ 0x38
 8005992:	443a      	add	r2, r7
 8005994:	f812 1c34 	ldrb.w	r1, [r2, #-52]
 8005998:	4a16      	ldr	r2, [pc, #88]	@ (80059f4 <union_converter+0x28c>)
 800599a:	54d1      	strb	r1, [r2, r3]
		 for(uint8_t i=0;i<4;i++)
 800599c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80059a0:	3301      	adds	r3, #1
 80059a2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80059a6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80059aa:	2b03      	cmp	r3, #3
 80059ac:	d9eb      	bls.n	8005986 <union_converter+0x21e>
		 }
	 float2unit8 f2u8_pitch;
	 f2u8_pitch.fVal=real_pitch;
 80059ae:	4b17      	ldr	r3, [pc, #92]	@ (8005a0c <union_converter+0x2a4>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	603b      	str	r3, [r7, #0]
		 for(uint8_t i=0;i<4;i++)
 80059b4:	2300      	movs	r3, #0
 80059b6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80059ba:	e00f      	b.n	80059dc <union_converter+0x274>
		 {
			loratx[i+45]=f2u8_pitch.array[i];
 80059bc:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 80059c0:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80059c4:	332d      	adds	r3, #45	@ 0x2d
 80059c6:	3238      	adds	r2, #56	@ 0x38
 80059c8:	443a      	add	r2, r7
 80059ca:	f812 1c38 	ldrb.w	r1, [r2, #-56]
 80059ce:	4a09      	ldr	r2, [pc, #36]	@ (80059f4 <union_converter+0x28c>)
 80059d0:	54d1      	strb	r1, [r2, r3]
		 for(uint8_t i=0;i<4;i++)
 80059d2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80059d6:	3301      	adds	r3, #1
 80059d8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80059dc:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80059e0:	2b03      	cmp	r3, #3
 80059e2:	d9eb      	bls.n	80059bc <union_converter+0x254>
		 }
}
 80059e4:	bf00      	nop
 80059e6:	bf00      	nop
 80059e8:	3738      	adds	r7, #56	@ 0x38
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop
 80059f0:	20002440 	.word	0x20002440
 80059f4:	20002298 	.word	0x20002298
 80059f8:	200023ec 	.word	0x200023ec
 80059fc:	20002400 	.word	0x20002400
 8005a00:	200023e4 	.word	0x200023e4
 8005a04:	200024f0 	.word	0x200024f0
 8005a08:	20002410 	.word	0x20002410
 8005a0c:	2000240c 	.word	0x2000240c

08005a10 <EGU_Buff_Load>:

void EGU_Buff_Load(void)
{
 8005a10:	b480      	push	{r7}
 8005a12:	af00      	add	r7, sp, #0
	loratx[52]=EGU_RX_BUFFER[29];//EGU HATA
 8005a14:	4b2e      	ldr	r3, [pc, #184]	@ (8005ad0 <EGU_Buff_Load+0xc0>)
 8005a16:	7f5a      	ldrb	r2, [r3, #29]
 8005a18:	4b2e      	ldr	r3, [pc, #184]	@ (8005ad4 <EGU_Buff_Load+0xc4>)
 8005a1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	loratx[53]=EGU_RX_BUFFER[30];//Fitil kontrol 0 ise fitil bağlı değil 1 ise fitil bağlı
 8005a1e:	4b2c      	ldr	r3, [pc, #176]	@ (8005ad0 <EGU_Buff_Load+0xc0>)
 8005a20:	7f9a      	ldrb	r2, [r3, #30]
 8005a22:	4b2c      	ldr	r3, [pc, #176]	@ (8005ad4 <EGU_Buff_Load+0xc4>)
 8005a24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	loratx[54]=EGU_RX_BUFFER[6];//EGU BATARYA-F
 8005a28:	4b29      	ldr	r3, [pc, #164]	@ (8005ad0 <EGU_Buff_Load+0xc0>)
 8005a2a:	799a      	ldrb	r2, [r3, #6]
 8005a2c:	4b29      	ldr	r3, [pc, #164]	@ (8005ad4 <EGU_Buff_Load+0xc4>)
 8005a2e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	loratx[55]=EGU_RX_BUFFER[7];
 8005a32:	4b27      	ldr	r3, [pc, #156]	@ (8005ad0 <EGU_Buff_Load+0xc0>)
 8005a34:	79da      	ldrb	r2, [r3, #7]
 8005a36:	4b27      	ldr	r3, [pc, #156]	@ (8005ad4 <EGU_Buff_Load+0xc4>)
 8005a38:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
	loratx[56]=EGU_RX_BUFFER[8];
 8005a3c:	4b24      	ldr	r3, [pc, #144]	@ (8005ad0 <EGU_Buff_Load+0xc0>)
 8005a3e:	7a1a      	ldrb	r2, [r3, #8]
 8005a40:	4b24      	ldr	r3, [pc, #144]	@ (8005ad4 <EGU_Buff_Load+0xc4>)
 8005a42:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	loratx[57]=EGU_RX_BUFFER[9];
 8005a46:	4b22      	ldr	r3, [pc, #136]	@ (8005ad0 <EGU_Buff_Load+0xc0>)
 8005a48:	7a5a      	ldrb	r2, [r3, #9]
 8005a4a:	4b22      	ldr	r3, [pc, #136]	@ (8005ad4 <EGU_Buff_Load+0xc4>)
 8005a4c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
	loratx[58]=EGU_RX_BUFFER[22];//EGU ANGLE-F
 8005a50:	4b1f      	ldr	r3, [pc, #124]	@ (8005ad0 <EGU_Buff_Load+0xc0>)
 8005a52:	7d9a      	ldrb	r2, [r3, #22]
 8005a54:	4b1f      	ldr	r3, [pc, #124]	@ (8005ad4 <EGU_Buff_Load+0xc4>)
 8005a56:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
	loratx[59]=EGU_RX_BUFFER[23];
 8005a5a:	4b1d      	ldr	r3, [pc, #116]	@ (8005ad0 <EGU_Buff_Load+0xc0>)
 8005a5c:	7dda      	ldrb	r2, [r3, #23]
 8005a5e:	4b1d      	ldr	r3, [pc, #116]	@ (8005ad4 <EGU_Buff_Load+0xc4>)
 8005a60:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
	loratx[60]=EGU_RX_BUFFER[24];
 8005a64:	4b1a      	ldr	r3, [pc, #104]	@ (8005ad0 <EGU_Buff_Load+0xc0>)
 8005a66:	7e1a      	ldrb	r2, [r3, #24]
 8005a68:	4b1a      	ldr	r3, [pc, #104]	@ (8005ad4 <EGU_Buff_Load+0xc4>)
 8005a6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	loratx[61]=EGU_RX_BUFFER[25];
 8005a6e:	4b18      	ldr	r3, [pc, #96]	@ (8005ad0 <EGU_Buff_Load+0xc0>)
 8005a70:	7e5a      	ldrb	r2, [r3, #25]
 8005a72:	4b18      	ldr	r3, [pc, #96]	@ (8005ad4 <EGU_Buff_Load+0xc4>)
 8005a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
	loratx[62]=EGU_RX_BUFFER[10];//EGU IRTIFA-F
 8005a78:	4b15      	ldr	r3, [pc, #84]	@ (8005ad0 <EGU_Buff_Load+0xc0>)
 8005a7a:	7a9a      	ldrb	r2, [r3, #10]
 8005a7c:	4b15      	ldr	r3, [pc, #84]	@ (8005ad4 <EGU_Buff_Load+0xc4>)
 8005a7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
	loratx[63]=EGU_RX_BUFFER[11];
 8005a82:	4b13      	ldr	r3, [pc, #76]	@ (8005ad0 <EGU_Buff_Load+0xc0>)
 8005a84:	7ada      	ldrb	r2, [r3, #11]
 8005a86:	4b13      	ldr	r3, [pc, #76]	@ (8005ad4 <EGU_Buff_Load+0xc4>)
 8005a88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
	loratx[64]=EGU_RX_BUFFER[12];
 8005a8c:	4b10      	ldr	r3, [pc, #64]	@ (8005ad0 <EGU_Buff_Load+0xc0>)
 8005a8e:	7b1a      	ldrb	r2, [r3, #12]
 8005a90:	4b10      	ldr	r3, [pc, #64]	@ (8005ad4 <EGU_Buff_Load+0xc4>)
 8005a92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	loratx[65]=EGU_RX_BUFFER[13];
 8005a96:	4b0e      	ldr	r3, [pc, #56]	@ (8005ad0 <EGU_Buff_Load+0xc0>)
 8005a98:	7b5a      	ldrb	r2, [r3, #13]
 8005a9a:	4b0e      	ldr	r3, [pc, #56]	@ (8005ad4 <EGU_Buff_Load+0xc4>)
 8005a9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
	loratx[66]=EGU_RX_BUFFER[26];//EGU UCUS BASLADIMI?
 8005aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8005ad0 <EGU_Buff_Load+0xc0>)
 8005aa2:	7e9a      	ldrb	r2, [r3, #26]
 8005aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8005ad4 <EGU_Buff_Load+0xc4>)
 8005aa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
	loratx[67]=EGU_RX_BUFFER[28];//manyetik switch 1 ise kopmadı 0 ise koptu
 8005aaa:	4b09      	ldr	r3, [pc, #36]	@ (8005ad0 <EGU_Buff_Load+0xc0>)
 8005aac:	7f1a      	ldrb	r2, [r3, #28]
 8005aae:	4b09      	ldr	r3, [pc, #36]	@ (8005ad4 <EGU_Buff_Load+0xc4>)
 8005ab0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
	loratx[68]=EGU_RX_BUFFER[27];//MOTOR ATESLEME TALEBİ GELDİ Mİ?
 8005ab4:	4b06      	ldr	r3, [pc, #24]	@ (8005ad0 <EGU_Buff_Load+0xc0>)
 8005ab6:	7eda      	ldrb	r2, [r3, #27]
 8005ab8:	4b06      	ldr	r3, [pc, #24]	@ (8005ad4 <EGU_Buff_Load+0xc4>)
 8005aba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	loratx[69]='\n';
 8005abe:	4b05      	ldr	r3, [pc, #20]	@ (8005ad4 <EGU_Buff_Load+0xc4>)
 8005ac0:	220a      	movs	r2, #10
 8005ac2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

}
 8005ac6:	bf00      	nop
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr
 8005ad0:	200005cc 	.word	0x200005cc
 8005ad4:	20002298 	.word	0x20002298

08005ad8 <Altitude_Offset>:

	  }
}

void Altitude_Offset()
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b082      	sub	sp, #8
 8005adc:	af00      	add	r7, sp, #0
	for(uint8_t i=0;i<5;i++)
 8005ade:	2300      	movs	r3, #0
 8005ae0:	71fb      	strb	r3, [r7, #7]
 8005ae2:	e02b      	b.n	8005b3c <Altitude_Offset+0x64>
	{
		HAL_Delay(40);
 8005ae4:	2028      	movs	r0, #40	@ 0x28
 8005ae6:	f000 fcff 	bl	80064e8 <HAL_Delay>
	  rslt = bme280_set_sensor_mode(BME280_FORCED_MODE, &dev);
 8005aea:	4918      	ldr	r1, [pc, #96]	@ (8005b4c <Altitude_Offset+0x74>)
 8005aec:	2001      	movs	r0, #1
 8005aee:	f7fb fc2a 	bl	8001346 <bme280_set_sensor_mode>
 8005af2:	4603      	mov	r3, r0
 8005af4:	461a      	mov	r2, r3
 8005af6:	4b16      	ldr	r3, [pc, #88]	@ (8005b50 <Altitude_Offset+0x78>)
 8005af8:	701a      	strb	r2, [r3, #0]
	  rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 8005afa:	4a14      	ldr	r2, [pc, #80]	@ (8005b4c <Altitude_Offset+0x74>)
 8005afc:	4915      	ldr	r1, [pc, #84]	@ (8005b54 <Altitude_Offset+0x7c>)
 8005afe:	2007      	movs	r0, #7
 8005b00:	f7fb fc9d 	bl	800143e <bme280_get_sensor_data>
 8005b04:	4603      	mov	r3, r0
 8005b06:	461a      	mov	r2, r3
 8005b08:	4b11      	ldr	r3, [pc, #68]	@ (8005b50 <Altitude_Offset+0x78>)
 8005b0a:	701a      	strb	r2, [r3, #0]
	  if(rslt == BME280_OK)
 8005b0c:	4b10      	ldr	r3, [pc, #64]	@ (8005b50 <Altitude_Offset+0x78>)
 8005b0e:	f993 3000 	ldrsb.w	r3, [r3]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d10f      	bne.n	8005b36 <Altitude_Offset+0x5e>
	  { pressure = comp_data.pressure;
 8005b16:	4b0f      	ldr	r3, [pc, #60]	@ (8005b54 <Altitude_Offset+0x7c>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	ee07 3a90 	vmov	s15, r3
 8005b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b22:	4b0d      	ldr	r3, [pc, #52]	@ (8005b58 <Altitude_Offset+0x80>)
 8005b24:	edc3 7a00 	vstr	s15, [r3]
	    offset_altitude=BME280_Get_Altitude();
 8005b28:	f7ff fd26 	bl	8005578 <BME280_Get_Altitude>
 8005b2c:	eef0 7a40 	vmov.f32	s15, s0
 8005b30:	4b0a      	ldr	r3, [pc, #40]	@ (8005b5c <Altitude_Offset+0x84>)
 8005b32:	edc3 7a00 	vstr	s15, [r3]
	for(uint8_t i=0;i<5;i++)
 8005b36:	79fb      	ldrb	r3, [r7, #7]
 8005b38:	3301      	adds	r3, #1
 8005b3a:	71fb      	strb	r3, [r7, #7]
 8005b3c:	79fb      	ldrb	r3, [r7, #7]
 8005b3e:	2b04      	cmp	r3, #4
 8005b40:	d9d0      	bls.n	8005ae4 <Altitude_Offset+0xc>
	  }
	}
}
 8005b42:	bf00      	nop
 8005b44:	bf00      	nop
 8005b46:	3708      	adds	r7, #8
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	20002634 	.word	0x20002634
 8005b50:	20002680 	.word	0x20002680
 8005b54:	20002674 	.word	0x20002674
 8005b58:	200023f4 	.word	0x200023f4
 8005b5c:	200023f0 	.word	0x200023f0

08005b60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005b60:	b480      	push	{r7}
 8005b62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005b64:	b672      	cpsid	i
}
 8005b66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005b68:	bf00      	nop
 8005b6a:	e7fd      	b.n	8005b68 <Error_Handler+0x8>

08005b6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b72:	2300      	movs	r3, #0
 8005b74:	607b      	str	r3, [r7, #4]
 8005b76:	4b10      	ldr	r3, [pc, #64]	@ (8005bb8 <HAL_MspInit+0x4c>)
 8005b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b7a:	4a0f      	ldr	r2, [pc, #60]	@ (8005bb8 <HAL_MspInit+0x4c>)
 8005b7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005b80:	6453      	str	r3, [r2, #68]	@ 0x44
 8005b82:	4b0d      	ldr	r3, [pc, #52]	@ (8005bb8 <HAL_MspInit+0x4c>)
 8005b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b8a:	607b      	str	r3, [r7, #4]
 8005b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005b8e:	2300      	movs	r3, #0
 8005b90:	603b      	str	r3, [r7, #0]
 8005b92:	4b09      	ldr	r3, [pc, #36]	@ (8005bb8 <HAL_MspInit+0x4c>)
 8005b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b96:	4a08      	ldr	r2, [pc, #32]	@ (8005bb8 <HAL_MspInit+0x4c>)
 8005b98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005b9e:	4b06      	ldr	r3, [pc, #24]	@ (8005bb8 <HAL_MspInit+0x4c>)
 8005ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ba2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ba6:	603b      	str	r3, [r7, #0]
 8005ba8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005baa:	bf00      	nop
 8005bac:	370c      	adds	r7, #12
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr
 8005bb6:	bf00      	nop
 8005bb8:	40023800 	.word	0x40023800

08005bbc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b08a      	sub	sp, #40	@ 0x28
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bc4:	f107 0314 	add.w	r3, r7, #20
 8005bc8:	2200      	movs	r2, #0
 8005bca:	601a      	str	r2, [r3, #0]
 8005bcc:	605a      	str	r2, [r3, #4]
 8005bce:	609a      	str	r2, [r3, #8]
 8005bd0:	60da      	str	r2, [r3, #12]
 8005bd2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a1b      	ldr	r2, [pc, #108]	@ (8005c48 <HAL_ADC_MspInit+0x8c>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d12f      	bne.n	8005c3e <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005bde:	2300      	movs	r3, #0
 8005be0:	613b      	str	r3, [r7, #16]
 8005be2:	4b1a      	ldr	r3, [pc, #104]	@ (8005c4c <HAL_ADC_MspInit+0x90>)
 8005be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005be6:	4a19      	ldr	r2, [pc, #100]	@ (8005c4c <HAL_ADC_MspInit+0x90>)
 8005be8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bec:	6453      	str	r3, [r2, #68]	@ 0x44
 8005bee:	4b17      	ldr	r3, [pc, #92]	@ (8005c4c <HAL_ADC_MspInit+0x90>)
 8005bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bf6:	613b      	str	r3, [r7, #16]
 8005bf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	60fb      	str	r3, [r7, #12]
 8005bfe:	4b13      	ldr	r3, [pc, #76]	@ (8005c4c <HAL_ADC_MspInit+0x90>)
 8005c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c02:	4a12      	ldr	r2, [pc, #72]	@ (8005c4c <HAL_ADC_MspInit+0x90>)
 8005c04:	f043 0304 	orr.w	r3, r3, #4
 8005c08:	6313      	str	r3, [r2, #48]	@ 0x30
 8005c0a:	4b10      	ldr	r3, [pc, #64]	@ (8005c4c <HAL_ADC_MspInit+0x90>)
 8005c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c0e:	f003 0304 	and.w	r3, r3, #4
 8005c12:	60fb      	str	r3, [r7, #12]
 8005c14:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = ADC_VCC_Pin;
 8005c16:	2304      	movs	r3, #4
 8005c18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_VCC_GPIO_Port, &GPIO_InitStruct);
 8005c22:	f107 0314 	add.w	r3, r7, #20
 8005c26:	4619      	mov	r1, r3
 8005c28:	4809      	ldr	r0, [pc, #36]	@ (8005c50 <HAL_ADC_MspInit+0x94>)
 8005c2a:	f001 fab1 	bl	8007190 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8005c2e:	2200      	movs	r2, #0
 8005c30:	2100      	movs	r1, #0
 8005c32:	2012      	movs	r0, #18
 8005c34:	f001 f9e3 	bl	8006ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8005c38:	2012      	movs	r0, #18
 8005c3a:	f001 f9fc 	bl	8007036 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8005c3e:	bf00      	nop
 8005c40:	3728      	adds	r7, #40	@ 0x28
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	40012000 	.word	0x40012000
 8005c4c:	40023800 	.word	0x40023800
 8005c50:	40020800 	.word	0x40020800

08005c54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b08a      	sub	sp, #40	@ 0x28
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c5c:	f107 0314 	add.w	r3, r7, #20
 8005c60:	2200      	movs	r2, #0
 8005c62:	601a      	str	r2, [r3, #0]
 8005c64:	605a      	str	r2, [r3, #4]
 8005c66:	609a      	str	r2, [r3, #8]
 8005c68:	60da      	str	r2, [r3, #12]
 8005c6a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a19      	ldr	r2, [pc, #100]	@ (8005cd8 <HAL_I2C_MspInit+0x84>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d12b      	bne.n	8005cce <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c76:	2300      	movs	r3, #0
 8005c78:	613b      	str	r3, [r7, #16]
 8005c7a:	4b18      	ldr	r3, [pc, #96]	@ (8005cdc <HAL_I2C_MspInit+0x88>)
 8005c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c7e:	4a17      	ldr	r2, [pc, #92]	@ (8005cdc <HAL_I2C_MspInit+0x88>)
 8005c80:	f043 0302 	orr.w	r3, r3, #2
 8005c84:	6313      	str	r3, [r2, #48]	@ 0x30
 8005c86:	4b15      	ldr	r3, [pc, #84]	@ (8005cdc <HAL_I2C_MspInit+0x88>)
 8005c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c8a:	f003 0302 	and.w	r3, r3, #2
 8005c8e:	613b      	str	r3, [r7, #16]
 8005c90:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005c92:	23c0      	movs	r3, #192	@ 0xc0
 8005c94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005c96:	2312      	movs	r3, #18
 8005c98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c9e:	2303      	movs	r3, #3
 8005ca0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005ca2:	2304      	movs	r3, #4
 8005ca4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ca6:	f107 0314 	add.w	r3, r7, #20
 8005caa:	4619      	mov	r1, r3
 8005cac:	480c      	ldr	r0, [pc, #48]	@ (8005ce0 <HAL_I2C_MspInit+0x8c>)
 8005cae:	f001 fa6f 	bl	8007190 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	60fb      	str	r3, [r7, #12]
 8005cb6:	4b09      	ldr	r3, [pc, #36]	@ (8005cdc <HAL_I2C_MspInit+0x88>)
 8005cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cba:	4a08      	ldr	r2, [pc, #32]	@ (8005cdc <HAL_I2C_MspInit+0x88>)
 8005cbc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005cc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8005cc2:	4b06      	ldr	r3, [pc, #24]	@ (8005cdc <HAL_I2C_MspInit+0x88>)
 8005cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cc6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005cca:	60fb      	str	r3, [r7, #12]
 8005ccc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8005cce:	bf00      	nop
 8005cd0:	3728      	adds	r7, #40	@ 0x28
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	40005400 	.word	0x40005400
 8005cdc:	40023800 	.word	0x40023800
 8005ce0:	40020400 	.word	0x40020400

08005ce4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b08a      	sub	sp, #40	@ 0x28
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005cec:	f107 0314 	add.w	r3, r7, #20
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	601a      	str	r2, [r3, #0]
 8005cf4:	605a      	str	r2, [r3, #4]
 8005cf6:	609a      	str	r2, [r3, #8]
 8005cf8:	60da      	str	r2, [r3, #12]
 8005cfa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a19      	ldr	r2, [pc, #100]	@ (8005d68 <HAL_SPI_MspInit+0x84>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d12b      	bne.n	8005d5e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005d06:	2300      	movs	r3, #0
 8005d08:	613b      	str	r3, [r7, #16]
 8005d0a:	4b18      	ldr	r3, [pc, #96]	@ (8005d6c <HAL_SPI_MspInit+0x88>)
 8005d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d0e:	4a17      	ldr	r2, [pc, #92]	@ (8005d6c <HAL_SPI_MspInit+0x88>)
 8005d10:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005d14:	6453      	str	r3, [r2, #68]	@ 0x44
 8005d16:	4b15      	ldr	r3, [pc, #84]	@ (8005d6c <HAL_SPI_MspInit+0x88>)
 8005d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005d1e:	613b      	str	r3, [r7, #16]
 8005d20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d22:	2300      	movs	r3, #0
 8005d24:	60fb      	str	r3, [r7, #12]
 8005d26:	4b11      	ldr	r3, [pc, #68]	@ (8005d6c <HAL_SPI_MspInit+0x88>)
 8005d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d2a:	4a10      	ldr	r2, [pc, #64]	@ (8005d6c <HAL_SPI_MspInit+0x88>)
 8005d2c:	f043 0301 	orr.w	r3, r3, #1
 8005d30:	6313      	str	r3, [r2, #48]	@ 0x30
 8005d32:	4b0e      	ldr	r3, [pc, #56]	@ (8005d6c <HAL_SPI_MspInit+0x88>)
 8005d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d36:	f003 0301 	and.w	r3, r3, #1
 8005d3a:	60fb      	str	r3, [r7, #12]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005d3e:	23e0      	movs	r3, #224	@ 0xe0
 8005d40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d42:	2302      	movs	r3, #2
 8005d44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d46:	2300      	movs	r3, #0
 8005d48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005d4e:	2305      	movs	r3, #5
 8005d50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d52:	f107 0314 	add.w	r3, r7, #20
 8005d56:	4619      	mov	r1, r3
 8005d58:	4805      	ldr	r0, [pc, #20]	@ (8005d70 <HAL_SPI_MspInit+0x8c>)
 8005d5a:	f001 fa19 	bl	8007190 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8005d5e:	bf00      	nop
 8005d60:	3728      	adds	r7, #40	@ 0x28
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	40013000 	.word	0x40013000
 8005d6c:	40023800 	.word	0x40023800
 8005d70:	40020000 	.word	0x40020000

08005d74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b088      	sub	sp, #32
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d84:	d116      	bne.n	8005db4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005d86:	2300      	movs	r3, #0
 8005d88:	61fb      	str	r3, [r7, #28]
 8005d8a:	4b44      	ldr	r3, [pc, #272]	@ (8005e9c <HAL_TIM_Base_MspInit+0x128>)
 8005d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d8e:	4a43      	ldr	r2, [pc, #268]	@ (8005e9c <HAL_TIM_Base_MspInit+0x128>)
 8005d90:	f043 0301 	orr.w	r3, r3, #1
 8005d94:	6413      	str	r3, [r2, #64]	@ 0x40
 8005d96:	4b41      	ldr	r3, [pc, #260]	@ (8005e9c <HAL_TIM_Base_MspInit+0x128>)
 8005d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d9a:	f003 0301 	and.w	r3, r3, #1
 8005d9e:	61fb      	str	r3, [r7, #28]
 8005da0:	69fb      	ldr	r3, [r7, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005da2:	2200      	movs	r2, #0
 8005da4:	2100      	movs	r1, #0
 8005da6:	201c      	movs	r0, #28
 8005da8:	f001 f929 	bl	8006ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005dac:	201c      	movs	r0, #28
 8005dae:	f001 f942 	bl	8007036 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8005db2:	e06e      	b.n	8005e92 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM6)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a39      	ldr	r2, [pc, #228]	@ (8005ea0 <HAL_TIM_Base_MspInit+0x12c>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d116      	bne.n	8005dec <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	61bb      	str	r3, [r7, #24]
 8005dc2:	4b36      	ldr	r3, [pc, #216]	@ (8005e9c <HAL_TIM_Base_MspInit+0x128>)
 8005dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dc6:	4a35      	ldr	r2, [pc, #212]	@ (8005e9c <HAL_TIM_Base_MspInit+0x128>)
 8005dc8:	f043 0310 	orr.w	r3, r3, #16
 8005dcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8005dce:	4b33      	ldr	r3, [pc, #204]	@ (8005e9c <HAL_TIM_Base_MspInit+0x128>)
 8005dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dd2:	f003 0310 	and.w	r3, r3, #16
 8005dd6:	61bb      	str	r3, [r7, #24]
 8005dd8:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8005dda:	2200      	movs	r2, #0
 8005ddc:	2100      	movs	r1, #0
 8005dde:	2036      	movs	r0, #54	@ 0x36
 8005de0:	f001 f90d 	bl	8006ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005de4:	2036      	movs	r0, #54	@ 0x36
 8005de6:	f001 f926 	bl	8007036 <HAL_NVIC_EnableIRQ>
}
 8005dea:	e052      	b.n	8005e92 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM7)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a2c      	ldr	r2, [pc, #176]	@ (8005ea4 <HAL_TIM_Base_MspInit+0x130>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d116      	bne.n	8005e24 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005df6:	2300      	movs	r3, #0
 8005df8:	617b      	str	r3, [r7, #20]
 8005dfa:	4b28      	ldr	r3, [pc, #160]	@ (8005e9c <HAL_TIM_Base_MspInit+0x128>)
 8005dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dfe:	4a27      	ldr	r2, [pc, #156]	@ (8005e9c <HAL_TIM_Base_MspInit+0x128>)
 8005e00:	f043 0320 	orr.w	r3, r3, #32
 8005e04:	6413      	str	r3, [r2, #64]	@ 0x40
 8005e06:	4b25      	ldr	r3, [pc, #148]	@ (8005e9c <HAL_TIM_Base_MspInit+0x128>)
 8005e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e0a:	f003 0320 	and.w	r3, r3, #32
 8005e0e:	617b      	str	r3, [r7, #20]
 8005e10:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8005e12:	2200      	movs	r2, #0
 8005e14:	2100      	movs	r1, #0
 8005e16:	2037      	movs	r0, #55	@ 0x37
 8005e18:	f001 f8f1 	bl	8006ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005e1c:	2037      	movs	r0, #55	@ 0x37
 8005e1e:	f001 f90a 	bl	8007036 <HAL_NVIC_EnableIRQ>
}
 8005e22:	e036      	b.n	8005e92 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM10)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a1f      	ldr	r2, [pc, #124]	@ (8005ea8 <HAL_TIM_Base_MspInit+0x134>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d116      	bne.n	8005e5c <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8005e2e:	2300      	movs	r3, #0
 8005e30:	613b      	str	r3, [r7, #16]
 8005e32:	4b1a      	ldr	r3, [pc, #104]	@ (8005e9c <HAL_TIM_Base_MspInit+0x128>)
 8005e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e36:	4a19      	ldr	r2, [pc, #100]	@ (8005e9c <HAL_TIM_Base_MspInit+0x128>)
 8005e38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8005e3e:	4b17      	ldr	r3, [pc, #92]	@ (8005e9c <HAL_TIM_Base_MspInit+0x128>)
 8005e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e46:	613b      	str	r3, [r7, #16]
 8005e48:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	2100      	movs	r1, #0
 8005e4e:	2019      	movs	r0, #25
 8005e50:	f001 f8d5 	bl	8006ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005e54:	2019      	movs	r0, #25
 8005e56:	f001 f8ee 	bl	8007036 <HAL_NVIC_EnableIRQ>
}
 8005e5a:	e01a      	b.n	8005e92 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM11)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a12      	ldr	r2, [pc, #72]	@ (8005eac <HAL_TIM_Base_MspInit+0x138>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d115      	bne.n	8005e92 <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8005e66:	2300      	movs	r3, #0
 8005e68:	60fb      	str	r3, [r7, #12]
 8005e6a:	4b0c      	ldr	r3, [pc, #48]	@ (8005e9c <HAL_TIM_Base_MspInit+0x128>)
 8005e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e6e:	4a0b      	ldr	r2, [pc, #44]	@ (8005e9c <HAL_TIM_Base_MspInit+0x128>)
 8005e70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005e74:	6453      	str	r3, [r2, #68]	@ 0x44
 8005e76:	4b09      	ldr	r3, [pc, #36]	@ (8005e9c <HAL_TIM_Base_MspInit+0x128>)
 8005e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e7a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005e7e:	60fb      	str	r3, [r7, #12]
 8005e80:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8005e82:	2200      	movs	r2, #0
 8005e84:	2100      	movs	r1, #0
 8005e86:	201a      	movs	r0, #26
 8005e88:	f001 f8b9 	bl	8006ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8005e8c:	201a      	movs	r0, #26
 8005e8e:	f001 f8d2 	bl	8007036 <HAL_NVIC_EnableIRQ>
}
 8005e92:	bf00      	nop
 8005e94:	3720      	adds	r7, #32
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	40023800 	.word	0x40023800
 8005ea0:	40001000 	.word	0x40001000
 8005ea4:	40001400 	.word	0x40001400
 8005ea8:	40014400 	.word	0x40014400
 8005eac:	40014800 	.word	0x40014800

08005eb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b090      	sub	sp, #64	@ 0x40
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005eb8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	601a      	str	r2, [r3, #0]
 8005ec0:	605a      	str	r2, [r3, #4]
 8005ec2:	609a      	str	r2, [r3, #8]
 8005ec4:	60da      	str	r2, [r3, #12]
 8005ec6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a7f      	ldr	r2, [pc, #508]	@ (80060cc <HAL_UART_MspInit+0x21c>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d12c      	bne.n	8005f2c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ed6:	4b7e      	ldr	r3, [pc, #504]	@ (80060d0 <HAL_UART_MspInit+0x220>)
 8005ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eda:	4a7d      	ldr	r2, [pc, #500]	@ (80060d0 <HAL_UART_MspInit+0x220>)
 8005edc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005ee0:	6413      	str	r3, [r2, #64]	@ 0x40
 8005ee2:	4b7b      	ldr	r3, [pc, #492]	@ (80060d0 <HAL_UART_MspInit+0x220>)
 8005ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ee6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005eea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005eee:	2300      	movs	r3, #0
 8005ef0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ef2:	4b77      	ldr	r3, [pc, #476]	@ (80060d0 <HAL_UART_MspInit+0x220>)
 8005ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ef6:	4a76      	ldr	r2, [pc, #472]	@ (80060d0 <HAL_UART_MspInit+0x220>)
 8005ef8:	f043 0301 	orr.w	r3, r3, #1
 8005efc:	6313      	str	r3, [r2, #48]	@ 0x30
 8005efe:	4b74      	ldr	r3, [pc, #464]	@ (80060d0 <HAL_UART_MspInit+0x220>)
 8005f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f02:	f003 0301 	and.w	r3, r3, #1
 8005f06:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f0e:	2302      	movs	r3, #2
 8005f10:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f12:	2300      	movs	r3, #0
 8005f14:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f16:	2303      	movs	r3, #3
 8005f18:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005f1a:	2308      	movs	r3, #8
 8005f1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f1e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005f22:	4619      	mov	r1, r3
 8005f24:	486b      	ldr	r0, [pc, #428]	@ (80060d4 <HAL_UART_MspInit+0x224>)
 8005f26:	f001 f933 	bl	8007190 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8005f2a:	e0cb      	b.n	80060c4 <HAL_UART_MspInit+0x214>
  else if(huart->Instance==USART2)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a69      	ldr	r2, [pc, #420]	@ (80060d8 <HAL_UART_MspInit+0x228>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d134      	bne.n	8005fa0 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005f36:	2300      	movs	r3, #0
 8005f38:	623b      	str	r3, [r7, #32]
 8005f3a:	4b65      	ldr	r3, [pc, #404]	@ (80060d0 <HAL_UART_MspInit+0x220>)
 8005f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f3e:	4a64      	ldr	r2, [pc, #400]	@ (80060d0 <HAL_UART_MspInit+0x220>)
 8005f40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f44:	6413      	str	r3, [r2, #64]	@ 0x40
 8005f46:	4b62      	ldr	r3, [pc, #392]	@ (80060d0 <HAL_UART_MspInit+0x220>)
 8005f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f4e:	623b      	str	r3, [r7, #32]
 8005f50:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f52:	2300      	movs	r3, #0
 8005f54:	61fb      	str	r3, [r7, #28]
 8005f56:	4b5e      	ldr	r3, [pc, #376]	@ (80060d0 <HAL_UART_MspInit+0x220>)
 8005f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f5a:	4a5d      	ldr	r2, [pc, #372]	@ (80060d0 <HAL_UART_MspInit+0x220>)
 8005f5c:	f043 0301 	orr.w	r3, r3, #1
 8005f60:	6313      	str	r3, [r2, #48]	@ 0x30
 8005f62:	4b5b      	ldr	r3, [pc, #364]	@ (80060d0 <HAL_UART_MspInit+0x220>)
 8005f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f66:	f003 0301 	and.w	r3, r3, #1
 8005f6a:	61fb      	str	r3, [r7, #28]
 8005f6c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = TX2_GPS_Pin|RX2_GPS_Pin;
 8005f6e:	230c      	movs	r3, #12
 8005f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f72:	2302      	movs	r3, #2
 8005f74:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f76:	2300      	movs	r3, #0
 8005f78:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f7a:	2303      	movs	r3, #3
 8005f7c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005f7e:	2307      	movs	r3, #7
 8005f80:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f82:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005f86:	4619      	mov	r1, r3
 8005f88:	4852      	ldr	r0, [pc, #328]	@ (80060d4 <HAL_UART_MspInit+0x224>)
 8005f8a:	f001 f901 	bl	8007190 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005f8e:	2200      	movs	r2, #0
 8005f90:	2100      	movs	r1, #0
 8005f92:	2026      	movs	r0, #38	@ 0x26
 8005f94:	f001 f833 	bl	8006ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005f98:	2026      	movs	r0, #38	@ 0x26
 8005f9a:	f001 f84c 	bl	8007036 <HAL_NVIC_EnableIRQ>
}
 8005f9e:	e091      	b.n	80060c4 <HAL_UART_MspInit+0x214>
  else if(huart->Instance==USART3)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a4d      	ldr	r2, [pc, #308]	@ (80060dc <HAL_UART_MspInit+0x22c>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d153      	bne.n	8006052 <HAL_UART_MspInit+0x1a2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005faa:	2300      	movs	r3, #0
 8005fac:	61bb      	str	r3, [r7, #24]
 8005fae:	4b48      	ldr	r3, [pc, #288]	@ (80060d0 <HAL_UART_MspInit+0x220>)
 8005fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fb2:	4a47      	ldr	r2, [pc, #284]	@ (80060d0 <HAL_UART_MspInit+0x220>)
 8005fb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005fb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8005fba:	4b45      	ldr	r3, [pc, #276]	@ (80060d0 <HAL_UART_MspInit+0x220>)
 8005fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fbe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005fc2:	61bb      	str	r3, [r7, #24]
 8005fc4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	617b      	str	r3, [r7, #20]
 8005fca:	4b41      	ldr	r3, [pc, #260]	@ (80060d0 <HAL_UART_MspInit+0x220>)
 8005fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fce:	4a40      	ldr	r2, [pc, #256]	@ (80060d0 <HAL_UART_MspInit+0x220>)
 8005fd0:	f043 0304 	orr.w	r3, r3, #4
 8005fd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8005fd6:	4b3e      	ldr	r3, [pc, #248]	@ (80060d0 <HAL_UART_MspInit+0x220>)
 8005fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fda:	f003 0304 	and.w	r3, r3, #4
 8005fde:	617b      	str	r3, [r7, #20]
 8005fe0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	613b      	str	r3, [r7, #16]
 8005fe6:	4b3a      	ldr	r3, [pc, #232]	@ (80060d0 <HAL_UART_MspInit+0x220>)
 8005fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fea:	4a39      	ldr	r2, [pc, #228]	@ (80060d0 <HAL_UART_MspInit+0x220>)
 8005fec:	f043 0302 	orr.w	r3, r3, #2
 8005ff0:	6313      	str	r3, [r2, #48]	@ 0x30
 8005ff2:	4b37      	ldr	r3, [pc, #220]	@ (80060d0 <HAL_UART_MspInit+0x220>)
 8005ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ff6:	f003 0302 	and.w	r3, r3, #2
 8005ffa:	613b      	str	r3, [r7, #16]
 8005ffc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = RX3_LORA_Pin;
 8005ffe:	2320      	movs	r3, #32
 8006000:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006002:	2302      	movs	r3, #2
 8006004:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006006:	2300      	movs	r3, #0
 8006008:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800600a:	2303      	movs	r3, #3
 800600c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800600e:	2307      	movs	r3, #7
 8006010:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(RX3_LORA_GPIO_Port, &GPIO_InitStruct);
 8006012:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006016:	4619      	mov	r1, r3
 8006018:	4831      	ldr	r0, [pc, #196]	@ (80060e0 <HAL_UART_MspInit+0x230>)
 800601a:	f001 f8b9 	bl	8007190 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TX3_LORA_Pin;
 800601e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006022:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006024:	2302      	movs	r3, #2
 8006026:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006028:	2300      	movs	r3, #0
 800602a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800602c:	2303      	movs	r3, #3
 800602e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006030:	2307      	movs	r3, #7
 8006032:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(TX3_LORA_GPIO_Port, &GPIO_InitStruct);
 8006034:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006038:	4619      	mov	r1, r3
 800603a:	482a      	ldr	r0, [pc, #168]	@ (80060e4 <HAL_UART_MspInit+0x234>)
 800603c:	f001 f8a8 	bl	8007190 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8006040:	2200      	movs	r2, #0
 8006042:	2100      	movs	r1, #0
 8006044:	2027      	movs	r0, #39	@ 0x27
 8006046:	f000 ffda 	bl	8006ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800604a:	2027      	movs	r0, #39	@ 0x27
 800604c:	f000 fff3 	bl	8007036 <HAL_NVIC_EnableIRQ>
}
 8006050:	e038      	b.n	80060c4 <HAL_UART_MspInit+0x214>
  else if(huart->Instance==USART6)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a24      	ldr	r2, [pc, #144]	@ (80060e8 <HAL_UART_MspInit+0x238>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d133      	bne.n	80060c4 <HAL_UART_MspInit+0x214>
    __HAL_RCC_USART6_CLK_ENABLE();
 800605c:	2300      	movs	r3, #0
 800605e:	60fb      	str	r3, [r7, #12]
 8006060:	4b1b      	ldr	r3, [pc, #108]	@ (80060d0 <HAL_UART_MspInit+0x220>)
 8006062:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006064:	4a1a      	ldr	r2, [pc, #104]	@ (80060d0 <HAL_UART_MspInit+0x220>)
 8006066:	f043 0320 	orr.w	r3, r3, #32
 800606a:	6453      	str	r3, [r2, #68]	@ 0x44
 800606c:	4b18      	ldr	r3, [pc, #96]	@ (80060d0 <HAL_UART_MspInit+0x220>)
 800606e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006070:	f003 0320 	and.w	r3, r3, #32
 8006074:	60fb      	str	r3, [r7, #12]
 8006076:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006078:	2300      	movs	r3, #0
 800607a:	60bb      	str	r3, [r7, #8]
 800607c:	4b14      	ldr	r3, [pc, #80]	@ (80060d0 <HAL_UART_MspInit+0x220>)
 800607e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006080:	4a13      	ldr	r2, [pc, #76]	@ (80060d0 <HAL_UART_MspInit+0x220>)
 8006082:	f043 0304 	orr.w	r3, r3, #4
 8006086:	6313      	str	r3, [r2, #48]	@ 0x30
 8006088:	4b11      	ldr	r3, [pc, #68]	@ (80060d0 <HAL_UART_MspInit+0x220>)
 800608a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800608c:	f003 0304 	and.w	r3, r3, #4
 8006090:	60bb      	str	r3, [r7, #8]
 8006092:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TX6_RS_Pin|RX6_RS_Pin;
 8006094:	23c0      	movs	r3, #192	@ 0xc0
 8006096:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006098:	2302      	movs	r3, #2
 800609a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800609c:	2300      	movs	r3, #0
 800609e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060a0:	2303      	movs	r3, #3
 80060a2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80060a4:	2308      	movs	r3, #8
 80060a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80060a8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80060ac:	4619      	mov	r1, r3
 80060ae:	480c      	ldr	r0, [pc, #48]	@ (80060e0 <HAL_UART_MspInit+0x230>)
 80060b0:	f001 f86e 	bl	8007190 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80060b4:	2200      	movs	r2, #0
 80060b6:	2100      	movs	r1, #0
 80060b8:	2047      	movs	r0, #71	@ 0x47
 80060ba:	f000 ffa0 	bl	8006ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80060be:	2047      	movs	r0, #71	@ 0x47
 80060c0:	f000 ffb9 	bl	8007036 <HAL_NVIC_EnableIRQ>
}
 80060c4:	bf00      	nop
 80060c6:	3740      	adds	r7, #64	@ 0x40
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	40004c00 	.word	0x40004c00
 80060d0:	40023800 	.word	0x40023800
 80060d4:	40020000 	.word	0x40020000
 80060d8:	40004400 	.word	0x40004400
 80060dc:	40004800 	.word	0x40004800
 80060e0:	40020800 	.word	0x40020800
 80060e4:	40020400 	.word	0x40020400
 80060e8:	40011400 	.word	0x40011400

080060ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80060ec:	b480      	push	{r7}
 80060ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80060f0:	bf00      	nop
 80060f2:	e7fd      	b.n	80060f0 <NMI_Handler+0x4>

080060f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80060f4:	b480      	push	{r7}
 80060f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80060f8:	bf00      	nop
 80060fa:	e7fd      	b.n	80060f8 <HardFault_Handler+0x4>

080060fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80060fc:	b480      	push	{r7}
 80060fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006100:	bf00      	nop
 8006102:	e7fd      	b.n	8006100 <MemManage_Handler+0x4>

08006104 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006104:	b480      	push	{r7}
 8006106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006108:	bf00      	nop
 800610a:	e7fd      	b.n	8006108 <BusFault_Handler+0x4>

0800610c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800610c:	b480      	push	{r7}
 800610e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006110:	bf00      	nop
 8006112:	e7fd      	b.n	8006110 <UsageFault_Handler+0x4>

08006114 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006114:	b480      	push	{r7}
 8006116:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006118:	bf00      	nop
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr

08006122 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006122:	b480      	push	{r7}
 8006124:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006126:	bf00      	nop
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006130:	b480      	push	{r7}
 8006132:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006134:	bf00      	nop
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr

0800613e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800613e:	b580      	push	{r7, lr}
 8006140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006142:	f000 f9b1 	bl	80064a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006146:	bf00      	nop
 8006148:	bd80      	pop	{r7, pc}
	...

0800614c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8006150:	4802      	ldr	r0, [pc, #8]	@ (800615c <ADC_IRQHandler+0x10>)
 8006152:	f000 fb0f 	bl	8006774 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8006156:	bf00      	nop
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop
 800615c:	20000260 	.word	0x20000260

08006160 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8006164:	4802      	ldr	r0, [pc, #8]	@ (8006170 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8006166:	f004 fb0e 	bl	800a786 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800616a:	bf00      	nop
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop
 8006170:	2000042c 	.word	0x2000042c

08006174 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8006178:	4802      	ldr	r0, [pc, #8]	@ (8006184 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800617a:	f004 fb04 	bl	800a786 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800617e:	bf00      	nop
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	20000474 	.word	0x20000474

08006188 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800618c:	4802      	ldr	r0, [pc, #8]	@ (8006198 <TIM2_IRQHandler+0x10>)
 800618e:	f004 fafa 	bl	800a786 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8006192:	bf00      	nop
 8006194:	bd80      	pop	{r7, pc}
 8006196:	bf00      	nop
 8006198:	20000354 	.word	0x20000354

0800619c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80061a0:	4802      	ldr	r0, [pc, #8]	@ (80061ac <USART2_IRQHandler+0x10>)
 80061a2:	f005 f805 	bl	800b1b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80061a6:	bf00      	nop
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	bf00      	nop
 80061ac:	20000500 	.word	0x20000500

080061b0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80061b4:	4802      	ldr	r0, [pc, #8]	@ (80061c0 <USART3_IRQHandler+0x10>)
 80061b6:	f004 fffb 	bl	800b1b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80061ba:	bf00      	nop
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	20000544 	.word	0x20000544

080061c4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80061c8:	4802      	ldr	r0, [pc, #8]	@ (80061d4 <TIM6_DAC_IRQHandler+0x10>)
 80061ca:	f004 fadc 	bl	800a786 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80061ce:	bf00      	nop
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	2000039c 	.word	0x2000039c

080061d8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80061dc:	4802      	ldr	r0, [pc, #8]	@ (80061e8 <TIM7_IRQHandler+0x10>)
 80061de:	f004 fad2 	bl	800a786 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80061e2:	bf00      	nop
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	200003e4 	.word	0x200003e4

080061ec <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80061f0:	4802      	ldr	r0, [pc, #8]	@ (80061fc <USART6_IRQHandler+0x10>)
 80061f2:	f004 ffdd 	bl	800b1b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80061f6:	bf00      	nop
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	bf00      	nop
 80061fc:	20000588 	.word	0x20000588

08006200 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006200:	b480      	push	{r7}
 8006202:	af00      	add	r7, sp, #0
  return 1;
 8006204:	2301      	movs	r3, #1
}
 8006206:	4618      	mov	r0, r3
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr

08006210 <_kill>:

int _kill(int pid, int sig)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b082      	sub	sp, #8
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800621a:	f007 f83b 	bl	800d294 <__errno>
 800621e:	4603      	mov	r3, r0
 8006220:	2216      	movs	r2, #22
 8006222:	601a      	str	r2, [r3, #0]
  return -1;
 8006224:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006228:	4618      	mov	r0, r3
 800622a:	3708      	adds	r7, #8
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <_exit>:

void _exit (int status)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b082      	sub	sp, #8
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006238:	f04f 31ff 	mov.w	r1, #4294967295
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f7ff ffe7 	bl	8006210 <_kill>
  while (1) {}    /* Make sure we hang here */
 8006242:	bf00      	nop
 8006244:	e7fd      	b.n	8006242 <_exit+0x12>

08006246 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006246:	b580      	push	{r7, lr}
 8006248:	b086      	sub	sp, #24
 800624a:	af00      	add	r7, sp, #0
 800624c:	60f8      	str	r0, [r7, #12]
 800624e:	60b9      	str	r1, [r7, #8]
 8006250:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006252:	2300      	movs	r3, #0
 8006254:	617b      	str	r3, [r7, #20]
 8006256:	e00a      	b.n	800626e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006258:	f3af 8000 	nop.w
 800625c:	4601      	mov	r1, r0
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	1c5a      	adds	r2, r3, #1
 8006262:	60ba      	str	r2, [r7, #8]
 8006264:	b2ca      	uxtb	r2, r1
 8006266:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	3301      	adds	r3, #1
 800626c:	617b      	str	r3, [r7, #20]
 800626e:	697a      	ldr	r2, [r7, #20]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	429a      	cmp	r2, r3
 8006274:	dbf0      	blt.n	8006258 <_read+0x12>
  }

  return len;
 8006276:	687b      	ldr	r3, [r7, #4]
}
 8006278:	4618      	mov	r0, r3
 800627a:	3718      	adds	r7, #24
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b086      	sub	sp, #24
 8006284:	af00      	add	r7, sp, #0
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800628c:	2300      	movs	r3, #0
 800628e:	617b      	str	r3, [r7, #20]
 8006290:	e009      	b.n	80062a6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	1c5a      	adds	r2, r3, #1
 8006296:	60ba      	str	r2, [r7, #8]
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	4618      	mov	r0, r3
 800629c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	3301      	adds	r3, #1
 80062a4:	617b      	str	r3, [r7, #20]
 80062a6:	697a      	ldr	r2, [r7, #20]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	429a      	cmp	r2, r3
 80062ac:	dbf1      	blt.n	8006292 <_write+0x12>
  }
  return len;
 80062ae:	687b      	ldr	r3, [r7, #4]
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3718      	adds	r7, #24
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <_close>:

int _close(int file)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80062c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	370c      	adds	r7, #12
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80062e0:	605a      	str	r2, [r3, #4]
  return 0;
 80062e2:	2300      	movs	r3, #0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <_isatty>:

int _isatty(int file)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80062f8:	2301      	movs	r3, #1
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	370c      	adds	r7, #12
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr

08006306 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006306:	b480      	push	{r7}
 8006308:	b085      	sub	sp, #20
 800630a:	af00      	add	r7, sp, #0
 800630c:	60f8      	str	r0, [r7, #12]
 800630e:	60b9      	str	r1, [r7, #8]
 8006310:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	3714      	adds	r7, #20
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b086      	sub	sp, #24
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006328:	4a14      	ldr	r2, [pc, #80]	@ (800637c <_sbrk+0x5c>)
 800632a:	4b15      	ldr	r3, [pc, #84]	@ (8006380 <_sbrk+0x60>)
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006334:	4b13      	ldr	r3, [pc, #76]	@ (8006384 <_sbrk+0x64>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d102      	bne.n	8006342 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800633c:	4b11      	ldr	r3, [pc, #68]	@ (8006384 <_sbrk+0x64>)
 800633e:	4a12      	ldr	r2, [pc, #72]	@ (8006388 <_sbrk+0x68>)
 8006340:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006342:	4b10      	ldr	r3, [pc, #64]	@ (8006384 <_sbrk+0x64>)
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4413      	add	r3, r2
 800634a:	693a      	ldr	r2, [r7, #16]
 800634c:	429a      	cmp	r2, r3
 800634e:	d207      	bcs.n	8006360 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006350:	f006 ffa0 	bl	800d294 <__errno>
 8006354:	4603      	mov	r3, r0
 8006356:	220c      	movs	r2, #12
 8006358:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800635a:	f04f 33ff 	mov.w	r3, #4294967295
 800635e:	e009      	b.n	8006374 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006360:	4b08      	ldr	r3, [pc, #32]	@ (8006384 <_sbrk+0x64>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006366:	4b07      	ldr	r3, [pc, #28]	@ (8006384 <_sbrk+0x64>)
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4413      	add	r3, r2
 800636e:	4a05      	ldr	r2, [pc, #20]	@ (8006384 <_sbrk+0x64>)
 8006370:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006372:	68fb      	ldr	r3, [r7, #12]
}
 8006374:	4618      	mov	r0, r3
 8006376:	3718      	adds	r7, #24
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}
 800637c:	20020000 	.word	0x20020000
 8006380:	00000400 	.word	0x00000400
 8006384:	20002688 	.word	0x20002688
 8006388:	200027f0 	.word	0x200027f0

0800638c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800638c:	b480      	push	{r7}
 800638e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006390:	4b06      	ldr	r3, [pc, #24]	@ (80063ac <SystemInit+0x20>)
 8006392:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006396:	4a05      	ldr	r2, [pc, #20]	@ (80063ac <SystemInit+0x20>)
 8006398:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800639c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80063a0:	bf00      	nop
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr
 80063aa:	bf00      	nop
 80063ac:	e000ed00 	.word	0xe000ed00

080063b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80063b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80063e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80063b4:	480d      	ldr	r0, [pc, #52]	@ (80063ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80063b6:	490e      	ldr	r1, [pc, #56]	@ (80063f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80063b8:	4a0e      	ldr	r2, [pc, #56]	@ (80063f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80063ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80063bc:	e002      	b.n	80063c4 <LoopCopyDataInit>

080063be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80063be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80063c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80063c2:	3304      	adds	r3, #4

080063c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80063c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80063c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80063c8:	d3f9      	bcc.n	80063be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80063ca:	4a0b      	ldr	r2, [pc, #44]	@ (80063f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80063cc:	4c0b      	ldr	r4, [pc, #44]	@ (80063fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80063ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80063d0:	e001      	b.n	80063d6 <LoopFillZerobss>

080063d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80063d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80063d4:	3204      	adds	r2, #4

080063d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80063d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80063d8:	d3fb      	bcc.n	80063d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80063da:	f7ff ffd7 	bl	800638c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80063de:	f006 ff5f 	bl	800d2a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80063e2:	f7fd fee9 	bl	80041b8 <main>
  bx  lr    
 80063e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80063e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80063ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80063f0:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 80063f4:	080104c0 	.word	0x080104c0
  ldr r2, =_sbss
 80063f8:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 80063fc:	200027f0 	.word	0x200027f0

08006400 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006400:	e7fe      	b.n	8006400 <CAN1_RX0_IRQHandler>
	...

08006404 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006408:	4b0e      	ldr	r3, [pc, #56]	@ (8006444 <HAL_Init+0x40>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a0d      	ldr	r2, [pc, #52]	@ (8006444 <HAL_Init+0x40>)
 800640e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006412:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006414:	4b0b      	ldr	r3, [pc, #44]	@ (8006444 <HAL_Init+0x40>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a0a      	ldr	r2, [pc, #40]	@ (8006444 <HAL_Init+0x40>)
 800641a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800641e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006420:	4b08      	ldr	r3, [pc, #32]	@ (8006444 <HAL_Init+0x40>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a07      	ldr	r2, [pc, #28]	@ (8006444 <HAL_Init+0x40>)
 8006426:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800642a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800642c:	2003      	movs	r0, #3
 800642e:	f000 fddb 	bl	8006fe8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006432:	200f      	movs	r0, #15
 8006434:	f000 f808 	bl	8006448 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006438:	f7ff fb98 	bl	8005b6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	40023c00 	.word	0x40023c00

08006448 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b082      	sub	sp, #8
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006450:	4b12      	ldr	r3, [pc, #72]	@ (800649c <HAL_InitTick+0x54>)
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	4b12      	ldr	r3, [pc, #72]	@ (80064a0 <HAL_InitTick+0x58>)
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	4619      	mov	r1, r3
 800645a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800645e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006462:	fbb2 f3f3 	udiv	r3, r2, r3
 8006466:	4618      	mov	r0, r3
 8006468:	f000 fdf3 	bl	8007052 <HAL_SYSTICK_Config>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d001      	beq.n	8006476 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	e00e      	b.n	8006494 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2b0f      	cmp	r3, #15
 800647a:	d80a      	bhi.n	8006492 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800647c:	2200      	movs	r2, #0
 800647e:	6879      	ldr	r1, [r7, #4]
 8006480:	f04f 30ff 	mov.w	r0, #4294967295
 8006484:	f000 fdbb 	bl	8006ffe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006488:	4a06      	ldr	r2, [pc, #24]	@ (80064a4 <HAL_InitTick+0x5c>)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800648e:	2300      	movs	r3, #0
 8006490:	e000      	b.n	8006494 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
}
 8006494:	4618      	mov	r0, r3
 8006496:	3708      	adds	r7, #8
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}
 800649c:	20000044 	.word	0x20000044
 80064a0:	2000004c 	.word	0x2000004c
 80064a4:	20000048 	.word	0x20000048

080064a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80064a8:	b480      	push	{r7}
 80064aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80064ac:	4b06      	ldr	r3, [pc, #24]	@ (80064c8 <HAL_IncTick+0x20>)
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	461a      	mov	r2, r3
 80064b2:	4b06      	ldr	r3, [pc, #24]	@ (80064cc <HAL_IncTick+0x24>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4413      	add	r3, r2
 80064b8:	4a04      	ldr	r2, [pc, #16]	@ (80064cc <HAL_IncTick+0x24>)
 80064ba:	6013      	str	r3, [r2, #0]
}
 80064bc:	bf00      	nop
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr
 80064c6:	bf00      	nop
 80064c8:	2000004c 	.word	0x2000004c
 80064cc:	2000268c 	.word	0x2000268c

080064d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80064d0:	b480      	push	{r7}
 80064d2:	af00      	add	r7, sp, #0
  return uwTick;
 80064d4:	4b03      	ldr	r3, [pc, #12]	@ (80064e4 <HAL_GetTick+0x14>)
 80064d6:	681b      	ldr	r3, [r3, #0]
}
 80064d8:	4618      	mov	r0, r3
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop
 80064e4:	2000268c 	.word	0x2000268c

080064e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80064f0:	f7ff ffee 	bl	80064d0 <HAL_GetTick>
 80064f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006500:	d005      	beq.n	800650e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006502:	4b0a      	ldr	r3, [pc, #40]	@ (800652c <HAL_Delay+0x44>)
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	461a      	mov	r2, r3
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	4413      	add	r3, r2
 800650c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800650e:	bf00      	nop
 8006510:	f7ff ffde 	bl	80064d0 <HAL_GetTick>
 8006514:	4602      	mov	r2, r0
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	1ad3      	subs	r3, r2, r3
 800651a:	68fa      	ldr	r2, [r7, #12]
 800651c:	429a      	cmp	r2, r3
 800651e:	d8f7      	bhi.n	8006510 <HAL_Delay+0x28>
  {
  }
}
 8006520:	bf00      	nop
 8006522:	bf00      	nop
 8006524:	3710      	adds	r7, #16
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop
 800652c:	2000004c 	.word	0x2000004c

08006530 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006538:	2300      	movs	r3, #0
 800653a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d101      	bne.n	8006546 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e033      	b.n	80065ae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800654a:	2b00      	cmp	r3, #0
 800654c:	d109      	bne.n	8006562 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f7ff fb34 	bl	8005bbc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006566:	f003 0310 	and.w	r3, r3, #16
 800656a:	2b00      	cmp	r3, #0
 800656c:	d118      	bne.n	80065a0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006572:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006576:	f023 0302 	bic.w	r3, r3, #2
 800657a:	f043 0202 	orr.w	r2, r3, #2
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 fb5a 	bl	8006c3c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006592:	f023 0303 	bic.w	r3, r3, #3
 8006596:	f043 0201 	orr.w	r2, r3, #1
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	641a      	str	r2, [r3, #64]	@ 0x40
 800659e:	e001      	b.n	80065a4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80065ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3710      	adds	r7, #16
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
	...

080065b8 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b085      	sub	sp, #20
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80065c0:	2300      	movs	r3, #0
 80065c2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d101      	bne.n	80065d2 <HAL_ADC_Start_IT+0x1a>
 80065ce:	2302      	movs	r3, #2
 80065d0:	e0bd      	b.n	800674e <HAL_ADC_Start_IT+0x196>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2201      	movs	r2, #1
 80065d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	f003 0301 	and.w	r3, r3, #1
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d018      	beq.n	800661a <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	689a      	ldr	r2, [r3, #8]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f042 0201 	orr.w	r2, r2, #1
 80065f6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80065f8:	4b58      	ldr	r3, [pc, #352]	@ (800675c <HAL_ADC_Start_IT+0x1a4>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a58      	ldr	r2, [pc, #352]	@ (8006760 <HAL_ADC_Start_IT+0x1a8>)
 80065fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006602:	0c9a      	lsrs	r2, r3, #18
 8006604:	4613      	mov	r3, r2
 8006606:	005b      	lsls	r3, r3, #1
 8006608:	4413      	add	r3, r2
 800660a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800660c:	e002      	b.n	8006614 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	3b01      	subs	r3, #1
 8006612:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d1f9      	bne.n	800660e <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	f003 0301 	and.w	r3, r3, #1
 8006624:	2b01      	cmp	r3, #1
 8006626:	f040 8085 	bne.w	8006734 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800662e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8006632:	f023 0301 	bic.w	r3, r3, #1
 8006636:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006648:	2b00      	cmp	r3, #0
 800664a:	d007      	beq.n	800665c <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006650:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006654:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006660:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006664:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006668:	d106      	bne.n	8006678 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800666e:	f023 0206 	bic.w	r2, r3, #6
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	645a      	str	r2, [r3, #68]	@ 0x44
 8006676:	e002      	b.n	800667e <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006686:	4b37      	ldr	r3, [pc, #220]	@ (8006764 <HAL_ADC_Start_IT+0x1ac>)
 8006688:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8006692:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	6812      	ldr	r2, [r2, #0]
 800669e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80066a2:	f043 0320 	orr.w	r3, r3, #32
 80066a6:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	f003 031f 	and.w	r3, r3, #31
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d12a      	bne.n	800670a <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a2b      	ldr	r2, [pc, #172]	@ (8006768 <HAL_ADC_Start_IT+0x1b0>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d015      	beq.n	80066ea <HAL_ADC_Start_IT+0x132>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a2a      	ldr	r2, [pc, #168]	@ (800676c <HAL_ADC_Start_IT+0x1b4>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d105      	bne.n	80066d4 <HAL_ADC_Start_IT+0x11c>
 80066c8:	4b26      	ldr	r3, [pc, #152]	@ (8006764 <HAL_ADC_Start_IT+0x1ac>)
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	f003 031f 	and.w	r3, r3, #31
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d00a      	beq.n	80066ea <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a25      	ldr	r2, [pc, #148]	@ (8006770 <HAL_ADC_Start_IT+0x1b8>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d136      	bne.n	800674c <HAL_ADC_Start_IT+0x194>
 80066de:	4b21      	ldr	r3, [pc, #132]	@ (8006764 <HAL_ADC_Start_IT+0x1ac>)
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	f003 0310 	and.w	r3, r3, #16
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d130      	bne.n	800674c <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d129      	bne.n	800674c <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	689a      	ldr	r2, [r3, #8]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8006706:	609a      	str	r2, [r3, #8]
 8006708:	e020      	b.n	800674c <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a16      	ldr	r2, [pc, #88]	@ (8006768 <HAL_ADC_Start_IT+0x1b0>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d11b      	bne.n	800674c <HAL_ADC_Start_IT+0x194>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800671e:	2b00      	cmp	r3, #0
 8006720:	d114      	bne.n	800674c <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	689a      	ldr	r2, [r3, #8]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8006730:	609a      	str	r2, [r3, #8]
 8006732:	e00b      	b.n	800674c <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006738:	f043 0210 	orr.w	r2, r3, #16
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006744:	f043 0201 	orr.w	r2, r3, #1
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	3714      	adds	r7, #20
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr
 800675a:	bf00      	nop
 800675c:	20000044 	.word	0x20000044
 8006760:	431bde83 	.word	0x431bde83
 8006764:	40012300 	.word	0x40012300
 8006768:	40012000 	.word	0x40012000
 800676c:	40012100 	.word	0x40012100
 8006770:	40012200 	.word	0x40012200

08006774 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b086      	sub	sp, #24
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800677c:	2300      	movs	r3, #0
 800677e:	617b      	str	r3, [r7, #20]
 8006780:	2300      	movs	r3, #0
 8006782:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f003 0302 	and.w	r3, r3, #2
 800679a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	f003 0320 	and.w	r3, r3, #32
 80067a2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d049      	beq.n	800683e <HAL_ADC_IRQHandler+0xca>
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d046      	beq.n	800683e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067b4:	f003 0310 	and.w	r3, r3, #16
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d105      	bne.n	80067c8 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067c0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d12b      	bne.n	800682e <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d127      	bne.n	800682e <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067e4:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d006      	beq.n	80067fa <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d119      	bne.n	800682e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	685a      	ldr	r2, [r3, #4]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f022 0220 	bic.w	r2, r2, #32
 8006808:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800680e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800681a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800681e:	2b00      	cmp	r3, #0
 8006820:	d105      	bne.n	800682e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006826:	f043 0201 	orr.w	r2, r3, #1
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f7fd fca0 	bl	8004174 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f06f 0212 	mvn.w	r2, #18
 800683c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	f003 0304 	and.w	r3, r3, #4
 8006844:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800684c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d057      	beq.n	8006904 <HAL_ADC_IRQHandler+0x190>
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d054      	beq.n	8006904 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800685e:	f003 0310 	and.w	r3, r3, #16
 8006862:	2b00      	cmp	r3, #0
 8006864:	d105      	bne.n	8006872 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800686a:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800687c:	2b00      	cmp	r3, #0
 800687e:	d139      	bne.n	80068f4 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006886:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800688a:	2b00      	cmp	r3, #0
 800688c:	d006      	beq.n	800689c <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8006898:	2b00      	cmp	r3, #0
 800689a:	d12b      	bne.n	80068f4 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d124      	bne.n	80068f4 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d11d      	bne.n	80068f4 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d119      	bne.n	80068f4 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	685a      	ldr	r2, [r3, #4]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80068ce:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068d4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d105      	bne.n	80068f4 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068ec:	f043 0201 	orr.w	r2, r3, #1
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 fa9d 	bl	8006e34 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f06f 020c 	mvn.w	r2, #12
 8006902:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f003 0301 	and.w	r3, r3, #1
 800690a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006912:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d017      	beq.n	800694a <HAL_ADC_IRQHandler+0x1d6>
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d014      	beq.n	800694a <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 0301 	and.w	r3, r3, #1
 800692a:	2b01      	cmp	r3, #1
 800692c:	d10d      	bne.n	800694a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006932:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 f837 	bl	80069ae <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f06f 0201 	mvn.w	r2, #1
 8006948:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f003 0320 	and.w	r3, r3, #32
 8006950:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006958:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d015      	beq.n	800698c <HAL_ADC_IRQHandler+0x218>
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d012      	beq.n	800698c <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800696a:	f043 0202 	orr.w	r2, r3, #2
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f06f 0220 	mvn.w	r2, #32
 800697a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f000 f820 	bl	80069c2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f06f 0220 	mvn.w	r2, #32
 800698a:	601a      	str	r2, [r3, #0]
  }
}
 800698c:	bf00      	nop
 800698e:	3718      	adds	r7, #24
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	370c      	adds	r7, #12
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr

080069ae <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80069ae:	b480      	push	{r7}
 80069b0:	b083      	sub	sp, #12
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80069b6:	bf00      	nop
 80069b8:	370c      	adds	r7, #12
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr

080069c2 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80069c2:	b480      	push	{r7}
 80069c4:	b083      	sub	sp, #12
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80069ca:	bf00      	nop
 80069cc:	370c      	adds	r7, #12
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr
	...

080069d8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80069d8:	b480      	push	{r7}
 80069da:	b085      	sub	sp, #20
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80069e2:	2300      	movs	r3, #0
 80069e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d101      	bne.n	80069f4 <HAL_ADC_ConfigChannel+0x1c>
 80069f0:	2302      	movs	r3, #2
 80069f2:	e113      	b.n	8006c1c <HAL_ADC_ConfigChannel+0x244>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2201      	movs	r2, #1
 80069f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2b09      	cmp	r3, #9
 8006a02:	d925      	bls.n	8006a50 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68d9      	ldr	r1, [r3, #12]
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	461a      	mov	r2, r3
 8006a12:	4613      	mov	r3, r2
 8006a14:	005b      	lsls	r3, r3, #1
 8006a16:	4413      	add	r3, r2
 8006a18:	3b1e      	subs	r3, #30
 8006a1a:	2207      	movs	r2, #7
 8006a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a20:	43da      	mvns	r2, r3
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	400a      	ands	r2, r1
 8006a28:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	68d9      	ldr	r1, [r3, #12]
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	689a      	ldr	r2, [r3, #8]
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	005b      	lsls	r3, r3, #1
 8006a40:	4403      	add	r3, r0
 8006a42:	3b1e      	subs	r3, #30
 8006a44:	409a      	lsls	r2, r3
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	430a      	orrs	r2, r1
 8006a4c:	60da      	str	r2, [r3, #12]
 8006a4e:	e022      	b.n	8006a96 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	6919      	ldr	r1, [r3, #16]
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	4613      	mov	r3, r2
 8006a60:	005b      	lsls	r3, r3, #1
 8006a62:	4413      	add	r3, r2
 8006a64:	2207      	movs	r2, #7
 8006a66:	fa02 f303 	lsl.w	r3, r2, r3
 8006a6a:	43da      	mvns	r2, r3
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	400a      	ands	r2, r1
 8006a72:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	6919      	ldr	r1, [r3, #16]
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	689a      	ldr	r2, [r3, #8]
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	4618      	mov	r0, r3
 8006a86:	4603      	mov	r3, r0
 8006a88:	005b      	lsls	r3, r3, #1
 8006a8a:	4403      	add	r3, r0
 8006a8c:	409a      	lsls	r2, r3
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	430a      	orrs	r2, r1
 8006a94:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	2b06      	cmp	r3, #6
 8006a9c:	d824      	bhi.n	8006ae8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	685a      	ldr	r2, [r3, #4]
 8006aa8:	4613      	mov	r3, r2
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	4413      	add	r3, r2
 8006aae:	3b05      	subs	r3, #5
 8006ab0:	221f      	movs	r2, #31
 8006ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab6:	43da      	mvns	r2, r3
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	400a      	ands	r2, r1
 8006abe:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	4618      	mov	r0, r3
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	685a      	ldr	r2, [r3, #4]
 8006ad2:	4613      	mov	r3, r2
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	4413      	add	r3, r2
 8006ad8:	3b05      	subs	r3, #5
 8006ada:	fa00 f203 	lsl.w	r2, r0, r3
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	430a      	orrs	r2, r1
 8006ae4:	635a      	str	r2, [r3, #52]	@ 0x34
 8006ae6:	e04c      	b.n	8006b82 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	2b0c      	cmp	r3, #12
 8006aee:	d824      	bhi.n	8006b3a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	685a      	ldr	r2, [r3, #4]
 8006afa:	4613      	mov	r3, r2
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	4413      	add	r3, r2
 8006b00:	3b23      	subs	r3, #35	@ 0x23
 8006b02:	221f      	movs	r2, #31
 8006b04:	fa02 f303 	lsl.w	r3, r2, r3
 8006b08:	43da      	mvns	r2, r3
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	400a      	ands	r2, r1
 8006b10:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	4618      	mov	r0, r3
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	685a      	ldr	r2, [r3, #4]
 8006b24:	4613      	mov	r3, r2
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	4413      	add	r3, r2
 8006b2a:	3b23      	subs	r3, #35	@ 0x23
 8006b2c:	fa00 f203 	lsl.w	r2, r0, r3
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	430a      	orrs	r2, r1
 8006b36:	631a      	str	r2, [r3, #48]	@ 0x30
 8006b38:	e023      	b.n	8006b82 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	685a      	ldr	r2, [r3, #4]
 8006b44:	4613      	mov	r3, r2
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	4413      	add	r3, r2
 8006b4a:	3b41      	subs	r3, #65	@ 0x41
 8006b4c:	221f      	movs	r2, #31
 8006b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b52:	43da      	mvns	r2, r3
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	400a      	ands	r2, r1
 8006b5a:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	4618      	mov	r0, r3
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	685a      	ldr	r2, [r3, #4]
 8006b6e:	4613      	mov	r3, r2
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	4413      	add	r3, r2
 8006b74:	3b41      	subs	r3, #65	@ 0x41
 8006b76:	fa00 f203 	lsl.w	r2, r0, r3
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	430a      	orrs	r2, r1
 8006b80:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006b82:	4b29      	ldr	r3, [pc, #164]	@ (8006c28 <HAL_ADC_ConfigChannel+0x250>)
 8006b84:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a28      	ldr	r2, [pc, #160]	@ (8006c2c <HAL_ADC_ConfigChannel+0x254>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d10f      	bne.n	8006bb0 <HAL_ADC_ConfigChannel+0x1d8>
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	2b12      	cmp	r3, #18
 8006b96:	d10b      	bne.n	8006bb0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a1d      	ldr	r2, [pc, #116]	@ (8006c2c <HAL_ADC_ConfigChannel+0x254>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d12b      	bne.n	8006c12 <HAL_ADC_ConfigChannel+0x23a>
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a1c      	ldr	r2, [pc, #112]	@ (8006c30 <HAL_ADC_ConfigChannel+0x258>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d003      	beq.n	8006bcc <HAL_ADC_ConfigChannel+0x1f4>
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	2b11      	cmp	r3, #17
 8006bca:	d122      	bne.n	8006c12 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a11      	ldr	r2, [pc, #68]	@ (8006c30 <HAL_ADC_ConfigChannel+0x258>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d111      	bne.n	8006c12 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006bee:	4b11      	ldr	r3, [pc, #68]	@ (8006c34 <HAL_ADC_ConfigChannel+0x25c>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a11      	ldr	r2, [pc, #68]	@ (8006c38 <HAL_ADC_ConfigChannel+0x260>)
 8006bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8006bf8:	0c9a      	lsrs	r2, r3, #18
 8006bfa:	4613      	mov	r3, r2
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	4413      	add	r3, r2
 8006c00:	005b      	lsls	r3, r3, #1
 8006c02:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006c04:	e002      	b.n	8006c0c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	3b01      	subs	r3, #1
 8006c0a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d1f9      	bne.n	8006c06 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006c1a:	2300      	movs	r3, #0
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3714      	adds	r7, #20
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr
 8006c28:	40012300 	.word	0x40012300
 8006c2c:	40012000 	.word	0x40012000
 8006c30:	10000012 	.word	0x10000012
 8006c34:	20000044 	.word	0x20000044
 8006c38:	431bde83 	.word	0x431bde83

08006c3c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b085      	sub	sp, #20
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006c44:	4b79      	ldr	r3, [pc, #484]	@ (8006e2c <ADC_Init+0x1f0>)
 8006c46:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	685a      	ldr	r2, [r3, #4]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	431a      	orrs	r2, r3
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	685a      	ldr	r2, [r3, #4]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006c70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	6859      	ldr	r1, [r3, #4]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	691b      	ldr	r3, [r3, #16]
 8006c7c:	021a      	lsls	r2, r3, #8
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	430a      	orrs	r2, r1
 8006c84:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	685a      	ldr	r2, [r3, #4]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8006c94:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	6859      	ldr	r1, [r3, #4]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	689a      	ldr	r2, [r3, #8]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	430a      	orrs	r2, r1
 8006ca6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	689a      	ldr	r2, [r3, #8]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006cb6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	6899      	ldr	r1, [r3, #8]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	68da      	ldr	r2, [r3, #12]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	430a      	orrs	r2, r1
 8006cc8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cce:	4a58      	ldr	r2, [pc, #352]	@ (8006e30 <ADC_Init+0x1f4>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d022      	beq.n	8006d1a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	689a      	ldr	r2, [r3, #8]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006ce2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	6899      	ldr	r1, [r3, #8]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	430a      	orrs	r2, r1
 8006cf4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	689a      	ldr	r2, [r3, #8]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006d04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	6899      	ldr	r1, [r3, #8]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	430a      	orrs	r2, r1
 8006d16:	609a      	str	r2, [r3, #8]
 8006d18:	e00f      	b.n	8006d3a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	689a      	ldr	r2, [r3, #8]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006d28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	689a      	ldr	r2, [r3, #8]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006d38:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	689a      	ldr	r2, [r3, #8]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f022 0202 	bic.w	r2, r2, #2
 8006d48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	6899      	ldr	r1, [r3, #8]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	7e1b      	ldrb	r3, [r3, #24]
 8006d54:	005a      	lsls	r2, r3, #1
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	430a      	orrs	r2, r1
 8006d5c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d01b      	beq.n	8006da0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	685a      	ldr	r2, [r3, #4]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d76:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	685a      	ldr	r2, [r3, #4]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8006d86:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	6859      	ldr	r1, [r3, #4]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d92:	3b01      	subs	r3, #1
 8006d94:	035a      	lsls	r2, r3, #13
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	430a      	orrs	r2, r1
 8006d9c:	605a      	str	r2, [r3, #4]
 8006d9e:	e007      	b.n	8006db0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	685a      	ldr	r2, [r3, #4]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006dae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8006dbe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	69db      	ldr	r3, [r3, #28]
 8006dca:	3b01      	subs	r3, #1
 8006dcc:	051a      	lsls	r2, r3, #20
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	430a      	orrs	r2, r1
 8006dd4:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	689a      	ldr	r2, [r3, #8]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006de4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	6899      	ldr	r1, [r3, #8]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006df2:	025a      	lsls	r2, r3, #9
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	430a      	orrs	r2, r1
 8006dfa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	689a      	ldr	r2, [r3, #8]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	6899      	ldr	r1, [r3, #8]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	695b      	ldr	r3, [r3, #20]
 8006e16:	029a      	lsls	r2, r3, #10
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	430a      	orrs	r2, r1
 8006e1e:	609a      	str	r2, [r3, #8]
}
 8006e20:	bf00      	nop
 8006e22:	3714      	adds	r7, #20
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr
 8006e2c:	40012300 	.word	0x40012300
 8006e30:	0f000001 	.word	0x0f000001

08006e34 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8006e3c:	bf00      	nop
 8006e3e:	370c      	adds	r7, #12
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b085      	sub	sp, #20
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f003 0307 	and.w	r3, r3, #7
 8006e56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006e58:	4b0c      	ldr	r3, [pc, #48]	@ (8006e8c <__NVIC_SetPriorityGrouping+0x44>)
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006e5e:	68ba      	ldr	r2, [r7, #8]
 8006e60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006e64:	4013      	ands	r3, r2
 8006e66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006e70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006e74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006e7a:	4a04      	ldr	r2, [pc, #16]	@ (8006e8c <__NVIC_SetPriorityGrouping+0x44>)
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	60d3      	str	r3, [r2, #12]
}
 8006e80:	bf00      	nop
 8006e82:	3714      	adds	r7, #20
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr
 8006e8c:	e000ed00 	.word	0xe000ed00

08006e90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006e90:	b480      	push	{r7}
 8006e92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006e94:	4b04      	ldr	r3, [pc, #16]	@ (8006ea8 <__NVIC_GetPriorityGrouping+0x18>)
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	0a1b      	lsrs	r3, r3, #8
 8006e9a:	f003 0307 	and.w	r3, r3, #7
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr
 8006ea8:	e000ed00 	.word	0xe000ed00

08006eac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	db0b      	blt.n	8006ed6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006ebe:	79fb      	ldrb	r3, [r7, #7]
 8006ec0:	f003 021f 	and.w	r2, r3, #31
 8006ec4:	4907      	ldr	r1, [pc, #28]	@ (8006ee4 <__NVIC_EnableIRQ+0x38>)
 8006ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006eca:	095b      	lsrs	r3, r3, #5
 8006ecc:	2001      	movs	r0, #1
 8006ece:	fa00 f202 	lsl.w	r2, r0, r2
 8006ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006ed6:	bf00      	nop
 8006ed8:	370c      	adds	r7, #12
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr
 8006ee2:	bf00      	nop
 8006ee4:	e000e100 	.word	0xe000e100

08006ee8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	4603      	mov	r3, r0
 8006ef0:	6039      	str	r1, [r7, #0]
 8006ef2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	db0a      	blt.n	8006f12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	b2da      	uxtb	r2, r3
 8006f00:	490c      	ldr	r1, [pc, #48]	@ (8006f34 <__NVIC_SetPriority+0x4c>)
 8006f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f06:	0112      	lsls	r2, r2, #4
 8006f08:	b2d2      	uxtb	r2, r2
 8006f0a:	440b      	add	r3, r1
 8006f0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006f10:	e00a      	b.n	8006f28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	b2da      	uxtb	r2, r3
 8006f16:	4908      	ldr	r1, [pc, #32]	@ (8006f38 <__NVIC_SetPriority+0x50>)
 8006f18:	79fb      	ldrb	r3, [r7, #7]
 8006f1a:	f003 030f 	and.w	r3, r3, #15
 8006f1e:	3b04      	subs	r3, #4
 8006f20:	0112      	lsls	r2, r2, #4
 8006f22:	b2d2      	uxtb	r2, r2
 8006f24:	440b      	add	r3, r1
 8006f26:	761a      	strb	r2, [r3, #24]
}
 8006f28:	bf00      	nop
 8006f2a:	370c      	adds	r7, #12
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr
 8006f34:	e000e100 	.word	0xe000e100
 8006f38:	e000ed00 	.word	0xe000ed00

08006f3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b089      	sub	sp, #36	@ 0x24
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	60f8      	str	r0, [r7, #12]
 8006f44:	60b9      	str	r1, [r7, #8]
 8006f46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f003 0307 	and.w	r3, r3, #7
 8006f4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006f50:	69fb      	ldr	r3, [r7, #28]
 8006f52:	f1c3 0307 	rsb	r3, r3, #7
 8006f56:	2b04      	cmp	r3, #4
 8006f58:	bf28      	it	cs
 8006f5a:	2304      	movcs	r3, #4
 8006f5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006f5e:	69fb      	ldr	r3, [r7, #28]
 8006f60:	3304      	adds	r3, #4
 8006f62:	2b06      	cmp	r3, #6
 8006f64:	d902      	bls.n	8006f6c <NVIC_EncodePriority+0x30>
 8006f66:	69fb      	ldr	r3, [r7, #28]
 8006f68:	3b03      	subs	r3, #3
 8006f6a:	e000      	b.n	8006f6e <NVIC_EncodePriority+0x32>
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f70:	f04f 32ff 	mov.w	r2, #4294967295
 8006f74:	69bb      	ldr	r3, [r7, #24]
 8006f76:	fa02 f303 	lsl.w	r3, r2, r3
 8006f7a:	43da      	mvns	r2, r3
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	401a      	ands	r2, r3
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006f84:	f04f 31ff 	mov.w	r1, #4294967295
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8006f8e:	43d9      	mvns	r1, r3
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f94:	4313      	orrs	r3, r2
         );
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3724      	adds	r7, #36	@ 0x24
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr
	...

08006fa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b082      	sub	sp, #8
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	3b01      	subs	r3, #1
 8006fb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006fb4:	d301      	bcc.n	8006fba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e00f      	b.n	8006fda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006fba:	4a0a      	ldr	r2, [pc, #40]	@ (8006fe4 <SysTick_Config+0x40>)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	3b01      	subs	r3, #1
 8006fc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006fc2:	210f      	movs	r1, #15
 8006fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8006fc8:	f7ff ff8e 	bl	8006ee8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006fcc:	4b05      	ldr	r3, [pc, #20]	@ (8006fe4 <SysTick_Config+0x40>)
 8006fce:	2200      	movs	r2, #0
 8006fd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006fd2:	4b04      	ldr	r3, [pc, #16]	@ (8006fe4 <SysTick_Config+0x40>)
 8006fd4:	2207      	movs	r2, #7
 8006fd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006fd8:	2300      	movs	r3, #0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3708      	adds	r7, #8
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	e000e010 	.word	0xe000e010

08006fe8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b082      	sub	sp, #8
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f7ff ff29 	bl	8006e48 <__NVIC_SetPriorityGrouping>
}
 8006ff6:	bf00      	nop
 8006ff8:	3708      	adds	r7, #8
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}

08006ffe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006ffe:	b580      	push	{r7, lr}
 8007000:	b086      	sub	sp, #24
 8007002:	af00      	add	r7, sp, #0
 8007004:	4603      	mov	r3, r0
 8007006:	60b9      	str	r1, [r7, #8]
 8007008:	607a      	str	r2, [r7, #4]
 800700a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800700c:	2300      	movs	r3, #0
 800700e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007010:	f7ff ff3e 	bl	8006e90 <__NVIC_GetPriorityGrouping>
 8007014:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007016:	687a      	ldr	r2, [r7, #4]
 8007018:	68b9      	ldr	r1, [r7, #8]
 800701a:	6978      	ldr	r0, [r7, #20]
 800701c:	f7ff ff8e 	bl	8006f3c <NVIC_EncodePriority>
 8007020:	4602      	mov	r2, r0
 8007022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007026:	4611      	mov	r1, r2
 8007028:	4618      	mov	r0, r3
 800702a:	f7ff ff5d 	bl	8006ee8 <__NVIC_SetPriority>
}
 800702e:	bf00      	nop
 8007030:	3718      	adds	r7, #24
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}

08007036 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007036:	b580      	push	{r7, lr}
 8007038:	b082      	sub	sp, #8
 800703a:	af00      	add	r7, sp, #0
 800703c:	4603      	mov	r3, r0
 800703e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007044:	4618      	mov	r0, r3
 8007046:	f7ff ff31 	bl	8006eac <__NVIC_EnableIRQ>
}
 800704a:	bf00      	nop
 800704c:	3708      	adds	r7, #8
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}

08007052 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007052:	b580      	push	{r7, lr}
 8007054:	b082      	sub	sp, #8
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f7ff ffa2 	bl	8006fa4 <SysTick_Config>
 8007060:	4603      	mov	r3, r0
}
 8007062:	4618      	mov	r0, r3
 8007064:	3708      	adds	r7, #8
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}

0800706a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800706a:	b580      	push	{r7, lr}
 800706c:	b084      	sub	sp, #16
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007076:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007078:	f7ff fa2a 	bl	80064d0 <HAL_GetTick>
 800707c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007084:	b2db      	uxtb	r3, r3
 8007086:	2b02      	cmp	r3, #2
 8007088:	d008      	beq.n	800709c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2280      	movs	r2, #128	@ 0x80
 800708e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8007098:	2301      	movs	r3, #1
 800709a:	e052      	b.n	8007142 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f022 0216 	bic.w	r2, r2, #22
 80070aa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	695a      	ldr	r2, [r3, #20]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80070ba:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d103      	bne.n	80070cc <HAL_DMA_Abort+0x62>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d007      	beq.n	80070dc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	681a      	ldr	r2, [r3, #0]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f022 0208 	bic.w	r2, r2, #8
 80070da:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	681a      	ldr	r2, [r3, #0]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f022 0201 	bic.w	r2, r2, #1
 80070ea:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80070ec:	e013      	b.n	8007116 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80070ee:	f7ff f9ef 	bl	80064d0 <HAL_GetTick>
 80070f2:	4602      	mov	r2, r0
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	1ad3      	subs	r3, r2, r3
 80070f8:	2b05      	cmp	r3, #5
 80070fa:	d90c      	bls.n	8007116 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2220      	movs	r2, #32
 8007100:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2203      	movs	r2, #3
 8007106:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2200      	movs	r2, #0
 800710e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8007112:	2303      	movs	r3, #3
 8007114:	e015      	b.n	8007142 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f003 0301 	and.w	r3, r3, #1
 8007120:	2b00      	cmp	r3, #0
 8007122:	d1e4      	bne.n	80070ee <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007128:	223f      	movs	r2, #63	@ 0x3f
 800712a:	409a      	lsls	r2, r3
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8007140:	2300      	movs	r3, #0
}
 8007142:	4618      	mov	r0, r3
 8007144:	3710      	adds	r7, #16
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}

0800714a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800714a:	b480      	push	{r7}
 800714c:	b083      	sub	sp, #12
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007158:	b2db      	uxtb	r3, r3
 800715a:	2b02      	cmp	r3, #2
 800715c:	d004      	beq.n	8007168 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2280      	movs	r2, #128	@ 0x80
 8007162:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8007164:	2301      	movs	r3, #1
 8007166:	e00c      	b.n	8007182 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2205      	movs	r2, #5
 800716c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f022 0201 	bic.w	r2, r2, #1
 800717e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007180:	2300      	movs	r3, #0
}
 8007182:	4618      	mov	r0, r3
 8007184:	370c      	adds	r7, #12
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr
	...

08007190 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007190:	b480      	push	{r7}
 8007192:	b089      	sub	sp, #36	@ 0x24
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800719a:	2300      	movs	r3, #0
 800719c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800719e:	2300      	movs	r3, #0
 80071a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80071a2:	2300      	movs	r3, #0
 80071a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80071a6:	2300      	movs	r3, #0
 80071a8:	61fb      	str	r3, [r7, #28]
 80071aa:	e165      	b.n	8007478 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80071ac:	2201      	movs	r2, #1
 80071ae:	69fb      	ldr	r3, [r7, #28]
 80071b0:	fa02 f303 	lsl.w	r3, r2, r3
 80071b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	697a      	ldr	r2, [r7, #20]
 80071bc:	4013      	ands	r3, r2
 80071be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80071c0:	693a      	ldr	r2, [r7, #16]
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	429a      	cmp	r2, r3
 80071c6:	f040 8154 	bne.w	8007472 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	f003 0303 	and.w	r3, r3, #3
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d005      	beq.n	80071e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80071de:	2b02      	cmp	r3, #2
 80071e0:	d130      	bne.n	8007244 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80071e8:	69fb      	ldr	r3, [r7, #28]
 80071ea:	005b      	lsls	r3, r3, #1
 80071ec:	2203      	movs	r2, #3
 80071ee:	fa02 f303 	lsl.w	r3, r2, r3
 80071f2:	43db      	mvns	r3, r3
 80071f4:	69ba      	ldr	r2, [r7, #24]
 80071f6:	4013      	ands	r3, r2
 80071f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	68da      	ldr	r2, [r3, #12]
 80071fe:	69fb      	ldr	r3, [r7, #28]
 8007200:	005b      	lsls	r3, r3, #1
 8007202:	fa02 f303 	lsl.w	r3, r2, r3
 8007206:	69ba      	ldr	r2, [r7, #24]
 8007208:	4313      	orrs	r3, r2
 800720a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	69ba      	ldr	r2, [r7, #24]
 8007210:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007218:	2201      	movs	r2, #1
 800721a:	69fb      	ldr	r3, [r7, #28]
 800721c:	fa02 f303 	lsl.w	r3, r2, r3
 8007220:	43db      	mvns	r3, r3
 8007222:	69ba      	ldr	r2, [r7, #24]
 8007224:	4013      	ands	r3, r2
 8007226:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	091b      	lsrs	r3, r3, #4
 800722e:	f003 0201 	and.w	r2, r3, #1
 8007232:	69fb      	ldr	r3, [r7, #28]
 8007234:	fa02 f303 	lsl.w	r3, r2, r3
 8007238:	69ba      	ldr	r2, [r7, #24]
 800723a:	4313      	orrs	r3, r2
 800723c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	69ba      	ldr	r2, [r7, #24]
 8007242:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	f003 0303 	and.w	r3, r3, #3
 800724c:	2b03      	cmp	r3, #3
 800724e:	d017      	beq.n	8007280 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007256:	69fb      	ldr	r3, [r7, #28]
 8007258:	005b      	lsls	r3, r3, #1
 800725a:	2203      	movs	r2, #3
 800725c:	fa02 f303 	lsl.w	r3, r2, r3
 8007260:	43db      	mvns	r3, r3
 8007262:	69ba      	ldr	r2, [r7, #24]
 8007264:	4013      	ands	r3, r2
 8007266:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	689a      	ldr	r2, [r3, #8]
 800726c:	69fb      	ldr	r3, [r7, #28]
 800726e:	005b      	lsls	r3, r3, #1
 8007270:	fa02 f303 	lsl.w	r3, r2, r3
 8007274:	69ba      	ldr	r2, [r7, #24]
 8007276:	4313      	orrs	r3, r2
 8007278:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	69ba      	ldr	r2, [r7, #24]
 800727e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	f003 0303 	and.w	r3, r3, #3
 8007288:	2b02      	cmp	r3, #2
 800728a:	d123      	bne.n	80072d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800728c:	69fb      	ldr	r3, [r7, #28]
 800728e:	08da      	lsrs	r2, r3, #3
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	3208      	adds	r2, #8
 8007294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007298:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800729a:	69fb      	ldr	r3, [r7, #28]
 800729c:	f003 0307 	and.w	r3, r3, #7
 80072a0:	009b      	lsls	r3, r3, #2
 80072a2:	220f      	movs	r2, #15
 80072a4:	fa02 f303 	lsl.w	r3, r2, r3
 80072a8:	43db      	mvns	r3, r3
 80072aa:	69ba      	ldr	r2, [r7, #24]
 80072ac:	4013      	ands	r3, r2
 80072ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	691a      	ldr	r2, [r3, #16]
 80072b4:	69fb      	ldr	r3, [r7, #28]
 80072b6:	f003 0307 	and.w	r3, r3, #7
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	fa02 f303 	lsl.w	r3, r2, r3
 80072c0:	69ba      	ldr	r2, [r7, #24]
 80072c2:	4313      	orrs	r3, r2
 80072c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	08da      	lsrs	r2, r3, #3
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	3208      	adds	r2, #8
 80072ce:	69b9      	ldr	r1, [r7, #24]
 80072d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	005b      	lsls	r3, r3, #1
 80072de:	2203      	movs	r2, #3
 80072e0:	fa02 f303 	lsl.w	r3, r2, r3
 80072e4:	43db      	mvns	r3, r3
 80072e6:	69ba      	ldr	r2, [r7, #24]
 80072e8:	4013      	ands	r3, r2
 80072ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	f003 0203 	and.w	r2, r3, #3
 80072f4:	69fb      	ldr	r3, [r7, #28]
 80072f6:	005b      	lsls	r3, r3, #1
 80072f8:	fa02 f303 	lsl.w	r3, r2, r3
 80072fc:	69ba      	ldr	r2, [r7, #24]
 80072fe:	4313      	orrs	r3, r2
 8007300:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	69ba      	ldr	r2, [r7, #24]
 8007306:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007310:	2b00      	cmp	r3, #0
 8007312:	f000 80ae 	beq.w	8007472 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007316:	2300      	movs	r3, #0
 8007318:	60fb      	str	r3, [r7, #12]
 800731a:	4b5d      	ldr	r3, [pc, #372]	@ (8007490 <HAL_GPIO_Init+0x300>)
 800731c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800731e:	4a5c      	ldr	r2, [pc, #368]	@ (8007490 <HAL_GPIO_Init+0x300>)
 8007320:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007324:	6453      	str	r3, [r2, #68]	@ 0x44
 8007326:	4b5a      	ldr	r3, [pc, #360]	@ (8007490 <HAL_GPIO_Init+0x300>)
 8007328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800732a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800732e:	60fb      	str	r3, [r7, #12]
 8007330:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007332:	4a58      	ldr	r2, [pc, #352]	@ (8007494 <HAL_GPIO_Init+0x304>)
 8007334:	69fb      	ldr	r3, [r7, #28]
 8007336:	089b      	lsrs	r3, r3, #2
 8007338:	3302      	adds	r3, #2
 800733a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800733e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007340:	69fb      	ldr	r3, [r7, #28]
 8007342:	f003 0303 	and.w	r3, r3, #3
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	220f      	movs	r2, #15
 800734a:	fa02 f303 	lsl.w	r3, r2, r3
 800734e:	43db      	mvns	r3, r3
 8007350:	69ba      	ldr	r2, [r7, #24]
 8007352:	4013      	ands	r3, r2
 8007354:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	4a4f      	ldr	r2, [pc, #316]	@ (8007498 <HAL_GPIO_Init+0x308>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d025      	beq.n	80073aa <HAL_GPIO_Init+0x21a>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	4a4e      	ldr	r2, [pc, #312]	@ (800749c <HAL_GPIO_Init+0x30c>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d01f      	beq.n	80073a6 <HAL_GPIO_Init+0x216>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	4a4d      	ldr	r2, [pc, #308]	@ (80074a0 <HAL_GPIO_Init+0x310>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d019      	beq.n	80073a2 <HAL_GPIO_Init+0x212>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	4a4c      	ldr	r2, [pc, #304]	@ (80074a4 <HAL_GPIO_Init+0x314>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d013      	beq.n	800739e <HAL_GPIO_Init+0x20e>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	4a4b      	ldr	r2, [pc, #300]	@ (80074a8 <HAL_GPIO_Init+0x318>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d00d      	beq.n	800739a <HAL_GPIO_Init+0x20a>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	4a4a      	ldr	r2, [pc, #296]	@ (80074ac <HAL_GPIO_Init+0x31c>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d007      	beq.n	8007396 <HAL_GPIO_Init+0x206>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	4a49      	ldr	r2, [pc, #292]	@ (80074b0 <HAL_GPIO_Init+0x320>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d101      	bne.n	8007392 <HAL_GPIO_Init+0x202>
 800738e:	2306      	movs	r3, #6
 8007390:	e00c      	b.n	80073ac <HAL_GPIO_Init+0x21c>
 8007392:	2307      	movs	r3, #7
 8007394:	e00a      	b.n	80073ac <HAL_GPIO_Init+0x21c>
 8007396:	2305      	movs	r3, #5
 8007398:	e008      	b.n	80073ac <HAL_GPIO_Init+0x21c>
 800739a:	2304      	movs	r3, #4
 800739c:	e006      	b.n	80073ac <HAL_GPIO_Init+0x21c>
 800739e:	2303      	movs	r3, #3
 80073a0:	e004      	b.n	80073ac <HAL_GPIO_Init+0x21c>
 80073a2:	2302      	movs	r3, #2
 80073a4:	e002      	b.n	80073ac <HAL_GPIO_Init+0x21c>
 80073a6:	2301      	movs	r3, #1
 80073a8:	e000      	b.n	80073ac <HAL_GPIO_Init+0x21c>
 80073aa:	2300      	movs	r3, #0
 80073ac:	69fa      	ldr	r2, [r7, #28]
 80073ae:	f002 0203 	and.w	r2, r2, #3
 80073b2:	0092      	lsls	r2, r2, #2
 80073b4:	4093      	lsls	r3, r2
 80073b6:	69ba      	ldr	r2, [r7, #24]
 80073b8:	4313      	orrs	r3, r2
 80073ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80073bc:	4935      	ldr	r1, [pc, #212]	@ (8007494 <HAL_GPIO_Init+0x304>)
 80073be:	69fb      	ldr	r3, [r7, #28]
 80073c0:	089b      	lsrs	r3, r3, #2
 80073c2:	3302      	adds	r3, #2
 80073c4:	69ba      	ldr	r2, [r7, #24]
 80073c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80073ca:	4b3a      	ldr	r3, [pc, #232]	@ (80074b4 <HAL_GPIO_Init+0x324>)
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	43db      	mvns	r3, r3
 80073d4:	69ba      	ldr	r2, [r7, #24]
 80073d6:	4013      	ands	r3, r2
 80073d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d003      	beq.n	80073ee <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80073e6:	69ba      	ldr	r2, [r7, #24]
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80073ee:	4a31      	ldr	r2, [pc, #196]	@ (80074b4 <HAL_GPIO_Init+0x324>)
 80073f0:	69bb      	ldr	r3, [r7, #24]
 80073f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80073f4:	4b2f      	ldr	r3, [pc, #188]	@ (80074b4 <HAL_GPIO_Init+0x324>)
 80073f6:	68db      	ldr	r3, [r3, #12]
 80073f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	43db      	mvns	r3, r3
 80073fe:	69ba      	ldr	r2, [r7, #24]
 8007400:	4013      	ands	r3, r2
 8007402:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800740c:	2b00      	cmp	r3, #0
 800740e:	d003      	beq.n	8007418 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8007410:	69ba      	ldr	r2, [r7, #24]
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	4313      	orrs	r3, r2
 8007416:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007418:	4a26      	ldr	r2, [pc, #152]	@ (80074b4 <HAL_GPIO_Init+0x324>)
 800741a:	69bb      	ldr	r3, [r7, #24]
 800741c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800741e:	4b25      	ldr	r3, [pc, #148]	@ (80074b4 <HAL_GPIO_Init+0x324>)
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	43db      	mvns	r3, r3
 8007428:	69ba      	ldr	r2, [r7, #24]
 800742a:	4013      	ands	r3, r2
 800742c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007436:	2b00      	cmp	r3, #0
 8007438:	d003      	beq.n	8007442 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800743a:	69ba      	ldr	r2, [r7, #24]
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	4313      	orrs	r3, r2
 8007440:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007442:	4a1c      	ldr	r2, [pc, #112]	@ (80074b4 <HAL_GPIO_Init+0x324>)
 8007444:	69bb      	ldr	r3, [r7, #24]
 8007446:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007448:	4b1a      	ldr	r3, [pc, #104]	@ (80074b4 <HAL_GPIO_Init+0x324>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	43db      	mvns	r3, r3
 8007452:	69ba      	ldr	r2, [r7, #24]
 8007454:	4013      	ands	r3, r2
 8007456:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007460:	2b00      	cmp	r3, #0
 8007462:	d003      	beq.n	800746c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007464:	69ba      	ldr	r2, [r7, #24]
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	4313      	orrs	r3, r2
 800746a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800746c:	4a11      	ldr	r2, [pc, #68]	@ (80074b4 <HAL_GPIO_Init+0x324>)
 800746e:	69bb      	ldr	r3, [r7, #24]
 8007470:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007472:	69fb      	ldr	r3, [r7, #28]
 8007474:	3301      	adds	r3, #1
 8007476:	61fb      	str	r3, [r7, #28]
 8007478:	69fb      	ldr	r3, [r7, #28]
 800747a:	2b0f      	cmp	r3, #15
 800747c:	f67f ae96 	bls.w	80071ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007480:	bf00      	nop
 8007482:	bf00      	nop
 8007484:	3724      	adds	r7, #36	@ 0x24
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr
 800748e:	bf00      	nop
 8007490:	40023800 	.word	0x40023800
 8007494:	40013800 	.word	0x40013800
 8007498:	40020000 	.word	0x40020000
 800749c:	40020400 	.word	0x40020400
 80074a0:	40020800 	.word	0x40020800
 80074a4:	40020c00 	.word	0x40020c00
 80074a8:	40021000 	.word	0x40021000
 80074ac:	40021400 	.word	0x40021400
 80074b0:	40021800 	.word	0x40021800
 80074b4:	40013c00 	.word	0x40013c00

080074b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b085      	sub	sp, #20
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	460b      	mov	r3, r1
 80074c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	691a      	ldr	r2, [r3, #16]
 80074c8:	887b      	ldrh	r3, [r7, #2]
 80074ca:	4013      	ands	r3, r2
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d002      	beq.n	80074d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80074d0:	2301      	movs	r3, #1
 80074d2:	73fb      	strb	r3, [r7, #15]
 80074d4:	e001      	b.n	80074da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80074d6:	2300      	movs	r3, #0
 80074d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80074da:	7bfb      	ldrb	r3, [r7, #15]
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3714      	adds	r7, #20
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b083      	sub	sp, #12
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	460b      	mov	r3, r1
 80074f2:	807b      	strh	r3, [r7, #2]
 80074f4:	4613      	mov	r3, r2
 80074f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80074f8:	787b      	ldrb	r3, [r7, #1]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d003      	beq.n	8007506 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80074fe:	887a      	ldrh	r2, [r7, #2]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007504:	e003      	b.n	800750e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007506:	887b      	ldrh	r3, [r7, #2]
 8007508:	041a      	lsls	r2, r3, #16
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	619a      	str	r2, [r3, #24]
}
 800750e:	bf00      	nop
 8007510:	370c      	adds	r7, #12
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr

0800751a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800751a:	b480      	push	{r7}
 800751c:	b085      	sub	sp, #20
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
 8007522:	460b      	mov	r3, r1
 8007524:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	695b      	ldr	r3, [r3, #20]
 800752a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800752c:	887a      	ldrh	r2, [r7, #2]
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	4013      	ands	r3, r2
 8007532:	041a      	lsls	r2, r3, #16
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	43d9      	mvns	r1, r3
 8007538:	887b      	ldrh	r3, [r7, #2]
 800753a:	400b      	ands	r3, r1
 800753c:	431a      	orrs	r2, r3
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	619a      	str	r2, [r3, #24]
}
 8007542:	bf00      	nop
 8007544:	3714      	adds	r7, #20
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr
	...

08007550 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b084      	sub	sp, #16
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d101      	bne.n	8007562 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800755e:	2301      	movs	r3, #1
 8007560:	e12b      	b.n	80077ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007568:	b2db      	uxtb	r3, r3
 800756a:	2b00      	cmp	r3, #0
 800756c:	d106      	bne.n	800757c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f7fe fb6c 	bl	8005c54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2224      	movs	r2, #36	@ 0x24
 8007580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f022 0201 	bic.w	r2, r2, #1
 8007592:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80075a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80075b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80075b4:	f001 fcf2 	bl	8008f9c <HAL_RCC_GetPCLK1Freq>
 80075b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	4a81      	ldr	r2, [pc, #516]	@ (80077c4 <HAL_I2C_Init+0x274>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d807      	bhi.n	80075d4 <HAL_I2C_Init+0x84>
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	4a80      	ldr	r2, [pc, #512]	@ (80077c8 <HAL_I2C_Init+0x278>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	bf94      	ite	ls
 80075cc:	2301      	movls	r3, #1
 80075ce:	2300      	movhi	r3, #0
 80075d0:	b2db      	uxtb	r3, r3
 80075d2:	e006      	b.n	80075e2 <HAL_I2C_Init+0x92>
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	4a7d      	ldr	r2, [pc, #500]	@ (80077cc <HAL_I2C_Init+0x27c>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	bf94      	ite	ls
 80075dc:	2301      	movls	r3, #1
 80075de:	2300      	movhi	r3, #0
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d001      	beq.n	80075ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80075e6:	2301      	movs	r3, #1
 80075e8:	e0e7      	b.n	80077ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	4a78      	ldr	r2, [pc, #480]	@ (80077d0 <HAL_I2C_Init+0x280>)
 80075ee:	fba2 2303 	umull	r2, r3, r2, r3
 80075f2:	0c9b      	lsrs	r3, r3, #18
 80075f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	68ba      	ldr	r2, [r7, #8]
 8007606:	430a      	orrs	r2, r1
 8007608:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	6a1b      	ldr	r3, [r3, #32]
 8007610:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	4a6a      	ldr	r2, [pc, #424]	@ (80077c4 <HAL_I2C_Init+0x274>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d802      	bhi.n	8007624 <HAL_I2C_Init+0xd4>
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	3301      	adds	r3, #1
 8007622:	e009      	b.n	8007638 <HAL_I2C_Init+0xe8>
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800762a:	fb02 f303 	mul.w	r3, r2, r3
 800762e:	4a69      	ldr	r2, [pc, #420]	@ (80077d4 <HAL_I2C_Init+0x284>)
 8007630:	fba2 2303 	umull	r2, r3, r2, r3
 8007634:	099b      	lsrs	r3, r3, #6
 8007636:	3301      	adds	r3, #1
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	6812      	ldr	r2, [r2, #0]
 800763c:	430b      	orrs	r3, r1
 800763e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	69db      	ldr	r3, [r3, #28]
 8007646:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800764a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	495c      	ldr	r1, [pc, #368]	@ (80077c4 <HAL_I2C_Init+0x274>)
 8007654:	428b      	cmp	r3, r1
 8007656:	d819      	bhi.n	800768c <HAL_I2C_Init+0x13c>
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	1e59      	subs	r1, r3, #1
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	005b      	lsls	r3, r3, #1
 8007662:	fbb1 f3f3 	udiv	r3, r1, r3
 8007666:	1c59      	adds	r1, r3, #1
 8007668:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800766c:	400b      	ands	r3, r1
 800766e:	2b00      	cmp	r3, #0
 8007670:	d00a      	beq.n	8007688 <HAL_I2C_Init+0x138>
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	1e59      	subs	r1, r3, #1
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	005b      	lsls	r3, r3, #1
 800767c:	fbb1 f3f3 	udiv	r3, r1, r3
 8007680:	3301      	adds	r3, #1
 8007682:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007686:	e051      	b.n	800772c <HAL_I2C_Init+0x1dc>
 8007688:	2304      	movs	r3, #4
 800768a:	e04f      	b.n	800772c <HAL_I2C_Init+0x1dc>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d111      	bne.n	80076b8 <HAL_I2C_Init+0x168>
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	1e58      	subs	r0, r3, #1
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6859      	ldr	r1, [r3, #4]
 800769c:	460b      	mov	r3, r1
 800769e:	005b      	lsls	r3, r3, #1
 80076a0:	440b      	add	r3, r1
 80076a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80076a6:	3301      	adds	r3, #1
 80076a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	bf0c      	ite	eq
 80076b0:	2301      	moveq	r3, #1
 80076b2:	2300      	movne	r3, #0
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	e012      	b.n	80076de <HAL_I2C_Init+0x18e>
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	1e58      	subs	r0, r3, #1
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6859      	ldr	r1, [r3, #4]
 80076c0:	460b      	mov	r3, r1
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	440b      	add	r3, r1
 80076c6:	0099      	lsls	r1, r3, #2
 80076c8:	440b      	add	r3, r1
 80076ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80076ce:	3301      	adds	r3, #1
 80076d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	bf0c      	ite	eq
 80076d8:	2301      	moveq	r3, #1
 80076da:	2300      	movne	r3, #0
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d001      	beq.n	80076e6 <HAL_I2C_Init+0x196>
 80076e2:	2301      	movs	r3, #1
 80076e4:	e022      	b.n	800772c <HAL_I2C_Init+0x1dc>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d10e      	bne.n	800770c <HAL_I2C_Init+0x1bc>
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	1e58      	subs	r0, r3, #1
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6859      	ldr	r1, [r3, #4]
 80076f6:	460b      	mov	r3, r1
 80076f8:	005b      	lsls	r3, r3, #1
 80076fa:	440b      	add	r3, r1
 80076fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8007700:	3301      	adds	r3, #1
 8007702:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007706:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800770a:	e00f      	b.n	800772c <HAL_I2C_Init+0x1dc>
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	1e58      	subs	r0, r3, #1
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6859      	ldr	r1, [r3, #4]
 8007714:	460b      	mov	r3, r1
 8007716:	009b      	lsls	r3, r3, #2
 8007718:	440b      	add	r3, r1
 800771a:	0099      	lsls	r1, r3, #2
 800771c:	440b      	add	r3, r1
 800771e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007722:	3301      	adds	r3, #1
 8007724:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007728:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800772c:	6879      	ldr	r1, [r7, #4]
 800772e:	6809      	ldr	r1, [r1, #0]
 8007730:	4313      	orrs	r3, r2
 8007732:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	69da      	ldr	r2, [r3, #28]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6a1b      	ldr	r3, [r3, #32]
 8007746:	431a      	orrs	r2, r3
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	430a      	orrs	r2, r1
 800774e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800775a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800775e:	687a      	ldr	r2, [r7, #4]
 8007760:	6911      	ldr	r1, [r2, #16]
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	68d2      	ldr	r2, [r2, #12]
 8007766:	4311      	orrs	r1, r2
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	6812      	ldr	r2, [r2, #0]
 800776c:	430b      	orrs	r3, r1
 800776e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	68db      	ldr	r3, [r3, #12]
 8007776:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	695a      	ldr	r2, [r3, #20]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	699b      	ldr	r3, [r3, #24]
 8007782:	431a      	orrs	r2, r3
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	430a      	orrs	r2, r1
 800778a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	681a      	ldr	r2, [r3, #0]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f042 0201 	orr.w	r2, r2, #1
 800779a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2200      	movs	r2, #0
 80077a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2220      	movs	r2, #32
 80077a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2200      	movs	r2, #0
 80077b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80077b8:	2300      	movs	r3, #0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3710      	adds	r7, #16
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop
 80077c4:	000186a0 	.word	0x000186a0
 80077c8:	001e847f 	.word	0x001e847f
 80077cc:	003d08ff 	.word	0x003d08ff
 80077d0:	431bde83 	.word	0x431bde83
 80077d4:	10624dd3 	.word	0x10624dd3

080077d8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b088      	sub	sp, #32
 80077dc:	af02      	add	r7, sp, #8
 80077de:	60f8      	str	r0, [r7, #12]
 80077e0:	607a      	str	r2, [r7, #4]
 80077e2:	461a      	mov	r2, r3
 80077e4:	460b      	mov	r3, r1
 80077e6:	817b      	strh	r3, [r7, #10]
 80077e8:	4613      	mov	r3, r2
 80077ea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80077ec:	f7fe fe70 	bl	80064d0 <HAL_GetTick>
 80077f0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	2b20      	cmp	r3, #32
 80077fc:	f040 80e0 	bne.w	80079c0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	9300      	str	r3, [sp, #0]
 8007804:	2319      	movs	r3, #25
 8007806:	2201      	movs	r2, #1
 8007808:	4970      	ldr	r1, [pc, #448]	@ (80079cc <HAL_I2C_Master_Transmit+0x1f4>)
 800780a:	68f8      	ldr	r0, [r7, #12]
 800780c:	f001 f8f6 	bl	80089fc <I2C_WaitOnFlagUntilTimeout>
 8007810:	4603      	mov	r3, r0
 8007812:	2b00      	cmp	r3, #0
 8007814:	d001      	beq.n	800781a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007816:	2302      	movs	r3, #2
 8007818:	e0d3      	b.n	80079c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007820:	2b01      	cmp	r3, #1
 8007822:	d101      	bne.n	8007828 <HAL_I2C_Master_Transmit+0x50>
 8007824:	2302      	movs	r3, #2
 8007826:	e0cc      	b.n	80079c2 <HAL_I2C_Master_Transmit+0x1ea>
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2201      	movs	r2, #1
 800782c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f003 0301 	and.w	r3, r3, #1
 800783a:	2b01      	cmp	r3, #1
 800783c:	d007      	beq.n	800784e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f042 0201 	orr.w	r2, r2, #1
 800784c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800785c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2221      	movs	r2, #33	@ 0x21
 8007862:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2210      	movs	r2, #16
 800786a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2200      	movs	r2, #0
 8007872:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	893a      	ldrh	r2, [r7, #8]
 800787e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007884:	b29a      	uxth	r2, r3
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	4a50      	ldr	r2, [pc, #320]	@ (80079d0 <HAL_I2C_Master_Transmit+0x1f8>)
 800788e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007890:	8979      	ldrh	r1, [r7, #10]
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	6a3a      	ldr	r2, [r7, #32]
 8007896:	68f8      	ldr	r0, [r7, #12]
 8007898:	f000 fde2 	bl	8008460 <I2C_MasterRequestWrite>
 800789c:	4603      	mov	r3, r0
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d001      	beq.n	80078a6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	e08d      	b.n	80079c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078a6:	2300      	movs	r3, #0
 80078a8:	613b      	str	r3, [r7, #16]
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	695b      	ldr	r3, [r3, #20]
 80078b0:	613b      	str	r3, [r7, #16]
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	699b      	ldr	r3, [r3, #24]
 80078b8:	613b      	str	r3, [r7, #16]
 80078ba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80078bc:	e066      	b.n	800798c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80078be:	697a      	ldr	r2, [r7, #20]
 80078c0:	6a39      	ldr	r1, [r7, #32]
 80078c2:	68f8      	ldr	r0, [r7, #12]
 80078c4:	f001 f970 	bl	8008ba8 <I2C_WaitOnTXEFlagUntilTimeout>
 80078c8:	4603      	mov	r3, r0
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d00d      	beq.n	80078ea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078d2:	2b04      	cmp	r3, #4
 80078d4:	d107      	bne.n	80078e6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80078e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80078e6:	2301      	movs	r3, #1
 80078e8:	e06b      	b.n	80079c2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078ee:	781a      	ldrb	r2, [r3, #0]
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078fa:	1c5a      	adds	r2, r3, #1
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007904:	b29b      	uxth	r3, r3
 8007906:	3b01      	subs	r3, #1
 8007908:	b29a      	uxth	r2, r3
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007912:	3b01      	subs	r3, #1
 8007914:	b29a      	uxth	r2, r3
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	695b      	ldr	r3, [r3, #20]
 8007920:	f003 0304 	and.w	r3, r3, #4
 8007924:	2b04      	cmp	r3, #4
 8007926:	d11b      	bne.n	8007960 <HAL_I2C_Master_Transmit+0x188>
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800792c:	2b00      	cmp	r3, #0
 800792e:	d017      	beq.n	8007960 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007934:	781a      	ldrb	r2, [r3, #0]
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007940:	1c5a      	adds	r2, r3, #1
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800794a:	b29b      	uxth	r3, r3
 800794c:	3b01      	subs	r3, #1
 800794e:	b29a      	uxth	r2, r3
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007958:	3b01      	subs	r3, #1
 800795a:	b29a      	uxth	r2, r3
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007960:	697a      	ldr	r2, [r7, #20]
 8007962:	6a39      	ldr	r1, [r7, #32]
 8007964:	68f8      	ldr	r0, [r7, #12]
 8007966:	f001 f960 	bl	8008c2a <I2C_WaitOnBTFFlagUntilTimeout>
 800796a:	4603      	mov	r3, r0
 800796c:	2b00      	cmp	r3, #0
 800796e:	d00d      	beq.n	800798c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007974:	2b04      	cmp	r3, #4
 8007976:	d107      	bne.n	8007988 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007986:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007988:	2301      	movs	r3, #1
 800798a:	e01a      	b.n	80079c2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007990:	2b00      	cmp	r3, #0
 8007992:	d194      	bne.n	80078be <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80079a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2220      	movs	r2, #32
 80079a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2200      	movs	r2, #0
 80079b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2200      	movs	r2, #0
 80079b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80079bc:	2300      	movs	r3, #0
 80079be:	e000      	b.n	80079c2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80079c0:	2302      	movs	r3, #2
  }
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3718      	adds	r7, #24
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	00100002 	.word	0x00100002
 80079d0:	ffff0000 	.word	0xffff0000

080079d4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b08c      	sub	sp, #48	@ 0x30
 80079d8:	af02      	add	r7, sp, #8
 80079da:	60f8      	str	r0, [r7, #12]
 80079dc:	607a      	str	r2, [r7, #4]
 80079de:	461a      	mov	r2, r3
 80079e0:	460b      	mov	r3, r1
 80079e2:	817b      	strh	r3, [r7, #10]
 80079e4:	4613      	mov	r3, r2
 80079e6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80079e8:	f7fe fd72 	bl	80064d0 <HAL_GetTick>
 80079ec:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079f4:	b2db      	uxtb	r3, r3
 80079f6:	2b20      	cmp	r3, #32
 80079f8:	f040 820b 	bne.w	8007e12 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80079fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079fe:	9300      	str	r3, [sp, #0]
 8007a00:	2319      	movs	r3, #25
 8007a02:	2201      	movs	r2, #1
 8007a04:	497c      	ldr	r1, [pc, #496]	@ (8007bf8 <HAL_I2C_Master_Receive+0x224>)
 8007a06:	68f8      	ldr	r0, [r7, #12]
 8007a08:	f000 fff8 	bl	80089fc <I2C_WaitOnFlagUntilTimeout>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d001      	beq.n	8007a16 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8007a12:	2302      	movs	r3, #2
 8007a14:	e1fe      	b.n	8007e14 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d101      	bne.n	8007a24 <HAL_I2C_Master_Receive+0x50>
 8007a20:	2302      	movs	r3, #2
 8007a22:	e1f7      	b.n	8007e14 <HAL_I2C_Master_Receive+0x440>
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2201      	movs	r2, #1
 8007a28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f003 0301 	and.w	r3, r3, #1
 8007a36:	2b01      	cmp	r3, #1
 8007a38:	d007      	beq.n	8007a4a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	681a      	ldr	r2, [r3, #0]
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f042 0201 	orr.w	r2, r2, #1
 8007a48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	681a      	ldr	r2, [r3, #0]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007a58:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2222      	movs	r2, #34	@ 0x22
 8007a5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2210      	movs	r2, #16
 8007a66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	687a      	ldr	r2, [r7, #4]
 8007a74:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	893a      	ldrh	r2, [r7, #8]
 8007a7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a80:	b29a      	uxth	r2, r3
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	4a5c      	ldr	r2, [pc, #368]	@ (8007bfc <HAL_I2C_Master_Receive+0x228>)
 8007a8a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007a8c:	8979      	ldrh	r1, [r7, #10]
 8007a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a92:	68f8      	ldr	r0, [r7, #12]
 8007a94:	f000 fd66 	bl	8008564 <I2C_MasterRequestRead>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d001      	beq.n	8007aa2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	e1b8      	b.n	8007e14 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d113      	bne.n	8007ad2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007aaa:	2300      	movs	r3, #0
 8007aac:	623b      	str	r3, [r7, #32]
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	695b      	ldr	r3, [r3, #20]
 8007ab4:	623b      	str	r3, [r7, #32]
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	699b      	ldr	r3, [r3, #24]
 8007abc:	623b      	str	r3, [r7, #32]
 8007abe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007ace:	601a      	str	r2, [r3, #0]
 8007ad0:	e18c      	b.n	8007dec <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ad6:	2b01      	cmp	r3, #1
 8007ad8:	d11b      	bne.n	8007b12 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ae8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007aea:	2300      	movs	r3, #0
 8007aec:	61fb      	str	r3, [r7, #28]
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	695b      	ldr	r3, [r3, #20]
 8007af4:	61fb      	str	r3, [r7, #28]
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	699b      	ldr	r3, [r3, #24]
 8007afc:	61fb      	str	r3, [r7, #28]
 8007afe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	681a      	ldr	r2, [r3, #0]
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007b0e:	601a      	str	r2, [r3, #0]
 8007b10:	e16c      	b.n	8007dec <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b16:	2b02      	cmp	r3, #2
 8007b18:	d11b      	bne.n	8007b52 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	681a      	ldr	r2, [r3, #0]
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007b28:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007b38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	61bb      	str	r3, [r7, #24]
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	695b      	ldr	r3, [r3, #20]
 8007b44:	61bb      	str	r3, [r7, #24]
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	699b      	ldr	r3, [r3, #24]
 8007b4c:	61bb      	str	r3, [r7, #24]
 8007b4e:	69bb      	ldr	r3, [r7, #24]
 8007b50:	e14c      	b.n	8007dec <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	681a      	ldr	r2, [r3, #0]
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007b60:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b62:	2300      	movs	r3, #0
 8007b64:	617b      	str	r3, [r7, #20]
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	695b      	ldr	r3, [r3, #20]
 8007b6c:	617b      	str	r3, [r7, #20]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	699b      	ldr	r3, [r3, #24]
 8007b74:	617b      	str	r3, [r7, #20]
 8007b76:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007b78:	e138      	b.n	8007dec <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b7e:	2b03      	cmp	r3, #3
 8007b80:	f200 80f1 	bhi.w	8007d66 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d123      	bne.n	8007bd4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b8e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007b90:	68f8      	ldr	r0, [r7, #12]
 8007b92:	f001 f88b 	bl	8008cac <I2C_WaitOnRXNEFlagUntilTimeout>
 8007b96:	4603      	mov	r3, r0
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d001      	beq.n	8007ba0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	e139      	b.n	8007e14 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	691a      	ldr	r2, [r3, #16]
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007baa:	b2d2      	uxtb	r2, r2
 8007bac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bb2:	1c5a      	adds	r2, r3, #1
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bbc:	3b01      	subs	r3, #1
 8007bbe:	b29a      	uxth	r2, r3
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	3b01      	subs	r3, #1
 8007bcc:	b29a      	uxth	r2, r3
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007bd2:	e10b      	b.n	8007dec <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bd8:	2b02      	cmp	r3, #2
 8007bda:	d14e      	bne.n	8007c7a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bde:	9300      	str	r3, [sp, #0]
 8007be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007be2:	2200      	movs	r2, #0
 8007be4:	4906      	ldr	r1, [pc, #24]	@ (8007c00 <HAL_I2C_Master_Receive+0x22c>)
 8007be6:	68f8      	ldr	r0, [r7, #12]
 8007be8:	f000 ff08 	bl	80089fc <I2C_WaitOnFlagUntilTimeout>
 8007bec:	4603      	mov	r3, r0
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d008      	beq.n	8007c04 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e10e      	b.n	8007e14 <HAL_I2C_Master_Receive+0x440>
 8007bf6:	bf00      	nop
 8007bf8:	00100002 	.word	0x00100002
 8007bfc:	ffff0000 	.word	0xffff0000
 8007c00:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	681a      	ldr	r2, [r3, #0]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007c12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	691a      	ldr	r2, [r3, #16]
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c1e:	b2d2      	uxtb	r2, r2
 8007c20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c26:	1c5a      	adds	r2, r3, #1
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c30:	3b01      	subs	r3, #1
 8007c32:	b29a      	uxth	r2, r3
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	3b01      	subs	r3, #1
 8007c40:	b29a      	uxth	r2, r3
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	691a      	ldr	r2, [r3, #16]
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c50:	b2d2      	uxtb	r2, r2
 8007c52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c58:	1c5a      	adds	r2, r3, #1
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c62:	3b01      	subs	r3, #1
 8007c64:	b29a      	uxth	r2, r3
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	3b01      	subs	r3, #1
 8007c72:	b29a      	uxth	r2, r3
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007c78:	e0b8      	b.n	8007dec <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c7c:	9300      	str	r3, [sp, #0]
 8007c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c80:	2200      	movs	r2, #0
 8007c82:	4966      	ldr	r1, [pc, #408]	@ (8007e1c <HAL_I2C_Master_Receive+0x448>)
 8007c84:	68f8      	ldr	r0, [r7, #12]
 8007c86:	f000 feb9 	bl	80089fc <I2C_WaitOnFlagUntilTimeout>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d001      	beq.n	8007c94 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8007c90:	2301      	movs	r3, #1
 8007c92:	e0bf      	b.n	8007e14 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ca2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	691a      	ldr	r2, [r3, #16]
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cae:	b2d2      	uxtb	r2, r2
 8007cb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cb6:	1c5a      	adds	r2, r3, #1
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007cc0:	3b01      	subs	r3, #1
 8007cc2:	b29a      	uxth	r2, r3
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	3b01      	subs	r3, #1
 8007cd0:	b29a      	uxth	r2, r3
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd8:	9300      	str	r3, [sp, #0]
 8007cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cdc:	2200      	movs	r2, #0
 8007cde:	494f      	ldr	r1, [pc, #316]	@ (8007e1c <HAL_I2C_Master_Receive+0x448>)
 8007ce0:	68f8      	ldr	r0, [r7, #12]
 8007ce2:	f000 fe8b 	bl	80089fc <I2C_WaitOnFlagUntilTimeout>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d001      	beq.n	8007cf0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8007cec:	2301      	movs	r3, #1
 8007cee:	e091      	b.n	8007e14 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	681a      	ldr	r2, [r3, #0]
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007cfe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	691a      	ldr	r2, [r3, #16]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d0a:	b2d2      	uxtb	r2, r2
 8007d0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d12:	1c5a      	adds	r2, r3, #1
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d1c:	3b01      	subs	r3, #1
 8007d1e:	b29a      	uxth	r2, r3
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	3b01      	subs	r3, #1
 8007d2c:	b29a      	uxth	r2, r3
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	691a      	ldr	r2, [r3, #16]
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d3c:	b2d2      	uxtb	r2, r2
 8007d3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d44:	1c5a      	adds	r2, r3, #1
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d4e:	3b01      	subs	r3, #1
 8007d50:	b29a      	uxth	r2, r3
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	3b01      	subs	r3, #1
 8007d5e:	b29a      	uxth	r2, r3
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007d64:	e042      	b.n	8007dec <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d68:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007d6a:	68f8      	ldr	r0, [r7, #12]
 8007d6c:	f000 ff9e 	bl	8008cac <I2C_WaitOnRXNEFlagUntilTimeout>
 8007d70:	4603      	mov	r3, r0
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d001      	beq.n	8007d7a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8007d76:	2301      	movs	r3, #1
 8007d78:	e04c      	b.n	8007e14 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	691a      	ldr	r2, [r3, #16]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d84:	b2d2      	uxtb	r2, r2
 8007d86:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d8c:	1c5a      	adds	r2, r3, #1
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d96:	3b01      	subs	r3, #1
 8007d98:	b29a      	uxth	r2, r3
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	3b01      	subs	r3, #1
 8007da6:	b29a      	uxth	r2, r3
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	695b      	ldr	r3, [r3, #20]
 8007db2:	f003 0304 	and.w	r3, r3, #4
 8007db6:	2b04      	cmp	r3, #4
 8007db8:	d118      	bne.n	8007dec <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	691a      	ldr	r2, [r3, #16]
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dc4:	b2d2      	uxtb	r2, r2
 8007dc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dcc:	1c5a      	adds	r2, r3, #1
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007dd6:	3b01      	subs	r3, #1
 8007dd8:	b29a      	uxth	r2, r3
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	3b01      	subs	r3, #1
 8007de6:	b29a      	uxth	r2, r3
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	f47f aec2 	bne.w	8007b7a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2220      	movs	r2, #32
 8007dfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2200      	movs	r2, #0
 8007e02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	e000      	b.n	8007e14 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007e12:	2302      	movs	r3, #2
  }
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3728      	adds	r7, #40	@ 0x28
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}
 8007e1c:	00010004 	.word	0x00010004

08007e20 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b088      	sub	sp, #32
 8007e24:	af02      	add	r7, sp, #8
 8007e26:	60f8      	str	r0, [r7, #12]
 8007e28:	4608      	mov	r0, r1
 8007e2a:	4611      	mov	r1, r2
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	4603      	mov	r3, r0
 8007e30:	817b      	strh	r3, [r7, #10]
 8007e32:	460b      	mov	r3, r1
 8007e34:	813b      	strh	r3, [r7, #8]
 8007e36:	4613      	mov	r3, r2
 8007e38:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007e3a:	f7fe fb49 	bl	80064d0 <HAL_GetTick>
 8007e3e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	2b20      	cmp	r3, #32
 8007e4a:	f040 80d9 	bne.w	8008000 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	9300      	str	r3, [sp, #0]
 8007e52:	2319      	movs	r3, #25
 8007e54:	2201      	movs	r2, #1
 8007e56:	496d      	ldr	r1, [pc, #436]	@ (800800c <HAL_I2C_Mem_Write+0x1ec>)
 8007e58:	68f8      	ldr	r0, [r7, #12]
 8007e5a:	f000 fdcf 	bl	80089fc <I2C_WaitOnFlagUntilTimeout>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d001      	beq.n	8007e68 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007e64:	2302      	movs	r3, #2
 8007e66:	e0cc      	b.n	8008002 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e6e:	2b01      	cmp	r3, #1
 8007e70:	d101      	bne.n	8007e76 <HAL_I2C_Mem_Write+0x56>
 8007e72:	2302      	movs	r3, #2
 8007e74:	e0c5      	b.n	8008002 <HAL_I2C_Mem_Write+0x1e2>
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2201      	movs	r2, #1
 8007e7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f003 0301 	and.w	r3, r3, #1
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d007      	beq.n	8007e9c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f042 0201 	orr.w	r2, r2, #1
 8007e9a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007eaa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2221      	movs	r2, #33	@ 0x21
 8007eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2240      	movs	r2, #64	@ 0x40
 8007eb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	6a3a      	ldr	r2, [r7, #32]
 8007ec6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007ecc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ed2:	b29a      	uxth	r2, r3
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	4a4d      	ldr	r2, [pc, #308]	@ (8008010 <HAL_I2C_Mem_Write+0x1f0>)
 8007edc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007ede:	88f8      	ldrh	r0, [r7, #6]
 8007ee0:	893a      	ldrh	r2, [r7, #8]
 8007ee2:	8979      	ldrh	r1, [r7, #10]
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	9301      	str	r3, [sp, #4]
 8007ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eea:	9300      	str	r3, [sp, #0]
 8007eec:	4603      	mov	r3, r0
 8007eee:	68f8      	ldr	r0, [r7, #12]
 8007ef0:	f000 fc06 	bl	8008700 <I2C_RequestMemoryWrite>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d052      	beq.n	8007fa0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	e081      	b.n	8008002 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007efe:	697a      	ldr	r2, [r7, #20]
 8007f00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f02:	68f8      	ldr	r0, [r7, #12]
 8007f04:	f000 fe50 	bl	8008ba8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d00d      	beq.n	8007f2a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f12:	2b04      	cmp	r3, #4
 8007f14:	d107      	bne.n	8007f26 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	681a      	ldr	r2, [r3, #0]
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007f24:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007f26:	2301      	movs	r3, #1
 8007f28:	e06b      	b.n	8008002 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f2e:	781a      	ldrb	r2, [r3, #0]
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f3a:	1c5a      	adds	r2, r3, #1
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f44:	3b01      	subs	r3, #1
 8007f46:	b29a      	uxth	r2, r3
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	3b01      	subs	r3, #1
 8007f54:	b29a      	uxth	r2, r3
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	695b      	ldr	r3, [r3, #20]
 8007f60:	f003 0304 	and.w	r3, r3, #4
 8007f64:	2b04      	cmp	r3, #4
 8007f66:	d11b      	bne.n	8007fa0 <HAL_I2C_Mem_Write+0x180>
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d017      	beq.n	8007fa0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f74:	781a      	ldrb	r2, [r3, #0]
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f80:	1c5a      	adds	r2, r3, #1
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f8a:	3b01      	subs	r3, #1
 8007f8c:	b29a      	uxth	r2, r3
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	3b01      	subs	r3, #1
 8007f9a:	b29a      	uxth	r2, r3
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d1aa      	bne.n	8007efe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007fa8:	697a      	ldr	r2, [r7, #20]
 8007faa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007fac:	68f8      	ldr	r0, [r7, #12]
 8007fae:	f000 fe3c 	bl	8008c2a <I2C_WaitOnBTFFlagUntilTimeout>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d00d      	beq.n	8007fd4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fbc:	2b04      	cmp	r3, #4
 8007fbe:	d107      	bne.n	8007fd0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	681a      	ldr	r2, [r3, #0]
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007fce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	e016      	b.n	8008002 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007fe2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2220      	movs	r2, #32
 8007fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	e000      	b.n	8008002 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008000:	2302      	movs	r3, #2
  }
}
 8008002:	4618      	mov	r0, r3
 8008004:	3718      	adds	r7, #24
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
 800800a:	bf00      	nop
 800800c:	00100002 	.word	0x00100002
 8008010:	ffff0000 	.word	0xffff0000

08008014 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b08c      	sub	sp, #48	@ 0x30
 8008018:	af02      	add	r7, sp, #8
 800801a:	60f8      	str	r0, [r7, #12]
 800801c:	4608      	mov	r0, r1
 800801e:	4611      	mov	r1, r2
 8008020:	461a      	mov	r2, r3
 8008022:	4603      	mov	r3, r0
 8008024:	817b      	strh	r3, [r7, #10]
 8008026:	460b      	mov	r3, r1
 8008028:	813b      	strh	r3, [r7, #8]
 800802a:	4613      	mov	r3, r2
 800802c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800802e:	f7fe fa4f 	bl	80064d0 <HAL_GetTick>
 8008032:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800803a:	b2db      	uxtb	r3, r3
 800803c:	2b20      	cmp	r3, #32
 800803e:	f040 8208 	bne.w	8008452 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008044:	9300      	str	r3, [sp, #0]
 8008046:	2319      	movs	r3, #25
 8008048:	2201      	movs	r2, #1
 800804a:	497b      	ldr	r1, [pc, #492]	@ (8008238 <HAL_I2C_Mem_Read+0x224>)
 800804c:	68f8      	ldr	r0, [r7, #12]
 800804e:	f000 fcd5 	bl	80089fc <I2C_WaitOnFlagUntilTimeout>
 8008052:	4603      	mov	r3, r0
 8008054:	2b00      	cmp	r3, #0
 8008056:	d001      	beq.n	800805c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008058:	2302      	movs	r3, #2
 800805a:	e1fb      	b.n	8008454 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008062:	2b01      	cmp	r3, #1
 8008064:	d101      	bne.n	800806a <HAL_I2C_Mem_Read+0x56>
 8008066:	2302      	movs	r3, #2
 8008068:	e1f4      	b.n	8008454 <HAL_I2C_Mem_Read+0x440>
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	2201      	movs	r2, #1
 800806e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f003 0301 	and.w	r3, r3, #1
 800807c:	2b01      	cmp	r3, #1
 800807e:	d007      	beq.n	8008090 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f042 0201 	orr.w	r2, r2, #1
 800808e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	681a      	ldr	r2, [r3, #0]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800809e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2222      	movs	r2, #34	@ 0x22
 80080a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	2240      	movs	r2, #64	@ 0x40
 80080ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2200      	movs	r2, #0
 80080b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80080c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080c6:	b29a      	uxth	r2, r3
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	4a5b      	ldr	r2, [pc, #364]	@ (800823c <HAL_I2C_Mem_Read+0x228>)
 80080d0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80080d2:	88f8      	ldrh	r0, [r7, #6]
 80080d4:	893a      	ldrh	r2, [r7, #8]
 80080d6:	8979      	ldrh	r1, [r7, #10]
 80080d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080da:	9301      	str	r3, [sp, #4]
 80080dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080de:	9300      	str	r3, [sp, #0]
 80080e0:	4603      	mov	r3, r0
 80080e2:	68f8      	ldr	r0, [r7, #12]
 80080e4:	f000 fba2 	bl	800882c <I2C_RequestMemoryRead>
 80080e8:	4603      	mov	r3, r0
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d001      	beq.n	80080f2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80080ee:	2301      	movs	r3, #1
 80080f0:	e1b0      	b.n	8008454 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d113      	bne.n	8008122 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80080fa:	2300      	movs	r3, #0
 80080fc:	623b      	str	r3, [r7, #32]
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	695b      	ldr	r3, [r3, #20]
 8008104:	623b      	str	r3, [r7, #32]
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	699b      	ldr	r3, [r3, #24]
 800810c:	623b      	str	r3, [r7, #32]
 800810e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800811e:	601a      	str	r2, [r3, #0]
 8008120:	e184      	b.n	800842c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008126:	2b01      	cmp	r3, #1
 8008128:	d11b      	bne.n	8008162 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	681a      	ldr	r2, [r3, #0]
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008138:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800813a:	2300      	movs	r3, #0
 800813c:	61fb      	str	r3, [r7, #28]
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	695b      	ldr	r3, [r3, #20]
 8008144:	61fb      	str	r3, [r7, #28]
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	699b      	ldr	r3, [r3, #24]
 800814c:	61fb      	str	r3, [r7, #28]
 800814e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	681a      	ldr	r2, [r3, #0]
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800815e:	601a      	str	r2, [r3, #0]
 8008160:	e164      	b.n	800842c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008166:	2b02      	cmp	r3, #2
 8008168:	d11b      	bne.n	80081a2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	681a      	ldr	r2, [r3, #0]
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008178:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	681a      	ldr	r2, [r3, #0]
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008188:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800818a:	2300      	movs	r3, #0
 800818c:	61bb      	str	r3, [r7, #24]
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	695b      	ldr	r3, [r3, #20]
 8008194:	61bb      	str	r3, [r7, #24]
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	699b      	ldr	r3, [r3, #24]
 800819c:	61bb      	str	r3, [r7, #24]
 800819e:	69bb      	ldr	r3, [r7, #24]
 80081a0:	e144      	b.n	800842c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80081a2:	2300      	movs	r3, #0
 80081a4:	617b      	str	r3, [r7, #20]
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	695b      	ldr	r3, [r3, #20]
 80081ac:	617b      	str	r3, [r7, #20]
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	699b      	ldr	r3, [r3, #24]
 80081b4:	617b      	str	r3, [r7, #20]
 80081b6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80081b8:	e138      	b.n	800842c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80081be:	2b03      	cmp	r3, #3
 80081c0:	f200 80f1 	bhi.w	80083a6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d123      	bne.n	8008214 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80081cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081ce:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80081d0:	68f8      	ldr	r0, [r7, #12]
 80081d2:	f000 fd6b 	bl	8008cac <I2C_WaitOnRXNEFlagUntilTimeout>
 80081d6:	4603      	mov	r3, r0
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d001      	beq.n	80081e0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80081dc:	2301      	movs	r3, #1
 80081de:	e139      	b.n	8008454 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	691a      	ldr	r2, [r3, #16]
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081ea:	b2d2      	uxtb	r2, r2
 80081ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081f2:	1c5a      	adds	r2, r3, #1
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80081fc:	3b01      	subs	r3, #1
 80081fe:	b29a      	uxth	r2, r3
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008208:	b29b      	uxth	r3, r3
 800820a:	3b01      	subs	r3, #1
 800820c:	b29a      	uxth	r2, r3
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008212:	e10b      	b.n	800842c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008218:	2b02      	cmp	r3, #2
 800821a:	d14e      	bne.n	80082ba <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800821c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800821e:	9300      	str	r3, [sp, #0]
 8008220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008222:	2200      	movs	r2, #0
 8008224:	4906      	ldr	r1, [pc, #24]	@ (8008240 <HAL_I2C_Mem_Read+0x22c>)
 8008226:	68f8      	ldr	r0, [r7, #12]
 8008228:	f000 fbe8 	bl	80089fc <I2C_WaitOnFlagUntilTimeout>
 800822c:	4603      	mov	r3, r0
 800822e:	2b00      	cmp	r3, #0
 8008230:	d008      	beq.n	8008244 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8008232:	2301      	movs	r3, #1
 8008234:	e10e      	b.n	8008454 <HAL_I2C_Mem_Read+0x440>
 8008236:	bf00      	nop
 8008238:	00100002 	.word	0x00100002
 800823c:	ffff0000 	.word	0xffff0000
 8008240:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008252:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	691a      	ldr	r2, [r3, #16]
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800825e:	b2d2      	uxtb	r2, r2
 8008260:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008266:	1c5a      	adds	r2, r3, #1
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008270:	3b01      	subs	r3, #1
 8008272:	b29a      	uxth	r2, r3
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800827c:	b29b      	uxth	r3, r3
 800827e:	3b01      	subs	r3, #1
 8008280:	b29a      	uxth	r2, r3
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	691a      	ldr	r2, [r3, #16]
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008290:	b2d2      	uxtb	r2, r2
 8008292:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008298:	1c5a      	adds	r2, r3, #1
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80082a2:	3b01      	subs	r3, #1
 80082a4:	b29a      	uxth	r2, r3
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	3b01      	subs	r3, #1
 80082b2:	b29a      	uxth	r2, r3
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80082b8:	e0b8      	b.n	800842c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80082ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082bc:	9300      	str	r3, [sp, #0]
 80082be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082c0:	2200      	movs	r2, #0
 80082c2:	4966      	ldr	r1, [pc, #408]	@ (800845c <HAL_I2C_Mem_Read+0x448>)
 80082c4:	68f8      	ldr	r0, [r7, #12]
 80082c6:	f000 fb99 	bl	80089fc <I2C_WaitOnFlagUntilTimeout>
 80082ca:	4603      	mov	r3, r0
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d001      	beq.n	80082d4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80082d0:	2301      	movs	r3, #1
 80082d2:	e0bf      	b.n	8008454 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	681a      	ldr	r2, [r3, #0]
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80082e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	691a      	ldr	r2, [r3, #16]
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082ee:	b2d2      	uxtb	r2, r2
 80082f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082f6:	1c5a      	adds	r2, r3, #1
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008300:	3b01      	subs	r3, #1
 8008302:	b29a      	uxth	r2, r3
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800830c:	b29b      	uxth	r3, r3
 800830e:	3b01      	subs	r3, #1
 8008310:	b29a      	uxth	r2, r3
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008318:	9300      	str	r3, [sp, #0]
 800831a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800831c:	2200      	movs	r2, #0
 800831e:	494f      	ldr	r1, [pc, #316]	@ (800845c <HAL_I2C_Mem_Read+0x448>)
 8008320:	68f8      	ldr	r0, [r7, #12]
 8008322:	f000 fb6b 	bl	80089fc <I2C_WaitOnFlagUntilTimeout>
 8008326:	4603      	mov	r3, r0
 8008328:	2b00      	cmp	r3, #0
 800832a:	d001      	beq.n	8008330 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800832c:	2301      	movs	r3, #1
 800832e:	e091      	b.n	8008454 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	681a      	ldr	r2, [r3, #0]
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800833e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	691a      	ldr	r2, [r3, #16]
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800834a:	b2d2      	uxtb	r2, r2
 800834c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008352:	1c5a      	adds	r2, r3, #1
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800835c:	3b01      	subs	r3, #1
 800835e:	b29a      	uxth	r2, r3
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008368:	b29b      	uxth	r3, r3
 800836a:	3b01      	subs	r3, #1
 800836c:	b29a      	uxth	r2, r3
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	691a      	ldr	r2, [r3, #16]
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800837c:	b2d2      	uxtb	r2, r2
 800837e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008384:	1c5a      	adds	r2, r3, #1
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800838e:	3b01      	subs	r3, #1
 8008390:	b29a      	uxth	r2, r3
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800839a:	b29b      	uxth	r3, r3
 800839c:	3b01      	subs	r3, #1
 800839e:	b29a      	uxth	r2, r3
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80083a4:	e042      	b.n	800842c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80083a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083a8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80083aa:	68f8      	ldr	r0, [r7, #12]
 80083ac:	f000 fc7e 	bl	8008cac <I2C_WaitOnRXNEFlagUntilTimeout>
 80083b0:	4603      	mov	r3, r0
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d001      	beq.n	80083ba <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80083b6:	2301      	movs	r3, #1
 80083b8:	e04c      	b.n	8008454 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	691a      	ldr	r2, [r3, #16]
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083c4:	b2d2      	uxtb	r2, r2
 80083c6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083cc:	1c5a      	adds	r2, r3, #1
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80083d6:	3b01      	subs	r3, #1
 80083d8:	b29a      	uxth	r2, r3
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80083e2:	b29b      	uxth	r3, r3
 80083e4:	3b01      	subs	r3, #1
 80083e6:	b29a      	uxth	r2, r3
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	695b      	ldr	r3, [r3, #20]
 80083f2:	f003 0304 	and.w	r3, r3, #4
 80083f6:	2b04      	cmp	r3, #4
 80083f8:	d118      	bne.n	800842c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	691a      	ldr	r2, [r3, #16]
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008404:	b2d2      	uxtb	r2, r2
 8008406:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800840c:	1c5a      	adds	r2, r3, #1
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008416:	3b01      	subs	r3, #1
 8008418:	b29a      	uxth	r2, r3
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008422:	b29b      	uxth	r3, r3
 8008424:	3b01      	subs	r3, #1
 8008426:	b29a      	uxth	r2, r3
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008430:	2b00      	cmp	r3, #0
 8008432:	f47f aec2 	bne.w	80081ba <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2220      	movs	r2, #32
 800843a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2200      	movs	r2, #0
 8008442:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	2200      	movs	r2, #0
 800844a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800844e:	2300      	movs	r3, #0
 8008450:	e000      	b.n	8008454 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8008452:	2302      	movs	r3, #2
  }
}
 8008454:	4618      	mov	r0, r3
 8008456:	3728      	adds	r7, #40	@ 0x28
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}
 800845c:	00010004 	.word	0x00010004

08008460 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b088      	sub	sp, #32
 8008464:	af02      	add	r7, sp, #8
 8008466:	60f8      	str	r0, [r7, #12]
 8008468:	607a      	str	r2, [r7, #4]
 800846a:	603b      	str	r3, [r7, #0]
 800846c:	460b      	mov	r3, r1
 800846e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008474:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	2b08      	cmp	r3, #8
 800847a:	d006      	beq.n	800848a <I2C_MasterRequestWrite+0x2a>
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	2b01      	cmp	r3, #1
 8008480:	d003      	beq.n	800848a <I2C_MasterRequestWrite+0x2a>
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008488:	d108      	bne.n	800849c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	681a      	ldr	r2, [r3, #0]
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008498:	601a      	str	r2, [r3, #0]
 800849a:	e00b      	b.n	80084b4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084a0:	2b12      	cmp	r3, #18
 80084a2:	d107      	bne.n	80084b4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	681a      	ldr	r2, [r3, #0]
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80084b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	9300      	str	r3, [sp, #0]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2200      	movs	r2, #0
 80084bc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80084c0:	68f8      	ldr	r0, [r7, #12]
 80084c2:	f000 fa9b 	bl	80089fc <I2C_WaitOnFlagUntilTimeout>
 80084c6:	4603      	mov	r3, r0
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d00d      	beq.n	80084e8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084da:	d103      	bne.n	80084e4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80084e2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80084e4:	2303      	movs	r3, #3
 80084e6:	e035      	b.n	8008554 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	691b      	ldr	r3, [r3, #16]
 80084ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80084f0:	d108      	bne.n	8008504 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80084f2:	897b      	ldrh	r3, [r7, #10]
 80084f4:	b2db      	uxtb	r3, r3
 80084f6:	461a      	mov	r2, r3
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008500:	611a      	str	r2, [r3, #16]
 8008502:	e01b      	b.n	800853c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008504:	897b      	ldrh	r3, [r7, #10]
 8008506:	11db      	asrs	r3, r3, #7
 8008508:	b2db      	uxtb	r3, r3
 800850a:	f003 0306 	and.w	r3, r3, #6
 800850e:	b2db      	uxtb	r3, r3
 8008510:	f063 030f 	orn	r3, r3, #15
 8008514:	b2da      	uxtb	r2, r3
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	490e      	ldr	r1, [pc, #56]	@ (800855c <I2C_MasterRequestWrite+0xfc>)
 8008522:	68f8      	ldr	r0, [r7, #12]
 8008524:	f000 fac1 	bl	8008aaa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008528:	4603      	mov	r3, r0
 800852a:	2b00      	cmp	r3, #0
 800852c:	d001      	beq.n	8008532 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800852e:	2301      	movs	r3, #1
 8008530:	e010      	b.n	8008554 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008532:	897b      	ldrh	r3, [r7, #10]
 8008534:	b2da      	uxtb	r2, r3
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	687a      	ldr	r2, [r7, #4]
 8008540:	4907      	ldr	r1, [pc, #28]	@ (8008560 <I2C_MasterRequestWrite+0x100>)
 8008542:	68f8      	ldr	r0, [r7, #12]
 8008544:	f000 fab1 	bl	8008aaa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008548:	4603      	mov	r3, r0
 800854a:	2b00      	cmp	r3, #0
 800854c:	d001      	beq.n	8008552 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800854e:	2301      	movs	r3, #1
 8008550:	e000      	b.n	8008554 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8008552:	2300      	movs	r3, #0
}
 8008554:	4618      	mov	r0, r3
 8008556:	3718      	adds	r7, #24
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}
 800855c:	00010008 	.word	0x00010008
 8008560:	00010002 	.word	0x00010002

08008564 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b088      	sub	sp, #32
 8008568:	af02      	add	r7, sp, #8
 800856a:	60f8      	str	r0, [r7, #12]
 800856c:	607a      	str	r2, [r7, #4]
 800856e:	603b      	str	r3, [r7, #0]
 8008570:	460b      	mov	r3, r1
 8008572:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008578:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	681a      	ldr	r2, [r3, #0]
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008588:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	2b08      	cmp	r3, #8
 800858e:	d006      	beq.n	800859e <I2C_MasterRequestRead+0x3a>
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	2b01      	cmp	r3, #1
 8008594:	d003      	beq.n	800859e <I2C_MasterRequestRead+0x3a>
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800859c:	d108      	bne.n	80085b0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	681a      	ldr	r2, [r3, #0]
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80085ac:	601a      	str	r2, [r3, #0]
 80085ae:	e00b      	b.n	80085c8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085b4:	2b11      	cmp	r3, #17
 80085b6:	d107      	bne.n	80085c8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	681a      	ldr	r2, [r3, #0]
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80085c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	9300      	str	r3, [sp, #0]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2200      	movs	r2, #0
 80085d0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80085d4:	68f8      	ldr	r0, [r7, #12]
 80085d6:	f000 fa11 	bl	80089fc <I2C_WaitOnFlagUntilTimeout>
 80085da:	4603      	mov	r3, r0
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d00d      	beq.n	80085fc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085ee:	d103      	bne.n	80085f8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80085f6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80085f8:	2303      	movs	r3, #3
 80085fa:	e079      	b.n	80086f0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	691b      	ldr	r3, [r3, #16]
 8008600:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008604:	d108      	bne.n	8008618 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008606:	897b      	ldrh	r3, [r7, #10]
 8008608:	b2db      	uxtb	r3, r3
 800860a:	f043 0301 	orr.w	r3, r3, #1
 800860e:	b2da      	uxtb	r2, r3
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	611a      	str	r2, [r3, #16]
 8008616:	e05f      	b.n	80086d8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008618:	897b      	ldrh	r3, [r7, #10]
 800861a:	11db      	asrs	r3, r3, #7
 800861c:	b2db      	uxtb	r3, r3
 800861e:	f003 0306 	and.w	r3, r3, #6
 8008622:	b2db      	uxtb	r3, r3
 8008624:	f063 030f 	orn	r3, r3, #15
 8008628:	b2da      	uxtb	r2, r3
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	687a      	ldr	r2, [r7, #4]
 8008634:	4930      	ldr	r1, [pc, #192]	@ (80086f8 <I2C_MasterRequestRead+0x194>)
 8008636:	68f8      	ldr	r0, [r7, #12]
 8008638:	f000 fa37 	bl	8008aaa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800863c:	4603      	mov	r3, r0
 800863e:	2b00      	cmp	r3, #0
 8008640:	d001      	beq.n	8008646 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8008642:	2301      	movs	r3, #1
 8008644:	e054      	b.n	80086f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008646:	897b      	ldrh	r3, [r7, #10]
 8008648:	b2da      	uxtb	r2, r3
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	4929      	ldr	r1, [pc, #164]	@ (80086fc <I2C_MasterRequestRead+0x198>)
 8008656:	68f8      	ldr	r0, [r7, #12]
 8008658:	f000 fa27 	bl	8008aaa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800865c:	4603      	mov	r3, r0
 800865e:	2b00      	cmp	r3, #0
 8008660:	d001      	beq.n	8008666 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8008662:	2301      	movs	r3, #1
 8008664:	e044      	b.n	80086f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008666:	2300      	movs	r3, #0
 8008668:	613b      	str	r3, [r7, #16]
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	695b      	ldr	r3, [r3, #20]
 8008670:	613b      	str	r3, [r7, #16]
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	699b      	ldr	r3, [r3, #24]
 8008678:	613b      	str	r3, [r7, #16]
 800867a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	681a      	ldr	r2, [r3, #0]
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800868a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	9300      	str	r3, [sp, #0]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2200      	movs	r2, #0
 8008694:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008698:	68f8      	ldr	r0, [r7, #12]
 800869a:	f000 f9af 	bl	80089fc <I2C_WaitOnFlagUntilTimeout>
 800869e:	4603      	mov	r3, r0
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d00d      	beq.n	80086c0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086b2:	d103      	bne.n	80086bc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80086ba:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80086bc:	2303      	movs	r3, #3
 80086be:	e017      	b.n	80086f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80086c0:	897b      	ldrh	r3, [r7, #10]
 80086c2:	11db      	asrs	r3, r3, #7
 80086c4:	b2db      	uxtb	r3, r3
 80086c6:	f003 0306 	and.w	r3, r3, #6
 80086ca:	b2db      	uxtb	r3, r3
 80086cc:	f063 030e 	orn	r3, r3, #14
 80086d0:	b2da      	uxtb	r2, r3
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	687a      	ldr	r2, [r7, #4]
 80086dc:	4907      	ldr	r1, [pc, #28]	@ (80086fc <I2C_MasterRequestRead+0x198>)
 80086de:	68f8      	ldr	r0, [r7, #12]
 80086e0:	f000 f9e3 	bl	8008aaa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80086e4:	4603      	mov	r3, r0
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d001      	beq.n	80086ee <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80086ea:	2301      	movs	r3, #1
 80086ec:	e000      	b.n	80086f0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80086ee:	2300      	movs	r3, #0
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3718      	adds	r7, #24
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}
 80086f8:	00010008 	.word	0x00010008
 80086fc:	00010002 	.word	0x00010002

08008700 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b088      	sub	sp, #32
 8008704:	af02      	add	r7, sp, #8
 8008706:	60f8      	str	r0, [r7, #12]
 8008708:	4608      	mov	r0, r1
 800870a:	4611      	mov	r1, r2
 800870c:	461a      	mov	r2, r3
 800870e:	4603      	mov	r3, r0
 8008710:	817b      	strh	r3, [r7, #10]
 8008712:	460b      	mov	r3, r1
 8008714:	813b      	strh	r3, [r7, #8]
 8008716:	4613      	mov	r3, r2
 8008718:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	681a      	ldr	r2, [r3, #0]
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008728:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800872a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800872c:	9300      	str	r3, [sp, #0]
 800872e:	6a3b      	ldr	r3, [r7, #32]
 8008730:	2200      	movs	r2, #0
 8008732:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008736:	68f8      	ldr	r0, [r7, #12]
 8008738:	f000 f960 	bl	80089fc <I2C_WaitOnFlagUntilTimeout>
 800873c:	4603      	mov	r3, r0
 800873e:	2b00      	cmp	r3, #0
 8008740:	d00d      	beq.n	800875e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800874c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008750:	d103      	bne.n	800875a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008758:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800875a:	2303      	movs	r3, #3
 800875c:	e05f      	b.n	800881e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800875e:	897b      	ldrh	r3, [r7, #10]
 8008760:	b2db      	uxtb	r3, r3
 8008762:	461a      	mov	r2, r3
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800876c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800876e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008770:	6a3a      	ldr	r2, [r7, #32]
 8008772:	492d      	ldr	r1, [pc, #180]	@ (8008828 <I2C_RequestMemoryWrite+0x128>)
 8008774:	68f8      	ldr	r0, [r7, #12]
 8008776:	f000 f998 	bl	8008aaa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800877a:	4603      	mov	r3, r0
 800877c:	2b00      	cmp	r3, #0
 800877e:	d001      	beq.n	8008784 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008780:	2301      	movs	r3, #1
 8008782:	e04c      	b.n	800881e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008784:	2300      	movs	r3, #0
 8008786:	617b      	str	r3, [r7, #20]
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	695b      	ldr	r3, [r3, #20]
 800878e:	617b      	str	r3, [r7, #20]
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	699b      	ldr	r3, [r3, #24]
 8008796:	617b      	str	r3, [r7, #20]
 8008798:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800879a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800879c:	6a39      	ldr	r1, [r7, #32]
 800879e:	68f8      	ldr	r0, [r7, #12]
 80087a0:	f000 fa02 	bl	8008ba8 <I2C_WaitOnTXEFlagUntilTimeout>
 80087a4:	4603      	mov	r3, r0
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d00d      	beq.n	80087c6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087ae:	2b04      	cmp	r3, #4
 80087b0:	d107      	bne.n	80087c2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	681a      	ldr	r2, [r3, #0]
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80087c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80087c2:	2301      	movs	r3, #1
 80087c4:	e02b      	b.n	800881e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80087c6:	88fb      	ldrh	r3, [r7, #6]
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	d105      	bne.n	80087d8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80087cc:	893b      	ldrh	r3, [r7, #8]
 80087ce:	b2da      	uxtb	r2, r3
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	611a      	str	r2, [r3, #16]
 80087d6:	e021      	b.n	800881c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80087d8:	893b      	ldrh	r3, [r7, #8]
 80087da:	0a1b      	lsrs	r3, r3, #8
 80087dc:	b29b      	uxth	r3, r3
 80087de:	b2da      	uxtb	r2, r3
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80087e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087e8:	6a39      	ldr	r1, [r7, #32]
 80087ea:	68f8      	ldr	r0, [r7, #12]
 80087ec:	f000 f9dc 	bl	8008ba8 <I2C_WaitOnTXEFlagUntilTimeout>
 80087f0:	4603      	mov	r3, r0
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d00d      	beq.n	8008812 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087fa:	2b04      	cmp	r3, #4
 80087fc:	d107      	bne.n	800880e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	681a      	ldr	r2, [r3, #0]
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800880c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800880e:	2301      	movs	r3, #1
 8008810:	e005      	b.n	800881e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008812:	893b      	ldrh	r3, [r7, #8]
 8008814:	b2da      	uxtb	r2, r3
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800881c:	2300      	movs	r3, #0
}
 800881e:	4618      	mov	r0, r3
 8008820:	3718      	adds	r7, #24
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
 8008826:	bf00      	nop
 8008828:	00010002 	.word	0x00010002

0800882c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b088      	sub	sp, #32
 8008830:	af02      	add	r7, sp, #8
 8008832:	60f8      	str	r0, [r7, #12]
 8008834:	4608      	mov	r0, r1
 8008836:	4611      	mov	r1, r2
 8008838:	461a      	mov	r2, r3
 800883a:	4603      	mov	r3, r0
 800883c:	817b      	strh	r3, [r7, #10]
 800883e:	460b      	mov	r3, r1
 8008840:	813b      	strh	r3, [r7, #8]
 8008842:	4613      	mov	r3, r2
 8008844:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	681a      	ldr	r2, [r3, #0]
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008854:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008864:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008868:	9300      	str	r3, [sp, #0]
 800886a:	6a3b      	ldr	r3, [r7, #32]
 800886c:	2200      	movs	r2, #0
 800886e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008872:	68f8      	ldr	r0, [r7, #12]
 8008874:	f000 f8c2 	bl	80089fc <I2C_WaitOnFlagUntilTimeout>
 8008878:	4603      	mov	r3, r0
 800887a:	2b00      	cmp	r3, #0
 800887c:	d00d      	beq.n	800889a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008888:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800888c:	d103      	bne.n	8008896 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008894:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008896:	2303      	movs	r3, #3
 8008898:	e0aa      	b.n	80089f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800889a:	897b      	ldrh	r3, [r7, #10]
 800889c:	b2db      	uxtb	r3, r3
 800889e:	461a      	mov	r2, r3
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80088a8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80088aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ac:	6a3a      	ldr	r2, [r7, #32]
 80088ae:	4952      	ldr	r1, [pc, #328]	@ (80089f8 <I2C_RequestMemoryRead+0x1cc>)
 80088b0:	68f8      	ldr	r0, [r7, #12]
 80088b2:	f000 f8fa 	bl	8008aaa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80088b6:	4603      	mov	r3, r0
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d001      	beq.n	80088c0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80088bc:	2301      	movs	r3, #1
 80088be:	e097      	b.n	80089f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80088c0:	2300      	movs	r3, #0
 80088c2:	617b      	str	r3, [r7, #20]
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	695b      	ldr	r3, [r3, #20]
 80088ca:	617b      	str	r3, [r7, #20]
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	699b      	ldr	r3, [r3, #24]
 80088d2:	617b      	str	r3, [r7, #20]
 80088d4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80088d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80088d8:	6a39      	ldr	r1, [r7, #32]
 80088da:	68f8      	ldr	r0, [r7, #12]
 80088dc:	f000 f964 	bl	8008ba8 <I2C_WaitOnTXEFlagUntilTimeout>
 80088e0:	4603      	mov	r3, r0
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d00d      	beq.n	8008902 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088ea:	2b04      	cmp	r3, #4
 80088ec:	d107      	bne.n	80088fe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	681a      	ldr	r2, [r3, #0]
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80088fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80088fe:	2301      	movs	r3, #1
 8008900:	e076      	b.n	80089f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008902:	88fb      	ldrh	r3, [r7, #6]
 8008904:	2b01      	cmp	r3, #1
 8008906:	d105      	bne.n	8008914 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008908:	893b      	ldrh	r3, [r7, #8]
 800890a:	b2da      	uxtb	r2, r3
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	611a      	str	r2, [r3, #16]
 8008912:	e021      	b.n	8008958 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008914:	893b      	ldrh	r3, [r7, #8]
 8008916:	0a1b      	lsrs	r3, r3, #8
 8008918:	b29b      	uxth	r3, r3
 800891a:	b2da      	uxtb	r2, r3
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008922:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008924:	6a39      	ldr	r1, [r7, #32]
 8008926:	68f8      	ldr	r0, [r7, #12]
 8008928:	f000 f93e 	bl	8008ba8 <I2C_WaitOnTXEFlagUntilTimeout>
 800892c:	4603      	mov	r3, r0
 800892e:	2b00      	cmp	r3, #0
 8008930:	d00d      	beq.n	800894e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008936:	2b04      	cmp	r3, #4
 8008938:	d107      	bne.n	800894a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	681a      	ldr	r2, [r3, #0]
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008948:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800894a:	2301      	movs	r3, #1
 800894c:	e050      	b.n	80089f0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800894e:	893b      	ldrh	r3, [r7, #8]
 8008950:	b2da      	uxtb	r2, r3
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008958:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800895a:	6a39      	ldr	r1, [r7, #32]
 800895c:	68f8      	ldr	r0, [r7, #12]
 800895e:	f000 f923 	bl	8008ba8 <I2C_WaitOnTXEFlagUntilTimeout>
 8008962:	4603      	mov	r3, r0
 8008964:	2b00      	cmp	r3, #0
 8008966:	d00d      	beq.n	8008984 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800896c:	2b04      	cmp	r3, #4
 800896e:	d107      	bne.n	8008980 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	681a      	ldr	r2, [r3, #0]
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800897e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008980:	2301      	movs	r3, #1
 8008982:	e035      	b.n	80089f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	681a      	ldr	r2, [r3, #0]
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008992:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008996:	9300      	str	r3, [sp, #0]
 8008998:	6a3b      	ldr	r3, [r7, #32]
 800899a:	2200      	movs	r2, #0
 800899c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80089a0:	68f8      	ldr	r0, [r7, #12]
 80089a2:	f000 f82b 	bl	80089fc <I2C_WaitOnFlagUntilTimeout>
 80089a6:	4603      	mov	r3, r0
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d00d      	beq.n	80089c8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089ba:	d103      	bne.n	80089c4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80089c2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80089c4:	2303      	movs	r3, #3
 80089c6:	e013      	b.n	80089f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80089c8:	897b      	ldrh	r3, [r7, #10]
 80089ca:	b2db      	uxtb	r3, r3
 80089cc:	f043 0301 	orr.w	r3, r3, #1
 80089d0:	b2da      	uxtb	r2, r3
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80089d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089da:	6a3a      	ldr	r2, [r7, #32]
 80089dc:	4906      	ldr	r1, [pc, #24]	@ (80089f8 <I2C_RequestMemoryRead+0x1cc>)
 80089de:	68f8      	ldr	r0, [r7, #12]
 80089e0:	f000 f863 	bl	8008aaa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80089e4:	4603      	mov	r3, r0
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d001      	beq.n	80089ee <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80089ea:	2301      	movs	r3, #1
 80089ec:	e000      	b.n	80089f0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80089ee:	2300      	movs	r3, #0
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3718      	adds	r7, #24
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}
 80089f8:	00010002 	.word	0x00010002

080089fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b084      	sub	sp, #16
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	60f8      	str	r0, [r7, #12]
 8008a04:	60b9      	str	r1, [r7, #8]
 8008a06:	603b      	str	r3, [r7, #0]
 8008a08:	4613      	mov	r3, r2
 8008a0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008a0c:	e025      	b.n	8008a5a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a14:	d021      	beq.n	8008a5a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a16:	f7fd fd5b 	bl	80064d0 <HAL_GetTick>
 8008a1a:	4602      	mov	r2, r0
 8008a1c:	69bb      	ldr	r3, [r7, #24]
 8008a1e:	1ad3      	subs	r3, r2, r3
 8008a20:	683a      	ldr	r2, [r7, #0]
 8008a22:	429a      	cmp	r2, r3
 8008a24:	d302      	bcc.n	8008a2c <I2C_WaitOnFlagUntilTimeout+0x30>
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d116      	bne.n	8008a5a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2220      	movs	r2, #32
 8008a36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a46:	f043 0220 	orr.w	r2, r3, #32
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	2200      	movs	r2, #0
 8008a52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8008a56:	2301      	movs	r3, #1
 8008a58:	e023      	b.n	8008aa2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	0c1b      	lsrs	r3, r3, #16
 8008a5e:	b2db      	uxtb	r3, r3
 8008a60:	2b01      	cmp	r3, #1
 8008a62:	d10d      	bne.n	8008a80 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	695b      	ldr	r3, [r3, #20]
 8008a6a:	43da      	mvns	r2, r3
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	4013      	ands	r3, r2
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	bf0c      	ite	eq
 8008a76:	2301      	moveq	r3, #1
 8008a78:	2300      	movne	r3, #0
 8008a7a:	b2db      	uxtb	r3, r3
 8008a7c:	461a      	mov	r2, r3
 8008a7e:	e00c      	b.n	8008a9a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	699b      	ldr	r3, [r3, #24]
 8008a86:	43da      	mvns	r2, r3
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	4013      	ands	r3, r2
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	bf0c      	ite	eq
 8008a92:	2301      	moveq	r3, #1
 8008a94:	2300      	movne	r3, #0
 8008a96:	b2db      	uxtb	r3, r3
 8008a98:	461a      	mov	r2, r3
 8008a9a:	79fb      	ldrb	r3, [r7, #7]
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	d0b6      	beq.n	8008a0e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008aa0:	2300      	movs	r3, #0
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	3710      	adds	r7, #16
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}

08008aaa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008aaa:	b580      	push	{r7, lr}
 8008aac:	b084      	sub	sp, #16
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	60f8      	str	r0, [r7, #12]
 8008ab2:	60b9      	str	r1, [r7, #8]
 8008ab4:	607a      	str	r2, [r7, #4]
 8008ab6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008ab8:	e051      	b.n	8008b5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	695b      	ldr	r3, [r3, #20]
 8008ac0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008ac4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ac8:	d123      	bne.n	8008b12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	681a      	ldr	r2, [r3, #0]
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008ad8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008ae2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	2220      	movs	r2, #32
 8008aee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	2200      	movs	r2, #0
 8008af6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008afe:	f043 0204 	orr.w	r2, r3, #4
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008b0e:	2301      	movs	r3, #1
 8008b10:	e046      	b.n	8008ba0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b18:	d021      	beq.n	8008b5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b1a:	f7fd fcd9 	bl	80064d0 <HAL_GetTick>
 8008b1e:	4602      	mov	r2, r0
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	1ad3      	subs	r3, r2, r3
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	429a      	cmp	r2, r3
 8008b28:	d302      	bcc.n	8008b30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d116      	bne.n	8008b5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2200      	movs	r2, #0
 8008b34:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2220      	movs	r2, #32
 8008b3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	2200      	movs	r2, #0
 8008b42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b4a:	f043 0220 	orr.w	r2, r3, #32
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2200      	movs	r2, #0
 8008b56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	e020      	b.n	8008ba0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	0c1b      	lsrs	r3, r3, #16
 8008b62:	b2db      	uxtb	r3, r3
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	d10c      	bne.n	8008b82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	695b      	ldr	r3, [r3, #20]
 8008b6e:	43da      	mvns	r2, r3
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	4013      	ands	r3, r2
 8008b74:	b29b      	uxth	r3, r3
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	bf14      	ite	ne
 8008b7a:	2301      	movne	r3, #1
 8008b7c:	2300      	moveq	r3, #0
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	e00b      	b.n	8008b9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	699b      	ldr	r3, [r3, #24]
 8008b88:	43da      	mvns	r2, r3
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	4013      	ands	r3, r2
 8008b8e:	b29b      	uxth	r3, r3
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	bf14      	ite	ne
 8008b94:	2301      	movne	r3, #1
 8008b96:	2300      	moveq	r3, #0
 8008b98:	b2db      	uxtb	r3, r3
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d18d      	bne.n	8008aba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008b9e:	2300      	movs	r3, #0
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3710      	adds	r7, #16
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b084      	sub	sp, #16
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	60f8      	str	r0, [r7, #12]
 8008bb0:	60b9      	str	r1, [r7, #8]
 8008bb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008bb4:	e02d      	b.n	8008c12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008bb6:	68f8      	ldr	r0, [r7, #12]
 8008bb8:	f000 f8ce 	bl	8008d58 <I2C_IsAcknowledgeFailed>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d001      	beq.n	8008bc6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	e02d      	b.n	8008c22 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bcc:	d021      	beq.n	8008c12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008bce:	f7fd fc7f 	bl	80064d0 <HAL_GetTick>
 8008bd2:	4602      	mov	r2, r0
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	1ad3      	subs	r3, r2, r3
 8008bd8:	68ba      	ldr	r2, [r7, #8]
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	d302      	bcc.n	8008be4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d116      	bne.n	8008c12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2200      	movs	r2, #0
 8008be8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	2220      	movs	r2, #32
 8008bee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bfe:	f043 0220 	orr.w	r2, r3, #32
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	e007      	b.n	8008c22 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	695b      	ldr	r3, [r3, #20]
 8008c18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c1c:	2b80      	cmp	r3, #128	@ 0x80
 8008c1e:	d1ca      	bne.n	8008bb6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008c20:	2300      	movs	r3, #0
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3710      	adds	r7, #16
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}

08008c2a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008c2a:	b580      	push	{r7, lr}
 8008c2c:	b084      	sub	sp, #16
 8008c2e:	af00      	add	r7, sp, #0
 8008c30:	60f8      	str	r0, [r7, #12]
 8008c32:	60b9      	str	r1, [r7, #8]
 8008c34:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008c36:	e02d      	b.n	8008c94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008c38:	68f8      	ldr	r0, [r7, #12]
 8008c3a:	f000 f88d 	bl	8008d58 <I2C_IsAcknowledgeFailed>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d001      	beq.n	8008c48 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008c44:	2301      	movs	r3, #1
 8008c46:	e02d      	b.n	8008ca4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c4e:	d021      	beq.n	8008c94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c50:	f7fd fc3e 	bl	80064d0 <HAL_GetTick>
 8008c54:	4602      	mov	r2, r0
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	1ad3      	subs	r3, r2, r3
 8008c5a:	68ba      	ldr	r2, [r7, #8]
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	d302      	bcc.n	8008c66 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d116      	bne.n	8008c94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	2220      	movs	r2, #32
 8008c70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	2200      	movs	r2, #0
 8008c78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c80:	f043 0220 	orr.w	r2, r3, #32
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8008c90:	2301      	movs	r3, #1
 8008c92:	e007      	b.n	8008ca4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	695b      	ldr	r3, [r3, #20]
 8008c9a:	f003 0304 	and.w	r3, r3, #4
 8008c9e:	2b04      	cmp	r3, #4
 8008ca0:	d1ca      	bne.n	8008c38 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008ca2:	2300      	movs	r3, #0
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3710      	adds	r7, #16
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}

08008cac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b084      	sub	sp, #16
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	60f8      	str	r0, [r7, #12]
 8008cb4:	60b9      	str	r1, [r7, #8]
 8008cb6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008cb8:	e042      	b.n	8008d40 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	695b      	ldr	r3, [r3, #20]
 8008cc0:	f003 0310 	and.w	r3, r3, #16
 8008cc4:	2b10      	cmp	r3, #16
 8008cc6:	d119      	bne.n	8008cfc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f06f 0210 	mvn.w	r2, #16
 8008cd0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2220      	movs	r2, #32
 8008cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	e029      	b.n	8008d50 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cfc:	f7fd fbe8 	bl	80064d0 <HAL_GetTick>
 8008d00:	4602      	mov	r2, r0
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	1ad3      	subs	r3, r2, r3
 8008d06:	68ba      	ldr	r2, [r7, #8]
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d302      	bcc.n	8008d12 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d116      	bne.n	8008d40 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	2200      	movs	r2, #0
 8008d16:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	2220      	movs	r2, #32
 8008d1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	2200      	movs	r2, #0
 8008d24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d2c:	f043 0220 	orr.w	r2, r3, #32
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2200      	movs	r2, #0
 8008d38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	e007      	b.n	8008d50 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	695b      	ldr	r3, [r3, #20]
 8008d46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d4a:	2b40      	cmp	r3, #64	@ 0x40
 8008d4c:	d1b5      	bne.n	8008cba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008d4e:	2300      	movs	r3, #0
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3710      	adds	r7, #16
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}

08008d58 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b083      	sub	sp, #12
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	695b      	ldr	r3, [r3, #20]
 8008d66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008d6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d6e:	d11b      	bne.n	8008da8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008d78:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2220      	movs	r2, #32
 8008d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d94:	f043 0204 	orr.w	r2, r3, #4
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8008da4:	2301      	movs	r3, #1
 8008da6:	e000      	b.n	8008daa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008da8:	2300      	movs	r3, #0
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	370c      	adds	r7, #12
 8008dae:	46bd      	mov	sp, r7
 8008db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db4:	4770      	bx	lr
	...

08008db8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b084      	sub	sp, #16
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
 8008dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d101      	bne.n	8008dcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008dc8:	2301      	movs	r3, #1
 8008dca:	e0cc      	b.n	8008f66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008dcc:	4b68      	ldr	r3, [pc, #416]	@ (8008f70 <HAL_RCC_ClockConfig+0x1b8>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f003 030f 	and.w	r3, r3, #15
 8008dd4:	683a      	ldr	r2, [r7, #0]
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d90c      	bls.n	8008df4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008dda:	4b65      	ldr	r3, [pc, #404]	@ (8008f70 <HAL_RCC_ClockConfig+0x1b8>)
 8008ddc:	683a      	ldr	r2, [r7, #0]
 8008dde:	b2d2      	uxtb	r2, r2
 8008de0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008de2:	4b63      	ldr	r3, [pc, #396]	@ (8008f70 <HAL_RCC_ClockConfig+0x1b8>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f003 030f 	and.w	r3, r3, #15
 8008dea:	683a      	ldr	r2, [r7, #0]
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d001      	beq.n	8008df4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008df0:	2301      	movs	r3, #1
 8008df2:	e0b8      	b.n	8008f66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f003 0302 	and.w	r3, r3, #2
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d020      	beq.n	8008e42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f003 0304 	and.w	r3, r3, #4
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d005      	beq.n	8008e18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008e0c:	4b59      	ldr	r3, [pc, #356]	@ (8008f74 <HAL_RCC_ClockConfig+0x1bc>)
 8008e0e:	689b      	ldr	r3, [r3, #8]
 8008e10:	4a58      	ldr	r2, [pc, #352]	@ (8008f74 <HAL_RCC_ClockConfig+0x1bc>)
 8008e12:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008e16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f003 0308 	and.w	r3, r3, #8
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d005      	beq.n	8008e30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008e24:	4b53      	ldr	r3, [pc, #332]	@ (8008f74 <HAL_RCC_ClockConfig+0x1bc>)
 8008e26:	689b      	ldr	r3, [r3, #8]
 8008e28:	4a52      	ldr	r2, [pc, #328]	@ (8008f74 <HAL_RCC_ClockConfig+0x1bc>)
 8008e2a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008e2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008e30:	4b50      	ldr	r3, [pc, #320]	@ (8008f74 <HAL_RCC_ClockConfig+0x1bc>)
 8008e32:	689b      	ldr	r3, [r3, #8]
 8008e34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	689b      	ldr	r3, [r3, #8]
 8008e3c:	494d      	ldr	r1, [pc, #308]	@ (8008f74 <HAL_RCC_ClockConfig+0x1bc>)
 8008e3e:	4313      	orrs	r3, r2
 8008e40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f003 0301 	and.w	r3, r3, #1
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d044      	beq.n	8008ed8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	2b01      	cmp	r3, #1
 8008e54:	d107      	bne.n	8008e66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008e56:	4b47      	ldr	r3, [pc, #284]	@ (8008f74 <HAL_RCC_ClockConfig+0x1bc>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d119      	bne.n	8008e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008e62:	2301      	movs	r3, #1
 8008e64:	e07f      	b.n	8008f66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	2b02      	cmp	r3, #2
 8008e6c:	d003      	beq.n	8008e76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008e72:	2b03      	cmp	r3, #3
 8008e74:	d107      	bne.n	8008e86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008e76:	4b3f      	ldr	r3, [pc, #252]	@ (8008f74 <HAL_RCC_ClockConfig+0x1bc>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d109      	bne.n	8008e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008e82:	2301      	movs	r3, #1
 8008e84:	e06f      	b.n	8008f66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e86:	4b3b      	ldr	r3, [pc, #236]	@ (8008f74 <HAL_RCC_ClockConfig+0x1bc>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f003 0302 	and.w	r3, r3, #2
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d101      	bne.n	8008e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008e92:	2301      	movs	r3, #1
 8008e94:	e067      	b.n	8008f66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008e96:	4b37      	ldr	r3, [pc, #220]	@ (8008f74 <HAL_RCC_ClockConfig+0x1bc>)
 8008e98:	689b      	ldr	r3, [r3, #8]
 8008e9a:	f023 0203 	bic.w	r2, r3, #3
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	4934      	ldr	r1, [pc, #208]	@ (8008f74 <HAL_RCC_ClockConfig+0x1bc>)
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008ea8:	f7fd fb12 	bl	80064d0 <HAL_GetTick>
 8008eac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008eae:	e00a      	b.n	8008ec6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008eb0:	f7fd fb0e 	bl	80064d0 <HAL_GetTick>
 8008eb4:	4602      	mov	r2, r0
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	1ad3      	subs	r3, r2, r3
 8008eba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d901      	bls.n	8008ec6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008ec2:	2303      	movs	r3, #3
 8008ec4:	e04f      	b.n	8008f66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ec6:	4b2b      	ldr	r3, [pc, #172]	@ (8008f74 <HAL_RCC_ClockConfig+0x1bc>)
 8008ec8:	689b      	ldr	r3, [r3, #8]
 8008eca:	f003 020c 	and.w	r2, r3, #12
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	685b      	ldr	r3, [r3, #4]
 8008ed2:	009b      	lsls	r3, r3, #2
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d1eb      	bne.n	8008eb0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008ed8:	4b25      	ldr	r3, [pc, #148]	@ (8008f70 <HAL_RCC_ClockConfig+0x1b8>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f003 030f 	and.w	r3, r3, #15
 8008ee0:	683a      	ldr	r2, [r7, #0]
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	d20c      	bcs.n	8008f00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ee6:	4b22      	ldr	r3, [pc, #136]	@ (8008f70 <HAL_RCC_ClockConfig+0x1b8>)
 8008ee8:	683a      	ldr	r2, [r7, #0]
 8008eea:	b2d2      	uxtb	r2, r2
 8008eec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008eee:	4b20      	ldr	r3, [pc, #128]	@ (8008f70 <HAL_RCC_ClockConfig+0x1b8>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f003 030f 	and.w	r3, r3, #15
 8008ef6:	683a      	ldr	r2, [r7, #0]
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	d001      	beq.n	8008f00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008efc:	2301      	movs	r3, #1
 8008efe:	e032      	b.n	8008f66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f003 0304 	and.w	r3, r3, #4
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d008      	beq.n	8008f1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008f0c:	4b19      	ldr	r3, [pc, #100]	@ (8008f74 <HAL_RCC_ClockConfig+0x1bc>)
 8008f0e:	689b      	ldr	r3, [r3, #8]
 8008f10:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	68db      	ldr	r3, [r3, #12]
 8008f18:	4916      	ldr	r1, [pc, #88]	@ (8008f74 <HAL_RCC_ClockConfig+0x1bc>)
 8008f1a:	4313      	orrs	r3, r2
 8008f1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f003 0308 	and.w	r3, r3, #8
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d009      	beq.n	8008f3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008f2a:	4b12      	ldr	r3, [pc, #72]	@ (8008f74 <HAL_RCC_ClockConfig+0x1bc>)
 8008f2c:	689b      	ldr	r3, [r3, #8]
 8008f2e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	691b      	ldr	r3, [r3, #16]
 8008f36:	00db      	lsls	r3, r3, #3
 8008f38:	490e      	ldr	r1, [pc, #56]	@ (8008f74 <HAL_RCC_ClockConfig+0x1bc>)
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008f3e:	f000 f855 	bl	8008fec <HAL_RCC_GetSysClockFreq>
 8008f42:	4602      	mov	r2, r0
 8008f44:	4b0b      	ldr	r3, [pc, #44]	@ (8008f74 <HAL_RCC_ClockConfig+0x1bc>)
 8008f46:	689b      	ldr	r3, [r3, #8]
 8008f48:	091b      	lsrs	r3, r3, #4
 8008f4a:	f003 030f 	and.w	r3, r3, #15
 8008f4e:	490a      	ldr	r1, [pc, #40]	@ (8008f78 <HAL_RCC_ClockConfig+0x1c0>)
 8008f50:	5ccb      	ldrb	r3, [r1, r3]
 8008f52:	fa22 f303 	lsr.w	r3, r2, r3
 8008f56:	4a09      	ldr	r2, [pc, #36]	@ (8008f7c <HAL_RCC_ClockConfig+0x1c4>)
 8008f58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008f5a:	4b09      	ldr	r3, [pc, #36]	@ (8008f80 <HAL_RCC_ClockConfig+0x1c8>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f7fd fa72 	bl	8006448 <HAL_InitTick>

  return HAL_OK;
 8008f64:	2300      	movs	r3, #0
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3710      	adds	r7, #16
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}
 8008f6e:	bf00      	nop
 8008f70:	40023c00 	.word	0x40023c00
 8008f74:	40023800 	.word	0x40023800
 8008f78:	08010078 	.word	0x08010078
 8008f7c:	20000044 	.word	0x20000044
 8008f80:	20000048 	.word	0x20000048

08008f84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008f84:	b480      	push	{r7}
 8008f86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008f88:	4b03      	ldr	r3, [pc, #12]	@ (8008f98 <HAL_RCC_GetHCLKFreq+0x14>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f94:	4770      	bx	lr
 8008f96:	bf00      	nop
 8008f98:	20000044 	.word	0x20000044

08008f9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008fa0:	f7ff fff0 	bl	8008f84 <HAL_RCC_GetHCLKFreq>
 8008fa4:	4602      	mov	r2, r0
 8008fa6:	4b05      	ldr	r3, [pc, #20]	@ (8008fbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8008fa8:	689b      	ldr	r3, [r3, #8]
 8008faa:	0a9b      	lsrs	r3, r3, #10
 8008fac:	f003 0307 	and.w	r3, r3, #7
 8008fb0:	4903      	ldr	r1, [pc, #12]	@ (8008fc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008fb2:	5ccb      	ldrb	r3, [r1, r3]
 8008fb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	bd80      	pop	{r7, pc}
 8008fbc:	40023800 	.word	0x40023800
 8008fc0:	08010088 	.word	0x08010088

08008fc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008fc8:	f7ff ffdc 	bl	8008f84 <HAL_RCC_GetHCLKFreq>
 8008fcc:	4602      	mov	r2, r0
 8008fce:	4b05      	ldr	r3, [pc, #20]	@ (8008fe4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008fd0:	689b      	ldr	r3, [r3, #8]
 8008fd2:	0b5b      	lsrs	r3, r3, #13
 8008fd4:	f003 0307 	and.w	r3, r3, #7
 8008fd8:	4903      	ldr	r1, [pc, #12]	@ (8008fe8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008fda:	5ccb      	ldrb	r3, [r1, r3]
 8008fdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	bd80      	pop	{r7, pc}
 8008fe4:	40023800 	.word	0x40023800
 8008fe8:	08010088 	.word	0x08010088

08008fec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008fec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ff0:	b0ae      	sub	sp, #184	@ 0xb8
 8008ff2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8009000:	2300      	movs	r3, #0
 8009002:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8009006:	2300      	movs	r3, #0
 8009008:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800900c:	2300      	movs	r3, #0
 800900e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009012:	4bcb      	ldr	r3, [pc, #812]	@ (8009340 <HAL_RCC_GetSysClockFreq+0x354>)
 8009014:	689b      	ldr	r3, [r3, #8]
 8009016:	f003 030c 	and.w	r3, r3, #12
 800901a:	2b0c      	cmp	r3, #12
 800901c:	f200 8206 	bhi.w	800942c <HAL_RCC_GetSysClockFreq+0x440>
 8009020:	a201      	add	r2, pc, #4	@ (adr r2, 8009028 <HAL_RCC_GetSysClockFreq+0x3c>)
 8009022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009026:	bf00      	nop
 8009028:	0800905d 	.word	0x0800905d
 800902c:	0800942d 	.word	0x0800942d
 8009030:	0800942d 	.word	0x0800942d
 8009034:	0800942d 	.word	0x0800942d
 8009038:	08009065 	.word	0x08009065
 800903c:	0800942d 	.word	0x0800942d
 8009040:	0800942d 	.word	0x0800942d
 8009044:	0800942d 	.word	0x0800942d
 8009048:	0800906d 	.word	0x0800906d
 800904c:	0800942d 	.word	0x0800942d
 8009050:	0800942d 	.word	0x0800942d
 8009054:	0800942d 	.word	0x0800942d
 8009058:	0800925d 	.word	0x0800925d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800905c:	4bb9      	ldr	r3, [pc, #740]	@ (8009344 <HAL_RCC_GetSysClockFreq+0x358>)
 800905e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8009062:	e1e7      	b.n	8009434 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009064:	4bb8      	ldr	r3, [pc, #736]	@ (8009348 <HAL_RCC_GetSysClockFreq+0x35c>)
 8009066:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800906a:	e1e3      	b.n	8009434 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800906c:	4bb4      	ldr	r3, [pc, #720]	@ (8009340 <HAL_RCC_GetSysClockFreq+0x354>)
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009074:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009078:	4bb1      	ldr	r3, [pc, #708]	@ (8009340 <HAL_RCC_GetSysClockFreq+0x354>)
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009080:	2b00      	cmp	r3, #0
 8009082:	d071      	beq.n	8009168 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009084:	4bae      	ldr	r3, [pc, #696]	@ (8009340 <HAL_RCC_GetSysClockFreq+0x354>)
 8009086:	685b      	ldr	r3, [r3, #4]
 8009088:	099b      	lsrs	r3, r3, #6
 800908a:	2200      	movs	r2, #0
 800908c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009090:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8009094:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009098:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800909c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80090a0:	2300      	movs	r3, #0
 80090a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80090a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80090aa:	4622      	mov	r2, r4
 80090ac:	462b      	mov	r3, r5
 80090ae:	f04f 0000 	mov.w	r0, #0
 80090b2:	f04f 0100 	mov.w	r1, #0
 80090b6:	0159      	lsls	r1, r3, #5
 80090b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80090bc:	0150      	lsls	r0, r2, #5
 80090be:	4602      	mov	r2, r0
 80090c0:	460b      	mov	r3, r1
 80090c2:	4621      	mov	r1, r4
 80090c4:	1a51      	subs	r1, r2, r1
 80090c6:	6439      	str	r1, [r7, #64]	@ 0x40
 80090c8:	4629      	mov	r1, r5
 80090ca:	eb63 0301 	sbc.w	r3, r3, r1
 80090ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80090d0:	f04f 0200 	mov.w	r2, #0
 80090d4:	f04f 0300 	mov.w	r3, #0
 80090d8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80090dc:	4649      	mov	r1, r9
 80090de:	018b      	lsls	r3, r1, #6
 80090e0:	4641      	mov	r1, r8
 80090e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80090e6:	4641      	mov	r1, r8
 80090e8:	018a      	lsls	r2, r1, #6
 80090ea:	4641      	mov	r1, r8
 80090ec:	1a51      	subs	r1, r2, r1
 80090ee:	63b9      	str	r1, [r7, #56]	@ 0x38
 80090f0:	4649      	mov	r1, r9
 80090f2:	eb63 0301 	sbc.w	r3, r3, r1
 80090f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80090f8:	f04f 0200 	mov.w	r2, #0
 80090fc:	f04f 0300 	mov.w	r3, #0
 8009100:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8009104:	4649      	mov	r1, r9
 8009106:	00cb      	lsls	r3, r1, #3
 8009108:	4641      	mov	r1, r8
 800910a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800910e:	4641      	mov	r1, r8
 8009110:	00ca      	lsls	r2, r1, #3
 8009112:	4610      	mov	r0, r2
 8009114:	4619      	mov	r1, r3
 8009116:	4603      	mov	r3, r0
 8009118:	4622      	mov	r2, r4
 800911a:	189b      	adds	r3, r3, r2
 800911c:	633b      	str	r3, [r7, #48]	@ 0x30
 800911e:	462b      	mov	r3, r5
 8009120:	460a      	mov	r2, r1
 8009122:	eb42 0303 	adc.w	r3, r2, r3
 8009126:	637b      	str	r3, [r7, #52]	@ 0x34
 8009128:	f04f 0200 	mov.w	r2, #0
 800912c:	f04f 0300 	mov.w	r3, #0
 8009130:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8009134:	4629      	mov	r1, r5
 8009136:	024b      	lsls	r3, r1, #9
 8009138:	4621      	mov	r1, r4
 800913a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800913e:	4621      	mov	r1, r4
 8009140:	024a      	lsls	r2, r1, #9
 8009142:	4610      	mov	r0, r2
 8009144:	4619      	mov	r1, r3
 8009146:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800914a:	2200      	movs	r2, #0
 800914c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009150:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009154:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8009158:	f7f7 fdfe 	bl	8000d58 <__aeabi_uldivmod>
 800915c:	4602      	mov	r2, r0
 800915e:	460b      	mov	r3, r1
 8009160:	4613      	mov	r3, r2
 8009162:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009166:	e067      	b.n	8009238 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009168:	4b75      	ldr	r3, [pc, #468]	@ (8009340 <HAL_RCC_GetSysClockFreq+0x354>)
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	099b      	lsrs	r3, r3, #6
 800916e:	2200      	movs	r2, #0
 8009170:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009174:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8009178:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800917c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009180:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009182:	2300      	movs	r3, #0
 8009184:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009186:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800918a:	4622      	mov	r2, r4
 800918c:	462b      	mov	r3, r5
 800918e:	f04f 0000 	mov.w	r0, #0
 8009192:	f04f 0100 	mov.w	r1, #0
 8009196:	0159      	lsls	r1, r3, #5
 8009198:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800919c:	0150      	lsls	r0, r2, #5
 800919e:	4602      	mov	r2, r0
 80091a0:	460b      	mov	r3, r1
 80091a2:	4621      	mov	r1, r4
 80091a4:	1a51      	subs	r1, r2, r1
 80091a6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80091a8:	4629      	mov	r1, r5
 80091aa:	eb63 0301 	sbc.w	r3, r3, r1
 80091ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80091b0:	f04f 0200 	mov.w	r2, #0
 80091b4:	f04f 0300 	mov.w	r3, #0
 80091b8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80091bc:	4649      	mov	r1, r9
 80091be:	018b      	lsls	r3, r1, #6
 80091c0:	4641      	mov	r1, r8
 80091c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80091c6:	4641      	mov	r1, r8
 80091c8:	018a      	lsls	r2, r1, #6
 80091ca:	4641      	mov	r1, r8
 80091cc:	ebb2 0a01 	subs.w	sl, r2, r1
 80091d0:	4649      	mov	r1, r9
 80091d2:	eb63 0b01 	sbc.w	fp, r3, r1
 80091d6:	f04f 0200 	mov.w	r2, #0
 80091da:	f04f 0300 	mov.w	r3, #0
 80091de:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80091e2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80091e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80091ea:	4692      	mov	sl, r2
 80091ec:	469b      	mov	fp, r3
 80091ee:	4623      	mov	r3, r4
 80091f0:	eb1a 0303 	adds.w	r3, sl, r3
 80091f4:	623b      	str	r3, [r7, #32]
 80091f6:	462b      	mov	r3, r5
 80091f8:	eb4b 0303 	adc.w	r3, fp, r3
 80091fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80091fe:	f04f 0200 	mov.w	r2, #0
 8009202:	f04f 0300 	mov.w	r3, #0
 8009206:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800920a:	4629      	mov	r1, r5
 800920c:	028b      	lsls	r3, r1, #10
 800920e:	4621      	mov	r1, r4
 8009210:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009214:	4621      	mov	r1, r4
 8009216:	028a      	lsls	r2, r1, #10
 8009218:	4610      	mov	r0, r2
 800921a:	4619      	mov	r1, r3
 800921c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009220:	2200      	movs	r2, #0
 8009222:	673b      	str	r3, [r7, #112]	@ 0x70
 8009224:	677a      	str	r2, [r7, #116]	@ 0x74
 8009226:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800922a:	f7f7 fd95 	bl	8000d58 <__aeabi_uldivmod>
 800922e:	4602      	mov	r2, r0
 8009230:	460b      	mov	r3, r1
 8009232:	4613      	mov	r3, r2
 8009234:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009238:	4b41      	ldr	r3, [pc, #260]	@ (8009340 <HAL_RCC_GetSysClockFreq+0x354>)
 800923a:	685b      	ldr	r3, [r3, #4]
 800923c:	0c1b      	lsrs	r3, r3, #16
 800923e:	f003 0303 	and.w	r3, r3, #3
 8009242:	3301      	adds	r3, #1
 8009244:	005b      	lsls	r3, r3, #1
 8009246:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 800924a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800924e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009252:	fbb2 f3f3 	udiv	r3, r2, r3
 8009256:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800925a:	e0eb      	b.n	8009434 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800925c:	4b38      	ldr	r3, [pc, #224]	@ (8009340 <HAL_RCC_GetSysClockFreq+0x354>)
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009264:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009268:	4b35      	ldr	r3, [pc, #212]	@ (8009340 <HAL_RCC_GetSysClockFreq+0x354>)
 800926a:	685b      	ldr	r3, [r3, #4]
 800926c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009270:	2b00      	cmp	r3, #0
 8009272:	d06b      	beq.n	800934c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009274:	4b32      	ldr	r3, [pc, #200]	@ (8009340 <HAL_RCC_GetSysClockFreq+0x354>)
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	099b      	lsrs	r3, r3, #6
 800927a:	2200      	movs	r2, #0
 800927c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800927e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009280:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009286:	663b      	str	r3, [r7, #96]	@ 0x60
 8009288:	2300      	movs	r3, #0
 800928a:	667b      	str	r3, [r7, #100]	@ 0x64
 800928c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8009290:	4622      	mov	r2, r4
 8009292:	462b      	mov	r3, r5
 8009294:	f04f 0000 	mov.w	r0, #0
 8009298:	f04f 0100 	mov.w	r1, #0
 800929c:	0159      	lsls	r1, r3, #5
 800929e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80092a2:	0150      	lsls	r0, r2, #5
 80092a4:	4602      	mov	r2, r0
 80092a6:	460b      	mov	r3, r1
 80092a8:	4621      	mov	r1, r4
 80092aa:	1a51      	subs	r1, r2, r1
 80092ac:	61b9      	str	r1, [r7, #24]
 80092ae:	4629      	mov	r1, r5
 80092b0:	eb63 0301 	sbc.w	r3, r3, r1
 80092b4:	61fb      	str	r3, [r7, #28]
 80092b6:	f04f 0200 	mov.w	r2, #0
 80092ba:	f04f 0300 	mov.w	r3, #0
 80092be:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80092c2:	4659      	mov	r1, fp
 80092c4:	018b      	lsls	r3, r1, #6
 80092c6:	4651      	mov	r1, sl
 80092c8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80092cc:	4651      	mov	r1, sl
 80092ce:	018a      	lsls	r2, r1, #6
 80092d0:	4651      	mov	r1, sl
 80092d2:	ebb2 0801 	subs.w	r8, r2, r1
 80092d6:	4659      	mov	r1, fp
 80092d8:	eb63 0901 	sbc.w	r9, r3, r1
 80092dc:	f04f 0200 	mov.w	r2, #0
 80092e0:	f04f 0300 	mov.w	r3, #0
 80092e4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80092e8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80092ec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80092f0:	4690      	mov	r8, r2
 80092f2:	4699      	mov	r9, r3
 80092f4:	4623      	mov	r3, r4
 80092f6:	eb18 0303 	adds.w	r3, r8, r3
 80092fa:	613b      	str	r3, [r7, #16]
 80092fc:	462b      	mov	r3, r5
 80092fe:	eb49 0303 	adc.w	r3, r9, r3
 8009302:	617b      	str	r3, [r7, #20]
 8009304:	f04f 0200 	mov.w	r2, #0
 8009308:	f04f 0300 	mov.w	r3, #0
 800930c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8009310:	4629      	mov	r1, r5
 8009312:	024b      	lsls	r3, r1, #9
 8009314:	4621      	mov	r1, r4
 8009316:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800931a:	4621      	mov	r1, r4
 800931c:	024a      	lsls	r2, r1, #9
 800931e:	4610      	mov	r0, r2
 8009320:	4619      	mov	r1, r3
 8009322:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009326:	2200      	movs	r2, #0
 8009328:	65bb      	str	r3, [r7, #88]	@ 0x58
 800932a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800932c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009330:	f7f7 fd12 	bl	8000d58 <__aeabi_uldivmod>
 8009334:	4602      	mov	r2, r0
 8009336:	460b      	mov	r3, r1
 8009338:	4613      	mov	r3, r2
 800933a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800933e:	e065      	b.n	800940c <HAL_RCC_GetSysClockFreq+0x420>
 8009340:	40023800 	.word	0x40023800
 8009344:	00f42400 	.word	0x00f42400
 8009348:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800934c:	4b3d      	ldr	r3, [pc, #244]	@ (8009444 <HAL_RCC_GetSysClockFreq+0x458>)
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	099b      	lsrs	r3, r3, #6
 8009352:	2200      	movs	r2, #0
 8009354:	4618      	mov	r0, r3
 8009356:	4611      	mov	r1, r2
 8009358:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800935c:	653b      	str	r3, [r7, #80]	@ 0x50
 800935e:	2300      	movs	r3, #0
 8009360:	657b      	str	r3, [r7, #84]	@ 0x54
 8009362:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8009366:	4642      	mov	r2, r8
 8009368:	464b      	mov	r3, r9
 800936a:	f04f 0000 	mov.w	r0, #0
 800936e:	f04f 0100 	mov.w	r1, #0
 8009372:	0159      	lsls	r1, r3, #5
 8009374:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009378:	0150      	lsls	r0, r2, #5
 800937a:	4602      	mov	r2, r0
 800937c:	460b      	mov	r3, r1
 800937e:	4641      	mov	r1, r8
 8009380:	1a51      	subs	r1, r2, r1
 8009382:	60b9      	str	r1, [r7, #8]
 8009384:	4649      	mov	r1, r9
 8009386:	eb63 0301 	sbc.w	r3, r3, r1
 800938a:	60fb      	str	r3, [r7, #12]
 800938c:	f04f 0200 	mov.w	r2, #0
 8009390:	f04f 0300 	mov.w	r3, #0
 8009394:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8009398:	4659      	mov	r1, fp
 800939a:	018b      	lsls	r3, r1, #6
 800939c:	4651      	mov	r1, sl
 800939e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80093a2:	4651      	mov	r1, sl
 80093a4:	018a      	lsls	r2, r1, #6
 80093a6:	4651      	mov	r1, sl
 80093a8:	1a54      	subs	r4, r2, r1
 80093aa:	4659      	mov	r1, fp
 80093ac:	eb63 0501 	sbc.w	r5, r3, r1
 80093b0:	f04f 0200 	mov.w	r2, #0
 80093b4:	f04f 0300 	mov.w	r3, #0
 80093b8:	00eb      	lsls	r3, r5, #3
 80093ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80093be:	00e2      	lsls	r2, r4, #3
 80093c0:	4614      	mov	r4, r2
 80093c2:	461d      	mov	r5, r3
 80093c4:	4643      	mov	r3, r8
 80093c6:	18e3      	adds	r3, r4, r3
 80093c8:	603b      	str	r3, [r7, #0]
 80093ca:	464b      	mov	r3, r9
 80093cc:	eb45 0303 	adc.w	r3, r5, r3
 80093d0:	607b      	str	r3, [r7, #4]
 80093d2:	f04f 0200 	mov.w	r2, #0
 80093d6:	f04f 0300 	mov.w	r3, #0
 80093da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80093de:	4629      	mov	r1, r5
 80093e0:	028b      	lsls	r3, r1, #10
 80093e2:	4621      	mov	r1, r4
 80093e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80093e8:	4621      	mov	r1, r4
 80093ea:	028a      	lsls	r2, r1, #10
 80093ec:	4610      	mov	r0, r2
 80093ee:	4619      	mov	r1, r3
 80093f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80093f4:	2200      	movs	r2, #0
 80093f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80093f8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80093fa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80093fe:	f7f7 fcab 	bl	8000d58 <__aeabi_uldivmod>
 8009402:	4602      	mov	r2, r0
 8009404:	460b      	mov	r3, r1
 8009406:	4613      	mov	r3, r2
 8009408:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800940c:	4b0d      	ldr	r3, [pc, #52]	@ (8009444 <HAL_RCC_GetSysClockFreq+0x458>)
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	0f1b      	lsrs	r3, r3, #28
 8009412:	f003 0307 	and.w	r3, r3, #7
 8009416:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 800941a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800941e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009422:	fbb2 f3f3 	udiv	r3, r2, r3
 8009426:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800942a:	e003      	b.n	8009434 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800942c:	4b06      	ldr	r3, [pc, #24]	@ (8009448 <HAL_RCC_GetSysClockFreq+0x45c>)
 800942e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8009432:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009434:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8009438:	4618      	mov	r0, r3
 800943a:	37b8      	adds	r7, #184	@ 0xb8
 800943c:	46bd      	mov	sp, r7
 800943e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009442:	bf00      	nop
 8009444:	40023800 	.word	0x40023800
 8009448:	00f42400 	.word	0x00f42400

0800944c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b086      	sub	sp, #24
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d101      	bne.n	800945e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800945a:	2301      	movs	r3, #1
 800945c:	e28d      	b.n	800997a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f003 0301 	and.w	r3, r3, #1
 8009466:	2b00      	cmp	r3, #0
 8009468:	f000 8083 	beq.w	8009572 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800946c:	4b94      	ldr	r3, [pc, #592]	@ (80096c0 <HAL_RCC_OscConfig+0x274>)
 800946e:	689b      	ldr	r3, [r3, #8]
 8009470:	f003 030c 	and.w	r3, r3, #12
 8009474:	2b04      	cmp	r3, #4
 8009476:	d019      	beq.n	80094ac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009478:	4b91      	ldr	r3, [pc, #580]	@ (80096c0 <HAL_RCC_OscConfig+0x274>)
 800947a:	689b      	ldr	r3, [r3, #8]
 800947c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009480:	2b08      	cmp	r3, #8
 8009482:	d106      	bne.n	8009492 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009484:	4b8e      	ldr	r3, [pc, #568]	@ (80096c0 <HAL_RCC_OscConfig+0x274>)
 8009486:	685b      	ldr	r3, [r3, #4]
 8009488:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800948c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009490:	d00c      	beq.n	80094ac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009492:	4b8b      	ldr	r3, [pc, #556]	@ (80096c0 <HAL_RCC_OscConfig+0x274>)
 8009494:	689b      	ldr	r3, [r3, #8]
 8009496:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800949a:	2b0c      	cmp	r3, #12
 800949c:	d112      	bne.n	80094c4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800949e:	4b88      	ldr	r3, [pc, #544]	@ (80096c0 <HAL_RCC_OscConfig+0x274>)
 80094a0:	685b      	ldr	r3, [r3, #4]
 80094a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80094a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80094aa:	d10b      	bne.n	80094c4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80094ac:	4b84      	ldr	r3, [pc, #528]	@ (80096c0 <HAL_RCC_OscConfig+0x274>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d05b      	beq.n	8009570 <HAL_RCC_OscConfig+0x124>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	685b      	ldr	r3, [r3, #4]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d157      	bne.n	8009570 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80094c0:	2301      	movs	r3, #1
 80094c2:	e25a      	b.n	800997a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	685b      	ldr	r3, [r3, #4]
 80094c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80094cc:	d106      	bne.n	80094dc <HAL_RCC_OscConfig+0x90>
 80094ce:	4b7c      	ldr	r3, [pc, #496]	@ (80096c0 <HAL_RCC_OscConfig+0x274>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	4a7b      	ldr	r2, [pc, #492]	@ (80096c0 <HAL_RCC_OscConfig+0x274>)
 80094d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80094d8:	6013      	str	r3, [r2, #0]
 80094da:	e01d      	b.n	8009518 <HAL_RCC_OscConfig+0xcc>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	685b      	ldr	r3, [r3, #4]
 80094e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80094e4:	d10c      	bne.n	8009500 <HAL_RCC_OscConfig+0xb4>
 80094e6:	4b76      	ldr	r3, [pc, #472]	@ (80096c0 <HAL_RCC_OscConfig+0x274>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4a75      	ldr	r2, [pc, #468]	@ (80096c0 <HAL_RCC_OscConfig+0x274>)
 80094ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80094f0:	6013      	str	r3, [r2, #0]
 80094f2:	4b73      	ldr	r3, [pc, #460]	@ (80096c0 <HAL_RCC_OscConfig+0x274>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	4a72      	ldr	r2, [pc, #456]	@ (80096c0 <HAL_RCC_OscConfig+0x274>)
 80094f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80094fc:	6013      	str	r3, [r2, #0]
 80094fe:	e00b      	b.n	8009518 <HAL_RCC_OscConfig+0xcc>
 8009500:	4b6f      	ldr	r3, [pc, #444]	@ (80096c0 <HAL_RCC_OscConfig+0x274>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4a6e      	ldr	r2, [pc, #440]	@ (80096c0 <HAL_RCC_OscConfig+0x274>)
 8009506:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800950a:	6013      	str	r3, [r2, #0]
 800950c:	4b6c      	ldr	r3, [pc, #432]	@ (80096c0 <HAL_RCC_OscConfig+0x274>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	4a6b      	ldr	r2, [pc, #428]	@ (80096c0 <HAL_RCC_OscConfig+0x274>)
 8009512:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009516:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	685b      	ldr	r3, [r3, #4]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d013      	beq.n	8009548 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009520:	f7fc ffd6 	bl	80064d0 <HAL_GetTick>
 8009524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009526:	e008      	b.n	800953a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009528:	f7fc ffd2 	bl	80064d0 <HAL_GetTick>
 800952c:	4602      	mov	r2, r0
 800952e:	693b      	ldr	r3, [r7, #16]
 8009530:	1ad3      	subs	r3, r2, r3
 8009532:	2b64      	cmp	r3, #100	@ 0x64
 8009534:	d901      	bls.n	800953a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8009536:	2303      	movs	r3, #3
 8009538:	e21f      	b.n	800997a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800953a:	4b61      	ldr	r3, [pc, #388]	@ (80096c0 <HAL_RCC_OscConfig+0x274>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009542:	2b00      	cmp	r3, #0
 8009544:	d0f0      	beq.n	8009528 <HAL_RCC_OscConfig+0xdc>
 8009546:	e014      	b.n	8009572 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009548:	f7fc ffc2 	bl	80064d0 <HAL_GetTick>
 800954c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800954e:	e008      	b.n	8009562 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009550:	f7fc ffbe 	bl	80064d0 <HAL_GetTick>
 8009554:	4602      	mov	r2, r0
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	1ad3      	subs	r3, r2, r3
 800955a:	2b64      	cmp	r3, #100	@ 0x64
 800955c:	d901      	bls.n	8009562 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800955e:	2303      	movs	r3, #3
 8009560:	e20b      	b.n	800997a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009562:	4b57      	ldr	r3, [pc, #348]	@ (80096c0 <HAL_RCC_OscConfig+0x274>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800956a:	2b00      	cmp	r3, #0
 800956c:	d1f0      	bne.n	8009550 <HAL_RCC_OscConfig+0x104>
 800956e:	e000      	b.n	8009572 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009570:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f003 0302 	and.w	r3, r3, #2
 800957a:	2b00      	cmp	r3, #0
 800957c:	d06f      	beq.n	800965e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800957e:	4b50      	ldr	r3, [pc, #320]	@ (80096c0 <HAL_RCC_OscConfig+0x274>)
 8009580:	689b      	ldr	r3, [r3, #8]
 8009582:	f003 030c 	and.w	r3, r3, #12
 8009586:	2b00      	cmp	r3, #0
 8009588:	d017      	beq.n	80095ba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800958a:	4b4d      	ldr	r3, [pc, #308]	@ (80096c0 <HAL_RCC_OscConfig+0x274>)
 800958c:	689b      	ldr	r3, [r3, #8]
 800958e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009592:	2b08      	cmp	r3, #8
 8009594:	d105      	bne.n	80095a2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009596:	4b4a      	ldr	r3, [pc, #296]	@ (80096c0 <HAL_RCC_OscConfig+0x274>)
 8009598:	685b      	ldr	r3, [r3, #4]
 800959a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d00b      	beq.n	80095ba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80095a2:	4b47      	ldr	r3, [pc, #284]	@ (80096c0 <HAL_RCC_OscConfig+0x274>)
 80095a4:	689b      	ldr	r3, [r3, #8]
 80095a6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80095aa:	2b0c      	cmp	r3, #12
 80095ac:	d11c      	bne.n	80095e8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80095ae:	4b44      	ldr	r3, [pc, #272]	@ (80096c0 <HAL_RCC_OscConfig+0x274>)
 80095b0:	685b      	ldr	r3, [r3, #4]
 80095b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d116      	bne.n	80095e8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80095ba:	4b41      	ldr	r3, [pc, #260]	@ (80096c0 <HAL_RCC_OscConfig+0x274>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f003 0302 	and.w	r3, r3, #2
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d005      	beq.n	80095d2 <HAL_RCC_OscConfig+0x186>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	68db      	ldr	r3, [r3, #12]
 80095ca:	2b01      	cmp	r3, #1
 80095cc:	d001      	beq.n	80095d2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80095ce:	2301      	movs	r3, #1
 80095d0:	e1d3      	b.n	800997a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80095d2:	4b3b      	ldr	r3, [pc, #236]	@ (80096c0 <HAL_RCC_OscConfig+0x274>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	691b      	ldr	r3, [r3, #16]
 80095de:	00db      	lsls	r3, r3, #3
 80095e0:	4937      	ldr	r1, [pc, #220]	@ (80096c0 <HAL_RCC_OscConfig+0x274>)
 80095e2:	4313      	orrs	r3, r2
 80095e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80095e6:	e03a      	b.n	800965e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	68db      	ldr	r3, [r3, #12]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d020      	beq.n	8009632 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80095f0:	4b34      	ldr	r3, [pc, #208]	@ (80096c4 <HAL_RCC_OscConfig+0x278>)
 80095f2:	2201      	movs	r2, #1
 80095f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095f6:	f7fc ff6b 	bl	80064d0 <HAL_GetTick>
 80095fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80095fc:	e008      	b.n	8009610 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80095fe:	f7fc ff67 	bl	80064d0 <HAL_GetTick>
 8009602:	4602      	mov	r2, r0
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	1ad3      	subs	r3, r2, r3
 8009608:	2b02      	cmp	r3, #2
 800960a:	d901      	bls.n	8009610 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800960c:	2303      	movs	r3, #3
 800960e:	e1b4      	b.n	800997a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009610:	4b2b      	ldr	r3, [pc, #172]	@ (80096c0 <HAL_RCC_OscConfig+0x274>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f003 0302 	and.w	r3, r3, #2
 8009618:	2b00      	cmp	r3, #0
 800961a:	d0f0      	beq.n	80095fe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800961c:	4b28      	ldr	r3, [pc, #160]	@ (80096c0 <HAL_RCC_OscConfig+0x274>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	691b      	ldr	r3, [r3, #16]
 8009628:	00db      	lsls	r3, r3, #3
 800962a:	4925      	ldr	r1, [pc, #148]	@ (80096c0 <HAL_RCC_OscConfig+0x274>)
 800962c:	4313      	orrs	r3, r2
 800962e:	600b      	str	r3, [r1, #0]
 8009630:	e015      	b.n	800965e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009632:	4b24      	ldr	r3, [pc, #144]	@ (80096c4 <HAL_RCC_OscConfig+0x278>)
 8009634:	2200      	movs	r2, #0
 8009636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009638:	f7fc ff4a 	bl	80064d0 <HAL_GetTick>
 800963c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800963e:	e008      	b.n	8009652 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009640:	f7fc ff46 	bl	80064d0 <HAL_GetTick>
 8009644:	4602      	mov	r2, r0
 8009646:	693b      	ldr	r3, [r7, #16]
 8009648:	1ad3      	subs	r3, r2, r3
 800964a:	2b02      	cmp	r3, #2
 800964c:	d901      	bls.n	8009652 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800964e:	2303      	movs	r3, #3
 8009650:	e193      	b.n	800997a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009652:	4b1b      	ldr	r3, [pc, #108]	@ (80096c0 <HAL_RCC_OscConfig+0x274>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f003 0302 	and.w	r3, r3, #2
 800965a:	2b00      	cmp	r3, #0
 800965c:	d1f0      	bne.n	8009640 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f003 0308 	and.w	r3, r3, #8
 8009666:	2b00      	cmp	r3, #0
 8009668:	d036      	beq.n	80096d8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	695b      	ldr	r3, [r3, #20]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d016      	beq.n	80096a0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009672:	4b15      	ldr	r3, [pc, #84]	@ (80096c8 <HAL_RCC_OscConfig+0x27c>)
 8009674:	2201      	movs	r2, #1
 8009676:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009678:	f7fc ff2a 	bl	80064d0 <HAL_GetTick>
 800967c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800967e:	e008      	b.n	8009692 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009680:	f7fc ff26 	bl	80064d0 <HAL_GetTick>
 8009684:	4602      	mov	r2, r0
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	1ad3      	subs	r3, r2, r3
 800968a:	2b02      	cmp	r3, #2
 800968c:	d901      	bls.n	8009692 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800968e:	2303      	movs	r3, #3
 8009690:	e173      	b.n	800997a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009692:	4b0b      	ldr	r3, [pc, #44]	@ (80096c0 <HAL_RCC_OscConfig+0x274>)
 8009694:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009696:	f003 0302 	and.w	r3, r3, #2
 800969a:	2b00      	cmp	r3, #0
 800969c:	d0f0      	beq.n	8009680 <HAL_RCC_OscConfig+0x234>
 800969e:	e01b      	b.n	80096d8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80096a0:	4b09      	ldr	r3, [pc, #36]	@ (80096c8 <HAL_RCC_OscConfig+0x27c>)
 80096a2:	2200      	movs	r2, #0
 80096a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80096a6:	f7fc ff13 	bl	80064d0 <HAL_GetTick>
 80096aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80096ac:	e00e      	b.n	80096cc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80096ae:	f7fc ff0f 	bl	80064d0 <HAL_GetTick>
 80096b2:	4602      	mov	r2, r0
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	1ad3      	subs	r3, r2, r3
 80096b8:	2b02      	cmp	r3, #2
 80096ba:	d907      	bls.n	80096cc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80096bc:	2303      	movs	r3, #3
 80096be:	e15c      	b.n	800997a <HAL_RCC_OscConfig+0x52e>
 80096c0:	40023800 	.word	0x40023800
 80096c4:	42470000 	.word	0x42470000
 80096c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80096cc:	4b8a      	ldr	r3, [pc, #552]	@ (80098f8 <HAL_RCC_OscConfig+0x4ac>)
 80096ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096d0:	f003 0302 	and.w	r3, r3, #2
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d1ea      	bne.n	80096ae <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f003 0304 	and.w	r3, r3, #4
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	f000 8097 	beq.w	8009814 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80096e6:	2300      	movs	r3, #0
 80096e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80096ea:	4b83      	ldr	r3, [pc, #524]	@ (80098f8 <HAL_RCC_OscConfig+0x4ac>)
 80096ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d10f      	bne.n	8009716 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80096f6:	2300      	movs	r3, #0
 80096f8:	60bb      	str	r3, [r7, #8]
 80096fa:	4b7f      	ldr	r3, [pc, #508]	@ (80098f8 <HAL_RCC_OscConfig+0x4ac>)
 80096fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096fe:	4a7e      	ldr	r2, [pc, #504]	@ (80098f8 <HAL_RCC_OscConfig+0x4ac>)
 8009700:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009704:	6413      	str	r3, [r2, #64]	@ 0x40
 8009706:	4b7c      	ldr	r3, [pc, #496]	@ (80098f8 <HAL_RCC_OscConfig+0x4ac>)
 8009708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800970a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800970e:	60bb      	str	r3, [r7, #8]
 8009710:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009712:	2301      	movs	r3, #1
 8009714:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009716:	4b79      	ldr	r3, [pc, #484]	@ (80098fc <HAL_RCC_OscConfig+0x4b0>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800971e:	2b00      	cmp	r3, #0
 8009720:	d118      	bne.n	8009754 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009722:	4b76      	ldr	r3, [pc, #472]	@ (80098fc <HAL_RCC_OscConfig+0x4b0>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	4a75      	ldr	r2, [pc, #468]	@ (80098fc <HAL_RCC_OscConfig+0x4b0>)
 8009728:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800972c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800972e:	f7fc fecf 	bl	80064d0 <HAL_GetTick>
 8009732:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009734:	e008      	b.n	8009748 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009736:	f7fc fecb 	bl	80064d0 <HAL_GetTick>
 800973a:	4602      	mov	r2, r0
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	1ad3      	subs	r3, r2, r3
 8009740:	2b02      	cmp	r3, #2
 8009742:	d901      	bls.n	8009748 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8009744:	2303      	movs	r3, #3
 8009746:	e118      	b.n	800997a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009748:	4b6c      	ldr	r3, [pc, #432]	@ (80098fc <HAL_RCC_OscConfig+0x4b0>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009750:	2b00      	cmp	r3, #0
 8009752:	d0f0      	beq.n	8009736 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	689b      	ldr	r3, [r3, #8]
 8009758:	2b01      	cmp	r3, #1
 800975a:	d106      	bne.n	800976a <HAL_RCC_OscConfig+0x31e>
 800975c:	4b66      	ldr	r3, [pc, #408]	@ (80098f8 <HAL_RCC_OscConfig+0x4ac>)
 800975e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009760:	4a65      	ldr	r2, [pc, #404]	@ (80098f8 <HAL_RCC_OscConfig+0x4ac>)
 8009762:	f043 0301 	orr.w	r3, r3, #1
 8009766:	6713      	str	r3, [r2, #112]	@ 0x70
 8009768:	e01c      	b.n	80097a4 <HAL_RCC_OscConfig+0x358>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	689b      	ldr	r3, [r3, #8]
 800976e:	2b05      	cmp	r3, #5
 8009770:	d10c      	bne.n	800978c <HAL_RCC_OscConfig+0x340>
 8009772:	4b61      	ldr	r3, [pc, #388]	@ (80098f8 <HAL_RCC_OscConfig+0x4ac>)
 8009774:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009776:	4a60      	ldr	r2, [pc, #384]	@ (80098f8 <HAL_RCC_OscConfig+0x4ac>)
 8009778:	f043 0304 	orr.w	r3, r3, #4
 800977c:	6713      	str	r3, [r2, #112]	@ 0x70
 800977e:	4b5e      	ldr	r3, [pc, #376]	@ (80098f8 <HAL_RCC_OscConfig+0x4ac>)
 8009780:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009782:	4a5d      	ldr	r2, [pc, #372]	@ (80098f8 <HAL_RCC_OscConfig+0x4ac>)
 8009784:	f043 0301 	orr.w	r3, r3, #1
 8009788:	6713      	str	r3, [r2, #112]	@ 0x70
 800978a:	e00b      	b.n	80097a4 <HAL_RCC_OscConfig+0x358>
 800978c:	4b5a      	ldr	r3, [pc, #360]	@ (80098f8 <HAL_RCC_OscConfig+0x4ac>)
 800978e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009790:	4a59      	ldr	r2, [pc, #356]	@ (80098f8 <HAL_RCC_OscConfig+0x4ac>)
 8009792:	f023 0301 	bic.w	r3, r3, #1
 8009796:	6713      	str	r3, [r2, #112]	@ 0x70
 8009798:	4b57      	ldr	r3, [pc, #348]	@ (80098f8 <HAL_RCC_OscConfig+0x4ac>)
 800979a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800979c:	4a56      	ldr	r2, [pc, #344]	@ (80098f8 <HAL_RCC_OscConfig+0x4ac>)
 800979e:	f023 0304 	bic.w	r3, r3, #4
 80097a2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	689b      	ldr	r3, [r3, #8]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d015      	beq.n	80097d8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097ac:	f7fc fe90 	bl	80064d0 <HAL_GetTick>
 80097b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80097b2:	e00a      	b.n	80097ca <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80097b4:	f7fc fe8c 	bl	80064d0 <HAL_GetTick>
 80097b8:	4602      	mov	r2, r0
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	1ad3      	subs	r3, r2, r3
 80097be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80097c2:	4293      	cmp	r3, r2
 80097c4:	d901      	bls.n	80097ca <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80097c6:	2303      	movs	r3, #3
 80097c8:	e0d7      	b.n	800997a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80097ca:	4b4b      	ldr	r3, [pc, #300]	@ (80098f8 <HAL_RCC_OscConfig+0x4ac>)
 80097cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097ce:	f003 0302 	and.w	r3, r3, #2
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d0ee      	beq.n	80097b4 <HAL_RCC_OscConfig+0x368>
 80097d6:	e014      	b.n	8009802 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097d8:	f7fc fe7a 	bl	80064d0 <HAL_GetTick>
 80097dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80097de:	e00a      	b.n	80097f6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80097e0:	f7fc fe76 	bl	80064d0 <HAL_GetTick>
 80097e4:	4602      	mov	r2, r0
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	1ad3      	subs	r3, r2, r3
 80097ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d901      	bls.n	80097f6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80097f2:	2303      	movs	r3, #3
 80097f4:	e0c1      	b.n	800997a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80097f6:	4b40      	ldr	r3, [pc, #256]	@ (80098f8 <HAL_RCC_OscConfig+0x4ac>)
 80097f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097fa:	f003 0302 	and.w	r3, r3, #2
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d1ee      	bne.n	80097e0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009802:	7dfb      	ldrb	r3, [r7, #23]
 8009804:	2b01      	cmp	r3, #1
 8009806:	d105      	bne.n	8009814 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009808:	4b3b      	ldr	r3, [pc, #236]	@ (80098f8 <HAL_RCC_OscConfig+0x4ac>)
 800980a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800980c:	4a3a      	ldr	r2, [pc, #232]	@ (80098f8 <HAL_RCC_OscConfig+0x4ac>)
 800980e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009812:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	699b      	ldr	r3, [r3, #24]
 8009818:	2b00      	cmp	r3, #0
 800981a:	f000 80ad 	beq.w	8009978 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800981e:	4b36      	ldr	r3, [pc, #216]	@ (80098f8 <HAL_RCC_OscConfig+0x4ac>)
 8009820:	689b      	ldr	r3, [r3, #8]
 8009822:	f003 030c 	and.w	r3, r3, #12
 8009826:	2b08      	cmp	r3, #8
 8009828:	d060      	beq.n	80098ec <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	699b      	ldr	r3, [r3, #24]
 800982e:	2b02      	cmp	r3, #2
 8009830:	d145      	bne.n	80098be <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009832:	4b33      	ldr	r3, [pc, #204]	@ (8009900 <HAL_RCC_OscConfig+0x4b4>)
 8009834:	2200      	movs	r2, #0
 8009836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009838:	f7fc fe4a 	bl	80064d0 <HAL_GetTick>
 800983c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800983e:	e008      	b.n	8009852 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009840:	f7fc fe46 	bl	80064d0 <HAL_GetTick>
 8009844:	4602      	mov	r2, r0
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	1ad3      	subs	r3, r2, r3
 800984a:	2b02      	cmp	r3, #2
 800984c:	d901      	bls.n	8009852 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800984e:	2303      	movs	r3, #3
 8009850:	e093      	b.n	800997a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009852:	4b29      	ldr	r3, [pc, #164]	@ (80098f8 <HAL_RCC_OscConfig+0x4ac>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800985a:	2b00      	cmp	r3, #0
 800985c:	d1f0      	bne.n	8009840 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	69da      	ldr	r2, [r3, #28]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6a1b      	ldr	r3, [r3, #32]
 8009866:	431a      	orrs	r2, r3
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800986c:	019b      	lsls	r3, r3, #6
 800986e:	431a      	orrs	r2, r3
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009874:	085b      	lsrs	r3, r3, #1
 8009876:	3b01      	subs	r3, #1
 8009878:	041b      	lsls	r3, r3, #16
 800987a:	431a      	orrs	r2, r3
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009880:	061b      	lsls	r3, r3, #24
 8009882:	431a      	orrs	r2, r3
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009888:	071b      	lsls	r3, r3, #28
 800988a:	491b      	ldr	r1, [pc, #108]	@ (80098f8 <HAL_RCC_OscConfig+0x4ac>)
 800988c:	4313      	orrs	r3, r2
 800988e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009890:	4b1b      	ldr	r3, [pc, #108]	@ (8009900 <HAL_RCC_OscConfig+0x4b4>)
 8009892:	2201      	movs	r2, #1
 8009894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009896:	f7fc fe1b 	bl	80064d0 <HAL_GetTick>
 800989a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800989c:	e008      	b.n	80098b0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800989e:	f7fc fe17 	bl	80064d0 <HAL_GetTick>
 80098a2:	4602      	mov	r2, r0
 80098a4:	693b      	ldr	r3, [r7, #16]
 80098a6:	1ad3      	subs	r3, r2, r3
 80098a8:	2b02      	cmp	r3, #2
 80098aa:	d901      	bls.n	80098b0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80098ac:	2303      	movs	r3, #3
 80098ae:	e064      	b.n	800997a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80098b0:	4b11      	ldr	r3, [pc, #68]	@ (80098f8 <HAL_RCC_OscConfig+0x4ac>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d0f0      	beq.n	800989e <HAL_RCC_OscConfig+0x452>
 80098bc:	e05c      	b.n	8009978 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80098be:	4b10      	ldr	r3, [pc, #64]	@ (8009900 <HAL_RCC_OscConfig+0x4b4>)
 80098c0:	2200      	movs	r2, #0
 80098c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098c4:	f7fc fe04 	bl	80064d0 <HAL_GetTick>
 80098c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80098ca:	e008      	b.n	80098de <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80098cc:	f7fc fe00 	bl	80064d0 <HAL_GetTick>
 80098d0:	4602      	mov	r2, r0
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	1ad3      	subs	r3, r2, r3
 80098d6:	2b02      	cmp	r3, #2
 80098d8:	d901      	bls.n	80098de <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80098da:	2303      	movs	r3, #3
 80098dc:	e04d      	b.n	800997a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80098de:	4b06      	ldr	r3, [pc, #24]	@ (80098f8 <HAL_RCC_OscConfig+0x4ac>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d1f0      	bne.n	80098cc <HAL_RCC_OscConfig+0x480>
 80098ea:	e045      	b.n	8009978 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	699b      	ldr	r3, [r3, #24]
 80098f0:	2b01      	cmp	r3, #1
 80098f2:	d107      	bne.n	8009904 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80098f4:	2301      	movs	r3, #1
 80098f6:	e040      	b.n	800997a <HAL_RCC_OscConfig+0x52e>
 80098f8:	40023800 	.word	0x40023800
 80098fc:	40007000 	.word	0x40007000
 8009900:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009904:	4b1f      	ldr	r3, [pc, #124]	@ (8009984 <HAL_RCC_OscConfig+0x538>)
 8009906:	685b      	ldr	r3, [r3, #4]
 8009908:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	699b      	ldr	r3, [r3, #24]
 800990e:	2b01      	cmp	r3, #1
 8009910:	d030      	beq.n	8009974 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800991c:	429a      	cmp	r2, r3
 800991e:	d129      	bne.n	8009974 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800992a:	429a      	cmp	r2, r3
 800992c:	d122      	bne.n	8009974 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800992e:	68fa      	ldr	r2, [r7, #12]
 8009930:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8009934:	4013      	ands	r3, r2
 8009936:	687a      	ldr	r2, [r7, #4]
 8009938:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800993a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800993c:	4293      	cmp	r3, r2
 800993e:	d119      	bne.n	8009974 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800994a:	085b      	lsrs	r3, r3, #1
 800994c:	3b01      	subs	r3, #1
 800994e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009950:	429a      	cmp	r2, r3
 8009952:	d10f      	bne.n	8009974 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800995e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009960:	429a      	cmp	r2, r3
 8009962:	d107      	bne.n	8009974 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800996e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009970:	429a      	cmp	r2, r3
 8009972:	d001      	beq.n	8009978 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8009974:	2301      	movs	r3, #1
 8009976:	e000      	b.n	800997a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8009978:	2300      	movs	r3, #0
}
 800997a:	4618      	mov	r0, r3
 800997c:	3718      	adds	r7, #24
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}
 8009982:	bf00      	nop
 8009984:	40023800 	.word	0x40023800

08009988 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b082      	sub	sp, #8
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d101      	bne.n	800999a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009996:	2301      	movs	r3, #1
 8009998:	e07b      	b.n	8009a92 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d108      	bne.n	80099b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	685b      	ldr	r3, [r3, #4]
 80099a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80099aa:	d009      	beq.n	80099c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2200      	movs	r2, #0
 80099b0:	61da      	str	r2, [r3, #28]
 80099b2:	e005      	b.n	80099c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2200      	movs	r2, #0
 80099b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2200      	movs	r2, #0
 80099be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2200      	movs	r2, #0
 80099c4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80099cc:	b2db      	uxtb	r3, r3
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d106      	bne.n	80099e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2200      	movs	r2, #0
 80099d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f7fc f982 	bl	8005ce4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2202      	movs	r2, #2
 80099e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	681a      	ldr	r2, [r3, #0]
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80099f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	685b      	ldr	r3, [r3, #4]
 80099fc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	689b      	ldr	r3, [r3, #8]
 8009a04:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009a08:	431a      	orrs	r2, r3
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	68db      	ldr	r3, [r3, #12]
 8009a0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009a12:	431a      	orrs	r2, r3
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	691b      	ldr	r3, [r3, #16]
 8009a18:	f003 0302 	and.w	r3, r3, #2
 8009a1c:	431a      	orrs	r2, r3
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	695b      	ldr	r3, [r3, #20]
 8009a22:	f003 0301 	and.w	r3, r3, #1
 8009a26:	431a      	orrs	r2, r3
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	699b      	ldr	r3, [r3, #24]
 8009a2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009a30:	431a      	orrs	r2, r3
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	69db      	ldr	r3, [r3, #28]
 8009a36:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009a3a:	431a      	orrs	r2, r3
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6a1b      	ldr	r3, [r3, #32]
 8009a40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a44:	ea42 0103 	orr.w	r1, r2, r3
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a4c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	430a      	orrs	r2, r1
 8009a56:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	699b      	ldr	r3, [r3, #24]
 8009a5c:	0c1b      	lsrs	r3, r3, #16
 8009a5e:	f003 0104 	and.w	r1, r3, #4
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a66:	f003 0210 	and.w	r2, r3, #16
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	430a      	orrs	r2, r1
 8009a70:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	69da      	ldr	r2, [r3, #28]
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009a80:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2200      	movs	r2, #0
 8009a86:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8009a90:	2300      	movs	r3, #0
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3708      	adds	r7, #8
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}

08009a9a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a9a:	b580      	push	{r7, lr}
 8009a9c:	b088      	sub	sp, #32
 8009a9e:	af00      	add	r7, sp, #0
 8009aa0:	60f8      	str	r0, [r7, #12]
 8009aa2:	60b9      	str	r1, [r7, #8]
 8009aa4:	603b      	str	r3, [r7, #0]
 8009aa6:	4613      	mov	r3, r2
 8009aa8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009ab4:	2b01      	cmp	r3, #1
 8009ab6:	d101      	bne.n	8009abc <HAL_SPI_Transmit+0x22>
 8009ab8:	2302      	movs	r3, #2
 8009aba:	e126      	b.n	8009d0a <HAL_SPI_Transmit+0x270>
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	2201      	movs	r2, #1
 8009ac0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009ac4:	f7fc fd04 	bl	80064d0 <HAL_GetTick>
 8009ac8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009aca:	88fb      	ldrh	r3, [r7, #6]
 8009acc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009ad4:	b2db      	uxtb	r3, r3
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	d002      	beq.n	8009ae0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009ada:	2302      	movs	r3, #2
 8009adc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009ade:	e10b      	b.n	8009cf8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d002      	beq.n	8009aec <HAL_SPI_Transmit+0x52>
 8009ae6:	88fb      	ldrh	r3, [r7, #6]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d102      	bne.n	8009af2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009aec:	2301      	movs	r3, #1
 8009aee:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009af0:	e102      	b.n	8009cf8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	2203      	movs	r2, #3
 8009af6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	2200      	movs	r2, #0
 8009afe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	68ba      	ldr	r2, [r7, #8]
 8009b04:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	88fa      	ldrh	r2, [r7, #6]
 8009b0a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	88fa      	ldrh	r2, [r7, #6]
 8009b10:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	2200      	movs	r2, #0
 8009b16:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	2200      	movs	r2, #0
 8009b22:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	2200      	movs	r2, #0
 8009b28:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	689b      	ldr	r3, [r3, #8]
 8009b34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009b38:	d10f      	bne.n	8009b5a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	681a      	ldr	r2, [r3, #0]
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009b48:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	681a      	ldr	r2, [r3, #0]
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009b58:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b64:	2b40      	cmp	r3, #64	@ 0x40
 8009b66:	d007      	beq.n	8009b78 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	681a      	ldr	r2, [r3, #0]
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009b76:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	68db      	ldr	r3, [r3, #12]
 8009b7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009b80:	d14b      	bne.n	8009c1a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	685b      	ldr	r3, [r3, #4]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d002      	beq.n	8009b90 <HAL_SPI_Transmit+0xf6>
 8009b8a:	8afb      	ldrh	r3, [r7, #22]
 8009b8c:	2b01      	cmp	r3, #1
 8009b8e:	d13e      	bne.n	8009c0e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b94:	881a      	ldrh	r2, [r3, #0]
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ba0:	1c9a      	adds	r2, r3, #2
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009baa:	b29b      	uxth	r3, r3
 8009bac:	3b01      	subs	r3, #1
 8009bae:	b29a      	uxth	r2, r3
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009bb4:	e02b      	b.n	8009c0e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	689b      	ldr	r3, [r3, #8]
 8009bbc:	f003 0302 	and.w	r3, r3, #2
 8009bc0:	2b02      	cmp	r3, #2
 8009bc2:	d112      	bne.n	8009bea <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bc8:	881a      	ldrh	r2, [r3, #0]
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bd4:	1c9a      	adds	r2, r3, #2
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009bde:	b29b      	uxth	r3, r3
 8009be0:	3b01      	subs	r3, #1
 8009be2:	b29a      	uxth	r2, r3
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	86da      	strh	r2, [r3, #54]	@ 0x36
 8009be8:	e011      	b.n	8009c0e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009bea:	f7fc fc71 	bl	80064d0 <HAL_GetTick>
 8009bee:	4602      	mov	r2, r0
 8009bf0:	69bb      	ldr	r3, [r7, #24]
 8009bf2:	1ad3      	subs	r3, r2, r3
 8009bf4:	683a      	ldr	r2, [r7, #0]
 8009bf6:	429a      	cmp	r2, r3
 8009bf8:	d803      	bhi.n	8009c02 <HAL_SPI_Transmit+0x168>
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c00:	d102      	bne.n	8009c08 <HAL_SPI_Transmit+0x16e>
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d102      	bne.n	8009c0e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8009c08:	2303      	movs	r3, #3
 8009c0a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009c0c:	e074      	b.n	8009cf8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009c12:	b29b      	uxth	r3, r3
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d1ce      	bne.n	8009bb6 <HAL_SPI_Transmit+0x11c>
 8009c18:	e04c      	b.n	8009cb4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	685b      	ldr	r3, [r3, #4]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d002      	beq.n	8009c28 <HAL_SPI_Transmit+0x18e>
 8009c22:	8afb      	ldrh	r3, [r7, #22]
 8009c24:	2b01      	cmp	r3, #1
 8009c26:	d140      	bne.n	8009caa <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	330c      	adds	r3, #12
 8009c32:	7812      	ldrb	r2, [r2, #0]
 8009c34:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c3a:	1c5a      	adds	r2, r3, #1
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009c44:	b29b      	uxth	r3, r3
 8009c46:	3b01      	subs	r3, #1
 8009c48:	b29a      	uxth	r2, r3
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009c4e:	e02c      	b.n	8009caa <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	689b      	ldr	r3, [r3, #8]
 8009c56:	f003 0302 	and.w	r3, r3, #2
 8009c5a:	2b02      	cmp	r3, #2
 8009c5c:	d113      	bne.n	8009c86 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	330c      	adds	r3, #12
 8009c68:	7812      	ldrb	r2, [r2, #0]
 8009c6a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c70:	1c5a      	adds	r2, r3, #1
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009c7a:	b29b      	uxth	r3, r3
 8009c7c:	3b01      	subs	r3, #1
 8009c7e:	b29a      	uxth	r2, r3
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	86da      	strh	r2, [r3, #54]	@ 0x36
 8009c84:	e011      	b.n	8009caa <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009c86:	f7fc fc23 	bl	80064d0 <HAL_GetTick>
 8009c8a:	4602      	mov	r2, r0
 8009c8c:	69bb      	ldr	r3, [r7, #24]
 8009c8e:	1ad3      	subs	r3, r2, r3
 8009c90:	683a      	ldr	r2, [r7, #0]
 8009c92:	429a      	cmp	r2, r3
 8009c94:	d803      	bhi.n	8009c9e <HAL_SPI_Transmit+0x204>
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c9c:	d102      	bne.n	8009ca4 <HAL_SPI_Transmit+0x20a>
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d102      	bne.n	8009caa <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8009ca4:	2303      	movs	r3, #3
 8009ca6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009ca8:	e026      	b.n	8009cf8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009cae:	b29b      	uxth	r3, r3
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d1cd      	bne.n	8009c50 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009cb4:	69ba      	ldr	r2, [r7, #24]
 8009cb6:	6839      	ldr	r1, [r7, #0]
 8009cb8:	68f8      	ldr	r0, [r7, #12]
 8009cba:	f000 fbcb 	bl	800a454 <SPI_EndRxTxTransaction>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d002      	beq.n	8009cca <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	2220      	movs	r2, #32
 8009cc8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	689b      	ldr	r3, [r3, #8]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d10a      	bne.n	8009ce8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	613b      	str	r3, [r7, #16]
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	68db      	ldr	r3, [r3, #12]
 8009cdc:	613b      	str	r3, [r7, #16]
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	689b      	ldr	r3, [r3, #8]
 8009ce4:	613b      	str	r3, [r7, #16]
 8009ce6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d002      	beq.n	8009cf6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	77fb      	strb	r3, [r7, #31]
 8009cf4:	e000      	b.n	8009cf8 <HAL_SPI_Transmit+0x25e>
  }

error:
 8009cf6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	2201      	movs	r2, #1
 8009cfc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2200      	movs	r2, #0
 8009d04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8009d08:	7ffb      	ldrb	r3, [r7, #31]
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3720      	adds	r7, #32
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}

08009d12 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009d12:	b580      	push	{r7, lr}
 8009d14:	b088      	sub	sp, #32
 8009d16:	af02      	add	r7, sp, #8
 8009d18:	60f8      	str	r0, [r7, #12]
 8009d1a:	60b9      	str	r1, [r7, #8]
 8009d1c:	603b      	str	r3, [r7, #0]
 8009d1e:	4613      	mov	r3, r2
 8009d20:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009d22:	2300      	movs	r3, #0
 8009d24:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	685b      	ldr	r3, [r3, #4]
 8009d2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009d2e:	d112      	bne.n	8009d56 <HAL_SPI_Receive+0x44>
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	689b      	ldr	r3, [r3, #8]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d10e      	bne.n	8009d56 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	2204      	movs	r2, #4
 8009d3c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009d40:	88fa      	ldrh	r2, [r7, #6]
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	9300      	str	r3, [sp, #0]
 8009d46:	4613      	mov	r3, r2
 8009d48:	68ba      	ldr	r2, [r7, #8]
 8009d4a:	68b9      	ldr	r1, [r7, #8]
 8009d4c:	68f8      	ldr	r0, [r7, #12]
 8009d4e:	f000 f8f1 	bl	8009f34 <HAL_SPI_TransmitReceive>
 8009d52:	4603      	mov	r3, r0
 8009d54:	e0ea      	b.n	8009f2c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009d5c:	2b01      	cmp	r3, #1
 8009d5e:	d101      	bne.n	8009d64 <HAL_SPI_Receive+0x52>
 8009d60:	2302      	movs	r3, #2
 8009d62:	e0e3      	b.n	8009f2c <HAL_SPI_Receive+0x21a>
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	2201      	movs	r2, #1
 8009d68:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009d6c:	f7fc fbb0 	bl	80064d0 <HAL_GetTick>
 8009d70:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009d78:	b2db      	uxtb	r3, r3
 8009d7a:	2b01      	cmp	r3, #1
 8009d7c:	d002      	beq.n	8009d84 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8009d7e:	2302      	movs	r3, #2
 8009d80:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009d82:	e0ca      	b.n	8009f1a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d002      	beq.n	8009d90 <HAL_SPI_Receive+0x7e>
 8009d8a:	88fb      	ldrh	r3, [r7, #6]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d102      	bne.n	8009d96 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8009d90:	2301      	movs	r3, #1
 8009d92:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009d94:	e0c1      	b.n	8009f1a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	2204      	movs	r2, #4
 8009d9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	2200      	movs	r2, #0
 8009da2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	68ba      	ldr	r2, [r7, #8]
 8009da8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	88fa      	ldrh	r2, [r7, #6]
 8009dae:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	88fa      	ldrh	r2, [r7, #6]
 8009db4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	2200      	movs	r2, #0
 8009dba:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	689b      	ldr	r3, [r3, #8]
 8009dd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009ddc:	d10f      	bne.n	8009dfe <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	681a      	ldr	r2, [r3, #0]
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009dec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	681a      	ldr	r2, [r3, #0]
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009dfc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e08:	2b40      	cmp	r3, #64	@ 0x40
 8009e0a:	d007      	beq.n	8009e1c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	681a      	ldr	r2, [r3, #0]
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009e1a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	68db      	ldr	r3, [r3, #12]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d162      	bne.n	8009eea <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009e24:	e02e      	b.n	8009e84 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	689b      	ldr	r3, [r3, #8]
 8009e2c:	f003 0301 	and.w	r3, r3, #1
 8009e30:	2b01      	cmp	r3, #1
 8009e32:	d115      	bne.n	8009e60 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f103 020c 	add.w	r2, r3, #12
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e40:	7812      	ldrb	r2, [r2, #0]
 8009e42:	b2d2      	uxtb	r2, r2
 8009e44:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e4a:	1c5a      	adds	r2, r3, #1
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e54:	b29b      	uxth	r3, r3
 8009e56:	3b01      	subs	r3, #1
 8009e58:	b29a      	uxth	r2, r3
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009e5e:	e011      	b.n	8009e84 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009e60:	f7fc fb36 	bl	80064d0 <HAL_GetTick>
 8009e64:	4602      	mov	r2, r0
 8009e66:	693b      	ldr	r3, [r7, #16]
 8009e68:	1ad3      	subs	r3, r2, r3
 8009e6a:	683a      	ldr	r2, [r7, #0]
 8009e6c:	429a      	cmp	r2, r3
 8009e6e:	d803      	bhi.n	8009e78 <HAL_SPI_Receive+0x166>
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e76:	d102      	bne.n	8009e7e <HAL_SPI_Receive+0x16c>
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d102      	bne.n	8009e84 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8009e7e:	2303      	movs	r3, #3
 8009e80:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009e82:	e04a      	b.n	8009f1a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e88:	b29b      	uxth	r3, r3
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d1cb      	bne.n	8009e26 <HAL_SPI_Receive+0x114>
 8009e8e:	e031      	b.n	8009ef4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	689b      	ldr	r3, [r3, #8]
 8009e96:	f003 0301 	and.w	r3, r3, #1
 8009e9a:	2b01      	cmp	r3, #1
 8009e9c:	d113      	bne.n	8009ec6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	68da      	ldr	r2, [r3, #12]
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ea8:	b292      	uxth	r2, r2
 8009eaa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009eb0:	1c9a      	adds	r2, r3, #2
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009eba:	b29b      	uxth	r3, r3
 8009ebc:	3b01      	subs	r3, #1
 8009ebe:	b29a      	uxth	r2, r3
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009ec4:	e011      	b.n	8009eea <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009ec6:	f7fc fb03 	bl	80064d0 <HAL_GetTick>
 8009eca:	4602      	mov	r2, r0
 8009ecc:	693b      	ldr	r3, [r7, #16]
 8009ece:	1ad3      	subs	r3, r2, r3
 8009ed0:	683a      	ldr	r2, [r7, #0]
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	d803      	bhi.n	8009ede <HAL_SPI_Receive+0x1cc>
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009edc:	d102      	bne.n	8009ee4 <HAL_SPI_Receive+0x1d2>
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d102      	bne.n	8009eea <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8009ee4:	2303      	movs	r3, #3
 8009ee6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009ee8:	e017      	b.n	8009f1a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009eee:	b29b      	uxth	r3, r3
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d1cd      	bne.n	8009e90 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009ef4:	693a      	ldr	r2, [r7, #16]
 8009ef6:	6839      	ldr	r1, [r7, #0]
 8009ef8:	68f8      	ldr	r0, [r7, #12]
 8009efa:	f000 fa45 	bl	800a388 <SPI_EndRxTransaction>
 8009efe:	4603      	mov	r3, r0
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d002      	beq.n	8009f0a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	2220      	movs	r2, #32
 8009f08:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d002      	beq.n	8009f18 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8009f12:	2301      	movs	r3, #1
 8009f14:	75fb      	strb	r3, [r7, #23]
 8009f16:	e000      	b.n	8009f1a <HAL_SPI_Receive+0x208>
  }

error :
 8009f18:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	2201      	movs	r2, #1
 8009f1e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	2200      	movs	r2, #0
 8009f26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8009f2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	3718      	adds	r7, #24
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}

08009f34 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b08c      	sub	sp, #48	@ 0x30
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	60f8      	str	r0, [r7, #12]
 8009f3c:	60b9      	str	r1, [r7, #8]
 8009f3e:	607a      	str	r2, [r7, #4]
 8009f40:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009f42:	2301      	movs	r3, #1
 8009f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009f46:	2300      	movs	r3, #0
 8009f48:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009f52:	2b01      	cmp	r3, #1
 8009f54:	d101      	bne.n	8009f5a <HAL_SPI_TransmitReceive+0x26>
 8009f56:	2302      	movs	r3, #2
 8009f58:	e18a      	b.n	800a270 <HAL_SPI_TransmitReceive+0x33c>
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	2201      	movs	r2, #1
 8009f5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009f62:	f7fc fab5 	bl	80064d0 <HAL_GetTick>
 8009f66:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009f6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	685b      	ldr	r3, [r3, #4]
 8009f76:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009f78:	887b      	ldrh	r3, [r7, #2]
 8009f7a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009f7c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009f80:	2b01      	cmp	r3, #1
 8009f82:	d00f      	beq.n	8009fa4 <HAL_SPI_TransmitReceive+0x70>
 8009f84:	69fb      	ldr	r3, [r7, #28]
 8009f86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009f8a:	d107      	bne.n	8009f9c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	689b      	ldr	r3, [r3, #8]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d103      	bne.n	8009f9c <HAL_SPI_TransmitReceive+0x68>
 8009f94:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009f98:	2b04      	cmp	r3, #4
 8009f9a:	d003      	beq.n	8009fa4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009f9c:	2302      	movs	r3, #2
 8009f9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8009fa2:	e15b      	b.n	800a25c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d005      	beq.n	8009fb6 <HAL_SPI_TransmitReceive+0x82>
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d002      	beq.n	8009fb6 <HAL_SPI_TransmitReceive+0x82>
 8009fb0:	887b      	ldrh	r3, [r7, #2]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d103      	bne.n	8009fbe <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8009fbc:	e14e      	b.n	800a25c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009fc4:	b2db      	uxtb	r3, r3
 8009fc6:	2b04      	cmp	r3, #4
 8009fc8:	d003      	beq.n	8009fd2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	2205      	movs	r2, #5
 8009fce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	687a      	ldr	r2, [r7, #4]
 8009fdc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	887a      	ldrh	r2, [r7, #2]
 8009fe2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	887a      	ldrh	r2, [r7, #2]
 8009fe8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	68ba      	ldr	r2, [r7, #8]
 8009fee:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	887a      	ldrh	r2, [r7, #2]
 8009ff4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	887a      	ldrh	r2, [r7, #2]
 8009ffa:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	2200      	movs	r2, #0
 800a000:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	2200      	movs	r2, #0
 800a006:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a012:	2b40      	cmp	r3, #64	@ 0x40
 800a014:	d007      	beq.n	800a026 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	681a      	ldr	r2, [r3, #0]
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a024:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	68db      	ldr	r3, [r3, #12]
 800a02a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a02e:	d178      	bne.n	800a122 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	685b      	ldr	r3, [r3, #4]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d002      	beq.n	800a03e <HAL_SPI_TransmitReceive+0x10a>
 800a038:	8b7b      	ldrh	r3, [r7, #26]
 800a03a:	2b01      	cmp	r3, #1
 800a03c:	d166      	bne.n	800a10c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a042:	881a      	ldrh	r2, [r3, #0]
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a04e:	1c9a      	adds	r2, r3, #2
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a058:	b29b      	uxth	r3, r3
 800a05a:	3b01      	subs	r3, #1
 800a05c:	b29a      	uxth	r2, r3
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a062:	e053      	b.n	800a10c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	689b      	ldr	r3, [r3, #8]
 800a06a:	f003 0302 	and.w	r3, r3, #2
 800a06e:	2b02      	cmp	r3, #2
 800a070:	d11b      	bne.n	800a0aa <HAL_SPI_TransmitReceive+0x176>
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a076:	b29b      	uxth	r3, r3
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d016      	beq.n	800a0aa <HAL_SPI_TransmitReceive+0x176>
 800a07c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a07e:	2b01      	cmp	r3, #1
 800a080:	d113      	bne.n	800a0aa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a086:	881a      	ldrh	r2, [r3, #0]
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a092:	1c9a      	adds	r2, r3, #2
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a09c:	b29b      	uxth	r3, r3
 800a09e:	3b01      	subs	r3, #1
 800a0a0:	b29a      	uxth	r2, r3
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	689b      	ldr	r3, [r3, #8]
 800a0b0:	f003 0301 	and.w	r3, r3, #1
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	d119      	bne.n	800a0ec <HAL_SPI_TransmitReceive+0x1b8>
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a0bc:	b29b      	uxth	r3, r3
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d014      	beq.n	800a0ec <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	68da      	ldr	r2, [r3, #12]
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0cc:	b292      	uxth	r2, r2
 800a0ce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0d4:	1c9a      	adds	r2, r3, #2
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a0de:	b29b      	uxth	r3, r3
 800a0e0:	3b01      	subs	r3, #1
 800a0e2:	b29a      	uxth	r2, r3
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a0ec:	f7fc f9f0 	bl	80064d0 <HAL_GetTick>
 800a0f0:	4602      	mov	r2, r0
 800a0f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0f4:	1ad3      	subs	r3, r2, r3
 800a0f6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a0f8:	429a      	cmp	r2, r3
 800a0fa:	d807      	bhi.n	800a10c <HAL_SPI_TransmitReceive+0x1d8>
 800a0fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a102:	d003      	beq.n	800a10c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800a104:	2303      	movs	r3, #3
 800a106:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800a10a:	e0a7      	b.n	800a25c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a110:	b29b      	uxth	r3, r3
 800a112:	2b00      	cmp	r3, #0
 800a114:	d1a6      	bne.n	800a064 <HAL_SPI_TransmitReceive+0x130>
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a11a:	b29b      	uxth	r3, r3
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d1a1      	bne.n	800a064 <HAL_SPI_TransmitReceive+0x130>
 800a120:	e07c      	b.n	800a21c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	685b      	ldr	r3, [r3, #4]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d002      	beq.n	800a130 <HAL_SPI_TransmitReceive+0x1fc>
 800a12a:	8b7b      	ldrh	r3, [r7, #26]
 800a12c:	2b01      	cmp	r3, #1
 800a12e:	d16b      	bne.n	800a208 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	330c      	adds	r3, #12
 800a13a:	7812      	ldrb	r2, [r2, #0]
 800a13c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a142:	1c5a      	adds	r2, r3, #1
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a14c:	b29b      	uxth	r3, r3
 800a14e:	3b01      	subs	r3, #1
 800a150:	b29a      	uxth	r2, r3
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a156:	e057      	b.n	800a208 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	689b      	ldr	r3, [r3, #8]
 800a15e:	f003 0302 	and.w	r3, r3, #2
 800a162:	2b02      	cmp	r3, #2
 800a164:	d11c      	bne.n	800a1a0 <HAL_SPI_TransmitReceive+0x26c>
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a16a:	b29b      	uxth	r3, r3
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d017      	beq.n	800a1a0 <HAL_SPI_TransmitReceive+0x26c>
 800a170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a172:	2b01      	cmp	r3, #1
 800a174:	d114      	bne.n	800a1a0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	330c      	adds	r3, #12
 800a180:	7812      	ldrb	r2, [r2, #0]
 800a182:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a188:	1c5a      	adds	r2, r3, #1
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a192:	b29b      	uxth	r3, r3
 800a194:	3b01      	subs	r3, #1
 800a196:	b29a      	uxth	r2, r3
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a19c:	2300      	movs	r3, #0
 800a19e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	689b      	ldr	r3, [r3, #8]
 800a1a6:	f003 0301 	and.w	r3, r3, #1
 800a1aa:	2b01      	cmp	r3, #1
 800a1ac:	d119      	bne.n	800a1e2 <HAL_SPI_TransmitReceive+0x2ae>
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a1b2:	b29b      	uxth	r3, r3
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d014      	beq.n	800a1e2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	68da      	ldr	r2, [r3, #12]
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1c2:	b2d2      	uxtb	r2, r2
 800a1c4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1ca:	1c5a      	adds	r2, r3, #1
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a1d4:	b29b      	uxth	r3, r3
 800a1d6:	3b01      	subs	r3, #1
 800a1d8:	b29a      	uxth	r2, r3
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a1de:	2301      	movs	r3, #1
 800a1e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a1e2:	f7fc f975 	bl	80064d0 <HAL_GetTick>
 800a1e6:	4602      	mov	r2, r0
 800a1e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ea:	1ad3      	subs	r3, r2, r3
 800a1ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a1ee:	429a      	cmp	r2, r3
 800a1f0:	d803      	bhi.n	800a1fa <HAL_SPI_TransmitReceive+0x2c6>
 800a1f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1f8:	d102      	bne.n	800a200 <HAL_SPI_TransmitReceive+0x2cc>
 800a1fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d103      	bne.n	800a208 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800a200:	2303      	movs	r3, #3
 800a202:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800a206:	e029      	b.n	800a25c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a20c:	b29b      	uxth	r3, r3
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d1a2      	bne.n	800a158 <HAL_SPI_TransmitReceive+0x224>
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a216:	b29b      	uxth	r3, r3
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d19d      	bne.n	800a158 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a21c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a21e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a220:	68f8      	ldr	r0, [r7, #12]
 800a222:	f000 f917 	bl	800a454 <SPI_EndRxTxTransaction>
 800a226:	4603      	mov	r3, r0
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d006      	beq.n	800a23a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800a22c:	2301      	movs	r3, #1
 800a22e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	2220      	movs	r2, #32
 800a236:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800a238:	e010      	b.n	800a25c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	689b      	ldr	r3, [r3, #8]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d10b      	bne.n	800a25a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a242:	2300      	movs	r3, #0
 800a244:	617b      	str	r3, [r7, #20]
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	68db      	ldr	r3, [r3, #12]
 800a24c:	617b      	str	r3, [r7, #20]
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	689b      	ldr	r3, [r3, #8]
 800a254:	617b      	str	r3, [r7, #20]
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	e000      	b.n	800a25c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800a25a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	2201      	movs	r2, #1
 800a260:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	2200      	movs	r2, #0
 800a268:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800a26c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800a270:	4618      	mov	r0, r3
 800a272:	3730      	adds	r7, #48	@ 0x30
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}

0800a278 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b088      	sub	sp, #32
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	60f8      	str	r0, [r7, #12]
 800a280:	60b9      	str	r1, [r7, #8]
 800a282:	603b      	str	r3, [r7, #0]
 800a284:	4613      	mov	r3, r2
 800a286:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a288:	f7fc f922 	bl	80064d0 <HAL_GetTick>
 800a28c:	4602      	mov	r2, r0
 800a28e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a290:	1a9b      	subs	r3, r3, r2
 800a292:	683a      	ldr	r2, [r7, #0]
 800a294:	4413      	add	r3, r2
 800a296:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a298:	f7fc f91a 	bl	80064d0 <HAL_GetTick>
 800a29c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a29e:	4b39      	ldr	r3, [pc, #228]	@ (800a384 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	015b      	lsls	r3, r3, #5
 800a2a4:	0d1b      	lsrs	r3, r3, #20
 800a2a6:	69fa      	ldr	r2, [r7, #28]
 800a2a8:	fb02 f303 	mul.w	r3, r2, r3
 800a2ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a2ae:	e054      	b.n	800a35a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2b6:	d050      	beq.n	800a35a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a2b8:	f7fc f90a 	bl	80064d0 <HAL_GetTick>
 800a2bc:	4602      	mov	r2, r0
 800a2be:	69bb      	ldr	r3, [r7, #24]
 800a2c0:	1ad3      	subs	r3, r2, r3
 800a2c2:	69fa      	ldr	r2, [r7, #28]
 800a2c4:	429a      	cmp	r2, r3
 800a2c6:	d902      	bls.n	800a2ce <SPI_WaitFlagStateUntilTimeout+0x56>
 800a2c8:	69fb      	ldr	r3, [r7, #28]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d13d      	bne.n	800a34a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	685a      	ldr	r2, [r3, #4]
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a2dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	685b      	ldr	r3, [r3, #4]
 800a2e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a2e6:	d111      	bne.n	800a30c <SPI_WaitFlagStateUntilTimeout+0x94>
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	689b      	ldr	r3, [r3, #8]
 800a2ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a2f0:	d004      	beq.n	800a2fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	689b      	ldr	r3, [r3, #8]
 800a2f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a2fa:	d107      	bne.n	800a30c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	681a      	ldr	r2, [r3, #0]
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a30a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a310:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a314:	d10f      	bne.n	800a336 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	681a      	ldr	r2, [r3, #0]
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a324:	601a      	str	r2, [r3, #0]
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	681a      	ldr	r2, [r3, #0]
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a334:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	2201      	movs	r2, #1
 800a33a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	2200      	movs	r2, #0
 800a342:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800a346:	2303      	movs	r3, #3
 800a348:	e017      	b.n	800a37a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a34a:	697b      	ldr	r3, [r7, #20]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d101      	bne.n	800a354 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a350:	2300      	movs	r3, #0
 800a352:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	3b01      	subs	r3, #1
 800a358:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	689a      	ldr	r2, [r3, #8]
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	4013      	ands	r3, r2
 800a364:	68ba      	ldr	r2, [r7, #8]
 800a366:	429a      	cmp	r2, r3
 800a368:	bf0c      	ite	eq
 800a36a:	2301      	moveq	r3, #1
 800a36c:	2300      	movne	r3, #0
 800a36e:	b2db      	uxtb	r3, r3
 800a370:	461a      	mov	r2, r3
 800a372:	79fb      	ldrb	r3, [r7, #7]
 800a374:	429a      	cmp	r2, r3
 800a376:	d19b      	bne.n	800a2b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a378:	2300      	movs	r3, #0
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3720      	adds	r7, #32
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}
 800a382:	bf00      	nop
 800a384:	20000044 	.word	0x20000044

0800a388 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b086      	sub	sp, #24
 800a38c:	af02      	add	r7, sp, #8
 800a38e:	60f8      	str	r0, [r7, #12]
 800a390:	60b9      	str	r1, [r7, #8]
 800a392:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	685b      	ldr	r3, [r3, #4]
 800a398:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a39c:	d111      	bne.n	800a3c2 <SPI_EndRxTransaction+0x3a>
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	689b      	ldr	r3, [r3, #8]
 800a3a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a3a6:	d004      	beq.n	800a3b2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	689b      	ldr	r3, [r3, #8]
 800a3ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a3b0:	d107      	bne.n	800a3c2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	681a      	ldr	r2, [r3, #0]
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a3c0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	685b      	ldr	r3, [r3, #4]
 800a3c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a3ca:	d12a      	bne.n	800a422 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	689b      	ldr	r3, [r3, #8]
 800a3d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a3d4:	d012      	beq.n	800a3fc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	9300      	str	r3, [sp, #0]
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	2200      	movs	r2, #0
 800a3de:	2180      	movs	r1, #128	@ 0x80
 800a3e0:	68f8      	ldr	r0, [r7, #12]
 800a3e2:	f7ff ff49 	bl	800a278 <SPI_WaitFlagStateUntilTimeout>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d02d      	beq.n	800a448 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3f0:	f043 0220 	orr.w	r2, r3, #32
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800a3f8:	2303      	movs	r3, #3
 800a3fa:	e026      	b.n	800a44a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	9300      	str	r3, [sp, #0]
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	2200      	movs	r2, #0
 800a404:	2101      	movs	r1, #1
 800a406:	68f8      	ldr	r0, [r7, #12]
 800a408:	f7ff ff36 	bl	800a278 <SPI_WaitFlagStateUntilTimeout>
 800a40c:	4603      	mov	r3, r0
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d01a      	beq.n	800a448 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a416:	f043 0220 	orr.w	r2, r3, #32
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800a41e:	2303      	movs	r3, #3
 800a420:	e013      	b.n	800a44a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	9300      	str	r3, [sp, #0]
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	2200      	movs	r2, #0
 800a42a:	2101      	movs	r1, #1
 800a42c:	68f8      	ldr	r0, [r7, #12]
 800a42e:	f7ff ff23 	bl	800a278 <SPI_WaitFlagStateUntilTimeout>
 800a432:	4603      	mov	r3, r0
 800a434:	2b00      	cmp	r3, #0
 800a436:	d007      	beq.n	800a448 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a43c:	f043 0220 	orr.w	r2, r3, #32
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800a444:	2303      	movs	r3, #3
 800a446:	e000      	b.n	800a44a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800a448:	2300      	movs	r3, #0
}
 800a44a:	4618      	mov	r0, r3
 800a44c:	3710      	adds	r7, #16
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}
	...

0800a454 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b088      	sub	sp, #32
 800a458:	af02      	add	r7, sp, #8
 800a45a:	60f8      	str	r0, [r7, #12]
 800a45c:	60b9      	str	r1, [r7, #8]
 800a45e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a460:	4b1b      	ldr	r3, [pc, #108]	@ (800a4d0 <SPI_EndRxTxTransaction+0x7c>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	4a1b      	ldr	r2, [pc, #108]	@ (800a4d4 <SPI_EndRxTxTransaction+0x80>)
 800a466:	fba2 2303 	umull	r2, r3, r2, r3
 800a46a:	0d5b      	lsrs	r3, r3, #21
 800a46c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800a470:	fb02 f303 	mul.w	r3, r2, r3
 800a474:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	685b      	ldr	r3, [r3, #4]
 800a47a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a47e:	d112      	bne.n	800a4a6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	9300      	str	r3, [sp, #0]
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	2200      	movs	r2, #0
 800a488:	2180      	movs	r1, #128	@ 0x80
 800a48a:	68f8      	ldr	r0, [r7, #12]
 800a48c:	f7ff fef4 	bl	800a278 <SPI_WaitFlagStateUntilTimeout>
 800a490:	4603      	mov	r3, r0
 800a492:	2b00      	cmp	r3, #0
 800a494:	d016      	beq.n	800a4c4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a49a:	f043 0220 	orr.w	r2, r3, #32
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800a4a2:	2303      	movs	r3, #3
 800a4a4:	e00f      	b.n	800a4c6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d00a      	beq.n	800a4c2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a4ac:	697b      	ldr	r3, [r7, #20]
 800a4ae:	3b01      	subs	r3, #1
 800a4b0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	689b      	ldr	r3, [r3, #8]
 800a4b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4bc:	2b80      	cmp	r3, #128	@ 0x80
 800a4be:	d0f2      	beq.n	800a4a6 <SPI_EndRxTxTransaction+0x52>
 800a4c0:	e000      	b.n	800a4c4 <SPI_EndRxTxTransaction+0x70>
        break;
 800a4c2:	bf00      	nop
  }

  return HAL_OK;
 800a4c4:	2300      	movs	r3, #0
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3718      	adds	r7, #24
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}
 800a4ce:	bf00      	nop
 800a4d0:	20000044 	.word	0x20000044
 800a4d4:	165e9f81 	.word	0x165e9f81

0800a4d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b082      	sub	sp, #8
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d101      	bne.n	800a4ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	e041      	b.n	800a56e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a4f0:	b2db      	uxtb	r3, r3
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d106      	bne.n	800a504 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a4fe:	6878      	ldr	r0, [r7, #4]
 800a500:	f7fb fc38 	bl	8005d74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2202      	movs	r2, #2
 800a508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681a      	ldr	r2, [r3, #0]
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	3304      	adds	r3, #4
 800a514:	4619      	mov	r1, r3
 800a516:	4610      	mov	r0, r2
 800a518:	f000 fb2c 	bl	800ab74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2201      	movs	r2, #1
 800a520:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2201      	movs	r2, #1
 800a528:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2201      	movs	r2, #1
 800a530:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2201      	movs	r2, #1
 800a538:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2201      	movs	r2, #1
 800a540:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2201      	movs	r2, #1
 800a548:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2201      	movs	r2, #1
 800a550:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2201      	movs	r2, #1
 800a558:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2201      	movs	r2, #1
 800a560:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2201      	movs	r2, #1
 800a568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a56c:	2300      	movs	r3, #0
}
 800a56e:	4618      	mov	r0, r3
 800a570:	3708      	adds	r7, #8
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}
	...

0800a578 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a578:	b480      	push	{r7}
 800a57a:	b085      	sub	sp, #20
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a586:	b2db      	uxtb	r3, r3
 800a588:	2b01      	cmp	r3, #1
 800a58a:	d001      	beq.n	800a590 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a58c:	2301      	movs	r3, #1
 800a58e:	e046      	b.n	800a61e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2202      	movs	r2, #2
 800a594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	4a23      	ldr	r2, [pc, #140]	@ (800a62c <HAL_TIM_Base_Start+0xb4>)
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	d022      	beq.n	800a5e8 <HAL_TIM_Base_Start+0x70>
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a5aa:	d01d      	beq.n	800a5e8 <HAL_TIM_Base_Start+0x70>
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	4a1f      	ldr	r2, [pc, #124]	@ (800a630 <HAL_TIM_Base_Start+0xb8>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d018      	beq.n	800a5e8 <HAL_TIM_Base_Start+0x70>
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	4a1e      	ldr	r2, [pc, #120]	@ (800a634 <HAL_TIM_Base_Start+0xbc>)
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d013      	beq.n	800a5e8 <HAL_TIM_Base_Start+0x70>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	4a1c      	ldr	r2, [pc, #112]	@ (800a638 <HAL_TIM_Base_Start+0xc0>)
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	d00e      	beq.n	800a5e8 <HAL_TIM_Base_Start+0x70>
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	4a1b      	ldr	r2, [pc, #108]	@ (800a63c <HAL_TIM_Base_Start+0xc4>)
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d009      	beq.n	800a5e8 <HAL_TIM_Base_Start+0x70>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	4a19      	ldr	r2, [pc, #100]	@ (800a640 <HAL_TIM_Base_Start+0xc8>)
 800a5da:	4293      	cmp	r3, r2
 800a5dc:	d004      	beq.n	800a5e8 <HAL_TIM_Base_Start+0x70>
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	4a18      	ldr	r2, [pc, #96]	@ (800a644 <HAL_TIM_Base_Start+0xcc>)
 800a5e4:	4293      	cmp	r3, r2
 800a5e6:	d111      	bne.n	800a60c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	689b      	ldr	r3, [r3, #8]
 800a5ee:	f003 0307 	and.w	r3, r3, #7
 800a5f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	2b06      	cmp	r3, #6
 800a5f8:	d010      	beq.n	800a61c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	681a      	ldr	r2, [r3, #0]
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f042 0201 	orr.w	r2, r2, #1
 800a608:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a60a:	e007      	b.n	800a61c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	681a      	ldr	r2, [r3, #0]
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f042 0201 	orr.w	r2, r2, #1
 800a61a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a61c:	2300      	movs	r3, #0
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3714      	adds	r7, #20
 800a622:	46bd      	mov	sp, r7
 800a624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a628:	4770      	bx	lr
 800a62a:	bf00      	nop
 800a62c:	40010000 	.word	0x40010000
 800a630:	40000400 	.word	0x40000400
 800a634:	40000800 	.word	0x40000800
 800a638:	40000c00 	.word	0x40000c00
 800a63c:	40010400 	.word	0x40010400
 800a640:	40014000 	.word	0x40014000
 800a644:	40001800 	.word	0x40001800

0800a648 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a648:	b480      	push	{r7}
 800a64a:	b085      	sub	sp, #20
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a656:	b2db      	uxtb	r3, r3
 800a658:	2b01      	cmp	r3, #1
 800a65a:	d001      	beq.n	800a660 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a65c:	2301      	movs	r3, #1
 800a65e:	e04e      	b.n	800a6fe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2202      	movs	r2, #2
 800a664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	68da      	ldr	r2, [r3, #12]
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f042 0201 	orr.w	r2, r2, #1
 800a676:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	4a23      	ldr	r2, [pc, #140]	@ (800a70c <HAL_TIM_Base_Start_IT+0xc4>)
 800a67e:	4293      	cmp	r3, r2
 800a680:	d022      	beq.n	800a6c8 <HAL_TIM_Base_Start_IT+0x80>
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a68a:	d01d      	beq.n	800a6c8 <HAL_TIM_Base_Start_IT+0x80>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	4a1f      	ldr	r2, [pc, #124]	@ (800a710 <HAL_TIM_Base_Start_IT+0xc8>)
 800a692:	4293      	cmp	r3, r2
 800a694:	d018      	beq.n	800a6c8 <HAL_TIM_Base_Start_IT+0x80>
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	4a1e      	ldr	r2, [pc, #120]	@ (800a714 <HAL_TIM_Base_Start_IT+0xcc>)
 800a69c:	4293      	cmp	r3, r2
 800a69e:	d013      	beq.n	800a6c8 <HAL_TIM_Base_Start_IT+0x80>
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	4a1c      	ldr	r2, [pc, #112]	@ (800a718 <HAL_TIM_Base_Start_IT+0xd0>)
 800a6a6:	4293      	cmp	r3, r2
 800a6a8:	d00e      	beq.n	800a6c8 <HAL_TIM_Base_Start_IT+0x80>
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	4a1b      	ldr	r2, [pc, #108]	@ (800a71c <HAL_TIM_Base_Start_IT+0xd4>)
 800a6b0:	4293      	cmp	r3, r2
 800a6b2:	d009      	beq.n	800a6c8 <HAL_TIM_Base_Start_IT+0x80>
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	4a19      	ldr	r2, [pc, #100]	@ (800a720 <HAL_TIM_Base_Start_IT+0xd8>)
 800a6ba:	4293      	cmp	r3, r2
 800a6bc:	d004      	beq.n	800a6c8 <HAL_TIM_Base_Start_IT+0x80>
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	4a18      	ldr	r2, [pc, #96]	@ (800a724 <HAL_TIM_Base_Start_IT+0xdc>)
 800a6c4:	4293      	cmp	r3, r2
 800a6c6:	d111      	bne.n	800a6ec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	689b      	ldr	r3, [r3, #8]
 800a6ce:	f003 0307 	and.w	r3, r3, #7
 800a6d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	2b06      	cmp	r3, #6
 800a6d8:	d010      	beq.n	800a6fc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	681a      	ldr	r2, [r3, #0]
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f042 0201 	orr.w	r2, r2, #1
 800a6e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6ea:	e007      	b.n	800a6fc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	681a      	ldr	r2, [r3, #0]
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f042 0201 	orr.w	r2, r2, #1
 800a6fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a6fc:	2300      	movs	r3, #0
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	3714      	adds	r7, #20
 800a702:	46bd      	mov	sp, r7
 800a704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a708:	4770      	bx	lr
 800a70a:	bf00      	nop
 800a70c:	40010000 	.word	0x40010000
 800a710:	40000400 	.word	0x40000400
 800a714:	40000800 	.word	0x40000800
 800a718:	40000c00 	.word	0x40000c00
 800a71c:	40010400 	.word	0x40010400
 800a720:	40014000 	.word	0x40014000
 800a724:	40001800 	.word	0x40001800

0800a728 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a728:	b480      	push	{r7}
 800a72a:	b083      	sub	sp, #12
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	68da      	ldr	r2, [r3, #12]
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f022 0201 	bic.w	r2, r2, #1
 800a73e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	6a1a      	ldr	r2, [r3, #32]
 800a746:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a74a:	4013      	ands	r3, r2
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d10f      	bne.n	800a770 <HAL_TIM_Base_Stop_IT+0x48>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	6a1a      	ldr	r2, [r3, #32]
 800a756:	f240 4344 	movw	r3, #1092	@ 0x444
 800a75a:	4013      	ands	r3, r2
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d107      	bne.n	800a770 <HAL_TIM_Base_Stop_IT+0x48>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	681a      	ldr	r2, [r3, #0]
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f022 0201 	bic.w	r2, r2, #1
 800a76e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2201      	movs	r2, #1
 800a774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800a778:	2300      	movs	r3, #0
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	370c      	adds	r7, #12
 800a77e:	46bd      	mov	sp, r7
 800a780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a784:	4770      	bx	lr

0800a786 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a786:	b580      	push	{r7, lr}
 800a788:	b082      	sub	sp, #8
 800a78a:	af00      	add	r7, sp, #0
 800a78c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	691b      	ldr	r3, [r3, #16]
 800a794:	f003 0302 	and.w	r3, r3, #2
 800a798:	2b02      	cmp	r3, #2
 800a79a:	d122      	bne.n	800a7e2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	68db      	ldr	r3, [r3, #12]
 800a7a2:	f003 0302 	and.w	r3, r3, #2
 800a7a6:	2b02      	cmp	r3, #2
 800a7a8:	d11b      	bne.n	800a7e2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f06f 0202 	mvn.w	r2, #2
 800a7b2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	699b      	ldr	r3, [r3, #24]
 800a7c0:	f003 0303 	and.w	r3, r3, #3
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d003      	beq.n	800a7d0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f000 f9b5 	bl	800ab38 <HAL_TIM_IC_CaptureCallback>
 800a7ce:	e005      	b.n	800a7dc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f000 f9a7 	bl	800ab24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	f000 f9b8 	bl	800ab4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	691b      	ldr	r3, [r3, #16]
 800a7e8:	f003 0304 	and.w	r3, r3, #4
 800a7ec:	2b04      	cmp	r3, #4
 800a7ee:	d122      	bne.n	800a836 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	68db      	ldr	r3, [r3, #12]
 800a7f6:	f003 0304 	and.w	r3, r3, #4
 800a7fa:	2b04      	cmp	r3, #4
 800a7fc:	d11b      	bne.n	800a836 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	f06f 0204 	mvn.w	r2, #4
 800a806:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2202      	movs	r2, #2
 800a80c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	699b      	ldr	r3, [r3, #24]
 800a814:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d003      	beq.n	800a824 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f000 f98b 	bl	800ab38 <HAL_TIM_IC_CaptureCallback>
 800a822:	e005      	b.n	800a830 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f000 f97d 	bl	800ab24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	f000 f98e 	bl	800ab4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2200      	movs	r2, #0
 800a834:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	691b      	ldr	r3, [r3, #16]
 800a83c:	f003 0308 	and.w	r3, r3, #8
 800a840:	2b08      	cmp	r3, #8
 800a842:	d122      	bne.n	800a88a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	68db      	ldr	r3, [r3, #12]
 800a84a:	f003 0308 	and.w	r3, r3, #8
 800a84e:	2b08      	cmp	r3, #8
 800a850:	d11b      	bne.n	800a88a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f06f 0208 	mvn.w	r2, #8
 800a85a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2204      	movs	r2, #4
 800a860:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	69db      	ldr	r3, [r3, #28]
 800a868:	f003 0303 	and.w	r3, r3, #3
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d003      	beq.n	800a878 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f000 f961 	bl	800ab38 <HAL_TIM_IC_CaptureCallback>
 800a876:	e005      	b.n	800a884 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f000 f953 	bl	800ab24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f000 f964 	bl	800ab4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2200      	movs	r2, #0
 800a888:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	691b      	ldr	r3, [r3, #16]
 800a890:	f003 0310 	and.w	r3, r3, #16
 800a894:	2b10      	cmp	r3, #16
 800a896:	d122      	bne.n	800a8de <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	68db      	ldr	r3, [r3, #12]
 800a89e:	f003 0310 	and.w	r3, r3, #16
 800a8a2:	2b10      	cmp	r3, #16
 800a8a4:	d11b      	bne.n	800a8de <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f06f 0210 	mvn.w	r2, #16
 800a8ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2208      	movs	r2, #8
 800a8b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	69db      	ldr	r3, [r3, #28]
 800a8bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d003      	beq.n	800a8cc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a8c4:	6878      	ldr	r0, [r7, #4]
 800a8c6:	f000 f937 	bl	800ab38 <HAL_TIM_IC_CaptureCallback>
 800a8ca:	e005      	b.n	800a8d8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f000 f929 	bl	800ab24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f000 f93a 	bl	800ab4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	691b      	ldr	r3, [r3, #16]
 800a8e4:	f003 0301 	and.w	r3, r3, #1
 800a8e8:	2b01      	cmp	r3, #1
 800a8ea:	d10e      	bne.n	800a90a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	68db      	ldr	r3, [r3, #12]
 800a8f2:	f003 0301 	and.w	r3, r3, #1
 800a8f6:	2b01      	cmp	r3, #1
 800a8f8:	d107      	bne.n	800a90a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f06f 0201 	mvn.w	r2, #1
 800a902:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f7f9 fbf3 	bl	80040f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	691b      	ldr	r3, [r3, #16]
 800a910:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a914:	2b80      	cmp	r3, #128	@ 0x80
 800a916:	d10e      	bne.n	800a936 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	68db      	ldr	r3, [r3, #12]
 800a91e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a922:	2b80      	cmp	r3, #128	@ 0x80
 800a924:	d107      	bne.n	800a936 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800a92e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f000 fadf 	bl	800aef4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	691b      	ldr	r3, [r3, #16]
 800a93c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a940:	2b40      	cmp	r3, #64	@ 0x40
 800a942:	d10e      	bne.n	800a962 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	68db      	ldr	r3, [r3, #12]
 800a94a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a94e:	2b40      	cmp	r3, #64	@ 0x40
 800a950:	d107      	bne.n	800a962 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a95a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f000 f8ff 	bl	800ab60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	691b      	ldr	r3, [r3, #16]
 800a968:	f003 0320 	and.w	r3, r3, #32
 800a96c:	2b20      	cmp	r3, #32
 800a96e:	d10e      	bne.n	800a98e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	68db      	ldr	r3, [r3, #12]
 800a976:	f003 0320 	and.w	r3, r3, #32
 800a97a:	2b20      	cmp	r3, #32
 800a97c:	d107      	bne.n	800a98e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	f06f 0220 	mvn.w	r2, #32
 800a986:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f000 faa9 	bl	800aee0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a98e:	bf00      	nop
 800a990:	3708      	adds	r7, #8
 800a992:	46bd      	mov	sp, r7
 800a994:	bd80      	pop	{r7, pc}

0800a996 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a996:	b580      	push	{r7, lr}
 800a998:	b084      	sub	sp, #16
 800a99a:	af00      	add	r7, sp, #0
 800a99c:	6078      	str	r0, [r7, #4]
 800a99e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a9aa:	2b01      	cmp	r3, #1
 800a9ac:	d101      	bne.n	800a9b2 <HAL_TIM_ConfigClockSource+0x1c>
 800a9ae:	2302      	movs	r3, #2
 800a9b0:	e0b4      	b.n	800ab1c <HAL_TIM_ConfigClockSource+0x186>
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2201      	movs	r2, #1
 800a9b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2202      	movs	r2, #2
 800a9be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	689b      	ldr	r3, [r3, #8]
 800a9c8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a9d0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a9d8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	68ba      	ldr	r2, [r7, #8]
 800a9e0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a9ea:	d03e      	beq.n	800aa6a <HAL_TIM_ConfigClockSource+0xd4>
 800a9ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a9f0:	f200 8087 	bhi.w	800ab02 <HAL_TIM_ConfigClockSource+0x16c>
 800a9f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a9f8:	f000 8086 	beq.w	800ab08 <HAL_TIM_ConfigClockSource+0x172>
 800a9fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa00:	d87f      	bhi.n	800ab02 <HAL_TIM_ConfigClockSource+0x16c>
 800aa02:	2b70      	cmp	r3, #112	@ 0x70
 800aa04:	d01a      	beq.n	800aa3c <HAL_TIM_ConfigClockSource+0xa6>
 800aa06:	2b70      	cmp	r3, #112	@ 0x70
 800aa08:	d87b      	bhi.n	800ab02 <HAL_TIM_ConfigClockSource+0x16c>
 800aa0a:	2b60      	cmp	r3, #96	@ 0x60
 800aa0c:	d050      	beq.n	800aab0 <HAL_TIM_ConfigClockSource+0x11a>
 800aa0e:	2b60      	cmp	r3, #96	@ 0x60
 800aa10:	d877      	bhi.n	800ab02 <HAL_TIM_ConfigClockSource+0x16c>
 800aa12:	2b50      	cmp	r3, #80	@ 0x50
 800aa14:	d03c      	beq.n	800aa90 <HAL_TIM_ConfigClockSource+0xfa>
 800aa16:	2b50      	cmp	r3, #80	@ 0x50
 800aa18:	d873      	bhi.n	800ab02 <HAL_TIM_ConfigClockSource+0x16c>
 800aa1a:	2b40      	cmp	r3, #64	@ 0x40
 800aa1c:	d058      	beq.n	800aad0 <HAL_TIM_ConfigClockSource+0x13a>
 800aa1e:	2b40      	cmp	r3, #64	@ 0x40
 800aa20:	d86f      	bhi.n	800ab02 <HAL_TIM_ConfigClockSource+0x16c>
 800aa22:	2b30      	cmp	r3, #48	@ 0x30
 800aa24:	d064      	beq.n	800aaf0 <HAL_TIM_ConfigClockSource+0x15a>
 800aa26:	2b30      	cmp	r3, #48	@ 0x30
 800aa28:	d86b      	bhi.n	800ab02 <HAL_TIM_ConfigClockSource+0x16c>
 800aa2a:	2b20      	cmp	r3, #32
 800aa2c:	d060      	beq.n	800aaf0 <HAL_TIM_ConfigClockSource+0x15a>
 800aa2e:	2b20      	cmp	r3, #32
 800aa30:	d867      	bhi.n	800ab02 <HAL_TIM_ConfigClockSource+0x16c>
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d05c      	beq.n	800aaf0 <HAL_TIM_ConfigClockSource+0x15a>
 800aa36:	2b10      	cmp	r3, #16
 800aa38:	d05a      	beq.n	800aaf0 <HAL_TIM_ConfigClockSource+0x15a>
 800aa3a:	e062      	b.n	800ab02 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	6818      	ldr	r0, [r3, #0]
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	6899      	ldr	r1, [r3, #8]
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	685a      	ldr	r2, [r3, #4]
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	68db      	ldr	r3, [r3, #12]
 800aa4c:	f000 f9ac 	bl	800ada8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	689b      	ldr	r3, [r3, #8]
 800aa56:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800aa5e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	68ba      	ldr	r2, [r7, #8]
 800aa66:	609a      	str	r2, [r3, #8]
      break;
 800aa68:	e04f      	b.n	800ab0a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6818      	ldr	r0, [r3, #0]
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	6899      	ldr	r1, [r3, #8]
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	685a      	ldr	r2, [r3, #4]
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	68db      	ldr	r3, [r3, #12]
 800aa7a:	f000 f995 	bl	800ada8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	689a      	ldr	r2, [r3, #8]
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800aa8c:	609a      	str	r2, [r3, #8]
      break;
 800aa8e:	e03c      	b.n	800ab0a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6818      	ldr	r0, [r3, #0]
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	6859      	ldr	r1, [r3, #4]
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	68db      	ldr	r3, [r3, #12]
 800aa9c:	461a      	mov	r2, r3
 800aa9e:	f000 f909 	bl	800acb4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	2150      	movs	r1, #80	@ 0x50
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f000 f962 	bl	800ad72 <TIM_ITRx_SetConfig>
      break;
 800aaae:	e02c      	b.n	800ab0a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	6818      	ldr	r0, [r3, #0]
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	6859      	ldr	r1, [r3, #4]
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	68db      	ldr	r3, [r3, #12]
 800aabc:	461a      	mov	r2, r3
 800aabe:	f000 f928 	bl	800ad12 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	2160      	movs	r1, #96	@ 0x60
 800aac8:	4618      	mov	r0, r3
 800aaca:	f000 f952 	bl	800ad72 <TIM_ITRx_SetConfig>
      break;
 800aace:	e01c      	b.n	800ab0a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6818      	ldr	r0, [r3, #0]
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	6859      	ldr	r1, [r3, #4]
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	68db      	ldr	r3, [r3, #12]
 800aadc:	461a      	mov	r2, r3
 800aade:	f000 f8e9 	bl	800acb4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	2140      	movs	r1, #64	@ 0x40
 800aae8:	4618      	mov	r0, r3
 800aaea:	f000 f942 	bl	800ad72 <TIM_ITRx_SetConfig>
      break;
 800aaee:	e00c      	b.n	800ab0a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681a      	ldr	r2, [r3, #0]
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	4619      	mov	r1, r3
 800aafa:	4610      	mov	r0, r2
 800aafc:	f000 f939 	bl	800ad72 <TIM_ITRx_SetConfig>
      break;
 800ab00:	e003      	b.n	800ab0a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ab02:	2301      	movs	r3, #1
 800ab04:	73fb      	strb	r3, [r7, #15]
      break;
 800ab06:	e000      	b.n	800ab0a <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ab08:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2201      	movs	r2, #1
 800ab0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2200      	movs	r2, #0
 800ab16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ab1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	3710      	adds	r7, #16
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}

0800ab24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ab24:	b480      	push	{r7}
 800ab26:	b083      	sub	sp, #12
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ab2c:	bf00      	nop
 800ab2e:	370c      	adds	r7, #12
 800ab30:	46bd      	mov	sp, r7
 800ab32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab36:	4770      	bx	lr

0800ab38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ab38:	b480      	push	{r7}
 800ab3a:	b083      	sub	sp, #12
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ab40:	bf00      	nop
 800ab42:	370c      	adds	r7, #12
 800ab44:	46bd      	mov	sp, r7
 800ab46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4a:	4770      	bx	lr

0800ab4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b083      	sub	sp, #12
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ab54:	bf00      	nop
 800ab56:	370c      	adds	r7, #12
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5e:	4770      	bx	lr

0800ab60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ab60:	b480      	push	{r7}
 800ab62:	b083      	sub	sp, #12
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ab68:	bf00      	nop
 800ab6a:	370c      	adds	r7, #12
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab72:	4770      	bx	lr

0800ab74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ab74:	b480      	push	{r7}
 800ab76:	b085      	sub	sp, #20
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
 800ab7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	4a40      	ldr	r2, [pc, #256]	@ (800ac88 <TIM_Base_SetConfig+0x114>)
 800ab88:	4293      	cmp	r3, r2
 800ab8a:	d013      	beq.n	800abb4 <TIM_Base_SetConfig+0x40>
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab92:	d00f      	beq.n	800abb4 <TIM_Base_SetConfig+0x40>
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	4a3d      	ldr	r2, [pc, #244]	@ (800ac8c <TIM_Base_SetConfig+0x118>)
 800ab98:	4293      	cmp	r3, r2
 800ab9a:	d00b      	beq.n	800abb4 <TIM_Base_SetConfig+0x40>
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	4a3c      	ldr	r2, [pc, #240]	@ (800ac90 <TIM_Base_SetConfig+0x11c>)
 800aba0:	4293      	cmp	r3, r2
 800aba2:	d007      	beq.n	800abb4 <TIM_Base_SetConfig+0x40>
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	4a3b      	ldr	r2, [pc, #236]	@ (800ac94 <TIM_Base_SetConfig+0x120>)
 800aba8:	4293      	cmp	r3, r2
 800abaa:	d003      	beq.n	800abb4 <TIM_Base_SetConfig+0x40>
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	4a3a      	ldr	r2, [pc, #232]	@ (800ac98 <TIM_Base_SetConfig+0x124>)
 800abb0:	4293      	cmp	r3, r2
 800abb2:	d108      	bne.n	800abc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800abba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	685b      	ldr	r3, [r3, #4]
 800abc0:	68fa      	ldr	r2, [r7, #12]
 800abc2:	4313      	orrs	r3, r2
 800abc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	4a2f      	ldr	r2, [pc, #188]	@ (800ac88 <TIM_Base_SetConfig+0x114>)
 800abca:	4293      	cmp	r3, r2
 800abcc:	d02b      	beq.n	800ac26 <TIM_Base_SetConfig+0xb2>
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800abd4:	d027      	beq.n	800ac26 <TIM_Base_SetConfig+0xb2>
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	4a2c      	ldr	r2, [pc, #176]	@ (800ac8c <TIM_Base_SetConfig+0x118>)
 800abda:	4293      	cmp	r3, r2
 800abdc:	d023      	beq.n	800ac26 <TIM_Base_SetConfig+0xb2>
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	4a2b      	ldr	r2, [pc, #172]	@ (800ac90 <TIM_Base_SetConfig+0x11c>)
 800abe2:	4293      	cmp	r3, r2
 800abe4:	d01f      	beq.n	800ac26 <TIM_Base_SetConfig+0xb2>
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	4a2a      	ldr	r2, [pc, #168]	@ (800ac94 <TIM_Base_SetConfig+0x120>)
 800abea:	4293      	cmp	r3, r2
 800abec:	d01b      	beq.n	800ac26 <TIM_Base_SetConfig+0xb2>
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	4a29      	ldr	r2, [pc, #164]	@ (800ac98 <TIM_Base_SetConfig+0x124>)
 800abf2:	4293      	cmp	r3, r2
 800abf4:	d017      	beq.n	800ac26 <TIM_Base_SetConfig+0xb2>
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	4a28      	ldr	r2, [pc, #160]	@ (800ac9c <TIM_Base_SetConfig+0x128>)
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d013      	beq.n	800ac26 <TIM_Base_SetConfig+0xb2>
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	4a27      	ldr	r2, [pc, #156]	@ (800aca0 <TIM_Base_SetConfig+0x12c>)
 800ac02:	4293      	cmp	r3, r2
 800ac04:	d00f      	beq.n	800ac26 <TIM_Base_SetConfig+0xb2>
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	4a26      	ldr	r2, [pc, #152]	@ (800aca4 <TIM_Base_SetConfig+0x130>)
 800ac0a:	4293      	cmp	r3, r2
 800ac0c:	d00b      	beq.n	800ac26 <TIM_Base_SetConfig+0xb2>
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	4a25      	ldr	r2, [pc, #148]	@ (800aca8 <TIM_Base_SetConfig+0x134>)
 800ac12:	4293      	cmp	r3, r2
 800ac14:	d007      	beq.n	800ac26 <TIM_Base_SetConfig+0xb2>
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	4a24      	ldr	r2, [pc, #144]	@ (800acac <TIM_Base_SetConfig+0x138>)
 800ac1a:	4293      	cmp	r3, r2
 800ac1c:	d003      	beq.n	800ac26 <TIM_Base_SetConfig+0xb2>
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	4a23      	ldr	r2, [pc, #140]	@ (800acb0 <TIM_Base_SetConfig+0x13c>)
 800ac22:	4293      	cmp	r3, r2
 800ac24:	d108      	bne.n	800ac38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ac2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	68db      	ldr	r3, [r3, #12]
 800ac32:	68fa      	ldr	r2, [r7, #12]
 800ac34:	4313      	orrs	r3, r2
 800ac36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	695b      	ldr	r3, [r3, #20]
 800ac42:	4313      	orrs	r3, r2
 800ac44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	68fa      	ldr	r2, [r7, #12]
 800ac4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	689a      	ldr	r2, [r3, #8]
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	681a      	ldr	r2, [r3, #0]
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	4a0a      	ldr	r2, [pc, #40]	@ (800ac88 <TIM_Base_SetConfig+0x114>)
 800ac60:	4293      	cmp	r3, r2
 800ac62:	d003      	beq.n	800ac6c <TIM_Base_SetConfig+0xf8>
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	4a0c      	ldr	r2, [pc, #48]	@ (800ac98 <TIM_Base_SetConfig+0x124>)
 800ac68:	4293      	cmp	r3, r2
 800ac6a:	d103      	bne.n	800ac74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	691a      	ldr	r2, [r3, #16]
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2201      	movs	r2, #1
 800ac78:	615a      	str	r2, [r3, #20]
}
 800ac7a:	bf00      	nop
 800ac7c:	3714      	adds	r7, #20
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac84:	4770      	bx	lr
 800ac86:	bf00      	nop
 800ac88:	40010000 	.word	0x40010000
 800ac8c:	40000400 	.word	0x40000400
 800ac90:	40000800 	.word	0x40000800
 800ac94:	40000c00 	.word	0x40000c00
 800ac98:	40010400 	.word	0x40010400
 800ac9c:	40014000 	.word	0x40014000
 800aca0:	40014400 	.word	0x40014400
 800aca4:	40014800 	.word	0x40014800
 800aca8:	40001800 	.word	0x40001800
 800acac:	40001c00 	.word	0x40001c00
 800acb0:	40002000 	.word	0x40002000

0800acb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800acb4:	b480      	push	{r7}
 800acb6:	b087      	sub	sp, #28
 800acb8:	af00      	add	r7, sp, #0
 800acba:	60f8      	str	r0, [r7, #12]
 800acbc:	60b9      	str	r1, [r7, #8]
 800acbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	6a1b      	ldr	r3, [r3, #32]
 800acc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	6a1b      	ldr	r3, [r3, #32]
 800acca:	f023 0201 	bic.w	r2, r3, #1
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	699b      	ldr	r3, [r3, #24]
 800acd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800acde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	011b      	lsls	r3, r3, #4
 800ace4:	693a      	ldr	r2, [r7, #16]
 800ace6:	4313      	orrs	r3, r2
 800ace8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800acea:	697b      	ldr	r3, [r7, #20]
 800acec:	f023 030a 	bic.w	r3, r3, #10
 800acf0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800acf2:	697a      	ldr	r2, [r7, #20]
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	4313      	orrs	r3, r2
 800acf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	693a      	ldr	r2, [r7, #16]
 800acfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	697a      	ldr	r2, [r7, #20]
 800ad04:	621a      	str	r2, [r3, #32]
}
 800ad06:	bf00      	nop
 800ad08:	371c      	adds	r7, #28
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad10:	4770      	bx	lr

0800ad12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad12:	b480      	push	{r7}
 800ad14:	b087      	sub	sp, #28
 800ad16:	af00      	add	r7, sp, #0
 800ad18:	60f8      	str	r0, [r7, #12]
 800ad1a:	60b9      	str	r1, [r7, #8]
 800ad1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	6a1b      	ldr	r3, [r3, #32]
 800ad22:	f023 0210 	bic.w	r2, r3, #16
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	699b      	ldr	r3, [r3, #24]
 800ad2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	6a1b      	ldr	r3, [r3, #32]
 800ad34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ad36:	697b      	ldr	r3, [r7, #20]
 800ad38:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ad3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	031b      	lsls	r3, r3, #12
 800ad42:	697a      	ldr	r2, [r7, #20]
 800ad44:	4313      	orrs	r3, r2
 800ad46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ad48:	693b      	ldr	r3, [r7, #16]
 800ad4a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ad4e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	011b      	lsls	r3, r3, #4
 800ad54:	693a      	ldr	r2, [r7, #16]
 800ad56:	4313      	orrs	r3, r2
 800ad58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	697a      	ldr	r2, [r7, #20]
 800ad5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	693a      	ldr	r2, [r7, #16]
 800ad64:	621a      	str	r2, [r3, #32]
}
 800ad66:	bf00      	nop
 800ad68:	371c      	adds	r7, #28
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad70:	4770      	bx	lr

0800ad72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ad72:	b480      	push	{r7}
 800ad74:	b085      	sub	sp, #20
 800ad76:	af00      	add	r7, sp, #0
 800ad78:	6078      	str	r0, [r7, #4]
 800ad7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	689b      	ldr	r3, [r3, #8]
 800ad80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ad8a:	683a      	ldr	r2, [r7, #0]
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	4313      	orrs	r3, r2
 800ad90:	f043 0307 	orr.w	r3, r3, #7
 800ad94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	68fa      	ldr	r2, [r7, #12]
 800ad9a:	609a      	str	r2, [r3, #8]
}
 800ad9c:	bf00      	nop
 800ad9e:	3714      	adds	r7, #20
 800ada0:	46bd      	mov	sp, r7
 800ada2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada6:	4770      	bx	lr

0800ada8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ada8:	b480      	push	{r7}
 800adaa:	b087      	sub	sp, #28
 800adac:	af00      	add	r7, sp, #0
 800adae:	60f8      	str	r0, [r7, #12]
 800adb0:	60b9      	str	r1, [r7, #8]
 800adb2:	607a      	str	r2, [r7, #4]
 800adb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	689b      	ldr	r3, [r3, #8]
 800adba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800adc2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	021a      	lsls	r2, r3, #8
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	431a      	orrs	r2, r3
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	4313      	orrs	r3, r2
 800add0:	697a      	ldr	r2, [r7, #20]
 800add2:	4313      	orrs	r3, r2
 800add4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	697a      	ldr	r2, [r7, #20]
 800adda:	609a      	str	r2, [r3, #8]
}
 800addc:	bf00      	nop
 800adde:	371c      	adds	r7, #28
 800ade0:	46bd      	mov	sp, r7
 800ade2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade6:	4770      	bx	lr

0800ade8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ade8:	b480      	push	{r7}
 800adea:	b085      	sub	sp, #20
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
 800adf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800adf8:	2b01      	cmp	r3, #1
 800adfa:	d101      	bne.n	800ae00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800adfc:	2302      	movs	r3, #2
 800adfe:	e05a      	b.n	800aeb6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2201      	movs	r2, #1
 800ae04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2202      	movs	r2, #2
 800ae0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	685b      	ldr	r3, [r3, #4]
 800ae16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	689b      	ldr	r3, [r3, #8]
 800ae1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	68fa      	ldr	r2, [r7, #12]
 800ae2e:	4313      	orrs	r3, r2
 800ae30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	68fa      	ldr	r2, [r7, #12]
 800ae38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	4a21      	ldr	r2, [pc, #132]	@ (800aec4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ae40:	4293      	cmp	r3, r2
 800ae42:	d022      	beq.n	800ae8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae4c:	d01d      	beq.n	800ae8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	4a1d      	ldr	r2, [pc, #116]	@ (800aec8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ae54:	4293      	cmp	r3, r2
 800ae56:	d018      	beq.n	800ae8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	4a1b      	ldr	r2, [pc, #108]	@ (800aecc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ae5e:	4293      	cmp	r3, r2
 800ae60:	d013      	beq.n	800ae8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	4a1a      	ldr	r2, [pc, #104]	@ (800aed0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ae68:	4293      	cmp	r3, r2
 800ae6a:	d00e      	beq.n	800ae8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	4a18      	ldr	r2, [pc, #96]	@ (800aed4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ae72:	4293      	cmp	r3, r2
 800ae74:	d009      	beq.n	800ae8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	4a17      	ldr	r2, [pc, #92]	@ (800aed8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ae7c:	4293      	cmp	r3, r2
 800ae7e:	d004      	beq.n	800ae8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	4a15      	ldr	r2, [pc, #84]	@ (800aedc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ae86:	4293      	cmp	r3, r2
 800ae88:	d10c      	bne.n	800aea4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ae90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	685b      	ldr	r3, [r3, #4]
 800ae96:	68ba      	ldr	r2, [r7, #8]
 800ae98:	4313      	orrs	r3, r2
 800ae9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	68ba      	ldr	r2, [r7, #8]
 800aea2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2201      	movs	r2, #1
 800aea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2200      	movs	r2, #0
 800aeb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800aeb4:	2300      	movs	r3, #0
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3714      	adds	r7, #20
 800aeba:	46bd      	mov	sp, r7
 800aebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec0:	4770      	bx	lr
 800aec2:	bf00      	nop
 800aec4:	40010000 	.word	0x40010000
 800aec8:	40000400 	.word	0x40000400
 800aecc:	40000800 	.word	0x40000800
 800aed0:	40000c00 	.word	0x40000c00
 800aed4:	40010400 	.word	0x40010400
 800aed8:	40014000 	.word	0x40014000
 800aedc:	40001800 	.word	0x40001800

0800aee0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aee0:	b480      	push	{r7}
 800aee2:	b083      	sub	sp, #12
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aee8:	bf00      	nop
 800aeea:	370c      	adds	r7, #12
 800aeec:	46bd      	mov	sp, r7
 800aeee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef2:	4770      	bx	lr

0800aef4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aef4:	b480      	push	{r7}
 800aef6:	b083      	sub	sp, #12
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aefc:	bf00      	nop
 800aefe:	370c      	adds	r7, #12
 800af00:	46bd      	mov	sp, r7
 800af02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af06:	4770      	bx	lr

0800af08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b082      	sub	sp, #8
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d101      	bne.n	800af1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800af16:	2301      	movs	r3, #1
 800af18:	e03f      	b.n	800af9a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800af20:	b2db      	uxtb	r3, r3
 800af22:	2b00      	cmp	r3, #0
 800af24:	d106      	bne.n	800af34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2200      	movs	r2, #0
 800af2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f7fa ffbe 	bl	8005eb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2224      	movs	r2, #36	@ 0x24
 800af38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	68da      	ldr	r2, [r3, #12]
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800af4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f000 fe23 	bl	800bb98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	691a      	ldr	r2, [r3, #16]
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800af60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	695a      	ldr	r2, [r3, #20]
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800af70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	68da      	ldr	r2, [r3, #12]
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800af80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2200      	movs	r2, #0
 800af86:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2220      	movs	r2, #32
 800af8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2220      	movs	r2, #32
 800af94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800af98:	2300      	movs	r3, #0
}
 800af9a:	4618      	mov	r0, r3
 800af9c:	3708      	adds	r7, #8
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}

0800afa2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800afa2:	b580      	push	{r7, lr}
 800afa4:	b08a      	sub	sp, #40	@ 0x28
 800afa6:	af02      	add	r7, sp, #8
 800afa8:	60f8      	str	r0, [r7, #12]
 800afaa:	60b9      	str	r1, [r7, #8]
 800afac:	603b      	str	r3, [r7, #0]
 800afae:	4613      	mov	r3, r2
 800afb0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800afb2:	2300      	movs	r3, #0
 800afb4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800afbc:	b2db      	uxtb	r3, r3
 800afbe:	2b20      	cmp	r3, #32
 800afc0:	d17c      	bne.n	800b0bc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800afc2:	68bb      	ldr	r3, [r7, #8]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d002      	beq.n	800afce <HAL_UART_Transmit+0x2c>
 800afc8:	88fb      	ldrh	r3, [r7, #6]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d101      	bne.n	800afd2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800afce:	2301      	movs	r3, #1
 800afd0:	e075      	b.n	800b0be <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800afd8:	2b01      	cmp	r3, #1
 800afda:	d101      	bne.n	800afe0 <HAL_UART_Transmit+0x3e>
 800afdc:	2302      	movs	r3, #2
 800afde:	e06e      	b.n	800b0be <HAL_UART_Transmit+0x11c>
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	2201      	movs	r2, #1
 800afe4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	2200      	movs	r2, #0
 800afec:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	2221      	movs	r2, #33	@ 0x21
 800aff2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800aff6:	f7fb fa6b 	bl	80064d0 <HAL_GetTick>
 800affa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	88fa      	ldrh	r2, [r7, #6]
 800b000:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	88fa      	ldrh	r2, [r7, #6]
 800b006:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	689b      	ldr	r3, [r3, #8]
 800b00c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b010:	d108      	bne.n	800b024 <HAL_UART_Transmit+0x82>
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	691b      	ldr	r3, [r3, #16]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d104      	bne.n	800b024 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800b01a:	2300      	movs	r3, #0
 800b01c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	61bb      	str	r3, [r7, #24]
 800b022:	e003      	b.n	800b02c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800b024:	68bb      	ldr	r3, [r7, #8]
 800b026:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b028:	2300      	movs	r3, #0
 800b02a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	2200      	movs	r2, #0
 800b030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 800b034:	e02a      	b.n	800b08c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	9300      	str	r3, [sp, #0]
 800b03a:	697b      	ldr	r3, [r7, #20]
 800b03c:	2200      	movs	r2, #0
 800b03e:	2180      	movs	r1, #128	@ 0x80
 800b040:	68f8      	ldr	r0, [r7, #12]
 800b042:	f000 fb63 	bl	800b70c <UART_WaitOnFlagUntilTimeout>
 800b046:	4603      	mov	r3, r0
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d001      	beq.n	800b050 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800b04c:	2303      	movs	r3, #3
 800b04e:	e036      	b.n	800b0be <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800b050:	69fb      	ldr	r3, [r7, #28]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d10b      	bne.n	800b06e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b056:	69bb      	ldr	r3, [r7, #24]
 800b058:	881b      	ldrh	r3, [r3, #0]
 800b05a:	461a      	mov	r2, r3
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b064:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b066:	69bb      	ldr	r3, [r7, #24]
 800b068:	3302      	adds	r3, #2
 800b06a:	61bb      	str	r3, [r7, #24]
 800b06c:	e007      	b.n	800b07e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b06e:	69fb      	ldr	r3, [r7, #28]
 800b070:	781a      	ldrb	r2, [r3, #0]
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b078:	69fb      	ldr	r3, [r7, #28]
 800b07a:	3301      	adds	r3, #1
 800b07c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b082:	b29b      	uxth	r3, r3
 800b084:	3b01      	subs	r3, #1
 800b086:	b29a      	uxth	r2, r3
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b090:	b29b      	uxth	r3, r3
 800b092:	2b00      	cmp	r3, #0
 800b094:	d1cf      	bne.n	800b036 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	9300      	str	r3, [sp, #0]
 800b09a:	697b      	ldr	r3, [r7, #20]
 800b09c:	2200      	movs	r2, #0
 800b09e:	2140      	movs	r1, #64	@ 0x40
 800b0a0:	68f8      	ldr	r0, [r7, #12]
 800b0a2:	f000 fb33 	bl	800b70c <UART_WaitOnFlagUntilTimeout>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d001      	beq.n	800b0b0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b0ac:	2303      	movs	r3, #3
 800b0ae:	e006      	b.n	800b0be <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	2220      	movs	r2, #32
 800b0b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	e000      	b.n	800b0be <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800b0bc:	2302      	movs	r3, #2
  }
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3720      	adds	r7, #32
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}

0800b0c6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b0c6:	b480      	push	{r7}
 800b0c8:	b085      	sub	sp, #20
 800b0ca:	af00      	add	r7, sp, #0
 800b0cc:	60f8      	str	r0, [r7, #12]
 800b0ce:	60b9      	str	r1, [r7, #8]
 800b0d0:	4613      	mov	r3, r2
 800b0d2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b0da:	b2db      	uxtb	r3, r3
 800b0dc:	2b20      	cmp	r3, #32
 800b0de:	d130      	bne.n	800b142 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d002      	beq.n	800b0ec <HAL_UART_Transmit_IT+0x26>
 800b0e6:	88fb      	ldrh	r3, [r7, #6]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d101      	bne.n	800b0f0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800b0ec:	2301      	movs	r3, #1
 800b0ee:	e029      	b.n	800b144 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b0f6:	2b01      	cmp	r3, #1
 800b0f8:	d101      	bne.n	800b0fe <HAL_UART_Transmit_IT+0x38>
 800b0fa:	2302      	movs	r3, #2
 800b0fc:	e022      	b.n	800b144 <HAL_UART_Transmit_IT+0x7e>
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	2201      	movs	r2, #1
 800b102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->pTxBuffPtr = pData;
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	68ba      	ldr	r2, [r7, #8]
 800b10a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	88fa      	ldrh	r2, [r7, #6]
 800b110:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	88fa      	ldrh	r2, [r7, #6]
 800b116:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	2200      	movs	r2, #0
 800b11c:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	2221      	movs	r2, #33	@ 0x21
 800b122:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	2200      	movs	r2, #0
 800b12a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	68da      	ldr	r2, [r3, #12]
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800b13c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800b13e:	2300      	movs	r3, #0
 800b140:	e000      	b.n	800b144 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800b142:	2302      	movs	r3, #2
  }
}
 800b144:	4618      	mov	r0, r3
 800b146:	3714      	adds	r7, #20
 800b148:	46bd      	mov	sp, r7
 800b14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14e:	4770      	bx	lr

0800b150 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b084      	sub	sp, #16
 800b154:	af00      	add	r7, sp, #0
 800b156:	60f8      	str	r0, [r7, #12]
 800b158:	60b9      	str	r1, [r7, #8]
 800b15a:	4613      	mov	r3, r2
 800b15c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b164:	b2db      	uxtb	r3, r3
 800b166:	2b20      	cmp	r3, #32
 800b168:	d11d      	bne.n	800b1a6 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d002      	beq.n	800b176 <HAL_UART_Receive_IT+0x26>
 800b170:	88fb      	ldrh	r3, [r7, #6]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d101      	bne.n	800b17a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b176:	2301      	movs	r3, #1
 800b178:	e016      	b.n	800b1a8 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b180:	2b01      	cmp	r3, #1
 800b182:	d101      	bne.n	800b188 <HAL_UART_Receive_IT+0x38>
 800b184:	2302      	movs	r3, #2
 800b186:	e00f      	b.n	800b1a8 <HAL_UART_Receive_IT+0x58>
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	2201      	movs	r2, #1
 800b18c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	2200      	movs	r2, #0
 800b194:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b196:	88fb      	ldrh	r3, [r7, #6]
 800b198:	461a      	mov	r2, r3
 800b19a:	68b9      	ldr	r1, [r7, #8]
 800b19c:	68f8      	ldr	r0, [r7, #12]
 800b19e:	f000 fb23 	bl	800b7e8 <UART_Start_Receive_IT>
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	e000      	b.n	800b1a8 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b1a6:	2302      	movs	r3, #2
  }
}
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	3710      	adds	r7, #16
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	bd80      	pop	{r7, pc}

0800b1b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b0ba      	sub	sp, #232	@ 0xe8
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	68db      	ldr	r3, [r3, #12]
 800b1c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	695b      	ldr	r3, [r3, #20]
 800b1d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800b1dc:	2300      	movs	r3, #0
 800b1de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b1e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b1e6:	f003 030f 	and.w	r3, r3, #15
 800b1ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800b1ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d10f      	bne.n	800b216 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b1f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b1fa:	f003 0320 	and.w	r3, r3, #32
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d009      	beq.n	800b216 <HAL_UART_IRQHandler+0x66>
 800b202:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b206:	f003 0320 	and.w	r3, r3, #32
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d003      	beq.n	800b216 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f000 fc07 	bl	800ba22 <UART_Receive_IT>
      return;
 800b214:	e256      	b.n	800b6c4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b216:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	f000 80de 	beq.w	800b3dc <HAL_UART_IRQHandler+0x22c>
 800b220:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b224:	f003 0301 	and.w	r3, r3, #1
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d106      	bne.n	800b23a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b22c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b230:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800b234:	2b00      	cmp	r3, #0
 800b236:	f000 80d1 	beq.w	800b3dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b23a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b23e:	f003 0301 	and.w	r3, r3, #1
 800b242:	2b00      	cmp	r3, #0
 800b244:	d00b      	beq.n	800b25e <HAL_UART_IRQHandler+0xae>
 800b246:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b24a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d005      	beq.n	800b25e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b256:	f043 0201 	orr.w	r2, r3, #1
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b25e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b262:	f003 0304 	and.w	r3, r3, #4
 800b266:	2b00      	cmp	r3, #0
 800b268:	d00b      	beq.n	800b282 <HAL_UART_IRQHandler+0xd2>
 800b26a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b26e:	f003 0301 	and.w	r3, r3, #1
 800b272:	2b00      	cmp	r3, #0
 800b274:	d005      	beq.n	800b282 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b27a:	f043 0202 	orr.w	r2, r3, #2
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b286:	f003 0302 	and.w	r3, r3, #2
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d00b      	beq.n	800b2a6 <HAL_UART_IRQHandler+0xf6>
 800b28e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b292:	f003 0301 	and.w	r3, r3, #1
 800b296:	2b00      	cmp	r3, #0
 800b298:	d005      	beq.n	800b2a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b29e:	f043 0204 	orr.w	r2, r3, #4
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b2a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b2aa:	f003 0308 	and.w	r3, r3, #8
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d011      	beq.n	800b2d6 <HAL_UART_IRQHandler+0x126>
 800b2b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b2b6:	f003 0320 	and.w	r3, r3, #32
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d105      	bne.n	800b2ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b2be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b2c2:	f003 0301 	and.w	r3, r3, #1
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d005      	beq.n	800b2d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2ce:	f043 0208 	orr.w	r2, r3, #8
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	f000 81ed 	beq.w	800b6ba <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b2e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b2e4:	f003 0320 	and.w	r3, r3, #32
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d008      	beq.n	800b2fe <HAL_UART_IRQHandler+0x14e>
 800b2ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b2f0:	f003 0320 	and.w	r3, r3, #32
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d002      	beq.n	800b2fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b2f8:	6878      	ldr	r0, [r7, #4]
 800b2fa:	f000 fb92 	bl	800ba22 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	695b      	ldr	r3, [r3, #20]
 800b304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b308:	2b40      	cmp	r3, #64	@ 0x40
 800b30a:	bf0c      	ite	eq
 800b30c:	2301      	moveq	r3, #1
 800b30e:	2300      	movne	r3, #0
 800b310:	b2db      	uxtb	r3, r3
 800b312:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b31a:	f003 0308 	and.w	r3, r3, #8
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d103      	bne.n	800b32a <HAL_UART_IRQHandler+0x17a>
 800b322:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b326:	2b00      	cmp	r3, #0
 800b328:	d04f      	beq.n	800b3ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f000 fa9a 	bl	800b864 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	695b      	ldr	r3, [r3, #20]
 800b336:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b33a:	2b40      	cmp	r3, #64	@ 0x40
 800b33c:	d141      	bne.n	800b3c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	3314      	adds	r3, #20
 800b344:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b348:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b34c:	e853 3f00 	ldrex	r3, [r3]
 800b350:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b354:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b358:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b35c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	3314      	adds	r3, #20
 800b366:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b36a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b36e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b372:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b376:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b37a:	e841 2300 	strex	r3, r2, [r1]
 800b37e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b382:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b386:	2b00      	cmp	r3, #0
 800b388:	d1d9      	bne.n	800b33e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d013      	beq.n	800b3ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b396:	4a7d      	ldr	r2, [pc, #500]	@ (800b58c <HAL_UART_IRQHandler+0x3dc>)
 800b398:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f7fb fed3 	bl	800714a <HAL_DMA_Abort_IT>
 800b3a4:	4603      	mov	r3, r0
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d016      	beq.n	800b3d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b3b0:	687a      	ldr	r2, [r7, #4]
 800b3b2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800b3b4:	4610      	mov	r0, r2
 800b3b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3b8:	e00e      	b.n	800b3d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f000 f990 	bl	800b6e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3c0:	e00a      	b.n	800b3d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	f000 f98c 	bl	800b6e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3c8:	e006      	b.n	800b3d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	f000 f988 	bl	800b6e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 800b3d6:	e170      	b.n	800b6ba <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3d8:	bf00      	nop
    return;
 800b3da:	e16e      	b.n	800b6ba <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3e0:	2b01      	cmp	r3, #1
 800b3e2:	f040 814a 	bne.w	800b67a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b3e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b3ea:	f003 0310 	and.w	r3, r3, #16
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	f000 8143 	beq.w	800b67a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b3f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b3f8:	f003 0310 	and.w	r3, r3, #16
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	f000 813c 	beq.w	800b67a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b402:	2300      	movs	r3, #0
 800b404:	60bb      	str	r3, [r7, #8]
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	60bb      	str	r3, [r7, #8]
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	685b      	ldr	r3, [r3, #4]
 800b414:	60bb      	str	r3, [r7, #8]
 800b416:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	695b      	ldr	r3, [r3, #20]
 800b41e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b422:	2b40      	cmp	r3, #64	@ 0x40
 800b424:	f040 80b4 	bne.w	800b590 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	685b      	ldr	r3, [r3, #4]
 800b430:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b434:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b438:	2b00      	cmp	r3, #0
 800b43a:	f000 8140 	beq.w	800b6be <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b442:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b446:	429a      	cmp	r2, r3
 800b448:	f080 8139 	bcs.w	800b6be <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b452:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b458:	69db      	ldr	r3, [r3, #28]
 800b45a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b45e:	f000 8088 	beq.w	800b572 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	330c      	adds	r3, #12
 800b468:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b46c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b470:	e853 3f00 	ldrex	r3, [r3]
 800b474:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b478:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b47c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b480:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	330c      	adds	r3, #12
 800b48a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800b48e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b492:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b496:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b49a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b49e:	e841 2300 	strex	r3, r2, [r1]
 800b4a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b4a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d1d9      	bne.n	800b462 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	3314      	adds	r3, #20
 800b4b4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b4b8:	e853 3f00 	ldrex	r3, [r3]
 800b4bc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b4be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b4c0:	f023 0301 	bic.w	r3, r3, #1
 800b4c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	3314      	adds	r3, #20
 800b4ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b4d2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b4d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4d8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b4da:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b4de:	e841 2300 	strex	r3, r2, [r1]
 800b4e2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b4e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d1e1      	bne.n	800b4ae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	3314      	adds	r3, #20
 800b4f0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b4f4:	e853 3f00 	ldrex	r3, [r3]
 800b4f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b4fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b4fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b500:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	3314      	adds	r3, #20
 800b50a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b50e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b510:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b512:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b514:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b516:	e841 2300 	strex	r3, r2, [r1]
 800b51a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b51c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d1e3      	bne.n	800b4ea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2220      	movs	r2, #32
 800b526:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2200      	movs	r2, #0
 800b52e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	330c      	adds	r3, #12
 800b536:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b538:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b53a:	e853 3f00 	ldrex	r3, [r3]
 800b53e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b540:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b542:	f023 0310 	bic.w	r3, r3, #16
 800b546:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	330c      	adds	r3, #12
 800b550:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b554:	65ba      	str	r2, [r7, #88]	@ 0x58
 800b556:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b558:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b55a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b55c:	e841 2300 	strex	r3, r2, [r1]
 800b560:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b562:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b564:	2b00      	cmp	r3, #0
 800b566:	d1e3      	bne.n	800b530 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b56c:	4618      	mov	r0, r3
 800b56e:	f7fb fd7c 	bl	800706a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b57a:	b29b      	uxth	r3, r3
 800b57c:	1ad3      	subs	r3, r2, r3
 800b57e:	b29b      	uxth	r3, r3
 800b580:	4619      	mov	r1, r3
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f000 f8b6 	bl	800b6f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b588:	e099      	b.n	800b6be <HAL_UART_IRQHandler+0x50e>
 800b58a:	bf00      	nop
 800b58c:	0800b92b 	.word	0x0800b92b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b598:	b29b      	uxth	r3, r3
 800b59a:	1ad3      	subs	r3, r2, r3
 800b59c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b5a4:	b29b      	uxth	r3, r3
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	f000 808b 	beq.w	800b6c2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800b5ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	f000 8086 	beq.w	800b6c2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	330c      	adds	r3, #12
 800b5bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5c0:	e853 3f00 	ldrex	r3, [r3]
 800b5c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b5c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b5cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	330c      	adds	r3, #12
 800b5d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800b5da:	647a      	str	r2, [r7, #68]	@ 0x44
 800b5dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b5e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b5e2:	e841 2300 	strex	r3, r2, [r1]
 800b5e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b5e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d1e3      	bne.n	800b5b6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	3314      	adds	r3, #20
 800b5f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5f8:	e853 3f00 	ldrex	r3, [r3]
 800b5fc:	623b      	str	r3, [r7, #32]
   return(result);
 800b5fe:	6a3b      	ldr	r3, [r7, #32]
 800b600:	f023 0301 	bic.w	r3, r3, #1
 800b604:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	3314      	adds	r3, #20
 800b60e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b612:	633a      	str	r2, [r7, #48]	@ 0x30
 800b614:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b616:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b618:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b61a:	e841 2300 	strex	r3, r2, [r1]
 800b61e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b622:	2b00      	cmp	r3, #0
 800b624:	d1e3      	bne.n	800b5ee <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2220      	movs	r2, #32
 800b62a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2200      	movs	r2, #0
 800b632:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	330c      	adds	r3, #12
 800b63a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b63c:	693b      	ldr	r3, [r7, #16]
 800b63e:	e853 3f00 	ldrex	r3, [r3]
 800b642:	60fb      	str	r3, [r7, #12]
   return(result);
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	f023 0310 	bic.w	r3, r3, #16
 800b64a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	330c      	adds	r3, #12
 800b654:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800b658:	61fa      	str	r2, [r7, #28]
 800b65a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b65c:	69b9      	ldr	r1, [r7, #24]
 800b65e:	69fa      	ldr	r2, [r7, #28]
 800b660:	e841 2300 	strex	r3, r2, [r1]
 800b664:	617b      	str	r3, [r7, #20]
   return(result);
 800b666:	697b      	ldr	r3, [r7, #20]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d1e3      	bne.n	800b634 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b66c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b670:	4619      	mov	r1, r3
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f000 f83e 	bl	800b6f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b678:	e023      	b.n	800b6c2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b67a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b67e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b682:	2b00      	cmp	r3, #0
 800b684:	d009      	beq.n	800b69a <HAL_UART_IRQHandler+0x4ea>
 800b686:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b68a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d003      	beq.n	800b69a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f000 f95d 	bl	800b952 <UART_Transmit_IT>
    return;
 800b698:	e014      	b.n	800b6c4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b69a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b69e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d00e      	beq.n	800b6c4 <HAL_UART_IRQHandler+0x514>
 800b6a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b6aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d008      	beq.n	800b6c4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800b6b2:	6878      	ldr	r0, [r7, #4]
 800b6b4:	f000 f99d 	bl	800b9f2 <UART_EndTransmit_IT>
    return;
 800b6b8:	e004      	b.n	800b6c4 <HAL_UART_IRQHandler+0x514>
    return;
 800b6ba:	bf00      	nop
 800b6bc:	e002      	b.n	800b6c4 <HAL_UART_IRQHandler+0x514>
      return;
 800b6be:	bf00      	nop
 800b6c0:	e000      	b.n	800b6c4 <HAL_UART_IRQHandler+0x514>
      return;
 800b6c2:	bf00      	nop
  }
}
 800b6c4:	37e8      	adds	r7, #232	@ 0xe8
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	bd80      	pop	{r7, pc}
 800b6ca:	bf00      	nop

0800b6cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b6cc:	b480      	push	{r7}
 800b6ce:	b083      	sub	sp, #12
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b6d4:	bf00      	nop
 800b6d6:	370c      	adds	r7, #12
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6de:	4770      	bx	lr

0800b6e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b6e0:	b480      	push	{r7}
 800b6e2:	b083      	sub	sp, #12
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b6e8:	bf00      	nop
 800b6ea:	370c      	adds	r7, #12
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f2:	4770      	bx	lr

0800b6f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b6f4:	b480      	push	{r7}
 800b6f6:	b083      	sub	sp, #12
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
 800b6fc:	460b      	mov	r3, r1
 800b6fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b700:	bf00      	nop
 800b702:	370c      	adds	r7, #12
 800b704:	46bd      	mov	sp, r7
 800b706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70a:	4770      	bx	lr

0800b70c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b090      	sub	sp, #64	@ 0x40
 800b710:	af00      	add	r7, sp, #0
 800b712:	60f8      	str	r0, [r7, #12]
 800b714:	60b9      	str	r1, [r7, #8]
 800b716:	603b      	str	r3, [r7, #0]
 800b718:	4613      	mov	r3, r2
 800b71a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b71c:	e050      	b.n	800b7c0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b71e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b720:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b724:	d04c      	beq.n	800b7c0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b726:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d007      	beq.n	800b73c <UART_WaitOnFlagUntilTimeout+0x30>
 800b72c:	f7fa fed0 	bl	80064d0 <HAL_GetTick>
 800b730:	4602      	mov	r2, r0
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	1ad3      	subs	r3, r2, r3
 800b736:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b738:	429a      	cmp	r2, r3
 800b73a:	d241      	bcs.n	800b7c0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	330c      	adds	r3, #12
 800b742:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b746:	e853 3f00 	ldrex	r3, [r3]
 800b74a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b74c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b74e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800b752:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	330c      	adds	r3, #12
 800b75a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b75c:	637a      	str	r2, [r7, #52]	@ 0x34
 800b75e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b760:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b762:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b764:	e841 2300 	strex	r3, r2, [r1]
 800b768:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b76a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d1e5      	bne.n	800b73c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	3314      	adds	r3, #20
 800b776:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b778:	697b      	ldr	r3, [r7, #20]
 800b77a:	e853 3f00 	ldrex	r3, [r3]
 800b77e:	613b      	str	r3, [r7, #16]
   return(result);
 800b780:	693b      	ldr	r3, [r7, #16]
 800b782:	f023 0301 	bic.w	r3, r3, #1
 800b786:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	3314      	adds	r3, #20
 800b78e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b790:	623a      	str	r2, [r7, #32]
 800b792:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b794:	69f9      	ldr	r1, [r7, #28]
 800b796:	6a3a      	ldr	r2, [r7, #32]
 800b798:	e841 2300 	strex	r3, r2, [r1]
 800b79c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b79e:	69bb      	ldr	r3, [r7, #24]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d1e5      	bne.n	800b770 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	2220      	movs	r2, #32
 800b7a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	2220      	movs	r2, #32
 800b7b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 800b7bc:	2303      	movs	r3, #3
 800b7be:	e00f      	b.n	800b7e0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	681a      	ldr	r2, [r3, #0]
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	4013      	ands	r3, r2
 800b7ca:	68ba      	ldr	r2, [r7, #8]
 800b7cc:	429a      	cmp	r2, r3
 800b7ce:	bf0c      	ite	eq
 800b7d0:	2301      	moveq	r3, #1
 800b7d2:	2300      	movne	r3, #0
 800b7d4:	b2db      	uxtb	r3, r3
 800b7d6:	461a      	mov	r2, r3
 800b7d8:	79fb      	ldrb	r3, [r7, #7]
 800b7da:	429a      	cmp	r2, r3
 800b7dc:	d09f      	beq.n	800b71e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b7de:	2300      	movs	r3, #0
}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	3740      	adds	r7, #64	@ 0x40
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bd80      	pop	{r7, pc}

0800b7e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b7e8:	b480      	push	{r7}
 800b7ea:	b085      	sub	sp, #20
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	60f8      	str	r0, [r7, #12]
 800b7f0:	60b9      	str	r1, [r7, #8]
 800b7f2:	4613      	mov	r3, r2
 800b7f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	68ba      	ldr	r2, [r7, #8]
 800b7fa:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	88fa      	ldrh	r2, [r7, #6]
 800b800:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	88fa      	ldrh	r2, [r7, #6]
 800b806:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	2200      	movs	r2, #0
 800b80c:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	2222      	movs	r2, #34	@ 0x22
 800b812:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	2200      	movs	r2, #0
 800b81a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	691b      	ldr	r3, [r3, #16]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d007      	beq.n	800b836 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	68da      	ldr	r2, [r3, #12]
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b834:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	695a      	ldr	r2, [r3, #20]
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	f042 0201 	orr.w	r2, r2, #1
 800b844:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	68da      	ldr	r2, [r3, #12]
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	f042 0220 	orr.w	r2, r2, #32
 800b854:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b856:	2300      	movs	r3, #0
}
 800b858:	4618      	mov	r0, r3
 800b85a:	3714      	adds	r7, #20
 800b85c:	46bd      	mov	sp, r7
 800b85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b862:	4770      	bx	lr

0800b864 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b864:	b480      	push	{r7}
 800b866:	b095      	sub	sp, #84	@ 0x54
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	330c      	adds	r3, #12
 800b872:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b874:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b876:	e853 3f00 	ldrex	r3, [r3]
 800b87a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b87c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b87e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b882:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	330c      	adds	r3, #12
 800b88a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b88c:	643a      	str	r2, [r7, #64]	@ 0x40
 800b88e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b890:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b892:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b894:	e841 2300 	strex	r3, r2, [r1]
 800b898:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b89a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d1e5      	bne.n	800b86c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	3314      	adds	r3, #20
 800b8a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8a8:	6a3b      	ldr	r3, [r7, #32]
 800b8aa:	e853 3f00 	ldrex	r3, [r3]
 800b8ae:	61fb      	str	r3, [r7, #28]
   return(result);
 800b8b0:	69fb      	ldr	r3, [r7, #28]
 800b8b2:	f023 0301 	bic.w	r3, r3, #1
 800b8b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	3314      	adds	r3, #20
 800b8be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b8c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b8c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b8c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b8c8:	e841 2300 	strex	r3, r2, [r1]
 800b8cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b8ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d1e5      	bne.n	800b8a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8d8:	2b01      	cmp	r3, #1
 800b8da:	d119      	bne.n	800b910 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	330c      	adds	r3, #12
 800b8e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	e853 3f00 	ldrex	r3, [r3]
 800b8ea:	60bb      	str	r3, [r7, #8]
   return(result);
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	f023 0310 	bic.w	r3, r3, #16
 800b8f2:	647b      	str	r3, [r7, #68]	@ 0x44
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	330c      	adds	r3, #12
 800b8fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b8fc:	61ba      	str	r2, [r7, #24]
 800b8fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b900:	6979      	ldr	r1, [r7, #20]
 800b902:	69ba      	ldr	r2, [r7, #24]
 800b904:	e841 2300 	strex	r3, r2, [r1]
 800b908:	613b      	str	r3, [r7, #16]
   return(result);
 800b90a:	693b      	ldr	r3, [r7, #16]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d1e5      	bne.n	800b8dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2220      	movs	r2, #32
 800b914:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2200      	movs	r2, #0
 800b91c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800b91e:	bf00      	nop
 800b920:	3754      	adds	r7, #84	@ 0x54
 800b922:	46bd      	mov	sp, r7
 800b924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b928:	4770      	bx	lr

0800b92a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b92a:	b580      	push	{r7, lr}
 800b92c:	b084      	sub	sp, #16
 800b92e:	af00      	add	r7, sp, #0
 800b930:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b936:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	2200      	movs	r2, #0
 800b93c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	2200      	movs	r2, #0
 800b942:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b944:	68f8      	ldr	r0, [r7, #12]
 800b946:	f7ff fecb 	bl	800b6e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b94a:	bf00      	nop
 800b94c:	3710      	adds	r7, #16
 800b94e:	46bd      	mov	sp, r7
 800b950:	bd80      	pop	{r7, pc}

0800b952 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b952:	b480      	push	{r7}
 800b954:	b085      	sub	sp, #20
 800b956:	af00      	add	r7, sp, #0
 800b958:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b960:	b2db      	uxtb	r3, r3
 800b962:	2b21      	cmp	r3, #33	@ 0x21
 800b964:	d13e      	bne.n	800b9e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	689b      	ldr	r3, [r3, #8]
 800b96a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b96e:	d114      	bne.n	800b99a <UART_Transmit_IT+0x48>
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	691b      	ldr	r3, [r3, #16]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d110      	bne.n	800b99a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	6a1b      	ldr	r3, [r3, #32]
 800b97c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	881b      	ldrh	r3, [r3, #0]
 800b982:	461a      	mov	r2, r3
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b98c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6a1b      	ldr	r3, [r3, #32]
 800b992:	1c9a      	adds	r2, r3, #2
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	621a      	str	r2, [r3, #32]
 800b998:	e008      	b.n	800b9ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	6a1b      	ldr	r3, [r3, #32]
 800b99e:	1c59      	adds	r1, r3, #1
 800b9a0:	687a      	ldr	r2, [r7, #4]
 800b9a2:	6211      	str	r1, [r2, #32]
 800b9a4:	781a      	ldrb	r2, [r3, #0]
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b9b0:	b29b      	uxth	r3, r3
 800b9b2:	3b01      	subs	r3, #1
 800b9b4:	b29b      	uxth	r3, r3
 800b9b6:	687a      	ldr	r2, [r7, #4]
 800b9b8:	4619      	mov	r1, r3
 800b9ba:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d10f      	bne.n	800b9e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	68da      	ldr	r2, [r3, #12]
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b9ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	68da      	ldr	r2, [r3, #12]
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b9de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	e000      	b.n	800b9e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b9e4:	2302      	movs	r3, #2
  }
}
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	3714      	adds	r7, #20
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f0:	4770      	bx	lr

0800b9f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b9f2:	b580      	push	{r7, lr}
 800b9f4:	b082      	sub	sp, #8
 800b9f6:	af00      	add	r7, sp, #0
 800b9f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	68da      	ldr	r2, [r3, #12]
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ba08:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2220      	movs	r2, #32
 800ba0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ba12:	6878      	ldr	r0, [r7, #4]
 800ba14:	f7ff fe5a 	bl	800b6cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ba18:	2300      	movs	r3, #0
}
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	3708      	adds	r7, #8
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd80      	pop	{r7, pc}

0800ba22 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ba22:	b580      	push	{r7, lr}
 800ba24:	b08c      	sub	sp, #48	@ 0x30
 800ba26:	af00      	add	r7, sp, #0
 800ba28:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ba30:	b2db      	uxtb	r3, r3
 800ba32:	2b22      	cmp	r3, #34	@ 0x22
 800ba34:	f040 80ab 	bne.w	800bb8e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	689b      	ldr	r3, [r3, #8]
 800ba3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ba40:	d117      	bne.n	800ba72 <UART_Receive_IT+0x50>
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	691b      	ldr	r3, [r3, #16]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d113      	bne.n	800ba72 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba52:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	685b      	ldr	r3, [r3, #4]
 800ba5a:	b29b      	uxth	r3, r3
 800ba5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba60:	b29a      	uxth	r2, r3
 800ba62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba64:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba6a:	1c9a      	adds	r2, r3, #2
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	629a      	str	r2, [r3, #40]	@ 0x28
 800ba70:	e026      	b.n	800bac0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba76:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800ba78:	2300      	movs	r3, #0
 800ba7a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	689b      	ldr	r3, [r3, #8]
 800ba80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ba84:	d007      	beq.n	800ba96 <UART_Receive_IT+0x74>
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	689b      	ldr	r3, [r3, #8]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d10a      	bne.n	800baa4 <UART_Receive_IT+0x82>
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	691b      	ldr	r3, [r3, #16]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d106      	bne.n	800baa4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	685b      	ldr	r3, [r3, #4]
 800ba9c:	b2da      	uxtb	r2, r3
 800ba9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baa0:	701a      	strb	r2, [r3, #0]
 800baa2:	e008      	b.n	800bab6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	685b      	ldr	r3, [r3, #4]
 800baaa:	b2db      	uxtb	r3, r3
 800baac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bab0:	b2da      	uxtb	r2, r3
 800bab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bab4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800baba:	1c5a      	adds	r2, r3, #1
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800bac4:	b29b      	uxth	r3, r3
 800bac6:	3b01      	subs	r3, #1
 800bac8:	b29b      	uxth	r3, r3
 800baca:	687a      	ldr	r2, [r7, #4]
 800bacc:	4619      	mov	r1, r3
 800bace:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d15a      	bne.n	800bb8a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	68da      	ldr	r2, [r3, #12]
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	f022 0220 	bic.w	r2, r2, #32
 800bae2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	68da      	ldr	r2, [r3, #12]
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800baf2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	695a      	ldr	r2, [r3, #20]
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	f022 0201 	bic.w	r2, r2, #1
 800bb02:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2220      	movs	r2, #32
 800bb08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb10:	2b01      	cmp	r3, #1
 800bb12:	d135      	bne.n	800bb80 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2200      	movs	r2, #0
 800bb18:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	330c      	adds	r3, #12
 800bb20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb22:	697b      	ldr	r3, [r7, #20]
 800bb24:	e853 3f00 	ldrex	r3, [r3]
 800bb28:	613b      	str	r3, [r7, #16]
   return(result);
 800bb2a:	693b      	ldr	r3, [r7, #16]
 800bb2c:	f023 0310 	bic.w	r3, r3, #16
 800bb30:	627b      	str	r3, [r7, #36]	@ 0x24
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	330c      	adds	r3, #12
 800bb38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb3a:	623a      	str	r2, [r7, #32]
 800bb3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb3e:	69f9      	ldr	r1, [r7, #28]
 800bb40:	6a3a      	ldr	r2, [r7, #32]
 800bb42:	e841 2300 	strex	r3, r2, [r1]
 800bb46:	61bb      	str	r3, [r7, #24]
   return(result);
 800bb48:	69bb      	ldr	r3, [r7, #24]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d1e5      	bne.n	800bb1a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	f003 0310 	and.w	r3, r3, #16
 800bb58:	2b10      	cmp	r3, #16
 800bb5a:	d10a      	bne.n	800bb72 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	60fb      	str	r3, [r7, #12]
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	60fb      	str	r3, [r7, #12]
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	685b      	ldr	r3, [r3, #4]
 800bb6e:	60fb      	str	r3, [r7, #12]
 800bb70:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800bb76:	4619      	mov	r1, r3
 800bb78:	6878      	ldr	r0, [r7, #4]
 800bb7a:	f7ff fdbb 	bl	800b6f4 <HAL_UARTEx_RxEventCallback>
 800bb7e:	e002      	b.n	800bb86 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800bb80:	6878      	ldr	r0, [r7, #4]
 800bb82:	f7f8 fa4b 	bl	800401c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800bb86:	2300      	movs	r3, #0
 800bb88:	e002      	b.n	800bb90 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	e000      	b.n	800bb90 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800bb8e:	2302      	movs	r3, #2
  }
}
 800bb90:	4618      	mov	r0, r3
 800bb92:	3730      	adds	r7, #48	@ 0x30
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bd80      	pop	{r7, pc}

0800bb98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bb98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bb9c:	b0c0      	sub	sp, #256	@ 0x100
 800bb9e:	af00      	add	r7, sp, #0
 800bba0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	691b      	ldr	r3, [r3, #16]
 800bbac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800bbb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bbb4:	68d9      	ldr	r1, [r3, #12]
 800bbb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bbba:	681a      	ldr	r2, [r3, #0]
 800bbbc:	ea40 0301 	orr.w	r3, r0, r1
 800bbc0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800bbc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bbc6:	689a      	ldr	r2, [r3, #8]
 800bbc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bbcc:	691b      	ldr	r3, [r3, #16]
 800bbce:	431a      	orrs	r2, r3
 800bbd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bbd4:	695b      	ldr	r3, [r3, #20]
 800bbd6:	431a      	orrs	r2, r3
 800bbd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bbdc:	69db      	ldr	r3, [r3, #28]
 800bbde:	4313      	orrs	r3, r2
 800bbe0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800bbe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	68db      	ldr	r3, [r3, #12]
 800bbec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800bbf0:	f021 010c 	bic.w	r1, r1, #12
 800bbf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bbf8:	681a      	ldr	r2, [r3, #0]
 800bbfa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800bbfe:	430b      	orrs	r3, r1
 800bc00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bc02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	695b      	ldr	r3, [r3, #20]
 800bc0a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800bc0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc12:	6999      	ldr	r1, [r3, #24]
 800bc14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc18:	681a      	ldr	r2, [r3, #0]
 800bc1a:	ea40 0301 	orr.w	r3, r0, r1
 800bc1e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bc20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc24:	681a      	ldr	r2, [r3, #0]
 800bc26:	4b8f      	ldr	r3, [pc, #572]	@ (800be64 <UART_SetConfig+0x2cc>)
 800bc28:	429a      	cmp	r2, r3
 800bc2a:	d005      	beq.n	800bc38 <UART_SetConfig+0xa0>
 800bc2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc30:	681a      	ldr	r2, [r3, #0]
 800bc32:	4b8d      	ldr	r3, [pc, #564]	@ (800be68 <UART_SetConfig+0x2d0>)
 800bc34:	429a      	cmp	r2, r3
 800bc36:	d104      	bne.n	800bc42 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800bc38:	f7fd f9c4 	bl	8008fc4 <HAL_RCC_GetPCLK2Freq>
 800bc3c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800bc40:	e003      	b.n	800bc4a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bc42:	f7fd f9ab 	bl	8008f9c <HAL_RCC_GetPCLK1Freq>
 800bc46:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bc4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc4e:	69db      	ldr	r3, [r3, #28]
 800bc50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bc54:	f040 810c 	bne.w	800be70 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bc58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800bc62:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800bc66:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800bc6a:	4622      	mov	r2, r4
 800bc6c:	462b      	mov	r3, r5
 800bc6e:	1891      	adds	r1, r2, r2
 800bc70:	65b9      	str	r1, [r7, #88]	@ 0x58
 800bc72:	415b      	adcs	r3, r3
 800bc74:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bc76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800bc7a:	4621      	mov	r1, r4
 800bc7c:	eb12 0801 	adds.w	r8, r2, r1
 800bc80:	4629      	mov	r1, r5
 800bc82:	eb43 0901 	adc.w	r9, r3, r1
 800bc86:	f04f 0200 	mov.w	r2, #0
 800bc8a:	f04f 0300 	mov.w	r3, #0
 800bc8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bc92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bc96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bc9a:	4690      	mov	r8, r2
 800bc9c:	4699      	mov	r9, r3
 800bc9e:	4623      	mov	r3, r4
 800bca0:	eb18 0303 	adds.w	r3, r8, r3
 800bca4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bca8:	462b      	mov	r3, r5
 800bcaa:	eb49 0303 	adc.w	r3, r9, r3
 800bcae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800bcb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bcb6:	685b      	ldr	r3, [r3, #4]
 800bcb8:	2200      	movs	r2, #0
 800bcba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800bcbe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800bcc2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800bcc6:	460b      	mov	r3, r1
 800bcc8:	18db      	adds	r3, r3, r3
 800bcca:	653b      	str	r3, [r7, #80]	@ 0x50
 800bccc:	4613      	mov	r3, r2
 800bcce:	eb42 0303 	adc.w	r3, r2, r3
 800bcd2:	657b      	str	r3, [r7, #84]	@ 0x54
 800bcd4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800bcd8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800bcdc:	f7f5 f83c 	bl	8000d58 <__aeabi_uldivmod>
 800bce0:	4602      	mov	r2, r0
 800bce2:	460b      	mov	r3, r1
 800bce4:	4b61      	ldr	r3, [pc, #388]	@ (800be6c <UART_SetConfig+0x2d4>)
 800bce6:	fba3 2302 	umull	r2, r3, r3, r2
 800bcea:	095b      	lsrs	r3, r3, #5
 800bcec:	011c      	lsls	r4, r3, #4
 800bcee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bcf8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800bcfc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800bd00:	4642      	mov	r2, r8
 800bd02:	464b      	mov	r3, r9
 800bd04:	1891      	adds	r1, r2, r2
 800bd06:	64b9      	str	r1, [r7, #72]	@ 0x48
 800bd08:	415b      	adcs	r3, r3
 800bd0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bd0c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800bd10:	4641      	mov	r1, r8
 800bd12:	eb12 0a01 	adds.w	sl, r2, r1
 800bd16:	4649      	mov	r1, r9
 800bd18:	eb43 0b01 	adc.w	fp, r3, r1
 800bd1c:	f04f 0200 	mov.w	r2, #0
 800bd20:	f04f 0300 	mov.w	r3, #0
 800bd24:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800bd28:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800bd2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bd30:	4692      	mov	sl, r2
 800bd32:	469b      	mov	fp, r3
 800bd34:	4643      	mov	r3, r8
 800bd36:	eb1a 0303 	adds.w	r3, sl, r3
 800bd3a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800bd3e:	464b      	mov	r3, r9
 800bd40:	eb4b 0303 	adc.w	r3, fp, r3
 800bd44:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800bd48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bd4c:	685b      	ldr	r3, [r3, #4]
 800bd4e:	2200      	movs	r2, #0
 800bd50:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800bd54:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800bd58:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800bd5c:	460b      	mov	r3, r1
 800bd5e:	18db      	adds	r3, r3, r3
 800bd60:	643b      	str	r3, [r7, #64]	@ 0x40
 800bd62:	4613      	mov	r3, r2
 800bd64:	eb42 0303 	adc.w	r3, r2, r3
 800bd68:	647b      	str	r3, [r7, #68]	@ 0x44
 800bd6a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800bd6e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800bd72:	f7f4 fff1 	bl	8000d58 <__aeabi_uldivmod>
 800bd76:	4602      	mov	r2, r0
 800bd78:	460b      	mov	r3, r1
 800bd7a:	4611      	mov	r1, r2
 800bd7c:	4b3b      	ldr	r3, [pc, #236]	@ (800be6c <UART_SetConfig+0x2d4>)
 800bd7e:	fba3 2301 	umull	r2, r3, r3, r1
 800bd82:	095b      	lsrs	r3, r3, #5
 800bd84:	2264      	movs	r2, #100	@ 0x64
 800bd86:	fb02 f303 	mul.w	r3, r2, r3
 800bd8a:	1acb      	subs	r3, r1, r3
 800bd8c:	00db      	lsls	r3, r3, #3
 800bd8e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800bd92:	4b36      	ldr	r3, [pc, #216]	@ (800be6c <UART_SetConfig+0x2d4>)
 800bd94:	fba3 2302 	umull	r2, r3, r3, r2
 800bd98:	095b      	lsrs	r3, r3, #5
 800bd9a:	005b      	lsls	r3, r3, #1
 800bd9c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800bda0:	441c      	add	r4, r3
 800bda2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bda6:	2200      	movs	r2, #0
 800bda8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bdac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800bdb0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800bdb4:	4642      	mov	r2, r8
 800bdb6:	464b      	mov	r3, r9
 800bdb8:	1891      	adds	r1, r2, r2
 800bdba:	63b9      	str	r1, [r7, #56]	@ 0x38
 800bdbc:	415b      	adcs	r3, r3
 800bdbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bdc0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800bdc4:	4641      	mov	r1, r8
 800bdc6:	1851      	adds	r1, r2, r1
 800bdc8:	6339      	str	r1, [r7, #48]	@ 0x30
 800bdca:	4649      	mov	r1, r9
 800bdcc:	414b      	adcs	r3, r1
 800bdce:	637b      	str	r3, [r7, #52]	@ 0x34
 800bdd0:	f04f 0200 	mov.w	r2, #0
 800bdd4:	f04f 0300 	mov.w	r3, #0
 800bdd8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800bddc:	4659      	mov	r1, fp
 800bdde:	00cb      	lsls	r3, r1, #3
 800bde0:	4651      	mov	r1, sl
 800bde2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bde6:	4651      	mov	r1, sl
 800bde8:	00ca      	lsls	r2, r1, #3
 800bdea:	4610      	mov	r0, r2
 800bdec:	4619      	mov	r1, r3
 800bdee:	4603      	mov	r3, r0
 800bdf0:	4642      	mov	r2, r8
 800bdf2:	189b      	adds	r3, r3, r2
 800bdf4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bdf8:	464b      	mov	r3, r9
 800bdfa:	460a      	mov	r2, r1
 800bdfc:	eb42 0303 	adc.w	r3, r2, r3
 800be00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800be04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800be08:	685b      	ldr	r3, [r3, #4]
 800be0a:	2200      	movs	r2, #0
 800be0c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800be10:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800be14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800be18:	460b      	mov	r3, r1
 800be1a:	18db      	adds	r3, r3, r3
 800be1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800be1e:	4613      	mov	r3, r2
 800be20:	eb42 0303 	adc.w	r3, r2, r3
 800be24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800be26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800be2a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800be2e:	f7f4 ff93 	bl	8000d58 <__aeabi_uldivmod>
 800be32:	4602      	mov	r2, r0
 800be34:	460b      	mov	r3, r1
 800be36:	4b0d      	ldr	r3, [pc, #52]	@ (800be6c <UART_SetConfig+0x2d4>)
 800be38:	fba3 1302 	umull	r1, r3, r3, r2
 800be3c:	095b      	lsrs	r3, r3, #5
 800be3e:	2164      	movs	r1, #100	@ 0x64
 800be40:	fb01 f303 	mul.w	r3, r1, r3
 800be44:	1ad3      	subs	r3, r2, r3
 800be46:	00db      	lsls	r3, r3, #3
 800be48:	3332      	adds	r3, #50	@ 0x32
 800be4a:	4a08      	ldr	r2, [pc, #32]	@ (800be6c <UART_SetConfig+0x2d4>)
 800be4c:	fba2 2303 	umull	r2, r3, r2, r3
 800be50:	095b      	lsrs	r3, r3, #5
 800be52:	f003 0207 	and.w	r2, r3, #7
 800be56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	4422      	add	r2, r4
 800be5e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800be60:	e106      	b.n	800c070 <UART_SetConfig+0x4d8>
 800be62:	bf00      	nop
 800be64:	40011000 	.word	0x40011000
 800be68:	40011400 	.word	0x40011400
 800be6c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800be70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800be74:	2200      	movs	r2, #0
 800be76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800be7a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800be7e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800be82:	4642      	mov	r2, r8
 800be84:	464b      	mov	r3, r9
 800be86:	1891      	adds	r1, r2, r2
 800be88:	6239      	str	r1, [r7, #32]
 800be8a:	415b      	adcs	r3, r3
 800be8c:	627b      	str	r3, [r7, #36]	@ 0x24
 800be8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800be92:	4641      	mov	r1, r8
 800be94:	1854      	adds	r4, r2, r1
 800be96:	4649      	mov	r1, r9
 800be98:	eb43 0501 	adc.w	r5, r3, r1
 800be9c:	f04f 0200 	mov.w	r2, #0
 800bea0:	f04f 0300 	mov.w	r3, #0
 800bea4:	00eb      	lsls	r3, r5, #3
 800bea6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800beaa:	00e2      	lsls	r2, r4, #3
 800beac:	4614      	mov	r4, r2
 800beae:	461d      	mov	r5, r3
 800beb0:	4643      	mov	r3, r8
 800beb2:	18e3      	adds	r3, r4, r3
 800beb4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800beb8:	464b      	mov	r3, r9
 800beba:	eb45 0303 	adc.w	r3, r5, r3
 800bebe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800bec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bec6:	685b      	ldr	r3, [r3, #4]
 800bec8:	2200      	movs	r2, #0
 800beca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bece:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800bed2:	f04f 0200 	mov.w	r2, #0
 800bed6:	f04f 0300 	mov.w	r3, #0
 800beda:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800bede:	4629      	mov	r1, r5
 800bee0:	008b      	lsls	r3, r1, #2
 800bee2:	4621      	mov	r1, r4
 800bee4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bee8:	4621      	mov	r1, r4
 800beea:	008a      	lsls	r2, r1, #2
 800beec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800bef0:	f7f4 ff32 	bl	8000d58 <__aeabi_uldivmod>
 800bef4:	4602      	mov	r2, r0
 800bef6:	460b      	mov	r3, r1
 800bef8:	4b60      	ldr	r3, [pc, #384]	@ (800c07c <UART_SetConfig+0x4e4>)
 800befa:	fba3 2302 	umull	r2, r3, r3, r2
 800befe:	095b      	lsrs	r3, r3, #5
 800bf00:	011c      	lsls	r4, r3, #4
 800bf02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bf06:	2200      	movs	r2, #0
 800bf08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800bf0c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800bf10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800bf14:	4642      	mov	r2, r8
 800bf16:	464b      	mov	r3, r9
 800bf18:	1891      	adds	r1, r2, r2
 800bf1a:	61b9      	str	r1, [r7, #24]
 800bf1c:	415b      	adcs	r3, r3
 800bf1e:	61fb      	str	r3, [r7, #28]
 800bf20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bf24:	4641      	mov	r1, r8
 800bf26:	1851      	adds	r1, r2, r1
 800bf28:	6139      	str	r1, [r7, #16]
 800bf2a:	4649      	mov	r1, r9
 800bf2c:	414b      	adcs	r3, r1
 800bf2e:	617b      	str	r3, [r7, #20]
 800bf30:	f04f 0200 	mov.w	r2, #0
 800bf34:	f04f 0300 	mov.w	r3, #0
 800bf38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800bf3c:	4659      	mov	r1, fp
 800bf3e:	00cb      	lsls	r3, r1, #3
 800bf40:	4651      	mov	r1, sl
 800bf42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bf46:	4651      	mov	r1, sl
 800bf48:	00ca      	lsls	r2, r1, #3
 800bf4a:	4610      	mov	r0, r2
 800bf4c:	4619      	mov	r1, r3
 800bf4e:	4603      	mov	r3, r0
 800bf50:	4642      	mov	r2, r8
 800bf52:	189b      	adds	r3, r3, r2
 800bf54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800bf58:	464b      	mov	r3, r9
 800bf5a:	460a      	mov	r2, r1
 800bf5c:	eb42 0303 	adc.w	r3, r2, r3
 800bf60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800bf64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bf68:	685b      	ldr	r3, [r3, #4]
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bf6e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800bf70:	f04f 0200 	mov.w	r2, #0
 800bf74:	f04f 0300 	mov.w	r3, #0
 800bf78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800bf7c:	4649      	mov	r1, r9
 800bf7e:	008b      	lsls	r3, r1, #2
 800bf80:	4641      	mov	r1, r8
 800bf82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bf86:	4641      	mov	r1, r8
 800bf88:	008a      	lsls	r2, r1, #2
 800bf8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800bf8e:	f7f4 fee3 	bl	8000d58 <__aeabi_uldivmod>
 800bf92:	4602      	mov	r2, r0
 800bf94:	460b      	mov	r3, r1
 800bf96:	4611      	mov	r1, r2
 800bf98:	4b38      	ldr	r3, [pc, #224]	@ (800c07c <UART_SetConfig+0x4e4>)
 800bf9a:	fba3 2301 	umull	r2, r3, r3, r1
 800bf9e:	095b      	lsrs	r3, r3, #5
 800bfa0:	2264      	movs	r2, #100	@ 0x64
 800bfa2:	fb02 f303 	mul.w	r3, r2, r3
 800bfa6:	1acb      	subs	r3, r1, r3
 800bfa8:	011b      	lsls	r3, r3, #4
 800bfaa:	3332      	adds	r3, #50	@ 0x32
 800bfac:	4a33      	ldr	r2, [pc, #204]	@ (800c07c <UART_SetConfig+0x4e4>)
 800bfae:	fba2 2303 	umull	r2, r3, r2, r3
 800bfb2:	095b      	lsrs	r3, r3, #5
 800bfb4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bfb8:	441c      	add	r4, r3
 800bfba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	673b      	str	r3, [r7, #112]	@ 0x70
 800bfc2:	677a      	str	r2, [r7, #116]	@ 0x74
 800bfc4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800bfc8:	4642      	mov	r2, r8
 800bfca:	464b      	mov	r3, r9
 800bfcc:	1891      	adds	r1, r2, r2
 800bfce:	60b9      	str	r1, [r7, #8]
 800bfd0:	415b      	adcs	r3, r3
 800bfd2:	60fb      	str	r3, [r7, #12]
 800bfd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bfd8:	4641      	mov	r1, r8
 800bfda:	1851      	adds	r1, r2, r1
 800bfdc:	6039      	str	r1, [r7, #0]
 800bfde:	4649      	mov	r1, r9
 800bfe0:	414b      	adcs	r3, r1
 800bfe2:	607b      	str	r3, [r7, #4]
 800bfe4:	f04f 0200 	mov.w	r2, #0
 800bfe8:	f04f 0300 	mov.w	r3, #0
 800bfec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800bff0:	4659      	mov	r1, fp
 800bff2:	00cb      	lsls	r3, r1, #3
 800bff4:	4651      	mov	r1, sl
 800bff6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bffa:	4651      	mov	r1, sl
 800bffc:	00ca      	lsls	r2, r1, #3
 800bffe:	4610      	mov	r0, r2
 800c000:	4619      	mov	r1, r3
 800c002:	4603      	mov	r3, r0
 800c004:	4642      	mov	r2, r8
 800c006:	189b      	adds	r3, r3, r2
 800c008:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c00a:	464b      	mov	r3, r9
 800c00c:	460a      	mov	r2, r1
 800c00e:	eb42 0303 	adc.w	r3, r2, r3
 800c012:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c018:	685b      	ldr	r3, [r3, #4]
 800c01a:	2200      	movs	r2, #0
 800c01c:	663b      	str	r3, [r7, #96]	@ 0x60
 800c01e:	667a      	str	r2, [r7, #100]	@ 0x64
 800c020:	f04f 0200 	mov.w	r2, #0
 800c024:	f04f 0300 	mov.w	r3, #0
 800c028:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800c02c:	4649      	mov	r1, r9
 800c02e:	008b      	lsls	r3, r1, #2
 800c030:	4641      	mov	r1, r8
 800c032:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c036:	4641      	mov	r1, r8
 800c038:	008a      	lsls	r2, r1, #2
 800c03a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800c03e:	f7f4 fe8b 	bl	8000d58 <__aeabi_uldivmod>
 800c042:	4602      	mov	r2, r0
 800c044:	460b      	mov	r3, r1
 800c046:	4b0d      	ldr	r3, [pc, #52]	@ (800c07c <UART_SetConfig+0x4e4>)
 800c048:	fba3 1302 	umull	r1, r3, r3, r2
 800c04c:	095b      	lsrs	r3, r3, #5
 800c04e:	2164      	movs	r1, #100	@ 0x64
 800c050:	fb01 f303 	mul.w	r3, r1, r3
 800c054:	1ad3      	subs	r3, r2, r3
 800c056:	011b      	lsls	r3, r3, #4
 800c058:	3332      	adds	r3, #50	@ 0x32
 800c05a:	4a08      	ldr	r2, [pc, #32]	@ (800c07c <UART_SetConfig+0x4e4>)
 800c05c:	fba2 2303 	umull	r2, r3, r2, r3
 800c060:	095b      	lsrs	r3, r3, #5
 800c062:	f003 020f 	and.w	r2, r3, #15
 800c066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	4422      	add	r2, r4
 800c06e:	609a      	str	r2, [r3, #8]
}
 800c070:	bf00      	nop
 800c072:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800c076:	46bd      	mov	sp, r7
 800c078:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c07c:	51eb851f 	.word	0x51eb851f

0800c080 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800c084:	4904      	ldr	r1, [pc, #16]	@ (800c098 <MX_FATFS_Init+0x18>)
 800c086:	4805      	ldr	r0, [pc, #20]	@ (800c09c <MX_FATFS_Init+0x1c>)
 800c088:	f000 f8b0 	bl	800c1ec <FATFS_LinkDriver>
 800c08c:	4603      	mov	r3, r0
 800c08e:	461a      	mov	r2, r3
 800c090:	4b03      	ldr	r3, [pc, #12]	@ (800c0a0 <MX_FATFS_Init+0x20>)
 800c092:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c094:	bf00      	nop
 800c096:	bd80      	pop	{r7, pc}
 800c098:	20002694 	.word	0x20002694
 800c09c:	20000050 	.word	0x20000050
 800c0a0:	20002690 	.word	0x20002690

0800c0a4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800c0a4:	b480      	push	{r7}
 800c0a6:	b083      	sub	sp, #12
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800c0ae:	4b06      	ldr	r3, [pc, #24]	@ (800c0c8 <USER_initialize+0x24>)
 800c0b0:	2201      	movs	r2, #1
 800c0b2:	701a      	strb	r2, [r3, #0]
    return Stat;
 800c0b4:	4b04      	ldr	r3, [pc, #16]	@ (800c0c8 <USER_initialize+0x24>)
 800c0b6:	781b      	ldrb	r3, [r3, #0]
 800c0b8:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	370c      	adds	r7, #12
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c4:	4770      	bx	lr
 800c0c6:	bf00      	nop
 800c0c8:	2000004d 	.word	0x2000004d

0800c0cc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800c0cc:	b480      	push	{r7}
 800c0ce:	b083      	sub	sp, #12
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800c0d6:	4b06      	ldr	r3, [pc, #24]	@ (800c0f0 <USER_status+0x24>)
 800c0d8:	2201      	movs	r2, #1
 800c0da:	701a      	strb	r2, [r3, #0]
    return Stat;
 800c0dc:	4b04      	ldr	r3, [pc, #16]	@ (800c0f0 <USER_status+0x24>)
 800c0de:	781b      	ldrb	r3, [r3, #0]
 800c0e0:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	370c      	adds	r7, #12
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ec:	4770      	bx	lr
 800c0ee:	bf00      	nop
 800c0f0:	2000004d 	.word	0x2000004d

0800c0f4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800c0f4:	b480      	push	{r7}
 800c0f6:	b085      	sub	sp, #20
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	60b9      	str	r1, [r7, #8]
 800c0fc:	607a      	str	r2, [r7, #4]
 800c0fe:	603b      	str	r3, [r7, #0]
 800c100:	4603      	mov	r3, r0
 800c102:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800c104:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800c106:	4618      	mov	r0, r3
 800c108:	3714      	adds	r7, #20
 800c10a:	46bd      	mov	sp, r7
 800c10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c110:	4770      	bx	lr

0800c112 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800c112:	b480      	push	{r7}
 800c114:	b085      	sub	sp, #20
 800c116:	af00      	add	r7, sp, #0
 800c118:	60b9      	str	r1, [r7, #8]
 800c11a:	607a      	str	r2, [r7, #4]
 800c11c:	603b      	str	r3, [r7, #0]
 800c11e:	4603      	mov	r3, r0
 800c120:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800c122:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800c124:	4618      	mov	r0, r3
 800c126:	3714      	adds	r7, #20
 800c128:	46bd      	mov	sp, r7
 800c12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12e:	4770      	bx	lr

0800c130 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800c130:	b480      	push	{r7}
 800c132:	b085      	sub	sp, #20
 800c134:	af00      	add	r7, sp, #0
 800c136:	4603      	mov	r3, r0
 800c138:	603a      	str	r2, [r7, #0]
 800c13a:	71fb      	strb	r3, [r7, #7]
 800c13c:	460b      	mov	r3, r1
 800c13e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800c140:	2301      	movs	r3, #1
 800c142:	73fb      	strb	r3, [r7, #15]
    return res;
 800c144:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800c146:	4618      	mov	r0, r3
 800c148:	3714      	adds	r7, #20
 800c14a:	46bd      	mov	sp, r7
 800c14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c150:	4770      	bx	lr
	...

0800c154 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c154:	b480      	push	{r7}
 800c156:	b087      	sub	sp, #28
 800c158:	af00      	add	r7, sp, #0
 800c15a:	60f8      	str	r0, [r7, #12]
 800c15c:	60b9      	str	r1, [r7, #8]
 800c15e:	4613      	mov	r3, r2
 800c160:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c162:	2301      	movs	r3, #1
 800c164:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c166:	2300      	movs	r3, #0
 800c168:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c16a:	4b1f      	ldr	r3, [pc, #124]	@ (800c1e8 <FATFS_LinkDriverEx+0x94>)
 800c16c:	7a5b      	ldrb	r3, [r3, #9]
 800c16e:	b2db      	uxtb	r3, r3
 800c170:	2b00      	cmp	r3, #0
 800c172:	d131      	bne.n	800c1d8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c174:	4b1c      	ldr	r3, [pc, #112]	@ (800c1e8 <FATFS_LinkDriverEx+0x94>)
 800c176:	7a5b      	ldrb	r3, [r3, #9]
 800c178:	b2db      	uxtb	r3, r3
 800c17a:	461a      	mov	r2, r3
 800c17c:	4b1a      	ldr	r3, [pc, #104]	@ (800c1e8 <FATFS_LinkDriverEx+0x94>)
 800c17e:	2100      	movs	r1, #0
 800c180:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c182:	4b19      	ldr	r3, [pc, #100]	@ (800c1e8 <FATFS_LinkDriverEx+0x94>)
 800c184:	7a5b      	ldrb	r3, [r3, #9]
 800c186:	b2db      	uxtb	r3, r3
 800c188:	4a17      	ldr	r2, [pc, #92]	@ (800c1e8 <FATFS_LinkDriverEx+0x94>)
 800c18a:	009b      	lsls	r3, r3, #2
 800c18c:	4413      	add	r3, r2
 800c18e:	68fa      	ldr	r2, [r7, #12]
 800c190:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c192:	4b15      	ldr	r3, [pc, #84]	@ (800c1e8 <FATFS_LinkDriverEx+0x94>)
 800c194:	7a5b      	ldrb	r3, [r3, #9]
 800c196:	b2db      	uxtb	r3, r3
 800c198:	461a      	mov	r2, r3
 800c19a:	4b13      	ldr	r3, [pc, #76]	@ (800c1e8 <FATFS_LinkDriverEx+0x94>)
 800c19c:	4413      	add	r3, r2
 800c19e:	79fa      	ldrb	r2, [r7, #7]
 800c1a0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c1a2:	4b11      	ldr	r3, [pc, #68]	@ (800c1e8 <FATFS_LinkDriverEx+0x94>)
 800c1a4:	7a5b      	ldrb	r3, [r3, #9]
 800c1a6:	b2db      	uxtb	r3, r3
 800c1a8:	1c5a      	adds	r2, r3, #1
 800c1aa:	b2d1      	uxtb	r1, r2
 800c1ac:	4a0e      	ldr	r2, [pc, #56]	@ (800c1e8 <FATFS_LinkDriverEx+0x94>)
 800c1ae:	7251      	strb	r1, [r2, #9]
 800c1b0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c1b2:	7dbb      	ldrb	r3, [r7, #22]
 800c1b4:	3330      	adds	r3, #48	@ 0x30
 800c1b6:	b2da      	uxtb	r2, r3
 800c1b8:	68bb      	ldr	r3, [r7, #8]
 800c1ba:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c1bc:	68bb      	ldr	r3, [r7, #8]
 800c1be:	3301      	adds	r3, #1
 800c1c0:	223a      	movs	r2, #58	@ 0x3a
 800c1c2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c1c4:	68bb      	ldr	r3, [r7, #8]
 800c1c6:	3302      	adds	r3, #2
 800c1c8:	222f      	movs	r2, #47	@ 0x2f
 800c1ca:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c1cc:	68bb      	ldr	r3, [r7, #8]
 800c1ce:	3303      	adds	r3, #3
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c1d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1da:	4618      	mov	r0, r3
 800c1dc:	371c      	adds	r7, #28
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e4:	4770      	bx	lr
 800c1e6:	bf00      	nop
 800c1e8:	20002698 	.word	0x20002698

0800c1ec <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b082      	sub	sp, #8
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
 800c1f4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	6839      	ldr	r1, [r7, #0]
 800c1fa:	6878      	ldr	r0, [r7, #4]
 800c1fc:	f7ff ffaa 	bl	800c154 <FATFS_LinkDriverEx>
 800c200:	4603      	mov	r3, r0
}
 800c202:	4618      	mov	r0, r3
 800c204:	3708      	adds	r7, #8
 800c206:	46bd      	mov	sp, r7
 800c208:	bd80      	pop	{r7, pc}
	...

0800c20c <malloc>:
 800c20c:	4b02      	ldr	r3, [pc, #8]	@ (800c218 <malloc+0xc>)
 800c20e:	4601      	mov	r1, r0
 800c210:	6818      	ldr	r0, [r3, #0]
 800c212:	f000 b82d 	b.w	800c270 <_malloc_r>
 800c216:	bf00      	nop
 800c218:	200001dc 	.word	0x200001dc

0800c21c <free>:
 800c21c:	4b02      	ldr	r3, [pc, #8]	@ (800c228 <free+0xc>)
 800c21e:	4601      	mov	r1, r0
 800c220:	6818      	ldr	r0, [r3, #0]
 800c222:	f001 b87d 	b.w	800d320 <_free_r>
 800c226:	bf00      	nop
 800c228:	200001dc 	.word	0x200001dc

0800c22c <sbrk_aligned>:
 800c22c:	b570      	push	{r4, r5, r6, lr}
 800c22e:	4e0f      	ldr	r6, [pc, #60]	@ (800c26c <sbrk_aligned+0x40>)
 800c230:	460c      	mov	r4, r1
 800c232:	6831      	ldr	r1, [r6, #0]
 800c234:	4605      	mov	r5, r0
 800c236:	b911      	cbnz	r1, 800c23e <sbrk_aligned+0x12>
 800c238:	f001 f80a 	bl	800d250 <_sbrk_r>
 800c23c:	6030      	str	r0, [r6, #0]
 800c23e:	4621      	mov	r1, r4
 800c240:	4628      	mov	r0, r5
 800c242:	f001 f805 	bl	800d250 <_sbrk_r>
 800c246:	1c43      	adds	r3, r0, #1
 800c248:	d103      	bne.n	800c252 <sbrk_aligned+0x26>
 800c24a:	f04f 34ff 	mov.w	r4, #4294967295
 800c24e:	4620      	mov	r0, r4
 800c250:	bd70      	pop	{r4, r5, r6, pc}
 800c252:	1cc4      	adds	r4, r0, #3
 800c254:	f024 0403 	bic.w	r4, r4, #3
 800c258:	42a0      	cmp	r0, r4
 800c25a:	d0f8      	beq.n	800c24e <sbrk_aligned+0x22>
 800c25c:	1a21      	subs	r1, r4, r0
 800c25e:	4628      	mov	r0, r5
 800c260:	f000 fff6 	bl	800d250 <_sbrk_r>
 800c264:	3001      	adds	r0, #1
 800c266:	d1f2      	bne.n	800c24e <sbrk_aligned+0x22>
 800c268:	e7ef      	b.n	800c24a <sbrk_aligned+0x1e>
 800c26a:	bf00      	nop
 800c26c:	200026a4 	.word	0x200026a4

0800c270 <_malloc_r>:
 800c270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c274:	1ccd      	adds	r5, r1, #3
 800c276:	f025 0503 	bic.w	r5, r5, #3
 800c27a:	3508      	adds	r5, #8
 800c27c:	2d0c      	cmp	r5, #12
 800c27e:	bf38      	it	cc
 800c280:	250c      	movcc	r5, #12
 800c282:	2d00      	cmp	r5, #0
 800c284:	4606      	mov	r6, r0
 800c286:	db01      	blt.n	800c28c <_malloc_r+0x1c>
 800c288:	42a9      	cmp	r1, r5
 800c28a:	d904      	bls.n	800c296 <_malloc_r+0x26>
 800c28c:	230c      	movs	r3, #12
 800c28e:	6033      	str	r3, [r6, #0]
 800c290:	2000      	movs	r0, #0
 800c292:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c296:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c36c <_malloc_r+0xfc>
 800c29a:	f000 f869 	bl	800c370 <__malloc_lock>
 800c29e:	f8d8 3000 	ldr.w	r3, [r8]
 800c2a2:	461c      	mov	r4, r3
 800c2a4:	bb44      	cbnz	r4, 800c2f8 <_malloc_r+0x88>
 800c2a6:	4629      	mov	r1, r5
 800c2a8:	4630      	mov	r0, r6
 800c2aa:	f7ff ffbf 	bl	800c22c <sbrk_aligned>
 800c2ae:	1c43      	adds	r3, r0, #1
 800c2b0:	4604      	mov	r4, r0
 800c2b2:	d158      	bne.n	800c366 <_malloc_r+0xf6>
 800c2b4:	f8d8 4000 	ldr.w	r4, [r8]
 800c2b8:	4627      	mov	r7, r4
 800c2ba:	2f00      	cmp	r7, #0
 800c2bc:	d143      	bne.n	800c346 <_malloc_r+0xd6>
 800c2be:	2c00      	cmp	r4, #0
 800c2c0:	d04b      	beq.n	800c35a <_malloc_r+0xea>
 800c2c2:	6823      	ldr	r3, [r4, #0]
 800c2c4:	4639      	mov	r1, r7
 800c2c6:	4630      	mov	r0, r6
 800c2c8:	eb04 0903 	add.w	r9, r4, r3
 800c2cc:	f000 ffc0 	bl	800d250 <_sbrk_r>
 800c2d0:	4581      	cmp	r9, r0
 800c2d2:	d142      	bne.n	800c35a <_malloc_r+0xea>
 800c2d4:	6821      	ldr	r1, [r4, #0]
 800c2d6:	1a6d      	subs	r5, r5, r1
 800c2d8:	4629      	mov	r1, r5
 800c2da:	4630      	mov	r0, r6
 800c2dc:	f7ff ffa6 	bl	800c22c <sbrk_aligned>
 800c2e0:	3001      	adds	r0, #1
 800c2e2:	d03a      	beq.n	800c35a <_malloc_r+0xea>
 800c2e4:	6823      	ldr	r3, [r4, #0]
 800c2e6:	442b      	add	r3, r5
 800c2e8:	6023      	str	r3, [r4, #0]
 800c2ea:	f8d8 3000 	ldr.w	r3, [r8]
 800c2ee:	685a      	ldr	r2, [r3, #4]
 800c2f0:	bb62      	cbnz	r2, 800c34c <_malloc_r+0xdc>
 800c2f2:	f8c8 7000 	str.w	r7, [r8]
 800c2f6:	e00f      	b.n	800c318 <_malloc_r+0xa8>
 800c2f8:	6822      	ldr	r2, [r4, #0]
 800c2fa:	1b52      	subs	r2, r2, r5
 800c2fc:	d420      	bmi.n	800c340 <_malloc_r+0xd0>
 800c2fe:	2a0b      	cmp	r2, #11
 800c300:	d917      	bls.n	800c332 <_malloc_r+0xc2>
 800c302:	1961      	adds	r1, r4, r5
 800c304:	42a3      	cmp	r3, r4
 800c306:	6025      	str	r5, [r4, #0]
 800c308:	bf18      	it	ne
 800c30a:	6059      	strne	r1, [r3, #4]
 800c30c:	6863      	ldr	r3, [r4, #4]
 800c30e:	bf08      	it	eq
 800c310:	f8c8 1000 	streq.w	r1, [r8]
 800c314:	5162      	str	r2, [r4, r5]
 800c316:	604b      	str	r3, [r1, #4]
 800c318:	4630      	mov	r0, r6
 800c31a:	f000 f82f 	bl	800c37c <__malloc_unlock>
 800c31e:	f104 000b 	add.w	r0, r4, #11
 800c322:	1d23      	adds	r3, r4, #4
 800c324:	f020 0007 	bic.w	r0, r0, #7
 800c328:	1ac2      	subs	r2, r0, r3
 800c32a:	bf1c      	itt	ne
 800c32c:	1a1b      	subne	r3, r3, r0
 800c32e:	50a3      	strne	r3, [r4, r2]
 800c330:	e7af      	b.n	800c292 <_malloc_r+0x22>
 800c332:	6862      	ldr	r2, [r4, #4]
 800c334:	42a3      	cmp	r3, r4
 800c336:	bf0c      	ite	eq
 800c338:	f8c8 2000 	streq.w	r2, [r8]
 800c33c:	605a      	strne	r2, [r3, #4]
 800c33e:	e7eb      	b.n	800c318 <_malloc_r+0xa8>
 800c340:	4623      	mov	r3, r4
 800c342:	6864      	ldr	r4, [r4, #4]
 800c344:	e7ae      	b.n	800c2a4 <_malloc_r+0x34>
 800c346:	463c      	mov	r4, r7
 800c348:	687f      	ldr	r7, [r7, #4]
 800c34a:	e7b6      	b.n	800c2ba <_malloc_r+0x4a>
 800c34c:	461a      	mov	r2, r3
 800c34e:	685b      	ldr	r3, [r3, #4]
 800c350:	42a3      	cmp	r3, r4
 800c352:	d1fb      	bne.n	800c34c <_malloc_r+0xdc>
 800c354:	2300      	movs	r3, #0
 800c356:	6053      	str	r3, [r2, #4]
 800c358:	e7de      	b.n	800c318 <_malloc_r+0xa8>
 800c35a:	230c      	movs	r3, #12
 800c35c:	6033      	str	r3, [r6, #0]
 800c35e:	4630      	mov	r0, r6
 800c360:	f000 f80c 	bl	800c37c <__malloc_unlock>
 800c364:	e794      	b.n	800c290 <_malloc_r+0x20>
 800c366:	6005      	str	r5, [r0, #0]
 800c368:	e7d6      	b.n	800c318 <_malloc_r+0xa8>
 800c36a:	bf00      	nop
 800c36c:	200026a8 	.word	0x200026a8

0800c370 <__malloc_lock>:
 800c370:	4801      	ldr	r0, [pc, #4]	@ (800c378 <__malloc_lock+0x8>)
 800c372:	f000 bfba 	b.w	800d2ea <__retarget_lock_acquire_recursive>
 800c376:	bf00      	nop
 800c378:	200027ec 	.word	0x200027ec

0800c37c <__malloc_unlock>:
 800c37c:	4801      	ldr	r0, [pc, #4]	@ (800c384 <__malloc_unlock+0x8>)
 800c37e:	f000 bfb5 	b.w	800d2ec <__retarget_lock_release_recursive>
 800c382:	bf00      	nop
 800c384:	200027ec 	.word	0x200027ec

0800c388 <sulp>:
 800c388:	b570      	push	{r4, r5, r6, lr}
 800c38a:	4604      	mov	r4, r0
 800c38c:	460d      	mov	r5, r1
 800c38e:	ec45 4b10 	vmov	d0, r4, r5
 800c392:	4616      	mov	r6, r2
 800c394:	f001 fece 	bl	800e134 <__ulp>
 800c398:	ec51 0b10 	vmov	r0, r1, d0
 800c39c:	b17e      	cbz	r6, 800c3be <sulp+0x36>
 800c39e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c3a2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	dd09      	ble.n	800c3be <sulp+0x36>
 800c3aa:	051b      	lsls	r3, r3, #20
 800c3ac:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c3b0:	2400      	movs	r4, #0
 800c3b2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c3b6:	4622      	mov	r2, r4
 800c3b8:	462b      	mov	r3, r5
 800c3ba:	f7f4 f935 	bl	8000628 <__aeabi_dmul>
 800c3be:	ec41 0b10 	vmov	d0, r0, r1
 800c3c2:	bd70      	pop	{r4, r5, r6, pc}
 800c3c4:	0000      	movs	r0, r0
	...

0800c3c8 <_strtod_l>:
 800c3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3cc:	b09f      	sub	sp, #124	@ 0x7c
 800c3ce:	460c      	mov	r4, r1
 800c3d0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	921a      	str	r2, [sp, #104]	@ 0x68
 800c3d6:	9005      	str	r0, [sp, #20]
 800c3d8:	f04f 0a00 	mov.w	sl, #0
 800c3dc:	f04f 0b00 	mov.w	fp, #0
 800c3e0:	460a      	mov	r2, r1
 800c3e2:	9219      	str	r2, [sp, #100]	@ 0x64
 800c3e4:	7811      	ldrb	r1, [r2, #0]
 800c3e6:	292b      	cmp	r1, #43	@ 0x2b
 800c3e8:	d04a      	beq.n	800c480 <_strtod_l+0xb8>
 800c3ea:	d838      	bhi.n	800c45e <_strtod_l+0x96>
 800c3ec:	290d      	cmp	r1, #13
 800c3ee:	d832      	bhi.n	800c456 <_strtod_l+0x8e>
 800c3f0:	2908      	cmp	r1, #8
 800c3f2:	d832      	bhi.n	800c45a <_strtod_l+0x92>
 800c3f4:	2900      	cmp	r1, #0
 800c3f6:	d03b      	beq.n	800c470 <_strtod_l+0xa8>
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c3fc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c3fe:	782a      	ldrb	r2, [r5, #0]
 800c400:	2a30      	cmp	r2, #48	@ 0x30
 800c402:	f040 80b3 	bne.w	800c56c <_strtod_l+0x1a4>
 800c406:	786a      	ldrb	r2, [r5, #1]
 800c408:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c40c:	2a58      	cmp	r2, #88	@ 0x58
 800c40e:	d16e      	bne.n	800c4ee <_strtod_l+0x126>
 800c410:	9302      	str	r3, [sp, #8]
 800c412:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c414:	9301      	str	r3, [sp, #4]
 800c416:	ab1a      	add	r3, sp, #104	@ 0x68
 800c418:	9300      	str	r3, [sp, #0]
 800c41a:	4a8e      	ldr	r2, [pc, #568]	@ (800c654 <_strtod_l+0x28c>)
 800c41c:	9805      	ldr	r0, [sp, #20]
 800c41e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c420:	a919      	add	r1, sp, #100	@ 0x64
 800c422:	f001 f82f 	bl	800d484 <__gethex>
 800c426:	f010 060f 	ands.w	r6, r0, #15
 800c42a:	4604      	mov	r4, r0
 800c42c:	d005      	beq.n	800c43a <_strtod_l+0x72>
 800c42e:	2e06      	cmp	r6, #6
 800c430:	d128      	bne.n	800c484 <_strtod_l+0xbc>
 800c432:	3501      	adds	r5, #1
 800c434:	2300      	movs	r3, #0
 800c436:	9519      	str	r5, [sp, #100]	@ 0x64
 800c438:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c43a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	f040 858e 	bne.w	800cf5e <_strtod_l+0xb96>
 800c442:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c444:	b1cb      	cbz	r3, 800c47a <_strtod_l+0xb2>
 800c446:	4652      	mov	r2, sl
 800c448:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c44c:	ec43 2b10 	vmov	d0, r2, r3
 800c450:	b01f      	add	sp, #124	@ 0x7c
 800c452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c456:	2920      	cmp	r1, #32
 800c458:	d1ce      	bne.n	800c3f8 <_strtod_l+0x30>
 800c45a:	3201      	adds	r2, #1
 800c45c:	e7c1      	b.n	800c3e2 <_strtod_l+0x1a>
 800c45e:	292d      	cmp	r1, #45	@ 0x2d
 800c460:	d1ca      	bne.n	800c3f8 <_strtod_l+0x30>
 800c462:	2101      	movs	r1, #1
 800c464:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c466:	1c51      	adds	r1, r2, #1
 800c468:	9119      	str	r1, [sp, #100]	@ 0x64
 800c46a:	7852      	ldrb	r2, [r2, #1]
 800c46c:	2a00      	cmp	r2, #0
 800c46e:	d1c5      	bne.n	800c3fc <_strtod_l+0x34>
 800c470:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c472:	9419      	str	r4, [sp, #100]	@ 0x64
 800c474:	2b00      	cmp	r3, #0
 800c476:	f040 8570 	bne.w	800cf5a <_strtod_l+0xb92>
 800c47a:	4652      	mov	r2, sl
 800c47c:	465b      	mov	r3, fp
 800c47e:	e7e5      	b.n	800c44c <_strtod_l+0x84>
 800c480:	2100      	movs	r1, #0
 800c482:	e7ef      	b.n	800c464 <_strtod_l+0x9c>
 800c484:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c486:	b13a      	cbz	r2, 800c498 <_strtod_l+0xd0>
 800c488:	2135      	movs	r1, #53	@ 0x35
 800c48a:	a81c      	add	r0, sp, #112	@ 0x70
 800c48c:	f001 ff4c 	bl	800e328 <__copybits>
 800c490:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c492:	9805      	ldr	r0, [sp, #20]
 800c494:	f001 fb1a 	bl	800dacc <_Bfree>
 800c498:	3e01      	subs	r6, #1
 800c49a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c49c:	2e04      	cmp	r6, #4
 800c49e:	d806      	bhi.n	800c4ae <_strtod_l+0xe6>
 800c4a0:	e8df f006 	tbb	[pc, r6]
 800c4a4:	201d0314 	.word	0x201d0314
 800c4a8:	14          	.byte	0x14
 800c4a9:	00          	.byte	0x00
 800c4aa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c4ae:	05e1      	lsls	r1, r4, #23
 800c4b0:	bf48      	it	mi
 800c4b2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c4b6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c4ba:	0d1b      	lsrs	r3, r3, #20
 800c4bc:	051b      	lsls	r3, r3, #20
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d1bb      	bne.n	800c43a <_strtod_l+0x72>
 800c4c2:	f000 fee7 	bl	800d294 <__errno>
 800c4c6:	2322      	movs	r3, #34	@ 0x22
 800c4c8:	6003      	str	r3, [r0, #0]
 800c4ca:	e7b6      	b.n	800c43a <_strtod_l+0x72>
 800c4cc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c4d0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c4d4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c4d8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c4dc:	e7e7      	b.n	800c4ae <_strtod_l+0xe6>
 800c4de:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800c65c <_strtod_l+0x294>
 800c4e2:	e7e4      	b.n	800c4ae <_strtod_l+0xe6>
 800c4e4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c4e8:	f04f 3aff 	mov.w	sl, #4294967295
 800c4ec:	e7df      	b.n	800c4ae <_strtod_l+0xe6>
 800c4ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c4f0:	1c5a      	adds	r2, r3, #1
 800c4f2:	9219      	str	r2, [sp, #100]	@ 0x64
 800c4f4:	785b      	ldrb	r3, [r3, #1]
 800c4f6:	2b30      	cmp	r3, #48	@ 0x30
 800c4f8:	d0f9      	beq.n	800c4ee <_strtod_l+0x126>
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d09d      	beq.n	800c43a <_strtod_l+0x72>
 800c4fe:	2301      	movs	r3, #1
 800c500:	9309      	str	r3, [sp, #36]	@ 0x24
 800c502:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c504:	930c      	str	r3, [sp, #48]	@ 0x30
 800c506:	2300      	movs	r3, #0
 800c508:	9308      	str	r3, [sp, #32]
 800c50a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c50c:	461f      	mov	r7, r3
 800c50e:	220a      	movs	r2, #10
 800c510:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c512:	7805      	ldrb	r5, [r0, #0]
 800c514:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c518:	b2d9      	uxtb	r1, r3
 800c51a:	2909      	cmp	r1, #9
 800c51c:	d928      	bls.n	800c570 <_strtod_l+0x1a8>
 800c51e:	494e      	ldr	r1, [pc, #312]	@ (800c658 <_strtod_l+0x290>)
 800c520:	2201      	movs	r2, #1
 800c522:	f000 fe4e 	bl	800d1c2 <strncmp>
 800c526:	2800      	cmp	r0, #0
 800c528:	d032      	beq.n	800c590 <_strtod_l+0x1c8>
 800c52a:	2000      	movs	r0, #0
 800c52c:	462a      	mov	r2, r5
 800c52e:	4681      	mov	r9, r0
 800c530:	463d      	mov	r5, r7
 800c532:	4603      	mov	r3, r0
 800c534:	2a65      	cmp	r2, #101	@ 0x65
 800c536:	d001      	beq.n	800c53c <_strtod_l+0x174>
 800c538:	2a45      	cmp	r2, #69	@ 0x45
 800c53a:	d114      	bne.n	800c566 <_strtod_l+0x19e>
 800c53c:	b91d      	cbnz	r5, 800c546 <_strtod_l+0x17e>
 800c53e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c540:	4302      	orrs	r2, r0
 800c542:	d095      	beq.n	800c470 <_strtod_l+0xa8>
 800c544:	2500      	movs	r5, #0
 800c546:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c548:	1c62      	adds	r2, r4, #1
 800c54a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c54c:	7862      	ldrb	r2, [r4, #1]
 800c54e:	2a2b      	cmp	r2, #43	@ 0x2b
 800c550:	d077      	beq.n	800c642 <_strtod_l+0x27a>
 800c552:	2a2d      	cmp	r2, #45	@ 0x2d
 800c554:	d07b      	beq.n	800c64e <_strtod_l+0x286>
 800c556:	f04f 0c00 	mov.w	ip, #0
 800c55a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c55e:	2909      	cmp	r1, #9
 800c560:	f240 8082 	bls.w	800c668 <_strtod_l+0x2a0>
 800c564:	9419      	str	r4, [sp, #100]	@ 0x64
 800c566:	f04f 0800 	mov.w	r8, #0
 800c56a:	e0a2      	b.n	800c6b2 <_strtod_l+0x2ea>
 800c56c:	2300      	movs	r3, #0
 800c56e:	e7c7      	b.n	800c500 <_strtod_l+0x138>
 800c570:	2f08      	cmp	r7, #8
 800c572:	bfd5      	itete	le
 800c574:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800c576:	9908      	ldrgt	r1, [sp, #32]
 800c578:	fb02 3301 	mlale	r3, r2, r1, r3
 800c57c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c580:	f100 0001 	add.w	r0, r0, #1
 800c584:	bfd4      	ite	le
 800c586:	930a      	strle	r3, [sp, #40]	@ 0x28
 800c588:	9308      	strgt	r3, [sp, #32]
 800c58a:	3701      	adds	r7, #1
 800c58c:	9019      	str	r0, [sp, #100]	@ 0x64
 800c58e:	e7bf      	b.n	800c510 <_strtod_l+0x148>
 800c590:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c592:	1c5a      	adds	r2, r3, #1
 800c594:	9219      	str	r2, [sp, #100]	@ 0x64
 800c596:	785a      	ldrb	r2, [r3, #1]
 800c598:	b37f      	cbz	r7, 800c5fa <_strtod_l+0x232>
 800c59a:	4681      	mov	r9, r0
 800c59c:	463d      	mov	r5, r7
 800c59e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c5a2:	2b09      	cmp	r3, #9
 800c5a4:	d912      	bls.n	800c5cc <_strtod_l+0x204>
 800c5a6:	2301      	movs	r3, #1
 800c5a8:	e7c4      	b.n	800c534 <_strtod_l+0x16c>
 800c5aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c5ac:	1c5a      	adds	r2, r3, #1
 800c5ae:	9219      	str	r2, [sp, #100]	@ 0x64
 800c5b0:	785a      	ldrb	r2, [r3, #1]
 800c5b2:	3001      	adds	r0, #1
 800c5b4:	2a30      	cmp	r2, #48	@ 0x30
 800c5b6:	d0f8      	beq.n	800c5aa <_strtod_l+0x1e2>
 800c5b8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c5bc:	2b08      	cmp	r3, #8
 800c5be:	f200 84d3 	bhi.w	800cf68 <_strtod_l+0xba0>
 800c5c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c5c4:	930c      	str	r3, [sp, #48]	@ 0x30
 800c5c6:	4681      	mov	r9, r0
 800c5c8:	2000      	movs	r0, #0
 800c5ca:	4605      	mov	r5, r0
 800c5cc:	3a30      	subs	r2, #48	@ 0x30
 800c5ce:	f100 0301 	add.w	r3, r0, #1
 800c5d2:	d02a      	beq.n	800c62a <_strtod_l+0x262>
 800c5d4:	4499      	add	r9, r3
 800c5d6:	eb00 0c05 	add.w	ip, r0, r5
 800c5da:	462b      	mov	r3, r5
 800c5dc:	210a      	movs	r1, #10
 800c5de:	4563      	cmp	r3, ip
 800c5e0:	d10d      	bne.n	800c5fe <_strtod_l+0x236>
 800c5e2:	1c69      	adds	r1, r5, #1
 800c5e4:	4401      	add	r1, r0
 800c5e6:	4428      	add	r0, r5
 800c5e8:	2808      	cmp	r0, #8
 800c5ea:	dc16      	bgt.n	800c61a <_strtod_l+0x252>
 800c5ec:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c5ee:	230a      	movs	r3, #10
 800c5f0:	fb03 2300 	mla	r3, r3, r0, r2
 800c5f4:	930a      	str	r3, [sp, #40]	@ 0x28
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	e018      	b.n	800c62c <_strtod_l+0x264>
 800c5fa:	4638      	mov	r0, r7
 800c5fc:	e7da      	b.n	800c5b4 <_strtod_l+0x1ec>
 800c5fe:	2b08      	cmp	r3, #8
 800c600:	f103 0301 	add.w	r3, r3, #1
 800c604:	dc03      	bgt.n	800c60e <_strtod_l+0x246>
 800c606:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800c608:	434e      	muls	r6, r1
 800c60a:	960a      	str	r6, [sp, #40]	@ 0x28
 800c60c:	e7e7      	b.n	800c5de <_strtod_l+0x216>
 800c60e:	2b10      	cmp	r3, #16
 800c610:	bfde      	ittt	le
 800c612:	9e08      	ldrle	r6, [sp, #32]
 800c614:	434e      	mulle	r6, r1
 800c616:	9608      	strle	r6, [sp, #32]
 800c618:	e7e1      	b.n	800c5de <_strtod_l+0x216>
 800c61a:	280f      	cmp	r0, #15
 800c61c:	dceb      	bgt.n	800c5f6 <_strtod_l+0x22e>
 800c61e:	9808      	ldr	r0, [sp, #32]
 800c620:	230a      	movs	r3, #10
 800c622:	fb03 2300 	mla	r3, r3, r0, r2
 800c626:	9308      	str	r3, [sp, #32]
 800c628:	e7e5      	b.n	800c5f6 <_strtod_l+0x22e>
 800c62a:	4629      	mov	r1, r5
 800c62c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c62e:	1c50      	adds	r0, r2, #1
 800c630:	9019      	str	r0, [sp, #100]	@ 0x64
 800c632:	7852      	ldrb	r2, [r2, #1]
 800c634:	4618      	mov	r0, r3
 800c636:	460d      	mov	r5, r1
 800c638:	e7b1      	b.n	800c59e <_strtod_l+0x1d6>
 800c63a:	f04f 0900 	mov.w	r9, #0
 800c63e:	2301      	movs	r3, #1
 800c640:	e77d      	b.n	800c53e <_strtod_l+0x176>
 800c642:	f04f 0c00 	mov.w	ip, #0
 800c646:	1ca2      	adds	r2, r4, #2
 800c648:	9219      	str	r2, [sp, #100]	@ 0x64
 800c64a:	78a2      	ldrb	r2, [r4, #2]
 800c64c:	e785      	b.n	800c55a <_strtod_l+0x192>
 800c64e:	f04f 0c01 	mov.w	ip, #1
 800c652:	e7f8      	b.n	800c646 <_strtod_l+0x27e>
 800c654:	080100b4 	.word	0x080100b4
 800c658:	08010090 	.word	0x08010090
 800c65c:	7ff00000 	.word	0x7ff00000
 800c660:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c662:	1c51      	adds	r1, r2, #1
 800c664:	9119      	str	r1, [sp, #100]	@ 0x64
 800c666:	7852      	ldrb	r2, [r2, #1]
 800c668:	2a30      	cmp	r2, #48	@ 0x30
 800c66a:	d0f9      	beq.n	800c660 <_strtod_l+0x298>
 800c66c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c670:	2908      	cmp	r1, #8
 800c672:	f63f af78 	bhi.w	800c566 <_strtod_l+0x19e>
 800c676:	3a30      	subs	r2, #48	@ 0x30
 800c678:	920e      	str	r2, [sp, #56]	@ 0x38
 800c67a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c67c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c67e:	f04f 080a 	mov.w	r8, #10
 800c682:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c684:	1c56      	adds	r6, r2, #1
 800c686:	9619      	str	r6, [sp, #100]	@ 0x64
 800c688:	7852      	ldrb	r2, [r2, #1]
 800c68a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c68e:	f1be 0f09 	cmp.w	lr, #9
 800c692:	d939      	bls.n	800c708 <_strtod_l+0x340>
 800c694:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c696:	1a76      	subs	r6, r6, r1
 800c698:	2e08      	cmp	r6, #8
 800c69a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800c69e:	dc03      	bgt.n	800c6a8 <_strtod_l+0x2e0>
 800c6a0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c6a2:	4588      	cmp	r8, r1
 800c6a4:	bfa8      	it	ge
 800c6a6:	4688      	movge	r8, r1
 800c6a8:	f1bc 0f00 	cmp.w	ip, #0
 800c6ac:	d001      	beq.n	800c6b2 <_strtod_l+0x2ea>
 800c6ae:	f1c8 0800 	rsb	r8, r8, #0
 800c6b2:	2d00      	cmp	r5, #0
 800c6b4:	d14e      	bne.n	800c754 <_strtod_l+0x38c>
 800c6b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c6b8:	4308      	orrs	r0, r1
 800c6ba:	f47f aebe 	bne.w	800c43a <_strtod_l+0x72>
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	f47f aed6 	bne.w	800c470 <_strtod_l+0xa8>
 800c6c4:	2a69      	cmp	r2, #105	@ 0x69
 800c6c6:	d028      	beq.n	800c71a <_strtod_l+0x352>
 800c6c8:	dc25      	bgt.n	800c716 <_strtod_l+0x34e>
 800c6ca:	2a49      	cmp	r2, #73	@ 0x49
 800c6cc:	d025      	beq.n	800c71a <_strtod_l+0x352>
 800c6ce:	2a4e      	cmp	r2, #78	@ 0x4e
 800c6d0:	f47f aece 	bne.w	800c470 <_strtod_l+0xa8>
 800c6d4:	499b      	ldr	r1, [pc, #620]	@ (800c944 <_strtod_l+0x57c>)
 800c6d6:	a819      	add	r0, sp, #100	@ 0x64
 800c6d8:	f001 f8f6 	bl	800d8c8 <__match>
 800c6dc:	2800      	cmp	r0, #0
 800c6de:	f43f aec7 	beq.w	800c470 <_strtod_l+0xa8>
 800c6e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c6e4:	781b      	ldrb	r3, [r3, #0]
 800c6e6:	2b28      	cmp	r3, #40	@ 0x28
 800c6e8:	d12e      	bne.n	800c748 <_strtod_l+0x380>
 800c6ea:	4997      	ldr	r1, [pc, #604]	@ (800c948 <_strtod_l+0x580>)
 800c6ec:	aa1c      	add	r2, sp, #112	@ 0x70
 800c6ee:	a819      	add	r0, sp, #100	@ 0x64
 800c6f0:	f001 f8fe 	bl	800d8f0 <__hexnan>
 800c6f4:	2805      	cmp	r0, #5
 800c6f6:	d127      	bne.n	800c748 <_strtod_l+0x380>
 800c6f8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c6fa:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800c6fe:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c702:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c706:	e698      	b.n	800c43a <_strtod_l+0x72>
 800c708:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c70a:	fb08 2101 	mla	r1, r8, r1, r2
 800c70e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800c712:	920e      	str	r2, [sp, #56]	@ 0x38
 800c714:	e7b5      	b.n	800c682 <_strtod_l+0x2ba>
 800c716:	2a6e      	cmp	r2, #110	@ 0x6e
 800c718:	e7da      	b.n	800c6d0 <_strtod_l+0x308>
 800c71a:	498c      	ldr	r1, [pc, #560]	@ (800c94c <_strtod_l+0x584>)
 800c71c:	a819      	add	r0, sp, #100	@ 0x64
 800c71e:	f001 f8d3 	bl	800d8c8 <__match>
 800c722:	2800      	cmp	r0, #0
 800c724:	f43f aea4 	beq.w	800c470 <_strtod_l+0xa8>
 800c728:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c72a:	4989      	ldr	r1, [pc, #548]	@ (800c950 <_strtod_l+0x588>)
 800c72c:	3b01      	subs	r3, #1
 800c72e:	a819      	add	r0, sp, #100	@ 0x64
 800c730:	9319      	str	r3, [sp, #100]	@ 0x64
 800c732:	f001 f8c9 	bl	800d8c8 <__match>
 800c736:	b910      	cbnz	r0, 800c73e <_strtod_l+0x376>
 800c738:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c73a:	3301      	adds	r3, #1
 800c73c:	9319      	str	r3, [sp, #100]	@ 0x64
 800c73e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800c960 <_strtod_l+0x598>
 800c742:	f04f 0a00 	mov.w	sl, #0
 800c746:	e678      	b.n	800c43a <_strtod_l+0x72>
 800c748:	4882      	ldr	r0, [pc, #520]	@ (800c954 <_strtod_l+0x58c>)
 800c74a:	f000 fde1 	bl	800d310 <nan>
 800c74e:	ec5b ab10 	vmov	sl, fp, d0
 800c752:	e672      	b.n	800c43a <_strtod_l+0x72>
 800c754:	eba8 0309 	sub.w	r3, r8, r9
 800c758:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c75a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c75c:	2f00      	cmp	r7, #0
 800c75e:	bf08      	it	eq
 800c760:	462f      	moveq	r7, r5
 800c762:	2d10      	cmp	r5, #16
 800c764:	462c      	mov	r4, r5
 800c766:	bfa8      	it	ge
 800c768:	2410      	movge	r4, #16
 800c76a:	f7f3 fee3 	bl	8000534 <__aeabi_ui2d>
 800c76e:	2d09      	cmp	r5, #9
 800c770:	4682      	mov	sl, r0
 800c772:	468b      	mov	fp, r1
 800c774:	dc13      	bgt.n	800c79e <_strtod_l+0x3d6>
 800c776:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c778:	2b00      	cmp	r3, #0
 800c77a:	f43f ae5e 	beq.w	800c43a <_strtod_l+0x72>
 800c77e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c780:	dd78      	ble.n	800c874 <_strtod_l+0x4ac>
 800c782:	2b16      	cmp	r3, #22
 800c784:	dc5f      	bgt.n	800c846 <_strtod_l+0x47e>
 800c786:	4974      	ldr	r1, [pc, #464]	@ (800c958 <_strtod_l+0x590>)
 800c788:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c78c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c790:	4652      	mov	r2, sl
 800c792:	465b      	mov	r3, fp
 800c794:	f7f3 ff48 	bl	8000628 <__aeabi_dmul>
 800c798:	4682      	mov	sl, r0
 800c79a:	468b      	mov	fp, r1
 800c79c:	e64d      	b.n	800c43a <_strtod_l+0x72>
 800c79e:	4b6e      	ldr	r3, [pc, #440]	@ (800c958 <_strtod_l+0x590>)
 800c7a0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c7a4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800c7a8:	f7f3 ff3e 	bl	8000628 <__aeabi_dmul>
 800c7ac:	4682      	mov	sl, r0
 800c7ae:	9808      	ldr	r0, [sp, #32]
 800c7b0:	468b      	mov	fp, r1
 800c7b2:	f7f3 febf 	bl	8000534 <__aeabi_ui2d>
 800c7b6:	4602      	mov	r2, r0
 800c7b8:	460b      	mov	r3, r1
 800c7ba:	4650      	mov	r0, sl
 800c7bc:	4659      	mov	r1, fp
 800c7be:	f7f3 fd7d 	bl	80002bc <__adddf3>
 800c7c2:	2d0f      	cmp	r5, #15
 800c7c4:	4682      	mov	sl, r0
 800c7c6:	468b      	mov	fp, r1
 800c7c8:	ddd5      	ble.n	800c776 <_strtod_l+0x3ae>
 800c7ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7cc:	1b2c      	subs	r4, r5, r4
 800c7ce:	441c      	add	r4, r3
 800c7d0:	2c00      	cmp	r4, #0
 800c7d2:	f340 8096 	ble.w	800c902 <_strtod_l+0x53a>
 800c7d6:	f014 030f 	ands.w	r3, r4, #15
 800c7da:	d00a      	beq.n	800c7f2 <_strtod_l+0x42a>
 800c7dc:	495e      	ldr	r1, [pc, #376]	@ (800c958 <_strtod_l+0x590>)
 800c7de:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c7e2:	4652      	mov	r2, sl
 800c7e4:	465b      	mov	r3, fp
 800c7e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7ea:	f7f3 ff1d 	bl	8000628 <__aeabi_dmul>
 800c7ee:	4682      	mov	sl, r0
 800c7f0:	468b      	mov	fp, r1
 800c7f2:	f034 040f 	bics.w	r4, r4, #15
 800c7f6:	d073      	beq.n	800c8e0 <_strtod_l+0x518>
 800c7f8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800c7fc:	dd48      	ble.n	800c890 <_strtod_l+0x4c8>
 800c7fe:	2400      	movs	r4, #0
 800c800:	46a0      	mov	r8, r4
 800c802:	940a      	str	r4, [sp, #40]	@ 0x28
 800c804:	46a1      	mov	r9, r4
 800c806:	9a05      	ldr	r2, [sp, #20]
 800c808:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800c960 <_strtod_l+0x598>
 800c80c:	2322      	movs	r3, #34	@ 0x22
 800c80e:	6013      	str	r3, [r2, #0]
 800c810:	f04f 0a00 	mov.w	sl, #0
 800c814:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c816:	2b00      	cmp	r3, #0
 800c818:	f43f ae0f 	beq.w	800c43a <_strtod_l+0x72>
 800c81c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c81e:	9805      	ldr	r0, [sp, #20]
 800c820:	f001 f954 	bl	800dacc <_Bfree>
 800c824:	9805      	ldr	r0, [sp, #20]
 800c826:	4649      	mov	r1, r9
 800c828:	f001 f950 	bl	800dacc <_Bfree>
 800c82c:	9805      	ldr	r0, [sp, #20]
 800c82e:	4641      	mov	r1, r8
 800c830:	f001 f94c 	bl	800dacc <_Bfree>
 800c834:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c836:	9805      	ldr	r0, [sp, #20]
 800c838:	f001 f948 	bl	800dacc <_Bfree>
 800c83c:	9805      	ldr	r0, [sp, #20]
 800c83e:	4621      	mov	r1, r4
 800c840:	f001 f944 	bl	800dacc <_Bfree>
 800c844:	e5f9      	b.n	800c43a <_strtod_l+0x72>
 800c846:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c848:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800c84c:	4293      	cmp	r3, r2
 800c84e:	dbbc      	blt.n	800c7ca <_strtod_l+0x402>
 800c850:	4c41      	ldr	r4, [pc, #260]	@ (800c958 <_strtod_l+0x590>)
 800c852:	f1c5 050f 	rsb	r5, r5, #15
 800c856:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c85a:	4652      	mov	r2, sl
 800c85c:	465b      	mov	r3, fp
 800c85e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c862:	f7f3 fee1 	bl	8000628 <__aeabi_dmul>
 800c866:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c868:	1b5d      	subs	r5, r3, r5
 800c86a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c86e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c872:	e78f      	b.n	800c794 <_strtod_l+0x3cc>
 800c874:	3316      	adds	r3, #22
 800c876:	dba8      	blt.n	800c7ca <_strtod_l+0x402>
 800c878:	4b37      	ldr	r3, [pc, #220]	@ (800c958 <_strtod_l+0x590>)
 800c87a:	eba9 0808 	sub.w	r8, r9, r8
 800c87e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800c882:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c886:	4650      	mov	r0, sl
 800c888:	4659      	mov	r1, fp
 800c88a:	f7f3 fff7 	bl	800087c <__aeabi_ddiv>
 800c88e:	e783      	b.n	800c798 <_strtod_l+0x3d0>
 800c890:	4b32      	ldr	r3, [pc, #200]	@ (800c95c <_strtod_l+0x594>)
 800c892:	9308      	str	r3, [sp, #32]
 800c894:	2300      	movs	r3, #0
 800c896:	1124      	asrs	r4, r4, #4
 800c898:	4650      	mov	r0, sl
 800c89a:	4659      	mov	r1, fp
 800c89c:	461e      	mov	r6, r3
 800c89e:	2c01      	cmp	r4, #1
 800c8a0:	dc21      	bgt.n	800c8e6 <_strtod_l+0x51e>
 800c8a2:	b10b      	cbz	r3, 800c8a8 <_strtod_l+0x4e0>
 800c8a4:	4682      	mov	sl, r0
 800c8a6:	468b      	mov	fp, r1
 800c8a8:	492c      	ldr	r1, [pc, #176]	@ (800c95c <_strtod_l+0x594>)
 800c8aa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c8ae:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800c8b2:	4652      	mov	r2, sl
 800c8b4:	465b      	mov	r3, fp
 800c8b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8ba:	f7f3 feb5 	bl	8000628 <__aeabi_dmul>
 800c8be:	4b28      	ldr	r3, [pc, #160]	@ (800c960 <_strtod_l+0x598>)
 800c8c0:	460a      	mov	r2, r1
 800c8c2:	400b      	ands	r3, r1
 800c8c4:	4927      	ldr	r1, [pc, #156]	@ (800c964 <_strtod_l+0x59c>)
 800c8c6:	428b      	cmp	r3, r1
 800c8c8:	4682      	mov	sl, r0
 800c8ca:	d898      	bhi.n	800c7fe <_strtod_l+0x436>
 800c8cc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800c8d0:	428b      	cmp	r3, r1
 800c8d2:	bf86      	itte	hi
 800c8d4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800c968 <_strtod_l+0x5a0>
 800c8d8:	f04f 3aff 	movhi.w	sl, #4294967295
 800c8dc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	9308      	str	r3, [sp, #32]
 800c8e4:	e07a      	b.n	800c9dc <_strtod_l+0x614>
 800c8e6:	07e2      	lsls	r2, r4, #31
 800c8e8:	d505      	bpl.n	800c8f6 <_strtod_l+0x52e>
 800c8ea:	9b08      	ldr	r3, [sp, #32]
 800c8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f0:	f7f3 fe9a 	bl	8000628 <__aeabi_dmul>
 800c8f4:	2301      	movs	r3, #1
 800c8f6:	9a08      	ldr	r2, [sp, #32]
 800c8f8:	3208      	adds	r2, #8
 800c8fa:	3601      	adds	r6, #1
 800c8fc:	1064      	asrs	r4, r4, #1
 800c8fe:	9208      	str	r2, [sp, #32]
 800c900:	e7cd      	b.n	800c89e <_strtod_l+0x4d6>
 800c902:	d0ed      	beq.n	800c8e0 <_strtod_l+0x518>
 800c904:	4264      	negs	r4, r4
 800c906:	f014 020f 	ands.w	r2, r4, #15
 800c90a:	d00a      	beq.n	800c922 <_strtod_l+0x55a>
 800c90c:	4b12      	ldr	r3, [pc, #72]	@ (800c958 <_strtod_l+0x590>)
 800c90e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c912:	4650      	mov	r0, sl
 800c914:	4659      	mov	r1, fp
 800c916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c91a:	f7f3 ffaf 	bl	800087c <__aeabi_ddiv>
 800c91e:	4682      	mov	sl, r0
 800c920:	468b      	mov	fp, r1
 800c922:	1124      	asrs	r4, r4, #4
 800c924:	d0dc      	beq.n	800c8e0 <_strtod_l+0x518>
 800c926:	2c1f      	cmp	r4, #31
 800c928:	dd20      	ble.n	800c96c <_strtod_l+0x5a4>
 800c92a:	2400      	movs	r4, #0
 800c92c:	46a0      	mov	r8, r4
 800c92e:	940a      	str	r4, [sp, #40]	@ 0x28
 800c930:	46a1      	mov	r9, r4
 800c932:	9a05      	ldr	r2, [sp, #20]
 800c934:	2322      	movs	r3, #34	@ 0x22
 800c936:	f04f 0a00 	mov.w	sl, #0
 800c93a:	f04f 0b00 	mov.w	fp, #0
 800c93e:	6013      	str	r3, [r2, #0]
 800c940:	e768      	b.n	800c814 <_strtod_l+0x44c>
 800c942:	bf00      	nop
 800c944:	0801009b 	.word	0x0801009b
 800c948:	080100a0 	.word	0x080100a0
 800c94c:	08010092 	.word	0x08010092
 800c950:	08010095 	.word	0x08010095
 800c954:	08010414 	.word	0x08010414
 800c958:	08010210 	.word	0x08010210
 800c95c:	080101e8 	.word	0x080101e8
 800c960:	7ff00000 	.word	0x7ff00000
 800c964:	7ca00000 	.word	0x7ca00000
 800c968:	7fefffff 	.word	0x7fefffff
 800c96c:	f014 0310 	ands.w	r3, r4, #16
 800c970:	bf18      	it	ne
 800c972:	236a      	movne	r3, #106	@ 0x6a
 800c974:	4ea9      	ldr	r6, [pc, #676]	@ (800cc1c <_strtod_l+0x854>)
 800c976:	9308      	str	r3, [sp, #32]
 800c978:	4650      	mov	r0, sl
 800c97a:	4659      	mov	r1, fp
 800c97c:	2300      	movs	r3, #0
 800c97e:	07e2      	lsls	r2, r4, #31
 800c980:	d504      	bpl.n	800c98c <_strtod_l+0x5c4>
 800c982:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c986:	f7f3 fe4f 	bl	8000628 <__aeabi_dmul>
 800c98a:	2301      	movs	r3, #1
 800c98c:	1064      	asrs	r4, r4, #1
 800c98e:	f106 0608 	add.w	r6, r6, #8
 800c992:	d1f4      	bne.n	800c97e <_strtod_l+0x5b6>
 800c994:	b10b      	cbz	r3, 800c99a <_strtod_l+0x5d2>
 800c996:	4682      	mov	sl, r0
 800c998:	468b      	mov	fp, r1
 800c99a:	9b08      	ldr	r3, [sp, #32]
 800c99c:	b1b3      	cbz	r3, 800c9cc <_strtod_l+0x604>
 800c99e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c9a2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	4659      	mov	r1, fp
 800c9aa:	dd0f      	ble.n	800c9cc <_strtod_l+0x604>
 800c9ac:	2b1f      	cmp	r3, #31
 800c9ae:	dd55      	ble.n	800ca5c <_strtod_l+0x694>
 800c9b0:	2b34      	cmp	r3, #52	@ 0x34
 800c9b2:	bfde      	ittt	le
 800c9b4:	f04f 33ff 	movle.w	r3, #4294967295
 800c9b8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800c9bc:	4093      	lslle	r3, r2
 800c9be:	f04f 0a00 	mov.w	sl, #0
 800c9c2:	bfcc      	ite	gt
 800c9c4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800c9c8:	ea03 0b01 	andle.w	fp, r3, r1
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	4650      	mov	r0, sl
 800c9d2:	4659      	mov	r1, fp
 800c9d4:	f7f4 f890 	bl	8000af8 <__aeabi_dcmpeq>
 800c9d8:	2800      	cmp	r0, #0
 800c9da:	d1a6      	bne.n	800c92a <_strtod_l+0x562>
 800c9dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c9de:	9300      	str	r3, [sp, #0]
 800c9e0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c9e2:	9805      	ldr	r0, [sp, #20]
 800c9e4:	462b      	mov	r3, r5
 800c9e6:	463a      	mov	r2, r7
 800c9e8:	f001 f8d8 	bl	800db9c <__s2b>
 800c9ec:	900a      	str	r0, [sp, #40]	@ 0x28
 800c9ee:	2800      	cmp	r0, #0
 800c9f0:	f43f af05 	beq.w	800c7fe <_strtod_l+0x436>
 800c9f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c9f6:	2a00      	cmp	r2, #0
 800c9f8:	eba9 0308 	sub.w	r3, r9, r8
 800c9fc:	bfa8      	it	ge
 800c9fe:	2300      	movge	r3, #0
 800ca00:	9312      	str	r3, [sp, #72]	@ 0x48
 800ca02:	2400      	movs	r4, #0
 800ca04:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ca08:	9316      	str	r3, [sp, #88]	@ 0x58
 800ca0a:	46a0      	mov	r8, r4
 800ca0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ca0e:	9805      	ldr	r0, [sp, #20]
 800ca10:	6859      	ldr	r1, [r3, #4]
 800ca12:	f001 f81b 	bl	800da4c <_Balloc>
 800ca16:	4681      	mov	r9, r0
 800ca18:	2800      	cmp	r0, #0
 800ca1a:	f43f aef4 	beq.w	800c806 <_strtod_l+0x43e>
 800ca1e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ca20:	691a      	ldr	r2, [r3, #16]
 800ca22:	3202      	adds	r2, #2
 800ca24:	f103 010c 	add.w	r1, r3, #12
 800ca28:	0092      	lsls	r2, r2, #2
 800ca2a:	300c      	adds	r0, #12
 800ca2c:	f000 fc5f 	bl	800d2ee <memcpy>
 800ca30:	ec4b ab10 	vmov	d0, sl, fp
 800ca34:	9805      	ldr	r0, [sp, #20]
 800ca36:	aa1c      	add	r2, sp, #112	@ 0x70
 800ca38:	a91b      	add	r1, sp, #108	@ 0x6c
 800ca3a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800ca3e:	f001 fbe9 	bl	800e214 <__d2b>
 800ca42:	901a      	str	r0, [sp, #104]	@ 0x68
 800ca44:	2800      	cmp	r0, #0
 800ca46:	f43f aede 	beq.w	800c806 <_strtod_l+0x43e>
 800ca4a:	9805      	ldr	r0, [sp, #20]
 800ca4c:	2101      	movs	r1, #1
 800ca4e:	f001 f93b 	bl	800dcc8 <__i2b>
 800ca52:	4680      	mov	r8, r0
 800ca54:	b948      	cbnz	r0, 800ca6a <_strtod_l+0x6a2>
 800ca56:	f04f 0800 	mov.w	r8, #0
 800ca5a:	e6d4      	b.n	800c806 <_strtod_l+0x43e>
 800ca5c:	f04f 32ff 	mov.w	r2, #4294967295
 800ca60:	fa02 f303 	lsl.w	r3, r2, r3
 800ca64:	ea03 0a0a 	and.w	sl, r3, sl
 800ca68:	e7b0      	b.n	800c9cc <_strtod_l+0x604>
 800ca6a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800ca6c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800ca6e:	2d00      	cmp	r5, #0
 800ca70:	bfab      	itete	ge
 800ca72:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800ca74:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800ca76:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800ca78:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800ca7a:	bfac      	ite	ge
 800ca7c:	18ef      	addge	r7, r5, r3
 800ca7e:	1b5e      	sublt	r6, r3, r5
 800ca80:	9b08      	ldr	r3, [sp, #32]
 800ca82:	1aed      	subs	r5, r5, r3
 800ca84:	4415      	add	r5, r2
 800ca86:	4b66      	ldr	r3, [pc, #408]	@ (800cc20 <_strtod_l+0x858>)
 800ca88:	3d01      	subs	r5, #1
 800ca8a:	429d      	cmp	r5, r3
 800ca8c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ca90:	da50      	bge.n	800cb34 <_strtod_l+0x76c>
 800ca92:	1b5b      	subs	r3, r3, r5
 800ca94:	2b1f      	cmp	r3, #31
 800ca96:	eba2 0203 	sub.w	r2, r2, r3
 800ca9a:	f04f 0101 	mov.w	r1, #1
 800ca9e:	dc3d      	bgt.n	800cb1c <_strtod_l+0x754>
 800caa0:	fa01 f303 	lsl.w	r3, r1, r3
 800caa4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800caa6:	2300      	movs	r3, #0
 800caa8:	9310      	str	r3, [sp, #64]	@ 0x40
 800caaa:	18bd      	adds	r5, r7, r2
 800caac:	9b08      	ldr	r3, [sp, #32]
 800caae:	42af      	cmp	r7, r5
 800cab0:	4416      	add	r6, r2
 800cab2:	441e      	add	r6, r3
 800cab4:	463b      	mov	r3, r7
 800cab6:	bfa8      	it	ge
 800cab8:	462b      	movge	r3, r5
 800caba:	42b3      	cmp	r3, r6
 800cabc:	bfa8      	it	ge
 800cabe:	4633      	movge	r3, r6
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	bfc2      	ittt	gt
 800cac4:	1aed      	subgt	r5, r5, r3
 800cac6:	1af6      	subgt	r6, r6, r3
 800cac8:	1aff      	subgt	r7, r7, r3
 800caca:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cacc:	2b00      	cmp	r3, #0
 800cace:	dd16      	ble.n	800cafe <_strtod_l+0x736>
 800cad0:	4641      	mov	r1, r8
 800cad2:	9805      	ldr	r0, [sp, #20]
 800cad4:	461a      	mov	r2, r3
 800cad6:	f001 f9b7 	bl	800de48 <__pow5mult>
 800cada:	4680      	mov	r8, r0
 800cadc:	2800      	cmp	r0, #0
 800cade:	d0ba      	beq.n	800ca56 <_strtod_l+0x68e>
 800cae0:	4601      	mov	r1, r0
 800cae2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cae4:	9805      	ldr	r0, [sp, #20]
 800cae6:	f001 f905 	bl	800dcf4 <__multiply>
 800caea:	900e      	str	r0, [sp, #56]	@ 0x38
 800caec:	2800      	cmp	r0, #0
 800caee:	f43f ae8a 	beq.w	800c806 <_strtod_l+0x43e>
 800caf2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800caf4:	9805      	ldr	r0, [sp, #20]
 800caf6:	f000 ffe9 	bl	800dacc <_Bfree>
 800cafa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cafc:	931a      	str	r3, [sp, #104]	@ 0x68
 800cafe:	2d00      	cmp	r5, #0
 800cb00:	dc1d      	bgt.n	800cb3e <_strtod_l+0x776>
 800cb02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	dd23      	ble.n	800cb50 <_strtod_l+0x788>
 800cb08:	4649      	mov	r1, r9
 800cb0a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800cb0c:	9805      	ldr	r0, [sp, #20]
 800cb0e:	f001 f99b 	bl	800de48 <__pow5mult>
 800cb12:	4681      	mov	r9, r0
 800cb14:	b9e0      	cbnz	r0, 800cb50 <_strtod_l+0x788>
 800cb16:	f04f 0900 	mov.w	r9, #0
 800cb1a:	e674      	b.n	800c806 <_strtod_l+0x43e>
 800cb1c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800cb20:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800cb24:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800cb28:	35e2      	adds	r5, #226	@ 0xe2
 800cb2a:	fa01 f305 	lsl.w	r3, r1, r5
 800cb2e:	9310      	str	r3, [sp, #64]	@ 0x40
 800cb30:	9113      	str	r1, [sp, #76]	@ 0x4c
 800cb32:	e7ba      	b.n	800caaa <_strtod_l+0x6e2>
 800cb34:	2300      	movs	r3, #0
 800cb36:	9310      	str	r3, [sp, #64]	@ 0x40
 800cb38:	2301      	movs	r3, #1
 800cb3a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cb3c:	e7b5      	b.n	800caaa <_strtod_l+0x6e2>
 800cb3e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cb40:	9805      	ldr	r0, [sp, #20]
 800cb42:	462a      	mov	r2, r5
 800cb44:	f001 f9da 	bl	800defc <__lshift>
 800cb48:	901a      	str	r0, [sp, #104]	@ 0x68
 800cb4a:	2800      	cmp	r0, #0
 800cb4c:	d1d9      	bne.n	800cb02 <_strtod_l+0x73a>
 800cb4e:	e65a      	b.n	800c806 <_strtod_l+0x43e>
 800cb50:	2e00      	cmp	r6, #0
 800cb52:	dd07      	ble.n	800cb64 <_strtod_l+0x79c>
 800cb54:	4649      	mov	r1, r9
 800cb56:	9805      	ldr	r0, [sp, #20]
 800cb58:	4632      	mov	r2, r6
 800cb5a:	f001 f9cf 	bl	800defc <__lshift>
 800cb5e:	4681      	mov	r9, r0
 800cb60:	2800      	cmp	r0, #0
 800cb62:	d0d8      	beq.n	800cb16 <_strtod_l+0x74e>
 800cb64:	2f00      	cmp	r7, #0
 800cb66:	dd08      	ble.n	800cb7a <_strtod_l+0x7b2>
 800cb68:	4641      	mov	r1, r8
 800cb6a:	9805      	ldr	r0, [sp, #20]
 800cb6c:	463a      	mov	r2, r7
 800cb6e:	f001 f9c5 	bl	800defc <__lshift>
 800cb72:	4680      	mov	r8, r0
 800cb74:	2800      	cmp	r0, #0
 800cb76:	f43f ae46 	beq.w	800c806 <_strtod_l+0x43e>
 800cb7a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cb7c:	9805      	ldr	r0, [sp, #20]
 800cb7e:	464a      	mov	r2, r9
 800cb80:	f001 fa44 	bl	800e00c <__mdiff>
 800cb84:	4604      	mov	r4, r0
 800cb86:	2800      	cmp	r0, #0
 800cb88:	f43f ae3d 	beq.w	800c806 <_strtod_l+0x43e>
 800cb8c:	68c3      	ldr	r3, [r0, #12]
 800cb8e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cb90:	2300      	movs	r3, #0
 800cb92:	60c3      	str	r3, [r0, #12]
 800cb94:	4641      	mov	r1, r8
 800cb96:	f001 fa1d 	bl	800dfd4 <__mcmp>
 800cb9a:	2800      	cmp	r0, #0
 800cb9c:	da46      	bge.n	800cc2c <_strtod_l+0x864>
 800cb9e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cba0:	ea53 030a 	orrs.w	r3, r3, sl
 800cba4:	d16c      	bne.n	800cc80 <_strtod_l+0x8b8>
 800cba6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d168      	bne.n	800cc80 <_strtod_l+0x8b8>
 800cbae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cbb2:	0d1b      	lsrs	r3, r3, #20
 800cbb4:	051b      	lsls	r3, r3, #20
 800cbb6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800cbba:	d961      	bls.n	800cc80 <_strtod_l+0x8b8>
 800cbbc:	6963      	ldr	r3, [r4, #20]
 800cbbe:	b913      	cbnz	r3, 800cbc6 <_strtod_l+0x7fe>
 800cbc0:	6923      	ldr	r3, [r4, #16]
 800cbc2:	2b01      	cmp	r3, #1
 800cbc4:	dd5c      	ble.n	800cc80 <_strtod_l+0x8b8>
 800cbc6:	4621      	mov	r1, r4
 800cbc8:	2201      	movs	r2, #1
 800cbca:	9805      	ldr	r0, [sp, #20]
 800cbcc:	f001 f996 	bl	800defc <__lshift>
 800cbd0:	4641      	mov	r1, r8
 800cbd2:	4604      	mov	r4, r0
 800cbd4:	f001 f9fe 	bl	800dfd4 <__mcmp>
 800cbd8:	2800      	cmp	r0, #0
 800cbda:	dd51      	ble.n	800cc80 <_strtod_l+0x8b8>
 800cbdc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cbe0:	9a08      	ldr	r2, [sp, #32]
 800cbe2:	0d1b      	lsrs	r3, r3, #20
 800cbe4:	051b      	lsls	r3, r3, #20
 800cbe6:	2a00      	cmp	r2, #0
 800cbe8:	d06b      	beq.n	800ccc2 <_strtod_l+0x8fa>
 800cbea:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800cbee:	d868      	bhi.n	800ccc2 <_strtod_l+0x8fa>
 800cbf0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800cbf4:	f67f ae9d 	bls.w	800c932 <_strtod_l+0x56a>
 800cbf8:	4b0a      	ldr	r3, [pc, #40]	@ (800cc24 <_strtod_l+0x85c>)
 800cbfa:	4650      	mov	r0, sl
 800cbfc:	4659      	mov	r1, fp
 800cbfe:	2200      	movs	r2, #0
 800cc00:	f7f3 fd12 	bl	8000628 <__aeabi_dmul>
 800cc04:	4b08      	ldr	r3, [pc, #32]	@ (800cc28 <_strtod_l+0x860>)
 800cc06:	400b      	ands	r3, r1
 800cc08:	4682      	mov	sl, r0
 800cc0a:	468b      	mov	fp, r1
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	f47f ae05 	bne.w	800c81c <_strtod_l+0x454>
 800cc12:	9a05      	ldr	r2, [sp, #20]
 800cc14:	2322      	movs	r3, #34	@ 0x22
 800cc16:	6013      	str	r3, [r2, #0]
 800cc18:	e600      	b.n	800c81c <_strtod_l+0x454>
 800cc1a:	bf00      	nop
 800cc1c:	080100c8 	.word	0x080100c8
 800cc20:	fffffc02 	.word	0xfffffc02
 800cc24:	39500000 	.word	0x39500000
 800cc28:	7ff00000 	.word	0x7ff00000
 800cc2c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800cc30:	d165      	bne.n	800ccfe <_strtod_l+0x936>
 800cc32:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800cc34:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cc38:	b35a      	cbz	r2, 800cc92 <_strtod_l+0x8ca>
 800cc3a:	4a9f      	ldr	r2, [pc, #636]	@ (800ceb8 <_strtod_l+0xaf0>)
 800cc3c:	4293      	cmp	r3, r2
 800cc3e:	d12b      	bne.n	800cc98 <_strtod_l+0x8d0>
 800cc40:	9b08      	ldr	r3, [sp, #32]
 800cc42:	4651      	mov	r1, sl
 800cc44:	b303      	cbz	r3, 800cc88 <_strtod_l+0x8c0>
 800cc46:	4b9d      	ldr	r3, [pc, #628]	@ (800cebc <_strtod_l+0xaf4>)
 800cc48:	465a      	mov	r2, fp
 800cc4a:	4013      	ands	r3, r2
 800cc4c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800cc50:	f04f 32ff 	mov.w	r2, #4294967295
 800cc54:	d81b      	bhi.n	800cc8e <_strtod_l+0x8c6>
 800cc56:	0d1b      	lsrs	r3, r3, #20
 800cc58:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800cc5c:	fa02 f303 	lsl.w	r3, r2, r3
 800cc60:	4299      	cmp	r1, r3
 800cc62:	d119      	bne.n	800cc98 <_strtod_l+0x8d0>
 800cc64:	4b96      	ldr	r3, [pc, #600]	@ (800cec0 <_strtod_l+0xaf8>)
 800cc66:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cc68:	429a      	cmp	r2, r3
 800cc6a:	d102      	bne.n	800cc72 <_strtod_l+0x8aa>
 800cc6c:	3101      	adds	r1, #1
 800cc6e:	f43f adca 	beq.w	800c806 <_strtod_l+0x43e>
 800cc72:	4b92      	ldr	r3, [pc, #584]	@ (800cebc <_strtod_l+0xaf4>)
 800cc74:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cc76:	401a      	ands	r2, r3
 800cc78:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800cc7c:	f04f 0a00 	mov.w	sl, #0
 800cc80:	9b08      	ldr	r3, [sp, #32]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d1b8      	bne.n	800cbf8 <_strtod_l+0x830>
 800cc86:	e5c9      	b.n	800c81c <_strtod_l+0x454>
 800cc88:	f04f 33ff 	mov.w	r3, #4294967295
 800cc8c:	e7e8      	b.n	800cc60 <_strtod_l+0x898>
 800cc8e:	4613      	mov	r3, r2
 800cc90:	e7e6      	b.n	800cc60 <_strtod_l+0x898>
 800cc92:	ea53 030a 	orrs.w	r3, r3, sl
 800cc96:	d0a1      	beq.n	800cbdc <_strtod_l+0x814>
 800cc98:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cc9a:	b1db      	cbz	r3, 800ccd4 <_strtod_l+0x90c>
 800cc9c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cc9e:	4213      	tst	r3, r2
 800cca0:	d0ee      	beq.n	800cc80 <_strtod_l+0x8b8>
 800cca2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cca4:	9a08      	ldr	r2, [sp, #32]
 800cca6:	4650      	mov	r0, sl
 800cca8:	4659      	mov	r1, fp
 800ccaa:	b1bb      	cbz	r3, 800ccdc <_strtod_l+0x914>
 800ccac:	f7ff fb6c 	bl	800c388 <sulp>
 800ccb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ccb4:	ec53 2b10 	vmov	r2, r3, d0
 800ccb8:	f7f3 fb00 	bl	80002bc <__adddf3>
 800ccbc:	4682      	mov	sl, r0
 800ccbe:	468b      	mov	fp, r1
 800ccc0:	e7de      	b.n	800cc80 <_strtod_l+0x8b8>
 800ccc2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ccc6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ccca:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ccce:	f04f 3aff 	mov.w	sl, #4294967295
 800ccd2:	e7d5      	b.n	800cc80 <_strtod_l+0x8b8>
 800ccd4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ccd6:	ea13 0f0a 	tst.w	r3, sl
 800ccda:	e7e1      	b.n	800cca0 <_strtod_l+0x8d8>
 800ccdc:	f7ff fb54 	bl	800c388 <sulp>
 800cce0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cce4:	ec53 2b10 	vmov	r2, r3, d0
 800cce8:	f7f3 fae6 	bl	80002b8 <__aeabi_dsub>
 800ccec:	2200      	movs	r2, #0
 800ccee:	2300      	movs	r3, #0
 800ccf0:	4682      	mov	sl, r0
 800ccf2:	468b      	mov	fp, r1
 800ccf4:	f7f3 ff00 	bl	8000af8 <__aeabi_dcmpeq>
 800ccf8:	2800      	cmp	r0, #0
 800ccfa:	d0c1      	beq.n	800cc80 <_strtod_l+0x8b8>
 800ccfc:	e619      	b.n	800c932 <_strtod_l+0x56a>
 800ccfe:	4641      	mov	r1, r8
 800cd00:	4620      	mov	r0, r4
 800cd02:	f001 fadf 	bl	800e2c4 <__ratio>
 800cd06:	ec57 6b10 	vmov	r6, r7, d0
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800cd10:	4630      	mov	r0, r6
 800cd12:	4639      	mov	r1, r7
 800cd14:	f7f3 ff04 	bl	8000b20 <__aeabi_dcmple>
 800cd18:	2800      	cmp	r0, #0
 800cd1a:	d06f      	beq.n	800cdfc <_strtod_l+0xa34>
 800cd1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d17a      	bne.n	800ce18 <_strtod_l+0xa50>
 800cd22:	f1ba 0f00 	cmp.w	sl, #0
 800cd26:	d158      	bne.n	800cdda <_strtod_l+0xa12>
 800cd28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cd2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d15a      	bne.n	800cde8 <_strtod_l+0xa20>
 800cd32:	4b64      	ldr	r3, [pc, #400]	@ (800cec4 <_strtod_l+0xafc>)
 800cd34:	2200      	movs	r2, #0
 800cd36:	4630      	mov	r0, r6
 800cd38:	4639      	mov	r1, r7
 800cd3a:	f7f3 fee7 	bl	8000b0c <__aeabi_dcmplt>
 800cd3e:	2800      	cmp	r0, #0
 800cd40:	d159      	bne.n	800cdf6 <_strtod_l+0xa2e>
 800cd42:	4630      	mov	r0, r6
 800cd44:	4639      	mov	r1, r7
 800cd46:	4b60      	ldr	r3, [pc, #384]	@ (800cec8 <_strtod_l+0xb00>)
 800cd48:	2200      	movs	r2, #0
 800cd4a:	f7f3 fc6d 	bl	8000628 <__aeabi_dmul>
 800cd4e:	4606      	mov	r6, r0
 800cd50:	460f      	mov	r7, r1
 800cd52:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800cd56:	9606      	str	r6, [sp, #24]
 800cd58:	9307      	str	r3, [sp, #28]
 800cd5a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cd5e:	4d57      	ldr	r5, [pc, #348]	@ (800cebc <_strtod_l+0xaf4>)
 800cd60:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800cd64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cd66:	401d      	ands	r5, r3
 800cd68:	4b58      	ldr	r3, [pc, #352]	@ (800cecc <_strtod_l+0xb04>)
 800cd6a:	429d      	cmp	r5, r3
 800cd6c:	f040 80b2 	bne.w	800ced4 <_strtod_l+0xb0c>
 800cd70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cd72:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800cd76:	ec4b ab10 	vmov	d0, sl, fp
 800cd7a:	f001 f9db 	bl	800e134 <__ulp>
 800cd7e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cd82:	ec51 0b10 	vmov	r0, r1, d0
 800cd86:	f7f3 fc4f 	bl	8000628 <__aeabi_dmul>
 800cd8a:	4652      	mov	r2, sl
 800cd8c:	465b      	mov	r3, fp
 800cd8e:	f7f3 fa95 	bl	80002bc <__adddf3>
 800cd92:	460b      	mov	r3, r1
 800cd94:	4949      	ldr	r1, [pc, #292]	@ (800cebc <_strtod_l+0xaf4>)
 800cd96:	4a4e      	ldr	r2, [pc, #312]	@ (800ced0 <_strtod_l+0xb08>)
 800cd98:	4019      	ands	r1, r3
 800cd9a:	4291      	cmp	r1, r2
 800cd9c:	4682      	mov	sl, r0
 800cd9e:	d942      	bls.n	800ce26 <_strtod_l+0xa5e>
 800cda0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cda2:	4b47      	ldr	r3, [pc, #284]	@ (800cec0 <_strtod_l+0xaf8>)
 800cda4:	429a      	cmp	r2, r3
 800cda6:	d103      	bne.n	800cdb0 <_strtod_l+0x9e8>
 800cda8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cdaa:	3301      	adds	r3, #1
 800cdac:	f43f ad2b 	beq.w	800c806 <_strtod_l+0x43e>
 800cdb0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800cec0 <_strtod_l+0xaf8>
 800cdb4:	f04f 3aff 	mov.w	sl, #4294967295
 800cdb8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cdba:	9805      	ldr	r0, [sp, #20]
 800cdbc:	f000 fe86 	bl	800dacc <_Bfree>
 800cdc0:	9805      	ldr	r0, [sp, #20]
 800cdc2:	4649      	mov	r1, r9
 800cdc4:	f000 fe82 	bl	800dacc <_Bfree>
 800cdc8:	9805      	ldr	r0, [sp, #20]
 800cdca:	4641      	mov	r1, r8
 800cdcc:	f000 fe7e 	bl	800dacc <_Bfree>
 800cdd0:	9805      	ldr	r0, [sp, #20]
 800cdd2:	4621      	mov	r1, r4
 800cdd4:	f000 fe7a 	bl	800dacc <_Bfree>
 800cdd8:	e618      	b.n	800ca0c <_strtod_l+0x644>
 800cdda:	f1ba 0f01 	cmp.w	sl, #1
 800cdde:	d103      	bne.n	800cde8 <_strtod_l+0xa20>
 800cde0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	f43f ada5 	beq.w	800c932 <_strtod_l+0x56a>
 800cde8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800ce98 <_strtod_l+0xad0>
 800cdec:	4f35      	ldr	r7, [pc, #212]	@ (800cec4 <_strtod_l+0xafc>)
 800cdee:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cdf2:	2600      	movs	r6, #0
 800cdf4:	e7b1      	b.n	800cd5a <_strtod_l+0x992>
 800cdf6:	4f34      	ldr	r7, [pc, #208]	@ (800cec8 <_strtod_l+0xb00>)
 800cdf8:	2600      	movs	r6, #0
 800cdfa:	e7aa      	b.n	800cd52 <_strtod_l+0x98a>
 800cdfc:	4b32      	ldr	r3, [pc, #200]	@ (800cec8 <_strtod_l+0xb00>)
 800cdfe:	4630      	mov	r0, r6
 800ce00:	4639      	mov	r1, r7
 800ce02:	2200      	movs	r2, #0
 800ce04:	f7f3 fc10 	bl	8000628 <__aeabi_dmul>
 800ce08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce0a:	4606      	mov	r6, r0
 800ce0c:	460f      	mov	r7, r1
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d09f      	beq.n	800cd52 <_strtod_l+0x98a>
 800ce12:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ce16:	e7a0      	b.n	800cd5a <_strtod_l+0x992>
 800ce18:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800cea0 <_strtod_l+0xad8>
 800ce1c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ce20:	ec57 6b17 	vmov	r6, r7, d7
 800ce24:	e799      	b.n	800cd5a <_strtod_l+0x992>
 800ce26:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800ce2a:	9b08      	ldr	r3, [sp, #32]
 800ce2c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d1c1      	bne.n	800cdb8 <_strtod_l+0x9f0>
 800ce34:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ce38:	0d1b      	lsrs	r3, r3, #20
 800ce3a:	051b      	lsls	r3, r3, #20
 800ce3c:	429d      	cmp	r5, r3
 800ce3e:	d1bb      	bne.n	800cdb8 <_strtod_l+0x9f0>
 800ce40:	4630      	mov	r0, r6
 800ce42:	4639      	mov	r1, r7
 800ce44:	f7f3 ffa0 	bl	8000d88 <__aeabi_d2lz>
 800ce48:	f7f3 fbc0 	bl	80005cc <__aeabi_l2d>
 800ce4c:	4602      	mov	r2, r0
 800ce4e:	460b      	mov	r3, r1
 800ce50:	4630      	mov	r0, r6
 800ce52:	4639      	mov	r1, r7
 800ce54:	f7f3 fa30 	bl	80002b8 <__aeabi_dsub>
 800ce58:	460b      	mov	r3, r1
 800ce5a:	4602      	mov	r2, r0
 800ce5c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ce60:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800ce64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce66:	ea46 060a 	orr.w	r6, r6, sl
 800ce6a:	431e      	orrs	r6, r3
 800ce6c:	d06f      	beq.n	800cf4e <_strtod_l+0xb86>
 800ce6e:	a30e      	add	r3, pc, #56	@ (adr r3, 800cea8 <_strtod_l+0xae0>)
 800ce70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce74:	f7f3 fe4a 	bl	8000b0c <__aeabi_dcmplt>
 800ce78:	2800      	cmp	r0, #0
 800ce7a:	f47f accf 	bne.w	800c81c <_strtod_l+0x454>
 800ce7e:	a30c      	add	r3, pc, #48	@ (adr r3, 800ceb0 <_strtod_l+0xae8>)
 800ce80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ce88:	f7f3 fe5e 	bl	8000b48 <__aeabi_dcmpgt>
 800ce8c:	2800      	cmp	r0, #0
 800ce8e:	d093      	beq.n	800cdb8 <_strtod_l+0x9f0>
 800ce90:	e4c4      	b.n	800c81c <_strtod_l+0x454>
 800ce92:	bf00      	nop
 800ce94:	f3af 8000 	nop.w
 800ce98:	00000000 	.word	0x00000000
 800ce9c:	bff00000 	.word	0xbff00000
 800cea0:	00000000 	.word	0x00000000
 800cea4:	3ff00000 	.word	0x3ff00000
 800cea8:	94a03595 	.word	0x94a03595
 800ceac:	3fdfffff 	.word	0x3fdfffff
 800ceb0:	35afe535 	.word	0x35afe535
 800ceb4:	3fe00000 	.word	0x3fe00000
 800ceb8:	000fffff 	.word	0x000fffff
 800cebc:	7ff00000 	.word	0x7ff00000
 800cec0:	7fefffff 	.word	0x7fefffff
 800cec4:	3ff00000 	.word	0x3ff00000
 800cec8:	3fe00000 	.word	0x3fe00000
 800cecc:	7fe00000 	.word	0x7fe00000
 800ced0:	7c9fffff 	.word	0x7c9fffff
 800ced4:	9b08      	ldr	r3, [sp, #32]
 800ced6:	b323      	cbz	r3, 800cf22 <_strtod_l+0xb5a>
 800ced8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800cedc:	d821      	bhi.n	800cf22 <_strtod_l+0xb5a>
 800cede:	a328      	add	r3, pc, #160	@ (adr r3, 800cf80 <_strtod_l+0xbb8>)
 800cee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cee4:	4630      	mov	r0, r6
 800cee6:	4639      	mov	r1, r7
 800cee8:	f7f3 fe1a 	bl	8000b20 <__aeabi_dcmple>
 800ceec:	b1a0      	cbz	r0, 800cf18 <_strtod_l+0xb50>
 800ceee:	4639      	mov	r1, r7
 800cef0:	4630      	mov	r0, r6
 800cef2:	f7f3 fe71 	bl	8000bd8 <__aeabi_d2uiz>
 800cef6:	2801      	cmp	r0, #1
 800cef8:	bf38      	it	cc
 800cefa:	2001      	movcc	r0, #1
 800cefc:	f7f3 fb1a 	bl	8000534 <__aeabi_ui2d>
 800cf00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cf02:	4606      	mov	r6, r0
 800cf04:	460f      	mov	r7, r1
 800cf06:	b9fb      	cbnz	r3, 800cf48 <_strtod_l+0xb80>
 800cf08:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cf0c:	9014      	str	r0, [sp, #80]	@ 0x50
 800cf0e:	9315      	str	r3, [sp, #84]	@ 0x54
 800cf10:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800cf14:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800cf18:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cf1a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800cf1e:	1b5b      	subs	r3, r3, r5
 800cf20:	9311      	str	r3, [sp, #68]	@ 0x44
 800cf22:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800cf26:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800cf2a:	f001 f903 	bl	800e134 <__ulp>
 800cf2e:	4650      	mov	r0, sl
 800cf30:	ec53 2b10 	vmov	r2, r3, d0
 800cf34:	4659      	mov	r1, fp
 800cf36:	f7f3 fb77 	bl	8000628 <__aeabi_dmul>
 800cf3a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800cf3e:	f7f3 f9bd 	bl	80002bc <__adddf3>
 800cf42:	4682      	mov	sl, r0
 800cf44:	468b      	mov	fp, r1
 800cf46:	e770      	b.n	800ce2a <_strtod_l+0xa62>
 800cf48:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800cf4c:	e7e0      	b.n	800cf10 <_strtod_l+0xb48>
 800cf4e:	a30e      	add	r3, pc, #56	@ (adr r3, 800cf88 <_strtod_l+0xbc0>)
 800cf50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf54:	f7f3 fdda 	bl	8000b0c <__aeabi_dcmplt>
 800cf58:	e798      	b.n	800ce8c <_strtod_l+0xac4>
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cf5e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800cf60:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cf62:	6013      	str	r3, [r2, #0]
 800cf64:	f7ff ba6d 	b.w	800c442 <_strtod_l+0x7a>
 800cf68:	2a65      	cmp	r2, #101	@ 0x65
 800cf6a:	f43f ab66 	beq.w	800c63a <_strtod_l+0x272>
 800cf6e:	2a45      	cmp	r2, #69	@ 0x45
 800cf70:	f43f ab63 	beq.w	800c63a <_strtod_l+0x272>
 800cf74:	2301      	movs	r3, #1
 800cf76:	f7ff bb9e 	b.w	800c6b6 <_strtod_l+0x2ee>
 800cf7a:	bf00      	nop
 800cf7c:	f3af 8000 	nop.w
 800cf80:	ffc00000 	.word	0xffc00000
 800cf84:	41dfffff 	.word	0x41dfffff
 800cf88:	94a03595 	.word	0x94a03595
 800cf8c:	3fcfffff 	.word	0x3fcfffff

0800cf90 <strtod>:
 800cf90:	460a      	mov	r2, r1
 800cf92:	4601      	mov	r1, r0
 800cf94:	4802      	ldr	r0, [pc, #8]	@ (800cfa0 <strtod+0x10>)
 800cf96:	4b03      	ldr	r3, [pc, #12]	@ (800cfa4 <strtod+0x14>)
 800cf98:	6800      	ldr	r0, [r0, #0]
 800cf9a:	f7ff ba15 	b.w	800c3c8 <_strtod_l>
 800cf9e:	bf00      	nop
 800cfa0:	200001dc 	.word	0x200001dc
 800cfa4:	20000070 	.word	0x20000070

0800cfa8 <std>:
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	b510      	push	{r4, lr}
 800cfac:	4604      	mov	r4, r0
 800cfae:	e9c0 3300 	strd	r3, r3, [r0]
 800cfb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cfb6:	6083      	str	r3, [r0, #8]
 800cfb8:	8181      	strh	r1, [r0, #12]
 800cfba:	6643      	str	r3, [r0, #100]	@ 0x64
 800cfbc:	81c2      	strh	r2, [r0, #14]
 800cfbe:	6183      	str	r3, [r0, #24]
 800cfc0:	4619      	mov	r1, r3
 800cfc2:	2208      	movs	r2, #8
 800cfc4:	305c      	adds	r0, #92	@ 0x5c
 800cfc6:	f000 f8f4 	bl	800d1b2 <memset>
 800cfca:	4b0d      	ldr	r3, [pc, #52]	@ (800d000 <std+0x58>)
 800cfcc:	6263      	str	r3, [r4, #36]	@ 0x24
 800cfce:	4b0d      	ldr	r3, [pc, #52]	@ (800d004 <std+0x5c>)
 800cfd0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cfd2:	4b0d      	ldr	r3, [pc, #52]	@ (800d008 <std+0x60>)
 800cfd4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cfd6:	4b0d      	ldr	r3, [pc, #52]	@ (800d00c <std+0x64>)
 800cfd8:	6323      	str	r3, [r4, #48]	@ 0x30
 800cfda:	4b0d      	ldr	r3, [pc, #52]	@ (800d010 <std+0x68>)
 800cfdc:	6224      	str	r4, [r4, #32]
 800cfde:	429c      	cmp	r4, r3
 800cfe0:	d006      	beq.n	800cff0 <std+0x48>
 800cfe2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cfe6:	4294      	cmp	r4, r2
 800cfe8:	d002      	beq.n	800cff0 <std+0x48>
 800cfea:	33d0      	adds	r3, #208	@ 0xd0
 800cfec:	429c      	cmp	r4, r3
 800cfee:	d105      	bne.n	800cffc <std+0x54>
 800cff0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cff8:	f000 b976 	b.w	800d2e8 <__retarget_lock_init_recursive>
 800cffc:	bd10      	pop	{r4, pc}
 800cffe:	bf00      	nop
 800d000:	0800d12d 	.word	0x0800d12d
 800d004:	0800d14f 	.word	0x0800d14f
 800d008:	0800d187 	.word	0x0800d187
 800d00c:	0800d1ab 	.word	0x0800d1ab
 800d010:	200026ac 	.word	0x200026ac

0800d014 <stdio_exit_handler>:
 800d014:	4a02      	ldr	r2, [pc, #8]	@ (800d020 <stdio_exit_handler+0xc>)
 800d016:	4903      	ldr	r1, [pc, #12]	@ (800d024 <stdio_exit_handler+0x10>)
 800d018:	4803      	ldr	r0, [pc, #12]	@ (800d028 <stdio_exit_handler+0x14>)
 800d01a:	f000 b869 	b.w	800d0f0 <_fwalk_sglue>
 800d01e:	bf00      	nop
 800d020:	20000064 	.word	0x20000064
 800d024:	0800e4d5 	.word	0x0800e4d5
 800d028:	200001e0 	.word	0x200001e0

0800d02c <cleanup_stdio>:
 800d02c:	6841      	ldr	r1, [r0, #4]
 800d02e:	4b0c      	ldr	r3, [pc, #48]	@ (800d060 <cleanup_stdio+0x34>)
 800d030:	4299      	cmp	r1, r3
 800d032:	b510      	push	{r4, lr}
 800d034:	4604      	mov	r4, r0
 800d036:	d001      	beq.n	800d03c <cleanup_stdio+0x10>
 800d038:	f001 fa4c 	bl	800e4d4 <_fflush_r>
 800d03c:	68a1      	ldr	r1, [r4, #8]
 800d03e:	4b09      	ldr	r3, [pc, #36]	@ (800d064 <cleanup_stdio+0x38>)
 800d040:	4299      	cmp	r1, r3
 800d042:	d002      	beq.n	800d04a <cleanup_stdio+0x1e>
 800d044:	4620      	mov	r0, r4
 800d046:	f001 fa45 	bl	800e4d4 <_fflush_r>
 800d04a:	68e1      	ldr	r1, [r4, #12]
 800d04c:	4b06      	ldr	r3, [pc, #24]	@ (800d068 <cleanup_stdio+0x3c>)
 800d04e:	4299      	cmp	r1, r3
 800d050:	d004      	beq.n	800d05c <cleanup_stdio+0x30>
 800d052:	4620      	mov	r0, r4
 800d054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d058:	f001 ba3c 	b.w	800e4d4 <_fflush_r>
 800d05c:	bd10      	pop	{r4, pc}
 800d05e:	bf00      	nop
 800d060:	200026ac 	.word	0x200026ac
 800d064:	20002714 	.word	0x20002714
 800d068:	2000277c 	.word	0x2000277c

0800d06c <global_stdio_init.part.0>:
 800d06c:	b510      	push	{r4, lr}
 800d06e:	4b0b      	ldr	r3, [pc, #44]	@ (800d09c <global_stdio_init.part.0+0x30>)
 800d070:	4c0b      	ldr	r4, [pc, #44]	@ (800d0a0 <global_stdio_init.part.0+0x34>)
 800d072:	4a0c      	ldr	r2, [pc, #48]	@ (800d0a4 <global_stdio_init.part.0+0x38>)
 800d074:	601a      	str	r2, [r3, #0]
 800d076:	4620      	mov	r0, r4
 800d078:	2200      	movs	r2, #0
 800d07a:	2104      	movs	r1, #4
 800d07c:	f7ff ff94 	bl	800cfa8 <std>
 800d080:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d084:	2201      	movs	r2, #1
 800d086:	2109      	movs	r1, #9
 800d088:	f7ff ff8e 	bl	800cfa8 <std>
 800d08c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d090:	2202      	movs	r2, #2
 800d092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d096:	2112      	movs	r1, #18
 800d098:	f7ff bf86 	b.w	800cfa8 <std>
 800d09c:	200027e4 	.word	0x200027e4
 800d0a0:	200026ac 	.word	0x200026ac
 800d0a4:	0800d015 	.word	0x0800d015

0800d0a8 <__sfp_lock_acquire>:
 800d0a8:	4801      	ldr	r0, [pc, #4]	@ (800d0b0 <__sfp_lock_acquire+0x8>)
 800d0aa:	f000 b91e 	b.w	800d2ea <__retarget_lock_acquire_recursive>
 800d0ae:	bf00      	nop
 800d0b0:	200027ed 	.word	0x200027ed

0800d0b4 <__sfp_lock_release>:
 800d0b4:	4801      	ldr	r0, [pc, #4]	@ (800d0bc <__sfp_lock_release+0x8>)
 800d0b6:	f000 b919 	b.w	800d2ec <__retarget_lock_release_recursive>
 800d0ba:	bf00      	nop
 800d0bc:	200027ed 	.word	0x200027ed

0800d0c0 <__sinit>:
 800d0c0:	b510      	push	{r4, lr}
 800d0c2:	4604      	mov	r4, r0
 800d0c4:	f7ff fff0 	bl	800d0a8 <__sfp_lock_acquire>
 800d0c8:	6a23      	ldr	r3, [r4, #32]
 800d0ca:	b11b      	cbz	r3, 800d0d4 <__sinit+0x14>
 800d0cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d0d0:	f7ff bff0 	b.w	800d0b4 <__sfp_lock_release>
 800d0d4:	4b04      	ldr	r3, [pc, #16]	@ (800d0e8 <__sinit+0x28>)
 800d0d6:	6223      	str	r3, [r4, #32]
 800d0d8:	4b04      	ldr	r3, [pc, #16]	@ (800d0ec <__sinit+0x2c>)
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d1f5      	bne.n	800d0cc <__sinit+0xc>
 800d0e0:	f7ff ffc4 	bl	800d06c <global_stdio_init.part.0>
 800d0e4:	e7f2      	b.n	800d0cc <__sinit+0xc>
 800d0e6:	bf00      	nop
 800d0e8:	0800d02d 	.word	0x0800d02d
 800d0ec:	200027e4 	.word	0x200027e4

0800d0f0 <_fwalk_sglue>:
 800d0f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0f4:	4607      	mov	r7, r0
 800d0f6:	4688      	mov	r8, r1
 800d0f8:	4614      	mov	r4, r2
 800d0fa:	2600      	movs	r6, #0
 800d0fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d100:	f1b9 0901 	subs.w	r9, r9, #1
 800d104:	d505      	bpl.n	800d112 <_fwalk_sglue+0x22>
 800d106:	6824      	ldr	r4, [r4, #0]
 800d108:	2c00      	cmp	r4, #0
 800d10a:	d1f7      	bne.n	800d0fc <_fwalk_sglue+0xc>
 800d10c:	4630      	mov	r0, r6
 800d10e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d112:	89ab      	ldrh	r3, [r5, #12]
 800d114:	2b01      	cmp	r3, #1
 800d116:	d907      	bls.n	800d128 <_fwalk_sglue+0x38>
 800d118:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d11c:	3301      	adds	r3, #1
 800d11e:	d003      	beq.n	800d128 <_fwalk_sglue+0x38>
 800d120:	4629      	mov	r1, r5
 800d122:	4638      	mov	r0, r7
 800d124:	47c0      	blx	r8
 800d126:	4306      	orrs	r6, r0
 800d128:	3568      	adds	r5, #104	@ 0x68
 800d12a:	e7e9      	b.n	800d100 <_fwalk_sglue+0x10>

0800d12c <__sread>:
 800d12c:	b510      	push	{r4, lr}
 800d12e:	460c      	mov	r4, r1
 800d130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d134:	f000 f87a 	bl	800d22c <_read_r>
 800d138:	2800      	cmp	r0, #0
 800d13a:	bfab      	itete	ge
 800d13c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d13e:	89a3      	ldrhlt	r3, [r4, #12]
 800d140:	181b      	addge	r3, r3, r0
 800d142:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d146:	bfac      	ite	ge
 800d148:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d14a:	81a3      	strhlt	r3, [r4, #12]
 800d14c:	bd10      	pop	{r4, pc}

0800d14e <__swrite>:
 800d14e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d152:	461f      	mov	r7, r3
 800d154:	898b      	ldrh	r3, [r1, #12]
 800d156:	05db      	lsls	r3, r3, #23
 800d158:	4605      	mov	r5, r0
 800d15a:	460c      	mov	r4, r1
 800d15c:	4616      	mov	r6, r2
 800d15e:	d505      	bpl.n	800d16c <__swrite+0x1e>
 800d160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d164:	2302      	movs	r3, #2
 800d166:	2200      	movs	r2, #0
 800d168:	f000 f84e 	bl	800d208 <_lseek_r>
 800d16c:	89a3      	ldrh	r3, [r4, #12]
 800d16e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d172:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d176:	81a3      	strh	r3, [r4, #12]
 800d178:	4632      	mov	r2, r6
 800d17a:	463b      	mov	r3, r7
 800d17c:	4628      	mov	r0, r5
 800d17e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d182:	f000 b875 	b.w	800d270 <_write_r>

0800d186 <__sseek>:
 800d186:	b510      	push	{r4, lr}
 800d188:	460c      	mov	r4, r1
 800d18a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d18e:	f000 f83b 	bl	800d208 <_lseek_r>
 800d192:	1c43      	adds	r3, r0, #1
 800d194:	89a3      	ldrh	r3, [r4, #12]
 800d196:	bf15      	itete	ne
 800d198:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d19a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d19e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d1a2:	81a3      	strheq	r3, [r4, #12]
 800d1a4:	bf18      	it	ne
 800d1a6:	81a3      	strhne	r3, [r4, #12]
 800d1a8:	bd10      	pop	{r4, pc}

0800d1aa <__sclose>:
 800d1aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1ae:	f000 b81b 	b.w	800d1e8 <_close_r>

0800d1b2 <memset>:
 800d1b2:	4402      	add	r2, r0
 800d1b4:	4603      	mov	r3, r0
 800d1b6:	4293      	cmp	r3, r2
 800d1b8:	d100      	bne.n	800d1bc <memset+0xa>
 800d1ba:	4770      	bx	lr
 800d1bc:	f803 1b01 	strb.w	r1, [r3], #1
 800d1c0:	e7f9      	b.n	800d1b6 <memset+0x4>

0800d1c2 <strncmp>:
 800d1c2:	b510      	push	{r4, lr}
 800d1c4:	b16a      	cbz	r2, 800d1e2 <strncmp+0x20>
 800d1c6:	3901      	subs	r1, #1
 800d1c8:	1884      	adds	r4, r0, r2
 800d1ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d1ce:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d1d2:	429a      	cmp	r2, r3
 800d1d4:	d103      	bne.n	800d1de <strncmp+0x1c>
 800d1d6:	42a0      	cmp	r0, r4
 800d1d8:	d001      	beq.n	800d1de <strncmp+0x1c>
 800d1da:	2a00      	cmp	r2, #0
 800d1dc:	d1f5      	bne.n	800d1ca <strncmp+0x8>
 800d1de:	1ad0      	subs	r0, r2, r3
 800d1e0:	bd10      	pop	{r4, pc}
 800d1e2:	4610      	mov	r0, r2
 800d1e4:	e7fc      	b.n	800d1e0 <strncmp+0x1e>
	...

0800d1e8 <_close_r>:
 800d1e8:	b538      	push	{r3, r4, r5, lr}
 800d1ea:	4d06      	ldr	r5, [pc, #24]	@ (800d204 <_close_r+0x1c>)
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	4604      	mov	r4, r0
 800d1f0:	4608      	mov	r0, r1
 800d1f2:	602b      	str	r3, [r5, #0]
 800d1f4:	f7f9 f860 	bl	80062b8 <_close>
 800d1f8:	1c43      	adds	r3, r0, #1
 800d1fa:	d102      	bne.n	800d202 <_close_r+0x1a>
 800d1fc:	682b      	ldr	r3, [r5, #0]
 800d1fe:	b103      	cbz	r3, 800d202 <_close_r+0x1a>
 800d200:	6023      	str	r3, [r4, #0]
 800d202:	bd38      	pop	{r3, r4, r5, pc}
 800d204:	200027e8 	.word	0x200027e8

0800d208 <_lseek_r>:
 800d208:	b538      	push	{r3, r4, r5, lr}
 800d20a:	4d07      	ldr	r5, [pc, #28]	@ (800d228 <_lseek_r+0x20>)
 800d20c:	4604      	mov	r4, r0
 800d20e:	4608      	mov	r0, r1
 800d210:	4611      	mov	r1, r2
 800d212:	2200      	movs	r2, #0
 800d214:	602a      	str	r2, [r5, #0]
 800d216:	461a      	mov	r2, r3
 800d218:	f7f9 f875 	bl	8006306 <_lseek>
 800d21c:	1c43      	adds	r3, r0, #1
 800d21e:	d102      	bne.n	800d226 <_lseek_r+0x1e>
 800d220:	682b      	ldr	r3, [r5, #0]
 800d222:	b103      	cbz	r3, 800d226 <_lseek_r+0x1e>
 800d224:	6023      	str	r3, [r4, #0]
 800d226:	bd38      	pop	{r3, r4, r5, pc}
 800d228:	200027e8 	.word	0x200027e8

0800d22c <_read_r>:
 800d22c:	b538      	push	{r3, r4, r5, lr}
 800d22e:	4d07      	ldr	r5, [pc, #28]	@ (800d24c <_read_r+0x20>)
 800d230:	4604      	mov	r4, r0
 800d232:	4608      	mov	r0, r1
 800d234:	4611      	mov	r1, r2
 800d236:	2200      	movs	r2, #0
 800d238:	602a      	str	r2, [r5, #0]
 800d23a:	461a      	mov	r2, r3
 800d23c:	f7f9 f803 	bl	8006246 <_read>
 800d240:	1c43      	adds	r3, r0, #1
 800d242:	d102      	bne.n	800d24a <_read_r+0x1e>
 800d244:	682b      	ldr	r3, [r5, #0]
 800d246:	b103      	cbz	r3, 800d24a <_read_r+0x1e>
 800d248:	6023      	str	r3, [r4, #0]
 800d24a:	bd38      	pop	{r3, r4, r5, pc}
 800d24c:	200027e8 	.word	0x200027e8

0800d250 <_sbrk_r>:
 800d250:	b538      	push	{r3, r4, r5, lr}
 800d252:	4d06      	ldr	r5, [pc, #24]	@ (800d26c <_sbrk_r+0x1c>)
 800d254:	2300      	movs	r3, #0
 800d256:	4604      	mov	r4, r0
 800d258:	4608      	mov	r0, r1
 800d25a:	602b      	str	r3, [r5, #0]
 800d25c:	f7f9 f860 	bl	8006320 <_sbrk>
 800d260:	1c43      	adds	r3, r0, #1
 800d262:	d102      	bne.n	800d26a <_sbrk_r+0x1a>
 800d264:	682b      	ldr	r3, [r5, #0]
 800d266:	b103      	cbz	r3, 800d26a <_sbrk_r+0x1a>
 800d268:	6023      	str	r3, [r4, #0]
 800d26a:	bd38      	pop	{r3, r4, r5, pc}
 800d26c:	200027e8 	.word	0x200027e8

0800d270 <_write_r>:
 800d270:	b538      	push	{r3, r4, r5, lr}
 800d272:	4d07      	ldr	r5, [pc, #28]	@ (800d290 <_write_r+0x20>)
 800d274:	4604      	mov	r4, r0
 800d276:	4608      	mov	r0, r1
 800d278:	4611      	mov	r1, r2
 800d27a:	2200      	movs	r2, #0
 800d27c:	602a      	str	r2, [r5, #0]
 800d27e:	461a      	mov	r2, r3
 800d280:	f7f8 fffe 	bl	8006280 <_write>
 800d284:	1c43      	adds	r3, r0, #1
 800d286:	d102      	bne.n	800d28e <_write_r+0x1e>
 800d288:	682b      	ldr	r3, [r5, #0]
 800d28a:	b103      	cbz	r3, 800d28e <_write_r+0x1e>
 800d28c:	6023      	str	r3, [r4, #0]
 800d28e:	bd38      	pop	{r3, r4, r5, pc}
 800d290:	200027e8 	.word	0x200027e8

0800d294 <__errno>:
 800d294:	4b01      	ldr	r3, [pc, #4]	@ (800d29c <__errno+0x8>)
 800d296:	6818      	ldr	r0, [r3, #0]
 800d298:	4770      	bx	lr
 800d29a:	bf00      	nop
 800d29c:	200001dc 	.word	0x200001dc

0800d2a0 <__libc_init_array>:
 800d2a0:	b570      	push	{r4, r5, r6, lr}
 800d2a2:	4d0d      	ldr	r5, [pc, #52]	@ (800d2d8 <__libc_init_array+0x38>)
 800d2a4:	4c0d      	ldr	r4, [pc, #52]	@ (800d2dc <__libc_init_array+0x3c>)
 800d2a6:	1b64      	subs	r4, r4, r5
 800d2a8:	10a4      	asrs	r4, r4, #2
 800d2aa:	2600      	movs	r6, #0
 800d2ac:	42a6      	cmp	r6, r4
 800d2ae:	d109      	bne.n	800d2c4 <__libc_init_array+0x24>
 800d2b0:	4d0b      	ldr	r5, [pc, #44]	@ (800d2e0 <__libc_init_array+0x40>)
 800d2b2:	4c0c      	ldr	r4, [pc, #48]	@ (800d2e4 <__libc_init_array+0x44>)
 800d2b4:	f002 feac 	bl	8010010 <_init>
 800d2b8:	1b64      	subs	r4, r4, r5
 800d2ba:	10a4      	asrs	r4, r4, #2
 800d2bc:	2600      	movs	r6, #0
 800d2be:	42a6      	cmp	r6, r4
 800d2c0:	d105      	bne.n	800d2ce <__libc_init_array+0x2e>
 800d2c2:	bd70      	pop	{r4, r5, r6, pc}
 800d2c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800d2c8:	4798      	blx	r3
 800d2ca:	3601      	adds	r6, #1
 800d2cc:	e7ee      	b.n	800d2ac <__libc_init_array+0xc>
 800d2ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800d2d2:	4798      	blx	r3
 800d2d4:	3601      	adds	r6, #1
 800d2d6:	e7f2      	b.n	800d2be <__libc_init_array+0x1e>
 800d2d8:	080104b8 	.word	0x080104b8
 800d2dc:	080104b8 	.word	0x080104b8
 800d2e0:	080104b8 	.word	0x080104b8
 800d2e4:	080104bc 	.word	0x080104bc

0800d2e8 <__retarget_lock_init_recursive>:
 800d2e8:	4770      	bx	lr

0800d2ea <__retarget_lock_acquire_recursive>:
 800d2ea:	4770      	bx	lr

0800d2ec <__retarget_lock_release_recursive>:
 800d2ec:	4770      	bx	lr

0800d2ee <memcpy>:
 800d2ee:	440a      	add	r2, r1
 800d2f0:	4291      	cmp	r1, r2
 800d2f2:	f100 33ff 	add.w	r3, r0, #4294967295
 800d2f6:	d100      	bne.n	800d2fa <memcpy+0xc>
 800d2f8:	4770      	bx	lr
 800d2fa:	b510      	push	{r4, lr}
 800d2fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d300:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d304:	4291      	cmp	r1, r2
 800d306:	d1f9      	bne.n	800d2fc <memcpy+0xe>
 800d308:	bd10      	pop	{r4, pc}
 800d30a:	0000      	movs	r0, r0
 800d30c:	0000      	movs	r0, r0
	...

0800d310 <nan>:
 800d310:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d318 <nan+0x8>
 800d314:	4770      	bx	lr
 800d316:	bf00      	nop
 800d318:	00000000 	.word	0x00000000
 800d31c:	7ff80000 	.word	0x7ff80000

0800d320 <_free_r>:
 800d320:	b538      	push	{r3, r4, r5, lr}
 800d322:	4605      	mov	r5, r0
 800d324:	2900      	cmp	r1, #0
 800d326:	d041      	beq.n	800d3ac <_free_r+0x8c>
 800d328:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d32c:	1f0c      	subs	r4, r1, #4
 800d32e:	2b00      	cmp	r3, #0
 800d330:	bfb8      	it	lt
 800d332:	18e4      	addlt	r4, r4, r3
 800d334:	f7ff f81c 	bl	800c370 <__malloc_lock>
 800d338:	4a1d      	ldr	r2, [pc, #116]	@ (800d3b0 <_free_r+0x90>)
 800d33a:	6813      	ldr	r3, [r2, #0]
 800d33c:	b933      	cbnz	r3, 800d34c <_free_r+0x2c>
 800d33e:	6063      	str	r3, [r4, #4]
 800d340:	6014      	str	r4, [r2, #0]
 800d342:	4628      	mov	r0, r5
 800d344:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d348:	f7ff b818 	b.w	800c37c <__malloc_unlock>
 800d34c:	42a3      	cmp	r3, r4
 800d34e:	d908      	bls.n	800d362 <_free_r+0x42>
 800d350:	6820      	ldr	r0, [r4, #0]
 800d352:	1821      	adds	r1, r4, r0
 800d354:	428b      	cmp	r3, r1
 800d356:	bf01      	itttt	eq
 800d358:	6819      	ldreq	r1, [r3, #0]
 800d35a:	685b      	ldreq	r3, [r3, #4]
 800d35c:	1809      	addeq	r1, r1, r0
 800d35e:	6021      	streq	r1, [r4, #0]
 800d360:	e7ed      	b.n	800d33e <_free_r+0x1e>
 800d362:	461a      	mov	r2, r3
 800d364:	685b      	ldr	r3, [r3, #4]
 800d366:	b10b      	cbz	r3, 800d36c <_free_r+0x4c>
 800d368:	42a3      	cmp	r3, r4
 800d36a:	d9fa      	bls.n	800d362 <_free_r+0x42>
 800d36c:	6811      	ldr	r1, [r2, #0]
 800d36e:	1850      	adds	r0, r2, r1
 800d370:	42a0      	cmp	r0, r4
 800d372:	d10b      	bne.n	800d38c <_free_r+0x6c>
 800d374:	6820      	ldr	r0, [r4, #0]
 800d376:	4401      	add	r1, r0
 800d378:	1850      	adds	r0, r2, r1
 800d37a:	4283      	cmp	r3, r0
 800d37c:	6011      	str	r1, [r2, #0]
 800d37e:	d1e0      	bne.n	800d342 <_free_r+0x22>
 800d380:	6818      	ldr	r0, [r3, #0]
 800d382:	685b      	ldr	r3, [r3, #4]
 800d384:	6053      	str	r3, [r2, #4]
 800d386:	4408      	add	r0, r1
 800d388:	6010      	str	r0, [r2, #0]
 800d38a:	e7da      	b.n	800d342 <_free_r+0x22>
 800d38c:	d902      	bls.n	800d394 <_free_r+0x74>
 800d38e:	230c      	movs	r3, #12
 800d390:	602b      	str	r3, [r5, #0]
 800d392:	e7d6      	b.n	800d342 <_free_r+0x22>
 800d394:	6820      	ldr	r0, [r4, #0]
 800d396:	1821      	adds	r1, r4, r0
 800d398:	428b      	cmp	r3, r1
 800d39a:	bf04      	itt	eq
 800d39c:	6819      	ldreq	r1, [r3, #0]
 800d39e:	685b      	ldreq	r3, [r3, #4]
 800d3a0:	6063      	str	r3, [r4, #4]
 800d3a2:	bf04      	itt	eq
 800d3a4:	1809      	addeq	r1, r1, r0
 800d3a6:	6021      	streq	r1, [r4, #0]
 800d3a8:	6054      	str	r4, [r2, #4]
 800d3aa:	e7ca      	b.n	800d342 <_free_r+0x22>
 800d3ac:	bd38      	pop	{r3, r4, r5, pc}
 800d3ae:	bf00      	nop
 800d3b0:	200026a8 	.word	0x200026a8

0800d3b4 <rshift>:
 800d3b4:	6903      	ldr	r3, [r0, #16]
 800d3b6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d3ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d3be:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d3c2:	f100 0414 	add.w	r4, r0, #20
 800d3c6:	dd45      	ble.n	800d454 <rshift+0xa0>
 800d3c8:	f011 011f 	ands.w	r1, r1, #31
 800d3cc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d3d0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d3d4:	d10c      	bne.n	800d3f0 <rshift+0x3c>
 800d3d6:	f100 0710 	add.w	r7, r0, #16
 800d3da:	4629      	mov	r1, r5
 800d3dc:	42b1      	cmp	r1, r6
 800d3de:	d334      	bcc.n	800d44a <rshift+0x96>
 800d3e0:	1a9b      	subs	r3, r3, r2
 800d3e2:	009b      	lsls	r3, r3, #2
 800d3e4:	1eea      	subs	r2, r5, #3
 800d3e6:	4296      	cmp	r6, r2
 800d3e8:	bf38      	it	cc
 800d3ea:	2300      	movcc	r3, #0
 800d3ec:	4423      	add	r3, r4
 800d3ee:	e015      	b.n	800d41c <rshift+0x68>
 800d3f0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d3f4:	f1c1 0820 	rsb	r8, r1, #32
 800d3f8:	40cf      	lsrs	r7, r1
 800d3fa:	f105 0e04 	add.w	lr, r5, #4
 800d3fe:	46a1      	mov	r9, r4
 800d400:	4576      	cmp	r6, lr
 800d402:	46f4      	mov	ip, lr
 800d404:	d815      	bhi.n	800d432 <rshift+0x7e>
 800d406:	1a9a      	subs	r2, r3, r2
 800d408:	0092      	lsls	r2, r2, #2
 800d40a:	3a04      	subs	r2, #4
 800d40c:	3501      	adds	r5, #1
 800d40e:	42ae      	cmp	r6, r5
 800d410:	bf38      	it	cc
 800d412:	2200      	movcc	r2, #0
 800d414:	18a3      	adds	r3, r4, r2
 800d416:	50a7      	str	r7, [r4, r2]
 800d418:	b107      	cbz	r7, 800d41c <rshift+0x68>
 800d41a:	3304      	adds	r3, #4
 800d41c:	1b1a      	subs	r2, r3, r4
 800d41e:	42a3      	cmp	r3, r4
 800d420:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d424:	bf08      	it	eq
 800d426:	2300      	moveq	r3, #0
 800d428:	6102      	str	r2, [r0, #16]
 800d42a:	bf08      	it	eq
 800d42c:	6143      	streq	r3, [r0, #20]
 800d42e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d432:	f8dc c000 	ldr.w	ip, [ip]
 800d436:	fa0c fc08 	lsl.w	ip, ip, r8
 800d43a:	ea4c 0707 	orr.w	r7, ip, r7
 800d43e:	f849 7b04 	str.w	r7, [r9], #4
 800d442:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d446:	40cf      	lsrs	r7, r1
 800d448:	e7da      	b.n	800d400 <rshift+0x4c>
 800d44a:	f851 cb04 	ldr.w	ip, [r1], #4
 800d44e:	f847 cf04 	str.w	ip, [r7, #4]!
 800d452:	e7c3      	b.n	800d3dc <rshift+0x28>
 800d454:	4623      	mov	r3, r4
 800d456:	e7e1      	b.n	800d41c <rshift+0x68>

0800d458 <__hexdig_fun>:
 800d458:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d45c:	2b09      	cmp	r3, #9
 800d45e:	d802      	bhi.n	800d466 <__hexdig_fun+0xe>
 800d460:	3820      	subs	r0, #32
 800d462:	b2c0      	uxtb	r0, r0
 800d464:	4770      	bx	lr
 800d466:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d46a:	2b05      	cmp	r3, #5
 800d46c:	d801      	bhi.n	800d472 <__hexdig_fun+0x1a>
 800d46e:	3847      	subs	r0, #71	@ 0x47
 800d470:	e7f7      	b.n	800d462 <__hexdig_fun+0xa>
 800d472:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d476:	2b05      	cmp	r3, #5
 800d478:	d801      	bhi.n	800d47e <__hexdig_fun+0x26>
 800d47a:	3827      	subs	r0, #39	@ 0x27
 800d47c:	e7f1      	b.n	800d462 <__hexdig_fun+0xa>
 800d47e:	2000      	movs	r0, #0
 800d480:	4770      	bx	lr
	...

0800d484 <__gethex>:
 800d484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d488:	b085      	sub	sp, #20
 800d48a:	468a      	mov	sl, r1
 800d48c:	9302      	str	r3, [sp, #8]
 800d48e:	680b      	ldr	r3, [r1, #0]
 800d490:	9001      	str	r0, [sp, #4]
 800d492:	4690      	mov	r8, r2
 800d494:	1c9c      	adds	r4, r3, #2
 800d496:	46a1      	mov	r9, r4
 800d498:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d49c:	2830      	cmp	r0, #48	@ 0x30
 800d49e:	d0fa      	beq.n	800d496 <__gethex+0x12>
 800d4a0:	eba9 0303 	sub.w	r3, r9, r3
 800d4a4:	f1a3 0b02 	sub.w	fp, r3, #2
 800d4a8:	f7ff ffd6 	bl	800d458 <__hexdig_fun>
 800d4ac:	4605      	mov	r5, r0
 800d4ae:	2800      	cmp	r0, #0
 800d4b0:	d168      	bne.n	800d584 <__gethex+0x100>
 800d4b2:	49a0      	ldr	r1, [pc, #640]	@ (800d734 <__gethex+0x2b0>)
 800d4b4:	2201      	movs	r2, #1
 800d4b6:	4648      	mov	r0, r9
 800d4b8:	f7ff fe83 	bl	800d1c2 <strncmp>
 800d4bc:	4607      	mov	r7, r0
 800d4be:	2800      	cmp	r0, #0
 800d4c0:	d167      	bne.n	800d592 <__gethex+0x10e>
 800d4c2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d4c6:	4626      	mov	r6, r4
 800d4c8:	f7ff ffc6 	bl	800d458 <__hexdig_fun>
 800d4cc:	2800      	cmp	r0, #0
 800d4ce:	d062      	beq.n	800d596 <__gethex+0x112>
 800d4d0:	4623      	mov	r3, r4
 800d4d2:	7818      	ldrb	r0, [r3, #0]
 800d4d4:	2830      	cmp	r0, #48	@ 0x30
 800d4d6:	4699      	mov	r9, r3
 800d4d8:	f103 0301 	add.w	r3, r3, #1
 800d4dc:	d0f9      	beq.n	800d4d2 <__gethex+0x4e>
 800d4de:	f7ff ffbb 	bl	800d458 <__hexdig_fun>
 800d4e2:	fab0 f580 	clz	r5, r0
 800d4e6:	096d      	lsrs	r5, r5, #5
 800d4e8:	f04f 0b01 	mov.w	fp, #1
 800d4ec:	464a      	mov	r2, r9
 800d4ee:	4616      	mov	r6, r2
 800d4f0:	3201      	adds	r2, #1
 800d4f2:	7830      	ldrb	r0, [r6, #0]
 800d4f4:	f7ff ffb0 	bl	800d458 <__hexdig_fun>
 800d4f8:	2800      	cmp	r0, #0
 800d4fa:	d1f8      	bne.n	800d4ee <__gethex+0x6a>
 800d4fc:	498d      	ldr	r1, [pc, #564]	@ (800d734 <__gethex+0x2b0>)
 800d4fe:	2201      	movs	r2, #1
 800d500:	4630      	mov	r0, r6
 800d502:	f7ff fe5e 	bl	800d1c2 <strncmp>
 800d506:	2800      	cmp	r0, #0
 800d508:	d13f      	bne.n	800d58a <__gethex+0x106>
 800d50a:	b944      	cbnz	r4, 800d51e <__gethex+0x9a>
 800d50c:	1c74      	adds	r4, r6, #1
 800d50e:	4622      	mov	r2, r4
 800d510:	4616      	mov	r6, r2
 800d512:	3201      	adds	r2, #1
 800d514:	7830      	ldrb	r0, [r6, #0]
 800d516:	f7ff ff9f 	bl	800d458 <__hexdig_fun>
 800d51a:	2800      	cmp	r0, #0
 800d51c:	d1f8      	bne.n	800d510 <__gethex+0x8c>
 800d51e:	1ba4      	subs	r4, r4, r6
 800d520:	00a7      	lsls	r7, r4, #2
 800d522:	7833      	ldrb	r3, [r6, #0]
 800d524:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d528:	2b50      	cmp	r3, #80	@ 0x50
 800d52a:	d13e      	bne.n	800d5aa <__gethex+0x126>
 800d52c:	7873      	ldrb	r3, [r6, #1]
 800d52e:	2b2b      	cmp	r3, #43	@ 0x2b
 800d530:	d033      	beq.n	800d59a <__gethex+0x116>
 800d532:	2b2d      	cmp	r3, #45	@ 0x2d
 800d534:	d034      	beq.n	800d5a0 <__gethex+0x11c>
 800d536:	1c71      	adds	r1, r6, #1
 800d538:	2400      	movs	r4, #0
 800d53a:	7808      	ldrb	r0, [r1, #0]
 800d53c:	f7ff ff8c 	bl	800d458 <__hexdig_fun>
 800d540:	1e43      	subs	r3, r0, #1
 800d542:	b2db      	uxtb	r3, r3
 800d544:	2b18      	cmp	r3, #24
 800d546:	d830      	bhi.n	800d5aa <__gethex+0x126>
 800d548:	f1a0 0210 	sub.w	r2, r0, #16
 800d54c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d550:	f7ff ff82 	bl	800d458 <__hexdig_fun>
 800d554:	f100 3cff 	add.w	ip, r0, #4294967295
 800d558:	fa5f fc8c 	uxtb.w	ip, ip
 800d55c:	f1bc 0f18 	cmp.w	ip, #24
 800d560:	f04f 030a 	mov.w	r3, #10
 800d564:	d91e      	bls.n	800d5a4 <__gethex+0x120>
 800d566:	b104      	cbz	r4, 800d56a <__gethex+0xe6>
 800d568:	4252      	negs	r2, r2
 800d56a:	4417      	add	r7, r2
 800d56c:	f8ca 1000 	str.w	r1, [sl]
 800d570:	b1ed      	cbz	r5, 800d5ae <__gethex+0x12a>
 800d572:	f1bb 0f00 	cmp.w	fp, #0
 800d576:	bf0c      	ite	eq
 800d578:	2506      	moveq	r5, #6
 800d57a:	2500      	movne	r5, #0
 800d57c:	4628      	mov	r0, r5
 800d57e:	b005      	add	sp, #20
 800d580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d584:	2500      	movs	r5, #0
 800d586:	462c      	mov	r4, r5
 800d588:	e7b0      	b.n	800d4ec <__gethex+0x68>
 800d58a:	2c00      	cmp	r4, #0
 800d58c:	d1c7      	bne.n	800d51e <__gethex+0x9a>
 800d58e:	4627      	mov	r7, r4
 800d590:	e7c7      	b.n	800d522 <__gethex+0x9e>
 800d592:	464e      	mov	r6, r9
 800d594:	462f      	mov	r7, r5
 800d596:	2501      	movs	r5, #1
 800d598:	e7c3      	b.n	800d522 <__gethex+0x9e>
 800d59a:	2400      	movs	r4, #0
 800d59c:	1cb1      	adds	r1, r6, #2
 800d59e:	e7cc      	b.n	800d53a <__gethex+0xb6>
 800d5a0:	2401      	movs	r4, #1
 800d5a2:	e7fb      	b.n	800d59c <__gethex+0x118>
 800d5a4:	fb03 0002 	mla	r0, r3, r2, r0
 800d5a8:	e7ce      	b.n	800d548 <__gethex+0xc4>
 800d5aa:	4631      	mov	r1, r6
 800d5ac:	e7de      	b.n	800d56c <__gethex+0xe8>
 800d5ae:	eba6 0309 	sub.w	r3, r6, r9
 800d5b2:	3b01      	subs	r3, #1
 800d5b4:	4629      	mov	r1, r5
 800d5b6:	2b07      	cmp	r3, #7
 800d5b8:	dc0a      	bgt.n	800d5d0 <__gethex+0x14c>
 800d5ba:	9801      	ldr	r0, [sp, #4]
 800d5bc:	f000 fa46 	bl	800da4c <_Balloc>
 800d5c0:	4604      	mov	r4, r0
 800d5c2:	b940      	cbnz	r0, 800d5d6 <__gethex+0x152>
 800d5c4:	4b5c      	ldr	r3, [pc, #368]	@ (800d738 <__gethex+0x2b4>)
 800d5c6:	4602      	mov	r2, r0
 800d5c8:	21e4      	movs	r1, #228	@ 0xe4
 800d5ca:	485c      	ldr	r0, [pc, #368]	@ (800d73c <__gethex+0x2b8>)
 800d5cc:	f000 ffaa 	bl	800e524 <__assert_func>
 800d5d0:	3101      	adds	r1, #1
 800d5d2:	105b      	asrs	r3, r3, #1
 800d5d4:	e7ef      	b.n	800d5b6 <__gethex+0x132>
 800d5d6:	f100 0a14 	add.w	sl, r0, #20
 800d5da:	2300      	movs	r3, #0
 800d5dc:	4655      	mov	r5, sl
 800d5de:	469b      	mov	fp, r3
 800d5e0:	45b1      	cmp	r9, r6
 800d5e2:	d337      	bcc.n	800d654 <__gethex+0x1d0>
 800d5e4:	f845 bb04 	str.w	fp, [r5], #4
 800d5e8:	eba5 050a 	sub.w	r5, r5, sl
 800d5ec:	10ad      	asrs	r5, r5, #2
 800d5ee:	6125      	str	r5, [r4, #16]
 800d5f0:	4658      	mov	r0, fp
 800d5f2:	f000 fb1d 	bl	800dc30 <__hi0bits>
 800d5f6:	016d      	lsls	r5, r5, #5
 800d5f8:	f8d8 6000 	ldr.w	r6, [r8]
 800d5fc:	1a2d      	subs	r5, r5, r0
 800d5fe:	42b5      	cmp	r5, r6
 800d600:	dd54      	ble.n	800d6ac <__gethex+0x228>
 800d602:	1bad      	subs	r5, r5, r6
 800d604:	4629      	mov	r1, r5
 800d606:	4620      	mov	r0, r4
 800d608:	f000 feb1 	bl	800e36e <__any_on>
 800d60c:	4681      	mov	r9, r0
 800d60e:	b178      	cbz	r0, 800d630 <__gethex+0x1ac>
 800d610:	1e6b      	subs	r3, r5, #1
 800d612:	1159      	asrs	r1, r3, #5
 800d614:	f003 021f 	and.w	r2, r3, #31
 800d618:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d61c:	f04f 0901 	mov.w	r9, #1
 800d620:	fa09 f202 	lsl.w	r2, r9, r2
 800d624:	420a      	tst	r2, r1
 800d626:	d003      	beq.n	800d630 <__gethex+0x1ac>
 800d628:	454b      	cmp	r3, r9
 800d62a:	dc36      	bgt.n	800d69a <__gethex+0x216>
 800d62c:	f04f 0902 	mov.w	r9, #2
 800d630:	4629      	mov	r1, r5
 800d632:	4620      	mov	r0, r4
 800d634:	f7ff febe 	bl	800d3b4 <rshift>
 800d638:	442f      	add	r7, r5
 800d63a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d63e:	42bb      	cmp	r3, r7
 800d640:	da42      	bge.n	800d6c8 <__gethex+0x244>
 800d642:	9801      	ldr	r0, [sp, #4]
 800d644:	4621      	mov	r1, r4
 800d646:	f000 fa41 	bl	800dacc <_Bfree>
 800d64a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d64c:	2300      	movs	r3, #0
 800d64e:	6013      	str	r3, [r2, #0]
 800d650:	25a3      	movs	r5, #163	@ 0xa3
 800d652:	e793      	b.n	800d57c <__gethex+0xf8>
 800d654:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d658:	2a2e      	cmp	r2, #46	@ 0x2e
 800d65a:	d012      	beq.n	800d682 <__gethex+0x1fe>
 800d65c:	2b20      	cmp	r3, #32
 800d65e:	d104      	bne.n	800d66a <__gethex+0x1e6>
 800d660:	f845 bb04 	str.w	fp, [r5], #4
 800d664:	f04f 0b00 	mov.w	fp, #0
 800d668:	465b      	mov	r3, fp
 800d66a:	7830      	ldrb	r0, [r6, #0]
 800d66c:	9303      	str	r3, [sp, #12]
 800d66e:	f7ff fef3 	bl	800d458 <__hexdig_fun>
 800d672:	9b03      	ldr	r3, [sp, #12]
 800d674:	f000 000f 	and.w	r0, r0, #15
 800d678:	4098      	lsls	r0, r3
 800d67a:	ea4b 0b00 	orr.w	fp, fp, r0
 800d67e:	3304      	adds	r3, #4
 800d680:	e7ae      	b.n	800d5e0 <__gethex+0x15c>
 800d682:	45b1      	cmp	r9, r6
 800d684:	d8ea      	bhi.n	800d65c <__gethex+0x1d8>
 800d686:	492b      	ldr	r1, [pc, #172]	@ (800d734 <__gethex+0x2b0>)
 800d688:	9303      	str	r3, [sp, #12]
 800d68a:	2201      	movs	r2, #1
 800d68c:	4630      	mov	r0, r6
 800d68e:	f7ff fd98 	bl	800d1c2 <strncmp>
 800d692:	9b03      	ldr	r3, [sp, #12]
 800d694:	2800      	cmp	r0, #0
 800d696:	d1e1      	bne.n	800d65c <__gethex+0x1d8>
 800d698:	e7a2      	b.n	800d5e0 <__gethex+0x15c>
 800d69a:	1ea9      	subs	r1, r5, #2
 800d69c:	4620      	mov	r0, r4
 800d69e:	f000 fe66 	bl	800e36e <__any_on>
 800d6a2:	2800      	cmp	r0, #0
 800d6a4:	d0c2      	beq.n	800d62c <__gethex+0x1a8>
 800d6a6:	f04f 0903 	mov.w	r9, #3
 800d6aa:	e7c1      	b.n	800d630 <__gethex+0x1ac>
 800d6ac:	da09      	bge.n	800d6c2 <__gethex+0x23e>
 800d6ae:	1b75      	subs	r5, r6, r5
 800d6b0:	4621      	mov	r1, r4
 800d6b2:	9801      	ldr	r0, [sp, #4]
 800d6b4:	462a      	mov	r2, r5
 800d6b6:	f000 fc21 	bl	800defc <__lshift>
 800d6ba:	1b7f      	subs	r7, r7, r5
 800d6bc:	4604      	mov	r4, r0
 800d6be:	f100 0a14 	add.w	sl, r0, #20
 800d6c2:	f04f 0900 	mov.w	r9, #0
 800d6c6:	e7b8      	b.n	800d63a <__gethex+0x1b6>
 800d6c8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d6cc:	42bd      	cmp	r5, r7
 800d6ce:	dd6f      	ble.n	800d7b0 <__gethex+0x32c>
 800d6d0:	1bed      	subs	r5, r5, r7
 800d6d2:	42ae      	cmp	r6, r5
 800d6d4:	dc34      	bgt.n	800d740 <__gethex+0x2bc>
 800d6d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d6da:	2b02      	cmp	r3, #2
 800d6dc:	d022      	beq.n	800d724 <__gethex+0x2a0>
 800d6de:	2b03      	cmp	r3, #3
 800d6e0:	d024      	beq.n	800d72c <__gethex+0x2a8>
 800d6e2:	2b01      	cmp	r3, #1
 800d6e4:	d115      	bne.n	800d712 <__gethex+0x28e>
 800d6e6:	42ae      	cmp	r6, r5
 800d6e8:	d113      	bne.n	800d712 <__gethex+0x28e>
 800d6ea:	2e01      	cmp	r6, #1
 800d6ec:	d10b      	bne.n	800d706 <__gethex+0x282>
 800d6ee:	9a02      	ldr	r2, [sp, #8]
 800d6f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d6f4:	6013      	str	r3, [r2, #0]
 800d6f6:	2301      	movs	r3, #1
 800d6f8:	6123      	str	r3, [r4, #16]
 800d6fa:	f8ca 3000 	str.w	r3, [sl]
 800d6fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d700:	2562      	movs	r5, #98	@ 0x62
 800d702:	601c      	str	r4, [r3, #0]
 800d704:	e73a      	b.n	800d57c <__gethex+0xf8>
 800d706:	1e71      	subs	r1, r6, #1
 800d708:	4620      	mov	r0, r4
 800d70a:	f000 fe30 	bl	800e36e <__any_on>
 800d70e:	2800      	cmp	r0, #0
 800d710:	d1ed      	bne.n	800d6ee <__gethex+0x26a>
 800d712:	9801      	ldr	r0, [sp, #4]
 800d714:	4621      	mov	r1, r4
 800d716:	f000 f9d9 	bl	800dacc <_Bfree>
 800d71a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d71c:	2300      	movs	r3, #0
 800d71e:	6013      	str	r3, [r2, #0]
 800d720:	2550      	movs	r5, #80	@ 0x50
 800d722:	e72b      	b.n	800d57c <__gethex+0xf8>
 800d724:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d726:	2b00      	cmp	r3, #0
 800d728:	d1f3      	bne.n	800d712 <__gethex+0x28e>
 800d72a:	e7e0      	b.n	800d6ee <__gethex+0x26a>
 800d72c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d1dd      	bne.n	800d6ee <__gethex+0x26a>
 800d732:	e7ee      	b.n	800d712 <__gethex+0x28e>
 800d734:	08010090 	.word	0x08010090
 800d738:	080100f8 	.word	0x080100f8
 800d73c:	08010109 	.word	0x08010109
 800d740:	1e6f      	subs	r7, r5, #1
 800d742:	f1b9 0f00 	cmp.w	r9, #0
 800d746:	d130      	bne.n	800d7aa <__gethex+0x326>
 800d748:	b127      	cbz	r7, 800d754 <__gethex+0x2d0>
 800d74a:	4639      	mov	r1, r7
 800d74c:	4620      	mov	r0, r4
 800d74e:	f000 fe0e 	bl	800e36e <__any_on>
 800d752:	4681      	mov	r9, r0
 800d754:	117a      	asrs	r2, r7, #5
 800d756:	2301      	movs	r3, #1
 800d758:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d75c:	f007 071f 	and.w	r7, r7, #31
 800d760:	40bb      	lsls	r3, r7
 800d762:	4213      	tst	r3, r2
 800d764:	4629      	mov	r1, r5
 800d766:	4620      	mov	r0, r4
 800d768:	bf18      	it	ne
 800d76a:	f049 0902 	orrne.w	r9, r9, #2
 800d76e:	f7ff fe21 	bl	800d3b4 <rshift>
 800d772:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d776:	1b76      	subs	r6, r6, r5
 800d778:	2502      	movs	r5, #2
 800d77a:	f1b9 0f00 	cmp.w	r9, #0
 800d77e:	d047      	beq.n	800d810 <__gethex+0x38c>
 800d780:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d784:	2b02      	cmp	r3, #2
 800d786:	d015      	beq.n	800d7b4 <__gethex+0x330>
 800d788:	2b03      	cmp	r3, #3
 800d78a:	d017      	beq.n	800d7bc <__gethex+0x338>
 800d78c:	2b01      	cmp	r3, #1
 800d78e:	d109      	bne.n	800d7a4 <__gethex+0x320>
 800d790:	f019 0f02 	tst.w	r9, #2
 800d794:	d006      	beq.n	800d7a4 <__gethex+0x320>
 800d796:	f8da 3000 	ldr.w	r3, [sl]
 800d79a:	ea49 0903 	orr.w	r9, r9, r3
 800d79e:	f019 0f01 	tst.w	r9, #1
 800d7a2:	d10e      	bne.n	800d7c2 <__gethex+0x33e>
 800d7a4:	f045 0510 	orr.w	r5, r5, #16
 800d7a8:	e032      	b.n	800d810 <__gethex+0x38c>
 800d7aa:	f04f 0901 	mov.w	r9, #1
 800d7ae:	e7d1      	b.n	800d754 <__gethex+0x2d0>
 800d7b0:	2501      	movs	r5, #1
 800d7b2:	e7e2      	b.n	800d77a <__gethex+0x2f6>
 800d7b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d7b6:	f1c3 0301 	rsb	r3, r3, #1
 800d7ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d7bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d0f0      	beq.n	800d7a4 <__gethex+0x320>
 800d7c2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d7c6:	f104 0314 	add.w	r3, r4, #20
 800d7ca:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d7ce:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d7d2:	f04f 0c00 	mov.w	ip, #0
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d7dc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d7e0:	d01b      	beq.n	800d81a <__gethex+0x396>
 800d7e2:	3201      	adds	r2, #1
 800d7e4:	6002      	str	r2, [r0, #0]
 800d7e6:	2d02      	cmp	r5, #2
 800d7e8:	f104 0314 	add.w	r3, r4, #20
 800d7ec:	d13c      	bne.n	800d868 <__gethex+0x3e4>
 800d7ee:	f8d8 2000 	ldr.w	r2, [r8]
 800d7f2:	3a01      	subs	r2, #1
 800d7f4:	42b2      	cmp	r2, r6
 800d7f6:	d109      	bne.n	800d80c <__gethex+0x388>
 800d7f8:	1171      	asrs	r1, r6, #5
 800d7fa:	2201      	movs	r2, #1
 800d7fc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d800:	f006 061f 	and.w	r6, r6, #31
 800d804:	fa02 f606 	lsl.w	r6, r2, r6
 800d808:	421e      	tst	r6, r3
 800d80a:	d13a      	bne.n	800d882 <__gethex+0x3fe>
 800d80c:	f045 0520 	orr.w	r5, r5, #32
 800d810:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d812:	601c      	str	r4, [r3, #0]
 800d814:	9b02      	ldr	r3, [sp, #8]
 800d816:	601f      	str	r7, [r3, #0]
 800d818:	e6b0      	b.n	800d57c <__gethex+0xf8>
 800d81a:	4299      	cmp	r1, r3
 800d81c:	f843 cc04 	str.w	ip, [r3, #-4]
 800d820:	d8d9      	bhi.n	800d7d6 <__gethex+0x352>
 800d822:	68a3      	ldr	r3, [r4, #8]
 800d824:	459b      	cmp	fp, r3
 800d826:	db17      	blt.n	800d858 <__gethex+0x3d4>
 800d828:	6861      	ldr	r1, [r4, #4]
 800d82a:	9801      	ldr	r0, [sp, #4]
 800d82c:	3101      	adds	r1, #1
 800d82e:	f000 f90d 	bl	800da4c <_Balloc>
 800d832:	4681      	mov	r9, r0
 800d834:	b918      	cbnz	r0, 800d83e <__gethex+0x3ba>
 800d836:	4b1a      	ldr	r3, [pc, #104]	@ (800d8a0 <__gethex+0x41c>)
 800d838:	4602      	mov	r2, r0
 800d83a:	2184      	movs	r1, #132	@ 0x84
 800d83c:	e6c5      	b.n	800d5ca <__gethex+0x146>
 800d83e:	6922      	ldr	r2, [r4, #16]
 800d840:	3202      	adds	r2, #2
 800d842:	f104 010c 	add.w	r1, r4, #12
 800d846:	0092      	lsls	r2, r2, #2
 800d848:	300c      	adds	r0, #12
 800d84a:	f7ff fd50 	bl	800d2ee <memcpy>
 800d84e:	4621      	mov	r1, r4
 800d850:	9801      	ldr	r0, [sp, #4]
 800d852:	f000 f93b 	bl	800dacc <_Bfree>
 800d856:	464c      	mov	r4, r9
 800d858:	6923      	ldr	r3, [r4, #16]
 800d85a:	1c5a      	adds	r2, r3, #1
 800d85c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d860:	6122      	str	r2, [r4, #16]
 800d862:	2201      	movs	r2, #1
 800d864:	615a      	str	r2, [r3, #20]
 800d866:	e7be      	b.n	800d7e6 <__gethex+0x362>
 800d868:	6922      	ldr	r2, [r4, #16]
 800d86a:	455a      	cmp	r2, fp
 800d86c:	dd0b      	ble.n	800d886 <__gethex+0x402>
 800d86e:	2101      	movs	r1, #1
 800d870:	4620      	mov	r0, r4
 800d872:	f7ff fd9f 	bl	800d3b4 <rshift>
 800d876:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d87a:	3701      	adds	r7, #1
 800d87c:	42bb      	cmp	r3, r7
 800d87e:	f6ff aee0 	blt.w	800d642 <__gethex+0x1be>
 800d882:	2501      	movs	r5, #1
 800d884:	e7c2      	b.n	800d80c <__gethex+0x388>
 800d886:	f016 061f 	ands.w	r6, r6, #31
 800d88a:	d0fa      	beq.n	800d882 <__gethex+0x3fe>
 800d88c:	4453      	add	r3, sl
 800d88e:	f1c6 0620 	rsb	r6, r6, #32
 800d892:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d896:	f000 f9cb 	bl	800dc30 <__hi0bits>
 800d89a:	42b0      	cmp	r0, r6
 800d89c:	dbe7      	blt.n	800d86e <__gethex+0x3ea>
 800d89e:	e7f0      	b.n	800d882 <__gethex+0x3fe>
 800d8a0:	080100f8 	.word	0x080100f8

0800d8a4 <L_shift>:
 800d8a4:	f1c2 0208 	rsb	r2, r2, #8
 800d8a8:	0092      	lsls	r2, r2, #2
 800d8aa:	b570      	push	{r4, r5, r6, lr}
 800d8ac:	f1c2 0620 	rsb	r6, r2, #32
 800d8b0:	6843      	ldr	r3, [r0, #4]
 800d8b2:	6804      	ldr	r4, [r0, #0]
 800d8b4:	fa03 f506 	lsl.w	r5, r3, r6
 800d8b8:	432c      	orrs	r4, r5
 800d8ba:	40d3      	lsrs	r3, r2
 800d8bc:	6004      	str	r4, [r0, #0]
 800d8be:	f840 3f04 	str.w	r3, [r0, #4]!
 800d8c2:	4288      	cmp	r0, r1
 800d8c4:	d3f4      	bcc.n	800d8b0 <L_shift+0xc>
 800d8c6:	bd70      	pop	{r4, r5, r6, pc}

0800d8c8 <__match>:
 800d8c8:	b530      	push	{r4, r5, lr}
 800d8ca:	6803      	ldr	r3, [r0, #0]
 800d8cc:	3301      	adds	r3, #1
 800d8ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d8d2:	b914      	cbnz	r4, 800d8da <__match+0x12>
 800d8d4:	6003      	str	r3, [r0, #0]
 800d8d6:	2001      	movs	r0, #1
 800d8d8:	bd30      	pop	{r4, r5, pc}
 800d8da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d8de:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d8e2:	2d19      	cmp	r5, #25
 800d8e4:	bf98      	it	ls
 800d8e6:	3220      	addls	r2, #32
 800d8e8:	42a2      	cmp	r2, r4
 800d8ea:	d0f0      	beq.n	800d8ce <__match+0x6>
 800d8ec:	2000      	movs	r0, #0
 800d8ee:	e7f3      	b.n	800d8d8 <__match+0x10>

0800d8f0 <__hexnan>:
 800d8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8f4:	680b      	ldr	r3, [r1, #0]
 800d8f6:	6801      	ldr	r1, [r0, #0]
 800d8f8:	115e      	asrs	r6, r3, #5
 800d8fa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d8fe:	f013 031f 	ands.w	r3, r3, #31
 800d902:	b087      	sub	sp, #28
 800d904:	bf18      	it	ne
 800d906:	3604      	addne	r6, #4
 800d908:	2500      	movs	r5, #0
 800d90a:	1f37      	subs	r7, r6, #4
 800d90c:	4682      	mov	sl, r0
 800d90e:	4690      	mov	r8, r2
 800d910:	9301      	str	r3, [sp, #4]
 800d912:	f846 5c04 	str.w	r5, [r6, #-4]
 800d916:	46b9      	mov	r9, r7
 800d918:	463c      	mov	r4, r7
 800d91a:	9502      	str	r5, [sp, #8]
 800d91c:	46ab      	mov	fp, r5
 800d91e:	784a      	ldrb	r2, [r1, #1]
 800d920:	1c4b      	adds	r3, r1, #1
 800d922:	9303      	str	r3, [sp, #12]
 800d924:	b342      	cbz	r2, 800d978 <__hexnan+0x88>
 800d926:	4610      	mov	r0, r2
 800d928:	9105      	str	r1, [sp, #20]
 800d92a:	9204      	str	r2, [sp, #16]
 800d92c:	f7ff fd94 	bl	800d458 <__hexdig_fun>
 800d930:	2800      	cmp	r0, #0
 800d932:	d151      	bne.n	800d9d8 <__hexnan+0xe8>
 800d934:	9a04      	ldr	r2, [sp, #16]
 800d936:	9905      	ldr	r1, [sp, #20]
 800d938:	2a20      	cmp	r2, #32
 800d93a:	d818      	bhi.n	800d96e <__hexnan+0x7e>
 800d93c:	9b02      	ldr	r3, [sp, #8]
 800d93e:	459b      	cmp	fp, r3
 800d940:	dd13      	ble.n	800d96a <__hexnan+0x7a>
 800d942:	454c      	cmp	r4, r9
 800d944:	d206      	bcs.n	800d954 <__hexnan+0x64>
 800d946:	2d07      	cmp	r5, #7
 800d948:	dc04      	bgt.n	800d954 <__hexnan+0x64>
 800d94a:	462a      	mov	r2, r5
 800d94c:	4649      	mov	r1, r9
 800d94e:	4620      	mov	r0, r4
 800d950:	f7ff ffa8 	bl	800d8a4 <L_shift>
 800d954:	4544      	cmp	r4, r8
 800d956:	d952      	bls.n	800d9fe <__hexnan+0x10e>
 800d958:	2300      	movs	r3, #0
 800d95a:	f1a4 0904 	sub.w	r9, r4, #4
 800d95e:	f844 3c04 	str.w	r3, [r4, #-4]
 800d962:	f8cd b008 	str.w	fp, [sp, #8]
 800d966:	464c      	mov	r4, r9
 800d968:	461d      	mov	r5, r3
 800d96a:	9903      	ldr	r1, [sp, #12]
 800d96c:	e7d7      	b.n	800d91e <__hexnan+0x2e>
 800d96e:	2a29      	cmp	r2, #41	@ 0x29
 800d970:	d157      	bne.n	800da22 <__hexnan+0x132>
 800d972:	3102      	adds	r1, #2
 800d974:	f8ca 1000 	str.w	r1, [sl]
 800d978:	f1bb 0f00 	cmp.w	fp, #0
 800d97c:	d051      	beq.n	800da22 <__hexnan+0x132>
 800d97e:	454c      	cmp	r4, r9
 800d980:	d206      	bcs.n	800d990 <__hexnan+0xa0>
 800d982:	2d07      	cmp	r5, #7
 800d984:	dc04      	bgt.n	800d990 <__hexnan+0xa0>
 800d986:	462a      	mov	r2, r5
 800d988:	4649      	mov	r1, r9
 800d98a:	4620      	mov	r0, r4
 800d98c:	f7ff ff8a 	bl	800d8a4 <L_shift>
 800d990:	4544      	cmp	r4, r8
 800d992:	d936      	bls.n	800da02 <__hexnan+0x112>
 800d994:	f1a8 0204 	sub.w	r2, r8, #4
 800d998:	4623      	mov	r3, r4
 800d99a:	f853 1b04 	ldr.w	r1, [r3], #4
 800d99e:	f842 1f04 	str.w	r1, [r2, #4]!
 800d9a2:	429f      	cmp	r7, r3
 800d9a4:	d2f9      	bcs.n	800d99a <__hexnan+0xaa>
 800d9a6:	1b3b      	subs	r3, r7, r4
 800d9a8:	f023 0303 	bic.w	r3, r3, #3
 800d9ac:	3304      	adds	r3, #4
 800d9ae:	3401      	adds	r4, #1
 800d9b0:	3e03      	subs	r6, #3
 800d9b2:	42b4      	cmp	r4, r6
 800d9b4:	bf88      	it	hi
 800d9b6:	2304      	movhi	r3, #4
 800d9b8:	4443      	add	r3, r8
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	f843 2b04 	str.w	r2, [r3], #4
 800d9c0:	429f      	cmp	r7, r3
 800d9c2:	d2fb      	bcs.n	800d9bc <__hexnan+0xcc>
 800d9c4:	683b      	ldr	r3, [r7, #0]
 800d9c6:	b91b      	cbnz	r3, 800d9d0 <__hexnan+0xe0>
 800d9c8:	4547      	cmp	r7, r8
 800d9ca:	d128      	bne.n	800da1e <__hexnan+0x12e>
 800d9cc:	2301      	movs	r3, #1
 800d9ce:	603b      	str	r3, [r7, #0]
 800d9d0:	2005      	movs	r0, #5
 800d9d2:	b007      	add	sp, #28
 800d9d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9d8:	3501      	adds	r5, #1
 800d9da:	2d08      	cmp	r5, #8
 800d9dc:	f10b 0b01 	add.w	fp, fp, #1
 800d9e0:	dd06      	ble.n	800d9f0 <__hexnan+0x100>
 800d9e2:	4544      	cmp	r4, r8
 800d9e4:	d9c1      	bls.n	800d96a <__hexnan+0x7a>
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	f844 3c04 	str.w	r3, [r4, #-4]
 800d9ec:	2501      	movs	r5, #1
 800d9ee:	3c04      	subs	r4, #4
 800d9f0:	6822      	ldr	r2, [r4, #0]
 800d9f2:	f000 000f 	and.w	r0, r0, #15
 800d9f6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d9fa:	6020      	str	r0, [r4, #0]
 800d9fc:	e7b5      	b.n	800d96a <__hexnan+0x7a>
 800d9fe:	2508      	movs	r5, #8
 800da00:	e7b3      	b.n	800d96a <__hexnan+0x7a>
 800da02:	9b01      	ldr	r3, [sp, #4]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d0dd      	beq.n	800d9c4 <__hexnan+0xd4>
 800da08:	f1c3 0320 	rsb	r3, r3, #32
 800da0c:	f04f 32ff 	mov.w	r2, #4294967295
 800da10:	40da      	lsrs	r2, r3
 800da12:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800da16:	4013      	ands	r3, r2
 800da18:	f846 3c04 	str.w	r3, [r6, #-4]
 800da1c:	e7d2      	b.n	800d9c4 <__hexnan+0xd4>
 800da1e:	3f04      	subs	r7, #4
 800da20:	e7d0      	b.n	800d9c4 <__hexnan+0xd4>
 800da22:	2004      	movs	r0, #4
 800da24:	e7d5      	b.n	800d9d2 <__hexnan+0xe2>

0800da26 <__ascii_mbtowc>:
 800da26:	b082      	sub	sp, #8
 800da28:	b901      	cbnz	r1, 800da2c <__ascii_mbtowc+0x6>
 800da2a:	a901      	add	r1, sp, #4
 800da2c:	b142      	cbz	r2, 800da40 <__ascii_mbtowc+0x1a>
 800da2e:	b14b      	cbz	r3, 800da44 <__ascii_mbtowc+0x1e>
 800da30:	7813      	ldrb	r3, [r2, #0]
 800da32:	600b      	str	r3, [r1, #0]
 800da34:	7812      	ldrb	r2, [r2, #0]
 800da36:	1e10      	subs	r0, r2, #0
 800da38:	bf18      	it	ne
 800da3a:	2001      	movne	r0, #1
 800da3c:	b002      	add	sp, #8
 800da3e:	4770      	bx	lr
 800da40:	4610      	mov	r0, r2
 800da42:	e7fb      	b.n	800da3c <__ascii_mbtowc+0x16>
 800da44:	f06f 0001 	mvn.w	r0, #1
 800da48:	e7f8      	b.n	800da3c <__ascii_mbtowc+0x16>
	...

0800da4c <_Balloc>:
 800da4c:	b570      	push	{r4, r5, r6, lr}
 800da4e:	69c6      	ldr	r6, [r0, #28]
 800da50:	4604      	mov	r4, r0
 800da52:	460d      	mov	r5, r1
 800da54:	b976      	cbnz	r6, 800da74 <_Balloc+0x28>
 800da56:	2010      	movs	r0, #16
 800da58:	f7fe fbd8 	bl	800c20c <malloc>
 800da5c:	4602      	mov	r2, r0
 800da5e:	61e0      	str	r0, [r4, #28]
 800da60:	b920      	cbnz	r0, 800da6c <_Balloc+0x20>
 800da62:	4b18      	ldr	r3, [pc, #96]	@ (800dac4 <_Balloc+0x78>)
 800da64:	4818      	ldr	r0, [pc, #96]	@ (800dac8 <_Balloc+0x7c>)
 800da66:	216b      	movs	r1, #107	@ 0x6b
 800da68:	f000 fd5c 	bl	800e524 <__assert_func>
 800da6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800da70:	6006      	str	r6, [r0, #0]
 800da72:	60c6      	str	r6, [r0, #12]
 800da74:	69e6      	ldr	r6, [r4, #28]
 800da76:	68f3      	ldr	r3, [r6, #12]
 800da78:	b183      	cbz	r3, 800da9c <_Balloc+0x50>
 800da7a:	69e3      	ldr	r3, [r4, #28]
 800da7c:	68db      	ldr	r3, [r3, #12]
 800da7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800da82:	b9b8      	cbnz	r0, 800dab4 <_Balloc+0x68>
 800da84:	2101      	movs	r1, #1
 800da86:	fa01 f605 	lsl.w	r6, r1, r5
 800da8a:	1d72      	adds	r2, r6, #5
 800da8c:	0092      	lsls	r2, r2, #2
 800da8e:	4620      	mov	r0, r4
 800da90:	f000 fd66 	bl	800e560 <_calloc_r>
 800da94:	b160      	cbz	r0, 800dab0 <_Balloc+0x64>
 800da96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800da9a:	e00e      	b.n	800daba <_Balloc+0x6e>
 800da9c:	2221      	movs	r2, #33	@ 0x21
 800da9e:	2104      	movs	r1, #4
 800daa0:	4620      	mov	r0, r4
 800daa2:	f000 fd5d 	bl	800e560 <_calloc_r>
 800daa6:	69e3      	ldr	r3, [r4, #28]
 800daa8:	60f0      	str	r0, [r6, #12]
 800daaa:	68db      	ldr	r3, [r3, #12]
 800daac:	2b00      	cmp	r3, #0
 800daae:	d1e4      	bne.n	800da7a <_Balloc+0x2e>
 800dab0:	2000      	movs	r0, #0
 800dab2:	bd70      	pop	{r4, r5, r6, pc}
 800dab4:	6802      	ldr	r2, [r0, #0]
 800dab6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800daba:	2300      	movs	r3, #0
 800dabc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dac0:	e7f7      	b.n	800dab2 <_Balloc+0x66>
 800dac2:	bf00      	nop
 800dac4:	08010169 	.word	0x08010169
 800dac8:	08010180 	.word	0x08010180

0800dacc <_Bfree>:
 800dacc:	b570      	push	{r4, r5, r6, lr}
 800dace:	69c6      	ldr	r6, [r0, #28]
 800dad0:	4605      	mov	r5, r0
 800dad2:	460c      	mov	r4, r1
 800dad4:	b976      	cbnz	r6, 800daf4 <_Bfree+0x28>
 800dad6:	2010      	movs	r0, #16
 800dad8:	f7fe fb98 	bl	800c20c <malloc>
 800dadc:	4602      	mov	r2, r0
 800dade:	61e8      	str	r0, [r5, #28]
 800dae0:	b920      	cbnz	r0, 800daec <_Bfree+0x20>
 800dae2:	4b09      	ldr	r3, [pc, #36]	@ (800db08 <_Bfree+0x3c>)
 800dae4:	4809      	ldr	r0, [pc, #36]	@ (800db0c <_Bfree+0x40>)
 800dae6:	218f      	movs	r1, #143	@ 0x8f
 800dae8:	f000 fd1c 	bl	800e524 <__assert_func>
 800daec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800daf0:	6006      	str	r6, [r0, #0]
 800daf2:	60c6      	str	r6, [r0, #12]
 800daf4:	b13c      	cbz	r4, 800db06 <_Bfree+0x3a>
 800daf6:	69eb      	ldr	r3, [r5, #28]
 800daf8:	6862      	ldr	r2, [r4, #4]
 800dafa:	68db      	ldr	r3, [r3, #12]
 800dafc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800db00:	6021      	str	r1, [r4, #0]
 800db02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800db06:	bd70      	pop	{r4, r5, r6, pc}
 800db08:	08010169 	.word	0x08010169
 800db0c:	08010180 	.word	0x08010180

0800db10 <__multadd>:
 800db10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db14:	690d      	ldr	r5, [r1, #16]
 800db16:	4607      	mov	r7, r0
 800db18:	460c      	mov	r4, r1
 800db1a:	461e      	mov	r6, r3
 800db1c:	f101 0c14 	add.w	ip, r1, #20
 800db20:	2000      	movs	r0, #0
 800db22:	f8dc 3000 	ldr.w	r3, [ip]
 800db26:	b299      	uxth	r1, r3
 800db28:	fb02 6101 	mla	r1, r2, r1, r6
 800db2c:	0c1e      	lsrs	r6, r3, #16
 800db2e:	0c0b      	lsrs	r3, r1, #16
 800db30:	fb02 3306 	mla	r3, r2, r6, r3
 800db34:	b289      	uxth	r1, r1
 800db36:	3001      	adds	r0, #1
 800db38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800db3c:	4285      	cmp	r5, r0
 800db3e:	f84c 1b04 	str.w	r1, [ip], #4
 800db42:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800db46:	dcec      	bgt.n	800db22 <__multadd+0x12>
 800db48:	b30e      	cbz	r6, 800db8e <__multadd+0x7e>
 800db4a:	68a3      	ldr	r3, [r4, #8]
 800db4c:	42ab      	cmp	r3, r5
 800db4e:	dc19      	bgt.n	800db84 <__multadd+0x74>
 800db50:	6861      	ldr	r1, [r4, #4]
 800db52:	4638      	mov	r0, r7
 800db54:	3101      	adds	r1, #1
 800db56:	f7ff ff79 	bl	800da4c <_Balloc>
 800db5a:	4680      	mov	r8, r0
 800db5c:	b928      	cbnz	r0, 800db6a <__multadd+0x5a>
 800db5e:	4602      	mov	r2, r0
 800db60:	4b0c      	ldr	r3, [pc, #48]	@ (800db94 <__multadd+0x84>)
 800db62:	480d      	ldr	r0, [pc, #52]	@ (800db98 <__multadd+0x88>)
 800db64:	21ba      	movs	r1, #186	@ 0xba
 800db66:	f000 fcdd 	bl	800e524 <__assert_func>
 800db6a:	6922      	ldr	r2, [r4, #16]
 800db6c:	3202      	adds	r2, #2
 800db6e:	f104 010c 	add.w	r1, r4, #12
 800db72:	0092      	lsls	r2, r2, #2
 800db74:	300c      	adds	r0, #12
 800db76:	f7ff fbba 	bl	800d2ee <memcpy>
 800db7a:	4621      	mov	r1, r4
 800db7c:	4638      	mov	r0, r7
 800db7e:	f7ff ffa5 	bl	800dacc <_Bfree>
 800db82:	4644      	mov	r4, r8
 800db84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800db88:	3501      	adds	r5, #1
 800db8a:	615e      	str	r6, [r3, #20]
 800db8c:	6125      	str	r5, [r4, #16]
 800db8e:	4620      	mov	r0, r4
 800db90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db94:	080100f8 	.word	0x080100f8
 800db98:	08010180 	.word	0x08010180

0800db9c <__s2b>:
 800db9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dba0:	460c      	mov	r4, r1
 800dba2:	4615      	mov	r5, r2
 800dba4:	461f      	mov	r7, r3
 800dba6:	2209      	movs	r2, #9
 800dba8:	3308      	adds	r3, #8
 800dbaa:	4606      	mov	r6, r0
 800dbac:	fb93 f3f2 	sdiv	r3, r3, r2
 800dbb0:	2100      	movs	r1, #0
 800dbb2:	2201      	movs	r2, #1
 800dbb4:	429a      	cmp	r2, r3
 800dbb6:	db09      	blt.n	800dbcc <__s2b+0x30>
 800dbb8:	4630      	mov	r0, r6
 800dbba:	f7ff ff47 	bl	800da4c <_Balloc>
 800dbbe:	b940      	cbnz	r0, 800dbd2 <__s2b+0x36>
 800dbc0:	4602      	mov	r2, r0
 800dbc2:	4b19      	ldr	r3, [pc, #100]	@ (800dc28 <__s2b+0x8c>)
 800dbc4:	4819      	ldr	r0, [pc, #100]	@ (800dc2c <__s2b+0x90>)
 800dbc6:	21d3      	movs	r1, #211	@ 0xd3
 800dbc8:	f000 fcac 	bl	800e524 <__assert_func>
 800dbcc:	0052      	lsls	r2, r2, #1
 800dbce:	3101      	adds	r1, #1
 800dbd0:	e7f0      	b.n	800dbb4 <__s2b+0x18>
 800dbd2:	9b08      	ldr	r3, [sp, #32]
 800dbd4:	6143      	str	r3, [r0, #20]
 800dbd6:	2d09      	cmp	r5, #9
 800dbd8:	f04f 0301 	mov.w	r3, #1
 800dbdc:	6103      	str	r3, [r0, #16]
 800dbde:	dd16      	ble.n	800dc0e <__s2b+0x72>
 800dbe0:	f104 0909 	add.w	r9, r4, #9
 800dbe4:	46c8      	mov	r8, r9
 800dbe6:	442c      	add	r4, r5
 800dbe8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800dbec:	4601      	mov	r1, r0
 800dbee:	3b30      	subs	r3, #48	@ 0x30
 800dbf0:	220a      	movs	r2, #10
 800dbf2:	4630      	mov	r0, r6
 800dbf4:	f7ff ff8c 	bl	800db10 <__multadd>
 800dbf8:	45a0      	cmp	r8, r4
 800dbfa:	d1f5      	bne.n	800dbe8 <__s2b+0x4c>
 800dbfc:	f1a5 0408 	sub.w	r4, r5, #8
 800dc00:	444c      	add	r4, r9
 800dc02:	1b2d      	subs	r5, r5, r4
 800dc04:	1963      	adds	r3, r4, r5
 800dc06:	42bb      	cmp	r3, r7
 800dc08:	db04      	blt.n	800dc14 <__s2b+0x78>
 800dc0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc0e:	340a      	adds	r4, #10
 800dc10:	2509      	movs	r5, #9
 800dc12:	e7f6      	b.n	800dc02 <__s2b+0x66>
 800dc14:	f814 3b01 	ldrb.w	r3, [r4], #1
 800dc18:	4601      	mov	r1, r0
 800dc1a:	3b30      	subs	r3, #48	@ 0x30
 800dc1c:	220a      	movs	r2, #10
 800dc1e:	4630      	mov	r0, r6
 800dc20:	f7ff ff76 	bl	800db10 <__multadd>
 800dc24:	e7ee      	b.n	800dc04 <__s2b+0x68>
 800dc26:	bf00      	nop
 800dc28:	080100f8 	.word	0x080100f8
 800dc2c:	08010180 	.word	0x08010180

0800dc30 <__hi0bits>:
 800dc30:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800dc34:	4603      	mov	r3, r0
 800dc36:	bf36      	itet	cc
 800dc38:	0403      	lslcc	r3, r0, #16
 800dc3a:	2000      	movcs	r0, #0
 800dc3c:	2010      	movcc	r0, #16
 800dc3e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800dc42:	bf3c      	itt	cc
 800dc44:	021b      	lslcc	r3, r3, #8
 800dc46:	3008      	addcc	r0, #8
 800dc48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dc4c:	bf3c      	itt	cc
 800dc4e:	011b      	lslcc	r3, r3, #4
 800dc50:	3004      	addcc	r0, #4
 800dc52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dc56:	bf3c      	itt	cc
 800dc58:	009b      	lslcc	r3, r3, #2
 800dc5a:	3002      	addcc	r0, #2
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	db05      	blt.n	800dc6c <__hi0bits+0x3c>
 800dc60:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800dc64:	f100 0001 	add.w	r0, r0, #1
 800dc68:	bf08      	it	eq
 800dc6a:	2020      	moveq	r0, #32
 800dc6c:	4770      	bx	lr

0800dc6e <__lo0bits>:
 800dc6e:	6803      	ldr	r3, [r0, #0]
 800dc70:	4602      	mov	r2, r0
 800dc72:	f013 0007 	ands.w	r0, r3, #7
 800dc76:	d00b      	beq.n	800dc90 <__lo0bits+0x22>
 800dc78:	07d9      	lsls	r1, r3, #31
 800dc7a:	d421      	bmi.n	800dcc0 <__lo0bits+0x52>
 800dc7c:	0798      	lsls	r0, r3, #30
 800dc7e:	bf49      	itett	mi
 800dc80:	085b      	lsrmi	r3, r3, #1
 800dc82:	089b      	lsrpl	r3, r3, #2
 800dc84:	2001      	movmi	r0, #1
 800dc86:	6013      	strmi	r3, [r2, #0]
 800dc88:	bf5c      	itt	pl
 800dc8a:	6013      	strpl	r3, [r2, #0]
 800dc8c:	2002      	movpl	r0, #2
 800dc8e:	4770      	bx	lr
 800dc90:	b299      	uxth	r1, r3
 800dc92:	b909      	cbnz	r1, 800dc98 <__lo0bits+0x2a>
 800dc94:	0c1b      	lsrs	r3, r3, #16
 800dc96:	2010      	movs	r0, #16
 800dc98:	b2d9      	uxtb	r1, r3
 800dc9a:	b909      	cbnz	r1, 800dca0 <__lo0bits+0x32>
 800dc9c:	3008      	adds	r0, #8
 800dc9e:	0a1b      	lsrs	r3, r3, #8
 800dca0:	0719      	lsls	r1, r3, #28
 800dca2:	bf04      	itt	eq
 800dca4:	091b      	lsreq	r3, r3, #4
 800dca6:	3004      	addeq	r0, #4
 800dca8:	0799      	lsls	r1, r3, #30
 800dcaa:	bf04      	itt	eq
 800dcac:	089b      	lsreq	r3, r3, #2
 800dcae:	3002      	addeq	r0, #2
 800dcb0:	07d9      	lsls	r1, r3, #31
 800dcb2:	d403      	bmi.n	800dcbc <__lo0bits+0x4e>
 800dcb4:	085b      	lsrs	r3, r3, #1
 800dcb6:	f100 0001 	add.w	r0, r0, #1
 800dcba:	d003      	beq.n	800dcc4 <__lo0bits+0x56>
 800dcbc:	6013      	str	r3, [r2, #0]
 800dcbe:	4770      	bx	lr
 800dcc0:	2000      	movs	r0, #0
 800dcc2:	4770      	bx	lr
 800dcc4:	2020      	movs	r0, #32
 800dcc6:	4770      	bx	lr

0800dcc8 <__i2b>:
 800dcc8:	b510      	push	{r4, lr}
 800dcca:	460c      	mov	r4, r1
 800dccc:	2101      	movs	r1, #1
 800dcce:	f7ff febd 	bl	800da4c <_Balloc>
 800dcd2:	4602      	mov	r2, r0
 800dcd4:	b928      	cbnz	r0, 800dce2 <__i2b+0x1a>
 800dcd6:	4b05      	ldr	r3, [pc, #20]	@ (800dcec <__i2b+0x24>)
 800dcd8:	4805      	ldr	r0, [pc, #20]	@ (800dcf0 <__i2b+0x28>)
 800dcda:	f240 1145 	movw	r1, #325	@ 0x145
 800dcde:	f000 fc21 	bl	800e524 <__assert_func>
 800dce2:	2301      	movs	r3, #1
 800dce4:	6144      	str	r4, [r0, #20]
 800dce6:	6103      	str	r3, [r0, #16]
 800dce8:	bd10      	pop	{r4, pc}
 800dcea:	bf00      	nop
 800dcec:	080100f8 	.word	0x080100f8
 800dcf0:	08010180 	.word	0x08010180

0800dcf4 <__multiply>:
 800dcf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcf8:	4614      	mov	r4, r2
 800dcfa:	690a      	ldr	r2, [r1, #16]
 800dcfc:	6923      	ldr	r3, [r4, #16]
 800dcfe:	429a      	cmp	r2, r3
 800dd00:	bfa8      	it	ge
 800dd02:	4623      	movge	r3, r4
 800dd04:	460f      	mov	r7, r1
 800dd06:	bfa4      	itt	ge
 800dd08:	460c      	movge	r4, r1
 800dd0a:	461f      	movge	r7, r3
 800dd0c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800dd10:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800dd14:	68a3      	ldr	r3, [r4, #8]
 800dd16:	6861      	ldr	r1, [r4, #4]
 800dd18:	eb0a 0609 	add.w	r6, sl, r9
 800dd1c:	42b3      	cmp	r3, r6
 800dd1e:	b085      	sub	sp, #20
 800dd20:	bfb8      	it	lt
 800dd22:	3101      	addlt	r1, #1
 800dd24:	f7ff fe92 	bl	800da4c <_Balloc>
 800dd28:	b930      	cbnz	r0, 800dd38 <__multiply+0x44>
 800dd2a:	4602      	mov	r2, r0
 800dd2c:	4b44      	ldr	r3, [pc, #272]	@ (800de40 <__multiply+0x14c>)
 800dd2e:	4845      	ldr	r0, [pc, #276]	@ (800de44 <__multiply+0x150>)
 800dd30:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800dd34:	f000 fbf6 	bl	800e524 <__assert_func>
 800dd38:	f100 0514 	add.w	r5, r0, #20
 800dd3c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dd40:	462b      	mov	r3, r5
 800dd42:	2200      	movs	r2, #0
 800dd44:	4543      	cmp	r3, r8
 800dd46:	d321      	bcc.n	800dd8c <__multiply+0x98>
 800dd48:	f107 0114 	add.w	r1, r7, #20
 800dd4c:	f104 0214 	add.w	r2, r4, #20
 800dd50:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800dd54:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800dd58:	9302      	str	r3, [sp, #8]
 800dd5a:	1b13      	subs	r3, r2, r4
 800dd5c:	3b15      	subs	r3, #21
 800dd5e:	f023 0303 	bic.w	r3, r3, #3
 800dd62:	3304      	adds	r3, #4
 800dd64:	f104 0715 	add.w	r7, r4, #21
 800dd68:	42ba      	cmp	r2, r7
 800dd6a:	bf38      	it	cc
 800dd6c:	2304      	movcc	r3, #4
 800dd6e:	9301      	str	r3, [sp, #4]
 800dd70:	9b02      	ldr	r3, [sp, #8]
 800dd72:	9103      	str	r1, [sp, #12]
 800dd74:	428b      	cmp	r3, r1
 800dd76:	d80c      	bhi.n	800dd92 <__multiply+0x9e>
 800dd78:	2e00      	cmp	r6, #0
 800dd7a:	dd03      	ble.n	800dd84 <__multiply+0x90>
 800dd7c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d05b      	beq.n	800de3c <__multiply+0x148>
 800dd84:	6106      	str	r6, [r0, #16]
 800dd86:	b005      	add	sp, #20
 800dd88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd8c:	f843 2b04 	str.w	r2, [r3], #4
 800dd90:	e7d8      	b.n	800dd44 <__multiply+0x50>
 800dd92:	f8b1 a000 	ldrh.w	sl, [r1]
 800dd96:	f1ba 0f00 	cmp.w	sl, #0
 800dd9a:	d024      	beq.n	800dde6 <__multiply+0xf2>
 800dd9c:	f104 0e14 	add.w	lr, r4, #20
 800dda0:	46a9      	mov	r9, r5
 800dda2:	f04f 0c00 	mov.w	ip, #0
 800dda6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ddaa:	f8d9 3000 	ldr.w	r3, [r9]
 800ddae:	fa1f fb87 	uxth.w	fp, r7
 800ddb2:	b29b      	uxth	r3, r3
 800ddb4:	fb0a 330b 	mla	r3, sl, fp, r3
 800ddb8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ddbc:	f8d9 7000 	ldr.w	r7, [r9]
 800ddc0:	4463      	add	r3, ip
 800ddc2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ddc6:	fb0a c70b 	mla	r7, sl, fp, ip
 800ddca:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ddce:	b29b      	uxth	r3, r3
 800ddd0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ddd4:	4572      	cmp	r2, lr
 800ddd6:	f849 3b04 	str.w	r3, [r9], #4
 800ddda:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ddde:	d8e2      	bhi.n	800dda6 <__multiply+0xb2>
 800dde0:	9b01      	ldr	r3, [sp, #4]
 800dde2:	f845 c003 	str.w	ip, [r5, r3]
 800dde6:	9b03      	ldr	r3, [sp, #12]
 800dde8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ddec:	3104      	adds	r1, #4
 800ddee:	f1b9 0f00 	cmp.w	r9, #0
 800ddf2:	d021      	beq.n	800de38 <__multiply+0x144>
 800ddf4:	682b      	ldr	r3, [r5, #0]
 800ddf6:	f104 0c14 	add.w	ip, r4, #20
 800ddfa:	46ae      	mov	lr, r5
 800ddfc:	f04f 0a00 	mov.w	sl, #0
 800de00:	f8bc b000 	ldrh.w	fp, [ip]
 800de04:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800de08:	fb09 770b 	mla	r7, r9, fp, r7
 800de0c:	4457      	add	r7, sl
 800de0e:	b29b      	uxth	r3, r3
 800de10:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800de14:	f84e 3b04 	str.w	r3, [lr], #4
 800de18:	f85c 3b04 	ldr.w	r3, [ip], #4
 800de1c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800de20:	f8be 3000 	ldrh.w	r3, [lr]
 800de24:	fb09 330a 	mla	r3, r9, sl, r3
 800de28:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800de2c:	4562      	cmp	r2, ip
 800de2e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800de32:	d8e5      	bhi.n	800de00 <__multiply+0x10c>
 800de34:	9f01      	ldr	r7, [sp, #4]
 800de36:	51eb      	str	r3, [r5, r7]
 800de38:	3504      	adds	r5, #4
 800de3a:	e799      	b.n	800dd70 <__multiply+0x7c>
 800de3c:	3e01      	subs	r6, #1
 800de3e:	e79b      	b.n	800dd78 <__multiply+0x84>
 800de40:	080100f8 	.word	0x080100f8
 800de44:	08010180 	.word	0x08010180

0800de48 <__pow5mult>:
 800de48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de4c:	4615      	mov	r5, r2
 800de4e:	f012 0203 	ands.w	r2, r2, #3
 800de52:	4607      	mov	r7, r0
 800de54:	460e      	mov	r6, r1
 800de56:	d007      	beq.n	800de68 <__pow5mult+0x20>
 800de58:	4c25      	ldr	r4, [pc, #148]	@ (800def0 <__pow5mult+0xa8>)
 800de5a:	3a01      	subs	r2, #1
 800de5c:	2300      	movs	r3, #0
 800de5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800de62:	f7ff fe55 	bl	800db10 <__multadd>
 800de66:	4606      	mov	r6, r0
 800de68:	10ad      	asrs	r5, r5, #2
 800de6a:	d03d      	beq.n	800dee8 <__pow5mult+0xa0>
 800de6c:	69fc      	ldr	r4, [r7, #28]
 800de6e:	b97c      	cbnz	r4, 800de90 <__pow5mult+0x48>
 800de70:	2010      	movs	r0, #16
 800de72:	f7fe f9cb 	bl	800c20c <malloc>
 800de76:	4602      	mov	r2, r0
 800de78:	61f8      	str	r0, [r7, #28]
 800de7a:	b928      	cbnz	r0, 800de88 <__pow5mult+0x40>
 800de7c:	4b1d      	ldr	r3, [pc, #116]	@ (800def4 <__pow5mult+0xac>)
 800de7e:	481e      	ldr	r0, [pc, #120]	@ (800def8 <__pow5mult+0xb0>)
 800de80:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800de84:	f000 fb4e 	bl	800e524 <__assert_func>
 800de88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800de8c:	6004      	str	r4, [r0, #0]
 800de8e:	60c4      	str	r4, [r0, #12]
 800de90:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800de94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800de98:	b94c      	cbnz	r4, 800deae <__pow5mult+0x66>
 800de9a:	f240 2171 	movw	r1, #625	@ 0x271
 800de9e:	4638      	mov	r0, r7
 800dea0:	f7ff ff12 	bl	800dcc8 <__i2b>
 800dea4:	2300      	movs	r3, #0
 800dea6:	f8c8 0008 	str.w	r0, [r8, #8]
 800deaa:	4604      	mov	r4, r0
 800deac:	6003      	str	r3, [r0, #0]
 800deae:	f04f 0900 	mov.w	r9, #0
 800deb2:	07eb      	lsls	r3, r5, #31
 800deb4:	d50a      	bpl.n	800decc <__pow5mult+0x84>
 800deb6:	4631      	mov	r1, r6
 800deb8:	4622      	mov	r2, r4
 800deba:	4638      	mov	r0, r7
 800debc:	f7ff ff1a 	bl	800dcf4 <__multiply>
 800dec0:	4631      	mov	r1, r6
 800dec2:	4680      	mov	r8, r0
 800dec4:	4638      	mov	r0, r7
 800dec6:	f7ff fe01 	bl	800dacc <_Bfree>
 800deca:	4646      	mov	r6, r8
 800decc:	106d      	asrs	r5, r5, #1
 800dece:	d00b      	beq.n	800dee8 <__pow5mult+0xa0>
 800ded0:	6820      	ldr	r0, [r4, #0]
 800ded2:	b938      	cbnz	r0, 800dee4 <__pow5mult+0x9c>
 800ded4:	4622      	mov	r2, r4
 800ded6:	4621      	mov	r1, r4
 800ded8:	4638      	mov	r0, r7
 800deda:	f7ff ff0b 	bl	800dcf4 <__multiply>
 800dede:	6020      	str	r0, [r4, #0]
 800dee0:	f8c0 9000 	str.w	r9, [r0]
 800dee4:	4604      	mov	r4, r0
 800dee6:	e7e4      	b.n	800deb2 <__pow5mult+0x6a>
 800dee8:	4630      	mov	r0, r6
 800deea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800deee:	bf00      	nop
 800def0:	080101dc 	.word	0x080101dc
 800def4:	08010169 	.word	0x08010169
 800def8:	08010180 	.word	0x08010180

0800defc <__lshift>:
 800defc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df00:	460c      	mov	r4, r1
 800df02:	6849      	ldr	r1, [r1, #4]
 800df04:	6923      	ldr	r3, [r4, #16]
 800df06:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800df0a:	68a3      	ldr	r3, [r4, #8]
 800df0c:	4607      	mov	r7, r0
 800df0e:	4691      	mov	r9, r2
 800df10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800df14:	f108 0601 	add.w	r6, r8, #1
 800df18:	42b3      	cmp	r3, r6
 800df1a:	db0b      	blt.n	800df34 <__lshift+0x38>
 800df1c:	4638      	mov	r0, r7
 800df1e:	f7ff fd95 	bl	800da4c <_Balloc>
 800df22:	4605      	mov	r5, r0
 800df24:	b948      	cbnz	r0, 800df3a <__lshift+0x3e>
 800df26:	4602      	mov	r2, r0
 800df28:	4b28      	ldr	r3, [pc, #160]	@ (800dfcc <__lshift+0xd0>)
 800df2a:	4829      	ldr	r0, [pc, #164]	@ (800dfd0 <__lshift+0xd4>)
 800df2c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800df30:	f000 faf8 	bl	800e524 <__assert_func>
 800df34:	3101      	adds	r1, #1
 800df36:	005b      	lsls	r3, r3, #1
 800df38:	e7ee      	b.n	800df18 <__lshift+0x1c>
 800df3a:	2300      	movs	r3, #0
 800df3c:	f100 0114 	add.w	r1, r0, #20
 800df40:	f100 0210 	add.w	r2, r0, #16
 800df44:	4618      	mov	r0, r3
 800df46:	4553      	cmp	r3, sl
 800df48:	db33      	blt.n	800dfb2 <__lshift+0xb6>
 800df4a:	6920      	ldr	r0, [r4, #16]
 800df4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800df50:	f104 0314 	add.w	r3, r4, #20
 800df54:	f019 091f 	ands.w	r9, r9, #31
 800df58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800df5c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800df60:	d02b      	beq.n	800dfba <__lshift+0xbe>
 800df62:	f1c9 0e20 	rsb	lr, r9, #32
 800df66:	468a      	mov	sl, r1
 800df68:	2200      	movs	r2, #0
 800df6a:	6818      	ldr	r0, [r3, #0]
 800df6c:	fa00 f009 	lsl.w	r0, r0, r9
 800df70:	4310      	orrs	r0, r2
 800df72:	f84a 0b04 	str.w	r0, [sl], #4
 800df76:	f853 2b04 	ldr.w	r2, [r3], #4
 800df7a:	459c      	cmp	ip, r3
 800df7c:	fa22 f20e 	lsr.w	r2, r2, lr
 800df80:	d8f3      	bhi.n	800df6a <__lshift+0x6e>
 800df82:	ebac 0304 	sub.w	r3, ip, r4
 800df86:	3b15      	subs	r3, #21
 800df88:	f023 0303 	bic.w	r3, r3, #3
 800df8c:	3304      	adds	r3, #4
 800df8e:	f104 0015 	add.w	r0, r4, #21
 800df92:	4584      	cmp	ip, r0
 800df94:	bf38      	it	cc
 800df96:	2304      	movcc	r3, #4
 800df98:	50ca      	str	r2, [r1, r3]
 800df9a:	b10a      	cbz	r2, 800dfa0 <__lshift+0xa4>
 800df9c:	f108 0602 	add.w	r6, r8, #2
 800dfa0:	3e01      	subs	r6, #1
 800dfa2:	4638      	mov	r0, r7
 800dfa4:	612e      	str	r6, [r5, #16]
 800dfa6:	4621      	mov	r1, r4
 800dfa8:	f7ff fd90 	bl	800dacc <_Bfree>
 800dfac:	4628      	mov	r0, r5
 800dfae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfb2:	f842 0f04 	str.w	r0, [r2, #4]!
 800dfb6:	3301      	adds	r3, #1
 800dfb8:	e7c5      	b.n	800df46 <__lshift+0x4a>
 800dfba:	3904      	subs	r1, #4
 800dfbc:	f853 2b04 	ldr.w	r2, [r3], #4
 800dfc0:	f841 2f04 	str.w	r2, [r1, #4]!
 800dfc4:	459c      	cmp	ip, r3
 800dfc6:	d8f9      	bhi.n	800dfbc <__lshift+0xc0>
 800dfc8:	e7ea      	b.n	800dfa0 <__lshift+0xa4>
 800dfca:	bf00      	nop
 800dfcc:	080100f8 	.word	0x080100f8
 800dfd0:	08010180 	.word	0x08010180

0800dfd4 <__mcmp>:
 800dfd4:	690a      	ldr	r2, [r1, #16]
 800dfd6:	4603      	mov	r3, r0
 800dfd8:	6900      	ldr	r0, [r0, #16]
 800dfda:	1a80      	subs	r0, r0, r2
 800dfdc:	b530      	push	{r4, r5, lr}
 800dfde:	d10e      	bne.n	800dffe <__mcmp+0x2a>
 800dfe0:	3314      	adds	r3, #20
 800dfe2:	3114      	adds	r1, #20
 800dfe4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800dfe8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800dfec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800dff0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800dff4:	4295      	cmp	r5, r2
 800dff6:	d003      	beq.n	800e000 <__mcmp+0x2c>
 800dff8:	d205      	bcs.n	800e006 <__mcmp+0x32>
 800dffa:	f04f 30ff 	mov.w	r0, #4294967295
 800dffe:	bd30      	pop	{r4, r5, pc}
 800e000:	42a3      	cmp	r3, r4
 800e002:	d3f3      	bcc.n	800dfec <__mcmp+0x18>
 800e004:	e7fb      	b.n	800dffe <__mcmp+0x2a>
 800e006:	2001      	movs	r0, #1
 800e008:	e7f9      	b.n	800dffe <__mcmp+0x2a>
	...

0800e00c <__mdiff>:
 800e00c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e010:	4689      	mov	r9, r1
 800e012:	4606      	mov	r6, r0
 800e014:	4611      	mov	r1, r2
 800e016:	4648      	mov	r0, r9
 800e018:	4614      	mov	r4, r2
 800e01a:	f7ff ffdb 	bl	800dfd4 <__mcmp>
 800e01e:	1e05      	subs	r5, r0, #0
 800e020:	d112      	bne.n	800e048 <__mdiff+0x3c>
 800e022:	4629      	mov	r1, r5
 800e024:	4630      	mov	r0, r6
 800e026:	f7ff fd11 	bl	800da4c <_Balloc>
 800e02a:	4602      	mov	r2, r0
 800e02c:	b928      	cbnz	r0, 800e03a <__mdiff+0x2e>
 800e02e:	4b3f      	ldr	r3, [pc, #252]	@ (800e12c <__mdiff+0x120>)
 800e030:	f240 2137 	movw	r1, #567	@ 0x237
 800e034:	483e      	ldr	r0, [pc, #248]	@ (800e130 <__mdiff+0x124>)
 800e036:	f000 fa75 	bl	800e524 <__assert_func>
 800e03a:	2301      	movs	r3, #1
 800e03c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e040:	4610      	mov	r0, r2
 800e042:	b003      	add	sp, #12
 800e044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e048:	bfbc      	itt	lt
 800e04a:	464b      	movlt	r3, r9
 800e04c:	46a1      	movlt	r9, r4
 800e04e:	4630      	mov	r0, r6
 800e050:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e054:	bfba      	itte	lt
 800e056:	461c      	movlt	r4, r3
 800e058:	2501      	movlt	r5, #1
 800e05a:	2500      	movge	r5, #0
 800e05c:	f7ff fcf6 	bl	800da4c <_Balloc>
 800e060:	4602      	mov	r2, r0
 800e062:	b918      	cbnz	r0, 800e06c <__mdiff+0x60>
 800e064:	4b31      	ldr	r3, [pc, #196]	@ (800e12c <__mdiff+0x120>)
 800e066:	f240 2145 	movw	r1, #581	@ 0x245
 800e06a:	e7e3      	b.n	800e034 <__mdiff+0x28>
 800e06c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e070:	6926      	ldr	r6, [r4, #16]
 800e072:	60c5      	str	r5, [r0, #12]
 800e074:	f109 0310 	add.w	r3, r9, #16
 800e078:	f109 0514 	add.w	r5, r9, #20
 800e07c:	f104 0e14 	add.w	lr, r4, #20
 800e080:	f100 0b14 	add.w	fp, r0, #20
 800e084:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e088:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e08c:	9301      	str	r3, [sp, #4]
 800e08e:	46d9      	mov	r9, fp
 800e090:	f04f 0c00 	mov.w	ip, #0
 800e094:	9b01      	ldr	r3, [sp, #4]
 800e096:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e09a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e09e:	9301      	str	r3, [sp, #4]
 800e0a0:	fa1f f38a 	uxth.w	r3, sl
 800e0a4:	4619      	mov	r1, r3
 800e0a6:	b283      	uxth	r3, r0
 800e0a8:	1acb      	subs	r3, r1, r3
 800e0aa:	0c00      	lsrs	r0, r0, #16
 800e0ac:	4463      	add	r3, ip
 800e0ae:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e0b2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e0b6:	b29b      	uxth	r3, r3
 800e0b8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e0bc:	4576      	cmp	r6, lr
 800e0be:	f849 3b04 	str.w	r3, [r9], #4
 800e0c2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e0c6:	d8e5      	bhi.n	800e094 <__mdiff+0x88>
 800e0c8:	1b33      	subs	r3, r6, r4
 800e0ca:	3b15      	subs	r3, #21
 800e0cc:	f023 0303 	bic.w	r3, r3, #3
 800e0d0:	3415      	adds	r4, #21
 800e0d2:	3304      	adds	r3, #4
 800e0d4:	42a6      	cmp	r6, r4
 800e0d6:	bf38      	it	cc
 800e0d8:	2304      	movcc	r3, #4
 800e0da:	441d      	add	r5, r3
 800e0dc:	445b      	add	r3, fp
 800e0de:	461e      	mov	r6, r3
 800e0e0:	462c      	mov	r4, r5
 800e0e2:	4544      	cmp	r4, r8
 800e0e4:	d30e      	bcc.n	800e104 <__mdiff+0xf8>
 800e0e6:	f108 0103 	add.w	r1, r8, #3
 800e0ea:	1b49      	subs	r1, r1, r5
 800e0ec:	f021 0103 	bic.w	r1, r1, #3
 800e0f0:	3d03      	subs	r5, #3
 800e0f2:	45a8      	cmp	r8, r5
 800e0f4:	bf38      	it	cc
 800e0f6:	2100      	movcc	r1, #0
 800e0f8:	440b      	add	r3, r1
 800e0fa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e0fe:	b191      	cbz	r1, 800e126 <__mdiff+0x11a>
 800e100:	6117      	str	r7, [r2, #16]
 800e102:	e79d      	b.n	800e040 <__mdiff+0x34>
 800e104:	f854 1b04 	ldr.w	r1, [r4], #4
 800e108:	46e6      	mov	lr, ip
 800e10a:	0c08      	lsrs	r0, r1, #16
 800e10c:	fa1c fc81 	uxtah	ip, ip, r1
 800e110:	4471      	add	r1, lr
 800e112:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e116:	b289      	uxth	r1, r1
 800e118:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e11c:	f846 1b04 	str.w	r1, [r6], #4
 800e120:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e124:	e7dd      	b.n	800e0e2 <__mdiff+0xd6>
 800e126:	3f01      	subs	r7, #1
 800e128:	e7e7      	b.n	800e0fa <__mdiff+0xee>
 800e12a:	bf00      	nop
 800e12c:	080100f8 	.word	0x080100f8
 800e130:	08010180 	.word	0x08010180

0800e134 <__ulp>:
 800e134:	b082      	sub	sp, #8
 800e136:	ed8d 0b00 	vstr	d0, [sp]
 800e13a:	9a01      	ldr	r2, [sp, #4]
 800e13c:	4b0f      	ldr	r3, [pc, #60]	@ (800e17c <__ulp+0x48>)
 800e13e:	4013      	ands	r3, r2
 800e140:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e144:	2b00      	cmp	r3, #0
 800e146:	dc08      	bgt.n	800e15a <__ulp+0x26>
 800e148:	425b      	negs	r3, r3
 800e14a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e14e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e152:	da04      	bge.n	800e15e <__ulp+0x2a>
 800e154:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e158:	4113      	asrs	r3, r2
 800e15a:	2200      	movs	r2, #0
 800e15c:	e008      	b.n	800e170 <__ulp+0x3c>
 800e15e:	f1a2 0314 	sub.w	r3, r2, #20
 800e162:	2b1e      	cmp	r3, #30
 800e164:	bfda      	itte	le
 800e166:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e16a:	40da      	lsrle	r2, r3
 800e16c:	2201      	movgt	r2, #1
 800e16e:	2300      	movs	r3, #0
 800e170:	4619      	mov	r1, r3
 800e172:	4610      	mov	r0, r2
 800e174:	ec41 0b10 	vmov	d0, r0, r1
 800e178:	b002      	add	sp, #8
 800e17a:	4770      	bx	lr
 800e17c:	7ff00000 	.word	0x7ff00000

0800e180 <__b2d>:
 800e180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e184:	6906      	ldr	r6, [r0, #16]
 800e186:	f100 0814 	add.w	r8, r0, #20
 800e18a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e18e:	1f37      	subs	r7, r6, #4
 800e190:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e194:	4610      	mov	r0, r2
 800e196:	f7ff fd4b 	bl	800dc30 <__hi0bits>
 800e19a:	f1c0 0320 	rsb	r3, r0, #32
 800e19e:	280a      	cmp	r0, #10
 800e1a0:	600b      	str	r3, [r1, #0]
 800e1a2:	491b      	ldr	r1, [pc, #108]	@ (800e210 <__b2d+0x90>)
 800e1a4:	dc15      	bgt.n	800e1d2 <__b2d+0x52>
 800e1a6:	f1c0 0c0b 	rsb	ip, r0, #11
 800e1aa:	fa22 f30c 	lsr.w	r3, r2, ip
 800e1ae:	45b8      	cmp	r8, r7
 800e1b0:	ea43 0501 	orr.w	r5, r3, r1
 800e1b4:	bf34      	ite	cc
 800e1b6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e1ba:	2300      	movcs	r3, #0
 800e1bc:	3015      	adds	r0, #21
 800e1be:	fa02 f000 	lsl.w	r0, r2, r0
 800e1c2:	fa23 f30c 	lsr.w	r3, r3, ip
 800e1c6:	4303      	orrs	r3, r0
 800e1c8:	461c      	mov	r4, r3
 800e1ca:	ec45 4b10 	vmov	d0, r4, r5
 800e1ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1d2:	45b8      	cmp	r8, r7
 800e1d4:	bf3a      	itte	cc
 800e1d6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e1da:	f1a6 0708 	subcc.w	r7, r6, #8
 800e1de:	2300      	movcs	r3, #0
 800e1e0:	380b      	subs	r0, #11
 800e1e2:	d012      	beq.n	800e20a <__b2d+0x8a>
 800e1e4:	f1c0 0120 	rsb	r1, r0, #32
 800e1e8:	fa23 f401 	lsr.w	r4, r3, r1
 800e1ec:	4082      	lsls	r2, r0
 800e1ee:	4322      	orrs	r2, r4
 800e1f0:	4547      	cmp	r7, r8
 800e1f2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800e1f6:	bf8c      	ite	hi
 800e1f8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e1fc:	2200      	movls	r2, #0
 800e1fe:	4083      	lsls	r3, r0
 800e200:	40ca      	lsrs	r2, r1
 800e202:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e206:	4313      	orrs	r3, r2
 800e208:	e7de      	b.n	800e1c8 <__b2d+0x48>
 800e20a:	ea42 0501 	orr.w	r5, r2, r1
 800e20e:	e7db      	b.n	800e1c8 <__b2d+0x48>
 800e210:	3ff00000 	.word	0x3ff00000

0800e214 <__d2b>:
 800e214:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e218:	460f      	mov	r7, r1
 800e21a:	2101      	movs	r1, #1
 800e21c:	ec59 8b10 	vmov	r8, r9, d0
 800e220:	4616      	mov	r6, r2
 800e222:	f7ff fc13 	bl	800da4c <_Balloc>
 800e226:	4604      	mov	r4, r0
 800e228:	b930      	cbnz	r0, 800e238 <__d2b+0x24>
 800e22a:	4602      	mov	r2, r0
 800e22c:	4b23      	ldr	r3, [pc, #140]	@ (800e2bc <__d2b+0xa8>)
 800e22e:	4824      	ldr	r0, [pc, #144]	@ (800e2c0 <__d2b+0xac>)
 800e230:	f240 310f 	movw	r1, #783	@ 0x30f
 800e234:	f000 f976 	bl	800e524 <__assert_func>
 800e238:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e23c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e240:	b10d      	cbz	r5, 800e246 <__d2b+0x32>
 800e242:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e246:	9301      	str	r3, [sp, #4]
 800e248:	f1b8 0300 	subs.w	r3, r8, #0
 800e24c:	d023      	beq.n	800e296 <__d2b+0x82>
 800e24e:	4668      	mov	r0, sp
 800e250:	9300      	str	r3, [sp, #0]
 800e252:	f7ff fd0c 	bl	800dc6e <__lo0bits>
 800e256:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e25a:	b1d0      	cbz	r0, 800e292 <__d2b+0x7e>
 800e25c:	f1c0 0320 	rsb	r3, r0, #32
 800e260:	fa02 f303 	lsl.w	r3, r2, r3
 800e264:	430b      	orrs	r3, r1
 800e266:	40c2      	lsrs	r2, r0
 800e268:	6163      	str	r3, [r4, #20]
 800e26a:	9201      	str	r2, [sp, #4]
 800e26c:	9b01      	ldr	r3, [sp, #4]
 800e26e:	61a3      	str	r3, [r4, #24]
 800e270:	2b00      	cmp	r3, #0
 800e272:	bf0c      	ite	eq
 800e274:	2201      	moveq	r2, #1
 800e276:	2202      	movne	r2, #2
 800e278:	6122      	str	r2, [r4, #16]
 800e27a:	b1a5      	cbz	r5, 800e2a6 <__d2b+0x92>
 800e27c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e280:	4405      	add	r5, r0
 800e282:	603d      	str	r5, [r7, #0]
 800e284:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e288:	6030      	str	r0, [r6, #0]
 800e28a:	4620      	mov	r0, r4
 800e28c:	b003      	add	sp, #12
 800e28e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e292:	6161      	str	r1, [r4, #20]
 800e294:	e7ea      	b.n	800e26c <__d2b+0x58>
 800e296:	a801      	add	r0, sp, #4
 800e298:	f7ff fce9 	bl	800dc6e <__lo0bits>
 800e29c:	9b01      	ldr	r3, [sp, #4]
 800e29e:	6163      	str	r3, [r4, #20]
 800e2a0:	3020      	adds	r0, #32
 800e2a2:	2201      	movs	r2, #1
 800e2a4:	e7e8      	b.n	800e278 <__d2b+0x64>
 800e2a6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e2aa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e2ae:	6038      	str	r0, [r7, #0]
 800e2b0:	6918      	ldr	r0, [r3, #16]
 800e2b2:	f7ff fcbd 	bl	800dc30 <__hi0bits>
 800e2b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e2ba:	e7e5      	b.n	800e288 <__d2b+0x74>
 800e2bc:	080100f8 	.word	0x080100f8
 800e2c0:	08010180 	.word	0x08010180

0800e2c4 <__ratio>:
 800e2c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2c8:	b085      	sub	sp, #20
 800e2ca:	e9cd 1000 	strd	r1, r0, [sp]
 800e2ce:	a902      	add	r1, sp, #8
 800e2d0:	f7ff ff56 	bl	800e180 <__b2d>
 800e2d4:	9800      	ldr	r0, [sp, #0]
 800e2d6:	a903      	add	r1, sp, #12
 800e2d8:	ec55 4b10 	vmov	r4, r5, d0
 800e2dc:	f7ff ff50 	bl	800e180 <__b2d>
 800e2e0:	9b01      	ldr	r3, [sp, #4]
 800e2e2:	6919      	ldr	r1, [r3, #16]
 800e2e4:	9b00      	ldr	r3, [sp, #0]
 800e2e6:	691b      	ldr	r3, [r3, #16]
 800e2e8:	1ac9      	subs	r1, r1, r3
 800e2ea:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e2ee:	1a9b      	subs	r3, r3, r2
 800e2f0:	ec5b ab10 	vmov	sl, fp, d0
 800e2f4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	bfce      	itee	gt
 800e2fc:	462a      	movgt	r2, r5
 800e2fe:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e302:	465a      	movle	r2, fp
 800e304:	462f      	mov	r7, r5
 800e306:	46d9      	mov	r9, fp
 800e308:	bfcc      	ite	gt
 800e30a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e30e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800e312:	464b      	mov	r3, r9
 800e314:	4652      	mov	r2, sl
 800e316:	4620      	mov	r0, r4
 800e318:	4639      	mov	r1, r7
 800e31a:	f7f2 faaf 	bl	800087c <__aeabi_ddiv>
 800e31e:	ec41 0b10 	vmov	d0, r0, r1
 800e322:	b005      	add	sp, #20
 800e324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e328 <__copybits>:
 800e328:	3901      	subs	r1, #1
 800e32a:	b570      	push	{r4, r5, r6, lr}
 800e32c:	1149      	asrs	r1, r1, #5
 800e32e:	6914      	ldr	r4, [r2, #16]
 800e330:	3101      	adds	r1, #1
 800e332:	f102 0314 	add.w	r3, r2, #20
 800e336:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e33a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e33e:	1f05      	subs	r5, r0, #4
 800e340:	42a3      	cmp	r3, r4
 800e342:	d30c      	bcc.n	800e35e <__copybits+0x36>
 800e344:	1aa3      	subs	r3, r4, r2
 800e346:	3b11      	subs	r3, #17
 800e348:	f023 0303 	bic.w	r3, r3, #3
 800e34c:	3211      	adds	r2, #17
 800e34e:	42a2      	cmp	r2, r4
 800e350:	bf88      	it	hi
 800e352:	2300      	movhi	r3, #0
 800e354:	4418      	add	r0, r3
 800e356:	2300      	movs	r3, #0
 800e358:	4288      	cmp	r0, r1
 800e35a:	d305      	bcc.n	800e368 <__copybits+0x40>
 800e35c:	bd70      	pop	{r4, r5, r6, pc}
 800e35e:	f853 6b04 	ldr.w	r6, [r3], #4
 800e362:	f845 6f04 	str.w	r6, [r5, #4]!
 800e366:	e7eb      	b.n	800e340 <__copybits+0x18>
 800e368:	f840 3b04 	str.w	r3, [r0], #4
 800e36c:	e7f4      	b.n	800e358 <__copybits+0x30>

0800e36e <__any_on>:
 800e36e:	f100 0214 	add.w	r2, r0, #20
 800e372:	6900      	ldr	r0, [r0, #16]
 800e374:	114b      	asrs	r3, r1, #5
 800e376:	4298      	cmp	r0, r3
 800e378:	b510      	push	{r4, lr}
 800e37a:	db11      	blt.n	800e3a0 <__any_on+0x32>
 800e37c:	dd0a      	ble.n	800e394 <__any_on+0x26>
 800e37e:	f011 011f 	ands.w	r1, r1, #31
 800e382:	d007      	beq.n	800e394 <__any_on+0x26>
 800e384:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e388:	fa24 f001 	lsr.w	r0, r4, r1
 800e38c:	fa00 f101 	lsl.w	r1, r0, r1
 800e390:	428c      	cmp	r4, r1
 800e392:	d10b      	bne.n	800e3ac <__any_on+0x3e>
 800e394:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e398:	4293      	cmp	r3, r2
 800e39a:	d803      	bhi.n	800e3a4 <__any_on+0x36>
 800e39c:	2000      	movs	r0, #0
 800e39e:	bd10      	pop	{r4, pc}
 800e3a0:	4603      	mov	r3, r0
 800e3a2:	e7f7      	b.n	800e394 <__any_on+0x26>
 800e3a4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e3a8:	2900      	cmp	r1, #0
 800e3aa:	d0f5      	beq.n	800e398 <__any_on+0x2a>
 800e3ac:	2001      	movs	r0, #1
 800e3ae:	e7f6      	b.n	800e39e <__any_on+0x30>

0800e3b0 <__ascii_wctomb>:
 800e3b0:	4603      	mov	r3, r0
 800e3b2:	4608      	mov	r0, r1
 800e3b4:	b141      	cbz	r1, 800e3c8 <__ascii_wctomb+0x18>
 800e3b6:	2aff      	cmp	r2, #255	@ 0xff
 800e3b8:	d904      	bls.n	800e3c4 <__ascii_wctomb+0x14>
 800e3ba:	228a      	movs	r2, #138	@ 0x8a
 800e3bc:	601a      	str	r2, [r3, #0]
 800e3be:	f04f 30ff 	mov.w	r0, #4294967295
 800e3c2:	4770      	bx	lr
 800e3c4:	700a      	strb	r2, [r1, #0]
 800e3c6:	2001      	movs	r0, #1
 800e3c8:	4770      	bx	lr
	...

0800e3cc <__sflush_r>:
 800e3cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e3d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3d4:	0716      	lsls	r6, r2, #28
 800e3d6:	4605      	mov	r5, r0
 800e3d8:	460c      	mov	r4, r1
 800e3da:	d454      	bmi.n	800e486 <__sflush_r+0xba>
 800e3dc:	684b      	ldr	r3, [r1, #4]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	dc02      	bgt.n	800e3e8 <__sflush_r+0x1c>
 800e3e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	dd48      	ble.n	800e47a <__sflush_r+0xae>
 800e3e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e3ea:	2e00      	cmp	r6, #0
 800e3ec:	d045      	beq.n	800e47a <__sflush_r+0xae>
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e3f4:	682f      	ldr	r7, [r5, #0]
 800e3f6:	6a21      	ldr	r1, [r4, #32]
 800e3f8:	602b      	str	r3, [r5, #0]
 800e3fa:	d030      	beq.n	800e45e <__sflush_r+0x92>
 800e3fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e3fe:	89a3      	ldrh	r3, [r4, #12]
 800e400:	0759      	lsls	r1, r3, #29
 800e402:	d505      	bpl.n	800e410 <__sflush_r+0x44>
 800e404:	6863      	ldr	r3, [r4, #4]
 800e406:	1ad2      	subs	r2, r2, r3
 800e408:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e40a:	b10b      	cbz	r3, 800e410 <__sflush_r+0x44>
 800e40c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e40e:	1ad2      	subs	r2, r2, r3
 800e410:	2300      	movs	r3, #0
 800e412:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e414:	6a21      	ldr	r1, [r4, #32]
 800e416:	4628      	mov	r0, r5
 800e418:	47b0      	blx	r6
 800e41a:	1c43      	adds	r3, r0, #1
 800e41c:	89a3      	ldrh	r3, [r4, #12]
 800e41e:	d106      	bne.n	800e42e <__sflush_r+0x62>
 800e420:	6829      	ldr	r1, [r5, #0]
 800e422:	291d      	cmp	r1, #29
 800e424:	d82b      	bhi.n	800e47e <__sflush_r+0xb2>
 800e426:	4a2a      	ldr	r2, [pc, #168]	@ (800e4d0 <__sflush_r+0x104>)
 800e428:	410a      	asrs	r2, r1
 800e42a:	07d6      	lsls	r6, r2, #31
 800e42c:	d427      	bmi.n	800e47e <__sflush_r+0xb2>
 800e42e:	2200      	movs	r2, #0
 800e430:	6062      	str	r2, [r4, #4]
 800e432:	04d9      	lsls	r1, r3, #19
 800e434:	6922      	ldr	r2, [r4, #16]
 800e436:	6022      	str	r2, [r4, #0]
 800e438:	d504      	bpl.n	800e444 <__sflush_r+0x78>
 800e43a:	1c42      	adds	r2, r0, #1
 800e43c:	d101      	bne.n	800e442 <__sflush_r+0x76>
 800e43e:	682b      	ldr	r3, [r5, #0]
 800e440:	b903      	cbnz	r3, 800e444 <__sflush_r+0x78>
 800e442:	6560      	str	r0, [r4, #84]	@ 0x54
 800e444:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e446:	602f      	str	r7, [r5, #0]
 800e448:	b1b9      	cbz	r1, 800e47a <__sflush_r+0xae>
 800e44a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e44e:	4299      	cmp	r1, r3
 800e450:	d002      	beq.n	800e458 <__sflush_r+0x8c>
 800e452:	4628      	mov	r0, r5
 800e454:	f7fe ff64 	bl	800d320 <_free_r>
 800e458:	2300      	movs	r3, #0
 800e45a:	6363      	str	r3, [r4, #52]	@ 0x34
 800e45c:	e00d      	b.n	800e47a <__sflush_r+0xae>
 800e45e:	2301      	movs	r3, #1
 800e460:	4628      	mov	r0, r5
 800e462:	47b0      	blx	r6
 800e464:	4602      	mov	r2, r0
 800e466:	1c50      	adds	r0, r2, #1
 800e468:	d1c9      	bne.n	800e3fe <__sflush_r+0x32>
 800e46a:	682b      	ldr	r3, [r5, #0]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d0c6      	beq.n	800e3fe <__sflush_r+0x32>
 800e470:	2b1d      	cmp	r3, #29
 800e472:	d001      	beq.n	800e478 <__sflush_r+0xac>
 800e474:	2b16      	cmp	r3, #22
 800e476:	d11e      	bne.n	800e4b6 <__sflush_r+0xea>
 800e478:	602f      	str	r7, [r5, #0]
 800e47a:	2000      	movs	r0, #0
 800e47c:	e022      	b.n	800e4c4 <__sflush_r+0xf8>
 800e47e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e482:	b21b      	sxth	r3, r3
 800e484:	e01b      	b.n	800e4be <__sflush_r+0xf2>
 800e486:	690f      	ldr	r7, [r1, #16]
 800e488:	2f00      	cmp	r7, #0
 800e48a:	d0f6      	beq.n	800e47a <__sflush_r+0xae>
 800e48c:	0793      	lsls	r3, r2, #30
 800e48e:	680e      	ldr	r6, [r1, #0]
 800e490:	bf08      	it	eq
 800e492:	694b      	ldreq	r3, [r1, #20]
 800e494:	600f      	str	r7, [r1, #0]
 800e496:	bf18      	it	ne
 800e498:	2300      	movne	r3, #0
 800e49a:	eba6 0807 	sub.w	r8, r6, r7
 800e49e:	608b      	str	r3, [r1, #8]
 800e4a0:	f1b8 0f00 	cmp.w	r8, #0
 800e4a4:	dde9      	ble.n	800e47a <__sflush_r+0xae>
 800e4a6:	6a21      	ldr	r1, [r4, #32]
 800e4a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e4aa:	4643      	mov	r3, r8
 800e4ac:	463a      	mov	r2, r7
 800e4ae:	4628      	mov	r0, r5
 800e4b0:	47b0      	blx	r6
 800e4b2:	2800      	cmp	r0, #0
 800e4b4:	dc08      	bgt.n	800e4c8 <__sflush_r+0xfc>
 800e4b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e4ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e4be:	81a3      	strh	r3, [r4, #12]
 800e4c0:	f04f 30ff 	mov.w	r0, #4294967295
 800e4c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4c8:	4407      	add	r7, r0
 800e4ca:	eba8 0800 	sub.w	r8, r8, r0
 800e4ce:	e7e7      	b.n	800e4a0 <__sflush_r+0xd4>
 800e4d0:	dfbffffe 	.word	0xdfbffffe

0800e4d4 <_fflush_r>:
 800e4d4:	b538      	push	{r3, r4, r5, lr}
 800e4d6:	690b      	ldr	r3, [r1, #16]
 800e4d8:	4605      	mov	r5, r0
 800e4da:	460c      	mov	r4, r1
 800e4dc:	b913      	cbnz	r3, 800e4e4 <_fflush_r+0x10>
 800e4de:	2500      	movs	r5, #0
 800e4e0:	4628      	mov	r0, r5
 800e4e2:	bd38      	pop	{r3, r4, r5, pc}
 800e4e4:	b118      	cbz	r0, 800e4ee <_fflush_r+0x1a>
 800e4e6:	6a03      	ldr	r3, [r0, #32]
 800e4e8:	b90b      	cbnz	r3, 800e4ee <_fflush_r+0x1a>
 800e4ea:	f7fe fde9 	bl	800d0c0 <__sinit>
 800e4ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d0f3      	beq.n	800e4de <_fflush_r+0xa>
 800e4f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e4f8:	07d0      	lsls	r0, r2, #31
 800e4fa:	d404      	bmi.n	800e506 <_fflush_r+0x32>
 800e4fc:	0599      	lsls	r1, r3, #22
 800e4fe:	d402      	bmi.n	800e506 <_fflush_r+0x32>
 800e500:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e502:	f7fe fef2 	bl	800d2ea <__retarget_lock_acquire_recursive>
 800e506:	4628      	mov	r0, r5
 800e508:	4621      	mov	r1, r4
 800e50a:	f7ff ff5f 	bl	800e3cc <__sflush_r>
 800e50e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e510:	07da      	lsls	r2, r3, #31
 800e512:	4605      	mov	r5, r0
 800e514:	d4e4      	bmi.n	800e4e0 <_fflush_r+0xc>
 800e516:	89a3      	ldrh	r3, [r4, #12]
 800e518:	059b      	lsls	r3, r3, #22
 800e51a:	d4e1      	bmi.n	800e4e0 <_fflush_r+0xc>
 800e51c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e51e:	f7fe fee5 	bl	800d2ec <__retarget_lock_release_recursive>
 800e522:	e7dd      	b.n	800e4e0 <_fflush_r+0xc>

0800e524 <__assert_func>:
 800e524:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e526:	4614      	mov	r4, r2
 800e528:	461a      	mov	r2, r3
 800e52a:	4b09      	ldr	r3, [pc, #36]	@ (800e550 <__assert_func+0x2c>)
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	4605      	mov	r5, r0
 800e530:	68d8      	ldr	r0, [r3, #12]
 800e532:	b954      	cbnz	r4, 800e54a <__assert_func+0x26>
 800e534:	4b07      	ldr	r3, [pc, #28]	@ (800e554 <__assert_func+0x30>)
 800e536:	461c      	mov	r4, r3
 800e538:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e53c:	9100      	str	r1, [sp, #0]
 800e53e:	462b      	mov	r3, r5
 800e540:	4905      	ldr	r1, [pc, #20]	@ (800e558 <__assert_func+0x34>)
 800e542:	f000 f821 	bl	800e588 <fiprintf>
 800e546:	f000 f831 	bl	800e5ac <abort>
 800e54a:	4b04      	ldr	r3, [pc, #16]	@ (800e55c <__assert_func+0x38>)
 800e54c:	e7f4      	b.n	800e538 <__assert_func+0x14>
 800e54e:	bf00      	nop
 800e550:	200001dc 	.word	0x200001dc
 800e554:	08010414 	.word	0x08010414
 800e558:	080103e6 	.word	0x080103e6
 800e55c:	080103d9 	.word	0x080103d9

0800e560 <_calloc_r>:
 800e560:	b570      	push	{r4, r5, r6, lr}
 800e562:	fba1 5402 	umull	r5, r4, r1, r2
 800e566:	b93c      	cbnz	r4, 800e578 <_calloc_r+0x18>
 800e568:	4629      	mov	r1, r5
 800e56a:	f7fd fe81 	bl	800c270 <_malloc_r>
 800e56e:	4606      	mov	r6, r0
 800e570:	b928      	cbnz	r0, 800e57e <_calloc_r+0x1e>
 800e572:	2600      	movs	r6, #0
 800e574:	4630      	mov	r0, r6
 800e576:	bd70      	pop	{r4, r5, r6, pc}
 800e578:	220c      	movs	r2, #12
 800e57a:	6002      	str	r2, [r0, #0]
 800e57c:	e7f9      	b.n	800e572 <_calloc_r+0x12>
 800e57e:	462a      	mov	r2, r5
 800e580:	4621      	mov	r1, r4
 800e582:	f7fe fe16 	bl	800d1b2 <memset>
 800e586:	e7f5      	b.n	800e574 <_calloc_r+0x14>

0800e588 <fiprintf>:
 800e588:	b40e      	push	{r1, r2, r3}
 800e58a:	b503      	push	{r0, r1, lr}
 800e58c:	4601      	mov	r1, r0
 800e58e:	ab03      	add	r3, sp, #12
 800e590:	4805      	ldr	r0, [pc, #20]	@ (800e5a8 <fiprintf+0x20>)
 800e592:	f853 2b04 	ldr.w	r2, [r3], #4
 800e596:	6800      	ldr	r0, [r0, #0]
 800e598:	9301      	str	r3, [sp, #4]
 800e59a:	f000 f837 	bl	800e60c <_vfiprintf_r>
 800e59e:	b002      	add	sp, #8
 800e5a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e5a4:	b003      	add	sp, #12
 800e5a6:	4770      	bx	lr
 800e5a8:	200001dc 	.word	0x200001dc

0800e5ac <abort>:
 800e5ac:	b508      	push	{r3, lr}
 800e5ae:	2006      	movs	r0, #6
 800e5b0:	f000 fb8e 	bl	800ecd0 <raise>
 800e5b4:	2001      	movs	r0, #1
 800e5b6:	f7f7 fe3b 	bl	8006230 <_exit>

0800e5ba <__sfputc_r>:
 800e5ba:	6893      	ldr	r3, [r2, #8]
 800e5bc:	3b01      	subs	r3, #1
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	b410      	push	{r4}
 800e5c2:	6093      	str	r3, [r2, #8]
 800e5c4:	da08      	bge.n	800e5d8 <__sfputc_r+0x1e>
 800e5c6:	6994      	ldr	r4, [r2, #24]
 800e5c8:	42a3      	cmp	r3, r4
 800e5ca:	db01      	blt.n	800e5d0 <__sfputc_r+0x16>
 800e5cc:	290a      	cmp	r1, #10
 800e5ce:	d103      	bne.n	800e5d8 <__sfputc_r+0x1e>
 800e5d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e5d4:	f000 bac0 	b.w	800eb58 <__swbuf_r>
 800e5d8:	6813      	ldr	r3, [r2, #0]
 800e5da:	1c58      	adds	r0, r3, #1
 800e5dc:	6010      	str	r0, [r2, #0]
 800e5de:	7019      	strb	r1, [r3, #0]
 800e5e0:	4608      	mov	r0, r1
 800e5e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e5e6:	4770      	bx	lr

0800e5e8 <__sfputs_r>:
 800e5e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5ea:	4606      	mov	r6, r0
 800e5ec:	460f      	mov	r7, r1
 800e5ee:	4614      	mov	r4, r2
 800e5f0:	18d5      	adds	r5, r2, r3
 800e5f2:	42ac      	cmp	r4, r5
 800e5f4:	d101      	bne.n	800e5fa <__sfputs_r+0x12>
 800e5f6:	2000      	movs	r0, #0
 800e5f8:	e007      	b.n	800e60a <__sfputs_r+0x22>
 800e5fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5fe:	463a      	mov	r2, r7
 800e600:	4630      	mov	r0, r6
 800e602:	f7ff ffda 	bl	800e5ba <__sfputc_r>
 800e606:	1c43      	adds	r3, r0, #1
 800e608:	d1f3      	bne.n	800e5f2 <__sfputs_r+0xa>
 800e60a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e60c <_vfiprintf_r>:
 800e60c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e610:	460d      	mov	r5, r1
 800e612:	b09d      	sub	sp, #116	@ 0x74
 800e614:	4614      	mov	r4, r2
 800e616:	4698      	mov	r8, r3
 800e618:	4606      	mov	r6, r0
 800e61a:	b118      	cbz	r0, 800e624 <_vfiprintf_r+0x18>
 800e61c:	6a03      	ldr	r3, [r0, #32]
 800e61e:	b90b      	cbnz	r3, 800e624 <_vfiprintf_r+0x18>
 800e620:	f7fe fd4e 	bl	800d0c0 <__sinit>
 800e624:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e626:	07d9      	lsls	r1, r3, #31
 800e628:	d405      	bmi.n	800e636 <_vfiprintf_r+0x2a>
 800e62a:	89ab      	ldrh	r3, [r5, #12]
 800e62c:	059a      	lsls	r2, r3, #22
 800e62e:	d402      	bmi.n	800e636 <_vfiprintf_r+0x2a>
 800e630:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e632:	f7fe fe5a 	bl	800d2ea <__retarget_lock_acquire_recursive>
 800e636:	89ab      	ldrh	r3, [r5, #12]
 800e638:	071b      	lsls	r3, r3, #28
 800e63a:	d501      	bpl.n	800e640 <_vfiprintf_r+0x34>
 800e63c:	692b      	ldr	r3, [r5, #16]
 800e63e:	b99b      	cbnz	r3, 800e668 <_vfiprintf_r+0x5c>
 800e640:	4629      	mov	r1, r5
 800e642:	4630      	mov	r0, r6
 800e644:	f000 fac6 	bl	800ebd4 <__swsetup_r>
 800e648:	b170      	cbz	r0, 800e668 <_vfiprintf_r+0x5c>
 800e64a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e64c:	07dc      	lsls	r4, r3, #31
 800e64e:	d504      	bpl.n	800e65a <_vfiprintf_r+0x4e>
 800e650:	f04f 30ff 	mov.w	r0, #4294967295
 800e654:	b01d      	add	sp, #116	@ 0x74
 800e656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e65a:	89ab      	ldrh	r3, [r5, #12]
 800e65c:	0598      	lsls	r0, r3, #22
 800e65e:	d4f7      	bmi.n	800e650 <_vfiprintf_r+0x44>
 800e660:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e662:	f7fe fe43 	bl	800d2ec <__retarget_lock_release_recursive>
 800e666:	e7f3      	b.n	800e650 <_vfiprintf_r+0x44>
 800e668:	2300      	movs	r3, #0
 800e66a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e66c:	2320      	movs	r3, #32
 800e66e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e672:	f8cd 800c 	str.w	r8, [sp, #12]
 800e676:	2330      	movs	r3, #48	@ 0x30
 800e678:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e828 <_vfiprintf_r+0x21c>
 800e67c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e680:	f04f 0901 	mov.w	r9, #1
 800e684:	4623      	mov	r3, r4
 800e686:	469a      	mov	sl, r3
 800e688:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e68c:	b10a      	cbz	r2, 800e692 <_vfiprintf_r+0x86>
 800e68e:	2a25      	cmp	r2, #37	@ 0x25
 800e690:	d1f9      	bne.n	800e686 <_vfiprintf_r+0x7a>
 800e692:	ebba 0b04 	subs.w	fp, sl, r4
 800e696:	d00b      	beq.n	800e6b0 <_vfiprintf_r+0xa4>
 800e698:	465b      	mov	r3, fp
 800e69a:	4622      	mov	r2, r4
 800e69c:	4629      	mov	r1, r5
 800e69e:	4630      	mov	r0, r6
 800e6a0:	f7ff ffa2 	bl	800e5e8 <__sfputs_r>
 800e6a4:	3001      	adds	r0, #1
 800e6a6:	f000 80a7 	beq.w	800e7f8 <_vfiprintf_r+0x1ec>
 800e6aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e6ac:	445a      	add	r2, fp
 800e6ae:	9209      	str	r2, [sp, #36]	@ 0x24
 800e6b0:	f89a 3000 	ldrb.w	r3, [sl]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	f000 809f 	beq.w	800e7f8 <_vfiprintf_r+0x1ec>
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	f04f 32ff 	mov.w	r2, #4294967295
 800e6c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e6c4:	f10a 0a01 	add.w	sl, sl, #1
 800e6c8:	9304      	str	r3, [sp, #16]
 800e6ca:	9307      	str	r3, [sp, #28]
 800e6cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e6d0:	931a      	str	r3, [sp, #104]	@ 0x68
 800e6d2:	4654      	mov	r4, sl
 800e6d4:	2205      	movs	r2, #5
 800e6d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e6da:	4853      	ldr	r0, [pc, #332]	@ (800e828 <_vfiprintf_r+0x21c>)
 800e6dc:	f7f1 fd98 	bl	8000210 <memchr>
 800e6e0:	9a04      	ldr	r2, [sp, #16]
 800e6e2:	b9d8      	cbnz	r0, 800e71c <_vfiprintf_r+0x110>
 800e6e4:	06d1      	lsls	r1, r2, #27
 800e6e6:	bf44      	itt	mi
 800e6e8:	2320      	movmi	r3, #32
 800e6ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e6ee:	0713      	lsls	r3, r2, #28
 800e6f0:	bf44      	itt	mi
 800e6f2:	232b      	movmi	r3, #43	@ 0x2b
 800e6f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e6f8:	f89a 3000 	ldrb.w	r3, [sl]
 800e6fc:	2b2a      	cmp	r3, #42	@ 0x2a
 800e6fe:	d015      	beq.n	800e72c <_vfiprintf_r+0x120>
 800e700:	9a07      	ldr	r2, [sp, #28]
 800e702:	4654      	mov	r4, sl
 800e704:	2000      	movs	r0, #0
 800e706:	f04f 0c0a 	mov.w	ip, #10
 800e70a:	4621      	mov	r1, r4
 800e70c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e710:	3b30      	subs	r3, #48	@ 0x30
 800e712:	2b09      	cmp	r3, #9
 800e714:	d94b      	bls.n	800e7ae <_vfiprintf_r+0x1a2>
 800e716:	b1b0      	cbz	r0, 800e746 <_vfiprintf_r+0x13a>
 800e718:	9207      	str	r2, [sp, #28]
 800e71a:	e014      	b.n	800e746 <_vfiprintf_r+0x13a>
 800e71c:	eba0 0308 	sub.w	r3, r0, r8
 800e720:	fa09 f303 	lsl.w	r3, r9, r3
 800e724:	4313      	orrs	r3, r2
 800e726:	9304      	str	r3, [sp, #16]
 800e728:	46a2      	mov	sl, r4
 800e72a:	e7d2      	b.n	800e6d2 <_vfiprintf_r+0xc6>
 800e72c:	9b03      	ldr	r3, [sp, #12]
 800e72e:	1d19      	adds	r1, r3, #4
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	9103      	str	r1, [sp, #12]
 800e734:	2b00      	cmp	r3, #0
 800e736:	bfbb      	ittet	lt
 800e738:	425b      	neglt	r3, r3
 800e73a:	f042 0202 	orrlt.w	r2, r2, #2
 800e73e:	9307      	strge	r3, [sp, #28]
 800e740:	9307      	strlt	r3, [sp, #28]
 800e742:	bfb8      	it	lt
 800e744:	9204      	strlt	r2, [sp, #16]
 800e746:	7823      	ldrb	r3, [r4, #0]
 800e748:	2b2e      	cmp	r3, #46	@ 0x2e
 800e74a:	d10a      	bne.n	800e762 <_vfiprintf_r+0x156>
 800e74c:	7863      	ldrb	r3, [r4, #1]
 800e74e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e750:	d132      	bne.n	800e7b8 <_vfiprintf_r+0x1ac>
 800e752:	9b03      	ldr	r3, [sp, #12]
 800e754:	1d1a      	adds	r2, r3, #4
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	9203      	str	r2, [sp, #12]
 800e75a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e75e:	3402      	adds	r4, #2
 800e760:	9305      	str	r3, [sp, #20]
 800e762:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e838 <_vfiprintf_r+0x22c>
 800e766:	7821      	ldrb	r1, [r4, #0]
 800e768:	2203      	movs	r2, #3
 800e76a:	4650      	mov	r0, sl
 800e76c:	f7f1 fd50 	bl	8000210 <memchr>
 800e770:	b138      	cbz	r0, 800e782 <_vfiprintf_r+0x176>
 800e772:	9b04      	ldr	r3, [sp, #16]
 800e774:	eba0 000a 	sub.w	r0, r0, sl
 800e778:	2240      	movs	r2, #64	@ 0x40
 800e77a:	4082      	lsls	r2, r0
 800e77c:	4313      	orrs	r3, r2
 800e77e:	3401      	adds	r4, #1
 800e780:	9304      	str	r3, [sp, #16]
 800e782:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e786:	4829      	ldr	r0, [pc, #164]	@ (800e82c <_vfiprintf_r+0x220>)
 800e788:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e78c:	2206      	movs	r2, #6
 800e78e:	f7f1 fd3f 	bl	8000210 <memchr>
 800e792:	2800      	cmp	r0, #0
 800e794:	d03f      	beq.n	800e816 <_vfiprintf_r+0x20a>
 800e796:	4b26      	ldr	r3, [pc, #152]	@ (800e830 <_vfiprintf_r+0x224>)
 800e798:	bb1b      	cbnz	r3, 800e7e2 <_vfiprintf_r+0x1d6>
 800e79a:	9b03      	ldr	r3, [sp, #12]
 800e79c:	3307      	adds	r3, #7
 800e79e:	f023 0307 	bic.w	r3, r3, #7
 800e7a2:	3308      	adds	r3, #8
 800e7a4:	9303      	str	r3, [sp, #12]
 800e7a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e7a8:	443b      	add	r3, r7
 800e7aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800e7ac:	e76a      	b.n	800e684 <_vfiprintf_r+0x78>
 800e7ae:	fb0c 3202 	mla	r2, ip, r2, r3
 800e7b2:	460c      	mov	r4, r1
 800e7b4:	2001      	movs	r0, #1
 800e7b6:	e7a8      	b.n	800e70a <_vfiprintf_r+0xfe>
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	3401      	adds	r4, #1
 800e7bc:	9305      	str	r3, [sp, #20]
 800e7be:	4619      	mov	r1, r3
 800e7c0:	f04f 0c0a 	mov.w	ip, #10
 800e7c4:	4620      	mov	r0, r4
 800e7c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e7ca:	3a30      	subs	r2, #48	@ 0x30
 800e7cc:	2a09      	cmp	r2, #9
 800e7ce:	d903      	bls.n	800e7d8 <_vfiprintf_r+0x1cc>
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d0c6      	beq.n	800e762 <_vfiprintf_r+0x156>
 800e7d4:	9105      	str	r1, [sp, #20]
 800e7d6:	e7c4      	b.n	800e762 <_vfiprintf_r+0x156>
 800e7d8:	fb0c 2101 	mla	r1, ip, r1, r2
 800e7dc:	4604      	mov	r4, r0
 800e7de:	2301      	movs	r3, #1
 800e7e0:	e7f0      	b.n	800e7c4 <_vfiprintf_r+0x1b8>
 800e7e2:	ab03      	add	r3, sp, #12
 800e7e4:	9300      	str	r3, [sp, #0]
 800e7e6:	462a      	mov	r2, r5
 800e7e8:	4b12      	ldr	r3, [pc, #72]	@ (800e834 <_vfiprintf_r+0x228>)
 800e7ea:	a904      	add	r1, sp, #16
 800e7ec:	4630      	mov	r0, r6
 800e7ee:	f3af 8000 	nop.w
 800e7f2:	4607      	mov	r7, r0
 800e7f4:	1c78      	adds	r0, r7, #1
 800e7f6:	d1d6      	bne.n	800e7a6 <_vfiprintf_r+0x19a>
 800e7f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e7fa:	07d9      	lsls	r1, r3, #31
 800e7fc:	d405      	bmi.n	800e80a <_vfiprintf_r+0x1fe>
 800e7fe:	89ab      	ldrh	r3, [r5, #12]
 800e800:	059a      	lsls	r2, r3, #22
 800e802:	d402      	bmi.n	800e80a <_vfiprintf_r+0x1fe>
 800e804:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e806:	f7fe fd71 	bl	800d2ec <__retarget_lock_release_recursive>
 800e80a:	89ab      	ldrh	r3, [r5, #12]
 800e80c:	065b      	lsls	r3, r3, #25
 800e80e:	f53f af1f 	bmi.w	800e650 <_vfiprintf_r+0x44>
 800e812:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e814:	e71e      	b.n	800e654 <_vfiprintf_r+0x48>
 800e816:	ab03      	add	r3, sp, #12
 800e818:	9300      	str	r3, [sp, #0]
 800e81a:	462a      	mov	r2, r5
 800e81c:	4b05      	ldr	r3, [pc, #20]	@ (800e834 <_vfiprintf_r+0x228>)
 800e81e:	a904      	add	r1, sp, #16
 800e820:	4630      	mov	r0, r6
 800e822:	f000 f879 	bl	800e918 <_printf_i>
 800e826:	e7e4      	b.n	800e7f2 <_vfiprintf_r+0x1e6>
 800e828:	08010415 	.word	0x08010415
 800e82c:	0801041f 	.word	0x0801041f
 800e830:	00000000 	.word	0x00000000
 800e834:	0800e5e9 	.word	0x0800e5e9
 800e838:	0801041b 	.word	0x0801041b

0800e83c <_printf_common>:
 800e83c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e840:	4616      	mov	r6, r2
 800e842:	4698      	mov	r8, r3
 800e844:	688a      	ldr	r2, [r1, #8]
 800e846:	690b      	ldr	r3, [r1, #16]
 800e848:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e84c:	4293      	cmp	r3, r2
 800e84e:	bfb8      	it	lt
 800e850:	4613      	movlt	r3, r2
 800e852:	6033      	str	r3, [r6, #0]
 800e854:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e858:	4607      	mov	r7, r0
 800e85a:	460c      	mov	r4, r1
 800e85c:	b10a      	cbz	r2, 800e862 <_printf_common+0x26>
 800e85e:	3301      	adds	r3, #1
 800e860:	6033      	str	r3, [r6, #0]
 800e862:	6823      	ldr	r3, [r4, #0]
 800e864:	0699      	lsls	r1, r3, #26
 800e866:	bf42      	ittt	mi
 800e868:	6833      	ldrmi	r3, [r6, #0]
 800e86a:	3302      	addmi	r3, #2
 800e86c:	6033      	strmi	r3, [r6, #0]
 800e86e:	6825      	ldr	r5, [r4, #0]
 800e870:	f015 0506 	ands.w	r5, r5, #6
 800e874:	d106      	bne.n	800e884 <_printf_common+0x48>
 800e876:	f104 0a19 	add.w	sl, r4, #25
 800e87a:	68e3      	ldr	r3, [r4, #12]
 800e87c:	6832      	ldr	r2, [r6, #0]
 800e87e:	1a9b      	subs	r3, r3, r2
 800e880:	42ab      	cmp	r3, r5
 800e882:	dc26      	bgt.n	800e8d2 <_printf_common+0x96>
 800e884:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e888:	6822      	ldr	r2, [r4, #0]
 800e88a:	3b00      	subs	r3, #0
 800e88c:	bf18      	it	ne
 800e88e:	2301      	movne	r3, #1
 800e890:	0692      	lsls	r2, r2, #26
 800e892:	d42b      	bmi.n	800e8ec <_printf_common+0xb0>
 800e894:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e898:	4641      	mov	r1, r8
 800e89a:	4638      	mov	r0, r7
 800e89c:	47c8      	blx	r9
 800e89e:	3001      	adds	r0, #1
 800e8a0:	d01e      	beq.n	800e8e0 <_printf_common+0xa4>
 800e8a2:	6823      	ldr	r3, [r4, #0]
 800e8a4:	6922      	ldr	r2, [r4, #16]
 800e8a6:	f003 0306 	and.w	r3, r3, #6
 800e8aa:	2b04      	cmp	r3, #4
 800e8ac:	bf02      	ittt	eq
 800e8ae:	68e5      	ldreq	r5, [r4, #12]
 800e8b0:	6833      	ldreq	r3, [r6, #0]
 800e8b2:	1aed      	subeq	r5, r5, r3
 800e8b4:	68a3      	ldr	r3, [r4, #8]
 800e8b6:	bf0c      	ite	eq
 800e8b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e8bc:	2500      	movne	r5, #0
 800e8be:	4293      	cmp	r3, r2
 800e8c0:	bfc4      	itt	gt
 800e8c2:	1a9b      	subgt	r3, r3, r2
 800e8c4:	18ed      	addgt	r5, r5, r3
 800e8c6:	2600      	movs	r6, #0
 800e8c8:	341a      	adds	r4, #26
 800e8ca:	42b5      	cmp	r5, r6
 800e8cc:	d11a      	bne.n	800e904 <_printf_common+0xc8>
 800e8ce:	2000      	movs	r0, #0
 800e8d0:	e008      	b.n	800e8e4 <_printf_common+0xa8>
 800e8d2:	2301      	movs	r3, #1
 800e8d4:	4652      	mov	r2, sl
 800e8d6:	4641      	mov	r1, r8
 800e8d8:	4638      	mov	r0, r7
 800e8da:	47c8      	blx	r9
 800e8dc:	3001      	adds	r0, #1
 800e8de:	d103      	bne.n	800e8e8 <_printf_common+0xac>
 800e8e0:	f04f 30ff 	mov.w	r0, #4294967295
 800e8e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8e8:	3501      	adds	r5, #1
 800e8ea:	e7c6      	b.n	800e87a <_printf_common+0x3e>
 800e8ec:	18e1      	adds	r1, r4, r3
 800e8ee:	1c5a      	adds	r2, r3, #1
 800e8f0:	2030      	movs	r0, #48	@ 0x30
 800e8f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e8f6:	4422      	add	r2, r4
 800e8f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e8fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e900:	3302      	adds	r3, #2
 800e902:	e7c7      	b.n	800e894 <_printf_common+0x58>
 800e904:	2301      	movs	r3, #1
 800e906:	4622      	mov	r2, r4
 800e908:	4641      	mov	r1, r8
 800e90a:	4638      	mov	r0, r7
 800e90c:	47c8      	blx	r9
 800e90e:	3001      	adds	r0, #1
 800e910:	d0e6      	beq.n	800e8e0 <_printf_common+0xa4>
 800e912:	3601      	adds	r6, #1
 800e914:	e7d9      	b.n	800e8ca <_printf_common+0x8e>
	...

0800e918 <_printf_i>:
 800e918:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e91c:	7e0f      	ldrb	r7, [r1, #24]
 800e91e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e920:	2f78      	cmp	r7, #120	@ 0x78
 800e922:	4691      	mov	r9, r2
 800e924:	4680      	mov	r8, r0
 800e926:	460c      	mov	r4, r1
 800e928:	469a      	mov	sl, r3
 800e92a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e92e:	d807      	bhi.n	800e940 <_printf_i+0x28>
 800e930:	2f62      	cmp	r7, #98	@ 0x62
 800e932:	d80a      	bhi.n	800e94a <_printf_i+0x32>
 800e934:	2f00      	cmp	r7, #0
 800e936:	f000 80d2 	beq.w	800eade <_printf_i+0x1c6>
 800e93a:	2f58      	cmp	r7, #88	@ 0x58
 800e93c:	f000 80b9 	beq.w	800eab2 <_printf_i+0x19a>
 800e940:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e944:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e948:	e03a      	b.n	800e9c0 <_printf_i+0xa8>
 800e94a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e94e:	2b15      	cmp	r3, #21
 800e950:	d8f6      	bhi.n	800e940 <_printf_i+0x28>
 800e952:	a101      	add	r1, pc, #4	@ (adr r1, 800e958 <_printf_i+0x40>)
 800e954:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e958:	0800e9b1 	.word	0x0800e9b1
 800e95c:	0800e9c5 	.word	0x0800e9c5
 800e960:	0800e941 	.word	0x0800e941
 800e964:	0800e941 	.word	0x0800e941
 800e968:	0800e941 	.word	0x0800e941
 800e96c:	0800e941 	.word	0x0800e941
 800e970:	0800e9c5 	.word	0x0800e9c5
 800e974:	0800e941 	.word	0x0800e941
 800e978:	0800e941 	.word	0x0800e941
 800e97c:	0800e941 	.word	0x0800e941
 800e980:	0800e941 	.word	0x0800e941
 800e984:	0800eac5 	.word	0x0800eac5
 800e988:	0800e9ef 	.word	0x0800e9ef
 800e98c:	0800ea7f 	.word	0x0800ea7f
 800e990:	0800e941 	.word	0x0800e941
 800e994:	0800e941 	.word	0x0800e941
 800e998:	0800eae7 	.word	0x0800eae7
 800e99c:	0800e941 	.word	0x0800e941
 800e9a0:	0800e9ef 	.word	0x0800e9ef
 800e9a4:	0800e941 	.word	0x0800e941
 800e9a8:	0800e941 	.word	0x0800e941
 800e9ac:	0800ea87 	.word	0x0800ea87
 800e9b0:	6833      	ldr	r3, [r6, #0]
 800e9b2:	1d1a      	adds	r2, r3, #4
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	6032      	str	r2, [r6, #0]
 800e9b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e9bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e9c0:	2301      	movs	r3, #1
 800e9c2:	e09d      	b.n	800eb00 <_printf_i+0x1e8>
 800e9c4:	6833      	ldr	r3, [r6, #0]
 800e9c6:	6820      	ldr	r0, [r4, #0]
 800e9c8:	1d19      	adds	r1, r3, #4
 800e9ca:	6031      	str	r1, [r6, #0]
 800e9cc:	0606      	lsls	r6, r0, #24
 800e9ce:	d501      	bpl.n	800e9d4 <_printf_i+0xbc>
 800e9d0:	681d      	ldr	r5, [r3, #0]
 800e9d2:	e003      	b.n	800e9dc <_printf_i+0xc4>
 800e9d4:	0645      	lsls	r5, r0, #25
 800e9d6:	d5fb      	bpl.n	800e9d0 <_printf_i+0xb8>
 800e9d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e9dc:	2d00      	cmp	r5, #0
 800e9de:	da03      	bge.n	800e9e8 <_printf_i+0xd0>
 800e9e0:	232d      	movs	r3, #45	@ 0x2d
 800e9e2:	426d      	negs	r5, r5
 800e9e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e9e8:	4859      	ldr	r0, [pc, #356]	@ (800eb50 <_printf_i+0x238>)
 800e9ea:	230a      	movs	r3, #10
 800e9ec:	e011      	b.n	800ea12 <_printf_i+0xfa>
 800e9ee:	6821      	ldr	r1, [r4, #0]
 800e9f0:	6833      	ldr	r3, [r6, #0]
 800e9f2:	0608      	lsls	r0, r1, #24
 800e9f4:	f853 5b04 	ldr.w	r5, [r3], #4
 800e9f8:	d402      	bmi.n	800ea00 <_printf_i+0xe8>
 800e9fa:	0649      	lsls	r1, r1, #25
 800e9fc:	bf48      	it	mi
 800e9fe:	b2ad      	uxthmi	r5, r5
 800ea00:	2f6f      	cmp	r7, #111	@ 0x6f
 800ea02:	4853      	ldr	r0, [pc, #332]	@ (800eb50 <_printf_i+0x238>)
 800ea04:	6033      	str	r3, [r6, #0]
 800ea06:	bf14      	ite	ne
 800ea08:	230a      	movne	r3, #10
 800ea0a:	2308      	moveq	r3, #8
 800ea0c:	2100      	movs	r1, #0
 800ea0e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ea12:	6866      	ldr	r6, [r4, #4]
 800ea14:	60a6      	str	r6, [r4, #8]
 800ea16:	2e00      	cmp	r6, #0
 800ea18:	bfa2      	ittt	ge
 800ea1a:	6821      	ldrge	r1, [r4, #0]
 800ea1c:	f021 0104 	bicge.w	r1, r1, #4
 800ea20:	6021      	strge	r1, [r4, #0]
 800ea22:	b90d      	cbnz	r5, 800ea28 <_printf_i+0x110>
 800ea24:	2e00      	cmp	r6, #0
 800ea26:	d04b      	beq.n	800eac0 <_printf_i+0x1a8>
 800ea28:	4616      	mov	r6, r2
 800ea2a:	fbb5 f1f3 	udiv	r1, r5, r3
 800ea2e:	fb03 5711 	mls	r7, r3, r1, r5
 800ea32:	5dc7      	ldrb	r7, [r0, r7]
 800ea34:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ea38:	462f      	mov	r7, r5
 800ea3a:	42bb      	cmp	r3, r7
 800ea3c:	460d      	mov	r5, r1
 800ea3e:	d9f4      	bls.n	800ea2a <_printf_i+0x112>
 800ea40:	2b08      	cmp	r3, #8
 800ea42:	d10b      	bne.n	800ea5c <_printf_i+0x144>
 800ea44:	6823      	ldr	r3, [r4, #0]
 800ea46:	07df      	lsls	r7, r3, #31
 800ea48:	d508      	bpl.n	800ea5c <_printf_i+0x144>
 800ea4a:	6923      	ldr	r3, [r4, #16]
 800ea4c:	6861      	ldr	r1, [r4, #4]
 800ea4e:	4299      	cmp	r1, r3
 800ea50:	bfde      	ittt	le
 800ea52:	2330      	movle	r3, #48	@ 0x30
 800ea54:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ea58:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ea5c:	1b92      	subs	r2, r2, r6
 800ea5e:	6122      	str	r2, [r4, #16]
 800ea60:	f8cd a000 	str.w	sl, [sp]
 800ea64:	464b      	mov	r3, r9
 800ea66:	aa03      	add	r2, sp, #12
 800ea68:	4621      	mov	r1, r4
 800ea6a:	4640      	mov	r0, r8
 800ea6c:	f7ff fee6 	bl	800e83c <_printf_common>
 800ea70:	3001      	adds	r0, #1
 800ea72:	d14a      	bne.n	800eb0a <_printf_i+0x1f2>
 800ea74:	f04f 30ff 	mov.w	r0, #4294967295
 800ea78:	b004      	add	sp, #16
 800ea7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea7e:	6823      	ldr	r3, [r4, #0]
 800ea80:	f043 0320 	orr.w	r3, r3, #32
 800ea84:	6023      	str	r3, [r4, #0]
 800ea86:	4833      	ldr	r0, [pc, #204]	@ (800eb54 <_printf_i+0x23c>)
 800ea88:	2778      	movs	r7, #120	@ 0x78
 800ea8a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ea8e:	6823      	ldr	r3, [r4, #0]
 800ea90:	6831      	ldr	r1, [r6, #0]
 800ea92:	061f      	lsls	r7, r3, #24
 800ea94:	f851 5b04 	ldr.w	r5, [r1], #4
 800ea98:	d402      	bmi.n	800eaa0 <_printf_i+0x188>
 800ea9a:	065f      	lsls	r7, r3, #25
 800ea9c:	bf48      	it	mi
 800ea9e:	b2ad      	uxthmi	r5, r5
 800eaa0:	6031      	str	r1, [r6, #0]
 800eaa2:	07d9      	lsls	r1, r3, #31
 800eaa4:	bf44      	itt	mi
 800eaa6:	f043 0320 	orrmi.w	r3, r3, #32
 800eaaa:	6023      	strmi	r3, [r4, #0]
 800eaac:	b11d      	cbz	r5, 800eab6 <_printf_i+0x19e>
 800eaae:	2310      	movs	r3, #16
 800eab0:	e7ac      	b.n	800ea0c <_printf_i+0xf4>
 800eab2:	4827      	ldr	r0, [pc, #156]	@ (800eb50 <_printf_i+0x238>)
 800eab4:	e7e9      	b.n	800ea8a <_printf_i+0x172>
 800eab6:	6823      	ldr	r3, [r4, #0]
 800eab8:	f023 0320 	bic.w	r3, r3, #32
 800eabc:	6023      	str	r3, [r4, #0]
 800eabe:	e7f6      	b.n	800eaae <_printf_i+0x196>
 800eac0:	4616      	mov	r6, r2
 800eac2:	e7bd      	b.n	800ea40 <_printf_i+0x128>
 800eac4:	6833      	ldr	r3, [r6, #0]
 800eac6:	6825      	ldr	r5, [r4, #0]
 800eac8:	6961      	ldr	r1, [r4, #20]
 800eaca:	1d18      	adds	r0, r3, #4
 800eacc:	6030      	str	r0, [r6, #0]
 800eace:	062e      	lsls	r6, r5, #24
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	d501      	bpl.n	800ead8 <_printf_i+0x1c0>
 800ead4:	6019      	str	r1, [r3, #0]
 800ead6:	e002      	b.n	800eade <_printf_i+0x1c6>
 800ead8:	0668      	lsls	r0, r5, #25
 800eada:	d5fb      	bpl.n	800ead4 <_printf_i+0x1bc>
 800eadc:	8019      	strh	r1, [r3, #0]
 800eade:	2300      	movs	r3, #0
 800eae0:	6123      	str	r3, [r4, #16]
 800eae2:	4616      	mov	r6, r2
 800eae4:	e7bc      	b.n	800ea60 <_printf_i+0x148>
 800eae6:	6833      	ldr	r3, [r6, #0]
 800eae8:	1d1a      	adds	r2, r3, #4
 800eaea:	6032      	str	r2, [r6, #0]
 800eaec:	681e      	ldr	r6, [r3, #0]
 800eaee:	6862      	ldr	r2, [r4, #4]
 800eaf0:	2100      	movs	r1, #0
 800eaf2:	4630      	mov	r0, r6
 800eaf4:	f7f1 fb8c 	bl	8000210 <memchr>
 800eaf8:	b108      	cbz	r0, 800eafe <_printf_i+0x1e6>
 800eafa:	1b80      	subs	r0, r0, r6
 800eafc:	6060      	str	r0, [r4, #4]
 800eafe:	6863      	ldr	r3, [r4, #4]
 800eb00:	6123      	str	r3, [r4, #16]
 800eb02:	2300      	movs	r3, #0
 800eb04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eb08:	e7aa      	b.n	800ea60 <_printf_i+0x148>
 800eb0a:	6923      	ldr	r3, [r4, #16]
 800eb0c:	4632      	mov	r2, r6
 800eb0e:	4649      	mov	r1, r9
 800eb10:	4640      	mov	r0, r8
 800eb12:	47d0      	blx	sl
 800eb14:	3001      	adds	r0, #1
 800eb16:	d0ad      	beq.n	800ea74 <_printf_i+0x15c>
 800eb18:	6823      	ldr	r3, [r4, #0]
 800eb1a:	079b      	lsls	r3, r3, #30
 800eb1c:	d413      	bmi.n	800eb46 <_printf_i+0x22e>
 800eb1e:	68e0      	ldr	r0, [r4, #12]
 800eb20:	9b03      	ldr	r3, [sp, #12]
 800eb22:	4298      	cmp	r0, r3
 800eb24:	bfb8      	it	lt
 800eb26:	4618      	movlt	r0, r3
 800eb28:	e7a6      	b.n	800ea78 <_printf_i+0x160>
 800eb2a:	2301      	movs	r3, #1
 800eb2c:	4632      	mov	r2, r6
 800eb2e:	4649      	mov	r1, r9
 800eb30:	4640      	mov	r0, r8
 800eb32:	47d0      	blx	sl
 800eb34:	3001      	adds	r0, #1
 800eb36:	d09d      	beq.n	800ea74 <_printf_i+0x15c>
 800eb38:	3501      	adds	r5, #1
 800eb3a:	68e3      	ldr	r3, [r4, #12]
 800eb3c:	9903      	ldr	r1, [sp, #12]
 800eb3e:	1a5b      	subs	r3, r3, r1
 800eb40:	42ab      	cmp	r3, r5
 800eb42:	dcf2      	bgt.n	800eb2a <_printf_i+0x212>
 800eb44:	e7eb      	b.n	800eb1e <_printf_i+0x206>
 800eb46:	2500      	movs	r5, #0
 800eb48:	f104 0619 	add.w	r6, r4, #25
 800eb4c:	e7f5      	b.n	800eb3a <_printf_i+0x222>
 800eb4e:	bf00      	nop
 800eb50:	08010426 	.word	0x08010426
 800eb54:	08010437 	.word	0x08010437

0800eb58 <__swbuf_r>:
 800eb58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb5a:	460e      	mov	r6, r1
 800eb5c:	4614      	mov	r4, r2
 800eb5e:	4605      	mov	r5, r0
 800eb60:	b118      	cbz	r0, 800eb6a <__swbuf_r+0x12>
 800eb62:	6a03      	ldr	r3, [r0, #32]
 800eb64:	b90b      	cbnz	r3, 800eb6a <__swbuf_r+0x12>
 800eb66:	f7fe faab 	bl	800d0c0 <__sinit>
 800eb6a:	69a3      	ldr	r3, [r4, #24]
 800eb6c:	60a3      	str	r3, [r4, #8]
 800eb6e:	89a3      	ldrh	r3, [r4, #12]
 800eb70:	071a      	lsls	r2, r3, #28
 800eb72:	d501      	bpl.n	800eb78 <__swbuf_r+0x20>
 800eb74:	6923      	ldr	r3, [r4, #16]
 800eb76:	b943      	cbnz	r3, 800eb8a <__swbuf_r+0x32>
 800eb78:	4621      	mov	r1, r4
 800eb7a:	4628      	mov	r0, r5
 800eb7c:	f000 f82a 	bl	800ebd4 <__swsetup_r>
 800eb80:	b118      	cbz	r0, 800eb8a <__swbuf_r+0x32>
 800eb82:	f04f 37ff 	mov.w	r7, #4294967295
 800eb86:	4638      	mov	r0, r7
 800eb88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb8a:	6823      	ldr	r3, [r4, #0]
 800eb8c:	6922      	ldr	r2, [r4, #16]
 800eb8e:	1a98      	subs	r0, r3, r2
 800eb90:	6963      	ldr	r3, [r4, #20]
 800eb92:	b2f6      	uxtb	r6, r6
 800eb94:	4283      	cmp	r3, r0
 800eb96:	4637      	mov	r7, r6
 800eb98:	dc05      	bgt.n	800eba6 <__swbuf_r+0x4e>
 800eb9a:	4621      	mov	r1, r4
 800eb9c:	4628      	mov	r0, r5
 800eb9e:	f7ff fc99 	bl	800e4d4 <_fflush_r>
 800eba2:	2800      	cmp	r0, #0
 800eba4:	d1ed      	bne.n	800eb82 <__swbuf_r+0x2a>
 800eba6:	68a3      	ldr	r3, [r4, #8]
 800eba8:	3b01      	subs	r3, #1
 800ebaa:	60a3      	str	r3, [r4, #8]
 800ebac:	6823      	ldr	r3, [r4, #0]
 800ebae:	1c5a      	adds	r2, r3, #1
 800ebb0:	6022      	str	r2, [r4, #0]
 800ebb2:	701e      	strb	r6, [r3, #0]
 800ebb4:	6962      	ldr	r2, [r4, #20]
 800ebb6:	1c43      	adds	r3, r0, #1
 800ebb8:	429a      	cmp	r2, r3
 800ebba:	d004      	beq.n	800ebc6 <__swbuf_r+0x6e>
 800ebbc:	89a3      	ldrh	r3, [r4, #12]
 800ebbe:	07db      	lsls	r3, r3, #31
 800ebc0:	d5e1      	bpl.n	800eb86 <__swbuf_r+0x2e>
 800ebc2:	2e0a      	cmp	r6, #10
 800ebc4:	d1df      	bne.n	800eb86 <__swbuf_r+0x2e>
 800ebc6:	4621      	mov	r1, r4
 800ebc8:	4628      	mov	r0, r5
 800ebca:	f7ff fc83 	bl	800e4d4 <_fflush_r>
 800ebce:	2800      	cmp	r0, #0
 800ebd0:	d0d9      	beq.n	800eb86 <__swbuf_r+0x2e>
 800ebd2:	e7d6      	b.n	800eb82 <__swbuf_r+0x2a>

0800ebd4 <__swsetup_r>:
 800ebd4:	b538      	push	{r3, r4, r5, lr}
 800ebd6:	4b29      	ldr	r3, [pc, #164]	@ (800ec7c <__swsetup_r+0xa8>)
 800ebd8:	4605      	mov	r5, r0
 800ebda:	6818      	ldr	r0, [r3, #0]
 800ebdc:	460c      	mov	r4, r1
 800ebde:	b118      	cbz	r0, 800ebe8 <__swsetup_r+0x14>
 800ebe0:	6a03      	ldr	r3, [r0, #32]
 800ebe2:	b90b      	cbnz	r3, 800ebe8 <__swsetup_r+0x14>
 800ebe4:	f7fe fa6c 	bl	800d0c0 <__sinit>
 800ebe8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ebec:	0719      	lsls	r1, r3, #28
 800ebee:	d422      	bmi.n	800ec36 <__swsetup_r+0x62>
 800ebf0:	06da      	lsls	r2, r3, #27
 800ebf2:	d407      	bmi.n	800ec04 <__swsetup_r+0x30>
 800ebf4:	2209      	movs	r2, #9
 800ebf6:	602a      	str	r2, [r5, #0]
 800ebf8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ebfc:	81a3      	strh	r3, [r4, #12]
 800ebfe:	f04f 30ff 	mov.w	r0, #4294967295
 800ec02:	e033      	b.n	800ec6c <__swsetup_r+0x98>
 800ec04:	0758      	lsls	r0, r3, #29
 800ec06:	d512      	bpl.n	800ec2e <__swsetup_r+0x5a>
 800ec08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ec0a:	b141      	cbz	r1, 800ec1e <__swsetup_r+0x4a>
 800ec0c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ec10:	4299      	cmp	r1, r3
 800ec12:	d002      	beq.n	800ec1a <__swsetup_r+0x46>
 800ec14:	4628      	mov	r0, r5
 800ec16:	f7fe fb83 	bl	800d320 <_free_r>
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	6363      	str	r3, [r4, #52]	@ 0x34
 800ec1e:	89a3      	ldrh	r3, [r4, #12]
 800ec20:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ec24:	81a3      	strh	r3, [r4, #12]
 800ec26:	2300      	movs	r3, #0
 800ec28:	6063      	str	r3, [r4, #4]
 800ec2a:	6923      	ldr	r3, [r4, #16]
 800ec2c:	6023      	str	r3, [r4, #0]
 800ec2e:	89a3      	ldrh	r3, [r4, #12]
 800ec30:	f043 0308 	orr.w	r3, r3, #8
 800ec34:	81a3      	strh	r3, [r4, #12]
 800ec36:	6923      	ldr	r3, [r4, #16]
 800ec38:	b94b      	cbnz	r3, 800ec4e <__swsetup_r+0x7a>
 800ec3a:	89a3      	ldrh	r3, [r4, #12]
 800ec3c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ec40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ec44:	d003      	beq.n	800ec4e <__swsetup_r+0x7a>
 800ec46:	4621      	mov	r1, r4
 800ec48:	4628      	mov	r0, r5
 800ec4a:	f000 f883 	bl	800ed54 <__smakebuf_r>
 800ec4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec52:	f013 0201 	ands.w	r2, r3, #1
 800ec56:	d00a      	beq.n	800ec6e <__swsetup_r+0x9a>
 800ec58:	2200      	movs	r2, #0
 800ec5a:	60a2      	str	r2, [r4, #8]
 800ec5c:	6962      	ldr	r2, [r4, #20]
 800ec5e:	4252      	negs	r2, r2
 800ec60:	61a2      	str	r2, [r4, #24]
 800ec62:	6922      	ldr	r2, [r4, #16]
 800ec64:	b942      	cbnz	r2, 800ec78 <__swsetup_r+0xa4>
 800ec66:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ec6a:	d1c5      	bne.n	800ebf8 <__swsetup_r+0x24>
 800ec6c:	bd38      	pop	{r3, r4, r5, pc}
 800ec6e:	0799      	lsls	r1, r3, #30
 800ec70:	bf58      	it	pl
 800ec72:	6962      	ldrpl	r2, [r4, #20]
 800ec74:	60a2      	str	r2, [r4, #8]
 800ec76:	e7f4      	b.n	800ec62 <__swsetup_r+0x8e>
 800ec78:	2000      	movs	r0, #0
 800ec7a:	e7f7      	b.n	800ec6c <__swsetup_r+0x98>
 800ec7c:	200001dc 	.word	0x200001dc

0800ec80 <_raise_r>:
 800ec80:	291f      	cmp	r1, #31
 800ec82:	b538      	push	{r3, r4, r5, lr}
 800ec84:	4605      	mov	r5, r0
 800ec86:	460c      	mov	r4, r1
 800ec88:	d904      	bls.n	800ec94 <_raise_r+0x14>
 800ec8a:	2316      	movs	r3, #22
 800ec8c:	6003      	str	r3, [r0, #0]
 800ec8e:	f04f 30ff 	mov.w	r0, #4294967295
 800ec92:	bd38      	pop	{r3, r4, r5, pc}
 800ec94:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ec96:	b112      	cbz	r2, 800ec9e <_raise_r+0x1e>
 800ec98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ec9c:	b94b      	cbnz	r3, 800ecb2 <_raise_r+0x32>
 800ec9e:	4628      	mov	r0, r5
 800eca0:	f000 f830 	bl	800ed04 <_getpid_r>
 800eca4:	4622      	mov	r2, r4
 800eca6:	4601      	mov	r1, r0
 800eca8:	4628      	mov	r0, r5
 800ecaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ecae:	f000 b817 	b.w	800ece0 <_kill_r>
 800ecb2:	2b01      	cmp	r3, #1
 800ecb4:	d00a      	beq.n	800eccc <_raise_r+0x4c>
 800ecb6:	1c59      	adds	r1, r3, #1
 800ecb8:	d103      	bne.n	800ecc2 <_raise_r+0x42>
 800ecba:	2316      	movs	r3, #22
 800ecbc:	6003      	str	r3, [r0, #0]
 800ecbe:	2001      	movs	r0, #1
 800ecc0:	e7e7      	b.n	800ec92 <_raise_r+0x12>
 800ecc2:	2100      	movs	r1, #0
 800ecc4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ecc8:	4620      	mov	r0, r4
 800ecca:	4798      	blx	r3
 800eccc:	2000      	movs	r0, #0
 800ecce:	e7e0      	b.n	800ec92 <_raise_r+0x12>

0800ecd0 <raise>:
 800ecd0:	4b02      	ldr	r3, [pc, #8]	@ (800ecdc <raise+0xc>)
 800ecd2:	4601      	mov	r1, r0
 800ecd4:	6818      	ldr	r0, [r3, #0]
 800ecd6:	f7ff bfd3 	b.w	800ec80 <_raise_r>
 800ecda:	bf00      	nop
 800ecdc:	200001dc 	.word	0x200001dc

0800ece0 <_kill_r>:
 800ece0:	b538      	push	{r3, r4, r5, lr}
 800ece2:	4d07      	ldr	r5, [pc, #28]	@ (800ed00 <_kill_r+0x20>)
 800ece4:	2300      	movs	r3, #0
 800ece6:	4604      	mov	r4, r0
 800ece8:	4608      	mov	r0, r1
 800ecea:	4611      	mov	r1, r2
 800ecec:	602b      	str	r3, [r5, #0]
 800ecee:	f7f7 fa8f 	bl	8006210 <_kill>
 800ecf2:	1c43      	adds	r3, r0, #1
 800ecf4:	d102      	bne.n	800ecfc <_kill_r+0x1c>
 800ecf6:	682b      	ldr	r3, [r5, #0]
 800ecf8:	b103      	cbz	r3, 800ecfc <_kill_r+0x1c>
 800ecfa:	6023      	str	r3, [r4, #0]
 800ecfc:	bd38      	pop	{r3, r4, r5, pc}
 800ecfe:	bf00      	nop
 800ed00:	200027e8 	.word	0x200027e8

0800ed04 <_getpid_r>:
 800ed04:	f7f7 ba7c 	b.w	8006200 <_getpid>

0800ed08 <__swhatbuf_r>:
 800ed08:	b570      	push	{r4, r5, r6, lr}
 800ed0a:	460c      	mov	r4, r1
 800ed0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed10:	2900      	cmp	r1, #0
 800ed12:	b096      	sub	sp, #88	@ 0x58
 800ed14:	4615      	mov	r5, r2
 800ed16:	461e      	mov	r6, r3
 800ed18:	da0d      	bge.n	800ed36 <__swhatbuf_r+0x2e>
 800ed1a:	89a3      	ldrh	r3, [r4, #12]
 800ed1c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ed20:	f04f 0100 	mov.w	r1, #0
 800ed24:	bf14      	ite	ne
 800ed26:	2340      	movne	r3, #64	@ 0x40
 800ed28:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ed2c:	2000      	movs	r0, #0
 800ed2e:	6031      	str	r1, [r6, #0]
 800ed30:	602b      	str	r3, [r5, #0]
 800ed32:	b016      	add	sp, #88	@ 0x58
 800ed34:	bd70      	pop	{r4, r5, r6, pc}
 800ed36:	466a      	mov	r2, sp
 800ed38:	f000 f848 	bl	800edcc <_fstat_r>
 800ed3c:	2800      	cmp	r0, #0
 800ed3e:	dbec      	blt.n	800ed1a <__swhatbuf_r+0x12>
 800ed40:	9901      	ldr	r1, [sp, #4]
 800ed42:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ed46:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ed4a:	4259      	negs	r1, r3
 800ed4c:	4159      	adcs	r1, r3
 800ed4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ed52:	e7eb      	b.n	800ed2c <__swhatbuf_r+0x24>

0800ed54 <__smakebuf_r>:
 800ed54:	898b      	ldrh	r3, [r1, #12]
 800ed56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ed58:	079d      	lsls	r5, r3, #30
 800ed5a:	4606      	mov	r6, r0
 800ed5c:	460c      	mov	r4, r1
 800ed5e:	d507      	bpl.n	800ed70 <__smakebuf_r+0x1c>
 800ed60:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ed64:	6023      	str	r3, [r4, #0]
 800ed66:	6123      	str	r3, [r4, #16]
 800ed68:	2301      	movs	r3, #1
 800ed6a:	6163      	str	r3, [r4, #20]
 800ed6c:	b003      	add	sp, #12
 800ed6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed70:	ab01      	add	r3, sp, #4
 800ed72:	466a      	mov	r2, sp
 800ed74:	f7ff ffc8 	bl	800ed08 <__swhatbuf_r>
 800ed78:	9f00      	ldr	r7, [sp, #0]
 800ed7a:	4605      	mov	r5, r0
 800ed7c:	4639      	mov	r1, r7
 800ed7e:	4630      	mov	r0, r6
 800ed80:	f7fd fa76 	bl	800c270 <_malloc_r>
 800ed84:	b948      	cbnz	r0, 800ed9a <__smakebuf_r+0x46>
 800ed86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed8a:	059a      	lsls	r2, r3, #22
 800ed8c:	d4ee      	bmi.n	800ed6c <__smakebuf_r+0x18>
 800ed8e:	f023 0303 	bic.w	r3, r3, #3
 800ed92:	f043 0302 	orr.w	r3, r3, #2
 800ed96:	81a3      	strh	r3, [r4, #12]
 800ed98:	e7e2      	b.n	800ed60 <__smakebuf_r+0xc>
 800ed9a:	89a3      	ldrh	r3, [r4, #12]
 800ed9c:	6020      	str	r0, [r4, #0]
 800ed9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eda2:	81a3      	strh	r3, [r4, #12]
 800eda4:	9b01      	ldr	r3, [sp, #4]
 800eda6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800edaa:	b15b      	cbz	r3, 800edc4 <__smakebuf_r+0x70>
 800edac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800edb0:	4630      	mov	r0, r6
 800edb2:	f000 f81d 	bl	800edf0 <_isatty_r>
 800edb6:	b128      	cbz	r0, 800edc4 <__smakebuf_r+0x70>
 800edb8:	89a3      	ldrh	r3, [r4, #12]
 800edba:	f023 0303 	bic.w	r3, r3, #3
 800edbe:	f043 0301 	orr.w	r3, r3, #1
 800edc2:	81a3      	strh	r3, [r4, #12]
 800edc4:	89a3      	ldrh	r3, [r4, #12]
 800edc6:	431d      	orrs	r5, r3
 800edc8:	81a5      	strh	r5, [r4, #12]
 800edca:	e7cf      	b.n	800ed6c <__smakebuf_r+0x18>

0800edcc <_fstat_r>:
 800edcc:	b538      	push	{r3, r4, r5, lr}
 800edce:	4d07      	ldr	r5, [pc, #28]	@ (800edec <_fstat_r+0x20>)
 800edd0:	2300      	movs	r3, #0
 800edd2:	4604      	mov	r4, r0
 800edd4:	4608      	mov	r0, r1
 800edd6:	4611      	mov	r1, r2
 800edd8:	602b      	str	r3, [r5, #0]
 800edda:	f7f7 fa79 	bl	80062d0 <_fstat>
 800edde:	1c43      	adds	r3, r0, #1
 800ede0:	d102      	bne.n	800ede8 <_fstat_r+0x1c>
 800ede2:	682b      	ldr	r3, [r5, #0]
 800ede4:	b103      	cbz	r3, 800ede8 <_fstat_r+0x1c>
 800ede6:	6023      	str	r3, [r4, #0]
 800ede8:	bd38      	pop	{r3, r4, r5, pc}
 800edea:	bf00      	nop
 800edec:	200027e8 	.word	0x200027e8

0800edf0 <_isatty_r>:
 800edf0:	b538      	push	{r3, r4, r5, lr}
 800edf2:	4d06      	ldr	r5, [pc, #24]	@ (800ee0c <_isatty_r+0x1c>)
 800edf4:	2300      	movs	r3, #0
 800edf6:	4604      	mov	r4, r0
 800edf8:	4608      	mov	r0, r1
 800edfa:	602b      	str	r3, [r5, #0]
 800edfc:	f7f7 fa78 	bl	80062f0 <_isatty>
 800ee00:	1c43      	adds	r3, r0, #1
 800ee02:	d102      	bne.n	800ee0a <_isatty_r+0x1a>
 800ee04:	682b      	ldr	r3, [r5, #0]
 800ee06:	b103      	cbz	r3, 800ee0a <_isatty_r+0x1a>
 800ee08:	6023      	str	r3, [r4, #0]
 800ee0a:	bd38      	pop	{r3, r4, r5, pc}
 800ee0c:	200027e8 	.word	0x200027e8

0800ee10 <pow>:
 800ee10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee12:	ed2d 8b02 	vpush	{d8}
 800ee16:	eeb0 8a40 	vmov.f32	s16, s0
 800ee1a:	eef0 8a60 	vmov.f32	s17, s1
 800ee1e:	ec55 4b11 	vmov	r4, r5, d1
 800ee22:	f000 f971 	bl	800f108 <__ieee754_pow>
 800ee26:	4622      	mov	r2, r4
 800ee28:	462b      	mov	r3, r5
 800ee2a:	4620      	mov	r0, r4
 800ee2c:	4629      	mov	r1, r5
 800ee2e:	ec57 6b10 	vmov	r6, r7, d0
 800ee32:	f7f1 fe93 	bl	8000b5c <__aeabi_dcmpun>
 800ee36:	2800      	cmp	r0, #0
 800ee38:	d13b      	bne.n	800eeb2 <pow+0xa2>
 800ee3a:	ec51 0b18 	vmov	r0, r1, d8
 800ee3e:	2200      	movs	r2, #0
 800ee40:	2300      	movs	r3, #0
 800ee42:	f7f1 fe59 	bl	8000af8 <__aeabi_dcmpeq>
 800ee46:	b1b8      	cbz	r0, 800ee78 <pow+0x68>
 800ee48:	2200      	movs	r2, #0
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	4620      	mov	r0, r4
 800ee4e:	4629      	mov	r1, r5
 800ee50:	f7f1 fe52 	bl	8000af8 <__aeabi_dcmpeq>
 800ee54:	2800      	cmp	r0, #0
 800ee56:	d146      	bne.n	800eee6 <pow+0xd6>
 800ee58:	ec45 4b10 	vmov	d0, r4, r5
 800ee5c:	f000 f868 	bl	800ef30 <finite>
 800ee60:	b338      	cbz	r0, 800eeb2 <pow+0xa2>
 800ee62:	2200      	movs	r2, #0
 800ee64:	2300      	movs	r3, #0
 800ee66:	4620      	mov	r0, r4
 800ee68:	4629      	mov	r1, r5
 800ee6a:	f7f1 fe4f 	bl	8000b0c <__aeabi_dcmplt>
 800ee6e:	b300      	cbz	r0, 800eeb2 <pow+0xa2>
 800ee70:	f7fe fa10 	bl	800d294 <__errno>
 800ee74:	2322      	movs	r3, #34	@ 0x22
 800ee76:	e01b      	b.n	800eeb0 <pow+0xa0>
 800ee78:	ec47 6b10 	vmov	d0, r6, r7
 800ee7c:	f000 f858 	bl	800ef30 <finite>
 800ee80:	b9e0      	cbnz	r0, 800eebc <pow+0xac>
 800ee82:	eeb0 0a48 	vmov.f32	s0, s16
 800ee86:	eef0 0a68 	vmov.f32	s1, s17
 800ee8a:	f000 f851 	bl	800ef30 <finite>
 800ee8e:	b1a8      	cbz	r0, 800eebc <pow+0xac>
 800ee90:	ec45 4b10 	vmov	d0, r4, r5
 800ee94:	f000 f84c 	bl	800ef30 <finite>
 800ee98:	b180      	cbz	r0, 800eebc <pow+0xac>
 800ee9a:	4632      	mov	r2, r6
 800ee9c:	463b      	mov	r3, r7
 800ee9e:	4630      	mov	r0, r6
 800eea0:	4639      	mov	r1, r7
 800eea2:	f7f1 fe5b 	bl	8000b5c <__aeabi_dcmpun>
 800eea6:	2800      	cmp	r0, #0
 800eea8:	d0e2      	beq.n	800ee70 <pow+0x60>
 800eeaa:	f7fe f9f3 	bl	800d294 <__errno>
 800eeae:	2321      	movs	r3, #33	@ 0x21
 800eeb0:	6003      	str	r3, [r0, #0]
 800eeb2:	ecbd 8b02 	vpop	{d8}
 800eeb6:	ec47 6b10 	vmov	d0, r6, r7
 800eeba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eebc:	2200      	movs	r2, #0
 800eebe:	2300      	movs	r3, #0
 800eec0:	4630      	mov	r0, r6
 800eec2:	4639      	mov	r1, r7
 800eec4:	f7f1 fe18 	bl	8000af8 <__aeabi_dcmpeq>
 800eec8:	2800      	cmp	r0, #0
 800eeca:	d0f2      	beq.n	800eeb2 <pow+0xa2>
 800eecc:	eeb0 0a48 	vmov.f32	s0, s16
 800eed0:	eef0 0a68 	vmov.f32	s1, s17
 800eed4:	f000 f82c 	bl	800ef30 <finite>
 800eed8:	2800      	cmp	r0, #0
 800eeda:	d0ea      	beq.n	800eeb2 <pow+0xa2>
 800eedc:	ec45 4b10 	vmov	d0, r4, r5
 800eee0:	f000 f826 	bl	800ef30 <finite>
 800eee4:	e7c3      	b.n	800ee6e <pow+0x5e>
 800eee6:	4f01      	ldr	r7, [pc, #4]	@ (800eeec <pow+0xdc>)
 800eee8:	2600      	movs	r6, #0
 800eeea:	e7e2      	b.n	800eeb2 <pow+0xa2>
 800eeec:	3ff00000 	.word	0x3ff00000

0800eef0 <atan2f>:
 800eef0:	f000 be56 	b.w	800fba0 <__ieee754_atan2f>

0800eef4 <sqrtf>:
 800eef4:	b508      	push	{r3, lr}
 800eef6:	ed2d 8b02 	vpush	{d8}
 800eefa:	eeb0 8a40 	vmov.f32	s16, s0
 800eefe:	f000 f8fd 	bl	800f0fc <__ieee754_sqrtf>
 800ef02:	eeb4 8a48 	vcmp.f32	s16, s16
 800ef06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef0a:	d60c      	bvs.n	800ef26 <sqrtf+0x32>
 800ef0c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800ef2c <sqrtf+0x38>
 800ef10:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800ef14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef18:	d505      	bpl.n	800ef26 <sqrtf+0x32>
 800ef1a:	f7fe f9bb 	bl	800d294 <__errno>
 800ef1e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800ef22:	2321      	movs	r3, #33	@ 0x21
 800ef24:	6003      	str	r3, [r0, #0]
 800ef26:	ecbd 8b02 	vpop	{d8}
 800ef2a:	bd08      	pop	{r3, pc}
 800ef2c:	00000000 	.word	0x00000000

0800ef30 <finite>:
 800ef30:	b082      	sub	sp, #8
 800ef32:	ed8d 0b00 	vstr	d0, [sp]
 800ef36:	9801      	ldr	r0, [sp, #4]
 800ef38:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800ef3c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800ef40:	0fc0      	lsrs	r0, r0, #31
 800ef42:	b002      	add	sp, #8
 800ef44:	4770      	bx	lr
	...

0800ef48 <__ieee754_sqrt>:
 800ef48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef4c:	4a68      	ldr	r2, [pc, #416]	@ (800f0f0 <__ieee754_sqrt+0x1a8>)
 800ef4e:	ec55 4b10 	vmov	r4, r5, d0
 800ef52:	43aa      	bics	r2, r5
 800ef54:	462b      	mov	r3, r5
 800ef56:	4621      	mov	r1, r4
 800ef58:	d110      	bne.n	800ef7c <__ieee754_sqrt+0x34>
 800ef5a:	4622      	mov	r2, r4
 800ef5c:	4620      	mov	r0, r4
 800ef5e:	4629      	mov	r1, r5
 800ef60:	f7f1 fb62 	bl	8000628 <__aeabi_dmul>
 800ef64:	4602      	mov	r2, r0
 800ef66:	460b      	mov	r3, r1
 800ef68:	4620      	mov	r0, r4
 800ef6a:	4629      	mov	r1, r5
 800ef6c:	f7f1 f9a6 	bl	80002bc <__adddf3>
 800ef70:	4604      	mov	r4, r0
 800ef72:	460d      	mov	r5, r1
 800ef74:	ec45 4b10 	vmov	d0, r4, r5
 800ef78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef7c:	2d00      	cmp	r5, #0
 800ef7e:	dc0e      	bgt.n	800ef9e <__ieee754_sqrt+0x56>
 800ef80:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800ef84:	4322      	orrs	r2, r4
 800ef86:	d0f5      	beq.n	800ef74 <__ieee754_sqrt+0x2c>
 800ef88:	b19d      	cbz	r5, 800efb2 <__ieee754_sqrt+0x6a>
 800ef8a:	4622      	mov	r2, r4
 800ef8c:	4620      	mov	r0, r4
 800ef8e:	4629      	mov	r1, r5
 800ef90:	f7f1 f992 	bl	80002b8 <__aeabi_dsub>
 800ef94:	4602      	mov	r2, r0
 800ef96:	460b      	mov	r3, r1
 800ef98:	f7f1 fc70 	bl	800087c <__aeabi_ddiv>
 800ef9c:	e7e8      	b.n	800ef70 <__ieee754_sqrt+0x28>
 800ef9e:	152a      	asrs	r2, r5, #20
 800efa0:	d115      	bne.n	800efce <__ieee754_sqrt+0x86>
 800efa2:	2000      	movs	r0, #0
 800efa4:	e009      	b.n	800efba <__ieee754_sqrt+0x72>
 800efa6:	0acb      	lsrs	r3, r1, #11
 800efa8:	3a15      	subs	r2, #21
 800efaa:	0549      	lsls	r1, r1, #21
 800efac:	2b00      	cmp	r3, #0
 800efae:	d0fa      	beq.n	800efa6 <__ieee754_sqrt+0x5e>
 800efb0:	e7f7      	b.n	800efa2 <__ieee754_sqrt+0x5a>
 800efb2:	462a      	mov	r2, r5
 800efb4:	e7fa      	b.n	800efac <__ieee754_sqrt+0x64>
 800efb6:	005b      	lsls	r3, r3, #1
 800efb8:	3001      	adds	r0, #1
 800efba:	02dc      	lsls	r4, r3, #11
 800efbc:	d5fb      	bpl.n	800efb6 <__ieee754_sqrt+0x6e>
 800efbe:	1e44      	subs	r4, r0, #1
 800efc0:	1b12      	subs	r2, r2, r4
 800efc2:	f1c0 0420 	rsb	r4, r0, #32
 800efc6:	fa21 f404 	lsr.w	r4, r1, r4
 800efca:	4323      	orrs	r3, r4
 800efcc:	4081      	lsls	r1, r0
 800efce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800efd2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800efd6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800efda:	07d2      	lsls	r2, r2, #31
 800efdc:	bf5c      	itt	pl
 800efde:	005b      	lslpl	r3, r3, #1
 800efe0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800efe4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800efe8:	bf58      	it	pl
 800efea:	0049      	lslpl	r1, r1, #1
 800efec:	2600      	movs	r6, #0
 800efee:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800eff2:	106d      	asrs	r5, r5, #1
 800eff4:	0049      	lsls	r1, r1, #1
 800eff6:	2016      	movs	r0, #22
 800eff8:	4632      	mov	r2, r6
 800effa:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800effe:	1917      	adds	r7, r2, r4
 800f000:	429f      	cmp	r7, r3
 800f002:	bfde      	ittt	le
 800f004:	193a      	addle	r2, r7, r4
 800f006:	1bdb      	suble	r3, r3, r7
 800f008:	1936      	addle	r6, r6, r4
 800f00a:	0fcf      	lsrs	r7, r1, #31
 800f00c:	3801      	subs	r0, #1
 800f00e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800f012:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f016:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800f01a:	d1f0      	bne.n	800effe <__ieee754_sqrt+0xb6>
 800f01c:	4604      	mov	r4, r0
 800f01e:	2720      	movs	r7, #32
 800f020:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800f024:	429a      	cmp	r2, r3
 800f026:	eb00 0e0c 	add.w	lr, r0, ip
 800f02a:	db02      	blt.n	800f032 <__ieee754_sqrt+0xea>
 800f02c:	d113      	bne.n	800f056 <__ieee754_sqrt+0x10e>
 800f02e:	458e      	cmp	lr, r1
 800f030:	d811      	bhi.n	800f056 <__ieee754_sqrt+0x10e>
 800f032:	f1be 0f00 	cmp.w	lr, #0
 800f036:	eb0e 000c 	add.w	r0, lr, ip
 800f03a:	da42      	bge.n	800f0c2 <__ieee754_sqrt+0x17a>
 800f03c:	2800      	cmp	r0, #0
 800f03e:	db40      	blt.n	800f0c2 <__ieee754_sqrt+0x17a>
 800f040:	f102 0801 	add.w	r8, r2, #1
 800f044:	1a9b      	subs	r3, r3, r2
 800f046:	458e      	cmp	lr, r1
 800f048:	bf88      	it	hi
 800f04a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800f04e:	eba1 010e 	sub.w	r1, r1, lr
 800f052:	4464      	add	r4, ip
 800f054:	4642      	mov	r2, r8
 800f056:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800f05a:	3f01      	subs	r7, #1
 800f05c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800f060:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f064:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800f068:	d1dc      	bne.n	800f024 <__ieee754_sqrt+0xdc>
 800f06a:	4319      	orrs	r1, r3
 800f06c:	d01b      	beq.n	800f0a6 <__ieee754_sqrt+0x15e>
 800f06e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800f0f4 <__ieee754_sqrt+0x1ac>
 800f072:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800f0f8 <__ieee754_sqrt+0x1b0>
 800f076:	e9da 0100 	ldrd	r0, r1, [sl]
 800f07a:	e9db 2300 	ldrd	r2, r3, [fp]
 800f07e:	f7f1 f91b 	bl	80002b8 <__aeabi_dsub>
 800f082:	e9da 8900 	ldrd	r8, r9, [sl]
 800f086:	4602      	mov	r2, r0
 800f088:	460b      	mov	r3, r1
 800f08a:	4640      	mov	r0, r8
 800f08c:	4649      	mov	r1, r9
 800f08e:	f7f1 fd47 	bl	8000b20 <__aeabi_dcmple>
 800f092:	b140      	cbz	r0, 800f0a6 <__ieee754_sqrt+0x15e>
 800f094:	f1b4 3fff 	cmp.w	r4, #4294967295
 800f098:	e9da 0100 	ldrd	r0, r1, [sl]
 800f09c:	e9db 2300 	ldrd	r2, r3, [fp]
 800f0a0:	d111      	bne.n	800f0c6 <__ieee754_sqrt+0x17e>
 800f0a2:	3601      	adds	r6, #1
 800f0a4:	463c      	mov	r4, r7
 800f0a6:	1072      	asrs	r2, r6, #1
 800f0a8:	0863      	lsrs	r3, r4, #1
 800f0aa:	07f1      	lsls	r1, r6, #31
 800f0ac:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800f0b0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800f0b4:	bf48      	it	mi
 800f0b6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800f0ba:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800f0be:	4618      	mov	r0, r3
 800f0c0:	e756      	b.n	800ef70 <__ieee754_sqrt+0x28>
 800f0c2:	4690      	mov	r8, r2
 800f0c4:	e7be      	b.n	800f044 <__ieee754_sqrt+0xfc>
 800f0c6:	f7f1 f8f9 	bl	80002bc <__adddf3>
 800f0ca:	e9da 8900 	ldrd	r8, r9, [sl]
 800f0ce:	4602      	mov	r2, r0
 800f0d0:	460b      	mov	r3, r1
 800f0d2:	4640      	mov	r0, r8
 800f0d4:	4649      	mov	r1, r9
 800f0d6:	f7f1 fd19 	bl	8000b0c <__aeabi_dcmplt>
 800f0da:	b120      	cbz	r0, 800f0e6 <__ieee754_sqrt+0x19e>
 800f0dc:	1ca0      	adds	r0, r4, #2
 800f0de:	bf08      	it	eq
 800f0e0:	3601      	addeq	r6, #1
 800f0e2:	3402      	adds	r4, #2
 800f0e4:	e7df      	b.n	800f0a6 <__ieee754_sqrt+0x15e>
 800f0e6:	1c63      	adds	r3, r4, #1
 800f0e8:	f023 0401 	bic.w	r4, r3, #1
 800f0ec:	e7db      	b.n	800f0a6 <__ieee754_sqrt+0x15e>
 800f0ee:	bf00      	nop
 800f0f0:	7ff00000 	.word	0x7ff00000
 800f0f4:	20000238 	.word	0x20000238
 800f0f8:	20000230 	.word	0x20000230

0800f0fc <__ieee754_sqrtf>:
 800f0fc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800f100:	4770      	bx	lr
 800f102:	0000      	movs	r0, r0
 800f104:	0000      	movs	r0, r0
	...

0800f108 <__ieee754_pow>:
 800f108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f10c:	b091      	sub	sp, #68	@ 0x44
 800f10e:	ed8d 1b00 	vstr	d1, [sp]
 800f112:	e9dd 1900 	ldrd	r1, r9, [sp]
 800f116:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800f11a:	ea5a 0001 	orrs.w	r0, sl, r1
 800f11e:	ec57 6b10 	vmov	r6, r7, d0
 800f122:	d113      	bne.n	800f14c <__ieee754_pow+0x44>
 800f124:	19b3      	adds	r3, r6, r6
 800f126:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800f12a:	4152      	adcs	r2, r2
 800f12c:	4298      	cmp	r0, r3
 800f12e:	4b98      	ldr	r3, [pc, #608]	@ (800f390 <__ieee754_pow+0x288>)
 800f130:	4193      	sbcs	r3, r2
 800f132:	f080 84ea 	bcs.w	800fb0a <__ieee754_pow+0xa02>
 800f136:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f13a:	4630      	mov	r0, r6
 800f13c:	4639      	mov	r1, r7
 800f13e:	f7f1 f8bd 	bl	80002bc <__adddf3>
 800f142:	ec41 0b10 	vmov	d0, r0, r1
 800f146:	b011      	add	sp, #68	@ 0x44
 800f148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f14c:	4a91      	ldr	r2, [pc, #580]	@ (800f394 <__ieee754_pow+0x28c>)
 800f14e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800f152:	4590      	cmp	r8, r2
 800f154:	463d      	mov	r5, r7
 800f156:	4633      	mov	r3, r6
 800f158:	d806      	bhi.n	800f168 <__ieee754_pow+0x60>
 800f15a:	d101      	bne.n	800f160 <__ieee754_pow+0x58>
 800f15c:	2e00      	cmp	r6, #0
 800f15e:	d1ea      	bne.n	800f136 <__ieee754_pow+0x2e>
 800f160:	4592      	cmp	sl, r2
 800f162:	d801      	bhi.n	800f168 <__ieee754_pow+0x60>
 800f164:	d10e      	bne.n	800f184 <__ieee754_pow+0x7c>
 800f166:	b169      	cbz	r1, 800f184 <__ieee754_pow+0x7c>
 800f168:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800f16c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800f170:	431d      	orrs	r5, r3
 800f172:	d1e0      	bne.n	800f136 <__ieee754_pow+0x2e>
 800f174:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f178:	18db      	adds	r3, r3, r3
 800f17a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800f17e:	4152      	adcs	r2, r2
 800f180:	429d      	cmp	r5, r3
 800f182:	e7d4      	b.n	800f12e <__ieee754_pow+0x26>
 800f184:	2d00      	cmp	r5, #0
 800f186:	46c3      	mov	fp, r8
 800f188:	da3a      	bge.n	800f200 <__ieee754_pow+0xf8>
 800f18a:	4a83      	ldr	r2, [pc, #524]	@ (800f398 <__ieee754_pow+0x290>)
 800f18c:	4592      	cmp	sl, r2
 800f18e:	d84d      	bhi.n	800f22c <__ieee754_pow+0x124>
 800f190:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800f194:	4592      	cmp	sl, r2
 800f196:	f240 84c7 	bls.w	800fb28 <__ieee754_pow+0xa20>
 800f19a:	ea4f 522a 	mov.w	r2, sl, asr #20
 800f19e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800f1a2:	2a14      	cmp	r2, #20
 800f1a4:	dd0f      	ble.n	800f1c6 <__ieee754_pow+0xbe>
 800f1a6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800f1aa:	fa21 f402 	lsr.w	r4, r1, r2
 800f1ae:	fa04 f202 	lsl.w	r2, r4, r2
 800f1b2:	428a      	cmp	r2, r1
 800f1b4:	f040 84b8 	bne.w	800fb28 <__ieee754_pow+0xa20>
 800f1b8:	f004 0401 	and.w	r4, r4, #1
 800f1bc:	f1c4 0402 	rsb	r4, r4, #2
 800f1c0:	2900      	cmp	r1, #0
 800f1c2:	d158      	bne.n	800f276 <__ieee754_pow+0x16e>
 800f1c4:	e00e      	b.n	800f1e4 <__ieee754_pow+0xdc>
 800f1c6:	2900      	cmp	r1, #0
 800f1c8:	d154      	bne.n	800f274 <__ieee754_pow+0x16c>
 800f1ca:	f1c2 0214 	rsb	r2, r2, #20
 800f1ce:	fa4a f402 	asr.w	r4, sl, r2
 800f1d2:	fa04 f202 	lsl.w	r2, r4, r2
 800f1d6:	4552      	cmp	r2, sl
 800f1d8:	f040 84a3 	bne.w	800fb22 <__ieee754_pow+0xa1a>
 800f1dc:	f004 0401 	and.w	r4, r4, #1
 800f1e0:	f1c4 0402 	rsb	r4, r4, #2
 800f1e4:	4a6d      	ldr	r2, [pc, #436]	@ (800f39c <__ieee754_pow+0x294>)
 800f1e6:	4592      	cmp	sl, r2
 800f1e8:	d12e      	bne.n	800f248 <__ieee754_pow+0x140>
 800f1ea:	f1b9 0f00 	cmp.w	r9, #0
 800f1ee:	f280 8494 	bge.w	800fb1a <__ieee754_pow+0xa12>
 800f1f2:	496a      	ldr	r1, [pc, #424]	@ (800f39c <__ieee754_pow+0x294>)
 800f1f4:	4632      	mov	r2, r6
 800f1f6:	463b      	mov	r3, r7
 800f1f8:	2000      	movs	r0, #0
 800f1fa:	f7f1 fb3f 	bl	800087c <__aeabi_ddiv>
 800f1fe:	e7a0      	b.n	800f142 <__ieee754_pow+0x3a>
 800f200:	2400      	movs	r4, #0
 800f202:	bbc1      	cbnz	r1, 800f276 <__ieee754_pow+0x16e>
 800f204:	4a63      	ldr	r2, [pc, #396]	@ (800f394 <__ieee754_pow+0x28c>)
 800f206:	4592      	cmp	sl, r2
 800f208:	d1ec      	bne.n	800f1e4 <__ieee754_pow+0xdc>
 800f20a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800f20e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800f212:	431a      	orrs	r2, r3
 800f214:	f000 8479 	beq.w	800fb0a <__ieee754_pow+0xa02>
 800f218:	4b61      	ldr	r3, [pc, #388]	@ (800f3a0 <__ieee754_pow+0x298>)
 800f21a:	4598      	cmp	r8, r3
 800f21c:	d908      	bls.n	800f230 <__ieee754_pow+0x128>
 800f21e:	f1b9 0f00 	cmp.w	r9, #0
 800f222:	f2c0 8476 	blt.w	800fb12 <__ieee754_pow+0xa0a>
 800f226:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f22a:	e78a      	b.n	800f142 <__ieee754_pow+0x3a>
 800f22c:	2402      	movs	r4, #2
 800f22e:	e7e8      	b.n	800f202 <__ieee754_pow+0xfa>
 800f230:	f1b9 0f00 	cmp.w	r9, #0
 800f234:	f04f 0000 	mov.w	r0, #0
 800f238:	f04f 0100 	mov.w	r1, #0
 800f23c:	da81      	bge.n	800f142 <__ieee754_pow+0x3a>
 800f23e:	e9dd 0300 	ldrd	r0, r3, [sp]
 800f242:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800f246:	e77c      	b.n	800f142 <__ieee754_pow+0x3a>
 800f248:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800f24c:	d106      	bne.n	800f25c <__ieee754_pow+0x154>
 800f24e:	4632      	mov	r2, r6
 800f250:	463b      	mov	r3, r7
 800f252:	4630      	mov	r0, r6
 800f254:	4639      	mov	r1, r7
 800f256:	f7f1 f9e7 	bl	8000628 <__aeabi_dmul>
 800f25a:	e772      	b.n	800f142 <__ieee754_pow+0x3a>
 800f25c:	4a51      	ldr	r2, [pc, #324]	@ (800f3a4 <__ieee754_pow+0x29c>)
 800f25e:	4591      	cmp	r9, r2
 800f260:	d109      	bne.n	800f276 <__ieee754_pow+0x16e>
 800f262:	2d00      	cmp	r5, #0
 800f264:	db07      	blt.n	800f276 <__ieee754_pow+0x16e>
 800f266:	ec47 6b10 	vmov	d0, r6, r7
 800f26a:	b011      	add	sp, #68	@ 0x44
 800f26c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f270:	f7ff be6a 	b.w	800ef48 <__ieee754_sqrt>
 800f274:	2400      	movs	r4, #0
 800f276:	ec47 6b10 	vmov	d0, r6, r7
 800f27a:	9302      	str	r3, [sp, #8]
 800f27c:	f000 fc88 	bl	800fb90 <fabs>
 800f280:	9b02      	ldr	r3, [sp, #8]
 800f282:	ec51 0b10 	vmov	r0, r1, d0
 800f286:	bb53      	cbnz	r3, 800f2de <__ieee754_pow+0x1d6>
 800f288:	4b44      	ldr	r3, [pc, #272]	@ (800f39c <__ieee754_pow+0x294>)
 800f28a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800f28e:	429a      	cmp	r2, r3
 800f290:	d002      	beq.n	800f298 <__ieee754_pow+0x190>
 800f292:	f1b8 0f00 	cmp.w	r8, #0
 800f296:	d122      	bne.n	800f2de <__ieee754_pow+0x1d6>
 800f298:	f1b9 0f00 	cmp.w	r9, #0
 800f29c:	da05      	bge.n	800f2aa <__ieee754_pow+0x1a2>
 800f29e:	4602      	mov	r2, r0
 800f2a0:	460b      	mov	r3, r1
 800f2a2:	2000      	movs	r0, #0
 800f2a4:	493d      	ldr	r1, [pc, #244]	@ (800f39c <__ieee754_pow+0x294>)
 800f2a6:	f7f1 fae9 	bl	800087c <__aeabi_ddiv>
 800f2aa:	2d00      	cmp	r5, #0
 800f2ac:	f6bf af49 	bge.w	800f142 <__ieee754_pow+0x3a>
 800f2b0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800f2b4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800f2b8:	ea58 0804 	orrs.w	r8, r8, r4
 800f2bc:	d108      	bne.n	800f2d0 <__ieee754_pow+0x1c8>
 800f2be:	4602      	mov	r2, r0
 800f2c0:	460b      	mov	r3, r1
 800f2c2:	4610      	mov	r0, r2
 800f2c4:	4619      	mov	r1, r3
 800f2c6:	f7f0 fff7 	bl	80002b8 <__aeabi_dsub>
 800f2ca:	4602      	mov	r2, r0
 800f2cc:	460b      	mov	r3, r1
 800f2ce:	e794      	b.n	800f1fa <__ieee754_pow+0xf2>
 800f2d0:	2c01      	cmp	r4, #1
 800f2d2:	f47f af36 	bne.w	800f142 <__ieee754_pow+0x3a>
 800f2d6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f2da:	4619      	mov	r1, r3
 800f2dc:	e731      	b.n	800f142 <__ieee754_pow+0x3a>
 800f2de:	0feb      	lsrs	r3, r5, #31
 800f2e0:	3b01      	subs	r3, #1
 800f2e2:	ea53 0204 	orrs.w	r2, r3, r4
 800f2e6:	d102      	bne.n	800f2ee <__ieee754_pow+0x1e6>
 800f2e8:	4632      	mov	r2, r6
 800f2ea:	463b      	mov	r3, r7
 800f2ec:	e7e9      	b.n	800f2c2 <__ieee754_pow+0x1ba>
 800f2ee:	3c01      	subs	r4, #1
 800f2f0:	431c      	orrs	r4, r3
 800f2f2:	d016      	beq.n	800f322 <__ieee754_pow+0x21a>
 800f2f4:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800f380 <__ieee754_pow+0x278>
 800f2f8:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800f2fc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f300:	f240 8112 	bls.w	800f528 <__ieee754_pow+0x420>
 800f304:	4b28      	ldr	r3, [pc, #160]	@ (800f3a8 <__ieee754_pow+0x2a0>)
 800f306:	459a      	cmp	sl, r3
 800f308:	4b25      	ldr	r3, [pc, #148]	@ (800f3a0 <__ieee754_pow+0x298>)
 800f30a:	d916      	bls.n	800f33a <__ieee754_pow+0x232>
 800f30c:	4598      	cmp	r8, r3
 800f30e:	d80b      	bhi.n	800f328 <__ieee754_pow+0x220>
 800f310:	f1b9 0f00 	cmp.w	r9, #0
 800f314:	da0b      	bge.n	800f32e <__ieee754_pow+0x226>
 800f316:	2000      	movs	r0, #0
 800f318:	b011      	add	sp, #68	@ 0x44
 800f31a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f31e:	f000 be6f 	b.w	8010000 <__math_oflow>
 800f322:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800f388 <__ieee754_pow+0x280>
 800f326:	e7e7      	b.n	800f2f8 <__ieee754_pow+0x1f0>
 800f328:	f1b9 0f00 	cmp.w	r9, #0
 800f32c:	dcf3      	bgt.n	800f316 <__ieee754_pow+0x20e>
 800f32e:	2000      	movs	r0, #0
 800f330:	b011      	add	sp, #68	@ 0x44
 800f332:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f336:	f000 be5b 	b.w	800fff0 <__math_uflow>
 800f33a:	4598      	cmp	r8, r3
 800f33c:	d20c      	bcs.n	800f358 <__ieee754_pow+0x250>
 800f33e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f342:	2200      	movs	r2, #0
 800f344:	2300      	movs	r3, #0
 800f346:	f7f1 fbe1 	bl	8000b0c <__aeabi_dcmplt>
 800f34a:	3800      	subs	r0, #0
 800f34c:	bf18      	it	ne
 800f34e:	2001      	movne	r0, #1
 800f350:	f1b9 0f00 	cmp.w	r9, #0
 800f354:	daec      	bge.n	800f330 <__ieee754_pow+0x228>
 800f356:	e7df      	b.n	800f318 <__ieee754_pow+0x210>
 800f358:	4b10      	ldr	r3, [pc, #64]	@ (800f39c <__ieee754_pow+0x294>)
 800f35a:	4598      	cmp	r8, r3
 800f35c:	f04f 0200 	mov.w	r2, #0
 800f360:	d924      	bls.n	800f3ac <__ieee754_pow+0x2a4>
 800f362:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f366:	2300      	movs	r3, #0
 800f368:	f7f1 fbd0 	bl	8000b0c <__aeabi_dcmplt>
 800f36c:	3800      	subs	r0, #0
 800f36e:	bf18      	it	ne
 800f370:	2001      	movne	r0, #1
 800f372:	f1b9 0f00 	cmp.w	r9, #0
 800f376:	dccf      	bgt.n	800f318 <__ieee754_pow+0x210>
 800f378:	e7da      	b.n	800f330 <__ieee754_pow+0x228>
 800f37a:	bf00      	nop
 800f37c:	f3af 8000 	nop.w
 800f380:	00000000 	.word	0x00000000
 800f384:	3ff00000 	.word	0x3ff00000
 800f388:	00000000 	.word	0x00000000
 800f38c:	bff00000 	.word	0xbff00000
 800f390:	fff00000 	.word	0xfff00000
 800f394:	7ff00000 	.word	0x7ff00000
 800f398:	433fffff 	.word	0x433fffff
 800f39c:	3ff00000 	.word	0x3ff00000
 800f3a0:	3fefffff 	.word	0x3fefffff
 800f3a4:	3fe00000 	.word	0x3fe00000
 800f3a8:	43f00000 	.word	0x43f00000
 800f3ac:	4b5a      	ldr	r3, [pc, #360]	@ (800f518 <__ieee754_pow+0x410>)
 800f3ae:	f7f0 ff83 	bl	80002b8 <__aeabi_dsub>
 800f3b2:	a351      	add	r3, pc, #324	@ (adr r3, 800f4f8 <__ieee754_pow+0x3f0>)
 800f3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3b8:	4604      	mov	r4, r0
 800f3ba:	460d      	mov	r5, r1
 800f3bc:	f7f1 f934 	bl	8000628 <__aeabi_dmul>
 800f3c0:	a34f      	add	r3, pc, #316	@ (adr r3, 800f500 <__ieee754_pow+0x3f8>)
 800f3c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3c6:	4606      	mov	r6, r0
 800f3c8:	460f      	mov	r7, r1
 800f3ca:	4620      	mov	r0, r4
 800f3cc:	4629      	mov	r1, r5
 800f3ce:	f7f1 f92b 	bl	8000628 <__aeabi_dmul>
 800f3d2:	4b52      	ldr	r3, [pc, #328]	@ (800f51c <__ieee754_pow+0x414>)
 800f3d4:	4682      	mov	sl, r0
 800f3d6:	468b      	mov	fp, r1
 800f3d8:	2200      	movs	r2, #0
 800f3da:	4620      	mov	r0, r4
 800f3dc:	4629      	mov	r1, r5
 800f3de:	f7f1 f923 	bl	8000628 <__aeabi_dmul>
 800f3e2:	4602      	mov	r2, r0
 800f3e4:	460b      	mov	r3, r1
 800f3e6:	a148      	add	r1, pc, #288	@ (adr r1, 800f508 <__ieee754_pow+0x400>)
 800f3e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f3ec:	f7f0 ff64 	bl	80002b8 <__aeabi_dsub>
 800f3f0:	4622      	mov	r2, r4
 800f3f2:	462b      	mov	r3, r5
 800f3f4:	f7f1 f918 	bl	8000628 <__aeabi_dmul>
 800f3f8:	4602      	mov	r2, r0
 800f3fa:	460b      	mov	r3, r1
 800f3fc:	2000      	movs	r0, #0
 800f3fe:	4948      	ldr	r1, [pc, #288]	@ (800f520 <__ieee754_pow+0x418>)
 800f400:	f7f0 ff5a 	bl	80002b8 <__aeabi_dsub>
 800f404:	4622      	mov	r2, r4
 800f406:	4680      	mov	r8, r0
 800f408:	4689      	mov	r9, r1
 800f40a:	462b      	mov	r3, r5
 800f40c:	4620      	mov	r0, r4
 800f40e:	4629      	mov	r1, r5
 800f410:	f7f1 f90a 	bl	8000628 <__aeabi_dmul>
 800f414:	4602      	mov	r2, r0
 800f416:	460b      	mov	r3, r1
 800f418:	4640      	mov	r0, r8
 800f41a:	4649      	mov	r1, r9
 800f41c:	f7f1 f904 	bl	8000628 <__aeabi_dmul>
 800f420:	a33b      	add	r3, pc, #236	@ (adr r3, 800f510 <__ieee754_pow+0x408>)
 800f422:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f426:	f7f1 f8ff 	bl	8000628 <__aeabi_dmul>
 800f42a:	4602      	mov	r2, r0
 800f42c:	460b      	mov	r3, r1
 800f42e:	4650      	mov	r0, sl
 800f430:	4659      	mov	r1, fp
 800f432:	f7f0 ff41 	bl	80002b8 <__aeabi_dsub>
 800f436:	4602      	mov	r2, r0
 800f438:	460b      	mov	r3, r1
 800f43a:	4680      	mov	r8, r0
 800f43c:	4689      	mov	r9, r1
 800f43e:	4630      	mov	r0, r6
 800f440:	4639      	mov	r1, r7
 800f442:	f7f0 ff3b 	bl	80002bc <__adddf3>
 800f446:	2400      	movs	r4, #0
 800f448:	4632      	mov	r2, r6
 800f44a:	463b      	mov	r3, r7
 800f44c:	4620      	mov	r0, r4
 800f44e:	460d      	mov	r5, r1
 800f450:	f7f0 ff32 	bl	80002b8 <__aeabi_dsub>
 800f454:	4602      	mov	r2, r0
 800f456:	460b      	mov	r3, r1
 800f458:	4640      	mov	r0, r8
 800f45a:	4649      	mov	r1, r9
 800f45c:	f7f0 ff2c 	bl	80002b8 <__aeabi_dsub>
 800f460:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f464:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f468:	2300      	movs	r3, #0
 800f46a:	9304      	str	r3, [sp, #16]
 800f46c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800f470:	4606      	mov	r6, r0
 800f472:	460f      	mov	r7, r1
 800f474:	4652      	mov	r2, sl
 800f476:	465b      	mov	r3, fp
 800f478:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f47c:	f7f0 ff1c 	bl	80002b8 <__aeabi_dsub>
 800f480:	4622      	mov	r2, r4
 800f482:	462b      	mov	r3, r5
 800f484:	f7f1 f8d0 	bl	8000628 <__aeabi_dmul>
 800f488:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f48c:	4680      	mov	r8, r0
 800f48e:	4689      	mov	r9, r1
 800f490:	4630      	mov	r0, r6
 800f492:	4639      	mov	r1, r7
 800f494:	f7f1 f8c8 	bl	8000628 <__aeabi_dmul>
 800f498:	4602      	mov	r2, r0
 800f49a:	460b      	mov	r3, r1
 800f49c:	4640      	mov	r0, r8
 800f49e:	4649      	mov	r1, r9
 800f4a0:	f7f0 ff0c 	bl	80002bc <__adddf3>
 800f4a4:	4652      	mov	r2, sl
 800f4a6:	465b      	mov	r3, fp
 800f4a8:	4606      	mov	r6, r0
 800f4aa:	460f      	mov	r7, r1
 800f4ac:	4620      	mov	r0, r4
 800f4ae:	4629      	mov	r1, r5
 800f4b0:	f7f1 f8ba 	bl	8000628 <__aeabi_dmul>
 800f4b4:	460b      	mov	r3, r1
 800f4b6:	4602      	mov	r2, r0
 800f4b8:	4680      	mov	r8, r0
 800f4ba:	4689      	mov	r9, r1
 800f4bc:	4630      	mov	r0, r6
 800f4be:	4639      	mov	r1, r7
 800f4c0:	f7f0 fefc 	bl	80002bc <__adddf3>
 800f4c4:	4b17      	ldr	r3, [pc, #92]	@ (800f524 <__ieee754_pow+0x41c>)
 800f4c6:	4299      	cmp	r1, r3
 800f4c8:	4604      	mov	r4, r0
 800f4ca:	460d      	mov	r5, r1
 800f4cc:	468a      	mov	sl, r1
 800f4ce:	468b      	mov	fp, r1
 800f4d0:	f340 82ef 	ble.w	800fab2 <__ieee754_pow+0x9aa>
 800f4d4:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800f4d8:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800f4dc:	4303      	orrs	r3, r0
 800f4de:	f000 81e8 	beq.w	800f8b2 <__ieee754_pow+0x7aa>
 800f4e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f4e6:	2200      	movs	r2, #0
 800f4e8:	2300      	movs	r3, #0
 800f4ea:	f7f1 fb0f 	bl	8000b0c <__aeabi_dcmplt>
 800f4ee:	3800      	subs	r0, #0
 800f4f0:	bf18      	it	ne
 800f4f2:	2001      	movne	r0, #1
 800f4f4:	e710      	b.n	800f318 <__ieee754_pow+0x210>
 800f4f6:	bf00      	nop
 800f4f8:	60000000 	.word	0x60000000
 800f4fc:	3ff71547 	.word	0x3ff71547
 800f500:	f85ddf44 	.word	0xf85ddf44
 800f504:	3e54ae0b 	.word	0x3e54ae0b
 800f508:	55555555 	.word	0x55555555
 800f50c:	3fd55555 	.word	0x3fd55555
 800f510:	652b82fe 	.word	0x652b82fe
 800f514:	3ff71547 	.word	0x3ff71547
 800f518:	3ff00000 	.word	0x3ff00000
 800f51c:	3fd00000 	.word	0x3fd00000
 800f520:	3fe00000 	.word	0x3fe00000
 800f524:	408fffff 	.word	0x408fffff
 800f528:	4bd5      	ldr	r3, [pc, #852]	@ (800f880 <__ieee754_pow+0x778>)
 800f52a:	402b      	ands	r3, r5
 800f52c:	2200      	movs	r2, #0
 800f52e:	b92b      	cbnz	r3, 800f53c <__ieee754_pow+0x434>
 800f530:	4bd4      	ldr	r3, [pc, #848]	@ (800f884 <__ieee754_pow+0x77c>)
 800f532:	f7f1 f879 	bl	8000628 <__aeabi_dmul>
 800f536:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800f53a:	468b      	mov	fp, r1
 800f53c:	ea4f 532b 	mov.w	r3, fp, asr #20
 800f540:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800f544:	4413      	add	r3, r2
 800f546:	930a      	str	r3, [sp, #40]	@ 0x28
 800f548:	4bcf      	ldr	r3, [pc, #828]	@ (800f888 <__ieee754_pow+0x780>)
 800f54a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800f54e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800f552:	459b      	cmp	fp, r3
 800f554:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800f558:	dd08      	ble.n	800f56c <__ieee754_pow+0x464>
 800f55a:	4bcc      	ldr	r3, [pc, #816]	@ (800f88c <__ieee754_pow+0x784>)
 800f55c:	459b      	cmp	fp, r3
 800f55e:	f340 81a5 	ble.w	800f8ac <__ieee754_pow+0x7a4>
 800f562:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f564:	3301      	adds	r3, #1
 800f566:	930a      	str	r3, [sp, #40]	@ 0x28
 800f568:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800f56c:	f04f 0a00 	mov.w	sl, #0
 800f570:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800f574:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f576:	4bc6      	ldr	r3, [pc, #792]	@ (800f890 <__ieee754_pow+0x788>)
 800f578:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f57c:	ed93 7b00 	vldr	d7, [r3]
 800f580:	4629      	mov	r1, r5
 800f582:	ec53 2b17 	vmov	r2, r3, d7
 800f586:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f58a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f58e:	f7f0 fe93 	bl	80002b8 <__aeabi_dsub>
 800f592:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f596:	4606      	mov	r6, r0
 800f598:	460f      	mov	r7, r1
 800f59a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f59e:	f7f0 fe8d 	bl	80002bc <__adddf3>
 800f5a2:	4602      	mov	r2, r0
 800f5a4:	460b      	mov	r3, r1
 800f5a6:	2000      	movs	r0, #0
 800f5a8:	49ba      	ldr	r1, [pc, #744]	@ (800f894 <__ieee754_pow+0x78c>)
 800f5aa:	f7f1 f967 	bl	800087c <__aeabi_ddiv>
 800f5ae:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800f5b2:	4602      	mov	r2, r0
 800f5b4:	460b      	mov	r3, r1
 800f5b6:	4630      	mov	r0, r6
 800f5b8:	4639      	mov	r1, r7
 800f5ba:	f7f1 f835 	bl	8000628 <__aeabi_dmul>
 800f5be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f5c2:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800f5c6:	106d      	asrs	r5, r5, #1
 800f5c8:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800f5cc:	f04f 0b00 	mov.w	fp, #0
 800f5d0:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800f5d4:	4661      	mov	r1, ip
 800f5d6:	2200      	movs	r2, #0
 800f5d8:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800f5dc:	4658      	mov	r0, fp
 800f5de:	46e1      	mov	r9, ip
 800f5e0:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800f5e4:	4614      	mov	r4, r2
 800f5e6:	461d      	mov	r5, r3
 800f5e8:	f7f1 f81e 	bl	8000628 <__aeabi_dmul>
 800f5ec:	4602      	mov	r2, r0
 800f5ee:	460b      	mov	r3, r1
 800f5f0:	4630      	mov	r0, r6
 800f5f2:	4639      	mov	r1, r7
 800f5f4:	f7f0 fe60 	bl	80002b8 <__aeabi_dsub>
 800f5f8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f5fc:	4606      	mov	r6, r0
 800f5fe:	460f      	mov	r7, r1
 800f600:	4620      	mov	r0, r4
 800f602:	4629      	mov	r1, r5
 800f604:	f7f0 fe58 	bl	80002b8 <__aeabi_dsub>
 800f608:	4602      	mov	r2, r0
 800f60a:	460b      	mov	r3, r1
 800f60c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f610:	f7f0 fe52 	bl	80002b8 <__aeabi_dsub>
 800f614:	465a      	mov	r2, fp
 800f616:	464b      	mov	r3, r9
 800f618:	f7f1 f806 	bl	8000628 <__aeabi_dmul>
 800f61c:	4602      	mov	r2, r0
 800f61e:	460b      	mov	r3, r1
 800f620:	4630      	mov	r0, r6
 800f622:	4639      	mov	r1, r7
 800f624:	f7f0 fe48 	bl	80002b8 <__aeabi_dsub>
 800f628:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800f62c:	f7f0 fffc 	bl	8000628 <__aeabi_dmul>
 800f630:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f634:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f638:	4610      	mov	r0, r2
 800f63a:	4619      	mov	r1, r3
 800f63c:	f7f0 fff4 	bl	8000628 <__aeabi_dmul>
 800f640:	a37d      	add	r3, pc, #500	@ (adr r3, 800f838 <__ieee754_pow+0x730>)
 800f642:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f646:	4604      	mov	r4, r0
 800f648:	460d      	mov	r5, r1
 800f64a:	f7f0 ffed 	bl	8000628 <__aeabi_dmul>
 800f64e:	a37c      	add	r3, pc, #496	@ (adr r3, 800f840 <__ieee754_pow+0x738>)
 800f650:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f654:	f7f0 fe32 	bl	80002bc <__adddf3>
 800f658:	4622      	mov	r2, r4
 800f65a:	462b      	mov	r3, r5
 800f65c:	f7f0 ffe4 	bl	8000628 <__aeabi_dmul>
 800f660:	a379      	add	r3, pc, #484	@ (adr r3, 800f848 <__ieee754_pow+0x740>)
 800f662:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f666:	f7f0 fe29 	bl	80002bc <__adddf3>
 800f66a:	4622      	mov	r2, r4
 800f66c:	462b      	mov	r3, r5
 800f66e:	f7f0 ffdb 	bl	8000628 <__aeabi_dmul>
 800f672:	a377      	add	r3, pc, #476	@ (adr r3, 800f850 <__ieee754_pow+0x748>)
 800f674:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f678:	f7f0 fe20 	bl	80002bc <__adddf3>
 800f67c:	4622      	mov	r2, r4
 800f67e:	462b      	mov	r3, r5
 800f680:	f7f0 ffd2 	bl	8000628 <__aeabi_dmul>
 800f684:	a374      	add	r3, pc, #464	@ (adr r3, 800f858 <__ieee754_pow+0x750>)
 800f686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f68a:	f7f0 fe17 	bl	80002bc <__adddf3>
 800f68e:	4622      	mov	r2, r4
 800f690:	462b      	mov	r3, r5
 800f692:	f7f0 ffc9 	bl	8000628 <__aeabi_dmul>
 800f696:	a372      	add	r3, pc, #456	@ (adr r3, 800f860 <__ieee754_pow+0x758>)
 800f698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f69c:	f7f0 fe0e 	bl	80002bc <__adddf3>
 800f6a0:	4622      	mov	r2, r4
 800f6a2:	4606      	mov	r6, r0
 800f6a4:	460f      	mov	r7, r1
 800f6a6:	462b      	mov	r3, r5
 800f6a8:	4620      	mov	r0, r4
 800f6aa:	4629      	mov	r1, r5
 800f6ac:	f7f0 ffbc 	bl	8000628 <__aeabi_dmul>
 800f6b0:	4602      	mov	r2, r0
 800f6b2:	460b      	mov	r3, r1
 800f6b4:	4630      	mov	r0, r6
 800f6b6:	4639      	mov	r1, r7
 800f6b8:	f7f0 ffb6 	bl	8000628 <__aeabi_dmul>
 800f6bc:	465a      	mov	r2, fp
 800f6be:	4604      	mov	r4, r0
 800f6c0:	460d      	mov	r5, r1
 800f6c2:	464b      	mov	r3, r9
 800f6c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f6c8:	f7f0 fdf8 	bl	80002bc <__adddf3>
 800f6cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f6d0:	f7f0 ffaa 	bl	8000628 <__aeabi_dmul>
 800f6d4:	4622      	mov	r2, r4
 800f6d6:	462b      	mov	r3, r5
 800f6d8:	f7f0 fdf0 	bl	80002bc <__adddf3>
 800f6dc:	465a      	mov	r2, fp
 800f6de:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f6e2:	464b      	mov	r3, r9
 800f6e4:	4658      	mov	r0, fp
 800f6e6:	4649      	mov	r1, r9
 800f6e8:	f7f0 ff9e 	bl	8000628 <__aeabi_dmul>
 800f6ec:	4b6a      	ldr	r3, [pc, #424]	@ (800f898 <__ieee754_pow+0x790>)
 800f6ee:	2200      	movs	r2, #0
 800f6f0:	4606      	mov	r6, r0
 800f6f2:	460f      	mov	r7, r1
 800f6f4:	f7f0 fde2 	bl	80002bc <__adddf3>
 800f6f8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f6fc:	f7f0 fdde 	bl	80002bc <__adddf3>
 800f700:	46d8      	mov	r8, fp
 800f702:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800f706:	460d      	mov	r5, r1
 800f708:	465a      	mov	r2, fp
 800f70a:	460b      	mov	r3, r1
 800f70c:	4640      	mov	r0, r8
 800f70e:	4649      	mov	r1, r9
 800f710:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800f714:	f7f0 ff88 	bl	8000628 <__aeabi_dmul>
 800f718:	465c      	mov	r4, fp
 800f71a:	4680      	mov	r8, r0
 800f71c:	4689      	mov	r9, r1
 800f71e:	4b5e      	ldr	r3, [pc, #376]	@ (800f898 <__ieee754_pow+0x790>)
 800f720:	2200      	movs	r2, #0
 800f722:	4620      	mov	r0, r4
 800f724:	4629      	mov	r1, r5
 800f726:	f7f0 fdc7 	bl	80002b8 <__aeabi_dsub>
 800f72a:	4632      	mov	r2, r6
 800f72c:	463b      	mov	r3, r7
 800f72e:	f7f0 fdc3 	bl	80002b8 <__aeabi_dsub>
 800f732:	4602      	mov	r2, r0
 800f734:	460b      	mov	r3, r1
 800f736:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f73a:	f7f0 fdbd 	bl	80002b8 <__aeabi_dsub>
 800f73e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f742:	f7f0 ff71 	bl	8000628 <__aeabi_dmul>
 800f746:	4622      	mov	r2, r4
 800f748:	4606      	mov	r6, r0
 800f74a:	460f      	mov	r7, r1
 800f74c:	462b      	mov	r3, r5
 800f74e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f752:	f7f0 ff69 	bl	8000628 <__aeabi_dmul>
 800f756:	4602      	mov	r2, r0
 800f758:	460b      	mov	r3, r1
 800f75a:	4630      	mov	r0, r6
 800f75c:	4639      	mov	r1, r7
 800f75e:	f7f0 fdad 	bl	80002bc <__adddf3>
 800f762:	4606      	mov	r6, r0
 800f764:	460f      	mov	r7, r1
 800f766:	4602      	mov	r2, r0
 800f768:	460b      	mov	r3, r1
 800f76a:	4640      	mov	r0, r8
 800f76c:	4649      	mov	r1, r9
 800f76e:	f7f0 fda5 	bl	80002bc <__adddf3>
 800f772:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800f776:	a33c      	add	r3, pc, #240	@ (adr r3, 800f868 <__ieee754_pow+0x760>)
 800f778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f77c:	4658      	mov	r0, fp
 800f77e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800f782:	460d      	mov	r5, r1
 800f784:	f7f0 ff50 	bl	8000628 <__aeabi_dmul>
 800f788:	465c      	mov	r4, fp
 800f78a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f78e:	4642      	mov	r2, r8
 800f790:	464b      	mov	r3, r9
 800f792:	4620      	mov	r0, r4
 800f794:	4629      	mov	r1, r5
 800f796:	f7f0 fd8f 	bl	80002b8 <__aeabi_dsub>
 800f79a:	4602      	mov	r2, r0
 800f79c:	460b      	mov	r3, r1
 800f79e:	4630      	mov	r0, r6
 800f7a0:	4639      	mov	r1, r7
 800f7a2:	f7f0 fd89 	bl	80002b8 <__aeabi_dsub>
 800f7a6:	a332      	add	r3, pc, #200	@ (adr r3, 800f870 <__ieee754_pow+0x768>)
 800f7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7ac:	f7f0 ff3c 	bl	8000628 <__aeabi_dmul>
 800f7b0:	a331      	add	r3, pc, #196	@ (adr r3, 800f878 <__ieee754_pow+0x770>)
 800f7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7b6:	4606      	mov	r6, r0
 800f7b8:	460f      	mov	r7, r1
 800f7ba:	4620      	mov	r0, r4
 800f7bc:	4629      	mov	r1, r5
 800f7be:	f7f0 ff33 	bl	8000628 <__aeabi_dmul>
 800f7c2:	4602      	mov	r2, r0
 800f7c4:	460b      	mov	r3, r1
 800f7c6:	4630      	mov	r0, r6
 800f7c8:	4639      	mov	r1, r7
 800f7ca:	f7f0 fd77 	bl	80002bc <__adddf3>
 800f7ce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f7d0:	4b32      	ldr	r3, [pc, #200]	@ (800f89c <__ieee754_pow+0x794>)
 800f7d2:	4413      	add	r3, r2
 800f7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7d8:	f7f0 fd70 	bl	80002bc <__adddf3>
 800f7dc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f7e0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f7e2:	f7f0 feb7 	bl	8000554 <__aeabi_i2d>
 800f7e6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f7e8:	4b2d      	ldr	r3, [pc, #180]	@ (800f8a0 <__ieee754_pow+0x798>)
 800f7ea:	4413      	add	r3, r2
 800f7ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f7f0:	4606      	mov	r6, r0
 800f7f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f7f6:	460f      	mov	r7, r1
 800f7f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f7fc:	f7f0 fd5e 	bl	80002bc <__adddf3>
 800f800:	4642      	mov	r2, r8
 800f802:	464b      	mov	r3, r9
 800f804:	f7f0 fd5a 	bl	80002bc <__adddf3>
 800f808:	4632      	mov	r2, r6
 800f80a:	463b      	mov	r3, r7
 800f80c:	f7f0 fd56 	bl	80002bc <__adddf3>
 800f810:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800f814:	4632      	mov	r2, r6
 800f816:	463b      	mov	r3, r7
 800f818:	4658      	mov	r0, fp
 800f81a:	460d      	mov	r5, r1
 800f81c:	f7f0 fd4c 	bl	80002b8 <__aeabi_dsub>
 800f820:	4642      	mov	r2, r8
 800f822:	464b      	mov	r3, r9
 800f824:	f7f0 fd48 	bl	80002b8 <__aeabi_dsub>
 800f828:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f82c:	f7f0 fd44 	bl	80002b8 <__aeabi_dsub>
 800f830:	465c      	mov	r4, fp
 800f832:	4602      	mov	r2, r0
 800f834:	e036      	b.n	800f8a4 <__ieee754_pow+0x79c>
 800f836:	bf00      	nop
 800f838:	4a454eef 	.word	0x4a454eef
 800f83c:	3fca7e28 	.word	0x3fca7e28
 800f840:	93c9db65 	.word	0x93c9db65
 800f844:	3fcd864a 	.word	0x3fcd864a
 800f848:	a91d4101 	.word	0xa91d4101
 800f84c:	3fd17460 	.word	0x3fd17460
 800f850:	518f264d 	.word	0x518f264d
 800f854:	3fd55555 	.word	0x3fd55555
 800f858:	db6fabff 	.word	0xdb6fabff
 800f85c:	3fdb6db6 	.word	0x3fdb6db6
 800f860:	33333303 	.word	0x33333303
 800f864:	3fe33333 	.word	0x3fe33333
 800f868:	e0000000 	.word	0xe0000000
 800f86c:	3feec709 	.word	0x3feec709
 800f870:	dc3a03fd 	.word	0xdc3a03fd
 800f874:	3feec709 	.word	0x3feec709
 800f878:	145b01f5 	.word	0x145b01f5
 800f87c:	be3e2fe0 	.word	0xbe3e2fe0
 800f880:	7ff00000 	.word	0x7ff00000
 800f884:	43400000 	.word	0x43400000
 800f888:	0003988e 	.word	0x0003988e
 800f88c:	000bb679 	.word	0x000bb679
 800f890:	08010468 	.word	0x08010468
 800f894:	3ff00000 	.word	0x3ff00000
 800f898:	40080000 	.word	0x40080000
 800f89c:	08010448 	.word	0x08010448
 800f8a0:	08010458 	.word	0x08010458
 800f8a4:	460b      	mov	r3, r1
 800f8a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f8aa:	e5d7      	b.n	800f45c <__ieee754_pow+0x354>
 800f8ac:	f04f 0a01 	mov.w	sl, #1
 800f8b0:	e65e      	b.n	800f570 <__ieee754_pow+0x468>
 800f8b2:	a3b4      	add	r3, pc, #720	@ (adr r3, 800fb84 <__ieee754_pow+0xa7c>)
 800f8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8b8:	4630      	mov	r0, r6
 800f8ba:	4639      	mov	r1, r7
 800f8bc:	f7f0 fcfe 	bl	80002bc <__adddf3>
 800f8c0:	4642      	mov	r2, r8
 800f8c2:	e9cd 0100 	strd	r0, r1, [sp]
 800f8c6:	464b      	mov	r3, r9
 800f8c8:	4620      	mov	r0, r4
 800f8ca:	4629      	mov	r1, r5
 800f8cc:	f7f0 fcf4 	bl	80002b8 <__aeabi_dsub>
 800f8d0:	4602      	mov	r2, r0
 800f8d2:	460b      	mov	r3, r1
 800f8d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f8d8:	f7f1 f936 	bl	8000b48 <__aeabi_dcmpgt>
 800f8dc:	2800      	cmp	r0, #0
 800f8de:	f47f ae00 	bne.w	800f4e2 <__ieee754_pow+0x3da>
 800f8e2:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800f8e6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800f8ea:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800f8ee:	fa43 fa0a 	asr.w	sl, r3, sl
 800f8f2:	44da      	add	sl, fp
 800f8f4:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800f8f8:	489d      	ldr	r0, [pc, #628]	@ (800fb70 <__ieee754_pow+0xa68>)
 800f8fa:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800f8fe:	4108      	asrs	r0, r1
 800f900:	ea00 030a 	and.w	r3, r0, sl
 800f904:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800f908:	f1c1 0114 	rsb	r1, r1, #20
 800f90c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800f910:	fa4a fa01 	asr.w	sl, sl, r1
 800f914:	f1bb 0f00 	cmp.w	fp, #0
 800f918:	4640      	mov	r0, r8
 800f91a:	4649      	mov	r1, r9
 800f91c:	f04f 0200 	mov.w	r2, #0
 800f920:	bfb8      	it	lt
 800f922:	f1ca 0a00 	rsblt	sl, sl, #0
 800f926:	f7f0 fcc7 	bl	80002b8 <__aeabi_dsub>
 800f92a:	4680      	mov	r8, r0
 800f92c:	4689      	mov	r9, r1
 800f92e:	4632      	mov	r2, r6
 800f930:	463b      	mov	r3, r7
 800f932:	4640      	mov	r0, r8
 800f934:	4649      	mov	r1, r9
 800f936:	f7f0 fcc1 	bl	80002bc <__adddf3>
 800f93a:	2400      	movs	r4, #0
 800f93c:	a37c      	add	r3, pc, #496	@ (adr r3, 800fb30 <__ieee754_pow+0xa28>)
 800f93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f942:	4620      	mov	r0, r4
 800f944:	460d      	mov	r5, r1
 800f946:	f7f0 fe6f 	bl	8000628 <__aeabi_dmul>
 800f94a:	4642      	mov	r2, r8
 800f94c:	e9cd 0100 	strd	r0, r1, [sp]
 800f950:	464b      	mov	r3, r9
 800f952:	4620      	mov	r0, r4
 800f954:	4629      	mov	r1, r5
 800f956:	f7f0 fcaf 	bl	80002b8 <__aeabi_dsub>
 800f95a:	4602      	mov	r2, r0
 800f95c:	460b      	mov	r3, r1
 800f95e:	4630      	mov	r0, r6
 800f960:	4639      	mov	r1, r7
 800f962:	f7f0 fca9 	bl	80002b8 <__aeabi_dsub>
 800f966:	a374      	add	r3, pc, #464	@ (adr r3, 800fb38 <__ieee754_pow+0xa30>)
 800f968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f96c:	f7f0 fe5c 	bl	8000628 <__aeabi_dmul>
 800f970:	a373      	add	r3, pc, #460	@ (adr r3, 800fb40 <__ieee754_pow+0xa38>)
 800f972:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f976:	4680      	mov	r8, r0
 800f978:	4689      	mov	r9, r1
 800f97a:	4620      	mov	r0, r4
 800f97c:	4629      	mov	r1, r5
 800f97e:	f7f0 fe53 	bl	8000628 <__aeabi_dmul>
 800f982:	4602      	mov	r2, r0
 800f984:	460b      	mov	r3, r1
 800f986:	4640      	mov	r0, r8
 800f988:	4649      	mov	r1, r9
 800f98a:	f7f0 fc97 	bl	80002bc <__adddf3>
 800f98e:	4604      	mov	r4, r0
 800f990:	460d      	mov	r5, r1
 800f992:	4602      	mov	r2, r0
 800f994:	460b      	mov	r3, r1
 800f996:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f99a:	f7f0 fc8f 	bl	80002bc <__adddf3>
 800f99e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f9a2:	4680      	mov	r8, r0
 800f9a4:	4689      	mov	r9, r1
 800f9a6:	f7f0 fc87 	bl	80002b8 <__aeabi_dsub>
 800f9aa:	4602      	mov	r2, r0
 800f9ac:	460b      	mov	r3, r1
 800f9ae:	4620      	mov	r0, r4
 800f9b0:	4629      	mov	r1, r5
 800f9b2:	f7f0 fc81 	bl	80002b8 <__aeabi_dsub>
 800f9b6:	4642      	mov	r2, r8
 800f9b8:	4606      	mov	r6, r0
 800f9ba:	460f      	mov	r7, r1
 800f9bc:	464b      	mov	r3, r9
 800f9be:	4640      	mov	r0, r8
 800f9c0:	4649      	mov	r1, r9
 800f9c2:	f7f0 fe31 	bl	8000628 <__aeabi_dmul>
 800f9c6:	a360      	add	r3, pc, #384	@ (adr r3, 800fb48 <__ieee754_pow+0xa40>)
 800f9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9cc:	4604      	mov	r4, r0
 800f9ce:	460d      	mov	r5, r1
 800f9d0:	f7f0 fe2a 	bl	8000628 <__aeabi_dmul>
 800f9d4:	a35e      	add	r3, pc, #376	@ (adr r3, 800fb50 <__ieee754_pow+0xa48>)
 800f9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9da:	f7f0 fc6d 	bl	80002b8 <__aeabi_dsub>
 800f9de:	4622      	mov	r2, r4
 800f9e0:	462b      	mov	r3, r5
 800f9e2:	f7f0 fe21 	bl	8000628 <__aeabi_dmul>
 800f9e6:	a35c      	add	r3, pc, #368	@ (adr r3, 800fb58 <__ieee754_pow+0xa50>)
 800f9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9ec:	f7f0 fc66 	bl	80002bc <__adddf3>
 800f9f0:	4622      	mov	r2, r4
 800f9f2:	462b      	mov	r3, r5
 800f9f4:	f7f0 fe18 	bl	8000628 <__aeabi_dmul>
 800f9f8:	a359      	add	r3, pc, #356	@ (adr r3, 800fb60 <__ieee754_pow+0xa58>)
 800f9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9fe:	f7f0 fc5b 	bl	80002b8 <__aeabi_dsub>
 800fa02:	4622      	mov	r2, r4
 800fa04:	462b      	mov	r3, r5
 800fa06:	f7f0 fe0f 	bl	8000628 <__aeabi_dmul>
 800fa0a:	a357      	add	r3, pc, #348	@ (adr r3, 800fb68 <__ieee754_pow+0xa60>)
 800fa0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa10:	f7f0 fc54 	bl	80002bc <__adddf3>
 800fa14:	4622      	mov	r2, r4
 800fa16:	462b      	mov	r3, r5
 800fa18:	f7f0 fe06 	bl	8000628 <__aeabi_dmul>
 800fa1c:	4602      	mov	r2, r0
 800fa1e:	460b      	mov	r3, r1
 800fa20:	4640      	mov	r0, r8
 800fa22:	4649      	mov	r1, r9
 800fa24:	f7f0 fc48 	bl	80002b8 <__aeabi_dsub>
 800fa28:	4604      	mov	r4, r0
 800fa2a:	460d      	mov	r5, r1
 800fa2c:	4602      	mov	r2, r0
 800fa2e:	460b      	mov	r3, r1
 800fa30:	4640      	mov	r0, r8
 800fa32:	4649      	mov	r1, r9
 800fa34:	f7f0 fdf8 	bl	8000628 <__aeabi_dmul>
 800fa38:	2200      	movs	r2, #0
 800fa3a:	e9cd 0100 	strd	r0, r1, [sp]
 800fa3e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800fa42:	4620      	mov	r0, r4
 800fa44:	4629      	mov	r1, r5
 800fa46:	f7f0 fc37 	bl	80002b8 <__aeabi_dsub>
 800fa4a:	4602      	mov	r2, r0
 800fa4c:	460b      	mov	r3, r1
 800fa4e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fa52:	f7f0 ff13 	bl	800087c <__aeabi_ddiv>
 800fa56:	4632      	mov	r2, r6
 800fa58:	4604      	mov	r4, r0
 800fa5a:	460d      	mov	r5, r1
 800fa5c:	463b      	mov	r3, r7
 800fa5e:	4640      	mov	r0, r8
 800fa60:	4649      	mov	r1, r9
 800fa62:	f7f0 fde1 	bl	8000628 <__aeabi_dmul>
 800fa66:	4632      	mov	r2, r6
 800fa68:	463b      	mov	r3, r7
 800fa6a:	f7f0 fc27 	bl	80002bc <__adddf3>
 800fa6e:	4602      	mov	r2, r0
 800fa70:	460b      	mov	r3, r1
 800fa72:	4620      	mov	r0, r4
 800fa74:	4629      	mov	r1, r5
 800fa76:	f7f0 fc1f 	bl	80002b8 <__aeabi_dsub>
 800fa7a:	4642      	mov	r2, r8
 800fa7c:	464b      	mov	r3, r9
 800fa7e:	f7f0 fc1b 	bl	80002b8 <__aeabi_dsub>
 800fa82:	460b      	mov	r3, r1
 800fa84:	4602      	mov	r2, r0
 800fa86:	493b      	ldr	r1, [pc, #236]	@ (800fb74 <__ieee754_pow+0xa6c>)
 800fa88:	2000      	movs	r0, #0
 800fa8a:	f7f0 fc15 	bl	80002b8 <__aeabi_dsub>
 800fa8e:	ec41 0b10 	vmov	d0, r0, r1
 800fa92:	ee10 3a90 	vmov	r3, s1
 800fa96:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800fa9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fa9e:	da30      	bge.n	800fb02 <__ieee754_pow+0x9fa>
 800faa0:	4650      	mov	r0, sl
 800faa2:	f000 f9f9 	bl	800fe98 <scalbn>
 800faa6:	ec51 0b10 	vmov	r0, r1, d0
 800faaa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800faae:	f7ff bbd2 	b.w	800f256 <__ieee754_pow+0x14e>
 800fab2:	4c31      	ldr	r4, [pc, #196]	@ (800fb78 <__ieee754_pow+0xa70>)
 800fab4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800fab8:	42a3      	cmp	r3, r4
 800faba:	d91a      	bls.n	800faf2 <__ieee754_pow+0x9ea>
 800fabc:	4b2f      	ldr	r3, [pc, #188]	@ (800fb7c <__ieee754_pow+0xa74>)
 800fabe:	440b      	add	r3, r1
 800fac0:	4303      	orrs	r3, r0
 800fac2:	d009      	beq.n	800fad8 <__ieee754_pow+0x9d0>
 800fac4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fac8:	2200      	movs	r2, #0
 800faca:	2300      	movs	r3, #0
 800facc:	f7f1 f81e 	bl	8000b0c <__aeabi_dcmplt>
 800fad0:	3800      	subs	r0, #0
 800fad2:	bf18      	it	ne
 800fad4:	2001      	movne	r0, #1
 800fad6:	e42b      	b.n	800f330 <__ieee754_pow+0x228>
 800fad8:	4642      	mov	r2, r8
 800fada:	464b      	mov	r3, r9
 800fadc:	f7f0 fbec 	bl	80002b8 <__aeabi_dsub>
 800fae0:	4632      	mov	r2, r6
 800fae2:	463b      	mov	r3, r7
 800fae4:	f7f1 f826 	bl	8000b34 <__aeabi_dcmpge>
 800fae8:	2800      	cmp	r0, #0
 800faea:	d1eb      	bne.n	800fac4 <__ieee754_pow+0x9bc>
 800faec:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800fb8c <__ieee754_pow+0xa84>
 800faf0:	e6f7      	b.n	800f8e2 <__ieee754_pow+0x7da>
 800faf2:	469a      	mov	sl, r3
 800faf4:	4b22      	ldr	r3, [pc, #136]	@ (800fb80 <__ieee754_pow+0xa78>)
 800faf6:	459a      	cmp	sl, r3
 800faf8:	f63f aef3 	bhi.w	800f8e2 <__ieee754_pow+0x7da>
 800fafc:	f8dd a010 	ldr.w	sl, [sp, #16]
 800fb00:	e715      	b.n	800f92e <__ieee754_pow+0x826>
 800fb02:	ec51 0b10 	vmov	r0, r1, d0
 800fb06:	4619      	mov	r1, r3
 800fb08:	e7cf      	b.n	800faaa <__ieee754_pow+0x9a2>
 800fb0a:	491a      	ldr	r1, [pc, #104]	@ (800fb74 <__ieee754_pow+0xa6c>)
 800fb0c:	2000      	movs	r0, #0
 800fb0e:	f7ff bb18 	b.w	800f142 <__ieee754_pow+0x3a>
 800fb12:	2000      	movs	r0, #0
 800fb14:	2100      	movs	r1, #0
 800fb16:	f7ff bb14 	b.w	800f142 <__ieee754_pow+0x3a>
 800fb1a:	4630      	mov	r0, r6
 800fb1c:	4639      	mov	r1, r7
 800fb1e:	f7ff bb10 	b.w	800f142 <__ieee754_pow+0x3a>
 800fb22:	460c      	mov	r4, r1
 800fb24:	f7ff bb5e 	b.w	800f1e4 <__ieee754_pow+0xdc>
 800fb28:	2400      	movs	r4, #0
 800fb2a:	f7ff bb49 	b.w	800f1c0 <__ieee754_pow+0xb8>
 800fb2e:	bf00      	nop
 800fb30:	00000000 	.word	0x00000000
 800fb34:	3fe62e43 	.word	0x3fe62e43
 800fb38:	fefa39ef 	.word	0xfefa39ef
 800fb3c:	3fe62e42 	.word	0x3fe62e42
 800fb40:	0ca86c39 	.word	0x0ca86c39
 800fb44:	be205c61 	.word	0xbe205c61
 800fb48:	72bea4d0 	.word	0x72bea4d0
 800fb4c:	3e663769 	.word	0x3e663769
 800fb50:	c5d26bf1 	.word	0xc5d26bf1
 800fb54:	3ebbbd41 	.word	0x3ebbbd41
 800fb58:	af25de2c 	.word	0xaf25de2c
 800fb5c:	3f11566a 	.word	0x3f11566a
 800fb60:	16bebd93 	.word	0x16bebd93
 800fb64:	3f66c16c 	.word	0x3f66c16c
 800fb68:	5555553e 	.word	0x5555553e
 800fb6c:	3fc55555 	.word	0x3fc55555
 800fb70:	fff00000 	.word	0xfff00000
 800fb74:	3ff00000 	.word	0x3ff00000
 800fb78:	4090cbff 	.word	0x4090cbff
 800fb7c:	3f6f3400 	.word	0x3f6f3400
 800fb80:	3fe00000 	.word	0x3fe00000
 800fb84:	652b82fe 	.word	0x652b82fe
 800fb88:	3c971547 	.word	0x3c971547
 800fb8c:	4090cc00 	.word	0x4090cc00

0800fb90 <fabs>:
 800fb90:	ec51 0b10 	vmov	r0, r1, d0
 800fb94:	4602      	mov	r2, r0
 800fb96:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800fb9a:	ec43 2b10 	vmov	d0, r2, r3
 800fb9e:	4770      	bx	lr

0800fba0 <__ieee754_atan2f>:
 800fba0:	ee10 2a90 	vmov	r2, s1
 800fba4:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800fba8:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800fbac:	b510      	push	{r4, lr}
 800fbae:	eef0 7a40 	vmov.f32	s15, s0
 800fbb2:	d806      	bhi.n	800fbc2 <__ieee754_atan2f+0x22>
 800fbb4:	ee10 0a10 	vmov	r0, s0
 800fbb8:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800fbbc:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800fbc0:	d904      	bls.n	800fbcc <__ieee754_atan2f+0x2c>
 800fbc2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800fbc6:	eeb0 0a67 	vmov.f32	s0, s15
 800fbca:	bd10      	pop	{r4, pc}
 800fbcc:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800fbd0:	d103      	bne.n	800fbda <__ieee754_atan2f+0x3a>
 800fbd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fbd6:	f000 b883 	b.w	800fce0 <atanf>
 800fbda:	1794      	asrs	r4, r2, #30
 800fbdc:	f004 0402 	and.w	r4, r4, #2
 800fbe0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800fbe4:	b943      	cbnz	r3, 800fbf8 <__ieee754_atan2f+0x58>
 800fbe6:	2c02      	cmp	r4, #2
 800fbe8:	d05e      	beq.n	800fca8 <__ieee754_atan2f+0x108>
 800fbea:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800fcbc <__ieee754_atan2f+0x11c>
 800fbee:	2c03      	cmp	r4, #3
 800fbf0:	bf08      	it	eq
 800fbf2:	eef0 7a47 	vmoveq.f32	s15, s14
 800fbf6:	e7e6      	b.n	800fbc6 <__ieee754_atan2f+0x26>
 800fbf8:	b941      	cbnz	r1, 800fc0c <__ieee754_atan2f+0x6c>
 800fbfa:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800fcc0 <__ieee754_atan2f+0x120>
 800fbfe:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800fcc4 <__ieee754_atan2f+0x124>
 800fc02:	2800      	cmp	r0, #0
 800fc04:	bfb8      	it	lt
 800fc06:	eef0 7a47 	vmovlt.f32	s15, s14
 800fc0a:	e7dc      	b.n	800fbc6 <__ieee754_atan2f+0x26>
 800fc0c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800fc10:	d110      	bne.n	800fc34 <__ieee754_atan2f+0x94>
 800fc12:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800fc16:	f104 34ff 	add.w	r4, r4, #4294967295
 800fc1a:	d107      	bne.n	800fc2c <__ieee754_atan2f+0x8c>
 800fc1c:	2c02      	cmp	r4, #2
 800fc1e:	d846      	bhi.n	800fcae <__ieee754_atan2f+0x10e>
 800fc20:	4b29      	ldr	r3, [pc, #164]	@ (800fcc8 <__ieee754_atan2f+0x128>)
 800fc22:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800fc26:	edd3 7a00 	vldr	s15, [r3]
 800fc2a:	e7cc      	b.n	800fbc6 <__ieee754_atan2f+0x26>
 800fc2c:	2c02      	cmp	r4, #2
 800fc2e:	d841      	bhi.n	800fcb4 <__ieee754_atan2f+0x114>
 800fc30:	4b26      	ldr	r3, [pc, #152]	@ (800fccc <__ieee754_atan2f+0x12c>)
 800fc32:	e7f6      	b.n	800fc22 <__ieee754_atan2f+0x82>
 800fc34:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800fc38:	d0df      	beq.n	800fbfa <__ieee754_atan2f+0x5a>
 800fc3a:	1a5b      	subs	r3, r3, r1
 800fc3c:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800fc40:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800fc44:	da1a      	bge.n	800fc7c <__ieee754_atan2f+0xdc>
 800fc46:	2a00      	cmp	r2, #0
 800fc48:	da01      	bge.n	800fc4e <__ieee754_atan2f+0xae>
 800fc4a:	313c      	adds	r1, #60	@ 0x3c
 800fc4c:	db19      	blt.n	800fc82 <__ieee754_atan2f+0xe2>
 800fc4e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800fc52:	f000 f919 	bl	800fe88 <fabsf>
 800fc56:	f000 f843 	bl	800fce0 <atanf>
 800fc5a:	eef0 7a40 	vmov.f32	s15, s0
 800fc5e:	2c01      	cmp	r4, #1
 800fc60:	d012      	beq.n	800fc88 <__ieee754_atan2f+0xe8>
 800fc62:	2c02      	cmp	r4, #2
 800fc64:	d017      	beq.n	800fc96 <__ieee754_atan2f+0xf6>
 800fc66:	2c00      	cmp	r4, #0
 800fc68:	d0ad      	beq.n	800fbc6 <__ieee754_atan2f+0x26>
 800fc6a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800fcd0 <__ieee754_atan2f+0x130>
 800fc6e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fc72:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800fcd4 <__ieee754_atan2f+0x134>
 800fc76:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fc7a:	e7a4      	b.n	800fbc6 <__ieee754_atan2f+0x26>
 800fc7c:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800fcc0 <__ieee754_atan2f+0x120>
 800fc80:	e7ed      	b.n	800fc5e <__ieee754_atan2f+0xbe>
 800fc82:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800fcd8 <__ieee754_atan2f+0x138>
 800fc86:	e7ea      	b.n	800fc5e <__ieee754_atan2f+0xbe>
 800fc88:	ee17 3a90 	vmov	r3, s15
 800fc8c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800fc90:	ee07 3a90 	vmov	s15, r3
 800fc94:	e797      	b.n	800fbc6 <__ieee754_atan2f+0x26>
 800fc96:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800fcd0 <__ieee754_atan2f+0x130>
 800fc9a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fc9e:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800fcd4 <__ieee754_atan2f+0x134>
 800fca2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fca6:	e78e      	b.n	800fbc6 <__ieee754_atan2f+0x26>
 800fca8:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800fcd4 <__ieee754_atan2f+0x134>
 800fcac:	e78b      	b.n	800fbc6 <__ieee754_atan2f+0x26>
 800fcae:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800fcdc <__ieee754_atan2f+0x13c>
 800fcb2:	e788      	b.n	800fbc6 <__ieee754_atan2f+0x26>
 800fcb4:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800fcd8 <__ieee754_atan2f+0x138>
 800fcb8:	e785      	b.n	800fbc6 <__ieee754_atan2f+0x26>
 800fcba:	bf00      	nop
 800fcbc:	c0490fdb 	.word	0xc0490fdb
 800fcc0:	3fc90fdb 	.word	0x3fc90fdb
 800fcc4:	bfc90fdb 	.word	0xbfc90fdb
 800fcc8:	08010484 	.word	0x08010484
 800fccc:	08010478 	.word	0x08010478
 800fcd0:	33bbbd2e 	.word	0x33bbbd2e
 800fcd4:	40490fdb 	.word	0x40490fdb
 800fcd8:	00000000 	.word	0x00000000
 800fcdc:	3f490fdb 	.word	0x3f490fdb

0800fce0 <atanf>:
 800fce0:	b538      	push	{r3, r4, r5, lr}
 800fce2:	ee10 5a10 	vmov	r5, s0
 800fce6:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800fcea:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800fcee:	eef0 7a40 	vmov.f32	s15, s0
 800fcf2:	d310      	bcc.n	800fd16 <atanf+0x36>
 800fcf4:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800fcf8:	d904      	bls.n	800fd04 <atanf+0x24>
 800fcfa:	ee70 7a00 	vadd.f32	s15, s0, s0
 800fcfe:	eeb0 0a67 	vmov.f32	s0, s15
 800fd02:	bd38      	pop	{r3, r4, r5, pc}
 800fd04:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800fe3c <atanf+0x15c>
 800fd08:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800fe40 <atanf+0x160>
 800fd0c:	2d00      	cmp	r5, #0
 800fd0e:	bfc8      	it	gt
 800fd10:	eef0 7a47 	vmovgt.f32	s15, s14
 800fd14:	e7f3      	b.n	800fcfe <atanf+0x1e>
 800fd16:	4b4b      	ldr	r3, [pc, #300]	@ (800fe44 <atanf+0x164>)
 800fd18:	429c      	cmp	r4, r3
 800fd1a:	d810      	bhi.n	800fd3e <atanf+0x5e>
 800fd1c:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800fd20:	d20a      	bcs.n	800fd38 <atanf+0x58>
 800fd22:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800fe48 <atanf+0x168>
 800fd26:	ee30 7a07 	vadd.f32	s14, s0, s14
 800fd2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fd2e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800fd32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd36:	dce2      	bgt.n	800fcfe <atanf+0x1e>
 800fd38:	f04f 33ff 	mov.w	r3, #4294967295
 800fd3c:	e013      	b.n	800fd66 <atanf+0x86>
 800fd3e:	f000 f8a3 	bl	800fe88 <fabsf>
 800fd42:	4b42      	ldr	r3, [pc, #264]	@ (800fe4c <atanf+0x16c>)
 800fd44:	429c      	cmp	r4, r3
 800fd46:	d84f      	bhi.n	800fde8 <atanf+0x108>
 800fd48:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800fd4c:	429c      	cmp	r4, r3
 800fd4e:	d841      	bhi.n	800fdd4 <atanf+0xf4>
 800fd50:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800fd54:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800fd58:	eea0 7a27 	vfma.f32	s14, s0, s15
 800fd5c:	2300      	movs	r3, #0
 800fd5e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fd62:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800fd66:	1c5a      	adds	r2, r3, #1
 800fd68:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800fd6c:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800fe50 <atanf+0x170>
 800fd70:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800fe54 <atanf+0x174>
 800fd74:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800fe58 <atanf+0x178>
 800fd78:	ee66 6a06 	vmul.f32	s13, s12, s12
 800fd7c:	eee6 5a87 	vfma.f32	s11, s13, s14
 800fd80:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800fe5c <atanf+0x17c>
 800fd84:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800fd88:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800fe60 <atanf+0x180>
 800fd8c:	eee7 5a26 	vfma.f32	s11, s14, s13
 800fd90:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800fe64 <atanf+0x184>
 800fd94:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800fd98:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800fe68 <atanf+0x188>
 800fd9c:	eee7 5a26 	vfma.f32	s11, s14, s13
 800fda0:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800fe6c <atanf+0x18c>
 800fda4:	eea6 5a87 	vfma.f32	s10, s13, s14
 800fda8:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800fe70 <atanf+0x190>
 800fdac:	eea5 7a26 	vfma.f32	s14, s10, s13
 800fdb0:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800fe74 <atanf+0x194>
 800fdb4:	eea7 5a26 	vfma.f32	s10, s14, s13
 800fdb8:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800fe78 <atanf+0x198>
 800fdbc:	eea5 7a26 	vfma.f32	s14, s10, s13
 800fdc0:	ee27 7a26 	vmul.f32	s14, s14, s13
 800fdc4:	eea5 7a86 	vfma.f32	s14, s11, s12
 800fdc8:	ee27 7a87 	vmul.f32	s14, s15, s14
 800fdcc:	d121      	bne.n	800fe12 <atanf+0x132>
 800fdce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fdd2:	e794      	b.n	800fcfe <atanf+0x1e>
 800fdd4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800fdd8:	ee30 7a67 	vsub.f32	s14, s0, s15
 800fddc:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fde0:	2301      	movs	r3, #1
 800fde2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800fde6:	e7be      	b.n	800fd66 <atanf+0x86>
 800fde8:	4b24      	ldr	r3, [pc, #144]	@ (800fe7c <atanf+0x19c>)
 800fdea:	429c      	cmp	r4, r3
 800fdec:	d80b      	bhi.n	800fe06 <atanf+0x126>
 800fdee:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800fdf2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fdf6:	eea0 7a27 	vfma.f32	s14, s0, s15
 800fdfa:	2302      	movs	r3, #2
 800fdfc:	ee70 6a67 	vsub.f32	s13, s0, s15
 800fe00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fe04:	e7af      	b.n	800fd66 <atanf+0x86>
 800fe06:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800fe0a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800fe0e:	2303      	movs	r3, #3
 800fe10:	e7a9      	b.n	800fd66 <atanf+0x86>
 800fe12:	4a1b      	ldr	r2, [pc, #108]	@ (800fe80 <atanf+0x1a0>)
 800fe14:	491b      	ldr	r1, [pc, #108]	@ (800fe84 <atanf+0x1a4>)
 800fe16:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800fe1a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800fe1e:	edd3 6a00 	vldr	s13, [r3]
 800fe22:	ee37 7a66 	vsub.f32	s14, s14, s13
 800fe26:	2d00      	cmp	r5, #0
 800fe28:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fe2c:	edd2 7a00 	vldr	s15, [r2]
 800fe30:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fe34:	bfb8      	it	lt
 800fe36:	eef1 7a67 	vneglt.f32	s15, s15
 800fe3a:	e760      	b.n	800fcfe <atanf+0x1e>
 800fe3c:	bfc90fdb 	.word	0xbfc90fdb
 800fe40:	3fc90fdb 	.word	0x3fc90fdb
 800fe44:	3edfffff 	.word	0x3edfffff
 800fe48:	7149f2ca 	.word	0x7149f2ca
 800fe4c:	3f97ffff 	.word	0x3f97ffff
 800fe50:	3c8569d7 	.word	0x3c8569d7
 800fe54:	3d4bda59 	.word	0x3d4bda59
 800fe58:	bd6ef16b 	.word	0xbd6ef16b
 800fe5c:	3d886b35 	.word	0x3d886b35
 800fe60:	3dba2e6e 	.word	0x3dba2e6e
 800fe64:	3e124925 	.word	0x3e124925
 800fe68:	3eaaaaab 	.word	0x3eaaaaab
 800fe6c:	bd15a221 	.word	0xbd15a221
 800fe70:	bd9d8795 	.word	0xbd9d8795
 800fe74:	bde38e38 	.word	0xbde38e38
 800fe78:	be4ccccd 	.word	0xbe4ccccd
 800fe7c:	401bffff 	.word	0x401bffff
 800fe80:	080104a0 	.word	0x080104a0
 800fe84:	08010490 	.word	0x08010490

0800fe88 <fabsf>:
 800fe88:	ee10 3a10 	vmov	r3, s0
 800fe8c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fe90:	ee00 3a10 	vmov	s0, r3
 800fe94:	4770      	bx	lr
	...

0800fe98 <scalbn>:
 800fe98:	b570      	push	{r4, r5, r6, lr}
 800fe9a:	ec55 4b10 	vmov	r4, r5, d0
 800fe9e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800fea2:	4606      	mov	r6, r0
 800fea4:	462b      	mov	r3, r5
 800fea6:	b991      	cbnz	r1, 800fece <scalbn+0x36>
 800fea8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800feac:	4323      	orrs	r3, r4
 800feae:	d03d      	beq.n	800ff2c <scalbn+0x94>
 800feb0:	4b35      	ldr	r3, [pc, #212]	@ (800ff88 <scalbn+0xf0>)
 800feb2:	4620      	mov	r0, r4
 800feb4:	4629      	mov	r1, r5
 800feb6:	2200      	movs	r2, #0
 800feb8:	f7f0 fbb6 	bl	8000628 <__aeabi_dmul>
 800febc:	4b33      	ldr	r3, [pc, #204]	@ (800ff8c <scalbn+0xf4>)
 800febe:	429e      	cmp	r6, r3
 800fec0:	4604      	mov	r4, r0
 800fec2:	460d      	mov	r5, r1
 800fec4:	da0f      	bge.n	800fee6 <scalbn+0x4e>
 800fec6:	a328      	add	r3, pc, #160	@ (adr r3, 800ff68 <scalbn+0xd0>)
 800fec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fecc:	e01e      	b.n	800ff0c <scalbn+0x74>
 800fece:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800fed2:	4291      	cmp	r1, r2
 800fed4:	d10b      	bne.n	800feee <scalbn+0x56>
 800fed6:	4622      	mov	r2, r4
 800fed8:	4620      	mov	r0, r4
 800feda:	4629      	mov	r1, r5
 800fedc:	f7f0 f9ee 	bl	80002bc <__adddf3>
 800fee0:	4604      	mov	r4, r0
 800fee2:	460d      	mov	r5, r1
 800fee4:	e022      	b.n	800ff2c <scalbn+0x94>
 800fee6:	460b      	mov	r3, r1
 800fee8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800feec:	3936      	subs	r1, #54	@ 0x36
 800feee:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800fef2:	4296      	cmp	r6, r2
 800fef4:	dd0d      	ble.n	800ff12 <scalbn+0x7a>
 800fef6:	2d00      	cmp	r5, #0
 800fef8:	a11d      	add	r1, pc, #116	@ (adr r1, 800ff70 <scalbn+0xd8>)
 800fefa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fefe:	da02      	bge.n	800ff06 <scalbn+0x6e>
 800ff00:	a11d      	add	r1, pc, #116	@ (adr r1, 800ff78 <scalbn+0xe0>)
 800ff02:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff06:	a31a      	add	r3, pc, #104	@ (adr r3, 800ff70 <scalbn+0xd8>)
 800ff08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff0c:	f7f0 fb8c 	bl	8000628 <__aeabi_dmul>
 800ff10:	e7e6      	b.n	800fee0 <scalbn+0x48>
 800ff12:	1872      	adds	r2, r6, r1
 800ff14:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800ff18:	428a      	cmp	r2, r1
 800ff1a:	dcec      	bgt.n	800fef6 <scalbn+0x5e>
 800ff1c:	2a00      	cmp	r2, #0
 800ff1e:	dd08      	ble.n	800ff32 <scalbn+0x9a>
 800ff20:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ff24:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800ff28:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ff2c:	ec45 4b10 	vmov	d0, r4, r5
 800ff30:	bd70      	pop	{r4, r5, r6, pc}
 800ff32:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800ff36:	da08      	bge.n	800ff4a <scalbn+0xb2>
 800ff38:	2d00      	cmp	r5, #0
 800ff3a:	a10b      	add	r1, pc, #44	@ (adr r1, 800ff68 <scalbn+0xd0>)
 800ff3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff40:	dac1      	bge.n	800fec6 <scalbn+0x2e>
 800ff42:	a10f      	add	r1, pc, #60	@ (adr r1, 800ff80 <scalbn+0xe8>)
 800ff44:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff48:	e7bd      	b.n	800fec6 <scalbn+0x2e>
 800ff4a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ff4e:	3236      	adds	r2, #54	@ 0x36
 800ff50:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800ff54:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ff58:	4620      	mov	r0, r4
 800ff5a:	4b0d      	ldr	r3, [pc, #52]	@ (800ff90 <scalbn+0xf8>)
 800ff5c:	4629      	mov	r1, r5
 800ff5e:	2200      	movs	r2, #0
 800ff60:	e7d4      	b.n	800ff0c <scalbn+0x74>
 800ff62:	bf00      	nop
 800ff64:	f3af 8000 	nop.w
 800ff68:	c2f8f359 	.word	0xc2f8f359
 800ff6c:	01a56e1f 	.word	0x01a56e1f
 800ff70:	8800759c 	.word	0x8800759c
 800ff74:	7e37e43c 	.word	0x7e37e43c
 800ff78:	8800759c 	.word	0x8800759c
 800ff7c:	fe37e43c 	.word	0xfe37e43c
 800ff80:	c2f8f359 	.word	0xc2f8f359
 800ff84:	81a56e1f 	.word	0x81a56e1f
 800ff88:	43500000 	.word	0x43500000
 800ff8c:	ffff3cb0 	.word	0xffff3cb0
 800ff90:	3c900000 	.word	0x3c900000

0800ff94 <with_errno>:
 800ff94:	b510      	push	{r4, lr}
 800ff96:	ed2d 8b02 	vpush	{d8}
 800ff9a:	eeb0 8a40 	vmov.f32	s16, s0
 800ff9e:	eef0 8a60 	vmov.f32	s17, s1
 800ffa2:	4604      	mov	r4, r0
 800ffa4:	f7fd f976 	bl	800d294 <__errno>
 800ffa8:	eeb0 0a48 	vmov.f32	s0, s16
 800ffac:	eef0 0a68 	vmov.f32	s1, s17
 800ffb0:	ecbd 8b02 	vpop	{d8}
 800ffb4:	6004      	str	r4, [r0, #0]
 800ffb6:	bd10      	pop	{r4, pc}

0800ffb8 <xflow>:
 800ffb8:	4603      	mov	r3, r0
 800ffba:	b507      	push	{r0, r1, r2, lr}
 800ffbc:	ec51 0b10 	vmov	r0, r1, d0
 800ffc0:	b183      	cbz	r3, 800ffe4 <xflow+0x2c>
 800ffc2:	4602      	mov	r2, r0
 800ffc4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ffc8:	e9cd 2300 	strd	r2, r3, [sp]
 800ffcc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ffd0:	f7f0 fb2a 	bl	8000628 <__aeabi_dmul>
 800ffd4:	ec41 0b10 	vmov	d0, r0, r1
 800ffd8:	2022      	movs	r0, #34	@ 0x22
 800ffda:	b003      	add	sp, #12
 800ffdc:	f85d eb04 	ldr.w	lr, [sp], #4
 800ffe0:	f7ff bfd8 	b.w	800ff94 <with_errno>
 800ffe4:	4602      	mov	r2, r0
 800ffe6:	460b      	mov	r3, r1
 800ffe8:	e7ee      	b.n	800ffc8 <xflow+0x10>
 800ffea:	0000      	movs	r0, r0
 800ffec:	0000      	movs	r0, r0
	...

0800fff0 <__math_uflow>:
 800fff0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800fff8 <__math_uflow+0x8>
 800fff4:	f7ff bfe0 	b.w	800ffb8 <xflow>
 800fff8:	00000000 	.word	0x00000000
 800fffc:	10000000 	.word	0x10000000

08010000 <__math_oflow>:
 8010000:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010008 <__math_oflow+0x8>
 8010004:	f7ff bfd8 	b.w	800ffb8 <xflow>
 8010008:	00000000 	.word	0x00000000
 801000c:	70000000 	.word	0x70000000

08010010 <_init>:
 8010010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010012:	bf00      	nop
 8010014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010016:	bc08      	pop	{r3}
 8010018:	469e      	mov	lr, r3
 801001a:	4770      	bx	lr

0801001c <_fini>:
 801001c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801001e:	bf00      	nop
 8010020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010022:	bc08      	pop	{r3}
 8010024:	469e      	mov	lr, r3
 8010026:	4770      	bx	lr
