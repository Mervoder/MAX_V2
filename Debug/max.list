
max.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e790  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  0800e960  0800e960  0000f960  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ede8  0800ede8  00010240  2**0
                  CONTENTS
  4 .ARM          00000008  0800ede8  0800ede8  0000fde8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800edf0  0800edf0  00010240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800edf0  0800edf0  0000fdf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800edf4  0800edf4  0000fdf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000240  20000000  0800edf8  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b78  20000240  0800f038  00010240  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000db8  0800f038  00010db8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010240  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018dc9  00000000  00000000  00010270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037ac  00000000  00000000  00029039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001710  00000000  00000000  0002c7e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001215  00000000  00000000  0002def8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026bf4  00000000  00000000  0002f10d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e3b0  00000000  00000000  00055d01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6fb4  00000000  00000000  000740b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015b065  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000076f8  00000000  00000000  0015b0a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001627a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000240 	.word	0x20000240
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e948 	.word	0x0800e948

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000244 	.word	0x20000244
 800020c:	0800e948 	.word	0x0800e948

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_ldivmod>:
 8000cb8:	b97b      	cbnz	r3, 8000cda <__aeabi_ldivmod+0x22>
 8000cba:	b972      	cbnz	r2, 8000cda <__aeabi_ldivmod+0x22>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bfbe      	ittt	lt
 8000cc0:	2000      	movlt	r0, #0
 8000cc2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000cc6:	e006      	blt.n	8000cd6 <__aeabi_ldivmod+0x1e>
 8000cc8:	bf08      	it	eq
 8000cca:	2800      	cmpeq	r0, #0
 8000ccc:	bf1c      	itt	ne
 8000cce:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000cd2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd6:	f000 b9eb 	b.w	80010b0 <__aeabi_idiv0>
 8000cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	db09      	blt.n	8000cfa <__aeabi_ldivmod+0x42>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db1a      	blt.n	8000d20 <__aeabi_ldivmod+0x68>
 8000cea:	f000 f883 	bl	8000df4 <__udivmoddi4>
 8000cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf6:	b004      	add	sp, #16
 8000cf8:	4770      	bx	lr
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db1b      	blt.n	8000d3c <__aeabi_ldivmod+0x84>
 8000d04:	f000 f876 	bl	8000df4 <__udivmoddi4>
 8000d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d10:	b004      	add	sp, #16
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	4252      	negs	r2, r2
 8000d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f865 	bl	8000df4 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4240      	negs	r0, r0
 8000d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3a:	4770      	bx	lr
 8000d3c:	4252      	negs	r2, r2
 8000d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d42:	f000 f857 	bl	8000df4 <__udivmoddi4>
 8000d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d4e:	b004      	add	sp, #16
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_uldivmod>:
 8000d58:	b953      	cbnz	r3, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5a:	b94a      	cbnz	r2, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5c:	2900      	cmp	r1, #0
 8000d5e:	bf08      	it	eq
 8000d60:	2800      	cmpeq	r0, #0
 8000d62:	bf1c      	itt	ne
 8000d64:	f04f 31ff 	movne.w	r1, #4294967295
 8000d68:	f04f 30ff 	movne.w	r0, #4294967295
 8000d6c:	f000 b9a0 	b.w	80010b0 <__aeabi_idiv0>
 8000d70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d78:	f000 f83c 	bl	8000df4 <__udivmoddi4>
 8000d7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d84:	b004      	add	sp, #16
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_d2lz>:
 8000d88:	b538      	push	{r3, r4, r5, lr}
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	4604      	mov	r4, r0
 8000d90:	460d      	mov	r5, r1
 8000d92:	f7ff febb 	bl	8000b0c <__aeabi_dcmplt>
 8000d96:	b928      	cbnz	r0, 8000da4 <__aeabi_d2lz+0x1c>
 8000d98:	4620      	mov	r0, r4
 8000d9a:	4629      	mov	r1, r5
 8000d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000da0:	f000 b80a 	b.w	8000db8 <__aeabi_d2ulz>
 8000da4:	4620      	mov	r0, r4
 8000da6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000daa:	f000 f805 	bl	8000db8 <__aeabi_d2ulz>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	bd38      	pop	{r3, r4, r5, pc}
 8000db6:	bf00      	nop

08000db8 <__aeabi_d2ulz>:
 8000db8:	b5d0      	push	{r4, r6, r7, lr}
 8000dba:	4b0c      	ldr	r3, [pc, #48]	@ (8000dec <__aeabi_d2ulz+0x34>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	4606      	mov	r6, r0
 8000dc0:	460f      	mov	r7, r1
 8000dc2:	f7ff fc31 	bl	8000628 <__aeabi_dmul>
 8000dc6:	f7ff ff07 	bl	8000bd8 <__aeabi_d2uiz>
 8000dca:	4604      	mov	r4, r0
 8000dcc:	f7ff fbb2 	bl	8000534 <__aeabi_ui2d>
 8000dd0:	4b07      	ldr	r3, [pc, #28]	@ (8000df0 <__aeabi_d2ulz+0x38>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f7ff fc28 	bl	8000628 <__aeabi_dmul>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4630      	mov	r0, r6
 8000dde:	4639      	mov	r1, r7
 8000de0:	f7ff fa6a 	bl	80002b8 <__aeabi_dsub>
 8000de4:	f7ff fef8 	bl	8000bd8 <__aeabi_d2uiz>
 8000de8:	4621      	mov	r1, r4
 8000dea:	bdd0      	pop	{r4, r6, r7, pc}
 8000dec:	3df00000 	.word	0x3df00000
 8000df0:	41f00000 	.word	0x41f00000

08000df4 <__udivmoddi4>:
 8000df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df8:	9d08      	ldr	r5, [sp, #32]
 8000dfa:	460c      	mov	r4, r1
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d14e      	bne.n	8000e9e <__udivmoddi4+0xaa>
 8000e00:	4694      	mov	ip, r2
 8000e02:	458c      	cmp	ip, r1
 8000e04:	4686      	mov	lr, r0
 8000e06:	fab2 f282 	clz	r2, r2
 8000e0a:	d962      	bls.n	8000ed2 <__udivmoddi4+0xde>
 8000e0c:	b14a      	cbz	r2, 8000e22 <__udivmoddi4+0x2e>
 8000e0e:	f1c2 0320 	rsb	r3, r2, #32
 8000e12:	4091      	lsls	r1, r2
 8000e14:	fa20 f303 	lsr.w	r3, r0, r3
 8000e18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1c:	4319      	orrs	r1, r3
 8000e1e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e26:	fa1f f68c 	uxth.w	r6, ip
 8000e2a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e2e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e32:	fb07 1114 	mls	r1, r7, r4, r1
 8000e36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e3a:	fb04 f106 	mul.w	r1, r4, r6
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d90a      	bls.n	8000e58 <__udivmoddi4+0x64>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e4a:	f080 8112 	bcs.w	8001072 <__udivmoddi4+0x27e>
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	f240 810f 	bls.w	8001072 <__udivmoddi4+0x27e>
 8000e54:	3c02      	subs	r4, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1a59      	subs	r1, r3, r1
 8000e5a:	fa1f f38e 	uxth.w	r3, lr
 8000e5e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e62:	fb07 1110 	mls	r1, r7, r0, r1
 8000e66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e6a:	fb00 f606 	mul.w	r6, r0, r6
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	d90a      	bls.n	8000e88 <__udivmoddi4+0x94>
 8000e72:	eb1c 0303 	adds.w	r3, ip, r3
 8000e76:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e7a:	f080 80fc 	bcs.w	8001076 <__udivmoddi4+0x282>
 8000e7e:	429e      	cmp	r6, r3
 8000e80:	f240 80f9 	bls.w	8001076 <__udivmoddi4+0x282>
 8000e84:	4463      	add	r3, ip
 8000e86:	3802      	subs	r0, #2
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e8e:	2100      	movs	r1, #0
 8000e90:	b11d      	cbz	r5, 8000e9a <__udivmoddi4+0xa6>
 8000e92:	40d3      	lsrs	r3, r2
 8000e94:	2200      	movs	r2, #0
 8000e96:	e9c5 3200 	strd	r3, r2, [r5]
 8000e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9e:	428b      	cmp	r3, r1
 8000ea0:	d905      	bls.n	8000eae <__udivmoddi4+0xba>
 8000ea2:	b10d      	cbz	r5, 8000ea8 <__udivmoddi4+0xb4>
 8000ea4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e7f5      	b.n	8000e9a <__udivmoddi4+0xa6>
 8000eae:	fab3 f183 	clz	r1, r3
 8000eb2:	2900      	cmp	r1, #0
 8000eb4:	d146      	bne.n	8000f44 <__udivmoddi4+0x150>
 8000eb6:	42a3      	cmp	r3, r4
 8000eb8:	d302      	bcc.n	8000ec0 <__udivmoddi4+0xcc>
 8000eba:	4290      	cmp	r0, r2
 8000ebc:	f0c0 80f0 	bcc.w	80010a0 <__udivmoddi4+0x2ac>
 8000ec0:	1a86      	subs	r6, r0, r2
 8000ec2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ec6:	2001      	movs	r0, #1
 8000ec8:	2d00      	cmp	r5, #0
 8000eca:	d0e6      	beq.n	8000e9a <__udivmoddi4+0xa6>
 8000ecc:	e9c5 6300 	strd	r6, r3, [r5]
 8000ed0:	e7e3      	b.n	8000e9a <__udivmoddi4+0xa6>
 8000ed2:	2a00      	cmp	r2, #0
 8000ed4:	f040 8090 	bne.w	8000ff8 <__udivmoddi4+0x204>
 8000ed8:	eba1 040c 	sub.w	r4, r1, ip
 8000edc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee0:	fa1f f78c 	uxth.w	r7, ip
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000eea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000eee:	fb08 4416 	mls	r4, r8, r6, r4
 8000ef2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ef6:	fb07 f006 	mul.w	r0, r7, r6
 8000efa:	4298      	cmp	r0, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x11c>
 8000efe:	eb1c 0303 	adds.w	r3, ip, r3
 8000f02:	f106 34ff 	add.w	r4, r6, #4294967295
 8000f06:	d202      	bcs.n	8000f0e <__udivmoddi4+0x11a>
 8000f08:	4298      	cmp	r0, r3
 8000f0a:	f200 80cd 	bhi.w	80010a8 <__udivmoddi4+0x2b4>
 8000f0e:	4626      	mov	r6, r4
 8000f10:	1a1c      	subs	r4, r3, r0
 8000f12:	fa1f f38e 	uxth.w	r3, lr
 8000f16:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f1a:	fb08 4410 	mls	r4, r8, r0, r4
 8000f1e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f22:	fb00 f707 	mul.w	r7, r0, r7
 8000f26:	429f      	cmp	r7, r3
 8000f28:	d908      	bls.n	8000f3c <__udivmoddi4+0x148>
 8000f2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f2e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f32:	d202      	bcs.n	8000f3a <__udivmoddi4+0x146>
 8000f34:	429f      	cmp	r7, r3
 8000f36:	f200 80b0 	bhi.w	800109a <__udivmoddi4+0x2a6>
 8000f3a:	4620      	mov	r0, r4
 8000f3c:	1bdb      	subs	r3, r3, r7
 8000f3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f42:	e7a5      	b.n	8000e90 <__udivmoddi4+0x9c>
 8000f44:	f1c1 0620 	rsb	r6, r1, #32
 8000f48:	408b      	lsls	r3, r1
 8000f4a:	fa22 f706 	lsr.w	r7, r2, r6
 8000f4e:	431f      	orrs	r7, r3
 8000f50:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f54:	fa04 f301 	lsl.w	r3, r4, r1
 8000f58:	ea43 030c 	orr.w	r3, r3, ip
 8000f5c:	40f4      	lsrs	r4, r6
 8000f5e:	fa00 f801 	lsl.w	r8, r0, r1
 8000f62:	0c38      	lsrs	r0, r7, #16
 8000f64:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f68:	fbb4 fef0 	udiv	lr, r4, r0
 8000f6c:	fa1f fc87 	uxth.w	ip, r7
 8000f70:	fb00 441e 	mls	r4, r0, lr, r4
 8000f74:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f78:	fb0e f90c 	mul.w	r9, lr, ip
 8000f7c:	45a1      	cmp	r9, r4
 8000f7e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f82:	d90a      	bls.n	8000f9a <__udivmoddi4+0x1a6>
 8000f84:	193c      	adds	r4, r7, r4
 8000f86:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f8a:	f080 8084 	bcs.w	8001096 <__udivmoddi4+0x2a2>
 8000f8e:	45a1      	cmp	r9, r4
 8000f90:	f240 8081 	bls.w	8001096 <__udivmoddi4+0x2a2>
 8000f94:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f98:	443c      	add	r4, r7
 8000f9a:	eba4 0409 	sub.w	r4, r4, r9
 8000f9e:	fa1f f983 	uxth.w	r9, r3
 8000fa2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000fa6:	fb00 4413 	mls	r4, r0, r3, r4
 8000faa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fae:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fb2:	45a4      	cmp	ip, r4
 8000fb4:	d907      	bls.n	8000fc6 <__udivmoddi4+0x1d2>
 8000fb6:	193c      	adds	r4, r7, r4
 8000fb8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000fbc:	d267      	bcs.n	800108e <__udivmoddi4+0x29a>
 8000fbe:	45a4      	cmp	ip, r4
 8000fc0:	d965      	bls.n	800108e <__udivmoddi4+0x29a>
 8000fc2:	3b02      	subs	r3, #2
 8000fc4:	443c      	add	r4, r7
 8000fc6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000fca:	fba0 9302 	umull	r9, r3, r0, r2
 8000fce:	eba4 040c 	sub.w	r4, r4, ip
 8000fd2:	429c      	cmp	r4, r3
 8000fd4:	46ce      	mov	lr, r9
 8000fd6:	469c      	mov	ip, r3
 8000fd8:	d351      	bcc.n	800107e <__udivmoddi4+0x28a>
 8000fda:	d04e      	beq.n	800107a <__udivmoddi4+0x286>
 8000fdc:	b155      	cbz	r5, 8000ff4 <__udivmoddi4+0x200>
 8000fde:	ebb8 030e 	subs.w	r3, r8, lr
 8000fe2:	eb64 040c 	sbc.w	r4, r4, ip
 8000fe6:	fa04 f606 	lsl.w	r6, r4, r6
 8000fea:	40cb      	lsrs	r3, r1
 8000fec:	431e      	orrs	r6, r3
 8000fee:	40cc      	lsrs	r4, r1
 8000ff0:	e9c5 6400 	strd	r6, r4, [r5]
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	e750      	b.n	8000e9a <__udivmoddi4+0xa6>
 8000ff8:	f1c2 0320 	rsb	r3, r2, #32
 8000ffc:	fa20 f103 	lsr.w	r1, r0, r3
 8001000:	fa0c fc02 	lsl.w	ip, ip, r2
 8001004:	fa24 f303 	lsr.w	r3, r4, r3
 8001008:	4094      	lsls	r4, r2
 800100a:	430c      	orrs	r4, r1
 800100c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001010:	fa00 fe02 	lsl.w	lr, r0, r2
 8001014:	fa1f f78c 	uxth.w	r7, ip
 8001018:	fbb3 f0f8 	udiv	r0, r3, r8
 800101c:	fb08 3110 	mls	r1, r8, r0, r3
 8001020:	0c23      	lsrs	r3, r4, #16
 8001022:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001026:	fb00 f107 	mul.w	r1, r0, r7
 800102a:	4299      	cmp	r1, r3
 800102c:	d908      	bls.n	8001040 <__udivmoddi4+0x24c>
 800102e:	eb1c 0303 	adds.w	r3, ip, r3
 8001032:	f100 36ff 	add.w	r6, r0, #4294967295
 8001036:	d22c      	bcs.n	8001092 <__udivmoddi4+0x29e>
 8001038:	4299      	cmp	r1, r3
 800103a:	d92a      	bls.n	8001092 <__udivmoddi4+0x29e>
 800103c:	3802      	subs	r0, #2
 800103e:	4463      	add	r3, ip
 8001040:	1a5b      	subs	r3, r3, r1
 8001042:	b2a4      	uxth	r4, r4
 8001044:	fbb3 f1f8 	udiv	r1, r3, r8
 8001048:	fb08 3311 	mls	r3, r8, r1, r3
 800104c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001050:	fb01 f307 	mul.w	r3, r1, r7
 8001054:	42a3      	cmp	r3, r4
 8001056:	d908      	bls.n	800106a <__udivmoddi4+0x276>
 8001058:	eb1c 0404 	adds.w	r4, ip, r4
 800105c:	f101 36ff 	add.w	r6, r1, #4294967295
 8001060:	d213      	bcs.n	800108a <__udivmoddi4+0x296>
 8001062:	42a3      	cmp	r3, r4
 8001064:	d911      	bls.n	800108a <__udivmoddi4+0x296>
 8001066:	3902      	subs	r1, #2
 8001068:	4464      	add	r4, ip
 800106a:	1ae4      	subs	r4, r4, r3
 800106c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001070:	e739      	b.n	8000ee6 <__udivmoddi4+0xf2>
 8001072:	4604      	mov	r4, r0
 8001074:	e6f0      	b.n	8000e58 <__udivmoddi4+0x64>
 8001076:	4608      	mov	r0, r1
 8001078:	e706      	b.n	8000e88 <__udivmoddi4+0x94>
 800107a:	45c8      	cmp	r8, r9
 800107c:	d2ae      	bcs.n	8000fdc <__udivmoddi4+0x1e8>
 800107e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001082:	eb63 0c07 	sbc.w	ip, r3, r7
 8001086:	3801      	subs	r0, #1
 8001088:	e7a8      	b.n	8000fdc <__udivmoddi4+0x1e8>
 800108a:	4631      	mov	r1, r6
 800108c:	e7ed      	b.n	800106a <__udivmoddi4+0x276>
 800108e:	4603      	mov	r3, r0
 8001090:	e799      	b.n	8000fc6 <__udivmoddi4+0x1d2>
 8001092:	4630      	mov	r0, r6
 8001094:	e7d4      	b.n	8001040 <__udivmoddi4+0x24c>
 8001096:	46d6      	mov	lr, sl
 8001098:	e77f      	b.n	8000f9a <__udivmoddi4+0x1a6>
 800109a:	4463      	add	r3, ip
 800109c:	3802      	subs	r0, #2
 800109e:	e74d      	b.n	8000f3c <__udivmoddi4+0x148>
 80010a0:	4606      	mov	r6, r0
 80010a2:	4623      	mov	r3, r4
 80010a4:	4608      	mov	r0, r1
 80010a6:	e70f      	b.n	8000ec8 <__udivmoddi4+0xd4>
 80010a8:	3e02      	subs	r6, #2
 80010aa:	4463      	add	r3, ip
 80010ac:	e730      	b.n	8000f10 <__udivmoddi4+0x11c>
 80010ae:	bf00      	nop

080010b0 <__aeabi_idiv0>:
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop

080010b4 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	/* chip id read try count */
	uint8_t try_count = 5;
 80010bc:	2305      	movs	r3, #5
 80010be:	73bb      	strb	r3, [r7, #14]
	uint8_t chip_id = 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f001 facb 	bl	8002660 <null_ptr_check>
 80010ca:	4603      	mov	r3, r0
 80010cc:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt ==  BME280_OK) {
 80010ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d133      	bne.n	800113e <bme280_init+0x8a>
		while (try_count) {
 80010d6:	e028      	b.n	800112a <bme280_init+0x76>
			/* Read the chip-id of bme280 sensor */
			rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 80010d8:	f107 010d 	add.w	r1, r7, #13
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2201      	movs	r2, #1
 80010e0:	20d0      	movs	r0, #208	@ 0xd0
 80010e2:	f000 f832 	bl	800114a <bme280_get_regs>
 80010e6:	4603      	mov	r3, r0
 80010e8:	73fb      	strb	r3, [r7, #15]
			/* Check for chip id validity */
			if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID)) {
 80010ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d114      	bne.n	800111c <bme280_init+0x68>
 80010f2:	7b7b      	ldrb	r3, [r7, #13]
 80010f4:	2b60      	cmp	r3, #96	@ 0x60
 80010f6:	d111      	bne.n	800111c <bme280_init+0x68>
				dev->chip_id = chip_id;
 80010f8:	7b7a      	ldrb	r2, [r7, #13]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	701a      	strb	r2, [r3, #0]
				/* Reset the sensor */
				rslt = bme280_soft_reset(dev);
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f000 f978 	bl	80013f4 <bme280_soft_reset>
 8001104:	4603      	mov	r3, r0
 8001106:	73fb      	strb	r3, [r7, #15]
				if (rslt == BME280_OK) {
 8001108:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d110      	bne.n	8001132 <bme280_init+0x7e>
					/* Read the calibration data */
					rslt = get_calib_data(dev);
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f001 f919 	bl	8002348 <get_calib_data>
 8001116:	4603      	mov	r3, r0
 8001118:	73fb      	strb	r3, [r7, #15]
				}
				break;
 800111a:	e00a      	b.n	8001132 <bme280_init+0x7e>
			}
			/* Wait for 1 ms */
			dev->delay_ms(1);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	2001      	movs	r0, #1
 8001122:	4798      	blx	r3
			--try_count;
 8001124:	7bbb      	ldrb	r3, [r7, #14]
 8001126:	3b01      	subs	r3, #1
 8001128:	73bb      	strb	r3, [r7, #14]
		while (try_count) {
 800112a:	7bbb      	ldrb	r3, [r7, #14]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d1d3      	bne.n	80010d8 <bme280_init+0x24>
 8001130:	e000      	b.n	8001134 <bme280_init+0x80>
				break;
 8001132:	bf00      	nop
		}
		/* Chip id check failed */
		if (!try_count)
 8001134:	7bbb      	ldrb	r3, [r7, #14]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d101      	bne.n	800113e <bme280_init+0x8a>
			rslt = BME280_E_DEV_NOT_FOUND;
 800113a:	23fe      	movs	r3, #254	@ 0xfe
 800113c:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 800113e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001142:	4618      	mov	r0, r3
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 800114a:	b590      	push	{r4, r7, lr}
 800114c:	b087      	sub	sp, #28
 800114e:	af00      	add	r7, sp, #0
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607b      	str	r3, [r7, #4]
 8001154:	4603      	mov	r3, r0
 8001156:	73fb      	strb	r3, [r7, #15]
 8001158:	4613      	mov	r3, r2
 800115a:	81bb      	strh	r3, [r7, #12]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f001 fa7f 	bl	8002660 <null_ptr_check>
 8001162:	4603      	mov	r3, r0
 8001164:	75fb      	strb	r3, [r7, #23]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8001166:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d117      	bne.n	800119e <bme280_get_regs+0x54>
		/* If interface selected is SPI */
		if (dev->intf != BME280_I2C_INTF)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	789b      	ldrb	r3, [r3, #2]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d003      	beq.n	800117e <bme280_get_regs+0x34>
			reg_addr = reg_addr | 0x80;
 8001176:	7bfb      	ldrb	r3, [r7, #15]
 8001178:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800117c:	73fb      	strb	r3, [r7, #15]
		/* Read the data  */
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	685c      	ldr	r4, [r3, #4]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	7858      	ldrb	r0, [r3, #1]
 8001186:	89bb      	ldrh	r3, [r7, #12]
 8001188:	7bf9      	ldrb	r1, [r7, #15]
 800118a:	68ba      	ldr	r2, [r7, #8]
 800118c:	47a0      	blx	r4
 800118e:	4603      	mov	r3, r0
 8001190:	75fb      	strb	r3, [r7, #23]
		/* Check for communication error */
		if (rslt != BME280_OK)
 8001192:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <bme280_get_regs+0x54>
			rslt = BME280_E_COMM_FAIL;
 800119a:	23fc      	movs	r3, #252	@ 0xfc
 800119c:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800119e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	371c      	adds	r7, #28
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd90      	pop	{r4, r7, pc}

080011aa <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 80011aa:	b590      	push	{r4, r7, lr}
 80011ac:	b08d      	sub	sp, #52	@ 0x34
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	60f8      	str	r0, [r7, #12]
 80011b2:	60b9      	str	r1, [r7, #8]
 80011b4:	603b      	str	r3, [r7, #0]
 80011b6:	4613      	mov	r3, r2
 80011b8:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

	if (len > 10)
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	2b0a      	cmp	r3, #10
 80011be:	d901      	bls.n	80011c4 <bme280_set_regs+0x1a>
		len = 10;
 80011c0:	230a      	movs	r3, #10
 80011c2:	71fb      	strb	r3, [r7, #7]

	uint16_t temp_len;
	uint8_t reg_addr_cnt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80011c4:	6838      	ldr	r0, [r7, #0]
 80011c6:	f001 fa4b 	bl	8002660 <null_ptr_check>
 80011ca:	4603      	mov	r3, r0
 80011cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	/* Check for arguments validity */
	if ((rslt ==  BME280_OK) && (reg_addr != NULL) && (reg_data != NULL)) {
 80011d0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d156      	bne.n	8001286 <bme280_set_regs+0xdc>
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d053      	beq.n	8001286 <bme280_set_regs+0xdc>
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d050      	beq.n	8001286 <bme280_set_regs+0xdc>
		if (len != 0) {
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d049      	beq.n	800127e <bme280_set_regs+0xd4>
			temp_buff[0] = reg_data[0];
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	753b      	strb	r3, [r7, #20]
			/* If interface selected is SPI */
			if (dev->intf != BME280_I2C_INTF) {
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	789b      	ldrb	r3, [r3, #2]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d01a      	beq.n	800122e <bme280_set_regs+0x84>
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80011f8:	2300      	movs	r3, #0
 80011fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80011fe:	e011      	b.n	8001224 <bme280_set_regs+0x7a>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8001200:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001204:	68fa      	ldr	r2, [r7, #12]
 8001206:	4413      	add	r3, r2
 8001208:	781a      	ldrb	r2, [r3, #0]
 800120a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800120e:	68f9      	ldr	r1, [r7, #12]
 8001210:	440b      	add	r3, r1
 8001212:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001216:	b2d2      	uxtb	r2, r2
 8001218:	701a      	strb	r2, [r3, #0]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800121a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800121e:	3301      	adds	r3, #1
 8001220:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001224:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	429a      	cmp	r2, r3
 800122c:	d3e8      	bcc.n	8001200 <bme280_set_regs+0x56>
			}
			/* Burst write mode */
			if (len > 1) {
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d90d      	bls.n	8001250 <bme280_set_regs+0xa6>
				/* Interleave register address w.r.t data for
				burst write*/
				interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	f107 0114 	add.w	r1, r7, #20
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	68f8      	ldr	r0, [r7, #12]
 800123e:	f001 f8c8 	bl	80023d2 <interleave_reg_addr>
				temp_len = ((len * 2) - 1);
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	b29b      	uxth	r3, r3
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	b29b      	uxth	r3, r3
 800124a:	3b01      	subs	r3, #1
 800124c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800124e:	e001      	b.n	8001254 <bme280_set_regs+0xaa>
			} else {
				temp_len = len;
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	85bb      	strh	r3, [r7, #44]	@ 0x2c
			}
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	689c      	ldr	r4, [r3, #8]
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	7858      	ldrb	r0, [r3, #1]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	7819      	ldrb	r1, [r3, #0]
 8001260:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001262:	f107 0214 	add.w	r2, r7, #20
 8001266:	47a0      	blx	r4
 8001268:	4603      	mov	r3, r0
 800126a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			/* Check for communication error */
			if (rslt != BME280_OK)
 800126e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8001272:	2b00      	cmp	r3, #0
 8001274:	d00b      	beq.n	800128e <bme280_set_regs+0xe4>
				rslt = BME280_E_COMM_FAIL;
 8001276:	23fc      	movs	r3, #252	@ 0xfc
 8001278:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (len != 0) {
 800127c:	e007      	b.n	800128e <bme280_set_regs+0xe4>
		} else {
			rslt = BME280_E_INVALID_LEN;
 800127e:	23fd      	movs	r3, #253	@ 0xfd
 8001280:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (len != 0) {
 8001284:	e003      	b.n	800128e <bme280_set_regs+0xe4>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8001286:	23ff      	movs	r3, #255	@ 0xff
 8001288:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800128c:	e000      	b.n	8001290 <bme280_set_regs+0xe6>
		if (len != 0) {
 800128e:	bf00      	nop
	}


	return rslt;
 8001290:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8001294:	4618      	mov	r0, r3
 8001296:	3734      	adds	r7, #52	@ 0x34
 8001298:	46bd      	mov	sp, r7
 800129a:	bd90      	pop	{r4, r7, pc}

0800129c <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	6039      	str	r1, [r7, #0]
 80012a6:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t sensor_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80012a8:	6838      	ldr	r0, [r7, #0]
 80012aa:	f001 f9d9 	bl	8002660 <null_ptr_check>
 80012ae:	4603      	mov	r3, r0
 80012b0:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 80012b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d13f      	bne.n	800133a <bme280_set_sensor_settings+0x9e>
		rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 80012ba:	f107 030e 	add.w	r3, r7, #14
 80012be:	6839      	ldr	r1, [r7, #0]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f000 f874 	bl	80013ae <bme280_get_sensor_mode>
 80012c6:	4603      	mov	r3, r0
 80012c8:	73fb      	strb	r3, [r7, #15]
		if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 80012ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d107      	bne.n	80012e2 <bme280_set_sensor_settings+0x46>
 80012d2:	7bbb      	ldrb	r3, [r7, #14]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d004      	beq.n	80012e2 <bme280_set_sensor_settings+0x46>
			rslt = put_device_to_sleep(dev);
 80012d8:	6838      	ldr	r0, [r7, #0]
 80012da:	f000 fb36 	bl	800194a <put_device_to_sleep>
 80012de:	4603      	mov	r3, r0
 80012e0:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK) {
 80012e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d127      	bne.n	800133a <bme280_set_sensor_settings+0x9e>
			/* Check if user wants to change oversampling
			   settings */
			if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	4619      	mov	r1, r3
 80012ee:	2007      	movs	r0, #7
 80012f0:	f001 f99a 	bl	8002628 <are_settings_changed>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d009      	beq.n	800130e <bme280_set_sensor_settings+0x72>
				rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	683a      	ldr	r2, [r7, #0]
 8001304:	4618      	mov	r0, r3
 8001306:	f000 f972 	bl	80015ee <set_osr_settings>
 800130a:	4603      	mov	r3, r0
 800130c:	73fb      	strb	r3, [r7, #15]
			/* Check if user wants to change filter and/or
			   standby settings */
			if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 800130e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d111      	bne.n	800133a <bme280_set_sensor_settings+0x9e>
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	4619      	mov	r1, r3
 800131a:	2018      	movs	r0, #24
 800131c:	f001 f984 	bl	8002628 <are_settings_changed>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d009      	beq.n	800133a <bme280_set_sensor_settings+0x9e>
				rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	683a      	ldr	r2, [r7, #0]
 8001330:	4618      	mov	r0, r3
 8001332:	f000 f9f9 	bl	8001728 <set_filter_standby_settings>
 8001336:	4603      	mov	r3, r0
 8001338:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
 800133a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800133e:	4618      	mov	r0, r3
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b084      	sub	sp, #16
 800134a:	af00      	add	r7, sp, #0
 800134c:	4603      	mov	r3, r0
 800134e:	6039      	str	r1, [r7, #0]
 8001350:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t last_set_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001352:	6838      	ldr	r0, [r7, #0]
 8001354:	f001 f984 	bl	8002660 <null_ptr_check>
 8001358:	4603      	mov	r3, r0
 800135a:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 800135c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d11e      	bne.n	80013a2 <bme280_set_sensor_mode+0x5c>
		rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 8001364:	f107 030e 	add.w	r3, r7, #14
 8001368:	6839      	ldr	r1, [r7, #0]
 800136a:	4618      	mov	r0, r3
 800136c:	f000 f81f 	bl	80013ae <bme280_get_sensor_mode>
 8001370:	4603      	mov	r3, r0
 8001372:	73fb      	strb	r3, [r7, #15]
		/* If the sensor is not in sleep mode put the device to sleep
		   mode */
		if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 8001374:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d107      	bne.n	800138c <bme280_set_sensor_mode+0x46>
 800137c:	7bbb      	ldrb	r3, [r7, #14]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d004      	beq.n	800138c <bme280_set_sensor_mode+0x46>
			rslt = put_device_to_sleep(dev);
 8001382:	6838      	ldr	r0, [r7, #0]
 8001384:	f000 fae1 	bl	800194a <put_device_to_sleep>
 8001388:	4603      	mov	r3, r0
 800138a:	73fb      	strb	r3, [r7, #15]
		/* Set the power mode */
		if (rslt == BME280_OK)
 800138c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d106      	bne.n	80013a2 <bme280_set_sensor_mode+0x5c>
			rslt = write_power_mode(sensor_mode, dev);
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	6839      	ldr	r1, [r7, #0]
 8001398:	4618      	mov	r0, r3
 800139a:	f000 faa3 	bl	80018e4 <write_power_mode>
 800139e:	4603      	mov	r3, r0
 80013a0:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80013a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b084      	sub	sp, #16
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
 80013b6:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80013b8:	6838      	ldr	r0, [r7, #0]
 80013ba:	f001 f951 	bl	8002660 <null_ptr_check>
 80013be:	4603      	mov	r3, r0
 80013c0:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 80013c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d10e      	bne.n	80013e8 <bme280_get_sensor_mode+0x3a>
		/* Read the power mode register */
		rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	2201      	movs	r2, #1
 80013ce:	6879      	ldr	r1, [r7, #4]
 80013d0:	20f4      	movs	r0, #244	@ 0xf4
 80013d2:	f7ff feba 	bl	800114a <bme280_get_regs>
 80013d6:	4603      	mov	r3, r0
 80013d8:	73fb      	strb	r3, [r7, #15]
		/* Assign the power mode in the device structure */
		*sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	f003 0303 	and.w	r3, r3, #3
 80013e2:	b2da      	uxtb	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
 80013e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3710      	adds	r7, #16
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_RESET_ADDR;
 80013fc:	23e0      	movs	r3, #224	@ 0xe0
 80013fe:	73bb      	strb	r3, [r7, #14]
	/* 0xB6 is the soft reset command */
	uint8_t soft_rst_cmd = 0xB6;
 8001400:	23b6      	movs	r3, #182	@ 0xb6
 8001402:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f001 f92b 	bl	8002660 <null_ptr_check>
 800140a:	4603      	mov	r3, r0
 800140c:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 800140e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d10d      	bne.n	8001432 <bme280_soft_reset+0x3e>
		/* Write the soft reset command in the sensor */
		rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001416:	f107 010d 	add.w	r1, r7, #13
 800141a:	f107 000e 	add.w	r0, r7, #14
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2201      	movs	r2, #1
 8001422:	f7ff fec2 	bl	80011aa <bme280_set_regs>
 8001426:	4603      	mov	r3, r0
 8001428:	73fb      	strb	r3, [r7, #15]
		/* As per data sheet, startup time is 2 ms. */
		dev->delay_ms(2);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	68db      	ldr	r3, [r3, #12]
 800142e:	2002      	movs	r0, #2
 8001430:	4798      	blx	r3
	}

	return rslt;
 8001432:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001436:	4618      	mov	r0, r3
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b08a      	sub	sp, #40	@ 0x28
 8001442:	af00      	add	r7, sp, #0
 8001444:	4603      	mov	r3, r0
 8001446:	60b9      	str	r1, [r7, #8]
 8001448:	607a      	str	r2, [r7, #4]
 800144a:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	/* Array to store the pressure, temperature and humidity data read from
	the sensor */
	uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
 800144c:	2300      	movs	r3, #0
 800144e:	61fb      	str	r3, [r7, #28]
 8001450:	2300      	movs	r3, #0
 8001452:	623b      	str	r3, [r7, #32]
	struct bme280_uncomp_data uncomp_data = {0};
 8001454:	f107 0310 	add.w	r3, r7, #16
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f001 f8fd 	bl	8002660 <null_ptr_check>
 8001466:	4603      	mov	r3, r0
 8001468:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if ((rslt == BME280_OK) && (comp_data != NULL)) {
 800146c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001470:	2b00      	cmp	r3, #0
 8001472:	d124      	bne.n	80014be <bme280_get_sensor_data+0x80>
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d021      	beq.n	80014be <bme280_get_sensor_data+0x80>
		/* Read the pressure and temperature data from the sensor */
		rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 800147a:	f107 011c 	add.w	r1, r7, #28
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2208      	movs	r2, #8
 8001482:	20f7      	movs	r0, #247	@ 0xf7
 8001484:	f7ff fe61 	bl	800114a <bme280_get_regs>
 8001488:	4603      	mov	r3, r0
 800148a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		if (rslt == BME280_OK) {
 800148e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001492:	2b00      	cmp	r3, #0
 8001494:	d116      	bne.n	80014c4 <bme280_get_sensor_data+0x86>
			/* Parse the read data from the sensor */
			bme280_parse_sensor_data(reg_data, &uncomp_data);
 8001496:	f107 0210 	add.w	r2, r7, #16
 800149a:	f107 031c 	add.w	r3, r7, #28
 800149e:	4611      	mov	r1, r2
 80014a0:	4618      	mov	r0, r3
 80014a2:	f000 f815 	bl	80014d0 <bme280_parse_sensor_data>
			/* Compensate the pressure and/or temperature and/or
			   humidity data from the sensor */
			rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	3310      	adds	r3, #16
 80014aa:	f107 0110 	add.w	r1, r7, #16
 80014ae:	7bf8      	ldrb	r0, [r7, #15]
 80014b0:	68ba      	ldr	r2, [r7, #8]
 80014b2:	f000 f853 	bl	800155c <bme280_compensate_data>
 80014b6:	4603      	mov	r3, r0
 80014b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (rslt == BME280_OK) {
 80014bc:	e002      	b.n	80014c4 <bme280_get_sensor_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 80014be:	23ff      	movs	r3, #255	@ 0xff
 80014c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	return rslt;
 80014c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3728      	adds	r7, #40	@ 0x28
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b087      	sub	sp, #28
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
	uint32_t data_xlsb;
	uint32_t data_lsb;
	uint32_t data_msb;

	/* Store the parsed register values for pressure data */
	data_msb = (uint32_t)reg_data[0] << 12;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	031b      	lsls	r3, r3, #12
 80014e0:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[1] << 4;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	3301      	adds	r3, #1
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	011b      	lsls	r3, r3, #4
 80014ea:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[2] >> 4;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3302      	adds	r3, #2
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	091b      	lsrs	r3, r3, #4
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	60fb      	str	r3, [r7, #12]
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 80014f8:	697a      	ldr	r2, [r7, #20]
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	431a      	orrs	r2, r3
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	431a      	orrs	r2, r3
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	601a      	str	r2, [r3, #0]

	/* Store the parsed register values for temperature data */
	data_msb = (uint32_t)reg_data[3] << 12;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	3303      	adds	r3, #3
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	031b      	lsls	r3, r3, #12
 800150e:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[4] << 4;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3304      	adds	r3, #4
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	011b      	lsls	r3, r3, #4
 8001518:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[5] >> 4;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	3305      	adds	r3, #5
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	091b      	lsrs	r3, r3, #4
 8001522:	b2db      	uxtb	r3, r3
 8001524:	60fb      	str	r3, [r7, #12]
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8001526:	697a      	ldr	r2, [r7, #20]
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	431a      	orrs	r2, r3
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	431a      	orrs	r2, r3
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	605a      	str	r2, [r3, #4]

	/* Store the parsed register values for temperature data */
	data_lsb = (uint32_t)reg_data[6] << 8;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3306      	adds	r3, #6
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	021b      	lsls	r3, r3, #8
 800153c:	613b      	str	r3, [r7, #16]
	data_msb = (uint32_t)reg_data[7];
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	3307      	adds	r3, #7
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	617b      	str	r3, [r7, #20]
	uncomp_data->humidity = data_msb | data_lsb;
 8001546:	697a      	ldr	r2, [r7, #20]
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	431a      	orrs	r2, r3
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	609a      	str	r2, [r3, #8]
}
 8001550:	bf00      	nop
 8001552:	371c      	adds	r7, #28
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <bme280_compensate_data>:
 * temperature and/or humidity data according to the component selected
 * by the user.
 */
int8_t bme280_compensate_data(uint8_t sensor_comp, const struct bme280_uncomp_data *uncomp_data,
				     struct bme280_data *comp_data, struct bme280_calib_data *calib_data)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0
 8001562:	60b9      	str	r1, [r7, #8]
 8001564:	607a      	str	r2, [r7, #4]
 8001566:	603b      	str	r3, [r7, #0]
 8001568:	4603      	mov	r3, r0
 800156a:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_OK;
 800156c:	2300      	movs	r3, #0
 800156e:	75fb      	strb	r3, [r7, #23]

	if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL)) {
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d033      	beq.n	80015de <bme280_compensate_data+0x82>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d030      	beq.n	80015de <bme280_compensate_data+0x82>
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d02d      	beq.n	80015de <bme280_compensate_data+0x82>
		/* Initialize to zero */
		comp_data->temperature = 0;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	605a      	str	r2, [r3, #4]
		comp_data->pressure = 0;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
		comp_data->humidity = 0;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
		/* If pressure or temperature component is selected */
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
 8001594:	7bfb      	ldrb	r3, [r7, #15]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	2b00      	cmp	r3, #0
 800159c:	d006      	beq.n	80015ac <bme280_compensate_data+0x50>
			/* Compensate the temperature data */
			comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 800159e:	6839      	ldr	r1, [r7, #0]
 80015a0:	68b8      	ldr	r0, [r7, #8]
 80015a2:	f000 fa1f 	bl	80019e4 <compensate_temperature>
 80015a6:	4602      	mov	r2, r0
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	605a      	str	r2, [r3, #4]
		}
		if (sensor_comp & BME280_PRESS) {
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d006      	beq.n	80015c4 <bme280_compensate_data+0x68>
			/* Compensate the pressure data */
			comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 80015b6:	6839      	ldr	r1, [r7, #0]
 80015b8:	68b8      	ldr	r0, [r7, #8]
 80015ba:	f000 fa75 	bl	8001aa8 <compensate_pressure>
 80015be:	4602      	mov	r2, r0
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	601a      	str	r2, [r3, #0]
		}
		if (sensor_comp & BME280_HUM) {
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
 80015c6:	f003 0304 	and.w	r3, r3, #4
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d009      	beq.n	80015e2 <bme280_compensate_data+0x86>
			/* Compensate the humidity data */
			comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 80015ce:	6839      	ldr	r1, [r7, #0]
 80015d0:	68b8      	ldr	r0, [r7, #8]
 80015d2:	f000 fe0d 	bl	80021f0 <compensate_humidity>
 80015d6:	4602      	mov	r2, r0
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	609a      	str	r2, [r3, #8]
		if (sensor_comp & BME280_HUM) {
 80015dc:	e001      	b.n	80015e2 <bme280_compensate_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 80015de:	23ff      	movs	r3, #255	@ 0xff
 80015e0:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80015e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3718      	adds	r7, #24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <set_osr_settings>:
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings,
				const struct bme280_dev *dev)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b086      	sub	sp, #24
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	4603      	mov	r3, r0
 80015f6:	60b9      	str	r1, [r7, #8]
 80015f8:	607a      	str	r2, [r7, #4]
 80015fa:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 80015fc:	2301      	movs	r3, #1
 80015fe:	75fb      	strb	r3, [r7, #23]

	if (desired_settings & BME280_OSR_HUM_SEL)
 8001600:	7bfb      	ldrb	r3, [r7, #15]
 8001602:	f003 0304 	and.w	r3, r3, #4
 8001606:	2b00      	cmp	r3, #0
 8001608:	d005      	beq.n	8001616 <set_osr_settings+0x28>
		rslt = set_osr_humidity_settings(settings, dev);
 800160a:	6879      	ldr	r1, [r7, #4]
 800160c:	68b8      	ldr	r0, [r7, #8]
 800160e:	f000 f815 	bl	800163c <set_osr_humidity_settings>
 8001612:	4603      	mov	r3, r0
 8001614:	75fb      	strb	r3, [r7, #23]
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 8001616:	7bfb      	ldrb	r3, [r7, #15]
 8001618:	f003 0303 	and.w	r3, r3, #3
 800161c:	2b00      	cmp	r3, #0
 800161e:	d007      	beq.n	8001630 <set_osr_settings+0x42>
		rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 8001620:	7bfb      	ldrb	r3, [r7, #15]
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	68b9      	ldr	r1, [r7, #8]
 8001626:	4618      	mov	r0, r3
 8001628:	f000 f842 	bl	80016b0 <set_osr_press_temp_settings>
 800162c:	4603      	mov	r3, r0
 800162e:	75fb      	strb	r3, [r7, #23]

	return rslt;
 8001630:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001634:	4618      	mov	r0, r3
 8001636:	3718      	adds	r7, #24
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t ctrl_hum;
	uint8_t ctrl_meas;
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 8001646:	23f2      	movs	r3, #242	@ 0xf2
 8001648:	733b      	strb	r3, [r7, #12]

	ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	789b      	ldrb	r3, [r3, #2]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	b2db      	uxtb	r3, r3
 8001654:	73bb      	strb	r3, [r7, #14]
	/* Write the humidity control value in the register */
	rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 8001656:	f107 010e 	add.w	r1, r7, #14
 800165a:	f107 000c 	add.w	r0, r7, #12
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	2201      	movs	r2, #1
 8001662:	f7ff fda2 	bl	80011aa <bme280_set_regs>
 8001666:	4603      	mov	r3, r0
 8001668:	73fb      	strb	r3, [r7, #15]
	/* Humidity related changes will be only effective after a
	   write operation to ctrl_meas register */
	if (rslt == BME280_OK) {
 800166a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d118      	bne.n	80016a4 <set_osr_humidity_settings+0x68>
		reg_addr = BME280_CTRL_MEAS_ADDR;
 8001672:	23f4      	movs	r3, #244	@ 0xf4
 8001674:	733b      	strb	r3, [r7, #12]
		rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 8001676:	7b38      	ldrb	r0, [r7, #12]
 8001678:	f107 010d 	add.w	r1, r7, #13
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	2201      	movs	r2, #1
 8001680:	f7ff fd63 	bl	800114a <bme280_get_regs>
 8001684:	4603      	mov	r3, r0
 8001686:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK)
 8001688:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d109      	bne.n	80016a4 <set_osr_humidity_settings+0x68>
			rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 8001690:	f107 010d 	add.w	r1, r7, #13
 8001694:	f107 000c 	add.w	r0, r7, #12
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	2201      	movs	r2, #1
 800169c:	f7ff fd85 	bl	80011aa <bme280_set_regs>
 80016a0:	4603      	mov	r3, r0
 80016a2:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80016a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3710      	adds	r7, #16
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <set_osr_press_temp_settings>:
 * @brief This API sets the pressure and/or temperature oversampling settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
 80016bc:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 80016be:	23f4      	movs	r3, #244	@ 0xf4
 80016c0:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 80016c2:	7db8      	ldrb	r0, [r7, #22]
 80016c4:	f107 0115 	add.w	r1, r7, #21
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2201      	movs	r2, #1
 80016cc:	f7ff fd3d 	bl	800114a <bme280_get_regs>
 80016d0:	4603      	mov	r3, r0
 80016d2:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 80016d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d11f      	bne.n	800171c <set_osr_press_temp_settings+0x6c>
		if (desired_settings & BME280_OSR_PRESS_SEL)
 80016dc:	7bfb      	ldrb	r3, [r7, #15]
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d005      	beq.n	80016f2 <set_osr_press_temp_settings+0x42>
			fill_osr_press_settings(&reg_data, settings);
 80016e6:	f107 0315 	add.w	r3, r7, #21
 80016ea:	68b9      	ldr	r1, [r7, #8]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f000 f88e 	bl	800180e <fill_osr_press_settings>
		if (desired_settings & BME280_OSR_TEMP_SEL)
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
 80016f4:	f003 0302 	and.w	r3, r3, #2
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d005      	beq.n	8001708 <set_osr_press_temp_settings+0x58>
			fill_osr_temp_settings(&reg_data, settings);
 80016fc:	f107 0315 	add.w	r3, r7, #21
 8001700:	68b9      	ldr	r1, [r7, #8]
 8001702:	4618      	mov	r0, r3
 8001704:	f000 f8a0 	bl	8001848 <fill_osr_temp_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8001708:	f107 0115 	add.w	r1, r7, #21
 800170c:	f107 0016 	add.w	r0, r7, #22
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2201      	movs	r2, #1
 8001714:	f7ff fd49 	bl	80011aa <bme280_set_regs>
 8001718:	4603      	mov	r3, r0
 800171a:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800171c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001720:	4618      	mov	r0, r3
 8001722:	3718      	adds	r7, #24
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <set_filter_standby_settings>:
 * @brief This internal API sets the filter and/or standby duration settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
 8001734:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CONFIG_ADDR;
 8001736:	23f5      	movs	r3, #245	@ 0xf5
 8001738:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 800173a:	7db8      	ldrb	r0, [r7, #22]
 800173c:	f107 0115 	add.w	r1, r7, #21
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2201      	movs	r2, #1
 8001744:	f7ff fd01 	bl	800114a <bme280_get_regs>
 8001748:	4603      	mov	r3, r0
 800174a:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 800174c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d11f      	bne.n	8001794 <set_filter_standby_settings+0x6c>
		if (desired_settings & BME280_FILTER_SEL)
 8001754:	7bfb      	ldrb	r3, [r7, #15]
 8001756:	f003 0308 	and.w	r3, r3, #8
 800175a:	2b00      	cmp	r3, #0
 800175c:	d005      	beq.n	800176a <set_filter_standby_settings+0x42>
			fill_filter_settings(&reg_data, settings);
 800175e:	f107 0315 	add.w	r3, r7, #21
 8001762:	68b9      	ldr	r1, [r7, #8]
 8001764:	4618      	mov	r0, r3
 8001766:	f000 f81b 	bl	80017a0 <fill_filter_settings>
		if (desired_settings & BME280_STANDBY_SEL)
 800176a:	7bfb      	ldrb	r3, [r7, #15]
 800176c:	f003 0310 	and.w	r3, r3, #16
 8001770:	2b00      	cmp	r3, #0
 8001772:	d005      	beq.n	8001780 <set_filter_standby_settings+0x58>
			fill_standby_settings(&reg_data, settings);
 8001774:	f107 0315 	add.w	r3, r7, #21
 8001778:	68b9      	ldr	r1, [r7, #8]
 800177a:	4618      	mov	r0, r3
 800177c:	f000 f82d 	bl	80017da <fill_standby_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8001780:	f107 0115 	add.w	r1, r7, #21
 8001784:	f107 0016 	add.w	r0, r7, #22
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2201      	movs	r2, #1
 800178c:	f7ff fd0d 	bl	80011aa <bme280_set_regs>
 8001790:	4603      	mov	r3, r0
 8001792:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8001794:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001798:	4618      	mov	r0, r3
 800179a:	3718      	adds	r7, #24
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	b25b      	sxtb	r3, r3
 80017b0:	f023 031c 	bic.w	r3, r3, #28
 80017b4:	b25a      	sxtb	r2, r3
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	78db      	ldrb	r3, [r3, #3]
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	b25b      	sxtb	r3, r3
 80017be:	f003 031c 	and.w	r3, r3, #28
 80017c2:	b25b      	sxtb	r3, r3
 80017c4:	4313      	orrs	r3, r2
 80017c6:	b25b      	sxtb	r3, r3
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	701a      	strb	r2, [r3, #0]
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80017da:	b480      	push	{r7}
 80017dc:	b083      	sub	sp, #12
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
 80017e2:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	b25b      	sxtb	r3, r3
 80017ea:	f003 031f 	and.w	r3, r3, #31
 80017ee:	b25a      	sxtb	r2, r3
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	791b      	ldrb	r3, [r3, #4]
 80017f4:	015b      	lsls	r3, r3, #5
 80017f6:	b25b      	sxtb	r3, r3
 80017f8:	4313      	orrs	r3, r2
 80017fa:	b25b      	sxtb	r3, r3
 80017fc:	b2da      	uxtb	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	701a      	strb	r2, [r3, #0]
}
 8001802:	bf00      	nop
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800180e:	b480      	push	{r7}
 8001810:	b083      	sub	sp, #12
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
 8001816:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	b25b      	sxtb	r3, r3
 800181e:	f023 031c 	bic.w	r3, r3, #28
 8001822:	b25a      	sxtb	r2, r3
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	b25b      	sxtb	r3, r3
 800182c:	f003 031c 	and.w	r3, r3, #28
 8001830:	b25b      	sxtb	r3, r3
 8001832:	4313      	orrs	r3, r2
 8001834:	b25b      	sxtb	r3, r3
 8001836:	b2da      	uxtb	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	701a      	strb	r2, [r3, #0]
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	b25b      	sxtb	r3, r3
 8001858:	f003 031f 	and.w	r3, r3, #31
 800185c:	b25a      	sxtb	r2, r3
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	785b      	ldrb	r3, [r3, #1]
 8001862:	015b      	lsls	r3, r3, #5
 8001864:	b25b      	sxtb	r3, r3
 8001866:	4313      	orrs	r3, r2
 8001868:	b25b      	sxtb	r3, r3
 800186a:	b2da      	uxtb	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	701a      	strb	r2, [r3, #0]
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	b2da      	uxtb	r2, r3
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	709a      	strb	r2, [r3, #2]
	settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3302      	adds	r3, #2
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	109b      	asrs	r3, r3, #2
 800189c:	b2db      	uxtb	r3, r3
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	701a      	strb	r2, [r3, #0]
	settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3302      	adds	r3, #2
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	095b      	lsrs	r3, r3, #5
 80018b0:	b2da      	uxtb	r2, r3
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	705a      	strb	r2, [r3, #1]
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	3303      	adds	r3, #3
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	109b      	asrs	r3, r3, #2
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	f003 0307 	and.w	r3, r3, #7
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	70da      	strb	r2, [r3, #3]
	settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	3303      	adds	r3, #3
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	095b      	lsrs	r3, r3, #5
 80018d2:	b2da      	uxtb	r2, r3
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	711a      	strb	r2, [r3, #4]
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <write_power_mode>:
/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	6039      	str	r1, [r7, #0]
 80018ee:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 80018f0:	23f4      	movs	r3, #244	@ 0xf4
 80018f2:	73bb      	strb	r3, [r7, #14]
	/* Variable to store the value read from power mode register */
	uint8_t sensor_mode_reg_val;

	/* Read the power mode register */
	rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 80018f4:	7bb8      	ldrb	r0, [r7, #14]
 80018f6:	f107 010d 	add.w	r1, r7, #13
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	2201      	movs	r2, #1
 80018fe:	f7ff fc24 	bl	800114a <bme280_get_regs>
 8001902:	4603      	mov	r3, r0
 8001904:	73fb      	strb	r3, [r7, #15]
	/* Set the power mode */
	if (rslt == BME280_OK) {
 8001906:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d117      	bne.n	800193e <write_power_mode+0x5a>
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 800190e:	7b7b      	ldrb	r3, [r7, #13]
 8001910:	b25b      	sxtb	r3, r3
 8001912:	f023 0303 	bic.w	r3, r3, #3
 8001916:	b25a      	sxtb	r2, r3
 8001918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191c:	f003 0303 	and.w	r3, r3, #3
 8001920:	b25b      	sxtb	r3, r3
 8001922:	4313      	orrs	r3, r2
 8001924:	b25b      	sxtb	r3, r3
 8001926:	b2db      	uxtb	r3, r3
 8001928:	737b      	strb	r3, [r7, #13]
		/* Write the power mode in the register */
		rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 800192a:	f107 010d 	add.w	r1, r7, #13
 800192e:	f107 000e 	add.w	r0, r7, #14
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	2201      	movs	r2, #1
 8001936:	f7ff fc38 	bl	80011aa <bme280_set_regs>
 800193a:	4603      	mov	r3, r0
 800193c:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 800193e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001942:	4618      	mov	r0, r3
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b086      	sub	sp, #24
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_data[4];
	struct bme280_settings settings;

	rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 8001952:	f107 0110 	add.w	r1, r7, #16
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2204      	movs	r2, #4
 800195a:	20f2      	movs	r0, #242	@ 0xf2
 800195c:	f7ff fbf5 	bl	800114a <bme280_get_regs>
 8001960:	4603      	mov	r3, r0
 8001962:	75fb      	strb	r3, [r7, #23]
	if (rslt == BME280_OK) {
 8001964:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d118      	bne.n	800199e <put_device_to_sleep+0x54>
		parse_device_settings(reg_data, &settings);
 800196c:	f107 0208 	add.w	r2, r7, #8
 8001970:	f107 0310 	add.w	r3, r7, #16
 8001974:	4611      	mov	r1, r2
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff ff80 	bl	800187c <parse_device_settings>
		rslt = bme280_soft_reset(dev);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff fd39 	bl	80013f4 <bme280_soft_reset>
 8001982:	4603      	mov	r3, r0
 8001984:	75fb      	strb	r3, [r7, #23]
		if (rslt == BME280_OK)
 8001986:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d107      	bne.n	800199e <put_device_to_sleep+0x54>
			rslt = reload_device_settings(&settings, dev);
 800198e:	f107 0308 	add.w	r3, r7, #8
 8001992:	6879      	ldr	r1, [r7, #4]
 8001994:	4618      	mov	r0, r3
 8001996:	f000 f808 	bl	80019aa <reload_device_settings>
 800199a:	4603      	mov	r3, r0
 800199c:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800199e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3718      	adds	r7, #24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b084      	sub	sp, #16
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
 80019b2:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	201f      	movs	r0, #31
 80019ba:	f7ff fe18 	bl	80015ee <set_osr_settings>
 80019be:	4603      	mov	r3, r0
 80019c0:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME280_OK)
 80019c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d106      	bne.n	80019d8 <reload_device_settings+0x2e>
		rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 80019ca:	683a      	ldr	r2, [r7, #0]
 80019cc:	6879      	ldr	r1, [r7, #4]
 80019ce:	201f      	movs	r0, #31
 80019d0:	f7ff feaa 	bl	8001728 <set_filter_standby_settings>
 80019d4:	4603      	mov	r3, r0
 80019d6:	73fb      	strb	r3, [r7, #15]

	return rslt;
 80019d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in integer data type.
 */
static int32_t compensate_temperature(const struct bme280_uncomp_data *uncomp_data,
						struct bme280_calib_data *calib_data)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b089      	sub	sp, #36	@ 0x24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
	int32_t var1;
	int32_t var2;
	int32_t temperature;
	int32_t temperature_min = -4000;
 80019ee:	4b2d      	ldr	r3, [pc, #180]	@ (8001aa4 <compensate_temperature+0xc0>)
 80019f0:	61bb      	str	r3, [r7, #24]
	int32_t temperature_max = 8500;
 80019f2:	f242 1334 	movw	r3, #8500	@ 0x2134
 80019f6:	617b      	str	r3, [r7, #20]

	var1 = (int32_t)((uncomp_data->temperature / 8) - ((int32_t)calib_data->dig_T1 * 2));
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	08db      	lsrs	r3, r3, #3
 80019fe:	683a      	ldr	r2, [r7, #0]
 8001a00:	8812      	ldrh	r2, [r2, #0]
 8001a02:	0052      	lsls	r2, r2, #1
 8001a04:	1a9b      	subs	r3, r3, r2
 8001a06:	613b      	str	r3, [r7, #16]
	var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a0e:	461a      	mov	r2, r3
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	fb02 f303 	mul.w	r3, r2, r3
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	da01      	bge.n	8001a1e <compensate_temperature+0x3a>
 8001a1a:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8001a1e:	12db      	asrs	r3, r3, #11
 8001a20:	613b      	str	r3, [r7, #16]
	var2 = (int32_t)((uncomp_data->temperature / 16) - ((int32_t)calib_data->dig_T1));
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	091b      	lsrs	r3, r3, #4
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	8812      	ldrh	r2, [r2, #0]
 8001a2c:	1a9b      	subs	r3, r3, r2
 8001a2e:	60fb      	str	r3, [r7, #12]
	var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_T3)) / 16384;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	fb03 f303 	mul.w	r3, r3, r3
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	da01      	bge.n	8001a3e <compensate_temperature+0x5a>
 8001a3a:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8001a3e:	131b      	asrs	r3, r3, #12
 8001a40:	461a      	mov	r2, r3
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a48:	fb02 f303 	mul.w	r3, r2, r3
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	da02      	bge.n	8001a56 <compensate_temperature+0x72>
 8001a50:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 8001a54:	333f      	adds	r3, #63	@ 0x3f
 8001a56:	139b      	asrs	r3, r3, #14
 8001a58:	60fb      	str	r3, [r7, #12]
	calib_data->t_fine = var1 + var2;
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	441a      	add	r2, r3
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	625a      	str	r2, [r3, #36]	@ 0x24
	temperature = (calib_data->t_fine * 5 + 128) / 256;
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a68:	4613      	mov	r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4413      	add	r3, r2
 8001a6e:	3380      	adds	r3, #128	@ 0x80
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	da00      	bge.n	8001a76 <compensate_temperature+0x92>
 8001a74:	33ff      	adds	r3, #255	@ 0xff
 8001a76:	121b      	asrs	r3, r3, #8
 8001a78:	61fb      	str	r3, [r7, #28]

	if (temperature < temperature_min)
 8001a7a:	69fa      	ldr	r2, [r7, #28]
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	da02      	bge.n	8001a88 <compensate_temperature+0xa4>
		temperature = temperature_min;
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	61fb      	str	r3, [r7, #28]
 8001a86:	e005      	b.n	8001a94 <compensate_temperature+0xb0>
	else if (temperature > temperature_max)
 8001a88:	69fa      	ldr	r2, [r7, #28]
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	dd01      	ble.n	8001a94 <compensate_temperature+0xb0>
		temperature = temperature_max;
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	61fb      	str	r3, [r7, #28]

	return temperature;
 8001a94:	69fb      	ldr	r3, [r7, #28]
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3724      	adds	r7, #36	@ 0x24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	fffff060 	.word	0xfffff060

08001aa8 <compensate_pressure>:
 * return the compensated pressure data in integer data type with higher
 * accuracy.
 */
static uint32_t compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8001aa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001aac:	b0ea      	sub	sp, #424	@ 0x1a8
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	f8c7 0174 	str.w	r0, [r7, #372]	@ 0x174
 8001ab4:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int64_t var4;
	uint32_t pressure;
	uint32_t pressure_min = 3000000;
 8001ab8:	4bbf      	ldr	r3, [pc, #764]	@ (8001db8 <compensate_pressure+0x310>)
 8001aba:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
	uint32_t pressure_max = 11000000;
 8001abe:	4bbf      	ldr	r3, [pc, #764]	@ (8001dbc <compensate_pressure+0x314>)
 8001ac0:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c

	var1 = ((int64_t)calib_data->t_fine) - 128000;
 8001ac4:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aca:	17da      	asrs	r2, r3, #31
 8001acc:	4698      	mov	r8, r3
 8001ace:	4691      	mov	r9, r2
 8001ad0:	f5b8 3afa 	subs.w	sl, r8, #128000	@ 0x1f400
 8001ad4:	f149 3bff 	adc.w	fp, r9, #4294967295
 8001ad8:	e9c7 ab64 	strd	sl, fp, [r7, #400]	@ 0x190
	var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
 8001adc:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001ae0:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001ae4:	fb03 f102 	mul.w	r1, r3, r2
 8001ae8:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001aec:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001af0:	fb02 f303 	mul.w	r3, r2, r3
 8001af4:	18ca      	adds	r2, r1, r3
 8001af6:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001afa:	fba3 4503 	umull	r4, r5, r3, r3
 8001afe:	1953      	adds	r3, r2, r5
 8001b00:	461d      	mov	r5, r3
 8001b02:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001b06:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001b0a:	b21b      	sxth	r3, r3
 8001b0c:	17da      	asrs	r2, r3, #31
 8001b0e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001b12:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 8001b16:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	fb03 f205 	mul.w	r2, r3, r5
 8001b20:	460b      	mov	r3, r1
 8001b22:	fb04 f303 	mul.w	r3, r4, r3
 8001b26:	4413      	add	r3, r2
 8001b28:	4602      	mov	r2, r0
 8001b2a:	fba4 1202 	umull	r1, r2, r4, r2
 8001b2e:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 8001b32:	460a      	mov	r2, r1
 8001b34:	f8c7 2128 	str.w	r2, [r7, #296]	@ 0x128
 8001b38:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001b3c:	4413      	add	r3, r2
 8001b3e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001b42:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	@ 0x128
 8001b46:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
 8001b4a:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
	var2 = var2 + ((var1 * (int64_t)calib_data->dig_P5) * 131072);
 8001b4e:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001b52:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001b56:	b21b      	sxth	r3, r3
 8001b58:	17da      	asrs	r2, r3, #31
 8001b5a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8001b5e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001b62:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001b66:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	@ 0x118
 8001b6a:	462a      	mov	r2, r5
 8001b6c:	fb02 f203 	mul.w	r2, r2, r3
 8001b70:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001b74:	4621      	mov	r1, r4
 8001b76:	fb01 f303 	mul.w	r3, r1, r3
 8001b7a:	441a      	add	r2, r3
 8001b7c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001b80:	4621      	mov	r1, r4
 8001b82:	fba3 1301 	umull	r1, r3, r3, r1
 8001b86:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8001b90:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001b94:	18d3      	adds	r3, r2, r3
 8001b96:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8001b9a:	f04f 0000 	mov.w	r0, #0
 8001b9e:	f04f 0100 	mov.w	r1, #0
 8001ba2:	e9d7 455a 	ldrd	r4, r5, [r7, #360]	@ 0x168
 8001ba6:	462b      	mov	r3, r5
 8001ba8:	0459      	lsls	r1, r3, #17
 8001baa:	4623      	mov	r3, r4
 8001bac:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001bb0:	4623      	mov	r3, r4
 8001bb2:	0458      	lsls	r0, r3, #17
 8001bb4:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8001bb8:	1814      	adds	r4, r2, r0
 8001bba:	f8c7 40a8 	str.w	r4, [r7, #168]	@ 0xa8
 8001bbe:	414b      	adcs	r3, r1
 8001bc0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001bc4:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 8001bc8:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
	var2 = var2 + (((int64_t)calib_data->dig_P4) * 34359738368);
 8001bcc:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001bd0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001bd4:	b21b      	sxth	r3, r3
 8001bd6:	17da      	asrs	r2, r3, #31
 8001bd8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8001bdc:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 8001be0:	f04f 0000 	mov.w	r0, #0
 8001be4:	f04f 0100 	mov.w	r1, #0
 8001be8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001bec:	00d9      	lsls	r1, r3, #3
 8001bee:	2000      	movs	r0, #0
 8001bf0:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8001bf4:	1814      	adds	r4, r2, r0
 8001bf6:	f8c7 40a0 	str.w	r4, [r7, #160]	@ 0xa0
 8001bfa:	414b      	adcs	r3, r1
 8001bfc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001c00:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	@ 0xa0
 8001c04:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
	var1 = ((var1 * var1 * (int64_t)calib_data->dig_P3) / 256) + ((var1 * ((int64_t)calib_data->dig_P2) * 4096));
 8001c08:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001c0c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001c10:	fb03 f102 	mul.w	r1, r3, r2
 8001c14:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001c18:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001c1c:	fb02 f303 	mul.w	r3, r2, r3
 8001c20:	18ca      	adds	r2, r1, r3
 8001c22:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001c26:	fba3 1303 	umull	r1, r3, r3, r3
 8001c2a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8001c2e:	460b      	mov	r3, r1
 8001c30:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8001c34:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001c38:	18d3      	adds	r3, r2, r3
 8001c3a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8001c3e:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001c42:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001c46:	b21b      	sxth	r3, r3
 8001c48:	17da      	asrs	r2, r3, #31
 8001c4a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8001c4e:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8001c52:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 8001c56:	462b      	mov	r3, r5
 8001c58:	e9d7 8942 	ldrd	r8, r9, [r7, #264]	@ 0x108
 8001c5c:	4642      	mov	r2, r8
 8001c5e:	fb02 f203 	mul.w	r2, r2, r3
 8001c62:	464b      	mov	r3, r9
 8001c64:	4621      	mov	r1, r4
 8001c66:	fb01 f303 	mul.w	r3, r1, r3
 8001c6a:	4413      	add	r3, r2
 8001c6c:	4622      	mov	r2, r4
 8001c6e:	4641      	mov	r1, r8
 8001c70:	fba2 1201 	umull	r1, r2, r2, r1
 8001c74:	f8c7 215c 	str.w	r2, [r7, #348]	@ 0x15c
 8001c78:	460a      	mov	r2, r1
 8001c7a:	f8c7 2158 	str.w	r2, [r7, #344]	@ 0x158
 8001c7e:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 8001c82:	4413      	add	r3, r2
 8001c84:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8001c88:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	da09      	bge.n	8001ca4 <compensate_pressure+0x1fc>
 8001c90:	f112 01ff 	adds.w	r1, r2, #255	@ 0xff
 8001c94:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8001c98:	f143 0300 	adc.w	r3, r3, #0
 8001c9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001ca0:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8001ca4:	f04f 0000 	mov.w	r0, #0
 8001ca8:	f04f 0100 	mov.w	r1, #0
 8001cac:	0a10      	lsrs	r0, r2, #8
 8001cae:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001cb2:	1219      	asrs	r1, r3, #8
 8001cb4:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001cb8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001cbc:	b21b      	sxth	r3, r3
 8001cbe:	17da      	asrs	r2, r3, #31
 8001cc0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001cc4:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8001cc8:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001ccc:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	@ 0x100
 8001cd0:	464a      	mov	r2, r9
 8001cd2:	fb02 f203 	mul.w	r2, r2, r3
 8001cd6:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001cda:	4644      	mov	r4, r8
 8001cdc:	fb04 f303 	mul.w	r3, r4, r3
 8001ce0:	441a      	add	r2, r3
 8001ce2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001ce6:	4644      	mov	r4, r8
 8001ce8:	fba3 4304 	umull	r4, r3, r3, r4
 8001cec:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001cf0:	4623      	mov	r3, r4
 8001cf2:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001cf6:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001cfa:	18d3      	adds	r3, r2, r3
 8001cfc:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001d00:	f04f 0200 	mov.w	r2, #0
 8001d04:	f04f 0300 	mov.w	r3, #0
 8001d08:	e9d7 8954 	ldrd	r8, r9, [r7, #336]	@ 0x150
 8001d0c:	464c      	mov	r4, r9
 8001d0e:	0323      	lsls	r3, r4, #12
 8001d10:	4644      	mov	r4, r8
 8001d12:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001d16:	4644      	mov	r4, r8
 8001d18:	0322      	lsls	r2, r4, #12
 8001d1a:	1884      	adds	r4, r0, r2
 8001d1c:	f8c7 4090 	str.w	r4, [r7, #144]	@ 0x90
 8001d20:	eb41 0303 	adc.w	r3, r1, r3
 8001d24:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001d28:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	@ 0x90
 8001d2c:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
	var3 = ((int64_t)1) * 140737488355328;
 8001d30:	f04f 0200 	mov.w	r2, #0
 8001d34:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001d38:	e9c7 2360 	strd	r2, r3, [r7, #384]	@ 0x180
	var1 = (var3 + var1) * ((int64_t)calib_data->dig_P1) / 8589934592;
 8001d3c:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	@ 0x180
 8001d40:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8001d44:	1884      	adds	r4, r0, r2
 8001d46:	f8c7 40f8 	str.w	r4, [r7, #248]	@ 0xf8
 8001d4a:	eb41 0303 	adc.w	r3, r1, r3
 8001d4e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001d52:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001d56:	88db      	ldrh	r3, [r3, #6]
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8001d60:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001d64:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8001d68:	462b      	mov	r3, r5
 8001d6a:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 8001d6e:	4642      	mov	r2, r8
 8001d70:	fb02 f203 	mul.w	r2, r2, r3
 8001d74:	464b      	mov	r3, r9
 8001d76:	4621      	mov	r1, r4
 8001d78:	fb01 f303 	mul.w	r3, r1, r3
 8001d7c:	4413      	add	r3, r2
 8001d7e:	4622      	mov	r2, r4
 8001d80:	4641      	mov	r1, r8
 8001d82:	fba2 1201 	umull	r1, r2, r2, r1
 8001d86:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001d8a:	460a      	mov	r2, r1
 8001d8c:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001d90:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001d94:	4413      	add	r3, r2
 8001d96:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001d9a:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	da0e      	bge.n	8001dc0 <compensate_pressure+0x318>
 8001da2:	1e51      	subs	r1, r2, #1
 8001da4:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8001da8:	f143 0301 	adc.w	r3, r3, #1
 8001dac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001db0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001db4:	e004      	b.n	8001dc0 <compensate_pressure+0x318>
 8001db6:	bf00      	nop
 8001db8:	002dc6c0 	.word	0x002dc6c0
 8001dbc:	00a7d8c0 	.word	0x00a7d8c0
 8001dc0:	f04f 0000 	mov.w	r0, #0
 8001dc4:	f04f 0100 	mov.w	r1, #0
 8001dc8:	1058      	asrs	r0, r3, #1
 8001dca:	17d9      	asrs	r1, r3, #31
 8001dcc:	e9c7 0164 	strd	r0, r1, [r7, #400]	@ 0x190

	/* To avoid divide by zero exception */
	if (var1 != 0) {
 8001dd0:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	f000 81fc 	beq.w	80021d2 <compensate_pressure+0x72a>
		var4 = 1048576 - uncomp_data->pressure;
 8001dda:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001de4:	2200      	movs	r2, #0
 8001de6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001dea:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001dee:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	@ 0x80
 8001df2:	e9c7 345e 	strd	r3, r4, [r7, #376]	@ 0x178
		var4 = (((var4 * 2147483648) - var2) * 3125) / var1;
 8001df6:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 8001dfa:	f04f 0000 	mov.w	r0, #0
 8001dfe:	f04f 0100 	mov.w	r1, #0
 8001e02:	07d9      	lsls	r1, r3, #31
 8001e04:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8001e08:	07d0      	lsls	r0, r2, #31
 8001e0a:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8001e0e:	1a84      	subs	r4, r0, r2
 8001e10:	f8c7 40e8 	str.w	r4, [r7, #232]	@ 0xe8
 8001e14:	eb61 0303 	sbc.w	r3, r1, r3
 8001e18:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001e1c:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001e20:	4622      	mov	r2, r4
 8001e22:	462b      	mov	r3, r5
 8001e24:	1891      	adds	r1, r2, r2
 8001e26:	67b9      	str	r1, [r7, #120]	@ 0x78
 8001e28:	415b      	adcs	r3, r3
 8001e2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001e2c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8001e30:	4621      	mov	r1, r4
 8001e32:	1851      	adds	r1, r2, r1
 8001e34:	6739      	str	r1, [r7, #112]	@ 0x70
 8001e36:	4629      	mov	r1, r5
 8001e38:	414b      	adcs	r3, r1
 8001e3a:	677b      	str	r3, [r7, #116]	@ 0x74
 8001e3c:	f04f 0200 	mov.w	r2, #0
 8001e40:	f04f 0300 	mov.w	r3, #0
 8001e44:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8001e48:	4649      	mov	r1, r9
 8001e4a:	018b      	lsls	r3, r1, #6
 8001e4c:	4641      	mov	r1, r8
 8001e4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e52:	4641      	mov	r1, r8
 8001e54:	018a      	lsls	r2, r1, #6
 8001e56:	4641      	mov	r1, r8
 8001e58:	1889      	adds	r1, r1, r2
 8001e5a:	66b9      	str	r1, [r7, #104]	@ 0x68
 8001e5c:	4649      	mov	r1, r9
 8001e5e:	eb43 0101 	adc.w	r1, r3, r1
 8001e62:	66f9      	str	r1, [r7, #108]	@ 0x6c
 8001e64:	f04f 0200 	mov.w	r2, #0
 8001e68:	f04f 0300 	mov.w	r3, #0
 8001e6c:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8001e70:	4649      	mov	r1, r9
 8001e72:	008b      	lsls	r3, r1, #2
 8001e74:	4641      	mov	r1, r8
 8001e76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001e7a:	4641      	mov	r1, r8
 8001e7c:	008a      	lsls	r2, r1, #2
 8001e7e:	4610      	mov	r0, r2
 8001e80:	4619      	mov	r1, r3
 8001e82:	4603      	mov	r3, r0
 8001e84:	4622      	mov	r2, r4
 8001e86:	189b      	adds	r3, r3, r2
 8001e88:	663b      	str	r3, [r7, #96]	@ 0x60
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	462a      	mov	r2, r5
 8001e8e:	eb42 0303 	adc.w	r3, r2, r3
 8001e92:	667b      	str	r3, [r7, #100]	@ 0x64
 8001e94:	f04f 0200 	mov.w	r2, #0
 8001e98:	f04f 0300 	mov.w	r3, #0
 8001e9c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8001ea0:	4649      	mov	r1, r9
 8001ea2:	008b      	lsls	r3, r1, #2
 8001ea4:	4641      	mov	r1, r8
 8001ea6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001eaa:	4641      	mov	r1, r8
 8001eac:	008a      	lsls	r2, r1, #2
 8001eae:	4610      	mov	r0, r2
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	4622      	mov	r2, r4
 8001eb6:	189b      	adds	r3, r3, r2
 8001eb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001ebc:	462b      	mov	r3, r5
 8001ebe:	460a      	mov	r2, r1
 8001ec0:	eb42 0303 	adc.w	r3, r2, r3
 8001ec4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001ec8:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8001ecc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001ed0:	f7fe fef2 	bl	8000cb8 <__aeabi_ldivmod>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	e9c7 235e 	strd	r2, r3, [r7, #376]	@ 0x178
		var1 = (((int64_t)calib_data->dig_P9) * (var4 / 8192) * (var4 / 8192)) / 33554432;
 8001edc:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001ee0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001ee4:	b21b      	sxth	r3, r3
 8001ee6:	17da      	asrs	r2, r3, #31
 8001ee8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001eec:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001ef0:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	da08      	bge.n	8001f0a <compensate_pressure+0x462>
 8001ef8:	f641 71ff 	movw	r1, #8191	@ 0x1fff
 8001efc:	1851      	adds	r1, r2, r1
 8001efe:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001f00:	f143 0300 	adc.w	r3, r3, #0
 8001f04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001f06:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001f0a:	f04f 0000 	mov.w	r0, #0
 8001f0e:	f04f 0100 	mov.w	r1, #0
 8001f12:	0b50      	lsrs	r0, r2, #13
 8001f14:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001f18:	1359      	asrs	r1, r3, #13
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001f22:	4629      	mov	r1, r5
 8001f24:	fb02 f001 	mul.w	r0, r2, r1
 8001f28:	4621      	mov	r1, r4
 8001f2a:	fb01 f103 	mul.w	r1, r1, r3
 8001f2e:	4401      	add	r1, r0
 8001f30:	4620      	mov	r0, r4
 8001f32:	fba0 2302 	umull	r2, r3, r0, r2
 8001f36:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8001f40:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8001f44:	18cb      	adds	r3, r1, r3
 8001f46:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8001f4a:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	da08      	bge.n	8001f64 <compensate_pressure+0x4bc>
 8001f52:	f641 71ff 	movw	r1, #8191	@ 0x1fff
 8001f56:	1851      	adds	r1, r2, r1
 8001f58:	6539      	str	r1, [r7, #80]	@ 0x50
 8001f5a:	f143 0300 	adc.w	r3, r3, #0
 8001f5e:	657b      	str	r3, [r7, #84]	@ 0x54
 8001f60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001f64:	f04f 0000 	mov.w	r0, #0
 8001f68:	f04f 0100 	mov.w	r1, #0
 8001f6c:	0b50      	lsrs	r0, r2, #13
 8001f6e:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001f72:	1359      	asrs	r1, r3, #13
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	@ 0x140
 8001f7c:	4629      	mov	r1, r5
 8001f7e:	fb02 f001 	mul.w	r0, r2, r1
 8001f82:	4621      	mov	r1, r4
 8001f84:	fb01 f103 	mul.w	r1, r1, r3
 8001f88:	4401      	add	r1, r0
 8001f8a:	4620      	mov	r0, r4
 8001f8c:	fba0 2302 	umull	r2, r3, r0, r2
 8001f90:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8001f94:	4613      	mov	r3, r2
 8001f96:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8001f9a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001f9e:	18cb      	adds	r3, r1, r3
 8001fa0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8001fa4:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	da08      	bge.n	8001fbe <compensate_pressure+0x516>
 8001fac:	f06f 417e 	mvn.w	r1, #4261412864	@ 0xfe000000
 8001fb0:	1851      	adds	r1, r2, r1
 8001fb2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001fb4:	f143 0300 	adc.w	r3, r3, #0
 8001fb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001fba:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001fbe:	f04f 0000 	mov.w	r0, #0
 8001fc2:	f04f 0100 	mov.w	r1, #0
 8001fc6:	0e50      	lsrs	r0, r2, #25
 8001fc8:	ea40 10c3 	orr.w	r0, r0, r3, lsl #7
 8001fcc:	1659      	asrs	r1, r3, #25
 8001fce:	e9c7 0164 	strd	r0, r1, [r7, #400]	@ 0x190
		var2 = (((int64_t)calib_data->dig_P8) * var4) / 524288;
 8001fd2:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001fd6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001fda:	b21b      	sxth	r3, r3
 8001fdc:	17da      	asrs	r2, r3, #31
 8001fde:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001fe2:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001fe6:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8001fea:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001fee:	462a      	mov	r2, r5
 8001ff0:	fb02 f203 	mul.w	r2, r2, r3
 8001ff4:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001ff8:	4621      	mov	r1, r4
 8001ffa:	fb01 f303 	mul.w	r3, r1, r3
 8001ffe:	441a      	add	r2, r3
 8002000:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8002004:	4621      	mov	r1, r4
 8002006:	fba3 1301 	umull	r1, r3, r3, r1
 800200a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800200e:	460b      	mov	r3, r1
 8002010:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8002014:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002018:	18d3      	adds	r3, r2, r3
 800201a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800201e:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8002022:	2b00      	cmp	r3, #0
 8002024:	da07      	bge.n	8002036 <compensate_pressure+0x58e>
 8002026:	4971      	ldr	r1, [pc, #452]	@ (80021ec <compensate_pressure+0x744>)
 8002028:	1851      	adds	r1, r2, r1
 800202a:	6439      	str	r1, [r7, #64]	@ 0x40
 800202c:	f143 0300 	adc.w	r3, r3, #0
 8002030:	647b      	str	r3, [r7, #68]	@ 0x44
 8002032:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002036:	f04f 0000 	mov.w	r0, #0
 800203a:	f04f 0100 	mov.w	r1, #0
 800203e:	0cd0      	lsrs	r0, r2, #19
 8002040:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 8002044:	14d9      	asrs	r1, r3, #19
 8002046:	e9c7 0162 	strd	r0, r1, [r7, #392]	@ 0x188
		var4 = ((var4 + var1 + var2) / 256) + (((int64_t)calib_data->dig_P7) * 16);
 800204a:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	@ 0x178
 800204e:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8002052:	1884      	adds	r4, r0, r2
 8002054:	f8c7 40c8 	str.w	r4, [r7, #200]	@ 0xc8
 8002058:	eb41 0303 	adc.w	r3, r1, r3
 800205c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002060:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8002064:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8002068:	4621      	mov	r1, r4
 800206a:	1889      	adds	r1, r1, r2
 800206c:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 8002070:	4629      	mov	r1, r5
 8002072:	eb43 0101 	adc.w	r1, r3, r1
 8002076:	f8c7 10c4 	str.w	r1, [r7, #196]	@ 0xc4
 800207a:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 800207e:	2b00      	cmp	r3, #0
 8002080:	da07      	bge.n	8002092 <compensate_pressure+0x5ea>
 8002082:	f112 01ff 	adds.w	r1, r2, #255	@ 0xff
 8002086:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002088:	f143 0300 	adc.w	r3, r3, #0
 800208c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800208e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002092:	f04f 0000 	mov.w	r0, #0
 8002096:	f04f 0100 	mov.w	r1, #0
 800209a:	0a10      	lsrs	r0, r2, #8
 800209c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80020a0:	1219      	asrs	r1, r3, #8
 80020a2:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80020a6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80020aa:	b21b      	sxth	r3, r3
 80020ac:	17da      	asrs	r2, r3, #31
 80020ae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80020b2:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80020b6:	f04f 0200 	mov.w	r2, #0
 80020ba:	f04f 0300 	mov.w	r3, #0
 80020be:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80020c2:	464c      	mov	r4, r9
 80020c4:	0123      	lsls	r3, r4, #4
 80020c6:	4644      	mov	r4, r8
 80020c8:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80020cc:	4644      	mov	r4, r8
 80020ce:	0122      	lsls	r2, r4, #4
 80020d0:	1884      	adds	r4, r0, r2
 80020d2:	633c      	str	r4, [r7, #48]	@ 0x30
 80020d4:	eb41 0303 	adc.w	r3, r1, r3
 80020d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80020da:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80020de:	e9c7 345e 	strd	r3, r4, [r7, #376]	@ 0x178
		pressure = (uint32_t)(((var4 / 2) * 100) / 128);
 80020e2:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 80020e6:	0fd9      	lsrs	r1, r3, #31
 80020e8:	2000      	movs	r0, #0
 80020ea:	62b9      	str	r1, [r7, #40]	@ 0x28
 80020ec:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80020ee:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 80020f2:	4621      	mov	r1, r4
 80020f4:	1889      	adds	r1, r1, r2
 80020f6:	6239      	str	r1, [r7, #32]
 80020f8:	4629      	mov	r1, r5
 80020fa:	eb43 0101 	adc.w	r1, r3, r1
 80020fe:	6279      	str	r1, [r7, #36]	@ 0x24
 8002100:	f04f 0200 	mov.w	r2, #0
 8002104:	f04f 0300 	mov.w	r3, #0
 8002108:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800210c:	4621      	mov	r1, r4
 800210e:	084a      	lsrs	r2, r1, #1
 8002110:	4629      	mov	r1, r5
 8002112:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8002116:	4629      	mov	r1, r5
 8002118:	104b      	asrs	r3, r1, #1
 800211a:	4610      	mov	r0, r2
 800211c:	4619      	mov	r1, r3
 800211e:	4602      	mov	r2, r0
 8002120:	460b      	mov	r3, r1
 8002122:	1894      	adds	r4, r2, r2
 8002124:	61bc      	str	r4, [r7, #24]
 8002126:	415b      	adcs	r3, r3
 8002128:	61fb      	str	r3, [r7, #28]
 800212a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800212e:	1814      	adds	r4, r2, r0
 8002130:	613c      	str	r4, [r7, #16]
 8002132:	414b      	adcs	r3, r1
 8002134:	617b      	str	r3, [r7, #20]
 8002136:	f04f 0200 	mov.w	r2, #0
 800213a:	f04f 0300 	mov.w	r3, #0
 800213e:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002142:	464c      	mov	r4, r9
 8002144:	0163      	lsls	r3, r4, #5
 8002146:	4644      	mov	r4, r8
 8002148:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800214c:	4644      	mov	r4, r8
 800214e:	0162      	lsls	r2, r4, #5
 8002150:	4644      	mov	r4, r8
 8002152:	18a4      	adds	r4, r4, r2
 8002154:	60bc      	str	r4, [r7, #8]
 8002156:	464c      	mov	r4, r9
 8002158:	eb43 0404 	adc.w	r4, r3, r4
 800215c:	60fc      	str	r4, [r7, #12]
 800215e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002162:	4623      	mov	r3, r4
 8002164:	181b      	adds	r3, r3, r0
 8002166:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800216a:	462b      	mov	r3, r5
 800216c:	eb41 0303 	adc.w	r3, r1, r3
 8002170:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002174:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 8002178:	2b00      	cmp	r3, #0
 800217a:	da07      	bge.n	800218c <compensate_pressure+0x6e4>
 800217c:	f112 017f 	adds.w	r1, r2, #127	@ 0x7f
 8002180:	6039      	str	r1, [r7, #0]
 8002182:	f143 0300 	adc.w	r3, r3, #0
 8002186:	607b      	str	r3, [r7, #4]
 8002188:	e9d7 2300 	ldrd	r2, r3, [r7]
 800218c:	f04f 0000 	mov.w	r0, #0
 8002190:	f04f 0100 	mov.w	r1, #0
 8002194:	09d0      	lsrs	r0, r2, #7
 8002196:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 800219a:	11d9      	asrs	r1, r3, #7
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
 80021a0:	4613      	mov	r3, r2
 80021a2:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4

		if (pressure < pressure_min)
 80021a6:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 80021aa:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d204      	bcs.n	80021bc <compensate_pressure+0x714>
			pressure = pressure_min;
 80021b2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80021b6:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80021ba:	e00e      	b.n	80021da <compensate_pressure+0x732>
		else if (pressure > pressure_max)
 80021bc:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 80021c0:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d908      	bls.n	80021da <compensate_pressure+0x732>
			pressure = pressure_max;
 80021c8:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 80021cc:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80021d0:	e003      	b.n	80021da <compensate_pressure+0x732>
	} else {
		pressure = pressure_min;
 80021d2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80021d6:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
	}

	return pressure;
 80021da:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
}
 80021de:	4618      	mov	r0, r3
 80021e0:	f507 77d4 	add.w	r7, r7, #424	@ 0x1a8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021ea:	bf00      	nop
 80021ec:	0007ffff 	.word	0x0007ffff

080021f0 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in integer data type.
 */
static uint32_t compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b08b      	sub	sp, #44	@ 0x2c
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
	int32_t var2;
	int32_t var3;
	int32_t var4;
	int32_t var5;
	uint32_t humidity;
	uint32_t humidity_max = 102400;
 80021fa:	f44f 33c8 	mov.w	r3, #102400	@ 0x19000
 80021fe:	623b      	str	r3, [r7, #32]

	var1 = calib_data->t_fine - ((int32_t)76800);
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002204:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8002208:	61fb      	str	r3, [r7, #28]
	var2 = (int32_t)(uncomp_data->humidity * 16384);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	039b      	lsls	r3, r3, #14
 8002210:	61bb      	str	r3, [r7, #24]
	var3 = (int32_t)(((int32_t)calib_data->dig_H4) * 1048576);
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002218:	051b      	lsls	r3, r3, #20
 800221a:	617b      	str	r3, [r7, #20]
	var4 = ((int32_t)calib_data->dig_H5) * var1;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002222:	461a      	mov	r2, r3
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	fb02 f303 	mul.w	r3, r2, r3
 800222a:	613b      	str	r3, [r7, #16]
	var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	1ad2      	subs	r2, r2, r3
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800223a:	2b00      	cmp	r3, #0
 800223c:	da02      	bge.n	8002244 <compensate_humidity+0x54>
 800223e:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8002242:	337f      	adds	r3, #127	@ 0x7f
 8002244:	13db      	asrs	r3, r3, #15
 8002246:	60fb      	str	r3, [r7, #12]
	var2 = (var1 * ((int32_t)calib_data->dig_H6)) / 1024;
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	f993 3022 	ldrsb.w	r3, [r3, #34]	@ 0x22
 800224e:	461a      	mov	r2, r3
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	fb02 f303 	mul.w	r3, r2, r3
 8002256:	2b00      	cmp	r3, #0
 8002258:	da01      	bge.n	800225e <compensate_humidity+0x6e>
 800225a:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 800225e:	129b      	asrs	r3, r3, #10
 8002260:	61bb      	str	r3, [r7, #24]
	var3 = (var1 * ((int32_t)calib_data->dig_H3)) / 2048;
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	7f1b      	ldrb	r3, [r3, #28]
 8002266:	461a      	mov	r2, r3
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	fb02 f303 	mul.w	r3, r2, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	da01      	bge.n	8002276 <compensate_humidity+0x86>
 8002272:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8002276:	12db      	asrs	r3, r3, #11
 8002278:	617b      	str	r3, [r7, #20]
	var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	fb02 f303 	mul.w	r3, r2, r3
 8002286:	2b00      	cmp	r3, #0
 8002288:	da01      	bge.n	800228e <compensate_humidity+0x9e>
 800228a:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 800228e:	129b      	asrs	r3, r3, #10
 8002290:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8002294:	613b      	str	r3, [r7, #16]
	var2 = ((var4 * ((int32_t)calib_data->dig_H2)) + 8192) / 16384;
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800229c:	461a      	mov	r2, r3
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	fb02 f303 	mul.w	r3, r2, r3
 80022a4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	da02      	bge.n	80022b2 <compensate_humidity+0xc2>
 80022ac:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 80022b0:	333f      	adds	r3, #63	@ 0x3f
 80022b2:	139b      	asrs	r3, r3, #14
 80022b4:	61bb      	str	r3, [r7, #24]
	var3 = var5 * var2;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	fb02 f303 	mul.w	r3, r2, r3
 80022be:	617b      	str	r3, [r7, #20]
	var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	da02      	bge.n	80022cc <compensate_humidity+0xdc>
 80022c6:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 80022ca:	337f      	adds	r3, #127	@ 0x7f
 80022cc:	13db      	asrs	r3, r3, #15
 80022ce:	461a      	mov	r2, r3
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	da02      	bge.n	80022dc <compensate_humidity+0xec>
 80022d6:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 80022da:	337f      	adds	r3, #127	@ 0x7f
 80022dc:	13db      	asrs	r3, r3, #15
 80022de:	fb02 f303 	mul.w	r3, r2, r3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	da00      	bge.n	80022e8 <compensate_humidity+0xf8>
 80022e6:	337f      	adds	r3, #127	@ 0x7f
 80022e8:	11db      	asrs	r3, r3, #7
 80022ea:	613b      	str	r3, [r7, #16]
	var5 = var3 - ((var4 * ((int32_t)calib_data->dig_H1)) / 16);
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	7e1b      	ldrb	r3, [r3, #24]
 80022f0:	461a      	mov	r2, r3
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	fb02 f303 	mul.w	r3, r2, r3
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	da00      	bge.n	80022fe <compensate_humidity+0x10e>
 80022fc:	330f      	adds	r3, #15
 80022fe:	111b      	asrs	r3, r3, #4
 8002300:	425b      	negs	r3, r3
 8002302:	461a      	mov	r2, r3
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	4413      	add	r3, r2
 8002308:	60fb      	str	r3, [r7, #12]
	var5 = (var5 < 0 ? 0 : var5);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002310:	60fb      	str	r3, [r7, #12]
	var5 = (var5 > 419430400 ? 419430400 : var5);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8002318:	bfa8      	it	ge
 800231a:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 800231e:	60fb      	str	r3, [r7, #12]
	humidity = (uint32_t)(var5 / 4096);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2b00      	cmp	r3, #0
 8002324:	da01      	bge.n	800232a <compensate_humidity+0x13a>
 8002326:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 800232a:	131b      	asrs	r3, r3, #12
 800232c:	627b      	str	r3, [r7, #36]	@ 0x24

	if (humidity > humidity_max)
 800232e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002330:	6a3b      	ldr	r3, [r7, #32]
 8002332:	429a      	cmp	r2, r3
 8002334:	d901      	bls.n	800233a <compensate_humidity+0x14a>
		humidity = humidity_max;
 8002336:	6a3b      	ldr	r3, [r7, #32]
 8002338:	627b      	str	r3, [r7, #36]	@ 0x24

	return humidity;
 800233a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800233c:	4618      	mov	r0, r3
 800233e:	372c      	adds	r7, #44	@ 0x2c
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b08a      	sub	sp, #40	@ 0x28
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 8002350:	2388      	movs	r3, #136	@ 0x88
 8002352:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	/* Array to store calibration data */
	uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = {0};
 8002356:	2300      	movs	r3, #0
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	f107 0310 	add.w	r3, r7, #16
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]
 8002362:	605a      	str	r2, [r3, #4]
 8002364:	609a      	str	r2, [r3, #8]
 8002366:	60da      	str	r2, [r3, #12]
 8002368:	611a      	str	r2, [r3, #16]
 800236a:	829a      	strh	r2, [r3, #20]

	/* Read the calibration data from the sensor */
	rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 800236c:	f107 010c 	add.w	r1, r7, #12
 8002370:	f897 0026 	ldrb.w	r0, [r7, #38]	@ 0x26
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	221a      	movs	r2, #26
 8002378:	f7fe fee7 	bl	800114a <bme280_get_regs>
 800237c:	4603      	mov	r3, r0
 800237e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (rslt == BME280_OK) {
 8002382:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002386:	2b00      	cmp	r3, #0
 8002388:	d11d      	bne.n	80023c6 <get_calib_data+0x7e>
		/* Parse temperature and pressure calibration data and store
		   it in device structure */
		parse_temp_press_calib_data(calib_data, dev);
 800238a:	f107 030c 	add.w	r3, r7, #12
 800238e:	6879      	ldr	r1, [r7, #4]
 8002390:	4618      	mov	r0, r3
 8002392:	f000 f84a 	bl	800242a <parse_temp_press_calib_data>

		reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 8002396:	23e1      	movs	r3, #225	@ 0xe1
 8002398:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		/* Read the humidity calibration data from the sensor */
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 800239c:	f107 010c 	add.w	r1, r7, #12
 80023a0:	f897 0026 	ldrb.w	r0, [r7, #38]	@ 0x26
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2207      	movs	r2, #7
 80023a8:	f7fe fecf 	bl	800114a <bme280_get_regs>
 80023ac:	4603      	mov	r3, r0
 80023ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (rslt == BME280_OK) {
 80023b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d105      	bne.n	80023c6 <get_calib_data+0x7e>
			/* Parse humidity calibration data and store it in
			   device structure */
			parse_humidity_calib_data(calib_data, dev);
 80023ba:	f107 030c 	add.w	r3, r7, #12
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f000 f8e2 	bl	800258a <parse_humidity_calib_data>
		}
	}

	return rslt;
 80023c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3728      	adds	r7, #40	@ 0x28
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 80023d2:	b480      	push	{r7}
 80023d4:	b087      	sub	sp, #28
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	60f8      	str	r0, [r7, #12]
 80023da:	60b9      	str	r1, [r7, #8]
 80023dc:	607a      	str	r2, [r7, #4]
 80023de:	70fb      	strb	r3, [r7, #3]
	uint8_t index;

	for (index = 1; index < len; index++) {
 80023e0:	2301      	movs	r3, #1
 80023e2:	75fb      	strb	r3, [r7, #23]
 80023e4:	e016      	b.n	8002414 <interleave_reg_addr+0x42>
		temp_buff[(index * 2) - 1] = reg_addr[index];
 80023e6:	7dfb      	ldrb	r3, [r7, #23]
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	441a      	add	r2, r3
 80023ec:	7dfb      	ldrb	r3, [r7, #23]
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	3b01      	subs	r3, #1
 80023f2:	68b9      	ldr	r1, [r7, #8]
 80023f4:	440b      	add	r3, r1
 80023f6:	7812      	ldrb	r2, [r2, #0]
 80023f8:	701a      	strb	r2, [r3, #0]
		temp_buff[index * 2] = reg_data[index];
 80023fa:	7dfb      	ldrb	r3, [r7, #23]
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	441a      	add	r2, r3
 8002400:	7dfb      	ldrb	r3, [r7, #23]
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	4619      	mov	r1, r3
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	440b      	add	r3, r1
 800240a:	7812      	ldrb	r2, [r2, #0]
 800240c:	701a      	strb	r2, [r3, #0]
	for (index = 1; index < len; index++) {
 800240e:	7dfb      	ldrb	r3, [r7, #23]
 8002410:	3301      	adds	r3, #1
 8002412:	75fb      	strb	r3, [r7, #23]
 8002414:	7dfa      	ldrb	r2, [r7, #23]
 8002416:	78fb      	ldrb	r3, [r7, #3]
 8002418:	429a      	cmp	r2, r3
 800241a:	d3e4      	bcc.n	80023e6 <interleave_reg_addr+0x14>
	}
}
 800241c:	bf00      	nop
 800241e:	bf00      	nop
 8002420:	371c      	adds	r7, #28
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr

0800242a <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 800242a:	b480      	push	{r7}
 800242c:	b085      	sub	sp, #20
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
 8002432:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	3310      	adds	r3, #16
 8002438:	60fb      	str	r3, [r7, #12]

	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	3301      	adds	r3, #1
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	021b      	lsls	r3, r3, #8
 8002442:	b21a      	sxth	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	b21b      	sxth	r3, r3
 800244a:	4313      	orrs	r3, r2
 800244c:	b21b      	sxth	r3, r3
 800244e:	b29a      	uxth	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	801a      	strh	r2, [r3, #0]
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	3303      	adds	r3, #3
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	021b      	lsls	r3, r3, #8
 800245c:	b21a      	sxth	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	3302      	adds	r3, #2
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	b21b      	sxth	r3, r3
 8002466:	4313      	orrs	r3, r2
 8002468:	b21a      	sxth	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	805a      	strh	r2, [r3, #2]
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	3305      	adds	r3, #5
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	021b      	lsls	r3, r3, #8
 8002476:	b21a      	sxth	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3304      	adds	r3, #4
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	b21b      	sxth	r3, r3
 8002480:	4313      	orrs	r3, r2
 8002482:	b21a      	sxth	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	809a      	strh	r2, [r3, #4]
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3307      	adds	r3, #7
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	021b      	lsls	r3, r3, #8
 8002490:	b21a      	sxth	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	3306      	adds	r3, #6
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	b21b      	sxth	r3, r3
 800249a:	4313      	orrs	r3, r2
 800249c:	b21b      	sxth	r3, r3
 800249e:	b29a      	uxth	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	80da      	strh	r2, [r3, #6]
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3309      	adds	r3, #9
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	021b      	lsls	r3, r3, #8
 80024ac:	b21a      	sxth	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	3308      	adds	r3, #8
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	b21b      	sxth	r3, r3
 80024b6:	4313      	orrs	r3, r2
 80024b8:	b21a      	sxth	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	811a      	strh	r2, [r3, #8]
	calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	330b      	adds	r3, #11
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	021b      	lsls	r3, r3, #8
 80024c6:	b21a      	sxth	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	330a      	adds	r3, #10
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	b21b      	sxth	r3, r3
 80024d0:	4313      	orrs	r3, r2
 80024d2:	b21a      	sxth	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	815a      	strh	r2, [r3, #10]
	calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	330d      	adds	r3, #13
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	021b      	lsls	r3, r3, #8
 80024e0:	b21a      	sxth	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	330c      	adds	r3, #12
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	b21b      	sxth	r3, r3
 80024ea:	4313      	orrs	r3, r2
 80024ec:	b21a      	sxth	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	819a      	strh	r2, [r3, #12]
	calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	330f      	adds	r3, #15
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	021b      	lsls	r3, r3, #8
 80024fa:	b21a      	sxth	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	330e      	adds	r3, #14
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	b21b      	sxth	r3, r3
 8002504:	4313      	orrs	r3, r2
 8002506:	b21a      	sxth	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	81da      	strh	r2, [r3, #14]
	calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3311      	adds	r3, #17
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	021b      	lsls	r3, r3, #8
 8002514:	b21a      	sxth	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	3310      	adds	r3, #16
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	b21b      	sxth	r3, r3
 800251e:	4313      	orrs	r3, r2
 8002520:	b21a      	sxth	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	821a      	strh	r2, [r3, #16]
	calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	3313      	adds	r3, #19
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	021b      	lsls	r3, r3, #8
 800252e:	b21a      	sxth	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	3312      	adds	r3, #18
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	b21b      	sxth	r3, r3
 8002538:	4313      	orrs	r3, r2
 800253a:	b21a      	sxth	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	825a      	strh	r2, [r3, #18]
	calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	3315      	adds	r3, #21
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	021b      	lsls	r3, r3, #8
 8002548:	b21a      	sxth	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	3314      	adds	r3, #20
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	b21b      	sxth	r3, r3
 8002552:	4313      	orrs	r3, r2
 8002554:	b21a      	sxth	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	829a      	strh	r2, [r3, #20]
	calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	3317      	adds	r3, #23
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	021b      	lsls	r3, r3, #8
 8002562:	b21a      	sxth	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	3316      	adds	r3, #22
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	b21b      	sxth	r3, r3
 800256c:	4313      	orrs	r3, r2
 800256e:	b21a      	sxth	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	82da      	strh	r2, [r3, #22]
	calib_data->dig_H1 = reg_data[25];
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	3319      	adds	r3, #25
 8002578:	781a      	ldrb	r2, [r3, #0]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	761a      	strb	r2, [r3, #24]

}
 800257e:	bf00      	nop
 8002580:	3714      	adds	r7, #20
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr

0800258a <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 800258a:	b480      	push	{r7}
 800258c:	b087      	sub	sp, #28
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
 8002592:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	3310      	adds	r3, #16
 8002598:	617b      	str	r3, [r7, #20]
	int16_t dig_H4_lsb;
	int16_t dig_H4_msb;
	int16_t dig_H5_lsb;
	int16_t dig_H5_msb;

	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	3301      	adds	r3, #1
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	021b      	lsls	r3, r3, #8
 80025a2:	b21a      	sxth	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	b21b      	sxth	r3, r3
 80025aa:	4313      	orrs	r3, r2
 80025ac:	b21a      	sxth	r2, r3
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	835a      	strh	r2, [r3, #26]
	calib_data->dig_H3 = reg_data[2];
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	3302      	adds	r3, #2
 80025b6:	781a      	ldrb	r2, [r3, #0]
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	771a      	strb	r2, [r3, #28]

	dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	3303      	adds	r3, #3
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	b25b      	sxtb	r3, r3
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	011b      	lsls	r3, r3, #4
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	827b      	strh	r3, [r7, #18]
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	3304      	adds	r3, #4
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	b21b      	sxth	r3, r3
 80025d4:	f003 030f 	and.w	r3, r3, #15
 80025d8:	823b      	strh	r3, [r7, #16]
	calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 80025da:	8a7a      	ldrh	r2, [r7, #18]
 80025dc:	8a3b      	ldrh	r3, [r7, #16]
 80025de:	4313      	orrs	r3, r2
 80025e0:	b21a      	sxth	r2, r3
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	83da      	strh	r2, [r3, #30]

	dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	3305      	adds	r3, #5
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	b25b      	sxtb	r3, r3
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	011b      	lsls	r3, r3, #4
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	81fb      	strh	r3, [r7, #14]
	dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	3304      	adds	r3, #4
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	091b      	lsrs	r3, r3, #4
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	81bb      	strh	r3, [r7, #12]
	calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 8002602:	89fa      	ldrh	r2, [r7, #14]
 8002604:	89bb      	ldrh	r3, [r7, #12]
 8002606:	4313      	orrs	r3, r2
 8002608:	b21a      	sxth	r2, r3
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	841a      	strh	r2, [r3, #32]
	calib_data->dig_H6 = (int8_t)reg_data[6];
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	3306      	adds	r3, #6
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	b25a      	sxtb	r2, r3
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 800261c:	bf00      	nop
 800261e:	371c      	adds	r7, #28
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	4603      	mov	r3, r0
 8002630:	460a      	mov	r2, r1
 8002632:	71fb      	strb	r3, [r7, #7]
 8002634:	4613      	mov	r3, r2
 8002636:	71bb      	strb	r3, [r7, #6]
	uint8_t settings_changed = FALSE;
 8002638:	2300      	movs	r3, #0
 800263a:	73fb      	strb	r3, [r7, #15]

	if (sub_settings & desired_settings) {
 800263c:	79fa      	ldrb	r2, [r7, #7]
 800263e:	79bb      	ldrb	r3, [r7, #6]
 8002640:	4013      	ands	r3, r2
 8002642:	b2db      	uxtb	r3, r3
 8002644:	2b00      	cmp	r3, #0
 8002646:	d002      	beq.n	800264e <are_settings_changed+0x26>
		/* User wants to modify this particular settings */
		settings_changed = TRUE;
 8002648:	2301      	movs	r3, #1
 800264a:	73fb      	strb	r3, [r7, #15]
 800264c:	e001      	b.n	8002652 <are_settings_changed+0x2a>
	} else {
		/* User don't want to modify this particular settings */
		settings_changed = FALSE;
 800264e:	2300      	movs	r3, #0
 8002650:	73fb      	strb	r3, [r7, #15]
	}

	return settings_changed;
 8002652:	7bfb      	ldrb	r3, [r7, #15]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3714      	adds	r7, #20
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00b      	beq.n	8002686 <null_ptr_check+0x26>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d007      	beq.n	8002686 <null_ptr_check+0x26>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d003      	beq.n	8002686 <null_ptr_check+0x26>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d102      	bne.n	800268c <null_ptr_check+0x2c>
		/* Device structure pointer is not valid */
		rslt = BME280_E_NULL_PTR;
 8002686:	23ff      	movs	r3, #255	@ 0xff
 8002688:	73fb      	strb	r3, [r7, #15]
 800268a:	e001      	b.n	8002690 <null_ptr_check+0x30>
	} else {
		/* Device structure is fine */
		rslt = BME280_OK;
 800268c:	2300      	movs	r3, #0
 800268e:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8002690:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002694:	4618      	mov	r0, r3
 8002696:	3714      	adds	r7, #20
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <FIRFilter_Init>:
static float MAF_IMPULSE_RESPONSE [4] = {0.25f , 0.25f , 0.25f , 0.25f};



void FIRFilter_Init(FIRFilter *fir)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
	for (uint8_t n = 0; n< FIR_FILTER_LENGHT; n++)
 80026a8:	2300      	movs	r3, #0
 80026aa:	73fb      	strb	r3, [r7, #15]
 80026ac:	e009      	b.n	80026c2 <FIRFilter_Init+0x22>
	{
		fir->buf[n] =0.0f; // filtre buffer temizleme
 80026ae:	7bfb      	ldrb	r3, [r7, #15]
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	4413      	add	r3, r2
 80026b6:	f04f 0200 	mov.w	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
	for (uint8_t n = 0; n< FIR_FILTER_LENGHT; n++)
 80026bc:	7bfb      	ldrb	r3, [r7, #15]
 80026be:	3301      	adds	r3, #1
 80026c0:	73fb      	strb	r3, [r7, #15]
 80026c2:	7bfb      	ldrb	r3, [r7, #15]
 80026c4:	2b0f      	cmp	r3, #15
 80026c6:	d9f2      	bls.n	80026ae <FIRFilter_Init+0xe>

	}

	fir->bufIndex =0; // index reset
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	fir->out = 0; // clear output
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f04f 0200 	mov.w	r2, #0
 80026d6:	645a      	str	r2, [r3, #68]	@ 0x44
}
 80026d8:	bf00      	nop
 80026da:	3714      	adds	r7, #20
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <FIRFilter_Update>:




float FIRFilter_Update(FIRFilter *fir , float inp)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	ed87 0a00 	vstr	s0, [r7]
	// son gelen veriyi buffer'a kaydet
	fir->buf[fir->bufIndex] =inp;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	4413      	add	r3, r2
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	601a      	str	r2, [r3, #0]

	// buffer indexini arttır
	fir->bufIndex++;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002706:	3301      	adds	r3, #1
 8002708:	b2da      	uxtb	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	// index uzunluğu taşması kontrolü

	if(fir->bufIndex == FIR_FILTER_LENGHT) fir->bufIndex=0;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002716:	2b10      	cmp	r3, #16
 8002718:	d103      	bne.n	8002722 <FIRFilter_Update+0x3e>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	fir->out =0;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f04f 0200 	mov.w	r2, #0
 8002728:	645a      	str	r2, [r3, #68]	@ 0x44

	uint8_t sumIndex = fir->bufIndex;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002730:	73fb      	strb	r3, [r7, #15]

	for (uint8_t n = 0; n< FIR_FILTER_LENGHT; n++)
 8002732:	2300      	movs	r3, #0
 8002734:	73bb      	strb	r3, [r7, #14]
 8002736:	e021      	b.n	800277c <FIRFilter_Update+0x98>
	{
		// index kontrol
		if(sumIndex >0) sumIndex --;
 8002738:	7bfb      	ldrb	r3, [r7, #15]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <FIRFilter_Update+0x62>
 800273e:	7bfb      	ldrb	r3, [r7, #15]
 8002740:	3b01      	subs	r3, #1
 8002742:	73fb      	strb	r3, [r7, #15]
 8002744:	e001      	b.n	800274a <FIRFilter_Update+0x66>
		else sumIndex = FIR_FILTER_LENGHT-1;
 8002746:	230f      	movs	r3, #15
 8002748:	73fb      	strb	r3, [r7, #15]

		// convulution toplam kısmı
		fir->out += FIR_IMPULSE_RESPONSE[n] * fir->buf[sumIndex];
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 8002750:	7bbb      	ldrb	r3, [r7, #14]
 8002752:	4a11      	ldr	r2, [pc, #68]	@ (8002798 <FIRFilter_Update+0xb4>)
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	4413      	add	r3, r2
 8002758:	edd3 6a00 	vldr	s13, [r3]
 800275c:	7bfb      	ldrb	r3, [r7, #15]
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	4413      	add	r3, r2
 8002764:	edd3 7a00 	vldr	s15, [r3]
 8002768:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800276c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
	for (uint8_t n = 0; n< FIR_FILTER_LENGHT; n++)
 8002776:	7bbb      	ldrb	r3, [r7, #14]
 8002778:	3301      	adds	r3, #1
 800277a:	73bb      	strb	r3, [r7, #14]
 800277c:	7bbb      	ldrb	r3, [r7, #14]
 800277e:	2b0f      	cmp	r3, #15
 8002780:	d9da      	bls.n	8002738 <FIRFilter_Update+0x54>

	}

	return fir->out;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002786:	ee07 3a90 	vmov	s15, r3

}
 800278a:	eeb0 0a67 	vmov.f32	s0, s15
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr
 8002798:	20000000 	.word	0x20000000

0800279c <MAFilter_Init>:



void MAFilter_Init(FIRFilter *fir)
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
	for (uint8_t n = 0; n< MAV_FILTER_LENGHT; n++)
 80027a4:	2300      	movs	r3, #0
 80027a6:	73fb      	strb	r3, [r7, #15]
 80027a8:	e009      	b.n	80027be <MAFilter_Init+0x22>
	{
		fir->buf[n] =0.0f; // filtre buffer temizleme
 80027aa:	7bfb      	ldrb	r3, [r7, #15]
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	4413      	add	r3, r2
 80027b2:	f04f 0200 	mov.w	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]
	for (uint8_t n = 0; n< MAV_FILTER_LENGHT; n++)
 80027b8:	7bfb      	ldrb	r3, [r7, #15]
 80027ba:	3301      	adds	r3, #1
 80027bc:	73fb      	strb	r3, [r7, #15]
 80027be:	7bfb      	ldrb	r3, [r7, #15]
 80027c0:	2b03      	cmp	r3, #3
 80027c2:	d9f2      	bls.n	80027aa <MAFilter_Init+0xe>

	}

	fir->bufIndex =0; // index reset
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	fir->out = 0; // clear output
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f04f 0200 	mov.w	r2, #0
 80027d2:	645a      	str	r2, [r3, #68]	@ 0x44
}
 80027d4:	bf00      	nop
 80027d6:	3714      	adds	r7, #20
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <LSM6DSLTR_Init>:

extern LSM6DSLTR;
extern I2C_HandleTypeDef hi2c1;

void LSM6DSLTR_Init()
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af04      	add	r7, sp, #16
	uint8_t data1;

	// Gyro ve Accel interrupt pin 1 aktif
	data1= 0x03;
 80027e6:	2303      	movs	r3, #3
 80027e8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, LSM6DSL_Write_Address, INT1_CTR, 1, &data1, 1, 1);
 80027ea:	2301      	movs	r3, #1
 80027ec:	9302      	str	r3, [sp, #8]
 80027ee:	2301      	movs	r3, #1
 80027f0:	9301      	str	r3, [sp, #4]
 80027f2:	1dfb      	adds	r3, r7, #7
 80027f4:	9300      	str	r3, [sp, #0]
 80027f6:	2301      	movs	r3, #1
 80027f8:	220d      	movs	r2, #13
 80027fa:	21d4      	movs	r1, #212	@ 0xd4
 80027fc:	481f      	ldr	r0, [pc, #124]	@ (800287c <LSM6DSLTR_Init+0x9c>)
 80027fe:	f004 fe2d 	bl	800745c <HAL_I2C_Mem_Write>

	data1 = 0xA4; // 16G 6.66khz
 8002802:	23a4      	movs	r3, #164	@ 0xa4
 8002804:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, LSM6DSL_Write_Address, CTRL1_XL, 1, &data1,  1, 1);
 8002806:	2301      	movs	r3, #1
 8002808:	9302      	str	r3, [sp, #8]
 800280a:	2301      	movs	r3, #1
 800280c:	9301      	str	r3, [sp, #4]
 800280e:	1dfb      	adds	r3, r7, #7
 8002810:	9300      	str	r3, [sp, #0]
 8002812:	2301      	movs	r3, #1
 8002814:	2210      	movs	r2, #16
 8002816:	21d4      	movs	r1, #212	@ 0xd4
 8002818:	4818      	ldr	r0, [pc, #96]	@ (800287c <LSM6DSLTR_Init+0x9c>)
 800281a:	f004 fe1f 	bl	800745c <HAL_I2C_Mem_Write>

	data1 = 0xA4; // 500 dps 6.6khz
 800281e:	23a4      	movs	r3, #164	@ 0xa4
 8002820:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, LSM6DSL_Write_Address,CTRL2_G, 1, &data1, 1, 1);
 8002822:	2301      	movs	r3, #1
 8002824:	9302      	str	r3, [sp, #8]
 8002826:	2301      	movs	r3, #1
 8002828:	9301      	str	r3, [sp, #4]
 800282a:	1dfb      	adds	r3, r7, #7
 800282c:	9300      	str	r3, [sp, #0]
 800282e:	2301      	movs	r3, #1
 8002830:	2211      	movs	r2, #17
 8002832:	21d4      	movs	r1, #212	@ 0xd4
 8002834:	4811      	ldr	r0, [pc, #68]	@ (800287c <LSM6DSLTR_Init+0x9c>)
 8002836:	f004 fe11 	bl	800745c <HAL_I2C_Mem_Write>

	data1= 0x00;
 800283a:	2300      	movs	r3, #0
 800283c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, LSM6DSL_Write_Address, CTRL3_C, 1, &data1, 1, 1);
 800283e:	2301      	movs	r3, #1
 8002840:	9302      	str	r3, [sp, #8]
 8002842:	2301      	movs	r3, #1
 8002844:	9301      	str	r3, [sp, #4]
 8002846:	1dfb      	adds	r3, r7, #7
 8002848:	9300      	str	r3, [sp, #0]
 800284a:	2301      	movs	r3, #1
 800284c:	2212      	movs	r2, #18
 800284e:	21d4      	movs	r1, #212	@ 0xd4
 8002850:	480a      	ldr	r0, [pc, #40]	@ (800287c <LSM6DSLTR_Init+0x9c>)
 8002852:	f004 fe03 	bl	800745c <HAL_I2C_Mem_Write>

	data1= 0x08;
 8002856:	2308      	movs	r3, #8
 8002858:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, LSM6DSL_Write_Address, CTRL4_C, 1, &data1, 1, 1);
 800285a:	2301      	movs	r3, #1
 800285c:	9302      	str	r3, [sp, #8]
 800285e:	2301      	movs	r3, #1
 8002860:	9301      	str	r3, [sp, #4]
 8002862:	1dfb      	adds	r3, r7, #7
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	2301      	movs	r3, #1
 8002868:	2213      	movs	r2, #19
 800286a:	21d4      	movs	r1, #212	@ 0xd4
 800286c:	4803      	ldr	r0, [pc, #12]	@ (800287c <LSM6DSLTR_Init+0x9c>)
 800286e:	f004 fdf5 	bl	800745c <HAL_I2C_Mem_Write>




}
 8002872:	bf00      	nop
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	200002a8 	.word	0x200002a8

08002880 <LSM6DSLTR_Read_Accel_Data>:


void LSM6DSLTR_Read_Accel_Data(LSM6DSLTR* Lsm_Sensor)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b088      	sub	sp, #32
 8002884:	af04      	add	r7, sp, #16
 8002886:	6078      	str	r0, [r7, #4]
	uint8_t data;
	uint8_t s;
	int16_t accel;


	HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTZ_L_XL, 1, &data, 1, 1);
 8002888:	2301      	movs	r3, #1
 800288a:	9302      	str	r3, [sp, #8]
 800288c:	2301      	movs	r3, #1
 800288e:	9301      	str	r3, [sp, #4]
 8002890:	f107 030d 	add.w	r3, r7, #13
 8002894:	9300      	str	r3, [sp, #0]
 8002896:	2301      	movs	r3, #1
 8002898:	222c      	movs	r2, #44	@ 0x2c
 800289a:	21d5      	movs	r1, #213	@ 0xd5
 800289c:	4864      	ldr	r0, [pc, #400]	@ (8002a30 <LSM6DSLTR_Read_Accel_Data+0x1b0>)
 800289e:	f004 fed7 	bl	8007650 <HAL_I2C_Mem_Read>

	HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTZ_H_XL, 1, &s, 1, 1);
 80028a2:	2301      	movs	r3, #1
 80028a4:	9302      	str	r3, [sp, #8]
 80028a6:	2301      	movs	r3, #1
 80028a8:	9301      	str	r3, [sp, #4]
 80028aa:	f107 030c 	add.w	r3, r7, #12
 80028ae:	9300      	str	r3, [sp, #0]
 80028b0:	2301      	movs	r3, #1
 80028b2:	222d      	movs	r2, #45	@ 0x2d
 80028b4:	21d5      	movs	r1, #213	@ 0xd5
 80028b6:	485e      	ldr	r0, [pc, #376]	@ (8002a30 <LSM6DSLTR_Read_Accel_Data+0x1b0>)
 80028b8:	f004 feca 	bl	8007650 <HAL_I2C_Mem_Read>

	accel = (int16_t) ( (s << 8 ) | (data));
 80028bc:	7b3b      	ldrb	r3, [r7, #12]
 80028be:	021b      	lsls	r3, r3, #8
 80028c0:	b21a      	sxth	r2, r3
 80028c2:	7b7b      	ldrb	r3, [r7, #13]
 80028c4:	b21b      	sxth	r3, r3
 80028c6:	4313      	orrs	r3, r2
 80028c8:	81fb      	strh	r3, [r7, #14]

	Lsm_Sensor->Accel_Z = (float)accel* 0.000488*9.81; // 16g mg/LSB 0.488
 80028ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80028ce:	ee07 3a90 	vmov	s15, r3
 80028d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028d6:	ee17 0a90 	vmov	r0, s15
 80028da:	f7fd fe4d 	bl	8000578 <__aeabi_f2d>
 80028de:	a350      	add	r3, pc, #320	@ (adr r3, 8002a20 <LSM6DSLTR_Read_Accel_Data+0x1a0>)
 80028e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e4:	f7fd fea0 	bl	8000628 <__aeabi_dmul>
 80028e8:	4602      	mov	r2, r0
 80028ea:	460b      	mov	r3, r1
 80028ec:	4610      	mov	r0, r2
 80028ee:	4619      	mov	r1, r3
 80028f0:	a34d      	add	r3, pc, #308	@ (adr r3, 8002a28 <LSM6DSLTR_Read_Accel_Data+0x1a8>)
 80028f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f6:	f7fd fe97 	bl	8000628 <__aeabi_dmul>
 80028fa:	4602      	mov	r2, r0
 80028fc:	460b      	mov	r3, r1
 80028fe:	4610      	mov	r0, r2
 8002900:	4619      	mov	r1, r3
 8002902:	f7fe f989 	bl	8000c18 <__aeabi_d2f>
 8002906:	4602      	mov	r2, r0
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	609a      	str	r2, [r3, #8]



	HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTX_L_XL, 1, &data, 1, 1);
 800290c:	2301      	movs	r3, #1
 800290e:	9302      	str	r3, [sp, #8]
 8002910:	2301      	movs	r3, #1
 8002912:	9301      	str	r3, [sp, #4]
 8002914:	f107 030d 	add.w	r3, r7, #13
 8002918:	9300      	str	r3, [sp, #0]
 800291a:	2301      	movs	r3, #1
 800291c:	2228      	movs	r2, #40	@ 0x28
 800291e:	21d5      	movs	r1, #213	@ 0xd5
 8002920:	4843      	ldr	r0, [pc, #268]	@ (8002a30 <LSM6DSLTR_Read_Accel_Data+0x1b0>)
 8002922:	f004 fe95 	bl	8007650 <HAL_I2C_Mem_Read>

	HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTX_H_XL, 1, &s, 1, 1);
 8002926:	2301      	movs	r3, #1
 8002928:	9302      	str	r3, [sp, #8]
 800292a:	2301      	movs	r3, #1
 800292c:	9301      	str	r3, [sp, #4]
 800292e:	f107 030c 	add.w	r3, r7, #12
 8002932:	9300      	str	r3, [sp, #0]
 8002934:	2301      	movs	r3, #1
 8002936:	2229      	movs	r2, #41	@ 0x29
 8002938:	21d5      	movs	r1, #213	@ 0xd5
 800293a:	483d      	ldr	r0, [pc, #244]	@ (8002a30 <LSM6DSLTR_Read_Accel_Data+0x1b0>)
 800293c:	f004 fe88 	bl	8007650 <HAL_I2C_Mem_Read>

	accel = (int16_t) ( (s << 8 ) | (data));
 8002940:	7b3b      	ldrb	r3, [r7, #12]
 8002942:	021b      	lsls	r3, r3, #8
 8002944:	b21a      	sxth	r2, r3
 8002946:	7b7b      	ldrb	r3, [r7, #13]
 8002948:	b21b      	sxth	r3, r3
 800294a:	4313      	orrs	r3, r2
 800294c:	81fb      	strh	r3, [r7, #14]

	Lsm_Sensor->Accel_X= (float)accel* 0.000488*9.81; // 16g mg/LSB 0.488
 800294e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002952:	ee07 3a90 	vmov	s15, r3
 8002956:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800295a:	ee17 0a90 	vmov	r0, s15
 800295e:	f7fd fe0b 	bl	8000578 <__aeabi_f2d>
 8002962:	a32f      	add	r3, pc, #188	@ (adr r3, 8002a20 <LSM6DSLTR_Read_Accel_Data+0x1a0>)
 8002964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002968:	f7fd fe5e 	bl	8000628 <__aeabi_dmul>
 800296c:	4602      	mov	r2, r0
 800296e:	460b      	mov	r3, r1
 8002970:	4610      	mov	r0, r2
 8002972:	4619      	mov	r1, r3
 8002974:	a32c      	add	r3, pc, #176	@ (adr r3, 8002a28 <LSM6DSLTR_Read_Accel_Data+0x1a8>)
 8002976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800297a:	f7fd fe55 	bl	8000628 <__aeabi_dmul>
 800297e:	4602      	mov	r2, r0
 8002980:	460b      	mov	r3, r1
 8002982:	4610      	mov	r0, r2
 8002984:	4619      	mov	r1, r3
 8002986:	f7fe f947 	bl	8000c18 <__aeabi_d2f>
 800298a:	4602      	mov	r2, r0
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	601a      	str	r2, [r3, #0]



	HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTY_L_XL, 1, &data, 1, 1);
 8002990:	2301      	movs	r3, #1
 8002992:	9302      	str	r3, [sp, #8]
 8002994:	2301      	movs	r3, #1
 8002996:	9301      	str	r3, [sp, #4]
 8002998:	f107 030d 	add.w	r3, r7, #13
 800299c:	9300      	str	r3, [sp, #0]
 800299e:	2301      	movs	r3, #1
 80029a0:	222a      	movs	r2, #42	@ 0x2a
 80029a2:	21d5      	movs	r1, #213	@ 0xd5
 80029a4:	4822      	ldr	r0, [pc, #136]	@ (8002a30 <LSM6DSLTR_Read_Accel_Data+0x1b0>)
 80029a6:	f004 fe53 	bl	8007650 <HAL_I2C_Mem_Read>

	HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTY_H_XL, 1, &s, 1, 1);
 80029aa:	2301      	movs	r3, #1
 80029ac:	9302      	str	r3, [sp, #8]
 80029ae:	2301      	movs	r3, #1
 80029b0:	9301      	str	r3, [sp, #4]
 80029b2:	f107 030c 	add.w	r3, r7, #12
 80029b6:	9300      	str	r3, [sp, #0]
 80029b8:	2301      	movs	r3, #1
 80029ba:	222b      	movs	r2, #43	@ 0x2b
 80029bc:	21d5      	movs	r1, #213	@ 0xd5
 80029be:	481c      	ldr	r0, [pc, #112]	@ (8002a30 <LSM6DSLTR_Read_Accel_Data+0x1b0>)
 80029c0:	f004 fe46 	bl	8007650 <HAL_I2C_Mem_Read>

	accel = (int16_t) ( (s << 8 ) | (data));
 80029c4:	7b3b      	ldrb	r3, [r7, #12]
 80029c6:	021b      	lsls	r3, r3, #8
 80029c8:	b21a      	sxth	r2, r3
 80029ca:	7b7b      	ldrb	r3, [r7, #13]
 80029cc:	b21b      	sxth	r3, r3
 80029ce:	4313      	orrs	r3, r2
 80029d0:	81fb      	strh	r3, [r7, #14]

	Lsm_Sensor->Accel_Y = (float)accel* 0.000488*9.81; // 16g mg/LSB 0.488
 80029d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029d6:	ee07 3a90 	vmov	s15, r3
 80029da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029de:	ee17 0a90 	vmov	r0, s15
 80029e2:	f7fd fdc9 	bl	8000578 <__aeabi_f2d>
 80029e6:	a30e      	add	r3, pc, #56	@ (adr r3, 8002a20 <LSM6DSLTR_Read_Accel_Data+0x1a0>)
 80029e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ec:	f7fd fe1c 	bl	8000628 <__aeabi_dmul>
 80029f0:	4602      	mov	r2, r0
 80029f2:	460b      	mov	r3, r1
 80029f4:	4610      	mov	r0, r2
 80029f6:	4619      	mov	r1, r3
 80029f8:	a30b      	add	r3, pc, #44	@ (adr r3, 8002a28 <LSM6DSLTR_Read_Accel_Data+0x1a8>)
 80029fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029fe:	f7fd fe13 	bl	8000628 <__aeabi_dmul>
 8002a02:	4602      	mov	r2, r0
 8002a04:	460b      	mov	r3, r1
 8002a06:	4610      	mov	r0, r2
 8002a08:	4619      	mov	r1, r3
 8002a0a:	f7fe f905 	bl	8000c18 <__aeabi_d2f>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	605a      	str	r2, [r3, #4]


}
 8002a14:	bf00      	nop
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	f3af 8000 	nop.w
 8002a20:	0a5accd5 	.word	0x0a5accd5
 8002a24:	3f3ffb48 	.word	0x3f3ffb48
 8002a28:	51eb851f 	.word	0x51eb851f
 8002a2c:	40239eb8 	.word	0x40239eb8
 8002a30:	200002a8 	.word	0x200002a8

08002a34 <LSM6DSLTR_Read_Gyro_Data>:

void LSM6DSLTR_Read_Gyro_Data(LSM6DSLTR* Lsm_Sensor){
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b088      	sub	sp, #32
 8002a38:	af04      	add	r7, sp, #16
 8002a3a:	6078      	str	r0, [r7, #4]
     	uint8_t data;
		uint8_t s;
		int16_t gyro;


		HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTX_L_G, 1, &data, 1, 1);
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	9302      	str	r3, [sp, #8]
 8002a40:	2301      	movs	r3, #1
 8002a42:	9301      	str	r3, [sp, #4]
 8002a44:	f107 030d 	add.w	r3, r7, #13
 8002a48:	9300      	str	r3, [sp, #0]
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	2222      	movs	r2, #34	@ 0x22
 8002a4e:	21d5      	movs	r1, #213	@ 0xd5
 8002a50:	4843      	ldr	r0, [pc, #268]	@ (8002b60 <LSM6DSLTR_Read_Gyro_Data+0x12c>)
 8002a52:	f004 fdfd 	bl	8007650 <HAL_I2C_Mem_Read>

		HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTX_H_G, 1, &s, 1, 1);
 8002a56:	2301      	movs	r3, #1
 8002a58:	9302      	str	r3, [sp, #8]
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	9301      	str	r3, [sp, #4]
 8002a5e:	f107 030c 	add.w	r3, r7, #12
 8002a62:	9300      	str	r3, [sp, #0]
 8002a64:	2301      	movs	r3, #1
 8002a66:	2223      	movs	r2, #35	@ 0x23
 8002a68:	21d5      	movs	r1, #213	@ 0xd5
 8002a6a:	483d      	ldr	r0, [pc, #244]	@ (8002b60 <LSM6DSLTR_Read_Gyro_Data+0x12c>)
 8002a6c:	f004 fdf0 	bl	8007650 <HAL_I2C_Mem_Read>

		gyro = (int16_t) ( (s << 8 ) | (data));
 8002a70:	7b3b      	ldrb	r3, [r7, #12]
 8002a72:	021b      	lsls	r3, r3, #8
 8002a74:	b21a      	sxth	r2, r3
 8002a76:	7b7b      	ldrb	r3, [r7, #13]
 8002a78:	b21b      	sxth	r3, r3
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	81fb      	strh	r3, [r7, #14]

		Lsm_Sensor->Gyro_X = (float)gyro*gyro_constant;
 8002a7e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a82:	ee07 3a90 	vmov	s15, r3
 8002a86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a8a:	4b36      	ldr	r3, [pc, #216]	@ (8002b64 <LSM6DSLTR_Read_Gyro_Data+0x130>)
 8002a8c:	edd3 7a00 	vldr	s15, [r3]
 8002a90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	edc3 7a03 	vstr	s15, [r3, #12]



		HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTY_L_G, 1, &data, 1, 1);
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	9302      	str	r3, [sp, #8]
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	9301      	str	r3, [sp, #4]
 8002aa2:	f107 030d 	add.w	r3, r7, #13
 8002aa6:	9300      	str	r3, [sp, #0]
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	2224      	movs	r2, #36	@ 0x24
 8002aac:	21d5      	movs	r1, #213	@ 0xd5
 8002aae:	482c      	ldr	r0, [pc, #176]	@ (8002b60 <LSM6DSLTR_Read_Gyro_Data+0x12c>)
 8002ab0:	f004 fdce 	bl	8007650 <HAL_I2C_Mem_Read>

		HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTY_H_G, 1, &s, 1, 1);
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	9302      	str	r3, [sp, #8]
 8002ab8:	2301      	movs	r3, #1
 8002aba:	9301      	str	r3, [sp, #4]
 8002abc:	f107 030c 	add.w	r3, r7, #12
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	2225      	movs	r2, #37	@ 0x25
 8002ac6:	21d5      	movs	r1, #213	@ 0xd5
 8002ac8:	4825      	ldr	r0, [pc, #148]	@ (8002b60 <LSM6DSLTR_Read_Gyro_Data+0x12c>)
 8002aca:	f004 fdc1 	bl	8007650 <HAL_I2C_Mem_Read>

		gyro = (int16_t) ( (s << 8 ) | (data));
 8002ace:	7b3b      	ldrb	r3, [r7, #12]
 8002ad0:	021b      	lsls	r3, r3, #8
 8002ad2:	b21a      	sxth	r2, r3
 8002ad4:	7b7b      	ldrb	r3, [r7, #13]
 8002ad6:	b21b      	sxth	r3, r3
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	81fb      	strh	r3, [r7, #14]

		Lsm_Sensor->Gyro_Y = (float)gyro*gyro_constant;
 8002adc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ae0:	ee07 3a90 	vmov	s15, r3
 8002ae4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ae8:	4b1e      	ldr	r3, [pc, #120]	@ (8002b64 <LSM6DSLTR_Read_Gyro_Data+0x130>)
 8002aea:	edd3 7a00 	vldr	s15, [r3]
 8002aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	edc3 7a04 	vstr	s15, [r3, #16]


		HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTZ_L_G, 1, &data, 1, 1);
 8002af8:	2301      	movs	r3, #1
 8002afa:	9302      	str	r3, [sp, #8]
 8002afc:	2301      	movs	r3, #1
 8002afe:	9301      	str	r3, [sp, #4]
 8002b00:	f107 030d 	add.w	r3, r7, #13
 8002b04:	9300      	str	r3, [sp, #0]
 8002b06:	2301      	movs	r3, #1
 8002b08:	2226      	movs	r2, #38	@ 0x26
 8002b0a:	21d5      	movs	r1, #213	@ 0xd5
 8002b0c:	4814      	ldr	r0, [pc, #80]	@ (8002b60 <LSM6DSLTR_Read_Gyro_Data+0x12c>)
 8002b0e:	f004 fd9f 	bl	8007650 <HAL_I2C_Mem_Read>

		HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTZ_H_G, 1, &s, 1, 1);
 8002b12:	2301      	movs	r3, #1
 8002b14:	9302      	str	r3, [sp, #8]
 8002b16:	2301      	movs	r3, #1
 8002b18:	9301      	str	r3, [sp, #4]
 8002b1a:	f107 030c 	add.w	r3, r7, #12
 8002b1e:	9300      	str	r3, [sp, #0]
 8002b20:	2301      	movs	r3, #1
 8002b22:	2227      	movs	r2, #39	@ 0x27
 8002b24:	21d5      	movs	r1, #213	@ 0xd5
 8002b26:	480e      	ldr	r0, [pc, #56]	@ (8002b60 <LSM6DSLTR_Read_Gyro_Data+0x12c>)
 8002b28:	f004 fd92 	bl	8007650 <HAL_I2C_Mem_Read>

		gyro = (int16_t) ( (s << 8 ) | (data));
 8002b2c:	7b3b      	ldrb	r3, [r7, #12]
 8002b2e:	021b      	lsls	r3, r3, #8
 8002b30:	b21a      	sxth	r2, r3
 8002b32:	7b7b      	ldrb	r3, [r7, #13]
 8002b34:	b21b      	sxth	r3, r3
 8002b36:	4313      	orrs	r3, r2
 8002b38:	81fb      	strh	r3, [r7, #14]

		Lsm_Sensor->Gyro_Z = (float)gyro*gyro_constant;
 8002b3a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b3e:	ee07 3a90 	vmov	s15, r3
 8002b42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b46:	4b07      	ldr	r3, [pc, #28]	@ (8002b64 <LSM6DSLTR_Read_Gyro_Data+0x130>)
 8002b48:	edd3 7a00 	vldr	s15, [r3]
 8002b4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	edc3 7a05 	vstr	s15, [r3, #20]

}
 8002b56:	bf00      	nop
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	200002a8 	.word	0x200002a8
 8002b64:	20000040 	.word	0x20000040

08002b68 <calculate_roll_pitch>:
	return HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8);

}


void calculate_roll_pitch(LSM6DSLTR *Lsm_Sensor) {
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	ed2d 8b02 	vpush	{d8}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
    Lsm_Sensor->Roll = atan2f(Lsm_Sensor->Accel_Y, sqrtf(Lsm_Sensor->Accel_X * Lsm_Sensor->Accel_X + Lsm_Sensor->Accel_Z * Lsm_Sensor->Accel_Z)) * 180.0f / 3.14;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	ed93 8a01 	vldr	s16, [r3, #4]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	ed93 7a00 	vldr	s14, [r3]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	edd3 7a00 	vldr	s15, [r3]
 8002b86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	edd3 6a02 	vldr	s13, [r3, #8]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	edd3 7a02 	vldr	s15, [r3, #8]
 8002b96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b9e:	eeb0 0a67 	vmov.f32	s0, s15
 8002ba2:	f00a fe43 	bl	800d82c <sqrtf>
 8002ba6:	eef0 7a40 	vmov.f32	s15, s0
 8002baa:	eef0 0a67 	vmov.f32	s1, s15
 8002bae:	eeb0 0a48 	vmov.f32	s0, s16
 8002bb2:	f00a fe39 	bl	800d828 <atan2f>
 8002bb6:	eef0 7a40 	vmov.f32	s15, s0
 8002bba:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8002c70 <calculate_roll_pitch+0x108>
 8002bbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bc2:	ee17 0a90 	vmov	r0, s15
 8002bc6:	f7fd fcd7 	bl	8000578 <__aeabi_f2d>
 8002bca:	a327      	add	r3, pc, #156	@ (adr r3, 8002c68 <calculate_roll_pitch+0x100>)
 8002bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd0:	f7fd fe54 	bl	800087c <__aeabi_ddiv>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	4610      	mov	r0, r2
 8002bda:	4619      	mov	r1, r3
 8002bdc:	f7fe f81c 	bl	8000c18 <__aeabi_d2f>
 8002be0:	4602      	mov	r2, r0
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	619a      	str	r2, [r3, #24]
    Lsm_Sensor->Pitch = atan2f(-Lsm_Sensor->Accel_X, sqrtf(Lsm_Sensor->Accel_Y * Lsm_Sensor->Accel_Y + Lsm_Sensor->Accel_Z * Lsm_Sensor->Accel_Z)) * 180.0f / 3.14;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	edd3 7a00 	vldr	s15, [r3]
 8002bec:	eeb1 8a67 	vneg.f32	s16, s15
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	ed93 7a01 	vldr	s14, [r3, #4]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	edd3 7a01 	vldr	s15, [r3, #4]
 8002bfc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	edd3 6a02 	vldr	s13, [r3, #8]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c14:	eeb0 0a67 	vmov.f32	s0, s15
 8002c18:	f00a fe08 	bl	800d82c <sqrtf>
 8002c1c:	eef0 7a40 	vmov.f32	s15, s0
 8002c20:	eef0 0a67 	vmov.f32	s1, s15
 8002c24:	eeb0 0a48 	vmov.f32	s0, s16
 8002c28:	f00a fdfe 	bl	800d828 <atan2f>
 8002c2c:	eef0 7a40 	vmov.f32	s15, s0
 8002c30:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8002c70 <calculate_roll_pitch+0x108>
 8002c34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c38:	ee17 0a90 	vmov	r0, s15
 8002c3c:	f7fd fc9c 	bl	8000578 <__aeabi_f2d>
 8002c40:	a309      	add	r3, pc, #36	@ (adr r3, 8002c68 <calculate_roll_pitch+0x100>)
 8002c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c46:	f7fd fe19 	bl	800087c <__aeabi_ddiv>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	4610      	mov	r0, r2
 8002c50:	4619      	mov	r1, r3
 8002c52:	f7fd ffe1 	bl	8000c18 <__aeabi_d2f>
 8002c56:	4602      	mov	r2, r0
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	61da      	str	r2, [r3, #28]
}
 8002c5c:	bf00      	nop
 8002c5e:	3708      	adds	r7, #8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	ecbd 8b02 	vpop	{d8}
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	51eb851f 	.word	0x51eb851f
 8002c6c:	40091eb8 	.word	0x40091eb8
 8002c70:	43340000 	.word	0x43340000

08002c74 <update_angles>:
void update_angles(LSM6DSLTR *Lsm_Sensor) {
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
    uint32_t current_time = HAL_GetTick(); // Şu anki zamanı al
 8002c7c:	f002 ff46 	bl	8005b0c <HAL_GetTick>
 8002c80:	60f8      	str	r0, [r7, #12]

    // Zaman farkını hesapla (saniye cinsinden)
    float dt = (current_time - prev_time) / 1000.0f;
 8002c82:	4b26      	ldr	r3, [pc, #152]	@ (8002d1c <update_angles+0xa8>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	ee07 3a90 	vmov	s15, r3
 8002c8e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c92:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8002d20 <update_angles+0xac>
 8002c96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c9a:	edc7 7a02 	vstr	s15, [r7, #8]

    // Roll ve pitch açılarını güncelle (tamamlayıcı filtre)
    Lsm_Sensor->Roll = ALPHA * (Lsm_Sensor->Roll + Lsm_Sensor->Gyro_X * dt) + (1 - ALPHA) * Lsm_Sensor->Roll;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	ed93 7a06 	vldr	s14, [r3, #24]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	edd3 6a03 	vldr	s13, [r3, #12]
 8002caa:	edd7 7a02 	vldr	s15, [r7, #8]
 8002cae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cb6:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8002d24 <update_angles+0xb0>
 8002cba:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	edd3 7a06 	vldr	s15, [r3, #24]
 8002cc4:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8002d28 <update_angles+0xb4>
 8002cc8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ccc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	edc3 7a06 	vstr	s15, [r3, #24]
    Lsm_Sensor->Pitch = ALPHA * (Lsm_Sensor->Pitch + Lsm_Sensor->Gyro_Y * dt) + (1 - ALPHA) * Lsm_Sensor->Pitch;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	ed93 7a07 	vldr	s14, [r3, #28]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	edd3 6a04 	vldr	s13, [r3, #16]
 8002ce2:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ce6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cee:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8002d24 <update_angles+0xb0>
 8002cf2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	edd3 7a07 	vldr	s15, [r3, #28]
 8002cfc:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8002d28 <update_angles+0xb4>
 8002d00:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	edc3 7a07 	vstr	s15, [r3, #28]

    // Yaw açısını jiroskop verileriyle güncelle (basit zamanla entegrasyon)
  //  Lsm_Sensor->Yaw += Lsm_Sensor->Gyro_Z * dt;

    // Önceki zamanı güncelle
    prev_time = current_time;
 8002d0e:	4a03      	ldr	r2, [pc, #12]	@ (8002d1c <update_angles+0xa8>)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6013      	str	r3, [r2, #0]
}
 8002d14:	bf00      	nop
 8002d16:	3710      	adds	r7, #16
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	2000025c 	.word	0x2000025c
 8002d20:	447a0000 	.word	0x447a0000
 8002d24:	3f7ae148 	.word	0x3f7ae148
 8002d28:	3ca3d700 	.word	0x3ca3d700

08002d2c <KalmanFilter_Init>:
 */


#include "kalman.h"

void KalmanFilter_Init(KalmanFilter *kf, float Q, float R, float initial_value) {
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	ed87 0a02 	vstr	s0, [r7, #8]
 8002d38:	edc7 0a01 	vstr	s1, [r7, #4]
 8002d3c:	ed87 1a00 	vstr	s2, [r7]
    kf->Q = Q;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	68ba      	ldr	r2, [r7, #8]
 8002d44:	601a      	str	r2, [r3, #0]
    kf->R = R;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	605a      	str	r2, [r3, #4]
    kf->x = initial_value;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	683a      	ldr	r2, [r7, #0]
 8002d50:	609a      	str	r2, [r3, #8]
    kf->P = 1.0;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002d58:	60da      	str	r2, [r3, #12]
    kf->K = 0.0;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f04f 0200 	mov.w	r2, #0
 8002d60:	611a      	str	r2, [r3, #16]
}
 8002d62:	bf00      	nop
 8002d64:	3714      	adds	r7, #20
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
	...

08002d70 <KalmanFilter_Update>:

float KalmanFilter_Update(KalmanFilter *kf, float measurement) {
 8002d70:	b5b0      	push	{r4, r5, r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	ed87 0a00 	vstr	s0, [r7]
    // Prediction update
    kf->P += kf->Q;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	ed93 7a03 	vldr	s14, [r3, #12]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	edd3 7a00 	vldr	s15, [r3]
 8002d88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	edc3 7a03 	vstr	s15, [r3, #12]

    // Measurement update
    kf->K = kf->P / (kf->P + kf->R);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	edd3 6a03 	vldr	s13, [r3, #12]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	ed93 7a03 	vldr	s14, [r3, #12]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	edd3 7a01 	vldr	s15, [r3, #4]
 8002da4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002da8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	edc3 7a04 	vstr	s15, [r3, #16]
    kf->x += kf->K * (measurement - kf->x);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	ed93 7a02 	vldr	s14, [r3, #8]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	edd3 6a04 	vldr	s13, [r3, #16]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	edd3 7a02 	vldr	s15, [r3, #8]
 8002dc4:	ed97 6a00 	vldr	s12, [r7]
 8002dc8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002dcc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	edc3 7a02 	vstr	s15, [r3, #8]
    kf->P *= (1.0 - kf->K);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7fd fbca 	bl	8000578 <__aeabi_f2d>
 8002de4:	4604      	mov	r4, r0
 8002de6:	460d      	mov	r5, r1
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7fd fbc3 	bl	8000578 <__aeabi_f2d>
 8002df2:	4602      	mov	r2, r0
 8002df4:	460b      	mov	r3, r1
 8002df6:	f04f 0000 	mov.w	r0, #0
 8002dfa:	490d      	ldr	r1, [pc, #52]	@ (8002e30 <KalmanFilter_Update+0xc0>)
 8002dfc:	f7fd fa5c 	bl	80002b8 <__aeabi_dsub>
 8002e00:	4602      	mov	r2, r0
 8002e02:	460b      	mov	r3, r1
 8002e04:	4620      	mov	r0, r4
 8002e06:	4629      	mov	r1, r5
 8002e08:	f7fd fc0e 	bl	8000628 <__aeabi_dmul>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	460b      	mov	r3, r1
 8002e10:	4610      	mov	r0, r2
 8002e12:	4619      	mov	r1, r3
 8002e14:	f7fd ff00 	bl	8000c18 <__aeabi_d2f>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	60da      	str	r2, [r3, #12]

    return kf->x;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	ee07 3a90 	vmov	s15, r3
}
 8002e26:	eeb0 0a67 	vmov.f32	s0, s15
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bdb0      	pop	{r4, r5, r7, pc}
 8002e30:	3ff00000 	.word	0x3ff00000

08002e34 <prv_parse_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed integer
 */
static int32_t
prv_parse_number(lwgps_t* gh, const char* t) {
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
    int32_t res = 0;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60fb      	str	r3, [r7, #12]
    uint8_t minus;

    if (t == NULL) {
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d106      	bne.n	8002e56 <prv_parse_number+0x22>
        t = gh->p.term_str;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	3371      	adds	r3, #113	@ 0x71
 8002e4c:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 8002e4e:	e002      	b.n	8002e56 <prv_parse_number+0x22>
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	3301      	adds	r3, #1
 8002e54:	603b      	str	r3, [r7, #0]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d003      	beq.n	8002e64 <prv_parse_number+0x30>
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	2b20      	cmp	r3, #32
 8002e62:	d0f5      	beq.n	8002e50 <prv_parse_number+0x1c>

    minus = (*t == '-' ? (++t, 1) : 0);
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	2b2d      	cmp	r3, #45	@ 0x2d
 8002e6a:	d104      	bne.n	8002e76 <prv_parse_number+0x42>
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	3301      	adds	r3, #1
 8002e70:	603b      	str	r3, [r7, #0]
 8002e72:	2301      	movs	r3, #1
 8002e74:	e000      	b.n	8002e78 <prv_parse_number+0x44>
 8002e76:	2300      	movs	r3, #0
 8002e78:	72fb      	strb	r3, [r7, #11]
    for (; t != NULL && CIN(*t); ++t) {
 8002e7a:	e00d      	b.n	8002e98 <prv_parse_number+0x64>
        res = 10 * res + CTN(*t);
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	4413      	add	r3, r2
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	461a      	mov	r2, r3
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	3b30      	subs	r3, #48	@ 0x30
 8002e8e:	4413      	add	r3, r2
 8002e90:	60fb      	str	r3, [r7, #12]
    for (; t != NULL && CIN(*t); ++t) {
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	3301      	adds	r3, #1
 8002e96:	603b      	str	r3, [r7, #0]
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d007      	beq.n	8002eae <prv_parse_number+0x7a>
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	2b2f      	cmp	r3, #47	@ 0x2f
 8002ea4:	d903      	bls.n	8002eae <prv_parse_number+0x7a>
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	2b39      	cmp	r3, #57	@ 0x39
 8002eac:	d9e6      	bls.n	8002e7c <prv_parse_number+0x48>
    }
    return minus ? -res : res;
 8002eae:	7afb      	ldrb	r3, [r7, #11]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d002      	beq.n	8002eba <prv_parse_number+0x86>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	425b      	negs	r3, r3
 8002eb8:	e000      	b.n	8002ebc <prv_parse_number+0x88>
 8002eba:	68fb      	ldr	r3, [r7, #12]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3714      	adds	r7, #20
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <prv_parse_float_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed double in \ref lwgps_float_t format
 */
static lwgps_float_t
prv_parse_float_number(lwgps_t* gh, const char* t) {
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
    lwgps_float_t res;

    if (t == NULL) {
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d106      	bne.n	8002ee6 <prv_parse_float_number+0x1e>
        t = gh->p.term_str;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	3371      	adds	r3, #113	@ 0x71
 8002edc:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 8002ede:	e002      	b.n	8002ee6 <prv_parse_float_number+0x1e>
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	603b      	str	r3, [r7, #0]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d003      	beq.n	8002ef4 <prv_parse_float_number+0x2c>
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	2b20      	cmp	r3, #32
 8002ef2:	d0f5      	beq.n	8002ee0 <prv_parse_float_number+0x18>

#if LWGPS_CFG_DOUBLE
    res = strtod(t, NULL);                      /* Parse string to double */
 8002ef4:	2100      	movs	r1, #0
 8002ef6:	6838      	ldr	r0, [r7, #0]
 8002ef8:	f008 fce6 	bl	800b8c8 <strtod>
 8002efc:	ed87 0b02 	vstr	d0, [r7, #8]
#else /* LWGPS_CFG_DOUBLE */
    res = strtof(t, NULL);                      /* Parse string to float */
#endif /* !LWGPS_CFG_DOUBLE */

    return FLT(res);                            /* Return casted value, based on float size */
 8002f00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f04:	ec43 2b17 	vmov	d7, r2, r3
}
 8002f08:	eeb0 0a47 	vmov.f32	s0, s14
 8002f0c:	eef0 0a67 	vmov.f32	s1, s15
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
	...

08002f18 <prv_parse_lat_long>:
 *                  NMEA output for latitude is ddmm.sss and longitude is dddmm.sss
 * \param[in]       gh: GPS handle
 * \return          Latitude/Longitude value in degrees
 */
static lwgps_float_t
prv_parse_lat_long(lwgps_t* gh) {
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b088      	sub	sp, #32
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
    lwgps_float_t ll, deg, min;

    ll = prv_parse_float_number(gh, NULL);      /* Parse value as double */
 8002f20:	2100      	movs	r1, #0
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f7ff ffd0 	bl	8002ec8 <prv_parse_float_number>
 8002f28:	ed87 0b06 	vstr	d0, [r7, #24]
    deg = FLT((int)((int)ll / 100));            /* Get absolute degrees value, interested in integer part only */
 8002f2c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002f30:	f7fd fe2a 	bl	8000b88 <__aeabi_d2iz>
 8002f34:	4603      	mov	r3, r0
 8002f36:	4a1d      	ldr	r2, [pc, #116]	@ (8002fac <prv_parse_lat_long+0x94>)
 8002f38:	fb82 1203 	smull	r1, r2, r2, r3
 8002f3c:	1152      	asrs	r2, r2, #5
 8002f3e:	17db      	asrs	r3, r3, #31
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7fd fb06 	bl	8000554 <__aeabi_i2d>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    min = ll - (deg * FLT(100));                /* Get remaining part from full number, minutes */
 8002f50:	f04f 0200 	mov.w	r2, #0
 8002f54:	4b16      	ldr	r3, [pc, #88]	@ (8002fb0 <prv_parse_lat_long+0x98>)
 8002f56:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002f5a:	f7fd fb65 	bl	8000628 <__aeabi_dmul>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	460b      	mov	r3, r1
 8002f62:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002f66:	f7fd f9a7 	bl	80002b8 <__aeabi_dsub>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    ll = deg + (min / FLT(60.0));               /* Calculate latitude/longitude */
 8002f72:	f04f 0200 	mov.w	r2, #0
 8002f76:	4b0f      	ldr	r3, [pc, #60]	@ (8002fb4 <prv_parse_lat_long+0x9c>)
 8002f78:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f7c:	f7fd fc7e 	bl	800087c <__aeabi_ddiv>
 8002f80:	4602      	mov	r2, r0
 8002f82:	460b      	mov	r3, r1
 8002f84:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002f88:	f7fd f998 	bl	80002bc <__adddf3>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	460b      	mov	r3, r1
 8002f90:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return ll;
 8002f94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f98:	ec43 2b17 	vmov	d7, r2, r3
}
 8002f9c:	eeb0 0a47 	vmov.f32	s0, s14
 8002fa0:	eef0 0a67 	vmov.f32	s1, s15
 8002fa4:	3720      	adds	r7, #32
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	51eb851f 	.word	0x51eb851f
 8002fb0:	40590000 	.word	0x40590000
 8002fb4:	404e0000 	.word	0x404e0000

08002fb8 <prv_parse_term>:
 * \brief           Parse received term
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_parse_term(lwgps_t* gh) {
 8002fb8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002fbc:	b082      	sub	sp, #8
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
    if (gh->p.term_num == 0) {                  /* Check string type */
 8002fc2:	6879      	ldr	r1, [r7, #4]
 8002fc4:	f891 107f 	ldrb.w	r1, [r1, #127]	@ 0x7f
 8002fc8:	2900      	cmp	r1, #0
 8002fca:	d169      	bne.n	80030a0 <prv_parse_term+0xe8>
        if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
        } else if (!strncmp(gh->p.term_str, "$GPGGA", 6) || !strncmp(gh->p.term_str, "$GNGGA", 6)) {
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	3371      	adds	r3, #113	@ 0x71
 8002fd0:	2206      	movs	r2, #6
 8002fd2:	49ba      	ldr	r1, [pc, #744]	@ (80032bc <prv_parse_term+0x304>)
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f008 fd90 	bl	800bafa <strncmp>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d009      	beq.n	8002ff4 <prv_parse_term+0x3c>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	3371      	adds	r3, #113	@ 0x71
 8002fe4:	2206      	movs	r2, #6
 8002fe6:	49b6      	ldr	r1, [pc, #728]	@ (80032c0 <prv_parse_term+0x308>)
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f008 fd86 	bl	800bafa <strncmp>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d104      	bne.n	8002ffe <prv_parse_term+0x46>
            gh->p.stat = STAT_GGA;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 8002ffc:	e04e      	b.n	800309c <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
        } else if (!strncmp(gh->p.term_str, "$GPGSA", 6) || !strncmp(gh->p.term_str, "$GNGSA", 6)) {
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	3371      	adds	r3, #113	@ 0x71
 8003002:	2206      	movs	r2, #6
 8003004:	49af      	ldr	r1, [pc, #700]	@ (80032c4 <prv_parse_term+0x30c>)
 8003006:	4618      	mov	r0, r3
 8003008:	f008 fd77 	bl	800bafa <strncmp>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d009      	beq.n	8003026 <prv_parse_term+0x6e>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	3371      	adds	r3, #113	@ 0x71
 8003016:	2206      	movs	r2, #6
 8003018:	49ab      	ldr	r1, [pc, #684]	@ (80032c8 <prv_parse_term+0x310>)
 800301a:	4618      	mov	r0, r3
 800301c:	f008 fd6d 	bl	800bafa <strncmp>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d104      	bne.n	8003030 <prv_parse_term+0x78>
            gh->p.stat = STAT_GSA;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2202      	movs	r2, #2
 800302a:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 800302e:	e035      	b.n	800309c <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
        } else if (!strncmp(gh->p.term_str, "$GPGSV", 6) || !strncmp(gh->p.term_str, "$GNGSV", 6)) {
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	3371      	adds	r3, #113	@ 0x71
 8003034:	2206      	movs	r2, #6
 8003036:	49a5      	ldr	r1, [pc, #660]	@ (80032cc <prv_parse_term+0x314>)
 8003038:	4618      	mov	r0, r3
 800303a:	f008 fd5e 	bl	800bafa <strncmp>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d009      	beq.n	8003058 <prv_parse_term+0xa0>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	3371      	adds	r3, #113	@ 0x71
 8003048:	2206      	movs	r2, #6
 800304a:	49a1      	ldr	r1, [pc, #644]	@ (80032d0 <prv_parse_term+0x318>)
 800304c:	4618      	mov	r0, r3
 800304e:	f008 fd54 	bl	800bafa <strncmp>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d104      	bne.n	8003062 <prv_parse_term+0xaa>
            gh->p.stat = STAT_GSV;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2203      	movs	r2, #3
 800305c:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 8003060:	e01c      	b.n	800309c <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
        } else if (!strncmp(gh->p.term_str, "$GPRMC", 6) || !strncmp(gh->p.term_str, "$GNRMC", 6)) {
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	3371      	adds	r3, #113	@ 0x71
 8003066:	2206      	movs	r2, #6
 8003068:	499a      	ldr	r1, [pc, #616]	@ (80032d4 <prv_parse_term+0x31c>)
 800306a:	4618      	mov	r0, r3
 800306c:	f008 fd45 	bl	800bafa <strncmp>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d009      	beq.n	800308a <prv_parse_term+0xd2>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	3371      	adds	r3, #113	@ 0x71
 800307a:	2206      	movs	r2, #6
 800307c:	4996      	ldr	r1, [pc, #600]	@ (80032d8 <prv_parse_term+0x320>)
 800307e:	4618      	mov	r0, r3
 8003080:	f008 fd3b 	bl	800bafa <strncmp>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d104      	bne.n	8003094 <prv_parse_term+0xdc>
            gh->p.stat = STAT_RMC;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2204      	movs	r2, #4
 800308e:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 8003092:	e003      	b.n	800309c <prv_parse_term+0xe4>
#if LWGPS_CFG_STATEMENT_PUBX
        } else if (!strncmp(gh->p.term_str, "$PUBX", 5)) {
            gh->p.stat = STAT_UBX;
#endif /* LWGPS_CFG_STATEMENT_PUBX */
        } else {
            gh->p.stat = STAT_UNKNOWN;          /* Invalid statement for library */
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
        }
        return 1;
 800309c:	2301      	movs	r3, #1
 800309e:	e231      	b.n	8003504 <prv_parse_term+0x54c>
    }

    /* Start parsing terms */
    if (gh->p.stat == STAT_UNKNOWN) {
 80030a0:	6879      	ldr	r1, [r7, #4]
 80030a2:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 80030a6:	2900      	cmp	r1, #0
 80030a8:	f000 822b 	beq.w	8003502 <prv_parse_term+0x54a>
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {        /* Process GPGGA statement */
 80030ac:	6879      	ldr	r1, [r7, #4]
 80030ae:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 80030b2:	2901      	cmp	r1, #1
 80030b4:	f040 80c9 	bne.w	800324a <prv_parse_term+0x292>
        switch (gh->p.term_num) {
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 80030be:	3b01      	subs	r3, #1
 80030c0:	2b0a      	cmp	r3, #10
 80030c2:	f200 8213 	bhi.w	80034ec <prv_parse_term+0x534>
 80030c6:	a201      	add	r2, pc, #4	@ (adr r2, 80030cc <prv_parse_term+0x114>)
 80030c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030cc:	080030f9 	.word	0x080030f9
 80030d0:	08003173 	.word	0x08003173
 80030d4:	08003189 	.word	0x08003189
 80030d8:	080031b3 	.word	0x080031b3
 80030dc:	080031c9 	.word	0x080031c9
 80030e0:	080031f3 	.word	0x080031f3
 80030e4:	08003207 	.word	0x08003207
 80030e8:	080034ed 	.word	0x080034ed
 80030ec:	0800321b 	.word	0x0800321b
 80030f0:	080034ed 	.word	0x080034ed
 80030f4:	08003233 	.word	0x08003233
            case 1:                             /* Process UTC time */
                gh->p.data.gga.hours = 10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80030fe:	3b30      	subs	r3, #48	@ 0x30
 8003100:	b2db      	uxtb	r3, r3
 8003102:	461a      	mov	r2, r3
 8003104:	0092      	lsls	r2, r2, #2
 8003106:	4413      	add	r3, r2
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	b2da      	uxtb	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8003112:	4413      	add	r3, r2
 8003114:	b2db      	uxtb	r3, r3
 8003116:	3b30      	subs	r3, #48	@ 0x30
 8003118:	b2da      	uxtb	r2, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f883 20aa 	strb.w	r2, [r3, #170]	@ 0xaa
                gh->p.data.gga.minutes = 10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 8003126:	3b30      	subs	r3, #48	@ 0x30
 8003128:	b2db      	uxtb	r3, r3
 800312a:	461a      	mov	r2, r3
 800312c:	0092      	lsls	r2, r2, #2
 800312e:	4413      	add	r3, r2
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	b2da      	uxtb	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800313a:	4413      	add	r3, r2
 800313c:	b2db      	uxtb	r3, r3
 800313e:	3b30      	subs	r3, #48	@ 0x30
 8003140:	b2da      	uxtb	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f883 20ab 	strb.w	r2, [r3, #171]	@ 0xab
                gh->p.data.gga.seconds = 10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 800314e:	3b30      	subs	r3, #48	@ 0x30
 8003150:	b2db      	uxtb	r3, r3
 8003152:	461a      	mov	r2, r3
 8003154:	0092      	lsls	r2, r2, #2
 8003156:	4413      	add	r3, r2
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	b2da      	uxtb	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 8003162:	4413      	add	r3, r2
 8003164:	b2db      	uxtb	r3, r3
 8003166:	3b30      	subs	r3, #48	@ 0x30
 8003168:	b2da      	uxtb	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
                break;
 8003170:	e1c7      	b.n	8003502 <prv_parse_term+0x54a>
            case 2:                             /* Latitude */
                gh->p.data.gga.latitude = prv_parse_lat_long(gh);   /* Parse latitude */
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f7ff fed0 	bl	8002f18 <prv_parse_lat_long>
 8003178:	eeb0 7a40 	vmov.f32	s14, s0
 800317c:	eef0 7a60 	vmov.f32	s15, s1
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	ed83 7b22 	vstr	d7, [r3, #136]	@ 0x88
                break;
 8003186:	e1bc      	b.n	8003502 <prv_parse_term+0x54a>
            case 3:                             /* Latitude north/south information */
                if (gh->p.term_str[0] == 'S' || gh->p.term_str[0] == 's') {
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800318e:	2b53      	cmp	r3, #83	@ 0x53
 8003190:	d005      	beq.n	800319e <prv_parse_term+0x1e6>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8003198:	2b73      	cmp	r3, #115	@ 0x73
 800319a:	f040 81a9 	bne.w	80034f0 <prv_parse_term+0x538>
                    gh->p.data.gga.latitude = -gh->p.data.gga.latitude;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 80031a4:	4690      	mov	r8, r2
 80031a6:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	e9c3 8922 	strd	r8, r9, [r3, #136]	@ 0x88
                }
                break;
 80031b0:	e19e      	b.n	80034f0 <prv_parse_term+0x538>
            case 4:                             /* Longitude */
                gh->p.data.gga.longitude = prv_parse_lat_long(gh);  /* Parse longitude */
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f7ff feb0 	bl	8002f18 <prv_parse_lat_long>
 80031b8:	eeb0 7a40 	vmov.f32	s14, s0
 80031bc:	eef0 7a60 	vmov.f32	s15, s1
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	ed83 7b24 	vstr	d7, [r3, #144]	@ 0x90
                break;
 80031c6:	e19c      	b.n	8003502 <prv_parse_term+0x54a>
            case 5:                             /* Longitude east/west information */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80031ce:	2b57      	cmp	r3, #87	@ 0x57
 80031d0:	d005      	beq.n	80031de <prv_parse_term+0x226>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80031d8:	2b77      	cmp	r3, #119	@ 0x77
 80031da:	f040 818b 	bne.w	80034f4 <prv_parse_term+0x53c>
                    gh->p.data.gga.longitude = -gh->p.data.gga.longitude;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 80031e4:	4614      	mov	r4, r2
 80031e6:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	e9c3 4524 	strd	r4, r5, [r3, #144]	@ 0x90
                }
                break;
 80031f0:	e180      	b.n	80034f4 <prv_parse_term+0x53c>
            case 6:                             /* Fix status */
                gh->p.data.gga.fix = (uint8_t)prv_parse_number(gh, NULL);
 80031f2:	2100      	movs	r1, #0
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f7ff fe1d 	bl	8002e34 <prv_parse_number>
 80031fa:	4603      	mov	r3, r0
 80031fc:	b2da      	uxtb	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
                break;
 8003204:	e17d      	b.n	8003502 <prv_parse_term+0x54a>
            case 7:                             /* Satellites in use */
                gh->p.data.gga.sats_in_use = (uint8_t)prv_parse_number(gh, NULL);
 8003206:	2100      	movs	r1, #0
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f7ff fe13 	bl	8002e34 <prv_parse_number>
 800320e:	4603      	mov	r3, r0
 8003210:	b2da      	uxtb	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
                break;
 8003218:	e173      	b.n	8003502 <prv_parse_term+0x54a>
            case 9:                             /* Altitude */
                gh->p.data.gga.altitude = prv_parse_float_number(gh, NULL);
 800321a:	2100      	movs	r1, #0
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f7ff fe53 	bl	8002ec8 <prv_parse_float_number>
 8003222:	eeb0 7a40 	vmov.f32	s14, s0
 8003226:	eef0 7a60 	vmov.f32	s15, s1
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	ed83 7b26 	vstr	d7, [r3, #152]	@ 0x98
                break;
 8003230:	e167      	b.n	8003502 <prv_parse_term+0x54a>
            case 11:                            /* Altitude above ellipsoid */
                gh->p.data.gga.geo_sep = prv_parse_float_number(gh, NULL);
 8003232:	2100      	movs	r1, #0
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f7ff fe47 	bl	8002ec8 <prv_parse_float_number>
 800323a:	eeb0 7a40 	vmov.f32	s14, s0
 800323e:	eef0 7a60 	vmov.f32	s15, s1
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	ed83 7b28 	vstr	d7, [r3, #160]	@ 0xa0
                break;
 8003248:	e15b      	b.n	8003502 <prv_parse_term+0x54a>
            default:
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {        /* Process GPGSA statement */
 800324a:	6879      	ldr	r1, [r7, #4]
 800324c:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 8003250:	2902      	cmp	r1, #2
 8003252:	f040 8083 	bne.w	800335c <prv_parse_term+0x3a4>
        switch (gh->p.term_num) {
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 800325c:	3b02      	subs	r3, #2
 800325e:	2b0f      	cmp	r3, #15
 8003260:	d860      	bhi.n	8003324 <prv_parse_term+0x36c>
 8003262:	a201      	add	r2, pc, #4	@ (adr r2, 8003268 <prv_parse_term+0x2b0>)
 8003264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003268:	080032a9 	.word	0x080032a9
 800326c:	08003325 	.word	0x08003325
 8003270:	08003325 	.word	0x08003325
 8003274:	08003325 	.word	0x08003325
 8003278:	08003325 	.word	0x08003325
 800327c:	08003325 	.word	0x08003325
 8003280:	08003325 	.word	0x08003325
 8003284:	08003325 	.word	0x08003325
 8003288:	08003325 	.word	0x08003325
 800328c:	08003325 	.word	0x08003325
 8003290:	08003325 	.word	0x08003325
 8003294:	08003325 	.word	0x08003325
 8003298:	08003325 	.word	0x08003325
 800329c:	080032dd 	.word	0x080032dd
 80032a0:	080032f5 	.word	0x080032f5
 80032a4:	0800330d 	.word	0x0800330d
            case 2:                             /* Process fix mode */
                gh->p.data.gsa.fix_mode = (uint8_t)prv_parse_number(gh, NULL);
 80032a8:	2100      	movs	r1, #0
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f7ff fdc2 	bl	8002e34 <prv_parse_number>
 80032b0:	4603      	mov	r3, r0
 80032b2:	b2da      	uxtb	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
                break;
 80032ba:	e122      	b.n	8003502 <prv_parse_term+0x54a>
 80032bc:	0800e960 	.word	0x0800e960
 80032c0:	0800e968 	.word	0x0800e968
 80032c4:	0800e970 	.word	0x0800e970
 80032c8:	0800e978 	.word	0x0800e978
 80032cc:	0800e980 	.word	0x0800e980
 80032d0:	0800e988 	.word	0x0800e988
 80032d4:	0800e990 	.word	0x0800e990
 80032d8:	0800e998 	.word	0x0800e998
            case 15:                            /* Process PDOP */
                gh->p.data.gsa.dop_p = prv_parse_float_number(gh, NULL);
 80032dc:	2100      	movs	r1, #0
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f7ff fdf2 	bl	8002ec8 <prv_parse_float_number>
 80032e4:	eeb0 7a40 	vmov.f32	s14, s0
 80032e8:	eef0 7a60 	vmov.f32	s15, s1
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	ed83 7b26 	vstr	d7, [r3, #152]	@ 0x98
                break;
 80032f2:	e106      	b.n	8003502 <prv_parse_term+0x54a>
            case 16:                            /* Process HDOP */
                gh->p.data.gsa.dop_h = prv_parse_float_number(gh, NULL);
 80032f4:	2100      	movs	r1, #0
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f7ff fde6 	bl	8002ec8 <prv_parse_float_number>
 80032fc:	eeb0 7a40 	vmov.f32	s14, s0
 8003300:	eef0 7a60 	vmov.f32	s15, s1
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	ed83 7b22 	vstr	d7, [r3, #136]	@ 0x88
                break;
 800330a:	e0fa      	b.n	8003502 <prv_parse_term+0x54a>
            case 17:                            /* Process VDOP */
                gh->p.data.gsa.dop_v = prv_parse_float_number(gh, NULL);
 800330c:	2100      	movs	r1, #0
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f7ff fdda 	bl	8002ec8 <prv_parse_float_number>
 8003314:	eeb0 7a40 	vmov.f32	s14, s0
 8003318:	eef0 7a60 	vmov.f32	s15, s1
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	ed83 7b24 	vstr	d7, [r3, #144]	@ 0x90
                break;
 8003322:	e0ee      	b.n	8003502 <prv_parse_term+0x54a>
            default:
                /* Parse satellite IDs */
                if (gh->p.term_num >= 3 && gh->p.term_num <= 14) {
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 800332a:	2b02      	cmp	r3, #2
 800332c:	f240 80e4 	bls.w	80034f8 <prv_parse_term+0x540>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8003336:	2b0e      	cmp	r3, #14
 8003338:	f200 80de 	bhi.w	80034f8 <prv_parse_term+0x540>
                    gh->p.data.gsa.satellites_ids[gh->p.term_num - 3] = (uint8_t)prv_parse_number(gh, NULL);
 800333c:	2100      	movs	r1, #0
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f7ff fd78 	bl	8002e34 <prv_parse_number>
 8003344:	4602      	mov	r2, r0
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 800334c:	3b03      	subs	r3, #3
 800334e:	b2d1      	uxtb	r1, r2
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	4413      	add	r3, r2
 8003354:	460a      	mov	r2, r1
 8003356:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
                }
                break;
 800335a:	e0cd      	b.n	80034f8 <prv_parse_term+0x540>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {        /* Process GPGSV statement */
 800335c:	6879      	ldr	r1, [r7, #4]
 800335e:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 8003362:	2903      	cmp	r1, #3
 8003364:	d11b      	bne.n	800339e <prv_parse_term+0x3e6>
        switch (gh->p.term_num) {
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 800336c:	2b02      	cmp	r3, #2
 800336e:	d002      	beq.n	8003376 <prv_parse_term+0x3be>
 8003370:	2b03      	cmp	r3, #3
 8003372:	d00a      	beq.n	800338a <prv_parse_term+0x3d2>
                                break;
                        }
                    }
                }
#endif /* LWGPS_CFG_STATEMENT_GPGSV_SAT_DET */
                break;
 8003374:	e0c5      	b.n	8003502 <prv_parse_term+0x54a>
                gh->p.data.gsv.stat_num = (uint8_t)prv_parse_number(gh, NULL);
 8003376:	2100      	movs	r1, #0
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f7ff fd5b 	bl	8002e34 <prv_parse_number>
 800337e:	4603      	mov	r3, r0
 8003380:	b2da      	uxtb	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
                break;
 8003388:	e0bb      	b.n	8003502 <prv_parse_term+0x54a>
                gh->p.data.gsv.sats_in_view = (uint8_t)prv_parse_number(gh, NULL);
 800338a:	2100      	movs	r1, #0
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f7ff fd51 	bl	8002e34 <prv_parse_number>
 8003392:	4603      	mov	r3, r0
 8003394:	b2da      	uxtb	r2, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
                break;
 800339c:	e0b1      	b.n	8003502 <prv_parse_term+0x54a>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {        /* Process GPRMC statement */
 800339e:	6879      	ldr	r1, [r7, #4]
 80033a0:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 80033a4:	2904      	cmp	r1, #4
 80033a6:	f040 80ac 	bne.w	8003502 <prv_parse_term+0x54a>
        switch (gh->p.term_num) {
 80033aa:	6879      	ldr	r1, [r7, #4]
 80033ac:	f891 107f 	ldrb.w	r1, [r1, #127]	@ 0x7f
 80033b0:	3902      	subs	r1, #2
 80033b2:	2909      	cmp	r1, #9
 80033b4:	f200 80a2 	bhi.w	80034fc <prv_parse_term+0x544>
 80033b8:	a001      	add	r0, pc, #4	@ (adr r0, 80033c0 <prv_parse_term+0x408>)
 80033ba:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80033be:	bf00      	nop
 80033c0:	080033e9 	.word	0x080033e9
 80033c4:	080034fd 	.word	0x080034fd
 80033c8:	080034fd 	.word	0x080034fd
 80033cc:	080034fd 	.word	0x080034fd
 80033d0:	080034fd 	.word	0x080034fd
 80033d4:	08003403 	.word	0x08003403
 80033d8:	0800341b 	.word	0x0800341b
 80033dc:	08003433 	.word	0x08003433
 80033e0:	080034ad 	.word	0x080034ad
 80033e4:	080034c5 	.word	0x080034c5
            case 2:                             /* Process valid status */
                gh->p.data.rmc.is_valid = (gh->p.term_str[0] == 'A');
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80033ee:	2b41      	cmp	r3, #65	@ 0x41
 80033f0:	bf0c      	ite	eq
 80033f2:	2301      	moveq	r3, #1
 80033f4:	2300      	movne	r3, #0
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	461a      	mov	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
                break;
 8003400:	e07f      	b.n	8003502 <prv_parse_term+0x54a>
            case 7:                             /* Process ground speed in knots */
                gh->p.data.rmc.speed = prv_parse_float_number(gh, NULL);
 8003402:	2100      	movs	r1, #0
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f7ff fd5f 	bl	8002ec8 <prv_parse_float_number>
 800340a:	eeb0 7a40 	vmov.f32	s14, s0
 800340e:	eef0 7a60 	vmov.f32	s15, s1
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	ed83 7b24 	vstr	d7, [r3, #144]	@ 0x90
                break;
 8003418:	e073      	b.n	8003502 <prv_parse_term+0x54a>
            case 8:                             /* Process true ground coarse */
                gh->p.data.rmc.course = prv_parse_float_number(gh, NULL);
 800341a:	2100      	movs	r1, #0
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f7ff fd53 	bl	8002ec8 <prv_parse_float_number>
 8003422:	eeb0 7a40 	vmov.f32	s14, s0
 8003426:	eef0 7a60 	vmov.f32	s15, s1
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	ed83 7b26 	vstr	d7, [r3, #152]	@ 0x98
                break;
 8003430:	e067      	b.n	8003502 <prv_parse_term+0x54a>
            case 9:                             /* Process date */
                gh->p.data.rmc.date = (uint8_t)(10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]));
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8003438:	3b30      	subs	r3, #48	@ 0x30
 800343a:	b2db      	uxtb	r3, r3
 800343c:	461a      	mov	r2, r3
 800343e:	0092      	lsls	r2, r2, #2
 8003440:	4413      	add	r3, r2
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	b2da      	uxtb	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 800344c:	4413      	add	r3, r2
 800344e:	b2db      	uxtb	r3, r3
 8003450:	3b30      	subs	r3, #48	@ 0x30
 8003452:	b2da      	uxtb	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
                gh->p.data.rmc.month = (uint8_t)(10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]));
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 8003460:	3b30      	subs	r3, #48	@ 0x30
 8003462:	b2db      	uxtb	r3, r3
 8003464:	461a      	mov	r2, r3
 8003466:	0092      	lsls	r2, r2, #2
 8003468:	4413      	add	r3, r2
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	b2da      	uxtb	r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8003474:	4413      	add	r3, r2
 8003476:	b2db      	uxtb	r3, r3
 8003478:	3b30      	subs	r3, #48	@ 0x30
 800347a:	b2da      	uxtb	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
                gh->p.data.rmc.year = (uint8_t)(10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]));
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8003488:	3b30      	subs	r3, #48	@ 0x30
 800348a:	b2db      	uxtb	r3, r3
 800348c:	461a      	mov	r2, r3
 800348e:	0092      	lsls	r2, r2, #2
 8003490:	4413      	add	r3, r2
 8003492:	005b      	lsls	r3, r3, #1
 8003494:	b2da      	uxtb	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 800349c:	4413      	add	r3, r2
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	3b30      	subs	r3, #48	@ 0x30
 80034a2:	b2da      	uxtb	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f883 208b 	strb.w	r2, [r3, #139]	@ 0x8b
                break;
 80034aa:	e02a      	b.n	8003502 <prv_parse_term+0x54a>
            case 10:                            /* Process magnetic variation */
                gh->p.data.rmc.variation = prv_parse_float_number(gh, NULL);
 80034ac:	2100      	movs	r1, #0
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f7ff fd0a 	bl	8002ec8 <prv_parse_float_number>
 80034b4:	eeb0 7a40 	vmov.f32	s14, s0
 80034b8:	eef0 7a60 	vmov.f32	s15, s1
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	ed83 7b28 	vstr	d7, [r3, #160]	@ 0xa0
                break;
 80034c2:	e01e      	b.n	8003502 <prv_parse_term+0x54a>
            case 11:                            /* Process magnetic variation east/west */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 80034c4:	6879      	ldr	r1, [r7, #4]
 80034c6:	f891 1071 	ldrb.w	r1, [r1, #113]	@ 0x71
 80034ca:	2957      	cmp	r1, #87	@ 0x57
 80034cc:	d004      	beq.n	80034d8 <prv_parse_term+0x520>
 80034ce:	6879      	ldr	r1, [r7, #4]
 80034d0:	f891 1071 	ldrb.w	r1, [r1, #113]	@ 0x71
 80034d4:	2977      	cmp	r1, #119	@ 0x77
 80034d6:	d113      	bne.n	8003500 <prv_parse_term+0x548>
                    gh->p.data.rmc.variation = -gh->p.data.rmc.variation;
 80034d8:	6879      	ldr	r1, [r7, #4]
 80034da:	e9d1 0128 	ldrd	r0, r1, [r1, #160]	@ 0xa0
 80034de:	4602      	mov	r2, r0
 80034e0:	f081 4300 	eor.w	r3, r1, #2147483648	@ 0x80000000
 80034e4:	6879      	ldr	r1, [r7, #4]
 80034e6:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
                }
                break;
 80034ea:	e009      	b.n	8003500 <prv_parse_term+0x548>
                break;
 80034ec:	bf00      	nop
 80034ee:	e008      	b.n	8003502 <prv_parse_term+0x54a>
                break;
 80034f0:	bf00      	nop
 80034f2:	e006      	b.n	8003502 <prv_parse_term+0x54a>
                break;
 80034f4:	bf00      	nop
 80034f6:	e004      	b.n	8003502 <prv_parse_term+0x54a>
                break;
 80034f8:	bf00      	nop
 80034fa:	e002      	b.n	8003502 <prv_parse_term+0x54a>
            default:
                break;
 80034fc:	bf00      	nop
 80034fe:	e000      	b.n	8003502 <prv_parse_term+0x54a>
                break;
 8003500:	bf00      	nop
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
#endif /* LWGPS_CFG_STATEMENT_PUBX */
    }
    return 1;
 8003502:	2301      	movs	r3, #1
}
 8003504:	4618      	mov	r0, r3
 8003506:	3708      	adds	r7, #8
 8003508:	46bd      	mov	sp, r7
 800350a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800350e:	bf00      	nop

08003510 <prv_check_crc>:
 * \brief           Compare calculated CRC with received CRC
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_check_crc(lwgps_t* gh) {
 8003510:	b480      	push	{r7}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
    uint8_t crc;
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04) | (CHTN(gh->p.term_str[1]) & 0x0F);   /* Convert received CRC from string (hex) to number */
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800351e:	2b2f      	cmp	r3, #47	@ 0x2f
 8003520:	d90d      	bls.n	800353e <prv_check_crc+0x2e>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8003528:	2b39      	cmp	r3, #57	@ 0x39
 800352a:	d808      	bhi.n	800353e <prv_check_crc+0x2e>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8003532:	3b30      	subs	r3, #48	@ 0x30
 8003534:	b2db      	uxtb	r3, r3
 8003536:	b25b      	sxtb	r3, r3
 8003538:	011b      	lsls	r3, r3, #4
 800353a:	b25a      	sxtb	r2, r3
 800353c:	e026      	b.n	800358c <prv_check_crc+0x7c>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8003544:	2b60      	cmp	r3, #96	@ 0x60
 8003546:	d90d      	bls.n	8003564 <prv_check_crc+0x54>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800354e:	2b7a      	cmp	r3, #122	@ 0x7a
 8003550:	d808      	bhi.n	8003564 <prv_check_crc+0x54>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8003558:	3b57      	subs	r3, #87	@ 0x57
 800355a:	b2db      	uxtb	r3, r3
 800355c:	b25b      	sxtb	r3, r3
 800355e:	011b      	lsls	r3, r3, #4
 8003560:	b25a      	sxtb	r2, r3
 8003562:	e013      	b.n	800358c <prv_check_crc+0x7c>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800356a:	2b40      	cmp	r3, #64	@ 0x40
 800356c:	d90d      	bls.n	800358a <prv_check_crc+0x7a>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8003574:	2b5a      	cmp	r3, #90	@ 0x5a
 8003576:	d808      	bhi.n	800358a <prv_check_crc+0x7a>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800357e:	3b37      	subs	r3, #55	@ 0x37
 8003580:	b2db      	uxtb	r3, r3
 8003582:	b25b      	sxtb	r3, r3
 8003584:	011b      	lsls	r3, r3, #4
 8003586:	b25a      	sxtb	r2, r3
 8003588:	e000      	b.n	800358c <prv_check_crc+0x7c>
 800358a:	2200      	movs	r2, #0
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8003592:	2b2f      	cmp	r3, #47	@ 0x2f
 8003594:	d90c      	bls.n	80035b0 <prv_check_crc+0xa0>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 800359c:	2b39      	cmp	r3, #57	@ 0x39
 800359e:	d807      	bhi.n	80035b0 <prv_check_crc+0xa0>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80035a6:	b25b      	sxtb	r3, r3
 80035a8:	f003 030f 	and.w	r3, r3, #15
 80035ac:	b25b      	sxtb	r3, r3
 80035ae:	e028      	b.n	8003602 <prv_check_crc+0xf2>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80035b6:	2b60      	cmp	r3, #96	@ 0x60
 80035b8:	d90e      	bls.n	80035d8 <prv_check_crc+0xc8>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80035c0:	2b7a      	cmp	r3, #122	@ 0x7a
 80035c2:	d809      	bhi.n	80035d8 <prv_check_crc+0xc8>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80035ca:	3b57      	subs	r3, #87	@ 0x57
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	b25b      	sxtb	r3, r3
 80035d0:	f003 030f 	and.w	r3, r3, #15
 80035d4:	b25b      	sxtb	r3, r3
 80035d6:	e014      	b.n	8003602 <prv_check_crc+0xf2>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80035de:	2b40      	cmp	r3, #64	@ 0x40
 80035e0:	d90e      	bls.n	8003600 <prv_check_crc+0xf0>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80035e8:	2b5a      	cmp	r3, #90	@ 0x5a
 80035ea:	d809      	bhi.n	8003600 <prv_check_crc+0xf0>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80035f2:	3b37      	subs	r3, #55	@ 0x37
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	b25b      	sxtb	r3, r3
 80035f8:	f003 030f 	and.w	r3, r3, #15
 80035fc:	b25b      	sxtb	r3, r3
 80035fe:	e000      	b.n	8003602 <prv_check_crc+0xf2>
 8003600:	2300      	movs	r3, #0
 8003602:	4313      	orrs	r3, r2
 8003604:	b25b      	sxtb	r3, r3
 8003606:	73fb      	strb	r3, [r7, #15]
    return gh->p.crc_calc == crc;               /* They must match! */
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800360e:	7bfa      	ldrb	r2, [r7, #15]
 8003610:	429a      	cmp	r2, r3
 8003612:	bf0c      	ite	eq
 8003614:	2301      	moveq	r3, #1
 8003616:	2300      	movne	r3, #0
 8003618:	b2db      	uxtb	r3, r3
}
 800361a:	4618      	mov	r0, r3
 800361c:	3714      	adds	r7, #20
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr

08003626 <prv_copy_from_tmp_memory>:
 * \brief           Copy temporary memory to user memory
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_copy_from_tmp_memory(lwgps_t* gh) {
 8003626:	b580      	push	{r7, lr}
 8003628:	b082      	sub	sp, #8
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
    if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8003634:	2b01      	cmp	r3, #1
 8003636:	d136      	bne.n	80036a6 <prv_copy_from_tmp_memory+0x80>
        gh->latitude = gh->p.data.gga.latitude;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 800363e:	6879      	ldr	r1, [r7, #4]
 8003640:	e9c1 2300 	strd	r2, r3, [r1]
        gh->longitude = gh->p.data.gga.longitude;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 800364a:	6879      	ldr	r1, [r7, #4]
 800364c:	e9c1 2302 	strd	r2, r3, [r1, #8]
        gh->altitude = gh->p.data.gga.altitude;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 8003656:	6879      	ldr	r1, [r7, #4]
 8003658:	e9c1 2304 	strd	r2, r3, [r1, #16]
        gh->geo_sep = gh->p.data.gga.geo_sep;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 8003662:	6879      	ldr	r1, [r7, #4]
 8003664:	e9c1 2306 	strd	r2, r3, [r1, #24]
        gh->sats_in_use = gh->p.data.gga.sats_in_use;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f893 20a8 	ldrb.w	r2, [r3, #168]	@ 0xa8
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f883 2020 	strb.w	r2, [r3, #32]
        gh->fix = gh->p.data.gga.fix;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f893 20a9 	ldrb.w	r2, [r3, #169]	@ 0xa9
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        gh->hours = gh->p.data.gga.hours;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f893 20aa 	ldrb.w	r2, [r3, #170]	@ 0xaa
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
        gh->minutes = gh->p.data.gga.minutes;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f893 20ab 	ldrb.w	r2, [r3, #171]	@ 0xab
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
        gh->seconds = gh->p.data.gga.seconds;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f893 20ac 	ldrb.w	r2, [r3, #172]	@ 0xac
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80036a4:	e061      	b.n	800376a <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d121      	bne.n	80036f4 <prv_copy_from_tmp_memory+0xce>
        gh->dop_h = gh->p.data.gsa.dop_h;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 80036b6:	6879      	ldr	r1, [r7, #4]
 80036b8:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
        gh->dop_p = gh->p.data.gsa.dop_p;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 80036c2:	6879      	ldr	r1, [r7, #4]
 80036c4:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
        gh->dop_v = gh->p.data.gsa.dop_v;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 80036ce:	6879      	ldr	r1, [r7, #4]
 80036d0:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
        gh->fix_mode = gh->p.data.gsa.fix_mode;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f893 20a0 	ldrb.w	r2, [r3, #160]	@ 0xa0
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        memcpy(gh->satellites_ids, gh->p.data.gsa.satellites_ids, sizeof(gh->satellites_ids));
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f103 0041 	add.w	r0, r3, #65	@ 0x41
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	33a1      	adds	r3, #161	@ 0xa1
 80036ea:	220c      	movs	r2, #12
 80036ec:	4619      	mov	r1, r3
 80036ee:	f008 fa9a 	bl	800bc26 <memcpy>
 80036f2:	e03a      	b.n	800376a <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 80036fa:	2b03      	cmp	r3, #3
 80036fc:	d106      	bne.n	800370c <prv_copy_from_tmp_memory+0xe6>
        gh->sats_in_view = gh->p.data.gsv.sats_in_view;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 2088 	ldrb.w	r2, [r3, #136]	@ 0x88
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 800370a:	e02e      	b.n	800376a <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8003712:	2b04      	cmp	r3, #4
 8003714:	d129      	bne.n	800376a <prv_copy_from_tmp_memory+0x144>
        gh->course = gh->p.data.rmc.course;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 800371c:	6879      	ldr	r1, [r7, #4]
 800371e:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
        gh->is_valid = gh->p.data.rmc.is_valid;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 2088 	ldrb.w	r2, [r3, #136]	@ 0x88
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
        gh->speed = gh->p.data.rmc.speed;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8003734:	6879      	ldr	r1, [r7, #4]
 8003736:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
        gh->variation = gh->p.data.rmc.variation;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 8003740:	6879      	ldr	r1, [r7, #4]
 8003742:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
        gh->date = gh->p.data.rmc.date;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 2089 	ldrb.w	r2, [r3, #137]	@ 0x89
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
        gh->month = gh->p.data.rmc.month;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f893 208a 	ldrb.w	r2, [r3, #138]	@ 0x8a
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
        gh->year = gh->p.data.rmc.year;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 208b 	ldrb.w	r2, [r3, #139]	@ 0x8b
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
        gh->clk_bias = gh->p.data.time.clk_bias;
        gh->clk_drift = gh->p.data.time.clk_drift;
        gh->tp_gran = gh->p.data.time.tp_gran;
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
    }
    return 1;
 800376a:	2301      	movs	r3, #1
}
 800376c:	4618      	mov	r0, r3
 800376e:	3708      	adds	r7, #8
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       gh: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* gh) {
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
    memset(gh, 0x00, sizeof(*gh));              /* Reset structure */
 800377c:	22b0      	movs	r2, #176	@ 0xb0
 800377e:	2100      	movs	r1, #0
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f008 f9b2 	bl	800baea <memset>
    return 1;
 8003786:	2301      	movs	r3, #1
}
 8003788:	4618      	mov	r0, r3
 800378a:	3708      	adds	r7, #8
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <lwgps_process>:
 */
uint8_t
#if LWGPS_CFG_STATUS || __DOXYGEN__
lwgps_process(lwgps_t* gh, const void* data, size_t len, lwgps_process_fn evt_fn) {
#else /* LWGPS_CFG_STATUS */
lwgps_process(lwgps_t* gh, const void* data, size_t len) {
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
#endif /* !LWGPS_CFG_STATUS */
    const uint8_t* d = data;
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	617b      	str	r3, [r7, #20]

    for (; len > 0; ++d, --len) {               /* Process all bytes */
 80037a0:	e0ad      	b.n	80038fe <lwgps_process+0x16e>
        if (*d == '$') {                        /* Check for beginning of NMEA line */
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	2b24      	cmp	r3, #36	@ 0x24
 80037a8:	d128      	bne.n	80037fc <lwgps_process+0x6c>
            memset(&gh->p, 0x00, sizeof(gh->p));/* Reset private memory */
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	3370      	adds	r3, #112	@ 0x70
 80037ae:	2240      	movs	r2, #64	@ 0x40
 80037b0:	2100      	movs	r1, #0
 80037b2:	4618      	mov	r0, r3
 80037b4:	f008 f999 	bl	800baea <memset>
            TERM_ADD(gh, *d);                   /* Add character to term */
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 80037be:	2b0b      	cmp	r3, #11
 80037c0:	f200 8097 	bhi.w	80038f2 <lwgps_process+0x162>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 80037ca:	4619      	mov	r1, r3
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	781a      	ldrb	r2, [r3, #0]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	440b      	add	r3, r1
 80037d4:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 80037de:	3301      	adds	r3, #1
 80037e0:	b2da      	uxtb	r2, r3
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 80037ee:	461a      	mov	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4413      	add	r3, r2
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 80037fa:	e07a      	b.n	80038f2 <lwgps_process+0x162>
        } else if (*d == ',') {                 /* Term separator character */
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	2b2c      	cmp	r3, #44	@ 0x2c
 8003802:	d11d      	bne.n	8003840 <lwgps_process+0xb0>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f7ff fbd7 	bl	8002fb8 <prv_parse_term>
            CRC_ADD(gh, *d);                    /* Add character to CRC computation */
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f893 2081 	ldrb.w	r2, [r3, #129]	@ 0x81
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	4053      	eors	r3, r2
 8003816:	b2da      	uxtb	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
            TERM_NEXT(gh);                      /* Start with next term */
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8003834:	3301      	adds	r3, #1
 8003836:	b2da      	uxtb	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
 800383e:	e058      	b.n	80038f2 <lwgps_process+0x162>
        } else if (*d == '*') {                 /* Start indicates end of data for CRC computation */
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	2b2a      	cmp	r3, #42	@ 0x2a
 8003846:	d117      	bne.n	8003878 <lwgps_process+0xe8>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 8003848:	68f8      	ldr	r0, [r7, #12]
 800384a:	f7ff fbb5 	bl	8002fb8 <prv_parse_term>
            gh->p.star = 1;                     /* STAR detected */
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
            TERM_NEXT(gh);                      /* Start with next term */
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 800386c:	3301      	adds	r3, #1
 800386e:	b2da      	uxtb	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
 8003876:	e03c      	b.n	80038f2 <lwgps_process+0x162>
        } else if (*d == '\r') {
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	2b0d      	cmp	r3, #13
 800387e:	d109      	bne.n	8003894 <lwgps_process+0x104>
            if (prv_check_crc(gh)) {            /* Check for CRC result */
 8003880:	68f8      	ldr	r0, [r7, #12]
 8003882:	f7ff fe45 	bl	8003510 <prv_check_crc>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d032      	beq.n	80038f2 <lwgps_process+0x162>
                /* CRC is OK, in theory we can copy data from statements to user data */
                prv_copy_from_tmp_memory(gh);   /* Copy memory from temporary to user memory */
 800388c:	68f8      	ldr	r0, [r7, #12]
 800388e:	f7ff feca 	bl	8003626 <prv_copy_from_tmp_memory>
 8003892:	e02e      	b.n	80038f2 <lwgps_process+0x162>
            } else if (evt_fn != NULL) {
                evt_fn(STAT_CHECKSUM_FAIL);
#endif /* LWGPS_CFG_STATUS */
            }
        } else {
            if (!gh->p.star) {                  /* Add to CRC only if star not yet detected */
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800389a:	2b00      	cmp	r3, #0
 800389c:	d109      	bne.n	80038b2 <lwgps_process+0x122>
                CRC_ADD(gh, *d);                /* Add to CRC */
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f893 2081 	ldrb.w	r2, [r3, #129]	@ 0x81
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	4053      	eors	r3, r2
 80038aa:	b2da      	uxtb	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
            }
            TERM_ADD(gh, *d);                   /* Add character to term */
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 80038b8:	2b0b      	cmp	r3, #11
 80038ba:	d81a      	bhi.n	80038f2 <lwgps_process+0x162>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 80038c2:	4619      	mov	r1, r3
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	781a      	ldrb	r2, [r3, #0]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	440b      	add	r3, r1
 80038cc:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 80038d6:	3301      	adds	r3, #1
 80038d8:	b2da      	uxtb	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 80038e6:	461a      	mov	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	4413      	add	r3, r2
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
    for (; len > 0; ++d, --len) {               /* Process all bytes */
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	3301      	adds	r3, #1
 80038f6:	617b      	str	r3, [r7, #20]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	3b01      	subs	r3, #1
 80038fc:	607b      	str	r3, [r7, #4]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2b00      	cmp	r3, #0
 8003902:	f47f af4e 	bne.w	80037a2 <lwgps_process+0x12>
        }
    }
    return 1;
 8003906:	2301      	movs	r3, #1
}
 8003908:	4618      	mov	r0, r3
 800390a:	3718      	adds	r7, #24
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <HAL_UART_RxCpltCallback>:
{
	return ( A - B) * (E - D ) / (C - B )+ D ;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
	if(huart==&huart2){
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a29      	ldr	r2, [pc, #164]	@ (80039c0 <HAL_UART_RxCpltCallback+0xb0>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d127      	bne.n	8003970 <HAL_UART_RxCpltCallback+0x60>
	if(rx_data != '\n' && rx_index < RX_BUFFER_SIZE) {
 8003920:	4b28      	ldr	r3, [pc, #160]	@ (80039c4 <HAL_UART_RxCpltCallback+0xb4>)
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	2b0a      	cmp	r3, #10
 8003926:	d010      	beq.n	800394a <HAL_UART_RxCpltCallback+0x3a>
 8003928:	4b27      	ldr	r3, [pc, #156]	@ (80039c8 <HAL_UART_RxCpltCallback+0xb8>)
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	b25b      	sxtb	r3, r3
 800392e:	2b00      	cmp	r3, #0
 8003930:	db0b      	blt.n	800394a <HAL_UART_RxCpltCallback+0x3a>
		rx_buffer[rx_index++] = rx_data;
 8003932:	4b25      	ldr	r3, [pc, #148]	@ (80039c8 <HAL_UART_RxCpltCallback+0xb8>)
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	1c5a      	adds	r2, r3, #1
 8003938:	b2d1      	uxtb	r1, r2
 800393a:	4a23      	ldr	r2, [pc, #140]	@ (80039c8 <HAL_UART_RxCpltCallback+0xb8>)
 800393c:	7011      	strb	r1, [r2, #0]
 800393e:	461a      	mov	r2, r3
 8003940:	4b20      	ldr	r3, [pc, #128]	@ (80039c4 <HAL_UART_RxCpltCallback+0xb4>)
 8003942:	7819      	ldrb	r1, [r3, #0]
 8003944:	4b21      	ldr	r3, [pc, #132]	@ (80039cc <HAL_UART_RxCpltCallback+0xbc>)
 8003946:	5499      	strb	r1, [r3, r2]
 8003948:	e00d      	b.n	8003966 <HAL_UART_RxCpltCallback+0x56>
	} else {
		lwgps_process(&gps, rx_buffer, rx_index+1);
 800394a:	4b1f      	ldr	r3, [pc, #124]	@ (80039c8 <HAL_UART_RxCpltCallback+0xb8>)
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	3301      	adds	r3, #1
 8003950:	461a      	mov	r2, r3
 8003952:	491e      	ldr	r1, [pc, #120]	@ (80039cc <HAL_UART_RxCpltCallback+0xbc>)
 8003954:	481e      	ldr	r0, [pc, #120]	@ (80039d0 <HAL_UART_RxCpltCallback+0xc0>)
 8003956:	f7ff ff1b 	bl	8003790 <lwgps_process>
		rx_index = 0;
 800395a:	4b1b      	ldr	r3, [pc, #108]	@ (80039c8 <HAL_UART_RxCpltCallback+0xb8>)
 800395c:	2200      	movs	r2, #0
 800395e:	701a      	strb	r2, [r3, #0]
		rx_data = 0;
 8003960:	4b18      	ldr	r3, [pc, #96]	@ (80039c4 <HAL_UART_RxCpltCallback+0xb4>)
 8003962:	2200      	movs	r2, #0
 8003964:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8003966:	2201      	movs	r2, #1
 8003968:	4916      	ldr	r1, [pc, #88]	@ (80039c4 <HAL_UART_RxCpltCallback+0xb4>)
 800396a:	4815      	ldr	r0, [pc, #84]	@ (80039c0 <HAL_UART_RxCpltCallback+0xb0>)
 800396c:	f006 f88e 	bl	8009a8c <HAL_UART_Receive_IT>
	}


	if(huart == &huart6){
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a18      	ldr	r2, [pc, #96]	@ (80039d4 <HAL_UART_RxCpltCallback+0xc4>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d11e      	bne.n	80039b6 <HAL_UART_RxCpltCallback+0xa6>
		if(rx_data_EGU != '\n' && rx_index_EGU <34){//sol taraf silinebilir
 8003978:	4b17      	ldr	r3, [pc, #92]	@ (80039d8 <HAL_UART_RxCpltCallback+0xc8>)
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	2b0a      	cmp	r3, #10
 800397e:	d00f      	beq.n	80039a0 <HAL_UART_RxCpltCallback+0x90>
 8003980:	4b16      	ldr	r3, [pc, #88]	@ (80039dc <HAL_UART_RxCpltCallback+0xcc>)
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	2b21      	cmp	r3, #33	@ 0x21
 8003986:	d80b      	bhi.n	80039a0 <HAL_UART_RxCpltCallback+0x90>
			EGU_RX_BUFFER[rx_index_EGU++]=rx_data_EGU;
 8003988:	4b14      	ldr	r3, [pc, #80]	@ (80039dc <HAL_UART_RxCpltCallback+0xcc>)
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	1c5a      	adds	r2, r3, #1
 800398e:	b2d1      	uxtb	r1, r2
 8003990:	4a12      	ldr	r2, [pc, #72]	@ (80039dc <HAL_UART_RxCpltCallback+0xcc>)
 8003992:	7011      	strb	r1, [r2, #0]
 8003994:	461a      	mov	r2, r3
 8003996:	4b10      	ldr	r3, [pc, #64]	@ (80039d8 <HAL_UART_RxCpltCallback+0xc8>)
 8003998:	7819      	ldrb	r1, [r3, #0]
 800399a:	4b11      	ldr	r3, [pc, #68]	@ (80039e0 <HAL_UART_RxCpltCallback+0xd0>)
 800399c:	5499      	strb	r1, [r3, r2]
 800399e:	e005      	b.n	80039ac <HAL_UART_RxCpltCallback+0x9c>

		}
		else
		{
			rx_data_EGU=0;
 80039a0:	4b0d      	ldr	r3, [pc, #52]	@ (80039d8 <HAL_UART_RxCpltCallback+0xc8>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	701a      	strb	r2, [r3, #0]
			rx_index_EGU=0;
 80039a6:	4b0d      	ldr	r3, [pc, #52]	@ (80039dc <HAL_UART_RxCpltCallback+0xcc>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	701a      	strb	r2, [r3, #0]

		}
	HAL_UART_Receive_IT(&huart6, &rx_data_EGU, 1);
 80039ac:	2201      	movs	r2, #1
 80039ae:	490a      	ldr	r1, [pc, #40]	@ (80039d8 <HAL_UART_RxCpltCallback+0xc8>)
 80039b0:	4808      	ldr	r0, [pc, #32]	@ (80039d4 <HAL_UART_RxCpltCallback+0xc4>)
 80039b2:	f006 f86b 	bl	8009a8c <HAL_UART_Receive_IT>
		}
}
 80039b6:	bf00      	nop
 80039b8:	3708      	adds	r7, #8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	200004b8 	.word	0x200004b8
 80039c4:	20000635 	.word	0x20000635
 80039c8:	20000634 	.word	0x20000634
 80039cc:	200005b4 	.word	0x200005b4
 80039d0:	20000a08 	.word	0x20000a08
 80039d4:	20000540 	.word	0x20000540
 80039d8:	200005a6 	.word	0x200005a6
 80039dc:	200005a7 	.word	0x200005a7
 80039e0:	20000584 	.word	0x20000584

080039e4 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]

	if(htim==&htim11){ // 1 sn
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a35      	ldr	r2, [pc, #212]	@ (8003ac4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d116      	bne.n	8003a22 <HAL_TIM_PeriodElapsedCallback+0x3e>
   lora_flag=1;
 80039f4:	4b34      	ldr	r3, [pc, #208]	@ (8003ac8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80039f6:	2201      	movs	r2, #1
 80039f8:	701a      	strb	r2, [r3, #0]

		if(buzzer_long ==1 && buzzer_long_counter>=2)
 80039fa:	4b34      	ldr	r3, [pc, #208]	@ (8003acc <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d10a      	bne.n	8003a18 <HAL_TIM_PeriodElapsedCallback+0x34>
 8003a02:	4b33      	ldr	r3, [pc, #204]	@ (8003ad0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	dd06      	ble.n	8003a18 <HAL_TIM_PeriodElapsedCallback+0x34>
		{
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);
 8003a0a:	2110      	movs	r1, #16
 8003a0c:	4831      	ldr	r0, [pc, #196]	@ (8003ad4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8003a0e:	f003 f8a2 	bl	8006b56 <HAL_GPIO_TogglePin>
			buzzer_long_counter = 0;
 8003a12:	4b2f      	ldr	r3, [pc, #188]	@ (8003ad0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	601a      	str	r2, [r3, #0]
		}
		buzzer_long_counter++;
 8003a18:	4b2d      	ldr	r3, [pc, #180]	@ (8003ad0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	4a2c      	ldr	r2, [pc, #176]	@ (8003ad0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8003a20:	6013      	str	r3, [r2, #0]

	}

	if(htim==&htim10){ //30ms
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a2c      	ldr	r2, [pc, #176]	@ (8003ad8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d116      	bne.n	8003a58 <HAL_TIM_PeriodElapsedCallback+0x74>
	sensor_flag=1;
 8003a2a:	4b2c      	ldr	r3, [pc, #176]	@ (8003adc <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	701a      	strb	r2, [r3, #0]

		if(buzzer_ariza ==1 && buzzer_ariza_counter>=3)
 8003a30:	4b2b      	ldr	r3, [pc, #172]	@ (8003ae0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d10a      	bne.n	8003a4e <HAL_TIM_PeriodElapsedCallback+0x6a>
 8003a38:	4b2a      	ldr	r3, [pc, #168]	@ (8003ae4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	dd06      	ble.n	8003a4e <HAL_TIM_PeriodElapsedCallback+0x6a>
		{
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);
 8003a40:	2110      	movs	r1, #16
 8003a42:	4824      	ldr	r0, [pc, #144]	@ (8003ad4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8003a44:	f003 f887 	bl	8006b56 <HAL_GPIO_TogglePin>
			buzzer_ariza_counter = 0;
 8003a48:	4b26      	ldr	r3, [pc, #152]	@ (8003ae4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	601a      	str	r2, [r3, #0]
		}
		buzzer_ariza_counter++;
 8003a4e:	4b25      	ldr	r3, [pc, #148]	@ (8003ae4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	3301      	adds	r3, #1
 8003a54:	4a23      	ldr	r2, [pc, #140]	@ (8003ae4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8003a56:	6013      	str	r3, [r2, #0]
	}


	if(htim==&htim6){ // 200 ms timer
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a23      	ldr	r2, [pc, #140]	@ (8003ae8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d12c      	bne.n	8003aba <HAL_TIM_PeriodElapsedCallback+0xd6>
	timer_200ms_flag = 1;
 8003a60:	4b22      	ldr	r3, [pc, #136]	@ (8003aec <HAL_TIM_PeriodElapsedCallback+0x108>)
 8003a62:	2201      	movs	r2, #1
 8003a64:	701a      	strb	r2, [r3, #0]
	egu_durum_flag=1;
 8003a66:	4b22      	ldr	r3, [pc, #136]	@ (8003af0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8003a68:	2201      	movs	r2, #1
 8003a6a:	701a      	strb	r2, [r3, #0]

		if(buzzer_short ==1 && buzzer_short_counter>=2)
 8003a6c:	4b21      	ldr	r3, [pc, #132]	@ (8003af4 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d10a      	bne.n	8003a8a <HAL_TIM_PeriodElapsedCallback+0xa6>
 8003a74:	4b20      	ldr	r3, [pc, #128]	@ (8003af8 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	dd06      	ble.n	8003a8a <HAL_TIM_PeriodElapsedCallback+0xa6>
		{
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);
 8003a7c:	2110      	movs	r1, #16
 8003a7e:	4815      	ldr	r0, [pc, #84]	@ (8003ad4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8003a80:	f003 f869 	bl	8006b56 <HAL_GPIO_TogglePin>
			buzzer_short_counter = 0;
 8003a84:	4b1c      	ldr	r3, [pc, #112]	@ (8003af8 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	601a      	str	r2, [r3, #0]
		}
		buzzer_short_counter++;
 8003a8a:	4b1b      	ldr	r3, [pc, #108]	@ (8003af8 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	3301      	adds	r3, #1
 8003a90:	4a19      	ldr	r2, [pc, #100]	@ (8003af8 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8003a92:	6013      	str	r3, [r2, #0]

		counter++;
 8003a94:	4b19      	ldr	r3, [pc, #100]	@ (8003afc <HAL_TIM_PeriodElapsedCallback+0x118>)
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	3301      	adds	r3, #1
 8003a9a:	b2da      	uxtb	r2, r3
 8003a9c:	4b17      	ldr	r3, [pc, #92]	@ (8003afc <HAL_TIM_PeriodElapsedCallback+0x118>)
 8003a9e:	701a      	strb	r2, [r3, #0]
		if(counter == 15)
 8003aa0:	4b16      	ldr	r3, [pc, #88]	@ (8003afc <HAL_TIM_PeriodElapsedCallback+0x118>)
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	2b0f      	cmp	r3, #15
 8003aa6:	d108      	bne.n	8003aba <HAL_TIM_PeriodElapsedCallback+0xd6>
		{
			adc_flag=1;
 8003aa8:	4b15      	ldr	r3, [pc, #84]	@ (8003b00 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8003aaa:	2201      	movs	r2, #1
 8003aac:	701a      	strb	r2, [r3, #0]
			counter =0;
 8003aae:	4b13      	ldr	r3, [pc, #76]	@ (8003afc <HAL_TIM_PeriodElapsedCallback+0x118>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	701a      	strb	r2, [r3, #0]
			HAL_ADC_Start_IT(&hadc1);
 8003ab4:	4813      	ldr	r0, [pc, #76]	@ (8003b04 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8003ab6:	f002 f89d 	bl	8005bf4 <HAL_ADC_Start_IT>


	}


}
 8003aba:	bf00      	nop
 8003abc:	3708      	adds	r7, #8
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	2000042c 	.word	0x2000042c
 8003ac8:	200009a6 	.word	0x200009a6
 8003acc:	2000063c 	.word	0x2000063c
 8003ad0:	2000064c 	.word	0x2000064c
 8003ad4:	40020800 	.word	0x40020800
 8003ad8:	200003e4 	.word	0x200003e4
 8003adc:	200009a7 	.word	0x200009a7
 8003ae0:	20000644 	.word	0x20000644
 8003ae4:	20000650 	.word	0x20000650
 8003ae8:	20000354 	.word	0x20000354
 8003aec:	20000639 	.word	0x20000639
 8003af0:	200009a8 	.word	0x200009a8
 8003af4:	20000640 	.word	0x20000640
 8003af8:	20000648 	.word	0x20000648
 8003afc:	200005b0 	.word	0x200005b0
 8003b00:	200005b1 	.word	0x200005b1
 8003b04:	20000260 	.word	0x20000260

08003b08 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1 )
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a09      	ldr	r2, [pc, #36]	@ (8003b3c <HAL_ADC_ConvCpltCallback+0x34>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d10c      	bne.n	8003b34 <HAL_ADC_ConvCpltCallback+0x2c>
	{
		adc= HAL_ADC_GetValue(&hadc1);
 8003b1a:	4809      	ldr	r0, [pc, #36]	@ (8003b40 <HAL_ADC_ConvCpltCallback+0x38>)
 8003b1c:	f002 fa58 	bl	8005fd0 <HAL_ADC_GetValue>
 8003b20:	ee07 0a90 	vmov	s15, r0
 8003b24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b28:	4b06      	ldr	r3, [pc, #24]	@ (8003b44 <HAL_ADC_ConvCpltCallback+0x3c>)
 8003b2a:	edc3 7a00 	vstr	s15, [r3]


		adc_flag = 0;
 8003b2e:	4b06      	ldr	r3, [pc, #24]	@ (8003b48 <HAL_ADC_ConvCpltCallback+0x40>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	701a      	strb	r2, [r3, #0]
	}
}
 8003b34:	bf00      	nop
 8003b36:	3708      	adds	r7, #8
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	40012000 	.word	0x40012000
 8003b40:	20000260 	.word	0x20000260
 8003b44:	200005ac 	.word	0x200005ac
 8003b48:	200005b1 	.word	0x200005b1
 8003b4c:	00000000 	.word	0x00000000

08003b50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003b56:	f001 ff73 	bl	8005a40 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003b5a:	f000 fcc9 	bl	80044f0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003b5e:	f000 ff45 	bl	80049ec <MX_GPIO_Init>
  MX_ADC1_Init();
 8003b62:	f000 fd31 	bl	80045c8 <MX_ADC1_Init>
  MX_I2C1_Init();
 8003b66:	f000 fd81 	bl	800466c <MX_I2C1_Init>
  MX_SPI1_Init();
 8003b6a:	f000 fdad 	bl	80046c8 <MX_SPI1_Init>
  MX_UART4_Init();
 8003b6e:	f000 fe95 	bl	800489c <MX_UART4_Init>
  MX_USART2_UART_Init();
 8003b72:	f000 febd 	bl	80048f0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8003b76:	f000 fee5 	bl	8004944 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8003b7a:	f000 ff0d 	bl	8004998 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8003b7e:	f006 ff1d 	bl	800a9bc <MX_FATFS_Init>
  MX_TIM11_Init();
 8003b82:	f000 fe67 	bl	8004854 <MX_TIM11_Init>
  MX_TIM10_Init();
 8003b86:	f000 fe41 	bl	800480c <MX_TIM10_Init>
  MX_TIM6_Init();
 8003b8a:	f000 fdd3 	bl	8004734 <MX_TIM6_Init>
  MX_TIM7_Init();
 8003b8e:	f000 fe07 	bl	80047a0 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8003b92:	2201      	movs	r2, #1
 8003b94:	2102      	movs	r1, #2
 8003b96:	48c2      	ldr	r0, [pc, #776]	@ (8003ea0 <main+0x350>)
 8003b98:	f002 ffc4 	bl	8006b24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	2104      	movs	r1, #4
 8003ba0:	48c0      	ldr	r0, [pc, #768]	@ (8003ea4 <main+0x354>)
 8003ba2:	f002 ffbf 	bl	8006b24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003bac:	48bc      	ldr	r0, [pc, #752]	@ (8003ea0 <main+0x350>)
 8003bae:	f002 ffb9 	bl	8006b24 <HAL_GPIO_WritePin>

  ///KURTARMA PORTLARI KAPALI EMIN OL
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);//A
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	2110      	movs	r1, #16
 8003bb6:	48bb      	ldr	r0, [pc, #748]	@ (8003ea4 <main+0x354>)
 8003bb8:	f002 ffb4 	bl	8006b24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);//B
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	2108      	movs	r1, #8
 8003bc0:	48b8      	ldr	r0, [pc, #736]	@ (8003ea4 <main+0x354>)
 8003bc2:	f002 ffaf 	bl	8006b24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);//C
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003bcc:	48b4      	ldr	r0, [pc, #720]	@ (8003ea0 <main+0x350>)
 8003bce:	f002 ffa9 	bl	8006b24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);//D
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003bd8:	48b1      	ldr	r0, [pc, #708]	@ (8003ea0 <main+0x350>)
 8003bda:	f002 ffa3 	bl	8006b24 <HAL_GPIO_WritePin>

  HAL_UART_Receive_IT(&huart2,&rx_data,1);
 8003bde:	2201      	movs	r2, #1
 8003be0:	49b1      	ldr	r1, [pc, #708]	@ (8003ea8 <main+0x358>)
 8003be2:	48b2      	ldr	r0, [pc, #712]	@ (8003eac <main+0x35c>)
 8003be4:	f005 ff52 	bl	8009a8c <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, &rx_data_EGU, 1);
 8003be8:	2201      	movs	r2, #1
 8003bea:	49b1      	ldr	r1, [pc, #708]	@ (8003eb0 <main+0x360>)
 8003bec:	48b1      	ldr	r0, [pc, #708]	@ (8003eb4 <main+0x364>)
 8003bee:	f005 ff4d 	bl	8009a8c <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim11);
 8003bf2:	48b1      	ldr	r0, [pc, #708]	@ (8003eb8 <main+0x368>)
 8003bf4:	f005 fb26 	bl	8009244 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim10);
 8003bf8:	48b0      	ldr	r0, [pc, #704]	@ (8003ebc <main+0x36c>)
 8003bfa:	f005 fb23 	bl	8009244 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 8003bfe:	48b0      	ldr	r0, [pc, #704]	@ (8003ec0 <main+0x370>)
 8003c00:	f005 fb20 	bl	8009244 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Stop_IT(&htim7);
 8003c04:	48af      	ldr	r0, [pc, #700]	@ (8003ec4 <main+0x374>)
 8003c06:	f005 fb8d 	bl	8009324 <HAL_TIM_Base_Stop_IT>

  MAFilter_Init(&accx);
 8003c0a:	48af      	ldr	r0, [pc, #700]	@ (8003ec8 <main+0x378>)
 8003c0c:	f7fe fdc6 	bl	800279c <MAFilter_Init>
  FIRFilter_Init(&IMU_GYROY);
 8003c10:	48ae      	ldr	r0, [pc, #696]	@ (8003ecc <main+0x37c>)
 8003c12:	f7fe fd45 	bl	80026a0 <FIRFilter_Init>
  FIRFilter_Init(&IMU_GYROX);
 8003c16:	48ae      	ldr	r0, [pc, #696]	@ (8003ed0 <main+0x380>)
 8003c18:	f7fe fd42 	bl	80026a0 <FIRFilter_Init>
  FIRFilter_Init(&IMU_GYROZ);
 8003c1c:	48ad      	ldr	r0, [pc, #692]	@ (8003ed4 <main+0x384>)
 8003c1e:	f7fe fd3f 	bl	80026a0 <FIRFilter_Init>


  lwgps_init(&gps);
 8003c22:	48ad      	ldr	r0, [pc, #692]	@ (8003ed8 <main+0x388>)
 8003c24:	f7ff fda6 	bl	8003774 <lwgps_init>
  LSM6DSLTR_Init();
 8003c28:	f7fe fdda 	bl	80027e0 <LSM6DSLTR_Init>
  E220_CONFIG(0x6,0x4A,0X10,1);
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	2210      	movs	r2, #16
 8003c30:	214a      	movs	r1, #74	@ 0x4a
 8003c32:	2006      	movs	r0, #6
 8003c34:	f000 ff86 	bl	8004b44 <E220_CONFIG>
  HAL_ADC_Start_IT(&hadc1);
 8003c38:	48a8      	ldr	r0, [pc, #672]	@ (8003edc <main+0x38c>)
 8003c3a:	f001 ffdb 	bl	8005bf4 <HAL_ADC_Start_IT>

  dev.dev_id = BME280_I2C_ADDR_PRIM;
 8003c3e:	4ba8      	ldr	r3, [pc, #672]	@ (8003ee0 <main+0x390>)
 8003c40:	2276      	movs	r2, #118	@ 0x76
 8003c42:	705a      	strb	r2, [r3, #1]
  dev.intf = BME280_I2C_INTF;
 8003c44:	4ba6      	ldr	r3, [pc, #664]	@ (8003ee0 <main+0x390>)
 8003c46:	2201      	movs	r2, #1
 8003c48:	709a      	strb	r2, [r3, #2]
  dev.read = user_i2c_read;
 8003c4a:	4ba5      	ldr	r3, [pc, #660]	@ (8003ee0 <main+0x390>)
 8003c4c:	4aa5      	ldr	r2, [pc, #660]	@ (8003ee4 <main+0x394>)
 8003c4e:	605a      	str	r2, [r3, #4]
  dev.write = user_i2c_write;
 8003c50:	4ba3      	ldr	r3, [pc, #652]	@ (8003ee0 <main+0x390>)
 8003c52:	4aa5      	ldr	r2, [pc, #660]	@ (8003ee8 <main+0x398>)
 8003c54:	609a      	str	r2, [r3, #8]
  dev.delay_ms = user_delay_ms;
 8003c56:	4ba2      	ldr	r3, [pc, #648]	@ (8003ee0 <main+0x390>)
 8003c58:	4aa4      	ldr	r2, [pc, #656]	@ (8003eec <main+0x39c>)
 8003c5a:	60da      	str	r2, [r3, #12]

  rslt = bme280_init(&dev);
 8003c5c:	48a0      	ldr	r0, [pc, #640]	@ (8003ee0 <main+0x390>)
 8003c5e:	f7fd fa29 	bl	80010b4 <bme280_init>
 8003c62:	4603      	mov	r3, r0
 8003c64:	461a      	mov	r2, r3
 8003c66:	4ba2      	ldr	r3, [pc, #648]	@ (8003ef0 <main+0x3a0>)
 8003c68:	701a      	strb	r2, [r3, #0]

  dev.settings.osr_h = BME280_OVERSAMPLING_1X;
 8003c6a:	4b9d      	ldr	r3, [pc, #628]	@ (8003ee0 <main+0x390>)
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
  dev.settings.osr_p = BME280_OVERSAMPLING_4X;
 8003c72:	4b9b      	ldr	r3, [pc, #620]	@ (8003ee0 <main+0x390>)
 8003c74:	2203      	movs	r2, #3
 8003c76:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  dev.settings.osr_t = BME280_OVERSAMPLING_2X;
 8003c7a:	4b99      	ldr	r3, [pc, #612]	@ (8003ee0 <main+0x390>)
 8003c7c:	2202      	movs	r2, #2
 8003c7e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  dev.settings.filter = BME280_FILTER_COEFF_16;
 8003c82:	4b97      	ldr	r3, [pc, #604]	@ (8003ee0 <main+0x390>)
 8003c84:	2204      	movs	r2, #4
 8003c86:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
  rslt = bme280_set_sensor_settings(BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL, &dev);
 8003c8a:	4995      	ldr	r1, [pc, #596]	@ (8003ee0 <main+0x390>)
 8003c8c:	200f      	movs	r0, #15
 8003c8e:	f7fd fb05 	bl	800129c <bme280_set_sensor_settings>
 8003c92:	4603      	mov	r3, r0
 8003c94:	461a      	mov	r2, r3
 8003c96:	4b96      	ldr	r3, [pc, #600]	@ (8003ef0 <main+0x3a0>)
 8003c98:	701a      	strb	r2, [r3, #0]

  ////ALTITUDE OFFSET
   Altitude_Offset();
 8003c9a:	f001 fa61 	bl	8005160 <Altitude_Offset>
   KalmanFilter_Init(&kf, 0.005, 0.1, 0.0); // Adjust Q=0.01 idi and R based on your system characteristics
 8003c9e:	ed9f 1a95 	vldr	s2, [pc, #596]	@ 8003ef4 <main+0x3a4>
 8003ca2:	eddf 0a95 	vldr	s1, [pc, #596]	@ 8003ef8 <main+0x3a8>
 8003ca6:	ed9f 0a95 	vldr	s0, [pc, #596]	@ 8003efc <main+0x3ac>
 8003caa:	4895      	ldr	r0, [pc, #596]	@ (8003f00 <main+0x3b0>)
 8003cac:	f7ff f83e 	bl	8002d2c <KalmanFilter_Init>



 //  W25Q_Read(1, 0, sizeof(flash_accX), flash_accX);
   buzzer_short = 1;
 8003cb0:	4b94      	ldr	r3, [pc, #592]	@ (8003f04 <main+0x3b4>)
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {

/********************* Sensor Ölçüm **************************************************/
	if(sensor_flag==1)
 8003cb6:	4b94      	ldr	r3, [pc, #592]	@ (8003f08 <main+0x3b8>)
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	f040 8164 	bne.w	8003f88 <main+0x438>
	{
		 sensor_flag=0;
 8003cc0:	4b91      	ldr	r3, [pc, #580]	@ (8003f08 <main+0x3b8>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	701a      	strb	r2, [r3, #0]
		 prev_alt=altitude_kalman;
 8003cc6:	4b91      	ldr	r3, [pc, #580]	@ (8003f0c <main+0x3bc>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a91      	ldr	r2, [pc, #580]	@ (8003f10 <main+0x3c0>)
 8003ccc:	6013      	str	r3, [r2, #0]
		 rslt = bme280_set_sensor_mode(BME280_FORCED_MODE, &dev);
 8003cce:	4984      	ldr	r1, [pc, #528]	@ (8003ee0 <main+0x390>)
 8003cd0:	2001      	movs	r0, #1
 8003cd2:	f7fd fb38 	bl	8001346 <bme280_set_sensor_mode>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	461a      	mov	r2, r3
 8003cda:	4b85      	ldr	r3, [pc, #532]	@ (8003ef0 <main+0x3a0>)
 8003cdc:	701a      	strb	r2, [r3, #0]
		/* �?��?�터 취�? */
		rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 8003cde:	4a80      	ldr	r2, [pc, #512]	@ (8003ee0 <main+0x390>)
 8003ce0:	498c      	ldr	r1, [pc, #560]	@ (8003f14 <main+0x3c4>)
 8003ce2:	2007      	movs	r0, #7
 8003ce4:	f7fd fbab 	bl	800143e <bme280_get_sensor_data>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	461a      	mov	r2, r3
 8003cec:	4b80      	ldr	r3, [pc, #512]	@ (8003ef0 <main+0x3a0>)
 8003cee:	701a      	strb	r2, [r3, #0]

		if(rslt == BME280_OK)
 8003cf0:	4b7f      	ldr	r3, [pc, #508]	@ (8003ef0 <main+0x3a0>)
 8003cf2:	f993 3000 	ldrsb.w	r3, [r3]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d14c      	bne.n	8003d94 <main+0x244>
		{
		  temperature = comp_data.temperature/100.00;
 8003cfa:	4b86      	ldr	r3, [pc, #536]	@ (8003f14 <main+0x3c4>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7fc fc28 	bl	8000554 <__aeabi_i2d>
 8003d04:	f04f 0200 	mov.w	r2, #0
 8003d08:	4b83      	ldr	r3, [pc, #524]	@ (8003f18 <main+0x3c8>)
 8003d0a:	f7fc fdb7 	bl	800087c <__aeabi_ddiv>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	460b      	mov	r3, r1
 8003d12:	4610      	mov	r0, r2
 8003d14:	4619      	mov	r1, r3
 8003d16:	f7fc ff7f 	bl	8000c18 <__aeabi_d2f>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	4a7f      	ldr	r2, [pc, #508]	@ (8003f1c <main+0x3cc>)
 8003d1e:	6013      	str	r3, [r2, #0]
		  humidity = comp_data.humidity;
 8003d20:	4b7c      	ldr	r3, [pc, #496]	@ (8003f14 <main+0x3c4>)
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	ee07 3a90 	vmov	s15, r3
 8003d28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d2c:	4b7c      	ldr	r3, [pc, #496]	@ (8003f20 <main+0x3d0>)
 8003d2e:	edc3 7a00 	vstr	s15, [r3]
		  pressure = comp_data.pressure;
 8003d32:	4b78      	ldr	r3, [pc, #480]	@ (8003f14 <main+0x3c4>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	ee07 3a90 	vmov	s15, r3
 8003d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d3e:	4b79      	ldr	r3, [pc, #484]	@ (8003f24 <main+0x3d4>)
 8003d40:	edc3 7a00 	vstr	s15, [r3]
		  altitude=BME280_Get_Altitude()-offset_altitude;
 8003d44:	f000 ff5c 	bl	8004c00 <BME280_Get_Altitude>
 8003d48:	eeb0 7a40 	vmov.f32	s14, s0
 8003d4c:	4b76      	ldr	r3, [pc, #472]	@ (8003f28 <main+0x3d8>)
 8003d4e:	edd3 7a00 	vldr	s15, [r3]
 8003d52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d56:	4b75      	ldr	r3, [pc, #468]	@ (8003f2c <main+0x3dc>)
 8003d58:	edc3 7a00 	vstr	s15, [r3]
		  altitude_kalman= KalmanFilter_Update(&kf, altitude);
 8003d5c:	4b73      	ldr	r3, [pc, #460]	@ (8003f2c <main+0x3dc>)
 8003d5e:	edd3 7a00 	vldr	s15, [r3]
 8003d62:	eeb0 0a67 	vmov.f32	s0, s15
 8003d66:	4866      	ldr	r0, [pc, #408]	@ (8003f00 <main+0x3b0>)
 8003d68:	f7ff f802 	bl	8002d70 <KalmanFilter_Update>
 8003d6c:	eef0 7a40 	vmov.f32	s15, s0
 8003d70:	4b66      	ldr	r3, [pc, #408]	@ (8003f0c <main+0x3bc>)
 8003d72:	edc3 7a00 	vstr	s15, [r3]
		  speed=(altitude_kalman-prev_alt)*20;
 8003d76:	4b65      	ldr	r3, [pc, #404]	@ (8003f0c <main+0x3bc>)
 8003d78:	ed93 7a00 	vldr	s14, [r3]
 8003d7c:	4b64      	ldr	r3, [pc, #400]	@ (8003f10 <main+0x3c0>)
 8003d7e:	edd3 7a00 	vldr	s15, [r3]
 8003d82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d86:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8003d8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d8e:	4b68      	ldr	r3, [pc, #416]	@ (8003f30 <main+0x3e0>)
 8003d90:	edc3 7a00 	vstr	s15, [r3]
    	}

		 LSM6DSLTR_Read_Accel_Data(&Lsm_Sensor);
 8003d94:	4867      	ldr	r0, [pc, #412]	@ (8003f34 <main+0x3e4>)
 8003d96:	f7fe fd73 	bl	8002880 <LSM6DSLTR_Read_Accel_Data>
		 calculate_roll_pitch(&Lsm_Sensor);
 8003d9a:	4866      	ldr	r0, [pc, #408]	@ (8003f34 <main+0x3e4>)
 8003d9c:	f7fe fee4 	bl	8002b68 <calculate_roll_pitch>
		 LSM6DSLTR_Read_Gyro_Data(&Lsm_Sensor);
 8003da0:	4864      	ldr	r0, [pc, #400]	@ (8003f34 <main+0x3e4>)
 8003da2:	f7fe fe47 	bl	8002a34 <LSM6DSLTR_Read_Gyro_Data>
		 update_angles(&Lsm_Sensor);
 8003da6:	4863      	ldr	r0, [pc, #396]	@ (8003f34 <main+0x3e4>)
 8003da8:	f7fe ff64 	bl	8002c74 <update_angles>

		 Lsm_Sensor.Accel_X=FIRFilter_Update(&accx,  Lsm_Sensor.Accel_X);
 8003dac:	4b61      	ldr	r3, [pc, #388]	@ (8003f34 <main+0x3e4>)
 8003dae:	edd3 7a00 	vldr	s15, [r3]
 8003db2:	eeb0 0a67 	vmov.f32	s0, s15
 8003db6:	4844      	ldr	r0, [pc, #272]	@ (8003ec8 <main+0x378>)
 8003db8:	f7fe fc94 	bl	80026e4 <FIRFilter_Update>
 8003dbc:	eef0 7a40 	vmov.f32	s15, s0
 8003dc0:	4b5c      	ldr	r3, [pc, #368]	@ (8003f34 <main+0x3e4>)
 8003dc2:	edc3 7a00 	vstr	s15, [r3]
		 Lsm_Sensor.Gyro_X=FIRFilter_Update(&IMU_GYROX,  Lsm_Sensor.Gyro_X);
 8003dc6:	4b5b      	ldr	r3, [pc, #364]	@ (8003f34 <main+0x3e4>)
 8003dc8:	edd3 7a03 	vldr	s15, [r3, #12]
 8003dcc:	eeb0 0a67 	vmov.f32	s0, s15
 8003dd0:	483f      	ldr	r0, [pc, #252]	@ (8003ed0 <main+0x380>)
 8003dd2:	f7fe fc87 	bl	80026e4 <FIRFilter_Update>
 8003dd6:	eef0 7a40 	vmov.f32	s15, s0
 8003dda:	4b56      	ldr	r3, [pc, #344]	@ (8003f34 <main+0x3e4>)
 8003ddc:	edc3 7a03 	vstr	s15, [r3, #12]
		 Lsm_Sensor.Gyro_Y=FIRFilter_Update(&IMU_GYROY, Lsm_Sensor.Gyro_Y);
 8003de0:	4b54      	ldr	r3, [pc, #336]	@ (8003f34 <main+0x3e4>)
 8003de2:	edd3 7a04 	vldr	s15, [r3, #16]
 8003de6:	eeb0 0a67 	vmov.f32	s0, s15
 8003dea:	4838      	ldr	r0, [pc, #224]	@ (8003ecc <main+0x37c>)
 8003dec:	f7fe fc7a 	bl	80026e4 <FIRFilter_Update>
 8003df0:	eef0 7a40 	vmov.f32	s15, s0
 8003df4:	4b4f      	ldr	r3, [pc, #316]	@ (8003f34 <main+0x3e4>)
 8003df6:	edc3 7a04 	vstr	s15, [r3, #16]
		 Lsm_Sensor.Gyro_Z=FIRFilter_Update(&IMU_GYROZ, Lsm_Sensor.Gyro_Z);
 8003dfa:	4b4e      	ldr	r3, [pc, #312]	@ (8003f34 <main+0x3e4>)
 8003dfc:	edd3 7a05 	vldr	s15, [r3, #20]
 8003e00:	eeb0 0a67 	vmov.f32	s0, s15
 8003e04:	4833      	ldr	r0, [pc, #204]	@ (8003ed4 <main+0x384>)
 8003e06:	f7fe fc6d 	bl	80026e4 <FIRFilter_Update>
 8003e0a:	eef0 7a40 	vmov.f32	s15, s0
 8003e0e:	4b49      	ldr	r3, [pc, #292]	@ (8003f34 <main+0x3e4>)
 8003e10:	edc3 7a05 	vstr	s15, [r3, #20]

		 toplam_pitch+= Lsm_Sensor.Pitch;
 8003e14:	4b47      	ldr	r3, [pc, #284]	@ (8003f34 <main+0x3e4>)
 8003e16:	ed93 7a07 	vldr	s14, [r3, #28]
 8003e1a:	4b47      	ldr	r3, [pc, #284]	@ (8003f38 <main+0x3e8>)
 8003e1c:	edd3 7a00 	vldr	s15, [r3]
 8003e20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e24:	4b44      	ldr	r3, [pc, #272]	@ (8003f38 <main+0x3e8>)
 8003e26:	edc3 7a00 	vstr	s15, [r3]
		 toplam_roll+= Lsm_Sensor.Roll;
 8003e2a:	4b42      	ldr	r3, [pc, #264]	@ (8003f34 <main+0x3e4>)
 8003e2c:	ed93 7a06 	vldr	s14, [r3, #24]
 8003e30:	4b42      	ldr	r3, [pc, #264]	@ (8003f3c <main+0x3ec>)
 8003e32:	edd3 7a00 	vldr	s15, [r3]
 8003e36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e3a:	4b40      	ldr	r3, [pc, #256]	@ (8003f3c <main+0x3ec>)
 8003e3c:	edc3 7a00 	vstr	s15, [r3]

		 sensor_counter++;
 8003e40:	4b3f      	ldr	r3, [pc, #252]	@ (8003f40 <main+0x3f0>)
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	3301      	adds	r3, #1
 8003e46:	b2da      	uxtb	r2, r3
 8003e48:	4b3d      	ldr	r3, [pc, #244]	@ (8003f40 <main+0x3f0>)
 8003e4a:	701a      	strb	r2, [r3, #0]
		 if(sensor_counter == 6)
 8003e4c:	4b3c      	ldr	r3, [pc, #240]	@ (8003f40 <main+0x3f0>)
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	2b06      	cmp	r3, #6
 8003e52:	d11e      	bne.n	8003e92 <main+0x342>
		 {
			 real_pitch = toplam_pitch/6;
 8003e54:	4b38      	ldr	r3, [pc, #224]	@ (8003f38 <main+0x3e8>)
 8003e56:	ed93 7a00 	vldr	s14, [r3]
 8003e5a:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 8003e5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e62:	4b38      	ldr	r3, [pc, #224]	@ (8003f44 <main+0x3f4>)
 8003e64:	edc3 7a00 	vstr	s15, [r3]
			 real_roll = toplam_roll/6;
 8003e68:	4b34      	ldr	r3, [pc, #208]	@ (8003f3c <main+0x3ec>)
 8003e6a:	ed93 7a00 	vldr	s14, [r3]
 8003e6e:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 8003e72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e76:	4b34      	ldr	r3, [pc, #208]	@ (8003f48 <main+0x3f8>)
 8003e78:	edc3 7a00 	vstr	s15, [r3]
			 toplam_roll=0;
 8003e7c:	4b2f      	ldr	r3, [pc, #188]	@ (8003f3c <main+0x3ec>)
 8003e7e:	f04f 0200 	mov.w	r2, #0
 8003e82:	601a      	str	r2, [r3, #0]
			 toplam_pitch=0;
 8003e84:	4b2c      	ldr	r3, [pc, #176]	@ (8003f38 <main+0x3e8>)
 8003e86:	f04f 0200 	mov.w	r2, #0
 8003e8a:	601a      	str	r2, [r3, #0]
			 sensor_counter =0;
 8003e8c:	4b2c      	ldr	r3, [pc, #176]	@ (8003f40 <main+0x3f0>)
 8003e8e:	2200      	movs	r2, #0
 8003e90:	701a      	strb	r2, [r3, #0]
		 }

		 magnetic_switch=HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8003e92:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003e96:	4802      	ldr	r0, [pc, #8]	@ (8003ea0 <main+0x350>)
 8003e98:	f002 fe2c 	bl	8006af4 <HAL_GPIO_ReadPin>
 8003e9c:	e056      	b.n	8003f4c <main+0x3fc>
 8003e9e:	bf00      	nop
 8003ea0:	40020800 	.word	0x40020800
 8003ea4:	40020400 	.word	0x40020400
 8003ea8:	20000635 	.word	0x20000635
 8003eac:	200004b8 	.word	0x200004b8
 8003eb0:	200005a6 	.word	0x200005a6
 8003eb4:	20000540 	.word	0x20000540
 8003eb8:	2000042c 	.word	0x2000042c
 8003ebc:	200003e4 	.word	0x200003e4
 8003ec0:	20000354 	.word	0x20000354
 8003ec4:	2000039c 	.word	0x2000039c
 8003ec8:	20000adc 	.word	0x20000adc
 8003ecc:	20000b6c 	.word	0x20000b6c
 8003ed0:	20000b24 	.word	0x20000b24
 8003ed4:	20000bb4 	.word	0x20000bb4
 8003ed8:	20000a08 	.word	0x20000a08
 8003edc:	20000260 	.word	0x20000260
 8003ee0:	20000bfc 	.word	0x20000bfc
 8003ee4:	08004cf1 	.word	0x08004cf1
 8003ee8:	08004d79 	.word	0x08004d79
 8003eec:	08004d61 	.word	0x08004d61
 8003ef0:	20000c48 	.word	0x20000c48
 8003ef4:	00000000 	.word	0x00000000
 8003ef8:	3dcccccd 	.word	0x3dcccccd
 8003efc:	3ba3d70a 	.word	0x3ba3d70a
 8003f00:	200009ec 	.word	0x200009ec
 8003f04:	20000640 	.word	0x20000640
 8003f08:	200009a7 	.word	0x200009a7
 8003f0c:	200009d0 	.word	0x200009d0
 8003f10:	200009c4 	.word	0x200009c4
 8003f14:	20000c3c 	.word	0x20000c3c
 8003f18:	40590000 	.word	0x40590000
 8003f1c:	200009ac 	.word	0x200009ac
 8003f20:	200009b0 	.word	0x200009b0
 8003f24:	200009bc 	.word	0x200009bc
 8003f28:	200009b8 	.word	0x200009b8
 8003f2c:	200009b4 	.word	0x200009b4
 8003f30:	200009c8 	.word	0x200009c8
 8003f34:	20000ab8 	.word	0x20000ab8
 8003f38:	200009dc 	.word	0x200009dc
 8003f3c:	200009e0 	.word	0x200009e0
 8003f40:	200009e8 	.word	0x200009e8
 8003f44:	200009d4 	.word	0x200009d4
 8003f48:	200009d8 	.word	0x200009d8
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	461a      	mov	r2, r3
 8003f50:	4ba5      	ldr	r3, [pc, #660]	@ (80041e8 <main+0x698>)
 8003f52:	701a      	strb	r2, [r3, #0]
		 if(magnetic_switch == 0) { buzzer_long=1; buzzer_short =0;}
 8003f54:	4ba4      	ldr	r3, [pc, #656]	@ (80041e8 <main+0x698>)
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d106      	bne.n	8003f6a <main+0x41a>
 8003f5c:	4ba3      	ldr	r3, [pc, #652]	@ (80041ec <main+0x69c>)
 8003f5e:	2201      	movs	r2, #1
 8003f60:	601a      	str	r2, [r3, #0]
 8003f62:	4ba3      	ldr	r3, [pc, #652]	@ (80041f0 <main+0x6a0>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	601a      	str	r2, [r3, #0]
 8003f68:	e005      	b.n	8003f76 <main+0x426>
		 else {
			 buzzer_short=1;
 8003f6a:	4ba1      	ldr	r3, [pc, #644]	@ (80041f0 <main+0x6a0>)
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	601a      	str	r2, [r3, #0]
			 buzzer_long =0;
 8003f70:	4b9e      	ldr	r3, [pc, #632]	@ (80041ec <main+0x69c>)
 8003f72:	2200      	movs	r2, #0
 8003f74:	601a      	str	r2, [r3, #0]
		 }

		 BUTTON_STATE=HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9);
 8003f76:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003f7a:	489e      	ldr	r0, [pc, #632]	@ (80041f4 <main+0x6a4>)
 8003f7c:	f002 fdba 	bl	8006af4 <HAL_GPIO_ReadPin>
 8003f80:	4603      	mov	r3, r0
 8003f82:	461a      	mov	r2, r3
 8003f84:	4b9c      	ldr	r3, [pc, #624]	@ (80041f8 <main+0x6a8>)
 8003f86:	701a      	strb	r2, [r3, #0]


	}

/********************Lora Ayar ve Gönderme*****************************************************/
	if(lora_flag==1)
 8003f88:	4b9c      	ldr	r3, [pc, #624]	@ (80041fc <main+0x6ac>)
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d132      	bne.n	8003ff6 <main+0x4a6>
	{
	    lora_flag=0;
 8003f90:	4b9a      	ldr	r3, [pc, #616]	@ (80041fc <main+0x6ac>)
 8003f92:	2200      	movs	r2, #0
 8003f94:	701a      	strb	r2, [r3, #0]

		loratx[0]=0x8;
 8003f96:	4b9a      	ldr	r3, [pc, #616]	@ (8004200 <main+0x6b0>)
 8003f98:	2208      	movs	r2, #8
 8003f9a:	701a      	strb	r2, [r3, #0]
		loratx[1]=0x2A;
 8003f9c:	4b98      	ldr	r3, [pc, #608]	@ (8004200 <main+0x6b0>)
 8003f9e:	222a      	movs	r2, #42	@ 0x2a
 8003fa0:	705a      	strb	r2, [r3, #1]
		loratx[2]=0x10;
 8003fa2:	4b97      	ldr	r3, [pc, #604]	@ (8004200 <main+0x6b0>)
 8003fa4:	2210      	movs	r2, #16
 8003fa6:	709a      	strb	r2, [r3, #2]
		loratx[3]=DEVICE_ID;
 8003fa8:	4b95      	ldr	r3, [pc, #596]	@ (8004200 <main+0x6b0>)
 8003faa:	2202      	movs	r2, #2
 8003fac:	70da      	strb	r2, [r3, #3]
		loratx[4]=gps.sats_in_view;
 8003fae:	4b95      	ldr	r3, [pc, #596]	@ (8004204 <main+0x6b4>)
 8003fb0:	f893 204d 	ldrb.w	r2, [r3, #77]	@ 0x4d
 8003fb4:	4b92      	ldr	r3, [pc, #584]	@ (8004200 <main+0x6b0>)
 8003fb6:	711a      	strb	r2, [r3, #4]

		union_converter();
 8003fb8:	f000 ff1a 	bl	8004df0 <union_converter>

		loratx[49]=(uint8_t)adc_pil_val;
 8003fbc:	4b92      	ldr	r3, [pc, #584]	@ (8004208 <main+0x6b8>)
 8003fbe:	edd3 7a00 	vldr	s15, [r3]
 8003fc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fc6:	edc7 7a01 	vstr	s15, [r7, #4]
 8003fca:	793b      	ldrb	r3, [r7, #4]
 8003fcc:	b2da      	uxtb	r2, r3
 8003fce:	4b8c      	ldr	r3, [pc, #560]	@ (8004200 <main+0x6b0>)
 8003fd0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
		loratx[50]=v4_mod;
 8003fd4:	4b8d      	ldr	r3, [pc, #564]	@ (800420c <main+0x6bc>)
 8003fd6:	781a      	ldrb	r2, [r3, #0]
 8003fd8:	4b89      	ldr	r3, [pc, #548]	@ (8004200 <main+0x6b0>)
 8003fda:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
		loratx[51]=magnetic_switch;
 8003fde:	4b82      	ldr	r3, [pc, #520]	@ (80041e8 <main+0x698>)
 8003fe0:	781a      	ldrb	r2, [r3, #0]
 8003fe2:	4b87      	ldr	r3, [pc, #540]	@ (8004200 <main+0x6b0>)
 8003fe4:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

		////////EGU PART
		EGU_Buff_Load();
 8003fe8:	f001 f856 	bl	8005098 <EGU_Buff_Load>

		HAL_UART_Transmit_IT(&huart3,loratx,sizeof(loratx));
 8003fec:	2246      	movs	r2, #70	@ 0x46
 8003fee:	4984      	ldr	r1, [pc, #528]	@ (8004200 <main+0x6b0>)
 8003ff0:	4887      	ldr	r0, [pc, #540]	@ (8004210 <main+0x6c0>)
 8003ff2:	f005 fd06 	bl	8009a02 <HAL_UART_Transmit_IT>

	}


/************ EGÜ durum sorgusu gönder **************************************************/
	if(egu_durum_flag==1)
 8003ff6:	4b87      	ldr	r3, [pc, #540]	@ (8004214 <main+0x6c4>)
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d109      	bne.n	8004012 <main+0x4c2>
	{
		egu_durum_flag=0;
 8003ffe:	4b85      	ldr	r3, [pc, #532]	@ (8004214 <main+0x6c4>)
 8004000:	2200      	movs	r2, #0
 8004002:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart6, EGU_durum_sorgusu, 5, 1000);
 8004004:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004008:	2205      	movs	r2, #5
 800400a:	4983      	ldr	r1, [pc, #524]	@ (8004218 <main+0x6c8>)
 800400c:	4883      	ldr	r0, [pc, #524]	@ (800421c <main+0x6cc>)
 800400e:	f005 fc66 	bl	80098de <HAL_UART_Transmit>
	}


/**************************Algoritma****************************************************/
		  switch(SUSTAINER){
 8004012:	4b83      	ldr	r3, [pc, #524]	@ (8004220 <main+0x6d0>)
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	2b06      	cmp	r3, #6
 8004018:	f200 8121 	bhi.w	800425e <main+0x70e>
 800401c:	a201      	add	r2, pc, #4	@ (adr r2, 8004024 <main+0x4d4>)
 800401e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004022:	bf00      	nop
 8004024:	08004041 	.word	0x08004041
 8004028:	08004065 	.word	0x08004065
 800402c:	08004073 	.word	0x08004073
 8004030:	080040bf 	.word	0x080040bf
 8004034:	08004113 	.word	0x08004113
 8004038:	08004175 	.word	0x08004175
 800403c:	080041db 	.word	0x080041db

		  case RAMPA:
				v4_mod=1;
 8004040:	4b72      	ldr	r3, [pc, #456]	@ (800420c <main+0x6bc>)
 8004042:	2201      	movs	r2, #1
 8004044:	701a      	strb	r2, [r3, #0]
			  //RAMPA MODU ROKET RAMPADA EGÜ SWİTCHLERİ VE ALT KADEME HABERLE�?ME KONTROL ET

				if(Lsm_Sensor.Accel_X > 5 )
 8004046:	4b77      	ldr	r3, [pc, #476]	@ (8004224 <main+0x6d4>)
 8004048:	edd3 7a00 	vldr	s15, [r3]
 800404c:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8004050:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004058:	dc00      	bgt.n	800405c <main+0x50c>
				  {
					SUSTAINER=UCUS_BASLADI;
//					Buzzer(6, 300);
				  }

			  break;
 800405a:	e100      	b.n	800425e <main+0x70e>
					SUSTAINER=UCUS_BASLADI;
 800405c:	4b70      	ldr	r3, [pc, #448]	@ (8004220 <main+0x6d0>)
 800405e:	2201      	movs	r2, #1
 8004060:	701a      	strb	r2, [r3, #0]
			  break;
 8004062:	e0fc      	b.n	800425e <main+0x70e>

		  case UCUS_BASLADI:
				v4_mod=2;
 8004064:	4b69      	ldr	r3, [pc, #420]	@ (800420c <main+0x6bc>)
 8004066:	2202      	movs	r2, #2
 8004068:	701a      	strb	r2, [r3, #0]
				// FLASH MEMORYE KAYDETMEYE BASLA

				SUSTAINER=KADEMEAYRILDIMI;
 800406a:	4b6d      	ldr	r3, [pc, #436]	@ (8004220 <main+0x6d0>)
 800406c:	2202      	movs	r2, #2
 800406e:	701a      	strb	r2, [r3, #0]

			 break;
 8004070:	e0f5      	b.n	800425e <main+0x70e>

		  case KADEMEAYRILDIMI:
				v4_mod=3;
 8004072:	4b66      	ldr	r3, [pc, #408]	@ (800420c <main+0x6bc>)
 8004074:	2203      	movs	r2, #3
 8004076:	701a      	strb	r2, [r3, #0]
					  //ALT KADEMEDEN GELEN SİNYALE VE EGÜ SWİTCHLERİNE BAK
					  //BELLİ BİR SÜRE VE İRTİFA BOYUNCA AYRILMA OLMAZSA APOGEE YA GEÇ
				if(timer_start_flag == 0){
 8004078:	4b6b      	ldr	r3, [pc, #428]	@ (8004228 <main+0x6d8>)
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d109      	bne.n	8004094 <main+0x544>

					__HAL_TIM_SET_COUNTER(&htim7 , 0);
 8004080:	4b6a      	ldr	r3, [pc, #424]	@ (800422c <main+0x6dc>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2200      	movs	r2, #0
 8004086:	625a      	str	r2, [r3, #36]	@ 0x24
					HAL_TIM_Base_Start(&htim7);
 8004088:	4868      	ldr	r0, [pc, #416]	@ (800422c <main+0x6dc>)
 800408a:	f005 f873 	bl	8009174 <HAL_TIM_Base_Start>
					timer_start_flag =1;
 800408e:	4b66      	ldr	r3, [pc, #408]	@ (8004228 <main+0x6d8>)
 8004090:	2201      	movs	r2, #1
 8004092:	701a      	strb	r2, [r3, #0]
				}
				/*manyetik switch
				 * */
				if((magnetic_switch==0) && TIM7->CNT >= 45000 && altitude_rampa_control == 1)
 8004094:	4b54      	ldr	r3, [pc, #336]	@ (80041e8 <main+0x698>)
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	2b00      	cmp	r3, #0
 800409a:	f040 80a2 	bne.w	80041e2 <main+0x692>
 800409e:	4b64      	ldr	r3, [pc, #400]	@ (8004230 <main+0x6e0>)
 80040a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a2:	f64a 72c7 	movw	r2, #44999	@ 0xafc7
 80040a6:	4293      	cmp	r3, r2
 80040a8:	f240 809b 	bls.w	80041e2 <main+0x692>
 80040ac:	4b61      	ldr	r3, [pc, #388]	@ (8004234 <main+0x6e4>)
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	f040 8096 	bne.w	80041e2 <main+0x692>
				{
				  SUSTAINER=AYRILDI;
 80040b6:	4b5a      	ldr	r3, [pc, #360]	@ (8004220 <main+0x6d0>)
 80040b8:	2203      	movs	r2, #3
 80040ba:	701a      	strb	r2, [r3, #0]

//				  Buzzer(10, 100);
				}

			 break;
 80040bc:	e091      	b.n	80041e2 <main+0x692>

		  case AYRILDI:
				v4_mod=4;
 80040be:	4b53      	ldr	r3, [pc, #332]	@ (800420c <main+0x6bc>)
 80040c0:	2204      	movs	r2, #4
 80040c2:	701a      	strb	r2, [r3, #0]
					  //MOTOR ATE�?LEME TALEBİ GÖNDER MEGU YE MESAJ AT

				HAL_UART_Transmit(&huart6, EGU_motor_atesleme, 5, 1000);
 80040c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80040c8:	2205      	movs	r2, #5
 80040ca:	495b      	ldr	r1, [pc, #364]	@ (8004238 <main+0x6e8>)
 80040cc:	4853      	ldr	r0, [pc, #332]	@ (800421c <main+0x6cc>)
 80040ce:	f005 fc06 	bl	80098de <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart6, EGU_motor_atesleme, 5, 1000);
 80040d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80040d6:	2205      	movs	r2, #5
 80040d8:	4957      	ldr	r1, [pc, #348]	@ (8004238 <main+0x6e8>)
 80040da:	4850      	ldr	r0, [pc, #320]	@ (800421c <main+0x6cc>)
 80040dc:	f005 fbff 	bl	80098de <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart6, EGU_motor_atesleme, 5, 1000);
 80040e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80040e4:	2205      	movs	r2, #5
 80040e6:	4954      	ldr	r1, [pc, #336]	@ (8004238 <main+0x6e8>)
 80040e8:	484c      	ldr	r0, [pc, #304]	@ (800421c <main+0x6cc>)
 80040ea:	f005 fbf8 	bl	80098de <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart6, EGU_motor_atesleme, 5, 1000);
 80040ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80040f2:	2205      	movs	r2, #5
 80040f4:	4950      	ldr	r1, [pc, #320]	@ (8004238 <main+0x6e8>)
 80040f6:	4849      	ldr	r0, [pc, #292]	@ (800421c <main+0x6cc>)
 80040f8:	f005 fbf1 	bl	80098de <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart6, EGU_motor_atesleme, 5, 1000);
 80040fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004100:	2205      	movs	r2, #5
 8004102:	494d      	ldr	r1, [pc, #308]	@ (8004238 <main+0x6e8>)
 8004104:	4845      	ldr	r0, [pc, #276]	@ (800421c <main+0x6cc>)
 8004106:	f005 fbea 	bl	80098de <HAL_UART_Transmit>
				SUSTAINER=APOGEE;
 800410a:	4b45      	ldr	r3, [pc, #276]	@ (8004220 <main+0x6d0>)
 800410c:	2204      	movs	r2, #4
 800410e:	701a      	strb	r2, [r3, #0]

			 break;
 8004110:	e0a5      	b.n	800425e <main+0x70e>

		  case APOGEE:
				v4_mod=5;
 8004112:	4b3e      	ldr	r3, [pc, #248]	@ (800420c <main+0x6bc>)
 8004114:	2205      	movs	r2, #5
 8004116:	701a      	strb	r2, [r3, #0]
					  //AYRILMA GERÇEKLE�?MESE BİLE APOGEE İLE ROKETİ KURTAR *ucus basladı kısmına timer kuracam ona göre ayrıldımıdan APOGEEya geçecek


				if((real_pitch <= 32) && speed <= 2 && altitude < altitude_max )
 8004118:	4b48      	ldr	r3, [pc, #288]	@ (800423c <main+0x6ec>)
 800411a:	edd3 7a00 	vldr	s15, [r3]
 800411e:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8004240 <main+0x6f0>
 8004122:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800412a:	d900      	bls.n	800412e <main+0x5de>
					SUSTAINER=SUSTAINER_ANA;
					altitude_rampa_control =0;
				}


			 break;
 800412c:	e097      	b.n	800425e <main+0x70e>
				if((real_pitch <= 32) && speed <= 2 && altitude < altitude_max )
 800412e:	4b45      	ldr	r3, [pc, #276]	@ (8004244 <main+0x6f4>)
 8004130:	edd3 7a00 	vldr	s15, [r3]
 8004134:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8004138:	eef4 7ac7 	vcmpe.f32	s15, s14
 800413c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004140:	d900      	bls.n	8004144 <main+0x5f4>
			 break;
 8004142:	e08c      	b.n	800425e <main+0x70e>
				if((real_pitch <= 32) && speed <= 2 && altitude < altitude_max )
 8004144:	4b40      	ldr	r3, [pc, #256]	@ (8004248 <main+0x6f8>)
 8004146:	ed93 7a00 	vldr	s14, [r3]
 800414a:	4b40      	ldr	r3, [pc, #256]	@ (800424c <main+0x6fc>)
 800414c:	edd3 7a00 	vldr	s15, [r3]
 8004150:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004158:	d400      	bmi.n	800415c <main+0x60c>
			 break;
 800415a:	e080      	b.n	800425e <main+0x70e>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 800415c:	2201      	movs	r2, #1
 800415e:	2108      	movs	r1, #8
 8004160:	483b      	ldr	r0, [pc, #236]	@ (8004250 <main+0x700>)
 8004162:	f002 fcdf 	bl	8006b24 <HAL_GPIO_WritePin>
					SUSTAINER=SUSTAINER_ANA;
 8004166:	4b2e      	ldr	r3, [pc, #184]	@ (8004220 <main+0x6d0>)
 8004168:	2205      	movs	r2, #5
 800416a:	701a      	strb	r2, [r3, #0]
					altitude_rampa_control =0;
 800416c:	4b31      	ldr	r3, [pc, #196]	@ (8004234 <main+0x6e4>)
 800416e:	2200      	movs	r2, #0
 8004170:	701a      	strb	r2, [r3, #0]
			 break;
 8004172:	e074      	b.n	800425e <main+0x70e>

		  case SUSTAINER_ANA:
				v4_mod=6;
 8004174:	4b25      	ldr	r3, [pc, #148]	@ (800420c <main+0x6bc>)
 8004176:	2206      	movs	r2, #6
 8004178:	701a      	strb	r2, [r3, #0]
					  //AYRILDI VEYA APOGEEDAN GELEN APOGEE BİLGİSİNDEN SONRA İSTENEN İRTİFADA ANA PARA�?ÜT AÇ

				if(altitude <= 500 && speed < 0  && altitude_rampa_control == 0 )
 800417a:	4b33      	ldr	r3, [pc, #204]	@ (8004248 <main+0x6f8>)
 800417c:	edd3 7a00 	vldr	s15, [r3]
 8004180:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8004254 <main+0x704>
 8004184:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800418c:	d900      	bls.n	8004190 <main+0x640>

					SUSTAINER=FINISH;
					flash_flag=1;
				}

			  break;
 800418e:	e065      	b.n	800425c <main+0x70c>
				if(altitude <= 500 && speed < 0  && altitude_rampa_control == 0 )
 8004190:	4b2c      	ldr	r3, [pc, #176]	@ (8004244 <main+0x6f4>)
 8004192:	edd3 7a00 	vldr	s15, [r3]
 8004196:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800419a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800419e:	d400      	bmi.n	80041a2 <main+0x652>
			  break;
 80041a0:	e05c      	b.n	800425c <main+0x70c>
				if(altitude <= 500 && speed < 0  && altitude_rampa_control == 0 )
 80041a2:	4b24      	ldr	r3, [pc, #144]	@ (8004234 <main+0x6e4>)
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d158      	bne.n	800425c <main+0x70c>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 80041aa:	2200      	movs	r2, #0
 80041ac:	2108      	movs	r1, #8
 80041ae:	4828      	ldr	r0, [pc, #160]	@ (8004250 <main+0x700>)
 80041b0:	f002 fcb8 	bl	8006b24 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, SET);
 80041b4:	2201      	movs	r2, #1
 80041b6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80041ba:	480e      	ldr	r0, [pc, #56]	@ (80041f4 <main+0x6a4>)
 80041bc:	f002 fcb2 	bl	8006b24 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, RESET);
 80041c0:	2200      	movs	r2, #0
 80041c2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80041c6:	480b      	ldr	r0, [pc, #44]	@ (80041f4 <main+0x6a4>)
 80041c8:	f002 fcac 	bl	8006b24 <HAL_GPIO_WritePin>
					SUSTAINER=FINISH;
 80041cc:	4b14      	ldr	r3, [pc, #80]	@ (8004220 <main+0x6d0>)
 80041ce:	2206      	movs	r2, #6
 80041d0:	701a      	strb	r2, [r3, #0]
					flash_flag=1;
 80041d2:	4b21      	ldr	r3, [pc, #132]	@ (8004258 <main+0x708>)
 80041d4:	2201      	movs	r2, #1
 80041d6:	701a      	strb	r2, [r3, #0]
			  break;
 80041d8:	e040      	b.n	800425c <main+0x70c>

		  case FINISH:
				v4_mod=7;
 80041da:	4b0c      	ldr	r3, [pc, #48]	@ (800420c <main+0x6bc>)
 80041dc:	2207      	movs	r2, #7
 80041de:	701a      	strb	r2, [r3, #0]
					  //KURTARMA GERÇEKLE�?Tİ VERİ KAYDETMEYİ BIRAK VE BUZZERI AÇ


			  break;
 80041e0:	e03d      	b.n	800425e <main+0x70e>
			 break;
 80041e2:	bf00      	nop
 80041e4:	e03b      	b.n	800425e <main+0x70e>
 80041e6:	bf00      	nop
 80041e8:	20000659 	.word	0x20000659
 80041ec:	2000063c 	.word	0x2000063c
 80041f0:	20000640 	.word	0x20000640
 80041f4:	40020800 	.word	0x40020800
 80041f8:	2000065a 	.word	0x2000065a
 80041fc:	200009a6 	.word	0x200009a6
 8004200:	20000960 	.word	0x20000960
 8004204:	20000a08 	.word	0x20000a08
 8004208:	200005a8 	.word	0x200005a8
 800420c:	20000658 	.word	0x20000658
 8004210:	200004fc 	.word	0x200004fc
 8004214:	200009a8 	.word	0x200009a8
 8004218:	0800e9a0 	.word	0x0800e9a0
 800421c:	20000540 	.word	0x20000540
 8004220:	20000a00 	.word	0x20000a00
 8004224:	20000ab8 	.word	0x20000ab8
 8004228:	20000636 	.word	0x20000636
 800422c:	2000039c 	.word	0x2000039c
 8004230:	40001400 	.word	0x40001400
 8004234:	20000637 	.word	0x20000637
 8004238:	0800e9a8 	.word	0x0800e9a8
 800423c:	200009d4 	.word	0x200009d4
 8004240:	42000000 	.word	0x42000000
 8004244:	200009c8 	.word	0x200009c8
 8004248:	200009b4 	.word	0x200009b4
 800424c:	20000654 	.word	0x20000654
 8004250:	40020400 	.word	0x40020400
 8004254:	43fa0000 	.word	0x43fa0000
 8004258:	20000638 	.word	0x20000638
			  break;
 800425c:	bf00      	nop
		  }


/**************************************************************************************/
		  if(altitude >30 && SUSTAINER <3)
 800425e:	4b8c      	ldr	r3, [pc, #560]	@ (8004490 <main+0x940>)
 8004260:	edd3 7a00 	vldr	s15, [r3]
 8004264:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8004268:	eef4 7ac7 	vcmpe.f32	s15, s14
 800426c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004270:	dd06      	ble.n	8004280 <main+0x730>
 8004272:	4b88      	ldr	r3, [pc, #544]	@ (8004494 <main+0x944>)
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	2b02      	cmp	r3, #2
 8004278:	d802      	bhi.n	8004280 <main+0x730>
		  {
			  altitude_rampa_control =1;
 800427a:	4b87      	ldr	r3, [pc, #540]	@ (8004498 <main+0x948>)
 800427c:	2201      	movs	r2, #1
 800427e:	701a      	strb	r2, [r3, #0]
		  }
/*************************************************************************************/
		  if(altitude>altitude_max) altitude_max = altitude;
 8004280:	4b83      	ldr	r3, [pc, #524]	@ (8004490 <main+0x940>)
 8004282:	ed93 7a00 	vldr	s14, [r3]
 8004286:	4b85      	ldr	r3, [pc, #532]	@ (800449c <main+0x94c>)
 8004288:	edd3 7a00 	vldr	s15, [r3]
 800428c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004294:	dd03      	ble.n	800429e <main+0x74e>
 8004296:	4b7e      	ldr	r3, [pc, #504]	@ (8004490 <main+0x940>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a80      	ldr	r2, [pc, #512]	@ (800449c <main+0x94c>)
 800429c:	6013      	str	r3, [r2, #0]

		  if(speed>speed_max) speed_max = speed;
 800429e:	4b80      	ldr	r3, [pc, #512]	@ (80044a0 <main+0x950>)
 80042a0:	ed93 7a00 	vldr	s14, [r3]
 80042a4:	4b7f      	ldr	r3, [pc, #508]	@ (80044a4 <main+0x954>)
 80042a6:	edd3 7a00 	vldr	s15, [r3]
 80042aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80042ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042b2:	dd03      	ble.n	80042bc <main+0x76c>
 80042b4:	4b7a      	ldr	r3, [pc, #488]	@ (80044a0 <main+0x950>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a7a      	ldr	r2, [pc, #488]	@ (80044a4 <main+0x954>)
 80042ba:	6013      	str	r3, [r2, #0]

		  if( Lsm_Sensor.Accel_X> x_max) x_max =  Lsm_Sensor.Accel_X;
 80042bc:	4b7a      	ldr	r3, [pc, #488]	@ (80044a8 <main+0x958>)
 80042be:	ed93 7a00 	vldr	s14, [r3]
 80042c2:	4b7a      	ldr	r3, [pc, #488]	@ (80044ac <main+0x95c>)
 80042c4:	edd3 7a00 	vldr	s15, [r3]
 80042c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80042cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042d0:	dd03      	ble.n	80042da <main+0x78a>
 80042d2:	4b75      	ldr	r3, [pc, #468]	@ (80044a8 <main+0x958>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a75      	ldr	r2, [pc, #468]	@ (80044ac <main+0x95c>)
 80042d8:	6013      	str	r3, [r2, #0]
/**************************************************************************************/
		  if(adc_flag ==1)
 80042da:	4b75      	ldr	r3, [pc, #468]	@ (80044b0 <main+0x960>)
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d14a      	bne.n	8004378 <main+0x828>
		  {
			  if(adc > 2476) adc = 2234;
 80042e2:	4b74      	ldr	r3, [pc, #464]	@ (80044b4 <main+0x964>)
 80042e4:	edd3 7a00 	vldr	s15, [r3]
 80042e8:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 80044b8 <main+0x968>
 80042ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042f4:	dd02      	ble.n	80042fc <main+0x7ac>
 80042f6:	4b6f      	ldr	r3, [pc, #444]	@ (80044b4 <main+0x964>)
 80042f8:	4a70      	ldr	r2, [pc, #448]	@ (80044bc <main+0x96c>)
 80042fa:	601a      	str	r2, [r3, #0]
			  if(adc < 1755) adc = 1755;
 80042fc:	4b6d      	ldr	r3, [pc, #436]	@ (80044b4 <main+0x964>)
 80042fe:	edd3 7a00 	vldr	s15, [r3]
 8004302:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 80044c0 <main+0x970>
 8004306:	eef4 7ac7 	vcmpe.f32	s15, s14
 800430a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800430e:	d502      	bpl.n	8004316 <main+0x7c6>
 8004310:	4b68      	ldr	r3, [pc, #416]	@ (80044b4 <main+0x964>)
 8004312:	4a6c      	ldr	r2, [pc, #432]	@ (80044c4 <main+0x974>)
 8004314:	601a      	str	r2, [r3, #0]
			  // 6V = 1755 adc val 1,41V
			  // 8.4V = 2476 adc val 1,99V 0,58V
			  adc_pil_val=(float)( ( ( (adc/4095)*3.3)-1.41) / (1.99-1.41) ) *100 ; // pil conv
 8004316:	4b67      	ldr	r3, [pc, #412]	@ (80044b4 <main+0x964>)
 8004318:	edd3 7a00 	vldr	s15, [r3]
 800431c:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 80044c8 <main+0x978>
 8004320:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004324:	ee16 0a90 	vmov	r0, s13
 8004328:	f7fc f926 	bl	8000578 <__aeabi_f2d>
 800432c:	a352      	add	r3, pc, #328	@ (adr r3, 8004478 <main+0x928>)
 800432e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004332:	f7fc f979 	bl	8000628 <__aeabi_dmul>
 8004336:	4602      	mov	r2, r0
 8004338:	460b      	mov	r3, r1
 800433a:	4610      	mov	r0, r2
 800433c:	4619      	mov	r1, r3
 800433e:	a350      	add	r3, pc, #320	@ (adr r3, 8004480 <main+0x930>)
 8004340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004344:	f7fb ffb8 	bl	80002b8 <__aeabi_dsub>
 8004348:	4602      	mov	r2, r0
 800434a:	460b      	mov	r3, r1
 800434c:	4610      	mov	r0, r2
 800434e:	4619      	mov	r1, r3
 8004350:	a34d      	add	r3, pc, #308	@ (adr r3, 8004488 <main+0x938>)
 8004352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004356:	f7fc fa91 	bl	800087c <__aeabi_ddiv>
 800435a:	4602      	mov	r2, r0
 800435c:	460b      	mov	r3, r1
 800435e:	4610      	mov	r0, r2
 8004360:	4619      	mov	r1, r3
 8004362:	f7fc fc59 	bl	8000c18 <__aeabi_d2f>
 8004366:	ee07 0a10 	vmov	s14, r0
 800436a:	eddf 7a58 	vldr	s15, [pc, #352]	@ 80044cc <main+0x97c>
 800436e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004372:	4b57      	ldr	r3, [pc, #348]	@ (80044d0 <main+0x980>)
 8004374:	edc3 7a00 	vstr	s15, [r3]
//		W25Q_Write_Page(page, 0, sizeof(flash_accX), flash_gyroZ);
//
//		flash_flag=0;
//	}
//
	if(timer_200ms_flag == 1 && i_flag ==0 && SUSTAINER >=1)
 8004378:	4b56      	ldr	r3, [pc, #344]	@ (80044d4 <main+0x984>)
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	2b01      	cmp	r3, #1
 800437e:	f47f ac9a 	bne.w	8003cb6 <main+0x166>
 8004382:	4b55      	ldr	r3, [pc, #340]	@ (80044d8 <main+0x988>)
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	f47f ac95 	bne.w	8003cb6 <main+0x166>
 800438c:	4b41      	ldr	r3, [pc, #260]	@ (8004494 <main+0x944>)
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	2b00      	cmp	r3, #0
 8004392:	f43f ac90 	beq.w	8003cb6 <main+0x166>
	{
		if(i >= 252) {
 8004396:	4b51      	ldr	r3, [pc, #324]	@ (80044dc <main+0x98c>)
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	2bfb      	cmp	r3, #251	@ 0xfb
 800439c:	d902      	bls.n	80043a4 <main+0x854>
			i_flag=1;
 800439e:	4b4e      	ldr	r3, [pc, #312]	@ (80044d8 <main+0x988>)
 80043a0:	2201      	movs	r2, #1
 80043a2:	701a      	strb	r2, [r3, #0]
		}

		conv.fVal=Lsm_Sensor.Accel_X;
 80043a4:	4b40      	ldr	r3, [pc, #256]	@ (80044a8 <main+0x958>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a4d      	ldr	r2, [pc, #308]	@ (80044e0 <main+0x990>)
 80043aa:	6013      	str	r3, [r2, #0]

		flash_accX[i] = conv.array[0];
 80043ac:	4b4b      	ldr	r3, [pc, #300]	@ (80044dc <main+0x98c>)
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	461a      	mov	r2, r3
 80043b2:	4b4b      	ldr	r3, [pc, #300]	@ (80044e0 <main+0x990>)
 80043b4:	7819      	ldrb	r1, [r3, #0]
 80043b6:	4b4b      	ldr	r3, [pc, #300]	@ (80044e4 <main+0x994>)
 80043b8:	5499      	strb	r1, [r3, r2]
		flash_accX[i+1] = conv.array[1];
 80043ba:	4b48      	ldr	r3, [pc, #288]	@ (80044dc <main+0x98c>)
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	3301      	adds	r3, #1
 80043c0:	4a47      	ldr	r2, [pc, #284]	@ (80044e0 <main+0x990>)
 80043c2:	7851      	ldrb	r1, [r2, #1]
 80043c4:	4a47      	ldr	r2, [pc, #284]	@ (80044e4 <main+0x994>)
 80043c6:	54d1      	strb	r1, [r2, r3]
		flash_accX[i+2] = conv.array[2];
 80043c8:	4b44      	ldr	r3, [pc, #272]	@ (80044dc <main+0x98c>)
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	3302      	adds	r3, #2
 80043ce:	4a44      	ldr	r2, [pc, #272]	@ (80044e0 <main+0x990>)
 80043d0:	7891      	ldrb	r1, [r2, #2]
 80043d2:	4a44      	ldr	r2, [pc, #272]	@ (80044e4 <main+0x994>)
 80043d4:	54d1      	strb	r1, [r2, r3]
		flash_accX[i+3] = conv.array[3];
 80043d6:	4b41      	ldr	r3, [pc, #260]	@ (80044dc <main+0x98c>)
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	3303      	adds	r3, #3
 80043dc:	4a40      	ldr	r2, [pc, #256]	@ (80044e0 <main+0x990>)
 80043de:	78d1      	ldrb	r1, [r2, #3]
 80043e0:	4a40      	ldr	r2, [pc, #256]	@ (80044e4 <main+0x994>)
 80043e2:	54d1      	strb	r1, [r2, r3]

		conv.fVal=Lsm_Sensor.Accel_Y;
 80043e4:	4b30      	ldr	r3, [pc, #192]	@ (80044a8 <main+0x958>)
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	4a3d      	ldr	r2, [pc, #244]	@ (80044e0 <main+0x990>)
 80043ea:	6013      	str	r3, [r2, #0]
		flash_accY[i] = conv.array[0];
 80043ec:	4b3b      	ldr	r3, [pc, #236]	@ (80044dc <main+0x98c>)
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	461a      	mov	r2, r3
 80043f2:	4b3b      	ldr	r3, [pc, #236]	@ (80044e0 <main+0x990>)
 80043f4:	7819      	ldrb	r1, [r3, #0]
 80043f6:	4b3c      	ldr	r3, [pc, #240]	@ (80044e8 <main+0x998>)
 80043f8:	5499      	strb	r1, [r3, r2]
		flash_accY[i+1] = conv.array[1];
 80043fa:	4b38      	ldr	r3, [pc, #224]	@ (80044dc <main+0x98c>)
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	3301      	adds	r3, #1
 8004400:	4a37      	ldr	r2, [pc, #220]	@ (80044e0 <main+0x990>)
 8004402:	7851      	ldrb	r1, [r2, #1]
 8004404:	4a38      	ldr	r2, [pc, #224]	@ (80044e8 <main+0x998>)
 8004406:	54d1      	strb	r1, [r2, r3]
		flash_accY[i+2] = conv.array[2];
 8004408:	4b34      	ldr	r3, [pc, #208]	@ (80044dc <main+0x98c>)
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	3302      	adds	r3, #2
 800440e:	4a34      	ldr	r2, [pc, #208]	@ (80044e0 <main+0x990>)
 8004410:	7891      	ldrb	r1, [r2, #2]
 8004412:	4a35      	ldr	r2, [pc, #212]	@ (80044e8 <main+0x998>)
 8004414:	54d1      	strb	r1, [r2, r3]
		flash_accY[i+3] = conv.array[3];
 8004416:	4b31      	ldr	r3, [pc, #196]	@ (80044dc <main+0x98c>)
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	3303      	adds	r3, #3
 800441c:	4a30      	ldr	r2, [pc, #192]	@ (80044e0 <main+0x990>)
 800441e:	78d1      	ldrb	r1, [r2, #3]
 8004420:	4a31      	ldr	r2, [pc, #196]	@ (80044e8 <main+0x998>)
 8004422:	54d1      	strb	r1, [r2, r3]

		conv.fVal=Lsm_Sensor.Accel_Z;
 8004424:	4b20      	ldr	r3, [pc, #128]	@ (80044a8 <main+0x958>)
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	4a2d      	ldr	r2, [pc, #180]	@ (80044e0 <main+0x990>)
 800442a:	6013      	str	r3, [r2, #0]
		flash_accZ[i] = conv.array[0];
 800442c:	4b2b      	ldr	r3, [pc, #172]	@ (80044dc <main+0x98c>)
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	461a      	mov	r2, r3
 8004432:	4b2b      	ldr	r3, [pc, #172]	@ (80044e0 <main+0x990>)
 8004434:	7819      	ldrb	r1, [r3, #0]
 8004436:	4b2d      	ldr	r3, [pc, #180]	@ (80044ec <main+0x99c>)
 8004438:	5499      	strb	r1, [r3, r2]
		flash_accZ[i+1] = conv.array[1];
 800443a:	4b28      	ldr	r3, [pc, #160]	@ (80044dc <main+0x98c>)
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	3301      	adds	r3, #1
 8004440:	4a27      	ldr	r2, [pc, #156]	@ (80044e0 <main+0x990>)
 8004442:	7851      	ldrb	r1, [r2, #1]
 8004444:	4a29      	ldr	r2, [pc, #164]	@ (80044ec <main+0x99c>)
 8004446:	54d1      	strb	r1, [r2, r3]
		flash_accZ[i+2] = conv.array[2];
 8004448:	4b24      	ldr	r3, [pc, #144]	@ (80044dc <main+0x98c>)
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	3302      	adds	r3, #2
 800444e:	4a24      	ldr	r2, [pc, #144]	@ (80044e0 <main+0x990>)
 8004450:	7891      	ldrb	r1, [r2, #2]
 8004452:	4a26      	ldr	r2, [pc, #152]	@ (80044ec <main+0x99c>)
 8004454:	54d1      	strb	r1, [r2, r3]
		flash_accZ[i+3] = conv.array[3];
 8004456:	4b21      	ldr	r3, [pc, #132]	@ (80044dc <main+0x98c>)
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	3303      	adds	r3, #3
 800445c:	4a20      	ldr	r2, [pc, #128]	@ (80044e0 <main+0x990>)
 800445e:	78d1      	ldrb	r1, [r2, #3]
 8004460:	4a22      	ldr	r2, [pc, #136]	@ (80044ec <main+0x99c>)
 8004462:	54d1      	strb	r1, [r2, r3]


		timer_200ms_flag =0;
 8004464:	4b1b      	ldr	r3, [pc, #108]	@ (80044d4 <main+0x984>)
 8004466:	2200      	movs	r2, #0
 8004468:	701a      	strb	r2, [r3, #0]

		i=i+4;
 800446a:	4b1c      	ldr	r3, [pc, #112]	@ (80044dc <main+0x98c>)
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	3304      	adds	r3, #4
 8004470:	b2da      	uxtb	r2, r3
 8004472:	4b1a      	ldr	r3, [pc, #104]	@ (80044dc <main+0x98c>)
 8004474:	701a      	strb	r2, [r3, #0]
	if(sensor_flag==1)
 8004476:	e41e      	b.n	8003cb6 <main+0x166>
 8004478:	66666666 	.word	0x66666666
 800447c:	400a6666 	.word	0x400a6666
 8004480:	28f5c28f 	.word	0x28f5c28f
 8004484:	3ff68f5c 	.word	0x3ff68f5c
 8004488:	28f5c290 	.word	0x28f5c290
 800448c:	3fe28f5c 	.word	0x3fe28f5c
 8004490:	200009b4 	.word	0x200009b4
 8004494:	20000a00 	.word	0x20000a00
 8004498:	20000637 	.word	0x20000637
 800449c:	20000654 	.word	0x20000654
 80044a0:	200009c8 	.word	0x200009c8
 80044a4:	200009cc 	.word	0x200009cc
 80044a8:	20000ab8 	.word	0x20000ab8
 80044ac:	200009e4 	.word	0x200009e4
 80044b0:	200005b1 	.word	0x200005b1
 80044b4:	200005ac 	.word	0x200005ac
 80044b8:	451ac000 	.word	0x451ac000
 80044bc:	450ba000 	.word	0x450ba000
 80044c0:	44db6000 	.word	0x44db6000
 80044c4:	44db6000 	.word	0x44db6000
 80044c8:	457ff000 	.word	0x457ff000
 80044cc:	42c80000 	.word	0x42c80000
 80044d0:	200005a8 	.word	0x200005a8
 80044d4:	20000639 	.word	0x20000639
 80044d8:	2000065c 	.word	0x2000065c
 80044dc:	2000065b 	.word	0x2000065b
 80044e0:	20000c4c 	.word	0x20000c4c
 80044e4:	20000660 	.word	0x20000660
 80044e8:	20000860 	.word	0x20000860
 80044ec:	20000760 	.word	0x20000760

080044f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b094      	sub	sp, #80	@ 0x50
 80044f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80044f6:	f107 031c 	add.w	r3, r7, #28
 80044fa:	2234      	movs	r2, #52	@ 0x34
 80044fc:	2100      	movs	r1, #0
 80044fe:	4618      	mov	r0, r3
 8004500:	f007 faf3 	bl	800baea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004504:	f107 0308 	add.w	r3, r7, #8
 8004508:	2200      	movs	r2, #0
 800450a:	601a      	str	r2, [r3, #0]
 800450c:	605a      	str	r2, [r3, #4]
 800450e:	609a      	str	r2, [r3, #8]
 8004510:	60da      	str	r2, [r3, #12]
 8004512:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004514:	2300      	movs	r3, #0
 8004516:	607b      	str	r3, [r7, #4]
 8004518:	4b29      	ldr	r3, [pc, #164]	@ (80045c0 <SystemClock_Config+0xd0>)
 800451a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800451c:	4a28      	ldr	r2, [pc, #160]	@ (80045c0 <SystemClock_Config+0xd0>)
 800451e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004522:	6413      	str	r3, [r2, #64]	@ 0x40
 8004524:	4b26      	ldr	r3, [pc, #152]	@ (80045c0 <SystemClock_Config+0xd0>)
 8004526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004528:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800452c:	607b      	str	r3, [r7, #4]
 800452e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004530:	2300      	movs	r3, #0
 8004532:	603b      	str	r3, [r7, #0]
 8004534:	4b23      	ldr	r3, [pc, #140]	@ (80045c4 <SystemClock_Config+0xd4>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a22      	ldr	r2, [pc, #136]	@ (80045c4 <SystemClock_Config+0xd4>)
 800453a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800453e:	6013      	str	r3, [r2, #0]
 8004540:	4b20      	ldr	r3, [pc, #128]	@ (80045c4 <SystemClock_Config+0xd4>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004548:	603b      	str	r3, [r7, #0]
 800454a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800454c:	2301      	movs	r3, #1
 800454e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004550:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004554:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004556:	2302      	movs	r3, #2
 8004558:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800455a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800455e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004560:	2304      	movs	r3, #4
 8004562:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004564:	23a8      	movs	r3, #168	@ 0xa8
 8004566:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004568:	2302      	movs	r3, #2
 800456a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800456c:	2307      	movs	r3, #7
 800456e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004570:	2302      	movs	r3, #2
 8004572:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004574:	f107 031c 	add.w	r3, r7, #28
 8004578:	4618      	mov	r0, r3
 800457a:	f004 fa85 	bl	8008a88 <HAL_RCC_OscConfig>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d001      	beq.n	8004588 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8004584:	f000 fe30 	bl	80051e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004588:	230f      	movs	r3, #15
 800458a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 800458c:	2303      	movs	r3, #3
 800458e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004590:	2300      	movs	r3, #0
 8004592:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004594:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004598:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800459a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800459e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80045a0:	f107 0308 	add.w	r3, r7, #8
 80045a4:	2105      	movs	r1, #5
 80045a6:	4618      	mov	r0, r3
 80045a8:	f003 ff24 	bl	80083f4 <HAL_RCC_ClockConfig>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d001      	beq.n	80045b6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80045b2:	f000 fe19 	bl	80051e8 <Error_Handler>
  }
}
 80045b6:	bf00      	nop
 80045b8:	3750      	adds	r7, #80	@ 0x50
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	40023800 	.word	0x40023800
 80045c4:	40007000 	.word	0x40007000

080045c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80045ce:	463b      	mov	r3, r7
 80045d0:	2200      	movs	r2, #0
 80045d2:	601a      	str	r2, [r3, #0]
 80045d4:	605a      	str	r2, [r3, #4]
 80045d6:	609a      	str	r2, [r3, #8]
 80045d8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80045da:	4b21      	ldr	r3, [pc, #132]	@ (8004660 <MX_ADC1_Init+0x98>)
 80045dc:	4a21      	ldr	r2, [pc, #132]	@ (8004664 <MX_ADC1_Init+0x9c>)
 80045de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80045e0:	4b1f      	ldr	r3, [pc, #124]	@ (8004660 <MX_ADC1_Init+0x98>)
 80045e2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80045e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80045e8:	4b1d      	ldr	r3, [pc, #116]	@ (8004660 <MX_ADC1_Init+0x98>)
 80045ea:	2200      	movs	r2, #0
 80045ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80045ee:	4b1c      	ldr	r3, [pc, #112]	@ (8004660 <MX_ADC1_Init+0x98>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80045f4:	4b1a      	ldr	r3, [pc, #104]	@ (8004660 <MX_ADC1_Init+0x98>)
 80045f6:	2201      	movs	r2, #1
 80045f8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80045fa:	4b19      	ldr	r3, [pc, #100]	@ (8004660 <MX_ADC1_Init+0x98>)
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004602:	4b17      	ldr	r3, [pc, #92]	@ (8004660 <MX_ADC1_Init+0x98>)
 8004604:	2200      	movs	r2, #0
 8004606:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004608:	4b15      	ldr	r3, [pc, #84]	@ (8004660 <MX_ADC1_Init+0x98>)
 800460a:	4a17      	ldr	r2, [pc, #92]	@ (8004668 <MX_ADC1_Init+0xa0>)
 800460c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800460e:	4b14      	ldr	r3, [pc, #80]	@ (8004660 <MX_ADC1_Init+0x98>)
 8004610:	2200      	movs	r2, #0
 8004612:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8004614:	4b12      	ldr	r3, [pc, #72]	@ (8004660 <MX_ADC1_Init+0x98>)
 8004616:	2201      	movs	r2, #1
 8004618:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800461a:	4b11      	ldr	r3, [pc, #68]	@ (8004660 <MX_ADC1_Init+0x98>)
 800461c:	2200      	movs	r2, #0
 800461e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004622:	4b0f      	ldr	r3, [pc, #60]	@ (8004660 <MX_ADC1_Init+0x98>)
 8004624:	2201      	movs	r2, #1
 8004626:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004628:	480d      	ldr	r0, [pc, #52]	@ (8004660 <MX_ADC1_Init+0x98>)
 800462a:	f001 fa9f 	bl	8005b6c <HAL_ADC_Init>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d001      	beq.n	8004638 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8004634:	f000 fdd8 	bl	80051e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8004638:	230c      	movs	r3, #12
 800463a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800463c:	2301      	movs	r3, #1
 800463e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004640:	2300      	movs	r3, #0
 8004642:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004644:	463b      	mov	r3, r7
 8004646:	4619      	mov	r1, r3
 8004648:	4805      	ldr	r0, [pc, #20]	@ (8004660 <MX_ADC1_Init+0x98>)
 800464a:	f001 fce3 	bl	8006014 <HAL_ADC_ConfigChannel>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d001      	beq.n	8004658 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8004654:	f000 fdc8 	bl	80051e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004658:	bf00      	nop
 800465a:	3710      	adds	r7, #16
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	20000260 	.word	0x20000260
 8004664:	40012000 	.word	0x40012000
 8004668:	0f000001 	.word	0x0f000001

0800466c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004670:	4b12      	ldr	r3, [pc, #72]	@ (80046bc <MX_I2C1_Init+0x50>)
 8004672:	4a13      	ldr	r2, [pc, #76]	@ (80046c0 <MX_I2C1_Init+0x54>)
 8004674:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8004676:	4b11      	ldr	r3, [pc, #68]	@ (80046bc <MX_I2C1_Init+0x50>)
 8004678:	4a12      	ldr	r2, [pc, #72]	@ (80046c4 <MX_I2C1_Init+0x58>)
 800467a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800467c:	4b0f      	ldr	r3, [pc, #60]	@ (80046bc <MX_I2C1_Init+0x50>)
 800467e:	2200      	movs	r2, #0
 8004680:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004682:	4b0e      	ldr	r3, [pc, #56]	@ (80046bc <MX_I2C1_Init+0x50>)
 8004684:	2200      	movs	r2, #0
 8004686:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004688:	4b0c      	ldr	r3, [pc, #48]	@ (80046bc <MX_I2C1_Init+0x50>)
 800468a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800468e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004690:	4b0a      	ldr	r3, [pc, #40]	@ (80046bc <MX_I2C1_Init+0x50>)
 8004692:	2200      	movs	r2, #0
 8004694:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004696:	4b09      	ldr	r3, [pc, #36]	@ (80046bc <MX_I2C1_Init+0x50>)
 8004698:	2200      	movs	r2, #0
 800469a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800469c:	4b07      	ldr	r3, [pc, #28]	@ (80046bc <MX_I2C1_Init+0x50>)
 800469e:	2200      	movs	r2, #0
 80046a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80046a2:	4b06      	ldr	r3, [pc, #24]	@ (80046bc <MX_I2C1_Init+0x50>)
 80046a4:	2200      	movs	r2, #0
 80046a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80046a8:	4804      	ldr	r0, [pc, #16]	@ (80046bc <MX_I2C1_Init+0x50>)
 80046aa:	f002 fa6f 	bl	8006b8c <HAL_I2C_Init>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d001      	beq.n	80046b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80046b4:	f000 fd98 	bl	80051e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80046b8:	bf00      	nop
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	200002a8 	.word	0x200002a8
 80046c0:	40005400 	.word	0x40005400
 80046c4:	00061a80 	.word	0x00061a80

080046c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80046cc:	4b17      	ldr	r3, [pc, #92]	@ (800472c <MX_SPI1_Init+0x64>)
 80046ce:	4a18      	ldr	r2, [pc, #96]	@ (8004730 <MX_SPI1_Init+0x68>)
 80046d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80046d2:	4b16      	ldr	r3, [pc, #88]	@ (800472c <MX_SPI1_Init+0x64>)
 80046d4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80046d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80046da:	4b14      	ldr	r3, [pc, #80]	@ (800472c <MX_SPI1_Init+0x64>)
 80046dc:	2200      	movs	r2, #0
 80046de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80046e0:	4b12      	ldr	r3, [pc, #72]	@ (800472c <MX_SPI1_Init+0x64>)
 80046e2:	2200      	movs	r2, #0
 80046e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80046e6:	4b11      	ldr	r3, [pc, #68]	@ (800472c <MX_SPI1_Init+0x64>)
 80046e8:	2200      	movs	r2, #0
 80046ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80046ec:	4b0f      	ldr	r3, [pc, #60]	@ (800472c <MX_SPI1_Init+0x64>)
 80046ee:	2200      	movs	r2, #0
 80046f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80046f2:	4b0e      	ldr	r3, [pc, #56]	@ (800472c <MX_SPI1_Init+0x64>)
 80046f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80046fa:	4b0c      	ldr	r3, [pc, #48]	@ (800472c <MX_SPI1_Init+0x64>)
 80046fc:	2220      	movs	r2, #32
 80046fe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004700:	4b0a      	ldr	r3, [pc, #40]	@ (800472c <MX_SPI1_Init+0x64>)
 8004702:	2200      	movs	r2, #0
 8004704:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004706:	4b09      	ldr	r3, [pc, #36]	@ (800472c <MX_SPI1_Init+0x64>)
 8004708:	2200      	movs	r2, #0
 800470a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800470c:	4b07      	ldr	r3, [pc, #28]	@ (800472c <MX_SPI1_Init+0x64>)
 800470e:	2200      	movs	r2, #0
 8004710:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004712:	4b06      	ldr	r3, [pc, #24]	@ (800472c <MX_SPI1_Init+0x64>)
 8004714:	220a      	movs	r2, #10
 8004716:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004718:	4804      	ldr	r0, [pc, #16]	@ (800472c <MX_SPI1_Init+0x64>)
 800471a:	f004 fc53 	bl	8008fc4 <HAL_SPI_Init>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d001      	beq.n	8004728 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004724:	f000 fd60 	bl	80051e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004728:	bf00      	nop
 800472a:	bd80      	pop	{r7, pc}
 800472c:	200002fc 	.word	0x200002fc
 8004730:	40013000 	.word	0x40013000

08004734 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800473a:	463b      	mov	r3, r7
 800473c:	2200      	movs	r2, #0
 800473e:	601a      	str	r2, [r3, #0]
 8004740:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004742:	4b15      	ldr	r3, [pc, #84]	@ (8004798 <MX_TIM6_Init+0x64>)
 8004744:	4a15      	ldr	r2, [pc, #84]	@ (800479c <MX_TIM6_Init+0x68>)
 8004746:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 840;
 8004748:	4b13      	ldr	r3, [pc, #76]	@ (8004798 <MX_TIM6_Init+0x64>)
 800474a:	f44f 7252 	mov.w	r2, #840	@ 0x348
 800474e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004750:	4b11      	ldr	r3, [pc, #68]	@ (8004798 <MX_TIM6_Init+0x64>)
 8004752:	2200      	movs	r2, #0
 8004754:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 19999;
 8004756:	4b10      	ldr	r3, [pc, #64]	@ (8004798 <MX_TIM6_Init+0x64>)
 8004758:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800475c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800475e:	4b0e      	ldr	r3, [pc, #56]	@ (8004798 <MX_TIM6_Init+0x64>)
 8004760:	2200      	movs	r2, #0
 8004762:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004764:	480c      	ldr	r0, [pc, #48]	@ (8004798 <MX_TIM6_Init+0x64>)
 8004766:	f004 fcb6 	bl	80090d6 <HAL_TIM_Base_Init>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d001      	beq.n	8004774 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8004770:	f000 fd3a 	bl	80051e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004774:	2300      	movs	r3, #0
 8004776:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004778:	2300      	movs	r3, #0
 800477a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800477c:	463b      	mov	r3, r7
 800477e:	4619      	mov	r1, r3
 8004780:	4805      	ldr	r0, [pc, #20]	@ (8004798 <MX_TIM6_Init+0x64>)
 8004782:	f004 ffcf 	bl	8009724 <HAL_TIMEx_MasterConfigSynchronization>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d001      	beq.n	8004790 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800478c:	f000 fd2c 	bl	80051e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004790:	bf00      	nop
 8004792:	3708      	adds	r7, #8
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	20000354 	.word	0x20000354
 800479c:	40001000 	.word	0x40001000

080047a0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80047a6:	463b      	mov	r3, r7
 80047a8:	2200      	movs	r2, #0
 80047aa:	601a      	str	r2, [r3, #0]
 80047ac:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80047ae:	4b15      	ldr	r3, [pc, #84]	@ (8004804 <MX_TIM7_Init+0x64>)
 80047b0:	4a15      	ldr	r2, [pc, #84]	@ (8004808 <MX_TIM7_Init+0x68>)
 80047b2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8400-1;
 80047b4:	4b13      	ldr	r3, [pc, #76]	@ (8004804 <MX_TIM7_Init+0x64>)
 80047b6:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80047ba:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047bc:	4b11      	ldr	r3, [pc, #68]	@ (8004804 <MX_TIM7_Init+0x64>)
 80047be:	2200      	movs	r2, #0
 80047c0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 59999;
 80047c2:	4b10      	ldr	r3, [pc, #64]	@ (8004804 <MX_TIM7_Init+0x64>)
 80047c4:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 80047c8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80047ca:	4b0e      	ldr	r3, [pc, #56]	@ (8004804 <MX_TIM7_Init+0x64>)
 80047cc:	2200      	movs	r2, #0
 80047ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80047d0:	480c      	ldr	r0, [pc, #48]	@ (8004804 <MX_TIM7_Init+0x64>)
 80047d2:	f004 fc80 	bl	80090d6 <HAL_TIM_Base_Init>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d001      	beq.n	80047e0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80047dc:	f000 fd04 	bl	80051e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80047e0:	2300      	movs	r3, #0
 80047e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80047e4:	2300      	movs	r3, #0
 80047e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80047e8:	463b      	mov	r3, r7
 80047ea:	4619      	mov	r1, r3
 80047ec:	4805      	ldr	r0, [pc, #20]	@ (8004804 <MX_TIM7_Init+0x64>)
 80047ee:	f004 ff99 	bl	8009724 <HAL_TIMEx_MasterConfigSynchronization>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d001      	beq.n	80047fc <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80047f8:	f000 fcf6 	bl	80051e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80047fc:	bf00      	nop
 80047fe:	3708      	adds	r7, #8
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	2000039c 	.word	0x2000039c
 8004808:	40001400 	.word	0x40001400

0800480c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8004810:	4b0e      	ldr	r3, [pc, #56]	@ (800484c <MX_TIM10_Init+0x40>)
 8004812:	4a0f      	ldr	r2, [pc, #60]	@ (8004850 <MX_TIM10_Init+0x44>)
 8004814:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1680;
 8004816:	4b0d      	ldr	r3, [pc, #52]	@ (800484c <MX_TIM10_Init+0x40>)
 8004818:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 800481c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800481e:	4b0b      	ldr	r3, [pc, #44]	@ (800484c <MX_TIM10_Init+0x40>)
 8004820:	2200      	movs	r2, #0
 8004822:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 3000-1;
 8004824:	4b09      	ldr	r3, [pc, #36]	@ (800484c <MX_TIM10_Init+0x40>)
 8004826:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 800482a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800482c:	4b07      	ldr	r3, [pc, #28]	@ (800484c <MX_TIM10_Init+0x40>)
 800482e:	2200      	movs	r2, #0
 8004830:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004832:	4b06      	ldr	r3, [pc, #24]	@ (800484c <MX_TIM10_Init+0x40>)
 8004834:	2200      	movs	r2, #0
 8004836:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8004838:	4804      	ldr	r0, [pc, #16]	@ (800484c <MX_TIM10_Init+0x40>)
 800483a:	f004 fc4c 	bl	80090d6 <HAL_TIM_Base_Init>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d001      	beq.n	8004848 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8004844:	f000 fcd0 	bl	80051e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8004848:	bf00      	nop
 800484a:	bd80      	pop	{r7, pc}
 800484c:	200003e4 	.word	0x200003e4
 8004850:	40014400 	.word	0x40014400

08004854 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8004858:	4b0e      	ldr	r3, [pc, #56]	@ (8004894 <MX_TIM11_Init+0x40>)
 800485a:	4a0f      	ldr	r2, [pc, #60]	@ (8004898 <MX_TIM11_Init+0x44>)
 800485c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 16800;
 800485e:	4b0d      	ldr	r3, [pc, #52]	@ (8004894 <MX_TIM11_Init+0x40>)
 8004860:	f244 12a0 	movw	r2, #16800	@ 0x41a0
 8004864:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004866:	4b0b      	ldr	r3, [pc, #44]	@ (8004894 <MX_TIM11_Init+0x40>)
 8004868:	2200      	movs	r2, #0
 800486a:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 10000-1;
 800486c:	4b09      	ldr	r3, [pc, #36]	@ (8004894 <MX_TIM11_Init+0x40>)
 800486e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8004872:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004874:	4b07      	ldr	r3, [pc, #28]	@ (8004894 <MX_TIM11_Init+0x40>)
 8004876:	2200      	movs	r2, #0
 8004878:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800487a:	4b06      	ldr	r3, [pc, #24]	@ (8004894 <MX_TIM11_Init+0x40>)
 800487c:	2200      	movs	r2, #0
 800487e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8004880:	4804      	ldr	r0, [pc, #16]	@ (8004894 <MX_TIM11_Init+0x40>)
 8004882:	f004 fc28 	bl	80090d6 <HAL_TIM_Base_Init>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d001      	beq.n	8004890 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 800488c:	f000 fcac 	bl	80051e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8004890:	bf00      	nop
 8004892:	bd80      	pop	{r7, pc}
 8004894:	2000042c 	.word	0x2000042c
 8004898:	40014800 	.word	0x40014800

0800489c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80048a0:	4b11      	ldr	r3, [pc, #68]	@ (80048e8 <MX_UART4_Init+0x4c>)
 80048a2:	4a12      	ldr	r2, [pc, #72]	@ (80048ec <MX_UART4_Init+0x50>)
 80048a4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80048a6:	4b10      	ldr	r3, [pc, #64]	@ (80048e8 <MX_UART4_Init+0x4c>)
 80048a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80048ac:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80048ae:	4b0e      	ldr	r3, [pc, #56]	@ (80048e8 <MX_UART4_Init+0x4c>)
 80048b0:	2200      	movs	r2, #0
 80048b2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80048b4:	4b0c      	ldr	r3, [pc, #48]	@ (80048e8 <MX_UART4_Init+0x4c>)
 80048b6:	2200      	movs	r2, #0
 80048b8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80048ba:	4b0b      	ldr	r3, [pc, #44]	@ (80048e8 <MX_UART4_Init+0x4c>)
 80048bc:	2200      	movs	r2, #0
 80048be:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80048c0:	4b09      	ldr	r3, [pc, #36]	@ (80048e8 <MX_UART4_Init+0x4c>)
 80048c2:	220c      	movs	r2, #12
 80048c4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80048c6:	4b08      	ldr	r3, [pc, #32]	@ (80048e8 <MX_UART4_Init+0x4c>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80048cc:	4b06      	ldr	r3, [pc, #24]	@ (80048e8 <MX_UART4_Init+0x4c>)
 80048ce:	2200      	movs	r2, #0
 80048d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80048d2:	4805      	ldr	r0, [pc, #20]	@ (80048e8 <MX_UART4_Init+0x4c>)
 80048d4:	f004 ffb6 	bl	8009844 <HAL_UART_Init>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d001      	beq.n	80048e2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80048de:	f000 fc83 	bl	80051e8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80048e2:	bf00      	nop
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	20000474 	.word	0x20000474
 80048ec:	40004c00 	.word	0x40004c00

080048f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80048f4:	4b11      	ldr	r3, [pc, #68]	@ (800493c <MX_USART2_UART_Init+0x4c>)
 80048f6:	4a12      	ldr	r2, [pc, #72]	@ (8004940 <MX_USART2_UART_Init+0x50>)
 80048f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80048fa:	4b10      	ldr	r3, [pc, #64]	@ (800493c <MX_USART2_UART_Init+0x4c>)
 80048fc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8004900:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004902:	4b0e      	ldr	r3, [pc, #56]	@ (800493c <MX_USART2_UART_Init+0x4c>)
 8004904:	2200      	movs	r2, #0
 8004906:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004908:	4b0c      	ldr	r3, [pc, #48]	@ (800493c <MX_USART2_UART_Init+0x4c>)
 800490a:	2200      	movs	r2, #0
 800490c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800490e:	4b0b      	ldr	r3, [pc, #44]	@ (800493c <MX_USART2_UART_Init+0x4c>)
 8004910:	2200      	movs	r2, #0
 8004912:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004914:	4b09      	ldr	r3, [pc, #36]	@ (800493c <MX_USART2_UART_Init+0x4c>)
 8004916:	220c      	movs	r2, #12
 8004918:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800491a:	4b08      	ldr	r3, [pc, #32]	@ (800493c <MX_USART2_UART_Init+0x4c>)
 800491c:	2200      	movs	r2, #0
 800491e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004920:	4b06      	ldr	r3, [pc, #24]	@ (800493c <MX_USART2_UART_Init+0x4c>)
 8004922:	2200      	movs	r2, #0
 8004924:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004926:	4805      	ldr	r0, [pc, #20]	@ (800493c <MX_USART2_UART_Init+0x4c>)
 8004928:	f004 ff8c 	bl	8009844 <HAL_UART_Init>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d001      	beq.n	8004936 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004932:	f000 fc59 	bl	80051e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004936:	bf00      	nop
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	200004b8 	.word	0x200004b8
 8004940:	40004400 	.word	0x40004400

08004944 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004948:	4b11      	ldr	r3, [pc, #68]	@ (8004990 <MX_USART3_UART_Init+0x4c>)
 800494a:	4a12      	ldr	r2, [pc, #72]	@ (8004994 <MX_USART3_UART_Init+0x50>)
 800494c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800494e:	4b10      	ldr	r3, [pc, #64]	@ (8004990 <MX_USART3_UART_Init+0x4c>)
 8004950:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8004954:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004956:	4b0e      	ldr	r3, [pc, #56]	@ (8004990 <MX_USART3_UART_Init+0x4c>)
 8004958:	2200      	movs	r2, #0
 800495a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800495c:	4b0c      	ldr	r3, [pc, #48]	@ (8004990 <MX_USART3_UART_Init+0x4c>)
 800495e:	2200      	movs	r2, #0
 8004960:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004962:	4b0b      	ldr	r3, [pc, #44]	@ (8004990 <MX_USART3_UART_Init+0x4c>)
 8004964:	2200      	movs	r2, #0
 8004966:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004968:	4b09      	ldr	r3, [pc, #36]	@ (8004990 <MX_USART3_UART_Init+0x4c>)
 800496a:	220c      	movs	r2, #12
 800496c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800496e:	4b08      	ldr	r3, [pc, #32]	@ (8004990 <MX_USART3_UART_Init+0x4c>)
 8004970:	2200      	movs	r2, #0
 8004972:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004974:	4b06      	ldr	r3, [pc, #24]	@ (8004990 <MX_USART3_UART_Init+0x4c>)
 8004976:	2200      	movs	r2, #0
 8004978:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800497a:	4805      	ldr	r0, [pc, #20]	@ (8004990 <MX_USART3_UART_Init+0x4c>)
 800497c:	f004 ff62 	bl	8009844 <HAL_UART_Init>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d001      	beq.n	800498a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004986:	f000 fc2f 	bl	80051e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800498a:	bf00      	nop
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	200004fc 	.word	0x200004fc
 8004994:	40004800 	.word	0x40004800

08004998 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800499c:	4b11      	ldr	r3, [pc, #68]	@ (80049e4 <MX_USART6_UART_Init+0x4c>)
 800499e:	4a12      	ldr	r2, [pc, #72]	@ (80049e8 <MX_USART6_UART_Init+0x50>)
 80049a0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 19200;
 80049a2:	4b10      	ldr	r3, [pc, #64]	@ (80049e4 <MX_USART6_UART_Init+0x4c>)
 80049a4:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80049a8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80049aa:	4b0e      	ldr	r3, [pc, #56]	@ (80049e4 <MX_USART6_UART_Init+0x4c>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80049b0:	4b0c      	ldr	r3, [pc, #48]	@ (80049e4 <MX_USART6_UART_Init+0x4c>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80049b6:	4b0b      	ldr	r3, [pc, #44]	@ (80049e4 <MX_USART6_UART_Init+0x4c>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80049bc:	4b09      	ldr	r3, [pc, #36]	@ (80049e4 <MX_USART6_UART_Init+0x4c>)
 80049be:	220c      	movs	r2, #12
 80049c0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80049c2:	4b08      	ldr	r3, [pc, #32]	@ (80049e4 <MX_USART6_UART_Init+0x4c>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80049c8:	4b06      	ldr	r3, [pc, #24]	@ (80049e4 <MX_USART6_UART_Init+0x4c>)
 80049ca:	2200      	movs	r2, #0
 80049cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80049ce:	4805      	ldr	r0, [pc, #20]	@ (80049e4 <MX_USART6_UART_Init+0x4c>)
 80049d0:	f004 ff38 	bl	8009844 <HAL_UART_Init>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d001      	beq.n	80049de <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80049da:	f000 fc05 	bl	80051e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80049de:	bf00      	nop
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	20000540 	.word	0x20000540
 80049e8:	40011400 	.word	0x40011400

080049ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b08a      	sub	sp, #40	@ 0x28
 80049f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049f2:	f107 0314 	add.w	r3, r7, #20
 80049f6:	2200      	movs	r2, #0
 80049f8:	601a      	str	r2, [r3, #0]
 80049fa:	605a      	str	r2, [r3, #4]
 80049fc:	609a      	str	r2, [r3, #8]
 80049fe:	60da      	str	r2, [r3, #12]
 8004a00:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a02:	2300      	movs	r3, #0
 8004a04:	613b      	str	r3, [r7, #16]
 8004a06:	4b4c      	ldr	r3, [pc, #304]	@ (8004b38 <MX_GPIO_Init+0x14c>)
 8004a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a0a:	4a4b      	ldr	r2, [pc, #300]	@ (8004b38 <MX_GPIO_Init+0x14c>)
 8004a0c:	f043 0304 	orr.w	r3, r3, #4
 8004a10:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a12:	4b49      	ldr	r3, [pc, #292]	@ (8004b38 <MX_GPIO_Init+0x14c>)
 8004a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a16:	f003 0304 	and.w	r3, r3, #4
 8004a1a:	613b      	str	r3, [r7, #16]
 8004a1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004a1e:	2300      	movs	r3, #0
 8004a20:	60fb      	str	r3, [r7, #12]
 8004a22:	4b45      	ldr	r3, [pc, #276]	@ (8004b38 <MX_GPIO_Init+0x14c>)
 8004a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a26:	4a44      	ldr	r2, [pc, #272]	@ (8004b38 <MX_GPIO_Init+0x14c>)
 8004a28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a2e:	4b42      	ldr	r3, [pc, #264]	@ (8004b38 <MX_GPIO_Init+0x14c>)
 8004a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a36:	60fb      	str	r3, [r7, #12]
 8004a38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	60bb      	str	r3, [r7, #8]
 8004a3e:	4b3e      	ldr	r3, [pc, #248]	@ (8004b38 <MX_GPIO_Init+0x14c>)
 8004a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a42:	4a3d      	ldr	r2, [pc, #244]	@ (8004b38 <MX_GPIO_Init+0x14c>)
 8004a44:	f043 0301 	orr.w	r3, r3, #1
 8004a48:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a4a:	4b3b      	ldr	r3, [pc, #236]	@ (8004b38 <MX_GPIO_Init+0x14c>)
 8004a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a4e:	f003 0301 	and.w	r3, r3, #1
 8004a52:	60bb      	str	r3, [r7, #8]
 8004a54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a56:	2300      	movs	r3, #0
 8004a58:	607b      	str	r3, [r7, #4]
 8004a5a:	4b37      	ldr	r3, [pc, #220]	@ (8004b38 <MX_GPIO_Init+0x14c>)
 8004a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a5e:	4a36      	ldr	r2, [pc, #216]	@ (8004b38 <MX_GPIO_Init+0x14c>)
 8004a60:	f043 0302 	orr.w	r3, r3, #2
 8004a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a66:	4b34      	ldr	r3, [pc, #208]	@ (8004b38 <MX_GPIO_Init+0x14c>)
 8004a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a6a:	f003 0302 	and.w	r3, r3, #2
 8004a6e:	607b      	str	r3, [r7, #4]
 8004a70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|CS_Pin|Buzzer_Pin|GATE_D_Pin
 8004a72:	2200      	movs	r2, #0
 8004a74:	f644 4112 	movw	r1, #19474	@ 0x4c12
 8004a78:	4830      	ldr	r0, [pc, #192]	@ (8004b3c <MX_GPIO_Init+0x150>)
 8004a7a:	f002 f853 	bl	8006b24 <HAL_GPIO_WritePin>
                          |GATE_C_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M0_Pin|M1_Pin|FN_Pin|LED2_Pin
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f246 011f 	movw	r1, #24607	@ 0x601f
 8004a84:	482e      	ldr	r0, [pc, #184]	@ (8004b40 <MX_GPIO_Init+0x154>)
 8004a86:	f002 f84d 	bl	8006b24 <HAL_GPIO_WritePin>
                          |LED1_Pin|GATE_B_Pin|GATE_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004a8a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004a8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a90:	2300      	movs	r3, #0
 8004a92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004a94:	2302      	movs	r3, #2
 8004a96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a98:	f107 0314 	add.w	r3, r7, #20
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	4827      	ldr	r0, [pc, #156]	@ (8004b3c <MX_GPIO_Init+0x150>)
 8004aa0:	f001 fe94 	bl	80067cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 CS_Pin Buzzer_Pin GATE_D_Pin
                           GATE_C_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|CS_Pin|Buzzer_Pin|GATE_D_Pin
 8004aa4:	f644 4312 	movw	r3, #19474	@ 0x4c12
 8004aa8:	617b      	str	r3, [r7, #20]
                          |GATE_C_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ab6:	f107 0314 	add.w	r3, r7, #20
 8004aba:	4619      	mov	r1, r3
 8004abc:	481f      	ldr	r0, [pc, #124]	@ (8004b3c <MX_GPIO_Init+0x150>)
 8004abe:	f001 fe85 	bl	80067cc <HAL_GPIO_Init>

  /*Configure GPIO pins : M0_Pin M1_Pin FN_Pin LED2_Pin
                           LED1_Pin GATE_B_Pin GATE_A_Pin */
  GPIO_InitStruct.Pin = M0_Pin|M1_Pin|FN_Pin|LED2_Pin
 8004ac2:	f246 031f 	movw	r3, #24607	@ 0x601f
 8004ac6:	617b      	str	r3, [r7, #20]
                          |LED1_Pin|GATE_B_Pin|GATE_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004acc:	2300      	movs	r3, #0
 8004ace:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ad4:	f107 0314 	add.w	r3, r7, #20
 8004ad8:	4619      	mov	r1, r3
 8004ada:	4819      	ldr	r0, [pc, #100]	@ (8004b40 <MX_GPIO_Init+0x154>)
 8004adc:	f001 fe76 	bl	80067cc <HAL_GPIO_Init>

  /*Configure GPIO pin : SECINP_Pin */
  GPIO_InitStruct.Pin = SECINP_Pin;
 8004ae0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004ae4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004aea:	2301      	movs	r3, #1
 8004aec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SECINP_GPIO_Port, &GPIO_InitStruct);
 8004aee:	f107 0314 	add.w	r3, r7, #20
 8004af2:	4619      	mov	r1, r3
 8004af4:	4812      	ldr	r0, [pc, #72]	@ (8004b40 <MX_GPIO_Init+0x154>)
 8004af6:	f001 fe69 	bl	80067cc <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8004afa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004afe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b00:	2300      	movs	r3, #0
 8004b02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b04:	2301      	movs	r3, #1
 8004b06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8004b08:	f107 0314 	add.w	r3, r7, #20
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	480b      	ldr	r0, [pc, #44]	@ (8004b3c <MX_GPIO_Init+0x150>)
 8004b10:	f001 fe5c 	bl	80067cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|INT2_Pin;
 8004b14:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004b18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004b1a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004b1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b20:	2300      	movs	r3, #0
 8004b22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b24:	f107 0314 	add.w	r3, r7, #20
 8004b28:	4619      	mov	r1, r3
 8004b2a:	4805      	ldr	r0, [pc, #20]	@ (8004b40 <MX_GPIO_Init+0x154>)
 8004b2c:	f001 fe4e 	bl	80067cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004b30:	bf00      	nop
 8004b32:	3728      	adds	r7, #40	@ 0x28
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	40023800 	.word	0x40023800
 8004b3c:	40020800 	.word	0x40020800
 8004b40:	40020400 	.word	0x40020400

08004b44 <E220_CONFIG>:
		}


}
void E220_CONFIG(uint8_t ADDH, uint8_t ADDL, uint8_t CHN, uint8_t MODE)
{
 8004b44:	b590      	push	{r4, r7, lr}
 8004b46:	b087      	sub	sp, #28
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	4604      	mov	r4, r0
 8004b4c:	4608      	mov	r0, r1
 8004b4e:	4611      	mov	r1, r2
 8004b50:	461a      	mov	r2, r3
 8004b52:	4623      	mov	r3, r4
 8004b54:	71fb      	strb	r3, [r7, #7]
 8004b56:	4603      	mov	r3, r0
 8004b58:	71bb      	strb	r3, [r7, #6]
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	717b      	strb	r3, [r7, #5]
 8004b5e:	4613      	mov	r3, r2
 8004b60:	713b      	strb	r3, [r7, #4]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, SET);
 8004b62:	2201      	movs	r2, #1
 8004b64:	2104      	movs	r1, #4
 8004b66:	4824      	ldr	r0, [pc, #144]	@ (8004bf8 <E220_CONFIG+0xb4>)
 8004b68:	f001 ffdc 	bl	8006b24 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET);
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	2102      	movs	r1, #2
 8004b70:	4821      	ldr	r0, [pc, #132]	@ (8004bf8 <E220_CONFIG+0xb4>)
 8004b72:	f001 ffd7 	bl	8006b24 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8004b76:	2032      	movs	r0, #50	@ 0x32
 8004b78:	f000 ffd4 	bl	8005b24 <HAL_Delay>

    char cfg_buff[8] = {0}; // E220 için 8 elemanlı bir dizi kullanıyoruz
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	60fb      	str	r3, [r7, #12]
 8004b80:	2300      	movs	r3, #0
 8004b82:	613b      	str	r3, [r7, #16]
    enum {Transparent, Fixed} mode;
    mode = MODE;
 8004b84:	793b      	ldrb	r3, [r7, #4]
 8004b86:	75fb      	strb	r3, [r7, #23]

    cfg_buff[0] = ADDH;
 8004b88:	79fb      	ldrb	r3, [r7, #7]
 8004b8a:	733b      	strb	r3, [r7, #12]
    cfg_buff[1] = ADDL;
 8004b8c:	79bb      	ldrb	r3, [r7, #6]
 8004b8e:	737b      	strb	r3, [r7, #13]
    cfg_buff[2] = 0x62;
 8004b90:	2362      	movs	r3, #98	@ 0x62
 8004b92:	73bb      	strb	r3, [r7, #14]
    cfg_buff[3] = 0x00;
 8004b94:	2300      	movs	r3, #0
 8004b96:	73fb      	strb	r3, [r7, #15]
    cfg_buff[4] = CHN;
 8004b98:	797b      	ldrb	r3, [r7, #5]
 8004b9a:	743b      	strb	r3, [r7, #16]

    switch(mode){
 8004b9c:	7dfb      	ldrb	r3, [r7, #23]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d002      	beq.n	8004ba8 <E220_CONFIG+0x64>
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d003      	beq.n	8004bae <E220_CONFIG+0x6a>
 8004ba6:	e005      	b.n	8004bb4 <E220_CONFIG+0x70>
        case Transparent:
            cfg_buff[5] = 0x00;  // opsiyon
 8004ba8:	2300      	movs	r3, #0
 8004baa:	747b      	strb	r3, [r7, #17]
            break;
 8004bac:	e004      	b.n	8004bb8 <E220_CONFIG+0x74>
        case Fixed:
            cfg_buff[5] = 0x11;
 8004bae:	2311      	movs	r3, #17
 8004bb0:	747b      	strb	r3, [r7, #17]
            break;
 8004bb2:	e001      	b.n	8004bb8 <E220_CONFIG+0x74>
        default:
            cfg_buff[5] = 0x11;
 8004bb4:	2311      	movs	r3, #17
 8004bb6:	747b      	strb	r3, [r7, #17]
     }

     cfg_buff[6] = 0x00;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	74bb      	strb	r3, [r7, #18]
     cfg_buff[7] = 0x00;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	74fb      	strb	r3, [r7, #19]


    HAL_UART_Transmit(&huart3, (uint8_t*) cfg_buff, 8, 1000);
 8004bc0:	f107 010c 	add.w	r1, r7, #12
 8004bc4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004bc8:	2208      	movs	r2, #8
 8004bca:	480c      	ldr	r0, [pc, #48]	@ (8004bfc <E220_CONFIG+0xb8>)
 8004bcc:	f004 fe87 	bl	80098de <HAL_UART_Transmit>

    HAL_Delay(25);
 8004bd0:	2019      	movs	r0, #25
 8004bd2:	f000 ffa7 	bl	8005b24 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET);
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	2104      	movs	r1, #4
 8004bda:	4807      	ldr	r0, [pc, #28]	@ (8004bf8 <E220_CONFIG+0xb4>)
 8004bdc:	f001 ffa2 	bl	8006b24 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 8004be0:	2200      	movs	r2, #0
 8004be2:	2102      	movs	r1, #2
 8004be4:	4804      	ldr	r0, [pc, #16]	@ (8004bf8 <E220_CONFIG+0xb4>)
 8004be6:	f001 ff9d 	bl	8006b24 <HAL_GPIO_WritePin>
    HAL_Delay(25);
 8004bea:	2019      	movs	r0, #25
 8004bec:	f000 ff9a 	bl	8005b24 <HAL_Delay>
}
 8004bf0:	bf00      	nop
 8004bf2:	371c      	adds	r7, #28
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd90      	pop	{r4, r7, pc}
 8004bf8:	40020400 	.word	0x40020400
 8004bfc:	200004fc 	.word	0x200004fc

08004c00 <BME280_Get_Altitude>:

float BME280_Get_Altitude(void)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
	float press = comp_data.pressure / 10000.0;
 8004c06:	4b36      	ldr	r3, [pc, #216]	@ (8004ce0 <BME280_Get_Altitude+0xe0>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f7fb fc92 	bl	8000534 <__aeabi_ui2d>
 8004c10:	a32b      	add	r3, pc, #172	@ (adr r3, 8004cc0 <BME280_Get_Altitude+0xc0>)
 8004c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c16:	f7fb fe31 	bl	800087c <__aeabi_ddiv>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	4610      	mov	r0, r2
 8004c20:	4619      	mov	r1, r3
 8004c22:	f7fb fff9 	bl	8000c18 <__aeabi_d2f>
 8004c26:	4603      	mov	r3, r0
 8004c28:	607b      	str	r3, [r7, #4]
	float temp = comp_data.temperature / 100.0;
 8004c2a:	4b2d      	ldr	r3, [pc, #180]	@ (8004ce0 <BME280_Get_Altitude+0xe0>)
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7fb fc90 	bl	8000554 <__aeabi_i2d>
 8004c34:	f04f 0200 	mov.w	r2, #0
 8004c38:	4b2a      	ldr	r3, [pc, #168]	@ (8004ce4 <BME280_Get_Altitude+0xe4>)
 8004c3a:	f7fb fe1f 	bl	800087c <__aeabi_ddiv>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	460b      	mov	r3, r1
 8004c42:	4610      	mov	r0, r2
 8004c44:	4619      	mov	r1, r3
 8004c46:	f7fb ffe7 	bl	8000c18 <__aeabi_d2f>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	603b      	str	r3, [r7, #0]
	alt = 44330 * (1 - pow((press / 1013.25),(1/5.255)));
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f7fb fc92 	bl	8000578 <__aeabi_f2d>
 8004c54:	a31c      	add	r3, pc, #112	@ (adr r3, 8004cc8 <BME280_Get_Altitude+0xc8>)
 8004c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c5a:	f7fb fe0f 	bl	800087c <__aeabi_ddiv>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	460b      	mov	r3, r1
 8004c62:	ec43 2b17 	vmov	d7, r2, r3
 8004c66:	ed9f 1b1a 	vldr	d1, [pc, #104]	@ 8004cd0 <BME280_Get_Altitude+0xd0>
 8004c6a:	eeb0 0a47 	vmov.f32	s0, s14
 8004c6e:	eef0 0a67 	vmov.f32	s1, s15
 8004c72:	f008 fd69 	bl	800d748 <pow>
 8004c76:	ec53 2b10 	vmov	r2, r3, d0
 8004c7a:	f04f 0000 	mov.w	r0, #0
 8004c7e:	491a      	ldr	r1, [pc, #104]	@ (8004ce8 <BME280_Get_Altitude+0xe8>)
 8004c80:	f7fb fb1a 	bl	80002b8 <__aeabi_dsub>
 8004c84:	4602      	mov	r2, r0
 8004c86:	460b      	mov	r3, r1
 8004c88:	4610      	mov	r0, r2
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	a312      	add	r3, pc, #72	@ (adr r3, 8004cd8 <BME280_Get_Altitude+0xd8>)
 8004c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c92:	f7fb fcc9 	bl	8000628 <__aeabi_dmul>
 8004c96:	4602      	mov	r2, r0
 8004c98:	460b      	mov	r3, r1
 8004c9a:	4610      	mov	r0, r2
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	f7fb ffbb 	bl	8000c18 <__aeabi_d2f>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	4a11      	ldr	r2, [pc, #68]	@ (8004cec <BME280_Get_Altitude+0xec>)
 8004ca6:	6013      	str	r3, [r2, #0]
	//alt = ((pow((P0/press), (1/5.257))-1) * (temp + 273.15)) / 0.0065;

	return (alt);
 8004ca8:	4b10      	ldr	r3, [pc, #64]	@ (8004cec <BME280_Get_Altitude+0xec>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	ee07 3a90 	vmov	s15, r3
}
 8004cb0:	eeb0 0a67 	vmov.f32	s0, s15
 8004cb4:	3708      	adds	r7, #8
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	f3af 8000 	nop.w
 8004cc0:	00000000 	.word	0x00000000
 8004cc4:	40c38800 	.word	0x40c38800
 8004cc8:	00000000 	.word	0x00000000
 8004ccc:	408faa00 	.word	0x408faa00
 8004cd0:	ccd9456c 	.word	0xccd9456c
 8004cd4:	3fc85b95 	.word	0x3fc85b95
 8004cd8:	00000000 	.word	0x00000000
 8004cdc:	40e5a540 	.word	0x40e5a540
 8004ce0:	20000c3c 	.word	0x20000c3c
 8004ce4:	40590000 	.word	0x40590000
 8004ce8:	3ff00000 	.word	0x3ff00000
 8004cec:	200009c0 	.word	0x200009c0

08004cf0 <user_i2c_read>:
int8_t user_i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af02      	add	r7, sp, #8
 8004cf6:	603a      	str	r2, [r7, #0]
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	71fb      	strb	r3, [r7, #7]
 8004cfe:	460b      	mov	r3, r1
 8004d00:	71bb      	strb	r3, [r7, #6]
 8004d02:	4613      	mov	r3, r2
 8004d04:	80bb      	strh	r3, [r7, #4]
  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 8004d06:	79fb      	ldrb	r3, [r7, #7]
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	005b      	lsls	r3, r3, #1
 8004d0c:	b299      	uxth	r1, r3
 8004d0e:	1dba      	adds	r2, r7, #6
 8004d10:	230a      	movs	r3, #10
 8004d12:	9300      	str	r3, [sp, #0]
 8004d14:	2301      	movs	r3, #1
 8004d16:	4811      	ldr	r0, [pc, #68]	@ (8004d5c <user_i2c_read+0x6c>)
 8004d18:	f002 f87c 	bl	8006e14 <HAL_I2C_Master_Transmit>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d002      	beq.n	8004d28 <user_i2c_read+0x38>
 8004d22:	f04f 33ff 	mov.w	r3, #4294967295
 8004d26:	e014      	b.n	8004d52 <user_i2c_read+0x62>
  if(HAL_I2C_Master_Receive(&hi2c1, (id << 1) | 0x01, data, len, 10) != HAL_OK) return -1;
 8004d28:	79fb      	ldrb	r3, [r7, #7]
 8004d2a:	005b      	lsls	r3, r3, #1
 8004d2c:	b21b      	sxth	r3, r3
 8004d2e:	f043 0301 	orr.w	r3, r3, #1
 8004d32:	b21b      	sxth	r3, r3
 8004d34:	b299      	uxth	r1, r3
 8004d36:	88bb      	ldrh	r3, [r7, #4]
 8004d38:	220a      	movs	r2, #10
 8004d3a:	9200      	str	r2, [sp, #0]
 8004d3c:	683a      	ldr	r2, [r7, #0]
 8004d3e:	4807      	ldr	r0, [pc, #28]	@ (8004d5c <user_i2c_read+0x6c>)
 8004d40:	f002 f966 	bl	8007010 <HAL_I2C_Master_Receive>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d002      	beq.n	8004d50 <user_i2c_read+0x60>
 8004d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d4e:	e000      	b.n	8004d52 <user_i2c_read+0x62>

  return 0;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3708      	adds	r7, #8
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	200002a8 	.word	0x200002a8

08004d60 <user_delay_ms>:

void user_delay_ms(uint32_t period)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  HAL_Delay(period);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f000 fedb 	bl	8005b24 <HAL_Delay>
}
 8004d6e:	bf00      	nop
 8004d70:	3708      	adds	r7, #8
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
	...

08004d78 <user_i2c_write>:
int8_t user_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b086      	sub	sp, #24
 8004d7c:	af02      	add	r7, sp, #8
 8004d7e:	603a      	str	r2, [r7, #0]
 8004d80:	461a      	mov	r2, r3
 8004d82:	4603      	mov	r3, r0
 8004d84:	71fb      	strb	r3, [r7, #7]
 8004d86:	460b      	mov	r3, r1
 8004d88:	71bb      	strb	r3, [r7, #6]
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	80bb      	strh	r3, [r7, #4]
  int8_t *buf;
  buf = malloc(len +1);
 8004d8e:	88bb      	ldrh	r3, [r7, #4]
 8004d90:	3301      	adds	r3, #1
 8004d92:	4618      	mov	r0, r3
 8004d94:	f005 fed8 	bl	800ab48 <malloc>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	60fb      	str	r3, [r7, #12]
  buf[0] = reg_addr;
 8004d9c:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	701a      	strb	r2, [r3, #0]
  memcpy(buf +1, data, len);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	3301      	adds	r3, #1
 8004da8:	88ba      	ldrh	r2, [r7, #4]
 8004daa:	6839      	ldr	r1, [r7, #0]
 8004dac:	4618      	mov	r0, r3
 8004dae:	f006 ff3a 	bl	800bc26 <memcpy>

  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 8004db2:	79fb      	ldrb	r3, [r7, #7]
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	005b      	lsls	r3, r3, #1
 8004db8:	b299      	uxth	r1, r3
 8004dba:	88bb      	ldrh	r3, [r7, #4]
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8004dc4:	9200      	str	r2, [sp, #0]
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	4808      	ldr	r0, [pc, #32]	@ (8004dec <user_i2c_write+0x74>)
 8004dca:	f002 f823 	bl	8006e14 <HAL_I2C_Master_Transmit>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d002      	beq.n	8004dda <user_i2c_write+0x62>
 8004dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8004dd8:	e003      	b.n	8004de2 <user_i2c_write+0x6a>

  free(buf);
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	f005 febc 	bl	800ab58 <free>
  return 0;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3710      	adds	r7, #16
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop
 8004dec:	200002a8 	.word	0x200002a8

08004df0 <union_converter>:

void union_converter(void)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b08e      	sub	sp, #56	@ 0x38
 8004df4:	af00      	add	r7, sp, #0
	 float2unit8 f2u8_gpsalt;
    f2u8_gpsalt.fVal=gps.altitude;
 8004df6:	4ba0      	ldr	r3, [pc, #640]	@ (8005078 <union_converter+0x288>)
 8004df8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004dfc:	4610      	mov	r0, r2
 8004dfe:	4619      	mov	r1, r3
 8004e00:	f7fb ff0a 	bl	8000c18 <__aeabi_d2f>
 8004e04:	4603      	mov	r3, r0
 8004e06:	62bb      	str	r3, [r7, #40]	@ 0x28
		 for(uint8_t i=0;i<4;i++)
 8004e08:	2300      	movs	r3, #0
 8004e0a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8004e0e:	e00f      	b.n	8004e30 <union_converter+0x40>
		 {
			loratx[i+5]=f2u8_gpsalt.array[i];
 8004e10:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8004e14:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004e18:	3305      	adds	r3, #5
 8004e1a:	3238      	adds	r2, #56	@ 0x38
 8004e1c:	443a      	add	r2, r7
 8004e1e:	f812 1c10 	ldrb.w	r1, [r2, #-16]
 8004e22:	4a96      	ldr	r2, [pc, #600]	@ (800507c <union_converter+0x28c>)
 8004e24:	54d1      	strb	r1, [r2, r3]
		 for(uint8_t i=0;i<4;i++)
 8004e26:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8004e30:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004e34:	2b03      	cmp	r3, #3
 8004e36:	d9eb      	bls.n	8004e10 <union_converter+0x20>
		 }

	 float2unit8 f2u8_latitude;
	 f2u8_latitude.fVal=gps.latitude;
 8004e38:	4b8f      	ldr	r3, [pc, #572]	@ (8005078 <union_converter+0x288>)
 8004e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e3e:	4610      	mov	r0, r2
 8004e40:	4619      	mov	r1, r3
 8004e42:	f7fb fee9 	bl	8000c18 <__aeabi_d2f>
 8004e46:	4603      	mov	r3, r0
 8004e48:	627b      	str	r3, [r7, #36]	@ 0x24
		 for(uint8_t i=0;i<4;i++)
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8004e50:	e00f      	b.n	8004e72 <union_converter+0x82>
		 {
			loratx[i+9]=f2u8_latitude.array[i];
 8004e52:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8004e56:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8004e5a:	3309      	adds	r3, #9
 8004e5c:	3238      	adds	r2, #56	@ 0x38
 8004e5e:	443a      	add	r2, r7
 8004e60:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 8004e64:	4a85      	ldr	r2, [pc, #532]	@ (800507c <union_converter+0x28c>)
 8004e66:	54d1      	strb	r1, [r2, r3]
		 for(uint8_t i=0;i<4;i++)
 8004e68:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8004e72:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8004e76:	2b03      	cmp	r3, #3
 8004e78:	d9eb      	bls.n	8004e52 <union_converter+0x62>
		 }

	 float2unit8 f2u8_longitude;
	 f2u8_longitude.fVal=gps.longitude;
 8004e7a:	4b7f      	ldr	r3, [pc, #508]	@ (8005078 <union_converter+0x288>)
 8004e7c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004e80:	4610      	mov	r0, r2
 8004e82:	4619      	mov	r1, r3
 8004e84:	f7fb fec8 	bl	8000c18 <__aeabi_d2f>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	623b      	str	r3, [r7, #32]
		 for(uint8_t i=0;i<4;i++)
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8004e92:	e00f      	b.n	8004eb4 <union_converter+0xc4>
		 {
			loratx[i+13]=f2u8_longitude.array[i];
 8004e94:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 8004e98:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8004e9c:	330d      	adds	r3, #13
 8004e9e:	3238      	adds	r2, #56	@ 0x38
 8004ea0:	443a      	add	r2, r7
 8004ea2:	f812 1c18 	ldrb.w	r1, [r2, #-24]
 8004ea6:	4a75      	ldr	r2, [pc, #468]	@ (800507c <union_converter+0x28c>)
 8004ea8:	54d1      	strb	r1, [r2, r3]
		 for(uint8_t i=0;i<4;i++)
 8004eaa:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8004eae:	3301      	adds	r3, #1
 8004eb0:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8004eb4:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8004eb8:	2b03      	cmp	r3, #3
 8004eba:	d9eb      	bls.n	8004e94 <union_converter+0xa4>
		 }

	 float2unit8 f2u8_altitude;
	 f2u8_altitude.fVal=altitude;
 8004ebc:	4b70      	ldr	r3, [pc, #448]	@ (8005080 <union_converter+0x290>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	61fb      	str	r3, [r7, #28]
		 for(uint8_t i=0;i<4;i++)
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 8004ec8:	e00f      	b.n	8004eea <union_converter+0xfa>
		 {
			loratx[i+17]=f2u8_altitude.array[i];
 8004eca:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 8004ece:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004ed2:	3311      	adds	r3, #17
 8004ed4:	3238      	adds	r2, #56	@ 0x38
 8004ed6:	443a      	add	r2, r7
 8004ed8:	f812 1c1c 	ldrb.w	r1, [r2, #-28]
 8004edc:	4a67      	ldr	r2, [pc, #412]	@ (800507c <union_converter+0x28c>)
 8004ede:	54d1      	strb	r1, [r2, r3]
		 for(uint8_t i=0;i<4;i++)
 8004ee0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 8004eea:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004eee:	2b03      	cmp	r3, #3
 8004ef0:	d9eb      	bls.n	8004eca <union_converter+0xda>
		 }
	 float2unit8 f2u8_speed;
	 f2u8_speed.fVal=speed;
 8004ef2:	4b64      	ldr	r3, [pc, #400]	@ (8005084 <union_converter+0x294>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	61bb      	str	r3, [r7, #24]
		 for(uint8_t i=0;i<4;i++)
 8004ef8:	2300      	movs	r3, #0
 8004efa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8004efe:	e00f      	b.n	8004f20 <union_converter+0x130>
		 {
			loratx[i+21]=f2u8_speed.array[i];
 8004f00:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8004f04:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004f08:	3315      	adds	r3, #21
 8004f0a:	3238      	adds	r2, #56	@ 0x38
 8004f0c:	443a      	add	r2, r7
 8004f0e:	f812 1c20 	ldrb.w	r1, [r2, #-32]
 8004f12:	4a5a      	ldr	r2, [pc, #360]	@ (800507c <union_converter+0x28c>)
 8004f14:	54d1      	strb	r1, [r2, r3]
		 for(uint8_t i=0;i<4;i++)
 8004f16:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8004f20:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004f24:	2b03      	cmp	r3, #3
 8004f26:	d9eb      	bls.n	8004f00 <union_converter+0x110>
		 }

	 float2unit8 f2u8_temp;
	 f2u8_temp.fVal=temperature;
 8004f28:	4b57      	ldr	r3, [pc, #348]	@ (8005088 <union_converter+0x298>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	617b      	str	r3, [r7, #20]
		 for(uint8_t i=0;i<4;i++)
 8004f2e:	2300      	movs	r3, #0
 8004f30:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 8004f34:	e00f      	b.n	8004f56 <union_converter+0x166>
		 {
			loratx[i+25]=f2u8_temp.array[i];
 8004f36:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8004f3a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8004f3e:	3319      	adds	r3, #25
 8004f40:	3238      	adds	r2, #56	@ 0x38
 8004f42:	443a      	add	r2, r7
 8004f44:	f812 1c24 	ldrb.w	r1, [r2, #-36]
 8004f48:	4a4c      	ldr	r2, [pc, #304]	@ (800507c <union_converter+0x28c>)
 8004f4a:	54d1      	strb	r1, [r2, r3]
		 for(uint8_t i=0;i<4;i++)
 8004f4c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8004f50:	3301      	adds	r3, #1
 8004f52:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 8004f56:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8004f5a:	2b03      	cmp	r3, #3
 8004f5c:	d9eb      	bls.n	8004f36 <union_converter+0x146>
		 }

	 float2unit8 f2u8_accx;
	 f2u8_accx.fVal=Lsm_Sensor.Accel_X;
 8004f5e:	4b4b      	ldr	r3, [pc, #300]	@ (800508c <union_converter+0x29c>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	613b      	str	r3, [r7, #16]
		 for(uint8_t i=0;i<4;i++)
 8004f64:	2300      	movs	r3, #0
 8004f66:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 8004f6a:	e00f      	b.n	8004f8c <union_converter+0x19c>
		 {
			loratx[i+29]=f2u8_accx.array[i];
 8004f6c:	f897 2031 	ldrb.w	r2, [r7, #49]	@ 0x31
 8004f70:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8004f74:	331d      	adds	r3, #29
 8004f76:	3238      	adds	r2, #56	@ 0x38
 8004f78:	443a      	add	r2, r7
 8004f7a:	f812 1c28 	ldrb.w	r1, [r2, #-40]
 8004f7e:	4a3f      	ldr	r2, [pc, #252]	@ (800507c <union_converter+0x28c>)
 8004f80:	54d1      	strb	r1, [r2, r3]
		 for(uint8_t i=0;i<4;i++)
 8004f82:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8004f86:	3301      	adds	r3, #1
 8004f88:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 8004f8c:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8004f90:	2b03      	cmp	r3, #3
 8004f92:	d9eb      	bls.n	8004f6c <union_converter+0x17c>
		 }

	 float2unit8 f2u8_accy;
	 f2u8_accy.fVal=Lsm_Sensor.Accel_Y;
 8004f94:	4b3d      	ldr	r3, [pc, #244]	@ (800508c <union_converter+0x29c>)
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	60fb      	str	r3, [r7, #12]
	 	 for(uint8_t i=0;i<4;i++)
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 8004fa0:	e00f      	b.n	8004fc2 <union_converter+0x1d2>
		 {
			loratx[i+33]=f2u8_accy.array[i];
 8004fa2:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8004fa6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8004faa:	3321      	adds	r3, #33	@ 0x21
 8004fac:	3238      	adds	r2, #56	@ 0x38
 8004fae:	443a      	add	r2, r7
 8004fb0:	f812 1c2c 	ldrb.w	r1, [r2, #-44]
 8004fb4:	4a31      	ldr	r2, [pc, #196]	@ (800507c <union_converter+0x28c>)
 8004fb6:	54d1      	strb	r1, [r2, r3]
	 	 for(uint8_t i=0;i<4;i++)
 8004fb8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 8004fc2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8004fc6:	2b03      	cmp	r3, #3
 8004fc8:	d9eb      	bls.n	8004fa2 <union_converter+0x1b2>
		 }

	 float2unit8 f2u8_accz;
	 f2u8_accz.fVal=Lsm_Sensor.Accel_Z;
 8004fca:	4b30      	ldr	r3, [pc, #192]	@ (800508c <union_converter+0x29c>)
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	60bb      	str	r3, [r7, #8]
	 	 for(uint8_t i=0;i<4;i++)
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8004fd6:	e00f      	b.n	8004ff8 <union_converter+0x208>
		 {
		    loratx[i+37]=f2u8_accz.array[i];
 8004fd8:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8004fdc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004fe0:	3325      	adds	r3, #37	@ 0x25
 8004fe2:	3238      	adds	r2, #56	@ 0x38
 8004fe4:	443a      	add	r2, r7
 8004fe6:	f812 1c30 	ldrb.w	r1, [r2, #-48]
 8004fea:	4a24      	ldr	r2, [pc, #144]	@ (800507c <union_converter+0x28c>)
 8004fec:	54d1      	strb	r1, [r2, r3]
	 	 for(uint8_t i=0;i<4;i++)
 8004fee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8004ff8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004ffc:	2b03      	cmp	r3, #3
 8004ffe:	d9eb      	bls.n	8004fd8 <union_converter+0x1e8>
		 }

	 float2unit8 f2u8_roll;
	 f2u8_roll.fVal=real_roll;
 8005000:	4b23      	ldr	r3, [pc, #140]	@ (8005090 <union_converter+0x2a0>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	607b      	str	r3, [r7, #4]
		 for(uint8_t i=0;i<4;i++)
 8005006:	2300      	movs	r3, #0
 8005008:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800500c:	e00f      	b.n	800502e <union_converter+0x23e>
		 {
			loratx[i+41]=f2u8_roll.array[i];
 800500e:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8005012:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005016:	3329      	adds	r3, #41	@ 0x29
 8005018:	3238      	adds	r2, #56	@ 0x38
 800501a:	443a      	add	r2, r7
 800501c:	f812 1c34 	ldrb.w	r1, [r2, #-52]
 8005020:	4a16      	ldr	r2, [pc, #88]	@ (800507c <union_converter+0x28c>)
 8005022:	54d1      	strb	r1, [r2, r3]
		 for(uint8_t i=0;i<4;i++)
 8005024:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005028:	3301      	adds	r3, #1
 800502a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800502e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005032:	2b03      	cmp	r3, #3
 8005034:	d9eb      	bls.n	800500e <union_converter+0x21e>
		 }
	 float2unit8 f2u8_pitch;
	 f2u8_pitch.fVal=real_pitch;
 8005036:	4b17      	ldr	r3, [pc, #92]	@ (8005094 <union_converter+0x2a4>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	603b      	str	r3, [r7, #0]
		 for(uint8_t i=0;i<4;i++)
 800503c:	2300      	movs	r3, #0
 800503e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8005042:	e00f      	b.n	8005064 <union_converter+0x274>
		 {
			loratx[i+45]=f2u8_pitch.array[i];
 8005044:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8005048:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800504c:	332d      	adds	r3, #45	@ 0x2d
 800504e:	3238      	adds	r2, #56	@ 0x38
 8005050:	443a      	add	r2, r7
 8005052:	f812 1c38 	ldrb.w	r1, [r2, #-56]
 8005056:	4a09      	ldr	r2, [pc, #36]	@ (800507c <union_converter+0x28c>)
 8005058:	54d1      	strb	r1, [r2, r3]
		 for(uint8_t i=0;i<4;i++)
 800505a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800505e:	3301      	adds	r3, #1
 8005060:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8005064:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8005068:	2b03      	cmp	r3, #3
 800506a:	d9eb      	bls.n	8005044 <union_converter+0x254>
		 }
}
 800506c:	bf00      	nop
 800506e:	bf00      	nop
 8005070:	3738      	adds	r7, #56	@ 0x38
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	20000a08 	.word	0x20000a08
 800507c:	20000960 	.word	0x20000960
 8005080:	200009b4 	.word	0x200009b4
 8005084:	200009c8 	.word	0x200009c8
 8005088:	200009ac 	.word	0x200009ac
 800508c:	20000ab8 	.word	0x20000ab8
 8005090:	200009d8 	.word	0x200009d8
 8005094:	200009d4 	.word	0x200009d4

08005098 <EGU_Buff_Load>:

void EGU_Buff_Load(void)
{
 8005098:	b480      	push	{r7}
 800509a:	af00      	add	r7, sp, #0
	loratx[52]=EGU_RX_BUFFER[29];//EGU HATA
 800509c:	4b2e      	ldr	r3, [pc, #184]	@ (8005158 <EGU_Buff_Load+0xc0>)
 800509e:	7f5a      	ldrb	r2, [r3, #29]
 80050a0:	4b2e      	ldr	r3, [pc, #184]	@ (800515c <EGU_Buff_Load+0xc4>)
 80050a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	loratx[53]=EGU_RX_BUFFER[30];//Fitil kontrol 0 ise fitil bağlı değil 1 ise fitil bağlı
 80050a6:	4b2c      	ldr	r3, [pc, #176]	@ (8005158 <EGU_Buff_Load+0xc0>)
 80050a8:	7f9a      	ldrb	r2, [r3, #30]
 80050aa:	4b2c      	ldr	r3, [pc, #176]	@ (800515c <EGU_Buff_Load+0xc4>)
 80050ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	loratx[54]=EGU_RX_BUFFER[6];//EGU BATARYA-F
 80050b0:	4b29      	ldr	r3, [pc, #164]	@ (8005158 <EGU_Buff_Load+0xc0>)
 80050b2:	799a      	ldrb	r2, [r3, #6]
 80050b4:	4b29      	ldr	r3, [pc, #164]	@ (800515c <EGU_Buff_Load+0xc4>)
 80050b6:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	loratx[55]=EGU_RX_BUFFER[7];
 80050ba:	4b27      	ldr	r3, [pc, #156]	@ (8005158 <EGU_Buff_Load+0xc0>)
 80050bc:	79da      	ldrb	r2, [r3, #7]
 80050be:	4b27      	ldr	r3, [pc, #156]	@ (800515c <EGU_Buff_Load+0xc4>)
 80050c0:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
	loratx[56]=EGU_RX_BUFFER[8];
 80050c4:	4b24      	ldr	r3, [pc, #144]	@ (8005158 <EGU_Buff_Load+0xc0>)
 80050c6:	7a1a      	ldrb	r2, [r3, #8]
 80050c8:	4b24      	ldr	r3, [pc, #144]	@ (800515c <EGU_Buff_Load+0xc4>)
 80050ca:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	loratx[57]=EGU_RX_BUFFER[9];
 80050ce:	4b22      	ldr	r3, [pc, #136]	@ (8005158 <EGU_Buff_Load+0xc0>)
 80050d0:	7a5a      	ldrb	r2, [r3, #9]
 80050d2:	4b22      	ldr	r3, [pc, #136]	@ (800515c <EGU_Buff_Load+0xc4>)
 80050d4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
	loratx[58]=EGU_RX_BUFFER[22];//EGU ANGLE-F
 80050d8:	4b1f      	ldr	r3, [pc, #124]	@ (8005158 <EGU_Buff_Load+0xc0>)
 80050da:	7d9a      	ldrb	r2, [r3, #22]
 80050dc:	4b1f      	ldr	r3, [pc, #124]	@ (800515c <EGU_Buff_Load+0xc4>)
 80050de:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
	loratx[59]=EGU_RX_BUFFER[23];
 80050e2:	4b1d      	ldr	r3, [pc, #116]	@ (8005158 <EGU_Buff_Load+0xc0>)
 80050e4:	7dda      	ldrb	r2, [r3, #23]
 80050e6:	4b1d      	ldr	r3, [pc, #116]	@ (800515c <EGU_Buff_Load+0xc4>)
 80050e8:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
	loratx[60]=EGU_RX_BUFFER[24];
 80050ec:	4b1a      	ldr	r3, [pc, #104]	@ (8005158 <EGU_Buff_Load+0xc0>)
 80050ee:	7e1a      	ldrb	r2, [r3, #24]
 80050f0:	4b1a      	ldr	r3, [pc, #104]	@ (800515c <EGU_Buff_Load+0xc4>)
 80050f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	loratx[61]=EGU_RX_BUFFER[25];
 80050f6:	4b18      	ldr	r3, [pc, #96]	@ (8005158 <EGU_Buff_Load+0xc0>)
 80050f8:	7e5a      	ldrb	r2, [r3, #25]
 80050fa:	4b18      	ldr	r3, [pc, #96]	@ (800515c <EGU_Buff_Load+0xc4>)
 80050fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
	loratx[62]=EGU_RX_BUFFER[10];//EGU IRTIFA-F
 8005100:	4b15      	ldr	r3, [pc, #84]	@ (8005158 <EGU_Buff_Load+0xc0>)
 8005102:	7a9a      	ldrb	r2, [r3, #10]
 8005104:	4b15      	ldr	r3, [pc, #84]	@ (800515c <EGU_Buff_Load+0xc4>)
 8005106:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
	loratx[63]=EGU_RX_BUFFER[11];
 800510a:	4b13      	ldr	r3, [pc, #76]	@ (8005158 <EGU_Buff_Load+0xc0>)
 800510c:	7ada      	ldrb	r2, [r3, #11]
 800510e:	4b13      	ldr	r3, [pc, #76]	@ (800515c <EGU_Buff_Load+0xc4>)
 8005110:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
	loratx[64]=EGU_RX_BUFFER[12];
 8005114:	4b10      	ldr	r3, [pc, #64]	@ (8005158 <EGU_Buff_Load+0xc0>)
 8005116:	7b1a      	ldrb	r2, [r3, #12]
 8005118:	4b10      	ldr	r3, [pc, #64]	@ (800515c <EGU_Buff_Load+0xc4>)
 800511a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	loratx[65]=EGU_RX_BUFFER[13];
 800511e:	4b0e      	ldr	r3, [pc, #56]	@ (8005158 <EGU_Buff_Load+0xc0>)
 8005120:	7b5a      	ldrb	r2, [r3, #13]
 8005122:	4b0e      	ldr	r3, [pc, #56]	@ (800515c <EGU_Buff_Load+0xc4>)
 8005124:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
	loratx[66]=EGU_RX_BUFFER[26];//EGU UCUS BASLADIMI?
 8005128:	4b0b      	ldr	r3, [pc, #44]	@ (8005158 <EGU_Buff_Load+0xc0>)
 800512a:	7e9a      	ldrb	r2, [r3, #26]
 800512c:	4b0b      	ldr	r3, [pc, #44]	@ (800515c <EGU_Buff_Load+0xc4>)
 800512e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
	loratx[67]=EGU_RX_BUFFER[28];//manyetik switch 1 ise kopmadı 0 ise koptu
 8005132:	4b09      	ldr	r3, [pc, #36]	@ (8005158 <EGU_Buff_Load+0xc0>)
 8005134:	7f1a      	ldrb	r2, [r3, #28]
 8005136:	4b09      	ldr	r3, [pc, #36]	@ (800515c <EGU_Buff_Load+0xc4>)
 8005138:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
	loratx[68]=EGU_RX_BUFFER[27];//MOTOR ATESLEME TALEBİ GELDİ Mİ?
 800513c:	4b06      	ldr	r3, [pc, #24]	@ (8005158 <EGU_Buff_Load+0xc0>)
 800513e:	7eda      	ldrb	r2, [r3, #27]
 8005140:	4b06      	ldr	r3, [pc, #24]	@ (800515c <EGU_Buff_Load+0xc4>)
 8005142:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	loratx[69]='\n';
 8005146:	4b05      	ldr	r3, [pc, #20]	@ (800515c <EGU_Buff_Load+0xc4>)
 8005148:	220a      	movs	r2, #10
 800514a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

}
 800514e:	bf00      	nop
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr
 8005158:	20000584 	.word	0x20000584
 800515c:	20000960 	.word	0x20000960

08005160 <Altitude_Offset>:

	  }
}

void Altitude_Offset()
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b082      	sub	sp, #8
 8005164:	af00      	add	r7, sp, #0
	for(uint8_t i=0;i<5;i++)
 8005166:	2300      	movs	r3, #0
 8005168:	71fb      	strb	r3, [r7, #7]
 800516a:	e02b      	b.n	80051c4 <Altitude_Offset+0x64>
	{
		HAL_Delay(40);
 800516c:	2028      	movs	r0, #40	@ 0x28
 800516e:	f000 fcd9 	bl	8005b24 <HAL_Delay>
	  rslt = bme280_set_sensor_mode(BME280_FORCED_MODE, &dev);
 8005172:	4918      	ldr	r1, [pc, #96]	@ (80051d4 <Altitude_Offset+0x74>)
 8005174:	2001      	movs	r0, #1
 8005176:	f7fc f8e6 	bl	8001346 <bme280_set_sensor_mode>
 800517a:	4603      	mov	r3, r0
 800517c:	461a      	mov	r2, r3
 800517e:	4b16      	ldr	r3, [pc, #88]	@ (80051d8 <Altitude_Offset+0x78>)
 8005180:	701a      	strb	r2, [r3, #0]
	  rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 8005182:	4a14      	ldr	r2, [pc, #80]	@ (80051d4 <Altitude_Offset+0x74>)
 8005184:	4915      	ldr	r1, [pc, #84]	@ (80051dc <Altitude_Offset+0x7c>)
 8005186:	2007      	movs	r0, #7
 8005188:	f7fc f959 	bl	800143e <bme280_get_sensor_data>
 800518c:	4603      	mov	r3, r0
 800518e:	461a      	mov	r2, r3
 8005190:	4b11      	ldr	r3, [pc, #68]	@ (80051d8 <Altitude_Offset+0x78>)
 8005192:	701a      	strb	r2, [r3, #0]
	  if(rslt == BME280_OK)
 8005194:	4b10      	ldr	r3, [pc, #64]	@ (80051d8 <Altitude_Offset+0x78>)
 8005196:	f993 3000 	ldrsb.w	r3, [r3]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d10f      	bne.n	80051be <Altitude_Offset+0x5e>
	  { pressure = comp_data.pressure;
 800519e:	4b0f      	ldr	r3, [pc, #60]	@ (80051dc <Altitude_Offset+0x7c>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	ee07 3a90 	vmov	s15, r3
 80051a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051aa:	4b0d      	ldr	r3, [pc, #52]	@ (80051e0 <Altitude_Offset+0x80>)
 80051ac:	edc3 7a00 	vstr	s15, [r3]
	    offset_altitude=BME280_Get_Altitude();
 80051b0:	f7ff fd26 	bl	8004c00 <BME280_Get_Altitude>
 80051b4:	eef0 7a40 	vmov.f32	s15, s0
 80051b8:	4b0a      	ldr	r3, [pc, #40]	@ (80051e4 <Altitude_Offset+0x84>)
 80051ba:	edc3 7a00 	vstr	s15, [r3]
	for(uint8_t i=0;i<5;i++)
 80051be:	79fb      	ldrb	r3, [r7, #7]
 80051c0:	3301      	adds	r3, #1
 80051c2:	71fb      	strb	r3, [r7, #7]
 80051c4:	79fb      	ldrb	r3, [r7, #7]
 80051c6:	2b04      	cmp	r3, #4
 80051c8:	d9d0      	bls.n	800516c <Altitude_Offset+0xc>
	  }
	}
}
 80051ca:	bf00      	nop
 80051cc:	bf00      	nop
 80051ce:	3708      	adds	r7, #8
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	20000bfc 	.word	0x20000bfc
 80051d8:	20000c48 	.word	0x20000c48
 80051dc:	20000c3c 	.word	0x20000c3c
 80051e0:	200009bc 	.word	0x200009bc
 80051e4:	200009b8 	.word	0x200009b8

080051e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80051e8:	b480      	push	{r7}
 80051ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80051ec:	b672      	cpsid	i
}
 80051ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80051f0:	bf00      	nop
 80051f2:	e7fd      	b.n	80051f0 <Error_Handler+0x8>

080051f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051fa:	2300      	movs	r3, #0
 80051fc:	607b      	str	r3, [r7, #4]
 80051fe:	4b10      	ldr	r3, [pc, #64]	@ (8005240 <HAL_MspInit+0x4c>)
 8005200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005202:	4a0f      	ldr	r2, [pc, #60]	@ (8005240 <HAL_MspInit+0x4c>)
 8005204:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005208:	6453      	str	r3, [r2, #68]	@ 0x44
 800520a:	4b0d      	ldr	r3, [pc, #52]	@ (8005240 <HAL_MspInit+0x4c>)
 800520c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800520e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005212:	607b      	str	r3, [r7, #4]
 8005214:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005216:	2300      	movs	r3, #0
 8005218:	603b      	str	r3, [r7, #0]
 800521a:	4b09      	ldr	r3, [pc, #36]	@ (8005240 <HAL_MspInit+0x4c>)
 800521c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800521e:	4a08      	ldr	r2, [pc, #32]	@ (8005240 <HAL_MspInit+0x4c>)
 8005220:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005224:	6413      	str	r3, [r2, #64]	@ 0x40
 8005226:	4b06      	ldr	r3, [pc, #24]	@ (8005240 <HAL_MspInit+0x4c>)
 8005228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800522a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800522e:	603b      	str	r3, [r7, #0]
 8005230:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005232:	bf00      	nop
 8005234:	370c      	adds	r7, #12
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	40023800 	.word	0x40023800

08005244 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b08a      	sub	sp, #40	@ 0x28
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800524c:	f107 0314 	add.w	r3, r7, #20
 8005250:	2200      	movs	r2, #0
 8005252:	601a      	str	r2, [r3, #0]
 8005254:	605a      	str	r2, [r3, #4]
 8005256:	609a      	str	r2, [r3, #8]
 8005258:	60da      	str	r2, [r3, #12]
 800525a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a1b      	ldr	r2, [pc, #108]	@ (80052d0 <HAL_ADC_MspInit+0x8c>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d12f      	bne.n	80052c6 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005266:	2300      	movs	r3, #0
 8005268:	613b      	str	r3, [r7, #16]
 800526a:	4b1a      	ldr	r3, [pc, #104]	@ (80052d4 <HAL_ADC_MspInit+0x90>)
 800526c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800526e:	4a19      	ldr	r2, [pc, #100]	@ (80052d4 <HAL_ADC_MspInit+0x90>)
 8005270:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005274:	6453      	str	r3, [r2, #68]	@ 0x44
 8005276:	4b17      	ldr	r3, [pc, #92]	@ (80052d4 <HAL_ADC_MspInit+0x90>)
 8005278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800527a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800527e:	613b      	str	r3, [r7, #16]
 8005280:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005282:	2300      	movs	r3, #0
 8005284:	60fb      	str	r3, [r7, #12]
 8005286:	4b13      	ldr	r3, [pc, #76]	@ (80052d4 <HAL_ADC_MspInit+0x90>)
 8005288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800528a:	4a12      	ldr	r2, [pc, #72]	@ (80052d4 <HAL_ADC_MspInit+0x90>)
 800528c:	f043 0304 	orr.w	r3, r3, #4
 8005290:	6313      	str	r3, [r2, #48]	@ 0x30
 8005292:	4b10      	ldr	r3, [pc, #64]	@ (80052d4 <HAL_ADC_MspInit+0x90>)
 8005294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005296:	f003 0304 	and.w	r3, r3, #4
 800529a:	60fb      	str	r3, [r7, #12]
 800529c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = ADC_VCC_Pin;
 800529e:	2304      	movs	r3, #4
 80052a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80052a2:	2303      	movs	r3, #3
 80052a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052a6:	2300      	movs	r3, #0
 80052a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_VCC_GPIO_Port, &GPIO_InitStruct);
 80052aa:	f107 0314 	add.w	r3, r7, #20
 80052ae:	4619      	mov	r1, r3
 80052b0:	4809      	ldr	r0, [pc, #36]	@ (80052d8 <HAL_ADC_MspInit+0x94>)
 80052b2:	f001 fa8b 	bl	80067cc <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80052b6:	2200      	movs	r2, #0
 80052b8:	2100      	movs	r1, #0
 80052ba:	2012      	movs	r0, #18
 80052bc:	f001 f9bd 	bl	800663a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80052c0:	2012      	movs	r0, #18
 80052c2:	f001 f9d6 	bl	8006672 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80052c6:	bf00      	nop
 80052c8:	3728      	adds	r7, #40	@ 0x28
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	40012000 	.word	0x40012000
 80052d4:	40023800 	.word	0x40023800
 80052d8:	40020800 	.word	0x40020800

080052dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b08a      	sub	sp, #40	@ 0x28
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052e4:	f107 0314 	add.w	r3, r7, #20
 80052e8:	2200      	movs	r2, #0
 80052ea:	601a      	str	r2, [r3, #0]
 80052ec:	605a      	str	r2, [r3, #4]
 80052ee:	609a      	str	r2, [r3, #8]
 80052f0:	60da      	str	r2, [r3, #12]
 80052f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a19      	ldr	r2, [pc, #100]	@ (8005360 <HAL_I2C_MspInit+0x84>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d12b      	bne.n	8005356 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052fe:	2300      	movs	r3, #0
 8005300:	613b      	str	r3, [r7, #16]
 8005302:	4b18      	ldr	r3, [pc, #96]	@ (8005364 <HAL_I2C_MspInit+0x88>)
 8005304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005306:	4a17      	ldr	r2, [pc, #92]	@ (8005364 <HAL_I2C_MspInit+0x88>)
 8005308:	f043 0302 	orr.w	r3, r3, #2
 800530c:	6313      	str	r3, [r2, #48]	@ 0x30
 800530e:	4b15      	ldr	r3, [pc, #84]	@ (8005364 <HAL_I2C_MspInit+0x88>)
 8005310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005312:	f003 0302 	and.w	r3, r3, #2
 8005316:	613b      	str	r3, [r7, #16]
 8005318:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800531a:	23c0      	movs	r3, #192	@ 0xc0
 800531c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800531e:	2312      	movs	r3, #18
 8005320:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005322:	2300      	movs	r3, #0
 8005324:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005326:	2303      	movs	r3, #3
 8005328:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800532a:	2304      	movs	r3, #4
 800532c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800532e:	f107 0314 	add.w	r3, r7, #20
 8005332:	4619      	mov	r1, r3
 8005334:	480c      	ldr	r0, [pc, #48]	@ (8005368 <HAL_I2C_MspInit+0x8c>)
 8005336:	f001 fa49 	bl	80067cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800533a:	2300      	movs	r3, #0
 800533c:	60fb      	str	r3, [r7, #12]
 800533e:	4b09      	ldr	r3, [pc, #36]	@ (8005364 <HAL_I2C_MspInit+0x88>)
 8005340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005342:	4a08      	ldr	r2, [pc, #32]	@ (8005364 <HAL_I2C_MspInit+0x88>)
 8005344:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005348:	6413      	str	r3, [r2, #64]	@ 0x40
 800534a:	4b06      	ldr	r3, [pc, #24]	@ (8005364 <HAL_I2C_MspInit+0x88>)
 800534c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800534e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005352:	60fb      	str	r3, [r7, #12]
 8005354:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8005356:	bf00      	nop
 8005358:	3728      	adds	r7, #40	@ 0x28
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	40005400 	.word	0x40005400
 8005364:	40023800 	.word	0x40023800
 8005368:	40020400 	.word	0x40020400

0800536c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b08a      	sub	sp, #40	@ 0x28
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005374:	f107 0314 	add.w	r3, r7, #20
 8005378:	2200      	movs	r2, #0
 800537a:	601a      	str	r2, [r3, #0]
 800537c:	605a      	str	r2, [r3, #4]
 800537e:	609a      	str	r2, [r3, #8]
 8005380:	60da      	str	r2, [r3, #12]
 8005382:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a19      	ldr	r2, [pc, #100]	@ (80053f0 <HAL_SPI_MspInit+0x84>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d12b      	bne.n	80053e6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800538e:	2300      	movs	r3, #0
 8005390:	613b      	str	r3, [r7, #16]
 8005392:	4b18      	ldr	r3, [pc, #96]	@ (80053f4 <HAL_SPI_MspInit+0x88>)
 8005394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005396:	4a17      	ldr	r2, [pc, #92]	@ (80053f4 <HAL_SPI_MspInit+0x88>)
 8005398:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800539c:	6453      	str	r3, [r2, #68]	@ 0x44
 800539e:	4b15      	ldr	r3, [pc, #84]	@ (80053f4 <HAL_SPI_MspInit+0x88>)
 80053a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80053a6:	613b      	str	r3, [r7, #16]
 80053a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053aa:	2300      	movs	r3, #0
 80053ac:	60fb      	str	r3, [r7, #12]
 80053ae:	4b11      	ldr	r3, [pc, #68]	@ (80053f4 <HAL_SPI_MspInit+0x88>)
 80053b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053b2:	4a10      	ldr	r2, [pc, #64]	@ (80053f4 <HAL_SPI_MspInit+0x88>)
 80053b4:	f043 0301 	orr.w	r3, r3, #1
 80053b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80053ba:	4b0e      	ldr	r3, [pc, #56]	@ (80053f4 <HAL_SPI_MspInit+0x88>)
 80053bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053be:	f003 0301 	and.w	r3, r3, #1
 80053c2:	60fb      	str	r3, [r7, #12]
 80053c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80053c6:	23e0      	movs	r3, #224	@ 0xe0
 80053c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053ca:	2302      	movs	r3, #2
 80053cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053ce:	2300      	movs	r3, #0
 80053d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053d2:	2303      	movs	r3, #3
 80053d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80053d6:	2305      	movs	r3, #5
 80053d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053da:	f107 0314 	add.w	r3, r7, #20
 80053de:	4619      	mov	r1, r3
 80053e0:	4805      	ldr	r0, [pc, #20]	@ (80053f8 <HAL_SPI_MspInit+0x8c>)
 80053e2:	f001 f9f3 	bl	80067cc <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80053e6:	bf00      	nop
 80053e8:	3728      	adds	r7, #40	@ 0x28
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop
 80053f0:	40013000 	.word	0x40013000
 80053f4:	40023800 	.word	0x40023800
 80053f8:	40020000 	.word	0x40020000

080053fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b086      	sub	sp, #24
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a38      	ldr	r2, [pc, #224]	@ (80054ec <HAL_TIM_Base_MspInit+0xf0>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d116      	bne.n	800543c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800540e:	2300      	movs	r3, #0
 8005410:	617b      	str	r3, [r7, #20]
 8005412:	4b37      	ldr	r3, [pc, #220]	@ (80054f0 <HAL_TIM_Base_MspInit+0xf4>)
 8005414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005416:	4a36      	ldr	r2, [pc, #216]	@ (80054f0 <HAL_TIM_Base_MspInit+0xf4>)
 8005418:	f043 0310 	orr.w	r3, r3, #16
 800541c:	6413      	str	r3, [r2, #64]	@ 0x40
 800541e:	4b34      	ldr	r3, [pc, #208]	@ (80054f0 <HAL_TIM_Base_MspInit+0xf4>)
 8005420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005422:	f003 0310 	and.w	r3, r3, #16
 8005426:	617b      	str	r3, [r7, #20]
 8005428:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800542a:	2200      	movs	r2, #0
 800542c:	2100      	movs	r1, #0
 800542e:	2036      	movs	r0, #54	@ 0x36
 8005430:	f001 f903 	bl	800663a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005434:	2036      	movs	r0, #54	@ 0x36
 8005436:	f001 f91c 	bl	8006672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800543a:	e052      	b.n	80054e2 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM7)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a2c      	ldr	r2, [pc, #176]	@ (80054f4 <HAL_TIM_Base_MspInit+0xf8>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d116      	bne.n	8005474 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005446:	2300      	movs	r3, #0
 8005448:	613b      	str	r3, [r7, #16]
 800544a:	4b29      	ldr	r3, [pc, #164]	@ (80054f0 <HAL_TIM_Base_MspInit+0xf4>)
 800544c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800544e:	4a28      	ldr	r2, [pc, #160]	@ (80054f0 <HAL_TIM_Base_MspInit+0xf4>)
 8005450:	f043 0320 	orr.w	r3, r3, #32
 8005454:	6413      	str	r3, [r2, #64]	@ 0x40
 8005456:	4b26      	ldr	r3, [pc, #152]	@ (80054f0 <HAL_TIM_Base_MspInit+0xf4>)
 8005458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800545a:	f003 0320 	and.w	r3, r3, #32
 800545e:	613b      	str	r3, [r7, #16]
 8005460:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8005462:	2200      	movs	r2, #0
 8005464:	2100      	movs	r1, #0
 8005466:	2037      	movs	r0, #55	@ 0x37
 8005468:	f001 f8e7 	bl	800663a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800546c:	2037      	movs	r0, #55	@ 0x37
 800546e:	f001 f900 	bl	8006672 <HAL_NVIC_EnableIRQ>
}
 8005472:	e036      	b.n	80054e2 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM10)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a1f      	ldr	r2, [pc, #124]	@ (80054f8 <HAL_TIM_Base_MspInit+0xfc>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d116      	bne.n	80054ac <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800547e:	2300      	movs	r3, #0
 8005480:	60fb      	str	r3, [r7, #12]
 8005482:	4b1b      	ldr	r3, [pc, #108]	@ (80054f0 <HAL_TIM_Base_MspInit+0xf4>)
 8005484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005486:	4a1a      	ldr	r2, [pc, #104]	@ (80054f0 <HAL_TIM_Base_MspInit+0xf4>)
 8005488:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800548c:	6453      	str	r3, [r2, #68]	@ 0x44
 800548e:	4b18      	ldr	r3, [pc, #96]	@ (80054f0 <HAL_TIM_Base_MspInit+0xf4>)
 8005490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005492:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005496:	60fb      	str	r3, [r7, #12]
 8005498:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800549a:	2200      	movs	r2, #0
 800549c:	2100      	movs	r1, #0
 800549e:	2019      	movs	r0, #25
 80054a0:	f001 f8cb 	bl	800663a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80054a4:	2019      	movs	r0, #25
 80054a6:	f001 f8e4 	bl	8006672 <HAL_NVIC_EnableIRQ>
}
 80054aa:	e01a      	b.n	80054e2 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM11)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a12      	ldr	r2, [pc, #72]	@ (80054fc <HAL_TIM_Base_MspInit+0x100>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d115      	bne.n	80054e2 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80054b6:	2300      	movs	r3, #0
 80054b8:	60bb      	str	r3, [r7, #8]
 80054ba:	4b0d      	ldr	r3, [pc, #52]	@ (80054f0 <HAL_TIM_Base_MspInit+0xf4>)
 80054bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054be:	4a0c      	ldr	r2, [pc, #48]	@ (80054f0 <HAL_TIM_Base_MspInit+0xf4>)
 80054c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80054c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80054c6:	4b0a      	ldr	r3, [pc, #40]	@ (80054f0 <HAL_TIM_Base_MspInit+0xf4>)
 80054c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80054ce:	60bb      	str	r3, [r7, #8]
 80054d0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80054d2:	2200      	movs	r2, #0
 80054d4:	2100      	movs	r1, #0
 80054d6:	201a      	movs	r0, #26
 80054d8:	f001 f8af 	bl	800663a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80054dc:	201a      	movs	r0, #26
 80054de:	f001 f8c8 	bl	8006672 <HAL_NVIC_EnableIRQ>
}
 80054e2:	bf00      	nop
 80054e4:	3718      	adds	r7, #24
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	40001000 	.word	0x40001000
 80054f0:	40023800 	.word	0x40023800
 80054f4:	40001400 	.word	0x40001400
 80054f8:	40014400 	.word	0x40014400
 80054fc:	40014800 	.word	0x40014800

08005500 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b090      	sub	sp, #64	@ 0x40
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005508:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800550c:	2200      	movs	r2, #0
 800550e:	601a      	str	r2, [r3, #0]
 8005510:	605a      	str	r2, [r3, #4]
 8005512:	609a      	str	r2, [r3, #8]
 8005514:	60da      	str	r2, [r3, #12]
 8005516:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a7f      	ldr	r2, [pc, #508]	@ (800571c <HAL_UART_MspInit+0x21c>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d12c      	bne.n	800557c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8005522:	2300      	movs	r3, #0
 8005524:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005526:	4b7e      	ldr	r3, [pc, #504]	@ (8005720 <HAL_UART_MspInit+0x220>)
 8005528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800552a:	4a7d      	ldr	r2, [pc, #500]	@ (8005720 <HAL_UART_MspInit+0x220>)
 800552c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005530:	6413      	str	r3, [r2, #64]	@ 0x40
 8005532:	4b7b      	ldr	r3, [pc, #492]	@ (8005720 <HAL_UART_MspInit+0x220>)
 8005534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005536:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800553a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800553c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800553e:	2300      	movs	r3, #0
 8005540:	627b      	str	r3, [r7, #36]	@ 0x24
 8005542:	4b77      	ldr	r3, [pc, #476]	@ (8005720 <HAL_UART_MspInit+0x220>)
 8005544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005546:	4a76      	ldr	r2, [pc, #472]	@ (8005720 <HAL_UART_MspInit+0x220>)
 8005548:	f043 0301 	orr.w	r3, r3, #1
 800554c:	6313      	str	r3, [r2, #48]	@ 0x30
 800554e:	4b74      	ldr	r3, [pc, #464]	@ (8005720 <HAL_UART_MspInit+0x220>)
 8005550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	627b      	str	r3, [r7, #36]	@ 0x24
 8005558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800555a:	2303      	movs	r3, #3
 800555c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800555e:	2302      	movs	r3, #2
 8005560:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005562:	2300      	movs	r3, #0
 8005564:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005566:	2303      	movs	r3, #3
 8005568:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800556a:	2308      	movs	r3, #8
 800556c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800556e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005572:	4619      	mov	r1, r3
 8005574:	486b      	ldr	r0, [pc, #428]	@ (8005724 <HAL_UART_MspInit+0x224>)
 8005576:	f001 f929 	bl	80067cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800557a:	e0cb      	b.n	8005714 <HAL_UART_MspInit+0x214>
  else if(huart->Instance==USART2)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a69      	ldr	r2, [pc, #420]	@ (8005728 <HAL_UART_MspInit+0x228>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d134      	bne.n	80055f0 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005586:	2300      	movs	r3, #0
 8005588:	623b      	str	r3, [r7, #32]
 800558a:	4b65      	ldr	r3, [pc, #404]	@ (8005720 <HAL_UART_MspInit+0x220>)
 800558c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800558e:	4a64      	ldr	r2, [pc, #400]	@ (8005720 <HAL_UART_MspInit+0x220>)
 8005590:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005594:	6413      	str	r3, [r2, #64]	@ 0x40
 8005596:	4b62      	ldr	r3, [pc, #392]	@ (8005720 <HAL_UART_MspInit+0x220>)
 8005598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800559a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800559e:	623b      	str	r3, [r7, #32]
 80055a0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055a2:	2300      	movs	r3, #0
 80055a4:	61fb      	str	r3, [r7, #28]
 80055a6:	4b5e      	ldr	r3, [pc, #376]	@ (8005720 <HAL_UART_MspInit+0x220>)
 80055a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055aa:	4a5d      	ldr	r2, [pc, #372]	@ (8005720 <HAL_UART_MspInit+0x220>)
 80055ac:	f043 0301 	orr.w	r3, r3, #1
 80055b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80055b2:	4b5b      	ldr	r3, [pc, #364]	@ (8005720 <HAL_UART_MspInit+0x220>)
 80055b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055b6:	f003 0301 	and.w	r3, r3, #1
 80055ba:	61fb      	str	r3, [r7, #28]
 80055bc:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = TX2_GPS_Pin|RX2_GPS_Pin;
 80055be:	230c      	movs	r3, #12
 80055c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055c2:	2302      	movs	r3, #2
 80055c4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055c6:	2300      	movs	r3, #0
 80055c8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055ca:	2303      	movs	r3, #3
 80055cc:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80055ce:	2307      	movs	r3, #7
 80055d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80055d6:	4619      	mov	r1, r3
 80055d8:	4852      	ldr	r0, [pc, #328]	@ (8005724 <HAL_UART_MspInit+0x224>)
 80055da:	f001 f8f7 	bl	80067cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80055de:	2200      	movs	r2, #0
 80055e0:	2100      	movs	r1, #0
 80055e2:	2026      	movs	r0, #38	@ 0x26
 80055e4:	f001 f829 	bl	800663a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80055e8:	2026      	movs	r0, #38	@ 0x26
 80055ea:	f001 f842 	bl	8006672 <HAL_NVIC_EnableIRQ>
}
 80055ee:	e091      	b.n	8005714 <HAL_UART_MspInit+0x214>
  else if(huart->Instance==USART3)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a4d      	ldr	r2, [pc, #308]	@ (800572c <HAL_UART_MspInit+0x22c>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d153      	bne.n	80056a2 <HAL_UART_MspInit+0x1a2>
    __HAL_RCC_USART3_CLK_ENABLE();
 80055fa:	2300      	movs	r3, #0
 80055fc:	61bb      	str	r3, [r7, #24]
 80055fe:	4b48      	ldr	r3, [pc, #288]	@ (8005720 <HAL_UART_MspInit+0x220>)
 8005600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005602:	4a47      	ldr	r2, [pc, #284]	@ (8005720 <HAL_UART_MspInit+0x220>)
 8005604:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005608:	6413      	str	r3, [r2, #64]	@ 0x40
 800560a:	4b45      	ldr	r3, [pc, #276]	@ (8005720 <HAL_UART_MspInit+0x220>)
 800560c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800560e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005612:	61bb      	str	r3, [r7, #24]
 8005614:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005616:	2300      	movs	r3, #0
 8005618:	617b      	str	r3, [r7, #20]
 800561a:	4b41      	ldr	r3, [pc, #260]	@ (8005720 <HAL_UART_MspInit+0x220>)
 800561c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800561e:	4a40      	ldr	r2, [pc, #256]	@ (8005720 <HAL_UART_MspInit+0x220>)
 8005620:	f043 0304 	orr.w	r3, r3, #4
 8005624:	6313      	str	r3, [r2, #48]	@ 0x30
 8005626:	4b3e      	ldr	r3, [pc, #248]	@ (8005720 <HAL_UART_MspInit+0x220>)
 8005628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800562a:	f003 0304 	and.w	r3, r3, #4
 800562e:	617b      	str	r3, [r7, #20]
 8005630:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005632:	2300      	movs	r3, #0
 8005634:	613b      	str	r3, [r7, #16]
 8005636:	4b3a      	ldr	r3, [pc, #232]	@ (8005720 <HAL_UART_MspInit+0x220>)
 8005638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800563a:	4a39      	ldr	r2, [pc, #228]	@ (8005720 <HAL_UART_MspInit+0x220>)
 800563c:	f043 0302 	orr.w	r3, r3, #2
 8005640:	6313      	str	r3, [r2, #48]	@ 0x30
 8005642:	4b37      	ldr	r3, [pc, #220]	@ (8005720 <HAL_UART_MspInit+0x220>)
 8005644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005646:	f003 0302 	and.w	r3, r3, #2
 800564a:	613b      	str	r3, [r7, #16]
 800564c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = RX3_LORA_Pin;
 800564e:	2320      	movs	r3, #32
 8005650:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005652:	2302      	movs	r3, #2
 8005654:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005656:	2300      	movs	r3, #0
 8005658:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800565a:	2303      	movs	r3, #3
 800565c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800565e:	2307      	movs	r3, #7
 8005660:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(RX3_LORA_GPIO_Port, &GPIO_InitStruct);
 8005662:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005666:	4619      	mov	r1, r3
 8005668:	4831      	ldr	r0, [pc, #196]	@ (8005730 <HAL_UART_MspInit+0x230>)
 800566a:	f001 f8af 	bl	80067cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TX3_LORA_Pin;
 800566e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005672:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005674:	2302      	movs	r3, #2
 8005676:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005678:	2300      	movs	r3, #0
 800567a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800567c:	2303      	movs	r3, #3
 800567e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005680:	2307      	movs	r3, #7
 8005682:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(TX3_LORA_GPIO_Port, &GPIO_InitStruct);
 8005684:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005688:	4619      	mov	r1, r3
 800568a:	482a      	ldr	r0, [pc, #168]	@ (8005734 <HAL_UART_MspInit+0x234>)
 800568c:	f001 f89e 	bl	80067cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8005690:	2200      	movs	r2, #0
 8005692:	2100      	movs	r1, #0
 8005694:	2027      	movs	r0, #39	@ 0x27
 8005696:	f000 ffd0 	bl	800663a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800569a:	2027      	movs	r0, #39	@ 0x27
 800569c:	f000 ffe9 	bl	8006672 <HAL_NVIC_EnableIRQ>
}
 80056a0:	e038      	b.n	8005714 <HAL_UART_MspInit+0x214>
  else if(huart->Instance==USART6)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a24      	ldr	r2, [pc, #144]	@ (8005738 <HAL_UART_MspInit+0x238>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d133      	bne.n	8005714 <HAL_UART_MspInit+0x214>
    __HAL_RCC_USART6_CLK_ENABLE();
 80056ac:	2300      	movs	r3, #0
 80056ae:	60fb      	str	r3, [r7, #12]
 80056b0:	4b1b      	ldr	r3, [pc, #108]	@ (8005720 <HAL_UART_MspInit+0x220>)
 80056b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056b4:	4a1a      	ldr	r2, [pc, #104]	@ (8005720 <HAL_UART_MspInit+0x220>)
 80056b6:	f043 0320 	orr.w	r3, r3, #32
 80056ba:	6453      	str	r3, [r2, #68]	@ 0x44
 80056bc:	4b18      	ldr	r3, [pc, #96]	@ (8005720 <HAL_UART_MspInit+0x220>)
 80056be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056c0:	f003 0320 	and.w	r3, r3, #32
 80056c4:	60fb      	str	r3, [r7, #12]
 80056c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80056c8:	2300      	movs	r3, #0
 80056ca:	60bb      	str	r3, [r7, #8]
 80056cc:	4b14      	ldr	r3, [pc, #80]	@ (8005720 <HAL_UART_MspInit+0x220>)
 80056ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056d0:	4a13      	ldr	r2, [pc, #76]	@ (8005720 <HAL_UART_MspInit+0x220>)
 80056d2:	f043 0304 	orr.w	r3, r3, #4
 80056d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80056d8:	4b11      	ldr	r3, [pc, #68]	@ (8005720 <HAL_UART_MspInit+0x220>)
 80056da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056dc:	f003 0304 	and.w	r3, r3, #4
 80056e0:	60bb      	str	r3, [r7, #8]
 80056e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TX6_RS_Pin|RX6_RS_Pin;
 80056e4:	23c0      	movs	r3, #192	@ 0xc0
 80056e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056e8:	2302      	movs	r3, #2
 80056ea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056ec:	2300      	movs	r3, #0
 80056ee:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056f0:	2303      	movs	r3, #3
 80056f2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80056f4:	2308      	movs	r3, #8
 80056f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80056f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80056fc:	4619      	mov	r1, r3
 80056fe:	480c      	ldr	r0, [pc, #48]	@ (8005730 <HAL_UART_MspInit+0x230>)
 8005700:	f001 f864 	bl	80067cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8005704:	2200      	movs	r2, #0
 8005706:	2100      	movs	r1, #0
 8005708:	2047      	movs	r0, #71	@ 0x47
 800570a:	f000 ff96 	bl	800663a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800570e:	2047      	movs	r0, #71	@ 0x47
 8005710:	f000 ffaf 	bl	8006672 <HAL_NVIC_EnableIRQ>
}
 8005714:	bf00      	nop
 8005716:	3740      	adds	r7, #64	@ 0x40
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}
 800571c:	40004c00 	.word	0x40004c00
 8005720:	40023800 	.word	0x40023800
 8005724:	40020000 	.word	0x40020000
 8005728:	40004400 	.word	0x40004400
 800572c:	40004800 	.word	0x40004800
 8005730:	40020800 	.word	0x40020800
 8005734:	40020400 	.word	0x40020400
 8005738:	40011400 	.word	0x40011400

0800573c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800573c:	b480      	push	{r7}
 800573e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005740:	bf00      	nop
 8005742:	e7fd      	b.n	8005740 <NMI_Handler+0x4>

08005744 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005744:	b480      	push	{r7}
 8005746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005748:	bf00      	nop
 800574a:	e7fd      	b.n	8005748 <HardFault_Handler+0x4>

0800574c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800574c:	b480      	push	{r7}
 800574e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005750:	bf00      	nop
 8005752:	e7fd      	b.n	8005750 <MemManage_Handler+0x4>

08005754 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005754:	b480      	push	{r7}
 8005756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005758:	bf00      	nop
 800575a:	e7fd      	b.n	8005758 <BusFault_Handler+0x4>

0800575c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800575c:	b480      	push	{r7}
 800575e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005760:	bf00      	nop
 8005762:	e7fd      	b.n	8005760 <UsageFault_Handler+0x4>

08005764 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005764:	b480      	push	{r7}
 8005766:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005768:	bf00      	nop
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr

08005772 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005772:	b480      	push	{r7}
 8005774:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005776:	bf00      	nop
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005780:	b480      	push	{r7}
 8005782:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005784:	bf00      	nop
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr

0800578e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800578e:	b580      	push	{r7, lr}
 8005790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005792:	f000 f9a7 	bl	8005ae4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005796:	bf00      	nop
 8005798:	bd80      	pop	{r7, pc}
	...

0800579c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80057a0:	4802      	ldr	r0, [pc, #8]	@ (80057ac <ADC_IRQHandler+0x10>)
 80057a2:	f000 fb05 	bl	8005db0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80057a6:	bf00      	nop
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	20000260 	.word	0x20000260

080057b0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80057b4:	4802      	ldr	r0, [pc, #8]	@ (80057c0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80057b6:	f003 fde4 	bl	8009382 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80057ba:	bf00      	nop
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	200003e4 	.word	0x200003e4

080057c4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80057c8:	4802      	ldr	r0, [pc, #8]	@ (80057d4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80057ca:	f003 fdda 	bl	8009382 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80057ce:	bf00      	nop
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	2000042c 	.word	0x2000042c

080057d8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80057dc:	4802      	ldr	r0, [pc, #8]	@ (80057e8 <USART2_IRQHandler+0x10>)
 80057de:	f004 f985 	bl	8009aec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80057e2:	bf00      	nop
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	200004b8 	.word	0x200004b8

080057ec <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80057f0:	4802      	ldr	r0, [pc, #8]	@ (80057fc <USART3_IRQHandler+0x10>)
 80057f2:	f004 f97b 	bl	8009aec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80057f6:	bf00      	nop
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	200004fc 	.word	0x200004fc

08005800 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005804:	4802      	ldr	r0, [pc, #8]	@ (8005810 <TIM6_DAC_IRQHandler+0x10>)
 8005806:	f003 fdbc 	bl	8009382 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800580a:	bf00      	nop
 800580c:	bd80      	pop	{r7, pc}
 800580e:	bf00      	nop
 8005810:	20000354 	.word	0x20000354

08005814 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005818:	4802      	ldr	r0, [pc, #8]	@ (8005824 <TIM7_IRQHandler+0x10>)
 800581a:	f003 fdb2 	bl	8009382 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800581e:	bf00      	nop
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	2000039c 	.word	0x2000039c

08005828 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800582c:	4802      	ldr	r0, [pc, #8]	@ (8005838 <USART6_IRQHandler+0x10>)
 800582e:	f004 f95d 	bl	8009aec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8005832:	bf00      	nop
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	20000540 	.word	0x20000540

0800583c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800583c:	b480      	push	{r7}
 800583e:	af00      	add	r7, sp, #0
  return 1;
 8005840:	2301      	movs	r3, #1
}
 8005842:	4618      	mov	r0, r3
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <_kill>:

int _kill(int pid, int sig)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b082      	sub	sp, #8
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005856:	f006 f9b9 	bl	800bbcc <__errno>
 800585a:	4603      	mov	r3, r0
 800585c:	2216      	movs	r2, #22
 800585e:	601a      	str	r2, [r3, #0]
  return -1;
 8005860:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005864:	4618      	mov	r0, r3
 8005866:	3708      	adds	r7, #8
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <_exit>:

void _exit (int status)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b082      	sub	sp, #8
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005874:	f04f 31ff 	mov.w	r1, #4294967295
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f7ff ffe7 	bl	800584c <_kill>
  while (1) {}    /* Make sure we hang here */
 800587e:	bf00      	nop
 8005880:	e7fd      	b.n	800587e <_exit+0x12>

08005882 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005882:	b580      	push	{r7, lr}
 8005884:	b086      	sub	sp, #24
 8005886:	af00      	add	r7, sp, #0
 8005888:	60f8      	str	r0, [r7, #12]
 800588a:	60b9      	str	r1, [r7, #8]
 800588c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800588e:	2300      	movs	r3, #0
 8005890:	617b      	str	r3, [r7, #20]
 8005892:	e00a      	b.n	80058aa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005894:	f3af 8000 	nop.w
 8005898:	4601      	mov	r1, r0
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	1c5a      	adds	r2, r3, #1
 800589e:	60ba      	str	r2, [r7, #8]
 80058a0:	b2ca      	uxtb	r2, r1
 80058a2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	3301      	adds	r3, #1
 80058a8:	617b      	str	r3, [r7, #20]
 80058aa:	697a      	ldr	r2, [r7, #20]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	dbf0      	blt.n	8005894 <_read+0x12>
  }

  return len;
 80058b2:	687b      	ldr	r3, [r7, #4]
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3718      	adds	r7, #24
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b086      	sub	sp, #24
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80058c8:	2300      	movs	r3, #0
 80058ca:	617b      	str	r3, [r7, #20]
 80058cc:	e009      	b.n	80058e2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	1c5a      	adds	r2, r3, #1
 80058d2:	60ba      	str	r2, [r7, #8]
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	4618      	mov	r0, r3
 80058d8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	3301      	adds	r3, #1
 80058e0:	617b      	str	r3, [r7, #20]
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	dbf1      	blt.n	80058ce <_write+0x12>
  }
  return len;
 80058ea:	687b      	ldr	r3, [r7, #4]
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3718      	adds	r7, #24
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <_close>:

int _close(int file)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80058fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005900:	4618      	mov	r0, r3
 8005902:	370c      	adds	r7, #12
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800591c:	605a      	str	r2, [r3, #4]
  return 0;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <_isatty>:

int _isatty(int file)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005934:	2301      	movs	r3, #1
}
 8005936:	4618      	mov	r0, r3
 8005938:	370c      	adds	r7, #12
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr

08005942 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005942:	b480      	push	{r7}
 8005944:	b085      	sub	sp, #20
 8005946:	af00      	add	r7, sp, #0
 8005948:	60f8      	str	r0, [r7, #12]
 800594a:	60b9      	str	r1, [r7, #8]
 800594c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	3714      	adds	r7, #20
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b086      	sub	sp, #24
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005964:	4a14      	ldr	r2, [pc, #80]	@ (80059b8 <_sbrk+0x5c>)
 8005966:	4b15      	ldr	r3, [pc, #84]	@ (80059bc <_sbrk+0x60>)
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005970:	4b13      	ldr	r3, [pc, #76]	@ (80059c0 <_sbrk+0x64>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d102      	bne.n	800597e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005978:	4b11      	ldr	r3, [pc, #68]	@ (80059c0 <_sbrk+0x64>)
 800597a:	4a12      	ldr	r2, [pc, #72]	@ (80059c4 <_sbrk+0x68>)
 800597c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800597e:	4b10      	ldr	r3, [pc, #64]	@ (80059c0 <_sbrk+0x64>)
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4413      	add	r3, r2
 8005986:	693a      	ldr	r2, [r7, #16]
 8005988:	429a      	cmp	r2, r3
 800598a:	d207      	bcs.n	800599c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800598c:	f006 f91e 	bl	800bbcc <__errno>
 8005990:	4603      	mov	r3, r0
 8005992:	220c      	movs	r2, #12
 8005994:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005996:	f04f 33ff 	mov.w	r3, #4294967295
 800599a:	e009      	b.n	80059b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800599c:	4b08      	ldr	r3, [pc, #32]	@ (80059c0 <_sbrk+0x64>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80059a2:	4b07      	ldr	r3, [pc, #28]	@ (80059c0 <_sbrk+0x64>)
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4413      	add	r3, r2
 80059aa:	4a05      	ldr	r2, [pc, #20]	@ (80059c0 <_sbrk+0x64>)
 80059ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80059ae:	68fb      	ldr	r3, [r7, #12]
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3718      	adds	r7, #24
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	20020000 	.word	0x20020000
 80059bc:	00000400 	.word	0x00000400
 80059c0:	20000c50 	.word	0x20000c50
 80059c4:	20000db8 	.word	0x20000db8

080059c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80059c8:	b480      	push	{r7}
 80059ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80059cc:	4b06      	ldr	r3, [pc, #24]	@ (80059e8 <SystemInit+0x20>)
 80059ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059d2:	4a05      	ldr	r2, [pc, #20]	@ (80059e8 <SystemInit+0x20>)
 80059d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80059d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80059dc:	bf00      	nop
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr
 80059e6:	bf00      	nop
 80059e8:	e000ed00 	.word	0xe000ed00

080059ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80059ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005a24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80059f0:	480d      	ldr	r0, [pc, #52]	@ (8005a28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80059f2:	490e      	ldr	r1, [pc, #56]	@ (8005a2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80059f4:	4a0e      	ldr	r2, [pc, #56]	@ (8005a30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80059f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80059f8:	e002      	b.n	8005a00 <LoopCopyDataInit>

080059fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80059fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80059fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80059fe:	3304      	adds	r3, #4

08005a00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005a00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005a02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005a04:	d3f9      	bcc.n	80059fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005a06:	4a0b      	ldr	r2, [pc, #44]	@ (8005a34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005a08:	4c0b      	ldr	r4, [pc, #44]	@ (8005a38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005a0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005a0c:	e001      	b.n	8005a12 <LoopFillZerobss>

08005a0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005a0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005a10:	3204      	adds	r2, #4

08005a12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005a12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005a14:	d3fb      	bcc.n	8005a0e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005a16:	f7ff ffd7 	bl	80059c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005a1a:	f006 f8dd 	bl	800bbd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005a1e:	f7fe f897 	bl	8003b50 <main>
  bx  lr    
 8005a22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005a24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005a28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005a2c:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 8005a30:	0800edf8 	.word	0x0800edf8
  ldr r2, =_sbss
 8005a34:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 8005a38:	20000db8 	.word	0x20000db8

08005a3c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005a3c:	e7fe      	b.n	8005a3c <CAN1_RX0_IRQHandler>
	...

08005a40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005a44:	4b0e      	ldr	r3, [pc, #56]	@ (8005a80 <HAL_Init+0x40>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a0d      	ldr	r2, [pc, #52]	@ (8005a80 <HAL_Init+0x40>)
 8005a4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005a4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005a50:	4b0b      	ldr	r3, [pc, #44]	@ (8005a80 <HAL_Init+0x40>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a0a      	ldr	r2, [pc, #40]	@ (8005a80 <HAL_Init+0x40>)
 8005a56:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005a5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005a5c:	4b08      	ldr	r3, [pc, #32]	@ (8005a80 <HAL_Init+0x40>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a07      	ldr	r2, [pc, #28]	@ (8005a80 <HAL_Init+0x40>)
 8005a62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005a68:	2003      	movs	r0, #3
 8005a6a:	f000 fddb 	bl	8006624 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005a6e:	200f      	movs	r0, #15
 8005a70:	f000 f808 	bl	8005a84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005a74:	f7ff fbbe 	bl	80051f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	40023c00 	.word	0x40023c00

08005a84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b082      	sub	sp, #8
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005a8c:	4b12      	ldr	r3, [pc, #72]	@ (8005ad8 <HAL_InitTick+0x54>)
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	4b12      	ldr	r3, [pc, #72]	@ (8005adc <HAL_InitTick+0x58>)
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	4619      	mov	r1, r3
 8005a96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005a9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f000 fdf3 	bl	800668e <HAL_SYSTICK_Config>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d001      	beq.n	8005ab2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e00e      	b.n	8005ad0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2b0f      	cmp	r3, #15
 8005ab6:	d80a      	bhi.n	8005ace <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005ab8:	2200      	movs	r2, #0
 8005aba:	6879      	ldr	r1, [r7, #4]
 8005abc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ac0:	f000 fdbb 	bl	800663a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005ac4:	4a06      	ldr	r2, [pc, #24]	@ (8005ae0 <HAL_InitTick+0x5c>)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005aca:	2300      	movs	r3, #0
 8005acc:	e000      	b.n	8005ad0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3708      	adds	r7, #8
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	20000044 	.word	0x20000044
 8005adc:	2000004c 	.word	0x2000004c
 8005ae0:	20000048 	.word	0x20000048

08005ae4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005ae8:	4b06      	ldr	r3, [pc, #24]	@ (8005b04 <HAL_IncTick+0x20>)
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	461a      	mov	r2, r3
 8005aee:	4b06      	ldr	r3, [pc, #24]	@ (8005b08 <HAL_IncTick+0x24>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4413      	add	r3, r2
 8005af4:	4a04      	ldr	r2, [pc, #16]	@ (8005b08 <HAL_IncTick+0x24>)
 8005af6:	6013      	str	r3, [r2, #0]
}
 8005af8:	bf00      	nop
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	2000004c 	.word	0x2000004c
 8005b08:	20000c54 	.word	0x20000c54

08005b0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	af00      	add	r7, sp, #0
  return uwTick;
 8005b10:	4b03      	ldr	r3, [pc, #12]	@ (8005b20 <HAL_GetTick+0x14>)
 8005b12:	681b      	ldr	r3, [r3, #0]
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	20000c54 	.word	0x20000c54

08005b24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005b2c:	f7ff ffee 	bl	8005b0c <HAL_GetTick>
 8005b30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b3c:	d005      	beq.n	8005b4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005b3e:	4b0a      	ldr	r3, [pc, #40]	@ (8005b68 <HAL_Delay+0x44>)
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	461a      	mov	r2, r3
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	4413      	add	r3, r2
 8005b48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005b4a:	bf00      	nop
 8005b4c:	f7ff ffde 	bl	8005b0c <HAL_GetTick>
 8005b50:	4602      	mov	r2, r0
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	1ad3      	subs	r3, r2, r3
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d8f7      	bhi.n	8005b4c <HAL_Delay+0x28>
  {
  }
}
 8005b5c:	bf00      	nop
 8005b5e:	bf00      	nop
 8005b60:	3710      	adds	r7, #16
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	2000004c 	.word	0x2000004c

08005b6c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b74:	2300      	movs	r3, #0
 8005b76:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d101      	bne.n	8005b82 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e033      	b.n	8005bea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d109      	bne.n	8005b9e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f7ff fb5a 	bl	8005244 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ba2:	f003 0310 	and.w	r3, r3, #16
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d118      	bne.n	8005bdc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bae:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005bb2:	f023 0302 	bic.w	r3, r3, #2
 8005bb6:	f043 0202 	orr.w	r2, r3, #2
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 fb5a 	bl	8006278 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bce:	f023 0303 	bic.w	r3, r3, #3
 8005bd2:	f043 0201 	orr.w	r2, r3, #1
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	641a      	str	r2, [r3, #64]	@ 0x40
 8005bda:	e001      	b.n	8005be0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
	...

08005bf4 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b085      	sub	sp, #20
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d101      	bne.n	8005c0e <HAL_ADC_Start_IT+0x1a>
 8005c0a:	2302      	movs	r3, #2
 8005c0c:	e0bd      	b.n	8005d8a <HAL_ADC_Start_IT+0x196>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2201      	movs	r2, #1
 8005c12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	f003 0301 	and.w	r3, r3, #1
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d018      	beq.n	8005c56 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	689a      	ldr	r2, [r3, #8]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f042 0201 	orr.w	r2, r2, #1
 8005c32:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005c34:	4b58      	ldr	r3, [pc, #352]	@ (8005d98 <HAL_ADC_Start_IT+0x1a4>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a58      	ldr	r2, [pc, #352]	@ (8005d9c <HAL_ADC_Start_IT+0x1a8>)
 8005c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c3e:	0c9a      	lsrs	r2, r3, #18
 8005c40:	4613      	mov	r3, r2
 8005c42:	005b      	lsls	r3, r3, #1
 8005c44:	4413      	add	r3, r2
 8005c46:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005c48:	e002      	b.n	8005c50 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	3b01      	subs	r3, #1
 8005c4e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d1f9      	bne.n	8005c4a <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	f003 0301 	and.w	r3, r3, #1
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	f040 8085 	bne.w	8005d70 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c6a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005c6e:	f023 0301 	bic.w	r3, r3, #1
 8005c72:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d007      	beq.n	8005c98 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c8c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005c90:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005ca0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ca4:	d106      	bne.n	8005cb4 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005caa:	f023 0206 	bic.w	r2, r3, #6
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	645a      	str	r2, [r3, #68]	@ 0x44
 8005cb2:	e002      	b.n	8005cba <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005cc2:	4b37      	ldr	r3, [pc, #220]	@ (8005da0 <HAL_ADC_Start_IT+0x1ac>)
 8005cc4:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8005cce:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	6812      	ldr	r2, [r2, #0]
 8005cda:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005cde:	f043 0320 	orr.w	r3, r3, #32
 8005ce2:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	f003 031f 	and.w	r3, r3, #31
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d12a      	bne.n	8005d46 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a2b      	ldr	r2, [pc, #172]	@ (8005da4 <HAL_ADC_Start_IT+0x1b0>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d015      	beq.n	8005d26 <HAL_ADC_Start_IT+0x132>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a2a      	ldr	r2, [pc, #168]	@ (8005da8 <HAL_ADC_Start_IT+0x1b4>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d105      	bne.n	8005d10 <HAL_ADC_Start_IT+0x11c>
 8005d04:	4b26      	ldr	r3, [pc, #152]	@ (8005da0 <HAL_ADC_Start_IT+0x1ac>)
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	f003 031f 	and.w	r3, r3, #31
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d00a      	beq.n	8005d26 <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a25      	ldr	r2, [pc, #148]	@ (8005dac <HAL_ADC_Start_IT+0x1b8>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d136      	bne.n	8005d88 <HAL_ADC_Start_IT+0x194>
 8005d1a:	4b21      	ldr	r3, [pc, #132]	@ (8005da0 <HAL_ADC_Start_IT+0x1ac>)
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	f003 0310 	and.w	r3, r3, #16
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d130      	bne.n	8005d88 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d129      	bne.n	8005d88 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	689a      	ldr	r2, [r3, #8]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005d42:	609a      	str	r2, [r3, #8]
 8005d44:	e020      	b.n	8005d88 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a16      	ldr	r2, [pc, #88]	@ (8005da4 <HAL_ADC_Start_IT+0x1b0>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d11b      	bne.n	8005d88 <HAL_ADC_Start_IT+0x194>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d114      	bne.n	8005d88 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	689a      	ldr	r2, [r3, #8]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005d6c:	609a      	str	r2, [r3, #8]
 8005d6e:	e00b      	b.n	8005d88 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d74:	f043 0210 	orr.w	r2, r3, #16
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d80:	f043 0201 	orr.w	r2, r3, #1
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3714      	adds	r7, #20
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr
 8005d96:	bf00      	nop
 8005d98:	20000044 	.word	0x20000044
 8005d9c:	431bde83 	.word	0x431bde83
 8005da0:	40012300 	.word	0x40012300
 8005da4:	40012000 	.word	0x40012000
 8005da8:	40012100 	.word	0x40012100
 8005dac:	40012200 	.word	0x40012200

08005db0 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b086      	sub	sp, #24
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8005db8:	2300      	movs	r3, #0
 8005dba:	617b      	str	r3, [r7, #20]
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f003 0302 	and.w	r3, r3, #2
 8005dd6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	f003 0320 	and.w	r3, r3, #32
 8005dde:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d049      	beq.n	8005e7a <HAL_ADC_IRQHandler+0xca>
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d046      	beq.n	8005e7a <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005df0:	f003 0310 	and.w	r3, r3, #16
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d105      	bne.n	8005e04 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dfc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d12b      	bne.n	8005e6a <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d127      	bne.n	8005e6a <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e20:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d006      	beq.n	8005e36 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d119      	bne.n	8005e6a <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	685a      	ldr	r2, [r3, #4]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f022 0220 	bic.w	r2, r2, #32
 8005e44:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e4a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e56:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d105      	bne.n	8005e6a <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e62:	f043 0201 	orr.w	r2, r3, #1
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f7fd fe4c 	bl	8003b08 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f06f 0212 	mvn.w	r2, #18
 8005e78:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f003 0304 	and.w	r3, r3, #4
 8005e80:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e88:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d057      	beq.n	8005f40 <HAL_ADC_IRQHandler+0x190>
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d054      	beq.n	8005f40 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e9a:	f003 0310 	and.w	r3, r3, #16
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d105      	bne.n	8005eae <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ea6:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d139      	bne.n	8005f30 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ec2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d006      	beq.n	8005ed8 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d12b      	bne.n	8005f30 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d124      	bne.n	8005f30 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d11d      	bne.n	8005f30 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d119      	bne.n	8005f30 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	685a      	ldr	r2, [r3, #4]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005f0a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f10:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d105      	bne.n	8005f30 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f28:	f043 0201 	orr.w	r2, r3, #1
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f000 fa9d 	bl	8006470 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f06f 020c 	mvn.w	r2, #12
 8005f3e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f003 0301 	and.w	r3, r3, #1
 8005f46:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f4e:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d017      	beq.n	8005f86 <HAL_ADC_IRQHandler+0x1d6>
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d014      	beq.n	8005f86 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 0301 	and.w	r3, r3, #1
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d10d      	bne.n	8005f86 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f6e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 f837 	bl	8005fea <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f06f 0201 	mvn.w	r2, #1
 8005f84:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f003 0320 	and.w	r3, r3, #32
 8005f8c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005f94:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d015      	beq.n	8005fc8 <HAL_ADC_IRQHandler+0x218>
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d012      	beq.n	8005fc8 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fa6:	f043 0202 	orr.w	r2, r3, #2
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f06f 0220 	mvn.w	r2, #32
 8005fb6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 f820 	bl	8005ffe <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f06f 0220 	mvn.w	r2, #32
 8005fc6:	601a      	str	r2, [r3, #0]
  }
}
 8005fc8:	bf00      	nop
 8005fca:	3718      	adds	r7, #24
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	370c      	adds	r7, #12
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr

08005fea <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8005fea:	b480      	push	{r7}
 8005fec:	b083      	sub	sp, #12
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8005ff2:	bf00      	nop
 8005ff4:	370c      	adds	r7, #12
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr

08005ffe <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005ffe:	b480      	push	{r7}
 8006000:	b083      	sub	sp, #12
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006006:	bf00      	nop
 8006008:	370c      	adds	r7, #12
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr
	...

08006014 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006014:	b480      	push	{r7}
 8006016:	b085      	sub	sp, #20
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800601e:	2300      	movs	r3, #0
 8006020:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006028:	2b01      	cmp	r3, #1
 800602a:	d101      	bne.n	8006030 <HAL_ADC_ConfigChannel+0x1c>
 800602c:	2302      	movs	r3, #2
 800602e:	e113      	b.n	8006258 <HAL_ADC_ConfigChannel+0x244>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	2b09      	cmp	r3, #9
 800603e:	d925      	bls.n	800608c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68d9      	ldr	r1, [r3, #12]
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	b29b      	uxth	r3, r3
 800604c:	461a      	mov	r2, r3
 800604e:	4613      	mov	r3, r2
 8006050:	005b      	lsls	r3, r3, #1
 8006052:	4413      	add	r3, r2
 8006054:	3b1e      	subs	r3, #30
 8006056:	2207      	movs	r2, #7
 8006058:	fa02 f303 	lsl.w	r3, r2, r3
 800605c:	43da      	mvns	r2, r3
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	400a      	ands	r2, r1
 8006064:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	68d9      	ldr	r1, [r3, #12]
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	689a      	ldr	r2, [r3, #8]
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	b29b      	uxth	r3, r3
 8006076:	4618      	mov	r0, r3
 8006078:	4603      	mov	r3, r0
 800607a:	005b      	lsls	r3, r3, #1
 800607c:	4403      	add	r3, r0
 800607e:	3b1e      	subs	r3, #30
 8006080:	409a      	lsls	r2, r3
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	430a      	orrs	r2, r1
 8006088:	60da      	str	r2, [r3, #12]
 800608a:	e022      	b.n	80060d2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	6919      	ldr	r1, [r3, #16]
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	b29b      	uxth	r3, r3
 8006098:	461a      	mov	r2, r3
 800609a:	4613      	mov	r3, r2
 800609c:	005b      	lsls	r3, r3, #1
 800609e:	4413      	add	r3, r2
 80060a0:	2207      	movs	r2, #7
 80060a2:	fa02 f303 	lsl.w	r3, r2, r3
 80060a6:	43da      	mvns	r2, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	400a      	ands	r2, r1
 80060ae:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	6919      	ldr	r1, [r3, #16]
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	689a      	ldr	r2, [r3, #8]
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	b29b      	uxth	r3, r3
 80060c0:	4618      	mov	r0, r3
 80060c2:	4603      	mov	r3, r0
 80060c4:	005b      	lsls	r3, r3, #1
 80060c6:	4403      	add	r3, r0
 80060c8:	409a      	lsls	r2, r3
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	430a      	orrs	r2, r1
 80060d0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	2b06      	cmp	r3, #6
 80060d8:	d824      	bhi.n	8006124 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	685a      	ldr	r2, [r3, #4]
 80060e4:	4613      	mov	r3, r2
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	4413      	add	r3, r2
 80060ea:	3b05      	subs	r3, #5
 80060ec:	221f      	movs	r2, #31
 80060ee:	fa02 f303 	lsl.w	r3, r2, r3
 80060f2:	43da      	mvns	r2, r3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	400a      	ands	r2, r1
 80060fa:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	b29b      	uxth	r3, r3
 8006108:	4618      	mov	r0, r3
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	685a      	ldr	r2, [r3, #4]
 800610e:	4613      	mov	r3, r2
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	4413      	add	r3, r2
 8006114:	3b05      	subs	r3, #5
 8006116:	fa00 f203 	lsl.w	r2, r0, r3
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	430a      	orrs	r2, r1
 8006120:	635a      	str	r2, [r3, #52]	@ 0x34
 8006122:	e04c      	b.n	80061be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	2b0c      	cmp	r3, #12
 800612a:	d824      	bhi.n	8006176 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	685a      	ldr	r2, [r3, #4]
 8006136:	4613      	mov	r3, r2
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	4413      	add	r3, r2
 800613c:	3b23      	subs	r3, #35	@ 0x23
 800613e:	221f      	movs	r2, #31
 8006140:	fa02 f303 	lsl.w	r3, r2, r3
 8006144:	43da      	mvns	r2, r3
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	400a      	ands	r2, r1
 800614c:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	b29b      	uxth	r3, r3
 800615a:	4618      	mov	r0, r3
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	685a      	ldr	r2, [r3, #4]
 8006160:	4613      	mov	r3, r2
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	4413      	add	r3, r2
 8006166:	3b23      	subs	r3, #35	@ 0x23
 8006168:	fa00 f203 	lsl.w	r2, r0, r3
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	430a      	orrs	r2, r1
 8006172:	631a      	str	r2, [r3, #48]	@ 0x30
 8006174:	e023      	b.n	80061be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	685a      	ldr	r2, [r3, #4]
 8006180:	4613      	mov	r3, r2
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	4413      	add	r3, r2
 8006186:	3b41      	subs	r3, #65	@ 0x41
 8006188:	221f      	movs	r2, #31
 800618a:	fa02 f303 	lsl.w	r3, r2, r3
 800618e:	43da      	mvns	r2, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	400a      	ands	r2, r1
 8006196:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	4618      	mov	r0, r3
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	685a      	ldr	r2, [r3, #4]
 80061aa:	4613      	mov	r3, r2
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	4413      	add	r3, r2
 80061b0:	3b41      	subs	r3, #65	@ 0x41
 80061b2:	fa00 f203 	lsl.w	r2, r0, r3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	430a      	orrs	r2, r1
 80061bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80061be:	4b29      	ldr	r3, [pc, #164]	@ (8006264 <HAL_ADC_ConfigChannel+0x250>)
 80061c0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a28      	ldr	r2, [pc, #160]	@ (8006268 <HAL_ADC_ConfigChannel+0x254>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d10f      	bne.n	80061ec <HAL_ADC_ConfigChannel+0x1d8>
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2b12      	cmp	r3, #18
 80061d2:	d10b      	bne.n	80061ec <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a1d      	ldr	r2, [pc, #116]	@ (8006268 <HAL_ADC_ConfigChannel+0x254>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d12b      	bne.n	800624e <HAL_ADC_ConfigChannel+0x23a>
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a1c      	ldr	r2, [pc, #112]	@ (800626c <HAL_ADC_ConfigChannel+0x258>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d003      	beq.n	8006208 <HAL_ADC_ConfigChannel+0x1f4>
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	2b11      	cmp	r3, #17
 8006206:	d122      	bne.n	800624e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a11      	ldr	r2, [pc, #68]	@ (800626c <HAL_ADC_ConfigChannel+0x258>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d111      	bne.n	800624e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800622a:	4b11      	ldr	r3, [pc, #68]	@ (8006270 <HAL_ADC_ConfigChannel+0x25c>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a11      	ldr	r2, [pc, #68]	@ (8006274 <HAL_ADC_ConfigChannel+0x260>)
 8006230:	fba2 2303 	umull	r2, r3, r2, r3
 8006234:	0c9a      	lsrs	r2, r3, #18
 8006236:	4613      	mov	r3, r2
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	4413      	add	r3, r2
 800623c:	005b      	lsls	r3, r3, #1
 800623e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006240:	e002      	b.n	8006248 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	3b01      	subs	r3, #1
 8006246:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d1f9      	bne.n	8006242 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006256:	2300      	movs	r3, #0
}
 8006258:	4618      	mov	r0, r3
 800625a:	3714      	adds	r7, #20
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr
 8006264:	40012300 	.word	0x40012300
 8006268:	40012000 	.word	0x40012000
 800626c:	10000012 	.word	0x10000012
 8006270:	20000044 	.word	0x20000044
 8006274:	431bde83 	.word	0x431bde83

08006278 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006278:	b480      	push	{r7}
 800627a:	b085      	sub	sp, #20
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006280:	4b79      	ldr	r3, [pc, #484]	@ (8006468 <ADC_Init+0x1f0>)
 8006282:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	685a      	ldr	r2, [r3, #4]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	431a      	orrs	r2, r3
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	685a      	ldr	r2, [r3, #4]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80062ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	6859      	ldr	r1, [r3, #4]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	021a      	lsls	r2, r3, #8
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	430a      	orrs	r2, r1
 80062c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	685a      	ldr	r2, [r3, #4]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80062d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	6859      	ldr	r1, [r3, #4]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	689a      	ldr	r2, [r3, #8]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	430a      	orrs	r2, r1
 80062e2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	689a      	ldr	r2, [r3, #8]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80062f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	6899      	ldr	r1, [r3, #8]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	68da      	ldr	r2, [r3, #12]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	430a      	orrs	r2, r1
 8006304:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800630a:	4a58      	ldr	r2, [pc, #352]	@ (800646c <ADC_Init+0x1f4>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d022      	beq.n	8006356 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	689a      	ldr	r2, [r3, #8]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800631e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	6899      	ldr	r1, [r3, #8]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	430a      	orrs	r2, r1
 8006330:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	689a      	ldr	r2, [r3, #8]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006340:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	6899      	ldr	r1, [r3, #8]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	430a      	orrs	r2, r1
 8006352:	609a      	str	r2, [r3, #8]
 8006354:	e00f      	b.n	8006376 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	689a      	ldr	r2, [r3, #8]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006364:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	689a      	ldr	r2, [r3, #8]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006374:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	689a      	ldr	r2, [r3, #8]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f022 0202 	bic.w	r2, r2, #2
 8006384:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	6899      	ldr	r1, [r3, #8]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	7e1b      	ldrb	r3, [r3, #24]
 8006390:	005a      	lsls	r2, r3, #1
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	430a      	orrs	r2, r1
 8006398:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d01b      	beq.n	80063dc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	685a      	ldr	r2, [r3, #4]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80063b2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	685a      	ldr	r2, [r3, #4]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80063c2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	6859      	ldr	r1, [r3, #4]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ce:	3b01      	subs	r3, #1
 80063d0:	035a      	lsls	r2, r3, #13
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	430a      	orrs	r2, r1
 80063d8:	605a      	str	r2, [r3, #4]
 80063da:	e007      	b.n	80063ec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	685a      	ldr	r2, [r3, #4]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80063ea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80063fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	69db      	ldr	r3, [r3, #28]
 8006406:	3b01      	subs	r3, #1
 8006408:	051a      	lsls	r2, r3, #20
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	430a      	orrs	r2, r1
 8006410:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	689a      	ldr	r2, [r3, #8]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006420:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	6899      	ldr	r1, [r3, #8]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800642e:	025a      	lsls	r2, r3, #9
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	430a      	orrs	r2, r1
 8006436:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	689a      	ldr	r2, [r3, #8]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006446:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	6899      	ldr	r1, [r3, #8]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	695b      	ldr	r3, [r3, #20]
 8006452:	029a      	lsls	r2, r3, #10
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	430a      	orrs	r2, r1
 800645a:	609a      	str	r2, [r3, #8]
}
 800645c:	bf00      	nop
 800645e:	3714      	adds	r7, #20
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr
 8006468:	40012300 	.word	0x40012300
 800646c:	0f000001 	.word	0x0f000001

08006470 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006470:	b480      	push	{r7}
 8006472:	b083      	sub	sp, #12
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8006478:	bf00      	nop
 800647a:	370c      	adds	r7, #12
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006484:	b480      	push	{r7}
 8006486:	b085      	sub	sp, #20
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f003 0307 	and.w	r3, r3, #7
 8006492:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006494:	4b0c      	ldr	r3, [pc, #48]	@ (80064c8 <__NVIC_SetPriorityGrouping+0x44>)
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800649a:	68ba      	ldr	r2, [r7, #8]
 800649c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80064a0:	4013      	ands	r3, r2
 80064a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80064ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80064b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80064b6:	4a04      	ldr	r2, [pc, #16]	@ (80064c8 <__NVIC_SetPriorityGrouping+0x44>)
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	60d3      	str	r3, [r2, #12]
}
 80064bc:	bf00      	nop
 80064be:	3714      	adds	r7, #20
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr
 80064c8:	e000ed00 	.word	0xe000ed00

080064cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80064cc:	b480      	push	{r7}
 80064ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80064d0:	4b04      	ldr	r3, [pc, #16]	@ (80064e4 <__NVIC_GetPriorityGrouping+0x18>)
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	0a1b      	lsrs	r3, r3, #8
 80064d6:	f003 0307 	and.w	r3, r3, #7
}
 80064da:	4618      	mov	r0, r3
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr
 80064e4:	e000ed00 	.word	0xe000ed00

080064e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	4603      	mov	r3, r0
 80064f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80064f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	db0b      	blt.n	8006512 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80064fa:	79fb      	ldrb	r3, [r7, #7]
 80064fc:	f003 021f 	and.w	r2, r3, #31
 8006500:	4907      	ldr	r1, [pc, #28]	@ (8006520 <__NVIC_EnableIRQ+0x38>)
 8006502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006506:	095b      	lsrs	r3, r3, #5
 8006508:	2001      	movs	r0, #1
 800650a:	fa00 f202 	lsl.w	r2, r0, r2
 800650e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006512:	bf00      	nop
 8006514:	370c      	adds	r7, #12
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr
 800651e:	bf00      	nop
 8006520:	e000e100 	.word	0xe000e100

08006524 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	4603      	mov	r3, r0
 800652c:	6039      	str	r1, [r7, #0]
 800652e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006534:	2b00      	cmp	r3, #0
 8006536:	db0a      	blt.n	800654e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	b2da      	uxtb	r2, r3
 800653c:	490c      	ldr	r1, [pc, #48]	@ (8006570 <__NVIC_SetPriority+0x4c>)
 800653e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006542:	0112      	lsls	r2, r2, #4
 8006544:	b2d2      	uxtb	r2, r2
 8006546:	440b      	add	r3, r1
 8006548:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800654c:	e00a      	b.n	8006564 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	b2da      	uxtb	r2, r3
 8006552:	4908      	ldr	r1, [pc, #32]	@ (8006574 <__NVIC_SetPriority+0x50>)
 8006554:	79fb      	ldrb	r3, [r7, #7]
 8006556:	f003 030f 	and.w	r3, r3, #15
 800655a:	3b04      	subs	r3, #4
 800655c:	0112      	lsls	r2, r2, #4
 800655e:	b2d2      	uxtb	r2, r2
 8006560:	440b      	add	r3, r1
 8006562:	761a      	strb	r2, [r3, #24]
}
 8006564:	bf00      	nop
 8006566:	370c      	adds	r7, #12
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr
 8006570:	e000e100 	.word	0xe000e100
 8006574:	e000ed00 	.word	0xe000ed00

08006578 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006578:	b480      	push	{r7}
 800657a:	b089      	sub	sp, #36	@ 0x24
 800657c:	af00      	add	r7, sp, #0
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f003 0307 	and.w	r3, r3, #7
 800658a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	f1c3 0307 	rsb	r3, r3, #7
 8006592:	2b04      	cmp	r3, #4
 8006594:	bf28      	it	cs
 8006596:	2304      	movcs	r3, #4
 8006598:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	3304      	adds	r3, #4
 800659e:	2b06      	cmp	r3, #6
 80065a0:	d902      	bls.n	80065a8 <NVIC_EncodePriority+0x30>
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	3b03      	subs	r3, #3
 80065a6:	e000      	b.n	80065aa <NVIC_EncodePriority+0x32>
 80065a8:	2300      	movs	r3, #0
 80065aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80065ac:	f04f 32ff 	mov.w	r2, #4294967295
 80065b0:	69bb      	ldr	r3, [r7, #24]
 80065b2:	fa02 f303 	lsl.w	r3, r2, r3
 80065b6:	43da      	mvns	r2, r3
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	401a      	ands	r2, r3
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80065c0:	f04f 31ff 	mov.w	r1, #4294967295
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	fa01 f303 	lsl.w	r3, r1, r3
 80065ca:	43d9      	mvns	r1, r3
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80065d0:	4313      	orrs	r3, r2
         );
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3724      	adds	r7, #36	@ 0x24
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr
	...

080065e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b082      	sub	sp, #8
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	3b01      	subs	r3, #1
 80065ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80065f0:	d301      	bcc.n	80065f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80065f2:	2301      	movs	r3, #1
 80065f4:	e00f      	b.n	8006616 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80065f6:	4a0a      	ldr	r2, [pc, #40]	@ (8006620 <SysTick_Config+0x40>)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	3b01      	subs	r3, #1
 80065fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80065fe:	210f      	movs	r1, #15
 8006600:	f04f 30ff 	mov.w	r0, #4294967295
 8006604:	f7ff ff8e 	bl	8006524 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006608:	4b05      	ldr	r3, [pc, #20]	@ (8006620 <SysTick_Config+0x40>)
 800660a:	2200      	movs	r2, #0
 800660c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800660e:	4b04      	ldr	r3, [pc, #16]	@ (8006620 <SysTick_Config+0x40>)
 8006610:	2207      	movs	r2, #7
 8006612:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	3708      	adds	r7, #8
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	e000e010 	.word	0xe000e010

08006624 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b082      	sub	sp, #8
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f7ff ff29 	bl	8006484 <__NVIC_SetPriorityGrouping>
}
 8006632:	bf00      	nop
 8006634:	3708      	adds	r7, #8
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}

0800663a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800663a:	b580      	push	{r7, lr}
 800663c:	b086      	sub	sp, #24
 800663e:	af00      	add	r7, sp, #0
 8006640:	4603      	mov	r3, r0
 8006642:	60b9      	str	r1, [r7, #8]
 8006644:	607a      	str	r2, [r7, #4]
 8006646:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006648:	2300      	movs	r3, #0
 800664a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800664c:	f7ff ff3e 	bl	80064cc <__NVIC_GetPriorityGrouping>
 8006650:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	68b9      	ldr	r1, [r7, #8]
 8006656:	6978      	ldr	r0, [r7, #20]
 8006658:	f7ff ff8e 	bl	8006578 <NVIC_EncodePriority>
 800665c:	4602      	mov	r2, r0
 800665e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006662:	4611      	mov	r1, r2
 8006664:	4618      	mov	r0, r3
 8006666:	f7ff ff5d 	bl	8006524 <__NVIC_SetPriority>
}
 800666a:	bf00      	nop
 800666c:	3718      	adds	r7, #24
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}

08006672 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006672:	b580      	push	{r7, lr}
 8006674:	b082      	sub	sp, #8
 8006676:	af00      	add	r7, sp, #0
 8006678:	4603      	mov	r3, r0
 800667a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800667c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006680:	4618      	mov	r0, r3
 8006682:	f7ff ff31 	bl	80064e8 <__NVIC_EnableIRQ>
}
 8006686:	bf00      	nop
 8006688:	3708      	adds	r7, #8
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}

0800668e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800668e:	b580      	push	{r7, lr}
 8006690:	b082      	sub	sp, #8
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f7ff ffa2 	bl	80065e0 <SysTick_Config>
 800669c:	4603      	mov	r3, r0
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3708      	adds	r7, #8
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}

080066a6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80066a6:	b580      	push	{r7, lr}
 80066a8:	b084      	sub	sp, #16
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066b2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80066b4:	f7ff fa2a 	bl	8005b0c <HAL_GetTick>
 80066b8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	2b02      	cmp	r3, #2
 80066c4:	d008      	beq.n	80066d8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2280      	movs	r2, #128	@ 0x80
 80066ca:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	e052      	b.n	800677e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f022 0216 	bic.w	r2, r2, #22
 80066e6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	695a      	ldr	r2, [r3, #20]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80066f6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d103      	bne.n	8006708 <HAL_DMA_Abort+0x62>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006704:	2b00      	cmp	r3, #0
 8006706:	d007      	beq.n	8006718 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f022 0208 	bic.w	r2, r2, #8
 8006716:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f022 0201 	bic.w	r2, r2, #1
 8006726:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006728:	e013      	b.n	8006752 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800672a:	f7ff f9ef 	bl	8005b0c <HAL_GetTick>
 800672e:	4602      	mov	r2, r0
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	1ad3      	subs	r3, r2, r3
 8006734:	2b05      	cmp	r3, #5
 8006736:	d90c      	bls.n	8006752 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2220      	movs	r2, #32
 800673c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2203      	movs	r2, #3
 8006742:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800674e:	2303      	movs	r3, #3
 8006750:	e015      	b.n	800677e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f003 0301 	and.w	r3, r3, #1
 800675c:	2b00      	cmp	r3, #0
 800675e:	d1e4      	bne.n	800672a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006764:	223f      	movs	r2, #63	@ 0x3f
 8006766:	409a      	lsls	r2, r3
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800677c:	2300      	movs	r3, #0
}
 800677e:	4618      	mov	r0, r3
 8006780:	3710      	adds	r7, #16
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}

08006786 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006786:	b480      	push	{r7}
 8006788:	b083      	sub	sp, #12
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006794:	b2db      	uxtb	r3, r3
 8006796:	2b02      	cmp	r3, #2
 8006798:	d004      	beq.n	80067a4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2280      	movs	r2, #128	@ 0x80
 800679e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	e00c      	b.n	80067be <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2205      	movs	r2, #5
 80067a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f022 0201 	bic.w	r2, r2, #1
 80067ba:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80067bc:	2300      	movs	r3, #0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	370c      	adds	r7, #12
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr
	...

080067cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b089      	sub	sp, #36	@ 0x24
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80067d6:	2300      	movs	r3, #0
 80067d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80067da:	2300      	movs	r3, #0
 80067dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80067de:	2300      	movs	r3, #0
 80067e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80067e2:	2300      	movs	r3, #0
 80067e4:	61fb      	str	r3, [r7, #28]
 80067e6:	e165      	b.n	8006ab4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80067e8:	2201      	movs	r2, #1
 80067ea:	69fb      	ldr	r3, [r7, #28]
 80067ec:	fa02 f303 	lsl.w	r3, r2, r3
 80067f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	697a      	ldr	r2, [r7, #20]
 80067f8:	4013      	ands	r3, r2
 80067fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80067fc:	693a      	ldr	r2, [r7, #16]
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	429a      	cmp	r2, r3
 8006802:	f040 8154 	bne.w	8006aae <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	f003 0303 	and.w	r3, r3, #3
 800680e:	2b01      	cmp	r3, #1
 8006810:	d005      	beq.n	800681e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800681a:	2b02      	cmp	r3, #2
 800681c:	d130      	bne.n	8006880 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	005b      	lsls	r3, r3, #1
 8006828:	2203      	movs	r2, #3
 800682a:	fa02 f303 	lsl.w	r3, r2, r3
 800682e:	43db      	mvns	r3, r3
 8006830:	69ba      	ldr	r2, [r7, #24]
 8006832:	4013      	ands	r3, r2
 8006834:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	68da      	ldr	r2, [r3, #12]
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	005b      	lsls	r3, r3, #1
 800683e:	fa02 f303 	lsl.w	r3, r2, r3
 8006842:	69ba      	ldr	r2, [r7, #24]
 8006844:	4313      	orrs	r3, r2
 8006846:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	69ba      	ldr	r2, [r7, #24]
 800684c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006854:	2201      	movs	r2, #1
 8006856:	69fb      	ldr	r3, [r7, #28]
 8006858:	fa02 f303 	lsl.w	r3, r2, r3
 800685c:	43db      	mvns	r3, r3
 800685e:	69ba      	ldr	r2, [r7, #24]
 8006860:	4013      	ands	r3, r2
 8006862:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	091b      	lsrs	r3, r3, #4
 800686a:	f003 0201 	and.w	r2, r3, #1
 800686e:	69fb      	ldr	r3, [r7, #28]
 8006870:	fa02 f303 	lsl.w	r3, r2, r3
 8006874:	69ba      	ldr	r2, [r7, #24]
 8006876:	4313      	orrs	r3, r2
 8006878:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	69ba      	ldr	r2, [r7, #24]
 800687e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	f003 0303 	and.w	r3, r3, #3
 8006888:	2b03      	cmp	r3, #3
 800688a:	d017      	beq.n	80068bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	005b      	lsls	r3, r3, #1
 8006896:	2203      	movs	r2, #3
 8006898:	fa02 f303 	lsl.w	r3, r2, r3
 800689c:	43db      	mvns	r3, r3
 800689e:	69ba      	ldr	r2, [r7, #24]
 80068a0:	4013      	ands	r3, r2
 80068a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	689a      	ldr	r2, [r3, #8]
 80068a8:	69fb      	ldr	r3, [r7, #28]
 80068aa:	005b      	lsls	r3, r3, #1
 80068ac:	fa02 f303 	lsl.w	r3, r2, r3
 80068b0:	69ba      	ldr	r2, [r7, #24]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	69ba      	ldr	r2, [r7, #24]
 80068ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	f003 0303 	and.w	r3, r3, #3
 80068c4:	2b02      	cmp	r3, #2
 80068c6:	d123      	bne.n	8006910 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	08da      	lsrs	r2, r3, #3
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	3208      	adds	r2, #8
 80068d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80068d6:	69fb      	ldr	r3, [r7, #28]
 80068d8:	f003 0307 	and.w	r3, r3, #7
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	220f      	movs	r2, #15
 80068e0:	fa02 f303 	lsl.w	r3, r2, r3
 80068e4:	43db      	mvns	r3, r3
 80068e6:	69ba      	ldr	r2, [r7, #24]
 80068e8:	4013      	ands	r3, r2
 80068ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	691a      	ldr	r2, [r3, #16]
 80068f0:	69fb      	ldr	r3, [r7, #28]
 80068f2:	f003 0307 	and.w	r3, r3, #7
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	fa02 f303 	lsl.w	r3, r2, r3
 80068fc:	69ba      	ldr	r2, [r7, #24]
 80068fe:	4313      	orrs	r3, r2
 8006900:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006902:	69fb      	ldr	r3, [r7, #28]
 8006904:	08da      	lsrs	r2, r3, #3
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	3208      	adds	r2, #8
 800690a:	69b9      	ldr	r1, [r7, #24]
 800690c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	005b      	lsls	r3, r3, #1
 800691a:	2203      	movs	r2, #3
 800691c:	fa02 f303 	lsl.w	r3, r2, r3
 8006920:	43db      	mvns	r3, r3
 8006922:	69ba      	ldr	r2, [r7, #24]
 8006924:	4013      	ands	r3, r2
 8006926:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	f003 0203 	and.w	r2, r3, #3
 8006930:	69fb      	ldr	r3, [r7, #28]
 8006932:	005b      	lsls	r3, r3, #1
 8006934:	fa02 f303 	lsl.w	r3, r2, r3
 8006938:	69ba      	ldr	r2, [r7, #24]
 800693a:	4313      	orrs	r3, r2
 800693c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	69ba      	ldr	r2, [r7, #24]
 8006942:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800694c:	2b00      	cmp	r3, #0
 800694e:	f000 80ae 	beq.w	8006aae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006952:	2300      	movs	r3, #0
 8006954:	60fb      	str	r3, [r7, #12]
 8006956:	4b5d      	ldr	r3, [pc, #372]	@ (8006acc <HAL_GPIO_Init+0x300>)
 8006958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800695a:	4a5c      	ldr	r2, [pc, #368]	@ (8006acc <HAL_GPIO_Init+0x300>)
 800695c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006960:	6453      	str	r3, [r2, #68]	@ 0x44
 8006962:	4b5a      	ldr	r3, [pc, #360]	@ (8006acc <HAL_GPIO_Init+0x300>)
 8006964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006966:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800696a:	60fb      	str	r3, [r7, #12]
 800696c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800696e:	4a58      	ldr	r2, [pc, #352]	@ (8006ad0 <HAL_GPIO_Init+0x304>)
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	089b      	lsrs	r3, r3, #2
 8006974:	3302      	adds	r3, #2
 8006976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800697a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800697c:	69fb      	ldr	r3, [r7, #28]
 800697e:	f003 0303 	and.w	r3, r3, #3
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	220f      	movs	r2, #15
 8006986:	fa02 f303 	lsl.w	r3, r2, r3
 800698a:	43db      	mvns	r3, r3
 800698c:	69ba      	ldr	r2, [r7, #24]
 800698e:	4013      	ands	r3, r2
 8006990:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4a4f      	ldr	r2, [pc, #316]	@ (8006ad4 <HAL_GPIO_Init+0x308>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d025      	beq.n	80069e6 <HAL_GPIO_Init+0x21a>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4a4e      	ldr	r2, [pc, #312]	@ (8006ad8 <HAL_GPIO_Init+0x30c>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d01f      	beq.n	80069e2 <HAL_GPIO_Init+0x216>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4a4d      	ldr	r2, [pc, #308]	@ (8006adc <HAL_GPIO_Init+0x310>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d019      	beq.n	80069de <HAL_GPIO_Init+0x212>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4a4c      	ldr	r2, [pc, #304]	@ (8006ae0 <HAL_GPIO_Init+0x314>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d013      	beq.n	80069da <HAL_GPIO_Init+0x20e>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4a4b      	ldr	r2, [pc, #300]	@ (8006ae4 <HAL_GPIO_Init+0x318>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d00d      	beq.n	80069d6 <HAL_GPIO_Init+0x20a>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	4a4a      	ldr	r2, [pc, #296]	@ (8006ae8 <HAL_GPIO_Init+0x31c>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d007      	beq.n	80069d2 <HAL_GPIO_Init+0x206>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4a49      	ldr	r2, [pc, #292]	@ (8006aec <HAL_GPIO_Init+0x320>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d101      	bne.n	80069ce <HAL_GPIO_Init+0x202>
 80069ca:	2306      	movs	r3, #6
 80069cc:	e00c      	b.n	80069e8 <HAL_GPIO_Init+0x21c>
 80069ce:	2307      	movs	r3, #7
 80069d0:	e00a      	b.n	80069e8 <HAL_GPIO_Init+0x21c>
 80069d2:	2305      	movs	r3, #5
 80069d4:	e008      	b.n	80069e8 <HAL_GPIO_Init+0x21c>
 80069d6:	2304      	movs	r3, #4
 80069d8:	e006      	b.n	80069e8 <HAL_GPIO_Init+0x21c>
 80069da:	2303      	movs	r3, #3
 80069dc:	e004      	b.n	80069e8 <HAL_GPIO_Init+0x21c>
 80069de:	2302      	movs	r3, #2
 80069e0:	e002      	b.n	80069e8 <HAL_GPIO_Init+0x21c>
 80069e2:	2301      	movs	r3, #1
 80069e4:	e000      	b.n	80069e8 <HAL_GPIO_Init+0x21c>
 80069e6:	2300      	movs	r3, #0
 80069e8:	69fa      	ldr	r2, [r7, #28]
 80069ea:	f002 0203 	and.w	r2, r2, #3
 80069ee:	0092      	lsls	r2, r2, #2
 80069f0:	4093      	lsls	r3, r2
 80069f2:	69ba      	ldr	r2, [r7, #24]
 80069f4:	4313      	orrs	r3, r2
 80069f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80069f8:	4935      	ldr	r1, [pc, #212]	@ (8006ad0 <HAL_GPIO_Init+0x304>)
 80069fa:	69fb      	ldr	r3, [r7, #28]
 80069fc:	089b      	lsrs	r3, r3, #2
 80069fe:	3302      	adds	r3, #2
 8006a00:	69ba      	ldr	r2, [r7, #24]
 8006a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006a06:	4b3a      	ldr	r3, [pc, #232]	@ (8006af0 <HAL_GPIO_Init+0x324>)
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	43db      	mvns	r3, r3
 8006a10:	69ba      	ldr	r2, [r7, #24]
 8006a12:	4013      	ands	r3, r2
 8006a14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d003      	beq.n	8006a2a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8006a22:	69ba      	ldr	r2, [r7, #24]
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006a2a:	4a31      	ldr	r2, [pc, #196]	@ (8006af0 <HAL_GPIO_Init+0x324>)
 8006a2c:	69bb      	ldr	r3, [r7, #24]
 8006a2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006a30:	4b2f      	ldr	r3, [pc, #188]	@ (8006af0 <HAL_GPIO_Init+0x324>)
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	43db      	mvns	r3, r3
 8006a3a:	69ba      	ldr	r2, [r7, #24]
 8006a3c:	4013      	ands	r3, r2
 8006a3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d003      	beq.n	8006a54 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8006a4c:	69ba      	ldr	r2, [r7, #24]
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	4313      	orrs	r3, r2
 8006a52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006a54:	4a26      	ldr	r2, [pc, #152]	@ (8006af0 <HAL_GPIO_Init+0x324>)
 8006a56:	69bb      	ldr	r3, [r7, #24]
 8006a58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006a5a:	4b25      	ldr	r3, [pc, #148]	@ (8006af0 <HAL_GPIO_Init+0x324>)
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	43db      	mvns	r3, r3
 8006a64:	69ba      	ldr	r2, [r7, #24]
 8006a66:	4013      	ands	r3, r2
 8006a68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d003      	beq.n	8006a7e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8006a76:	69ba      	ldr	r2, [r7, #24]
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006a7e:	4a1c      	ldr	r2, [pc, #112]	@ (8006af0 <HAL_GPIO_Init+0x324>)
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006a84:	4b1a      	ldr	r3, [pc, #104]	@ (8006af0 <HAL_GPIO_Init+0x324>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	43db      	mvns	r3, r3
 8006a8e:	69ba      	ldr	r2, [r7, #24]
 8006a90:	4013      	ands	r3, r2
 8006a92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d003      	beq.n	8006aa8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006aa0:	69ba      	ldr	r2, [r7, #24]
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006aa8:	4a11      	ldr	r2, [pc, #68]	@ (8006af0 <HAL_GPIO_Init+0x324>)
 8006aaa:	69bb      	ldr	r3, [r7, #24]
 8006aac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006aae:	69fb      	ldr	r3, [r7, #28]
 8006ab0:	3301      	adds	r3, #1
 8006ab2:	61fb      	str	r3, [r7, #28]
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	2b0f      	cmp	r3, #15
 8006ab8:	f67f ae96 	bls.w	80067e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006abc:	bf00      	nop
 8006abe:	bf00      	nop
 8006ac0:	3724      	adds	r7, #36	@ 0x24
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr
 8006aca:	bf00      	nop
 8006acc:	40023800 	.word	0x40023800
 8006ad0:	40013800 	.word	0x40013800
 8006ad4:	40020000 	.word	0x40020000
 8006ad8:	40020400 	.word	0x40020400
 8006adc:	40020800 	.word	0x40020800
 8006ae0:	40020c00 	.word	0x40020c00
 8006ae4:	40021000 	.word	0x40021000
 8006ae8:	40021400 	.word	0x40021400
 8006aec:	40021800 	.word	0x40021800
 8006af0:	40013c00 	.word	0x40013c00

08006af4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b085      	sub	sp, #20
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	460b      	mov	r3, r1
 8006afe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	691a      	ldr	r2, [r3, #16]
 8006b04:	887b      	ldrh	r3, [r7, #2]
 8006b06:	4013      	ands	r3, r2
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d002      	beq.n	8006b12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	73fb      	strb	r3, [r7, #15]
 8006b10:	e001      	b.n	8006b16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006b12:	2300      	movs	r3, #0
 8006b14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3714      	adds	r7, #20
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b083      	sub	sp, #12
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	460b      	mov	r3, r1
 8006b2e:	807b      	strh	r3, [r7, #2]
 8006b30:	4613      	mov	r3, r2
 8006b32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006b34:	787b      	ldrb	r3, [r7, #1]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d003      	beq.n	8006b42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006b3a:	887a      	ldrh	r2, [r7, #2]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006b40:	e003      	b.n	8006b4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006b42:	887b      	ldrh	r3, [r7, #2]
 8006b44:	041a      	lsls	r2, r3, #16
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	619a      	str	r2, [r3, #24]
}
 8006b4a:	bf00      	nop
 8006b4c:	370c      	adds	r7, #12
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr

08006b56 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006b56:	b480      	push	{r7}
 8006b58:	b085      	sub	sp, #20
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
 8006b5e:	460b      	mov	r3, r1
 8006b60:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	695b      	ldr	r3, [r3, #20]
 8006b66:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006b68:	887a      	ldrh	r2, [r7, #2]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	4013      	ands	r3, r2
 8006b6e:	041a      	lsls	r2, r3, #16
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	43d9      	mvns	r1, r3
 8006b74:	887b      	ldrh	r3, [r7, #2]
 8006b76:	400b      	ands	r3, r1
 8006b78:	431a      	orrs	r2, r3
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	619a      	str	r2, [r3, #24]
}
 8006b7e:	bf00      	nop
 8006b80:	3714      	adds	r7, #20
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr
	...

08006b8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b084      	sub	sp, #16
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d101      	bne.n	8006b9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e12b      	b.n	8006df6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d106      	bne.n	8006bb8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f7fe fb92 	bl	80052dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2224      	movs	r2, #36	@ 0x24
 8006bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f022 0201 	bic.w	r2, r2, #1
 8006bce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006bde:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006bee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006bf0:	f001 fcf2 	bl	80085d8 <HAL_RCC_GetPCLK1Freq>
 8006bf4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	4a81      	ldr	r2, [pc, #516]	@ (8006e00 <HAL_I2C_Init+0x274>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d807      	bhi.n	8006c10 <HAL_I2C_Init+0x84>
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	4a80      	ldr	r2, [pc, #512]	@ (8006e04 <HAL_I2C_Init+0x278>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	bf94      	ite	ls
 8006c08:	2301      	movls	r3, #1
 8006c0a:	2300      	movhi	r3, #0
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	e006      	b.n	8006c1e <HAL_I2C_Init+0x92>
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	4a7d      	ldr	r2, [pc, #500]	@ (8006e08 <HAL_I2C_Init+0x27c>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	bf94      	ite	ls
 8006c18:	2301      	movls	r3, #1
 8006c1a:	2300      	movhi	r3, #0
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d001      	beq.n	8006c26 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	e0e7      	b.n	8006df6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	4a78      	ldr	r2, [pc, #480]	@ (8006e0c <HAL_I2C_Init+0x280>)
 8006c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c2e:	0c9b      	lsrs	r3, r3, #18
 8006c30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	68ba      	ldr	r2, [r7, #8]
 8006c42:	430a      	orrs	r2, r1
 8006c44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	6a1b      	ldr	r3, [r3, #32]
 8006c4c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	4a6a      	ldr	r2, [pc, #424]	@ (8006e00 <HAL_I2C_Init+0x274>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d802      	bhi.n	8006c60 <HAL_I2C_Init+0xd4>
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	3301      	adds	r3, #1
 8006c5e:	e009      	b.n	8006c74 <HAL_I2C_Init+0xe8>
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006c66:	fb02 f303 	mul.w	r3, r2, r3
 8006c6a:	4a69      	ldr	r2, [pc, #420]	@ (8006e10 <HAL_I2C_Init+0x284>)
 8006c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c70:	099b      	lsrs	r3, r3, #6
 8006c72:	3301      	adds	r3, #1
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	6812      	ldr	r2, [r2, #0]
 8006c78:	430b      	orrs	r3, r1
 8006c7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	69db      	ldr	r3, [r3, #28]
 8006c82:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006c86:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	495c      	ldr	r1, [pc, #368]	@ (8006e00 <HAL_I2C_Init+0x274>)
 8006c90:	428b      	cmp	r3, r1
 8006c92:	d819      	bhi.n	8006cc8 <HAL_I2C_Init+0x13c>
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	1e59      	subs	r1, r3, #1
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	005b      	lsls	r3, r3, #1
 8006c9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006ca2:	1c59      	adds	r1, r3, #1
 8006ca4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006ca8:	400b      	ands	r3, r1
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d00a      	beq.n	8006cc4 <HAL_I2C_Init+0x138>
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	1e59      	subs	r1, r3, #1
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	005b      	lsls	r3, r3, #1
 8006cb8:	fbb1 f3f3 	udiv	r3, r1, r3
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006cc2:	e051      	b.n	8006d68 <HAL_I2C_Init+0x1dc>
 8006cc4:	2304      	movs	r3, #4
 8006cc6:	e04f      	b.n	8006d68 <HAL_I2C_Init+0x1dc>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d111      	bne.n	8006cf4 <HAL_I2C_Init+0x168>
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	1e58      	subs	r0, r3, #1
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6859      	ldr	r1, [r3, #4]
 8006cd8:	460b      	mov	r3, r1
 8006cda:	005b      	lsls	r3, r3, #1
 8006cdc:	440b      	add	r3, r1
 8006cde:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	bf0c      	ite	eq
 8006cec:	2301      	moveq	r3, #1
 8006cee:	2300      	movne	r3, #0
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	e012      	b.n	8006d1a <HAL_I2C_Init+0x18e>
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	1e58      	subs	r0, r3, #1
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6859      	ldr	r1, [r3, #4]
 8006cfc:	460b      	mov	r3, r1
 8006cfe:	009b      	lsls	r3, r3, #2
 8006d00:	440b      	add	r3, r1
 8006d02:	0099      	lsls	r1, r3, #2
 8006d04:	440b      	add	r3, r1
 8006d06:	fbb0 f3f3 	udiv	r3, r0, r3
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	bf0c      	ite	eq
 8006d14:	2301      	moveq	r3, #1
 8006d16:	2300      	movne	r3, #0
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d001      	beq.n	8006d22 <HAL_I2C_Init+0x196>
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e022      	b.n	8006d68 <HAL_I2C_Init+0x1dc>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d10e      	bne.n	8006d48 <HAL_I2C_Init+0x1bc>
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	1e58      	subs	r0, r3, #1
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6859      	ldr	r1, [r3, #4]
 8006d32:	460b      	mov	r3, r1
 8006d34:	005b      	lsls	r3, r3, #1
 8006d36:	440b      	add	r3, r1
 8006d38:	fbb0 f3f3 	udiv	r3, r0, r3
 8006d3c:	3301      	adds	r3, #1
 8006d3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d46:	e00f      	b.n	8006d68 <HAL_I2C_Init+0x1dc>
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	1e58      	subs	r0, r3, #1
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6859      	ldr	r1, [r3, #4]
 8006d50:	460b      	mov	r3, r1
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	440b      	add	r3, r1
 8006d56:	0099      	lsls	r1, r3, #2
 8006d58:	440b      	add	r3, r1
 8006d5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006d5e:	3301      	adds	r3, #1
 8006d60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d64:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006d68:	6879      	ldr	r1, [r7, #4]
 8006d6a:	6809      	ldr	r1, [r1, #0]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	69da      	ldr	r2, [r3, #28]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a1b      	ldr	r3, [r3, #32]
 8006d82:	431a      	orrs	r2, r3
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	430a      	orrs	r2, r1
 8006d8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006d96:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	6911      	ldr	r1, [r2, #16]
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	68d2      	ldr	r2, [r2, #12]
 8006da2:	4311      	orrs	r1, r2
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	6812      	ldr	r2, [r2, #0]
 8006da8:	430b      	orrs	r3, r1
 8006daa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	695a      	ldr	r2, [r3, #20]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	699b      	ldr	r3, [r3, #24]
 8006dbe:	431a      	orrs	r2, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	430a      	orrs	r2, r1
 8006dc6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f042 0201 	orr.w	r2, r2, #1
 8006dd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2220      	movs	r2, #32
 8006de2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3710      	adds	r7, #16
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	000186a0 	.word	0x000186a0
 8006e04:	001e847f 	.word	0x001e847f
 8006e08:	003d08ff 	.word	0x003d08ff
 8006e0c:	431bde83 	.word	0x431bde83
 8006e10:	10624dd3 	.word	0x10624dd3

08006e14 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b088      	sub	sp, #32
 8006e18:	af02      	add	r7, sp, #8
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	607a      	str	r2, [r7, #4]
 8006e1e:	461a      	mov	r2, r3
 8006e20:	460b      	mov	r3, r1
 8006e22:	817b      	strh	r3, [r7, #10]
 8006e24:	4613      	mov	r3, r2
 8006e26:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006e28:	f7fe fe70 	bl	8005b0c <HAL_GetTick>
 8006e2c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	2b20      	cmp	r3, #32
 8006e38:	f040 80e0 	bne.w	8006ffc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	9300      	str	r3, [sp, #0]
 8006e40:	2319      	movs	r3, #25
 8006e42:	2201      	movs	r2, #1
 8006e44:	4970      	ldr	r1, [pc, #448]	@ (8007008 <HAL_I2C_Master_Transmit+0x1f4>)
 8006e46:	68f8      	ldr	r0, [r7, #12]
 8006e48:	f001 f8f6 	bl	8008038 <I2C_WaitOnFlagUntilTimeout>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d001      	beq.n	8006e56 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006e52:	2302      	movs	r3, #2
 8006e54:	e0d3      	b.n	8006ffe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d101      	bne.n	8006e64 <HAL_I2C_Master_Transmit+0x50>
 8006e60:	2302      	movs	r3, #2
 8006e62:	e0cc      	b.n	8006ffe <HAL_I2C_Master_Transmit+0x1ea>
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f003 0301 	and.w	r3, r3, #1
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d007      	beq.n	8006e8a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f042 0201 	orr.w	r2, r2, #1
 8006e88:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006e98:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2221      	movs	r2, #33	@ 0x21
 8006e9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2210      	movs	r2, #16
 8006ea6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2200      	movs	r2, #0
 8006eae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	893a      	ldrh	r2, [r7, #8]
 8006eba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ec0:	b29a      	uxth	r2, r3
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	4a50      	ldr	r2, [pc, #320]	@ (800700c <HAL_I2C_Master_Transmit+0x1f8>)
 8006eca:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006ecc:	8979      	ldrh	r1, [r7, #10]
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	6a3a      	ldr	r2, [r7, #32]
 8006ed2:	68f8      	ldr	r0, [r7, #12]
 8006ed4:	f000 fde2 	bl	8007a9c <I2C_MasterRequestWrite>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d001      	beq.n	8006ee2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e08d      	b.n	8006ffe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	613b      	str	r3, [r7, #16]
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	695b      	ldr	r3, [r3, #20]
 8006eec:	613b      	str	r3, [r7, #16]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	699b      	ldr	r3, [r3, #24]
 8006ef4:	613b      	str	r3, [r7, #16]
 8006ef6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006ef8:	e066      	b.n	8006fc8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006efa:	697a      	ldr	r2, [r7, #20]
 8006efc:	6a39      	ldr	r1, [r7, #32]
 8006efe:	68f8      	ldr	r0, [r7, #12]
 8006f00:	f001 f970 	bl	80081e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006f04:	4603      	mov	r3, r0
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d00d      	beq.n	8006f26 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f0e:	2b04      	cmp	r3, #4
 8006f10:	d107      	bne.n	8006f22 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f20:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	e06b      	b.n	8006ffe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f2a:	781a      	ldrb	r2, [r3, #0]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f36:	1c5a      	adds	r2, r3, #1
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	3b01      	subs	r3, #1
 8006f44:	b29a      	uxth	r2, r3
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f4e:	3b01      	subs	r3, #1
 8006f50:	b29a      	uxth	r2, r3
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	695b      	ldr	r3, [r3, #20]
 8006f5c:	f003 0304 	and.w	r3, r3, #4
 8006f60:	2b04      	cmp	r3, #4
 8006f62:	d11b      	bne.n	8006f9c <HAL_I2C_Master_Transmit+0x188>
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d017      	beq.n	8006f9c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f70:	781a      	ldrb	r2, [r3, #0]
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f7c:	1c5a      	adds	r2, r3, #1
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	3b01      	subs	r3, #1
 8006f8a:	b29a      	uxth	r2, r3
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f94:	3b01      	subs	r3, #1
 8006f96:	b29a      	uxth	r2, r3
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f9c:	697a      	ldr	r2, [r7, #20]
 8006f9e:	6a39      	ldr	r1, [r7, #32]
 8006fa0:	68f8      	ldr	r0, [r7, #12]
 8006fa2:	f001 f960 	bl	8008266 <I2C_WaitOnBTFFlagUntilTimeout>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d00d      	beq.n	8006fc8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fb0:	2b04      	cmp	r3, #4
 8006fb2:	d107      	bne.n	8006fc4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006fc2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	e01a      	b.n	8006ffe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d194      	bne.n	8006efa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006fde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2220      	movs	r2, #32
 8006fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	e000      	b.n	8006ffe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006ffc:	2302      	movs	r3, #2
  }
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3718      	adds	r7, #24
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop
 8007008:	00100002 	.word	0x00100002
 800700c:	ffff0000 	.word	0xffff0000

08007010 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b08c      	sub	sp, #48	@ 0x30
 8007014:	af02      	add	r7, sp, #8
 8007016:	60f8      	str	r0, [r7, #12]
 8007018:	607a      	str	r2, [r7, #4]
 800701a:	461a      	mov	r2, r3
 800701c:	460b      	mov	r3, r1
 800701e:	817b      	strh	r3, [r7, #10]
 8007020:	4613      	mov	r3, r2
 8007022:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007024:	f7fe fd72 	bl	8005b0c <HAL_GetTick>
 8007028:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007030:	b2db      	uxtb	r3, r3
 8007032:	2b20      	cmp	r3, #32
 8007034:	f040 820b 	bne.w	800744e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800703a:	9300      	str	r3, [sp, #0]
 800703c:	2319      	movs	r3, #25
 800703e:	2201      	movs	r2, #1
 8007040:	497c      	ldr	r1, [pc, #496]	@ (8007234 <HAL_I2C_Master_Receive+0x224>)
 8007042:	68f8      	ldr	r0, [r7, #12]
 8007044:	f000 fff8 	bl	8008038 <I2C_WaitOnFlagUntilTimeout>
 8007048:	4603      	mov	r3, r0
 800704a:	2b00      	cmp	r3, #0
 800704c:	d001      	beq.n	8007052 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800704e:	2302      	movs	r3, #2
 8007050:	e1fe      	b.n	8007450 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007058:	2b01      	cmp	r3, #1
 800705a:	d101      	bne.n	8007060 <HAL_I2C_Master_Receive+0x50>
 800705c:	2302      	movs	r3, #2
 800705e:	e1f7      	b.n	8007450 <HAL_I2C_Master_Receive+0x440>
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f003 0301 	and.w	r3, r3, #1
 8007072:	2b01      	cmp	r3, #1
 8007074:	d007      	beq.n	8007086 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f042 0201 	orr.w	r2, r2, #1
 8007084:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007094:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2222      	movs	r2, #34	@ 0x22
 800709a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2210      	movs	r2, #16
 80070a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2200      	movs	r2, #0
 80070aa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	893a      	ldrh	r2, [r7, #8]
 80070b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070bc:	b29a      	uxth	r2, r3
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	4a5c      	ldr	r2, [pc, #368]	@ (8007238 <HAL_I2C_Master_Receive+0x228>)
 80070c6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80070c8:	8979      	ldrh	r1, [r7, #10]
 80070ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070ce:	68f8      	ldr	r0, [r7, #12]
 80070d0:	f000 fd66 	bl	8007ba0 <I2C_MasterRequestRead>
 80070d4:	4603      	mov	r3, r0
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d001      	beq.n	80070de <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80070da:	2301      	movs	r3, #1
 80070dc:	e1b8      	b.n	8007450 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d113      	bne.n	800710e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070e6:	2300      	movs	r3, #0
 80070e8:	623b      	str	r3, [r7, #32]
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	695b      	ldr	r3, [r3, #20]
 80070f0:	623b      	str	r3, [r7, #32]
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	699b      	ldr	r3, [r3, #24]
 80070f8:	623b      	str	r3, [r7, #32]
 80070fa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800710a:	601a      	str	r2, [r3, #0]
 800710c:	e18c      	b.n	8007428 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007112:	2b01      	cmp	r3, #1
 8007114:	d11b      	bne.n	800714e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007124:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007126:	2300      	movs	r3, #0
 8007128:	61fb      	str	r3, [r7, #28]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	695b      	ldr	r3, [r3, #20]
 8007130:	61fb      	str	r3, [r7, #28]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	699b      	ldr	r3, [r3, #24]
 8007138:	61fb      	str	r3, [r7, #28]
 800713a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800714a:	601a      	str	r2, [r3, #0]
 800714c:	e16c      	b.n	8007428 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007152:	2b02      	cmp	r3, #2
 8007154:	d11b      	bne.n	800718e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007164:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007174:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007176:	2300      	movs	r3, #0
 8007178:	61bb      	str	r3, [r7, #24]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	695b      	ldr	r3, [r3, #20]
 8007180:	61bb      	str	r3, [r7, #24]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	699b      	ldr	r3, [r3, #24]
 8007188:	61bb      	str	r3, [r7, #24]
 800718a:	69bb      	ldr	r3, [r7, #24]
 800718c:	e14c      	b.n	8007428 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800719c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800719e:	2300      	movs	r3, #0
 80071a0:	617b      	str	r3, [r7, #20]
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	695b      	ldr	r3, [r3, #20]
 80071a8:	617b      	str	r3, [r7, #20]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	699b      	ldr	r3, [r3, #24]
 80071b0:	617b      	str	r3, [r7, #20]
 80071b2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80071b4:	e138      	b.n	8007428 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071ba:	2b03      	cmp	r3, #3
 80071bc:	f200 80f1 	bhi.w	80073a2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d123      	bne.n	8007210 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80071c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071ca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80071cc:	68f8      	ldr	r0, [r7, #12]
 80071ce:	f001 f88b 	bl	80082e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80071d2:	4603      	mov	r3, r0
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d001      	beq.n	80071dc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	e139      	b.n	8007450 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	691a      	ldr	r2, [r3, #16]
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071e6:	b2d2      	uxtb	r2, r2
 80071e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071ee:	1c5a      	adds	r2, r3, #1
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071f8:	3b01      	subs	r3, #1
 80071fa:	b29a      	uxth	r2, r3
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007204:	b29b      	uxth	r3, r3
 8007206:	3b01      	subs	r3, #1
 8007208:	b29a      	uxth	r2, r3
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800720e:	e10b      	b.n	8007428 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007214:	2b02      	cmp	r3, #2
 8007216:	d14e      	bne.n	80072b6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800721a:	9300      	str	r3, [sp, #0]
 800721c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800721e:	2200      	movs	r2, #0
 8007220:	4906      	ldr	r1, [pc, #24]	@ (800723c <HAL_I2C_Master_Receive+0x22c>)
 8007222:	68f8      	ldr	r0, [r7, #12]
 8007224:	f000 ff08 	bl	8008038 <I2C_WaitOnFlagUntilTimeout>
 8007228:	4603      	mov	r3, r0
 800722a:	2b00      	cmp	r3, #0
 800722c:	d008      	beq.n	8007240 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	e10e      	b.n	8007450 <HAL_I2C_Master_Receive+0x440>
 8007232:	bf00      	nop
 8007234:	00100002 	.word	0x00100002
 8007238:	ffff0000 	.word	0xffff0000
 800723c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800724e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	691a      	ldr	r2, [r3, #16]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800725a:	b2d2      	uxtb	r2, r2
 800725c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007262:	1c5a      	adds	r2, r3, #1
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800726c:	3b01      	subs	r3, #1
 800726e:	b29a      	uxth	r2, r3
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007278:	b29b      	uxth	r3, r3
 800727a:	3b01      	subs	r3, #1
 800727c:	b29a      	uxth	r2, r3
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	691a      	ldr	r2, [r3, #16]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800728c:	b2d2      	uxtb	r2, r2
 800728e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007294:	1c5a      	adds	r2, r3, #1
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800729e:	3b01      	subs	r3, #1
 80072a0:	b29a      	uxth	r2, r3
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	3b01      	subs	r3, #1
 80072ae:	b29a      	uxth	r2, r3
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80072b4:	e0b8      	b.n	8007428 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80072b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b8:	9300      	str	r3, [sp, #0]
 80072ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072bc:	2200      	movs	r2, #0
 80072be:	4966      	ldr	r1, [pc, #408]	@ (8007458 <HAL_I2C_Master_Receive+0x448>)
 80072c0:	68f8      	ldr	r0, [r7, #12]
 80072c2:	f000 feb9 	bl	8008038 <I2C_WaitOnFlagUntilTimeout>
 80072c6:	4603      	mov	r3, r0
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d001      	beq.n	80072d0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80072cc:	2301      	movs	r3, #1
 80072ce:	e0bf      	b.n	8007450 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	681a      	ldr	r2, [r3, #0]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80072de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	691a      	ldr	r2, [r3, #16]
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ea:	b2d2      	uxtb	r2, r2
 80072ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072f2:	1c5a      	adds	r2, r3, #1
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072fc:	3b01      	subs	r3, #1
 80072fe:	b29a      	uxth	r2, r3
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007308:	b29b      	uxth	r3, r3
 800730a:	3b01      	subs	r3, #1
 800730c:	b29a      	uxth	r2, r3
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007314:	9300      	str	r3, [sp, #0]
 8007316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007318:	2200      	movs	r2, #0
 800731a:	494f      	ldr	r1, [pc, #316]	@ (8007458 <HAL_I2C_Master_Receive+0x448>)
 800731c:	68f8      	ldr	r0, [r7, #12]
 800731e:	f000 fe8b 	bl	8008038 <I2C_WaitOnFlagUntilTimeout>
 8007322:	4603      	mov	r3, r0
 8007324:	2b00      	cmp	r3, #0
 8007326:	d001      	beq.n	800732c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8007328:	2301      	movs	r3, #1
 800732a:	e091      	b.n	8007450 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800733a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	691a      	ldr	r2, [r3, #16]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007346:	b2d2      	uxtb	r2, r2
 8007348:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800734e:	1c5a      	adds	r2, r3, #1
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007358:	3b01      	subs	r3, #1
 800735a:	b29a      	uxth	r2, r3
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007364:	b29b      	uxth	r3, r3
 8007366:	3b01      	subs	r3, #1
 8007368:	b29a      	uxth	r2, r3
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	691a      	ldr	r2, [r3, #16]
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007378:	b2d2      	uxtb	r2, r2
 800737a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007380:	1c5a      	adds	r2, r3, #1
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800738a:	3b01      	subs	r3, #1
 800738c:	b29a      	uxth	r2, r3
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007396:	b29b      	uxth	r3, r3
 8007398:	3b01      	subs	r3, #1
 800739a:	b29a      	uxth	r2, r3
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80073a0:	e042      	b.n	8007428 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80073a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073a4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80073a6:	68f8      	ldr	r0, [r7, #12]
 80073a8:	f000 ff9e 	bl	80082e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80073ac:	4603      	mov	r3, r0
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d001      	beq.n	80073b6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80073b2:	2301      	movs	r3, #1
 80073b4:	e04c      	b.n	8007450 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	691a      	ldr	r2, [r3, #16]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073c0:	b2d2      	uxtb	r2, r2
 80073c2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073c8:	1c5a      	adds	r2, r3, #1
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073d2:	3b01      	subs	r3, #1
 80073d4:	b29a      	uxth	r2, r3
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073de:	b29b      	uxth	r3, r3
 80073e0:	3b01      	subs	r3, #1
 80073e2:	b29a      	uxth	r2, r3
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	695b      	ldr	r3, [r3, #20]
 80073ee:	f003 0304 	and.w	r3, r3, #4
 80073f2:	2b04      	cmp	r3, #4
 80073f4:	d118      	bne.n	8007428 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	691a      	ldr	r2, [r3, #16]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007400:	b2d2      	uxtb	r2, r2
 8007402:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007408:	1c5a      	adds	r2, r3, #1
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007412:	3b01      	subs	r3, #1
 8007414:	b29a      	uxth	r2, r3
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800741e:	b29b      	uxth	r3, r3
 8007420:	3b01      	subs	r3, #1
 8007422:	b29a      	uxth	r2, r3
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800742c:	2b00      	cmp	r3, #0
 800742e:	f47f aec2 	bne.w	80071b6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2220      	movs	r2, #32
 8007436:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2200      	movs	r2, #0
 800743e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2200      	movs	r2, #0
 8007446:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800744a:	2300      	movs	r3, #0
 800744c:	e000      	b.n	8007450 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800744e:	2302      	movs	r3, #2
  }
}
 8007450:	4618      	mov	r0, r3
 8007452:	3728      	adds	r7, #40	@ 0x28
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}
 8007458:	00010004 	.word	0x00010004

0800745c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b088      	sub	sp, #32
 8007460:	af02      	add	r7, sp, #8
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	4608      	mov	r0, r1
 8007466:	4611      	mov	r1, r2
 8007468:	461a      	mov	r2, r3
 800746a:	4603      	mov	r3, r0
 800746c:	817b      	strh	r3, [r7, #10]
 800746e:	460b      	mov	r3, r1
 8007470:	813b      	strh	r3, [r7, #8]
 8007472:	4613      	mov	r3, r2
 8007474:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007476:	f7fe fb49 	bl	8005b0c <HAL_GetTick>
 800747a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007482:	b2db      	uxtb	r3, r3
 8007484:	2b20      	cmp	r3, #32
 8007486:	f040 80d9 	bne.w	800763c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	9300      	str	r3, [sp, #0]
 800748e:	2319      	movs	r3, #25
 8007490:	2201      	movs	r2, #1
 8007492:	496d      	ldr	r1, [pc, #436]	@ (8007648 <HAL_I2C_Mem_Write+0x1ec>)
 8007494:	68f8      	ldr	r0, [r7, #12]
 8007496:	f000 fdcf 	bl	8008038 <I2C_WaitOnFlagUntilTimeout>
 800749a:	4603      	mov	r3, r0
 800749c:	2b00      	cmp	r3, #0
 800749e:	d001      	beq.n	80074a4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80074a0:	2302      	movs	r3, #2
 80074a2:	e0cc      	b.n	800763e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d101      	bne.n	80074b2 <HAL_I2C_Mem_Write+0x56>
 80074ae:	2302      	movs	r3, #2
 80074b0:	e0c5      	b.n	800763e <HAL_I2C_Mem_Write+0x1e2>
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2201      	movs	r2, #1
 80074b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f003 0301 	and.w	r3, r3, #1
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d007      	beq.n	80074d8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f042 0201 	orr.w	r2, r2, #1
 80074d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80074e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2221      	movs	r2, #33	@ 0x21
 80074ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2240      	movs	r2, #64	@ 0x40
 80074f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2200      	movs	r2, #0
 80074fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	6a3a      	ldr	r2, [r7, #32]
 8007502:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007508:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800750e:	b29a      	uxth	r2, r3
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	4a4d      	ldr	r2, [pc, #308]	@ (800764c <HAL_I2C_Mem_Write+0x1f0>)
 8007518:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800751a:	88f8      	ldrh	r0, [r7, #6]
 800751c:	893a      	ldrh	r2, [r7, #8]
 800751e:	8979      	ldrh	r1, [r7, #10]
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	9301      	str	r3, [sp, #4]
 8007524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007526:	9300      	str	r3, [sp, #0]
 8007528:	4603      	mov	r3, r0
 800752a:	68f8      	ldr	r0, [r7, #12]
 800752c:	f000 fc06 	bl	8007d3c <I2C_RequestMemoryWrite>
 8007530:	4603      	mov	r3, r0
 8007532:	2b00      	cmp	r3, #0
 8007534:	d052      	beq.n	80075dc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007536:	2301      	movs	r3, #1
 8007538:	e081      	b.n	800763e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800753a:	697a      	ldr	r2, [r7, #20]
 800753c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800753e:	68f8      	ldr	r0, [r7, #12]
 8007540:	f000 fe50 	bl	80081e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007544:	4603      	mov	r3, r0
 8007546:	2b00      	cmp	r3, #0
 8007548:	d00d      	beq.n	8007566 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800754e:	2b04      	cmp	r3, #4
 8007550:	d107      	bne.n	8007562 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007560:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	e06b      	b.n	800763e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800756a:	781a      	ldrb	r2, [r3, #0]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007576:	1c5a      	adds	r2, r3, #1
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007580:	3b01      	subs	r3, #1
 8007582:	b29a      	uxth	r2, r3
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800758c:	b29b      	uxth	r3, r3
 800758e:	3b01      	subs	r3, #1
 8007590:	b29a      	uxth	r2, r3
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	695b      	ldr	r3, [r3, #20]
 800759c:	f003 0304 	and.w	r3, r3, #4
 80075a0:	2b04      	cmp	r3, #4
 80075a2:	d11b      	bne.n	80075dc <HAL_I2C_Mem_Write+0x180>
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d017      	beq.n	80075dc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075b0:	781a      	ldrb	r2, [r3, #0]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075bc:	1c5a      	adds	r2, r3, #1
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075c6:	3b01      	subs	r3, #1
 80075c8:	b29a      	uxth	r2, r3
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	3b01      	subs	r3, #1
 80075d6:	b29a      	uxth	r2, r3
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d1aa      	bne.n	800753a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80075e4:	697a      	ldr	r2, [r7, #20]
 80075e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80075e8:	68f8      	ldr	r0, [r7, #12]
 80075ea:	f000 fe3c 	bl	8008266 <I2C_WaitOnBTFFlagUntilTimeout>
 80075ee:	4603      	mov	r3, r0
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d00d      	beq.n	8007610 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075f8:	2b04      	cmp	r3, #4
 80075fa:	d107      	bne.n	800760c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800760a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	e016      	b.n	800763e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800761e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2220      	movs	r2, #32
 8007624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2200      	movs	r2, #0
 800762c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2200      	movs	r2, #0
 8007634:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007638:	2300      	movs	r3, #0
 800763a:	e000      	b.n	800763e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800763c:	2302      	movs	r3, #2
  }
}
 800763e:	4618      	mov	r0, r3
 8007640:	3718      	adds	r7, #24
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	00100002 	.word	0x00100002
 800764c:	ffff0000 	.word	0xffff0000

08007650 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b08c      	sub	sp, #48	@ 0x30
 8007654:	af02      	add	r7, sp, #8
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	4608      	mov	r0, r1
 800765a:	4611      	mov	r1, r2
 800765c:	461a      	mov	r2, r3
 800765e:	4603      	mov	r3, r0
 8007660:	817b      	strh	r3, [r7, #10]
 8007662:	460b      	mov	r3, r1
 8007664:	813b      	strh	r3, [r7, #8]
 8007666:	4613      	mov	r3, r2
 8007668:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800766a:	f7fe fa4f 	bl	8005b0c <HAL_GetTick>
 800766e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007676:	b2db      	uxtb	r3, r3
 8007678:	2b20      	cmp	r3, #32
 800767a:	f040 8208 	bne.w	8007a8e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800767e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007680:	9300      	str	r3, [sp, #0]
 8007682:	2319      	movs	r3, #25
 8007684:	2201      	movs	r2, #1
 8007686:	497b      	ldr	r1, [pc, #492]	@ (8007874 <HAL_I2C_Mem_Read+0x224>)
 8007688:	68f8      	ldr	r0, [r7, #12]
 800768a:	f000 fcd5 	bl	8008038 <I2C_WaitOnFlagUntilTimeout>
 800768e:	4603      	mov	r3, r0
 8007690:	2b00      	cmp	r3, #0
 8007692:	d001      	beq.n	8007698 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007694:	2302      	movs	r3, #2
 8007696:	e1fb      	b.n	8007a90 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d101      	bne.n	80076a6 <HAL_I2C_Mem_Read+0x56>
 80076a2:	2302      	movs	r3, #2
 80076a4:	e1f4      	b.n	8007a90 <HAL_I2C_Mem_Read+0x440>
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2201      	movs	r2, #1
 80076aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f003 0301 	and.w	r3, r3, #1
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d007      	beq.n	80076cc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f042 0201 	orr.w	r2, r2, #1
 80076ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80076da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2222      	movs	r2, #34	@ 0x22
 80076e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2240      	movs	r2, #64	@ 0x40
 80076e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2200      	movs	r2, #0
 80076f0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80076fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007702:	b29a      	uxth	r2, r3
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	4a5b      	ldr	r2, [pc, #364]	@ (8007878 <HAL_I2C_Mem_Read+0x228>)
 800770c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800770e:	88f8      	ldrh	r0, [r7, #6]
 8007710:	893a      	ldrh	r2, [r7, #8]
 8007712:	8979      	ldrh	r1, [r7, #10]
 8007714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007716:	9301      	str	r3, [sp, #4]
 8007718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800771a:	9300      	str	r3, [sp, #0]
 800771c:	4603      	mov	r3, r0
 800771e:	68f8      	ldr	r0, [r7, #12]
 8007720:	f000 fba2 	bl	8007e68 <I2C_RequestMemoryRead>
 8007724:	4603      	mov	r3, r0
 8007726:	2b00      	cmp	r3, #0
 8007728:	d001      	beq.n	800772e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800772a:	2301      	movs	r3, #1
 800772c:	e1b0      	b.n	8007a90 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007732:	2b00      	cmp	r3, #0
 8007734:	d113      	bne.n	800775e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007736:	2300      	movs	r3, #0
 8007738:	623b      	str	r3, [r7, #32]
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	695b      	ldr	r3, [r3, #20]
 8007740:	623b      	str	r3, [r7, #32]
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	699b      	ldr	r3, [r3, #24]
 8007748:	623b      	str	r3, [r7, #32]
 800774a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800775a:	601a      	str	r2, [r3, #0]
 800775c:	e184      	b.n	8007a68 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007762:	2b01      	cmp	r3, #1
 8007764:	d11b      	bne.n	800779e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007774:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007776:	2300      	movs	r3, #0
 8007778:	61fb      	str	r3, [r7, #28]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	695b      	ldr	r3, [r3, #20]
 8007780:	61fb      	str	r3, [r7, #28]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	699b      	ldr	r3, [r3, #24]
 8007788:	61fb      	str	r3, [r7, #28]
 800778a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	681a      	ldr	r2, [r3, #0]
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800779a:	601a      	str	r2, [r3, #0]
 800779c:	e164      	b.n	8007a68 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077a2:	2b02      	cmp	r3, #2
 80077a4:	d11b      	bne.n	80077de <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80077b4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	681a      	ldr	r2, [r3, #0]
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80077c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077c6:	2300      	movs	r3, #0
 80077c8:	61bb      	str	r3, [r7, #24]
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	695b      	ldr	r3, [r3, #20]
 80077d0:	61bb      	str	r3, [r7, #24]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	699b      	ldr	r3, [r3, #24]
 80077d8:	61bb      	str	r3, [r7, #24]
 80077da:	69bb      	ldr	r3, [r7, #24]
 80077dc:	e144      	b.n	8007a68 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077de:	2300      	movs	r3, #0
 80077e0:	617b      	str	r3, [r7, #20]
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	695b      	ldr	r3, [r3, #20]
 80077e8:	617b      	str	r3, [r7, #20]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	699b      	ldr	r3, [r3, #24]
 80077f0:	617b      	str	r3, [r7, #20]
 80077f2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80077f4:	e138      	b.n	8007a68 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077fa:	2b03      	cmp	r3, #3
 80077fc:	f200 80f1 	bhi.w	80079e2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007804:	2b01      	cmp	r3, #1
 8007806:	d123      	bne.n	8007850 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007808:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800780a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800780c:	68f8      	ldr	r0, [r7, #12]
 800780e:	f000 fd6b 	bl	80082e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007812:	4603      	mov	r3, r0
 8007814:	2b00      	cmp	r3, #0
 8007816:	d001      	beq.n	800781c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007818:	2301      	movs	r3, #1
 800781a:	e139      	b.n	8007a90 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	691a      	ldr	r2, [r3, #16]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007826:	b2d2      	uxtb	r2, r2
 8007828:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800782e:	1c5a      	adds	r2, r3, #1
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007838:	3b01      	subs	r3, #1
 800783a:	b29a      	uxth	r2, r3
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007844:	b29b      	uxth	r3, r3
 8007846:	3b01      	subs	r3, #1
 8007848:	b29a      	uxth	r2, r3
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800784e:	e10b      	b.n	8007a68 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007854:	2b02      	cmp	r3, #2
 8007856:	d14e      	bne.n	80078f6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800785a:	9300      	str	r3, [sp, #0]
 800785c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800785e:	2200      	movs	r2, #0
 8007860:	4906      	ldr	r1, [pc, #24]	@ (800787c <HAL_I2C_Mem_Read+0x22c>)
 8007862:	68f8      	ldr	r0, [r7, #12]
 8007864:	f000 fbe8 	bl	8008038 <I2C_WaitOnFlagUntilTimeout>
 8007868:	4603      	mov	r3, r0
 800786a:	2b00      	cmp	r3, #0
 800786c:	d008      	beq.n	8007880 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800786e:	2301      	movs	r3, #1
 8007870:	e10e      	b.n	8007a90 <HAL_I2C_Mem_Read+0x440>
 8007872:	bf00      	nop
 8007874:	00100002 	.word	0x00100002
 8007878:	ffff0000 	.word	0xffff0000
 800787c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	681a      	ldr	r2, [r3, #0]
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800788e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	691a      	ldr	r2, [r3, #16]
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800789a:	b2d2      	uxtb	r2, r2
 800789c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078a2:	1c5a      	adds	r2, r3, #1
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078ac:	3b01      	subs	r3, #1
 80078ae:	b29a      	uxth	r2, r3
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	3b01      	subs	r3, #1
 80078bc:	b29a      	uxth	r2, r3
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	691a      	ldr	r2, [r3, #16]
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078cc:	b2d2      	uxtb	r2, r2
 80078ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078d4:	1c5a      	adds	r2, r3, #1
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078de:	3b01      	subs	r3, #1
 80078e0:	b29a      	uxth	r2, r3
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	3b01      	subs	r3, #1
 80078ee:	b29a      	uxth	r2, r3
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80078f4:	e0b8      	b.n	8007a68 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80078f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078f8:	9300      	str	r3, [sp, #0]
 80078fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078fc:	2200      	movs	r2, #0
 80078fe:	4966      	ldr	r1, [pc, #408]	@ (8007a98 <HAL_I2C_Mem_Read+0x448>)
 8007900:	68f8      	ldr	r0, [r7, #12]
 8007902:	f000 fb99 	bl	8008038 <I2C_WaitOnFlagUntilTimeout>
 8007906:	4603      	mov	r3, r0
 8007908:	2b00      	cmp	r3, #0
 800790a:	d001      	beq.n	8007910 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800790c:	2301      	movs	r3, #1
 800790e:	e0bf      	b.n	8007a90 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	681a      	ldr	r2, [r3, #0]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800791e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	691a      	ldr	r2, [r3, #16]
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800792a:	b2d2      	uxtb	r2, r2
 800792c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007932:	1c5a      	adds	r2, r3, #1
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800793c:	3b01      	subs	r3, #1
 800793e:	b29a      	uxth	r2, r3
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007948:	b29b      	uxth	r3, r3
 800794a:	3b01      	subs	r3, #1
 800794c:	b29a      	uxth	r2, r3
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007954:	9300      	str	r3, [sp, #0]
 8007956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007958:	2200      	movs	r2, #0
 800795a:	494f      	ldr	r1, [pc, #316]	@ (8007a98 <HAL_I2C_Mem_Read+0x448>)
 800795c:	68f8      	ldr	r0, [r7, #12]
 800795e:	f000 fb6b 	bl	8008038 <I2C_WaitOnFlagUntilTimeout>
 8007962:	4603      	mov	r3, r0
 8007964:	2b00      	cmp	r3, #0
 8007966:	d001      	beq.n	800796c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007968:	2301      	movs	r3, #1
 800796a:	e091      	b.n	8007a90 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800797a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	691a      	ldr	r2, [r3, #16]
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007986:	b2d2      	uxtb	r2, r2
 8007988:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800798e:	1c5a      	adds	r2, r3, #1
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007998:	3b01      	subs	r3, #1
 800799a:	b29a      	uxth	r2, r3
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	3b01      	subs	r3, #1
 80079a8:	b29a      	uxth	r2, r3
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	691a      	ldr	r2, [r3, #16]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079b8:	b2d2      	uxtb	r2, r2
 80079ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079c0:	1c5a      	adds	r2, r3, #1
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079ca:	3b01      	subs	r3, #1
 80079cc:	b29a      	uxth	r2, r3
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	3b01      	subs	r3, #1
 80079da:	b29a      	uxth	r2, r3
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80079e0:	e042      	b.n	8007a68 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80079e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079e4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80079e6:	68f8      	ldr	r0, [r7, #12]
 80079e8:	f000 fc7e 	bl	80082e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80079ec:	4603      	mov	r3, r0
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d001      	beq.n	80079f6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80079f2:	2301      	movs	r3, #1
 80079f4:	e04c      	b.n	8007a90 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	691a      	ldr	r2, [r3, #16]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a00:	b2d2      	uxtb	r2, r2
 8007a02:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a08:	1c5a      	adds	r2, r3, #1
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a12:	3b01      	subs	r3, #1
 8007a14:	b29a      	uxth	r2, r3
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	3b01      	subs	r3, #1
 8007a22:	b29a      	uxth	r2, r3
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	695b      	ldr	r3, [r3, #20]
 8007a2e:	f003 0304 	and.w	r3, r3, #4
 8007a32:	2b04      	cmp	r3, #4
 8007a34:	d118      	bne.n	8007a68 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	691a      	ldr	r2, [r3, #16]
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a40:	b2d2      	uxtb	r2, r2
 8007a42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a48:	1c5a      	adds	r2, r3, #1
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a52:	3b01      	subs	r3, #1
 8007a54:	b29a      	uxth	r2, r3
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	3b01      	subs	r3, #1
 8007a62:	b29a      	uxth	r2, r3
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	f47f aec2 	bne.w	80077f6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2220      	movs	r2, #32
 8007a76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2200      	movs	r2, #0
 8007a86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	e000      	b.n	8007a90 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007a8e:	2302      	movs	r3, #2
  }
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3728      	adds	r7, #40	@ 0x28
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}
 8007a98:	00010004 	.word	0x00010004

08007a9c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b088      	sub	sp, #32
 8007aa0:	af02      	add	r7, sp, #8
 8007aa2:	60f8      	str	r0, [r7, #12]
 8007aa4:	607a      	str	r2, [r7, #4]
 8007aa6:	603b      	str	r3, [r7, #0]
 8007aa8:	460b      	mov	r3, r1
 8007aaa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ab0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	2b08      	cmp	r3, #8
 8007ab6:	d006      	beq.n	8007ac6 <I2C_MasterRequestWrite+0x2a>
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	2b01      	cmp	r3, #1
 8007abc:	d003      	beq.n	8007ac6 <I2C_MasterRequestWrite+0x2a>
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007ac4:	d108      	bne.n	8007ad8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007ad4:	601a      	str	r2, [r3, #0]
 8007ad6:	e00b      	b.n	8007af0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007adc:	2b12      	cmp	r3, #18
 8007ade:	d107      	bne.n	8007af0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007aee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	9300      	str	r3, [sp, #0]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2200      	movs	r2, #0
 8007af8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007afc:	68f8      	ldr	r0, [r7, #12]
 8007afe:	f000 fa9b 	bl	8008038 <I2C_WaitOnFlagUntilTimeout>
 8007b02:	4603      	mov	r3, r0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d00d      	beq.n	8007b24 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b16:	d103      	bne.n	8007b20 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007b1e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007b20:	2303      	movs	r3, #3
 8007b22:	e035      	b.n	8007b90 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	691b      	ldr	r3, [r3, #16]
 8007b28:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007b2c:	d108      	bne.n	8007b40 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007b2e:	897b      	ldrh	r3, [r7, #10]
 8007b30:	b2db      	uxtb	r3, r3
 8007b32:	461a      	mov	r2, r3
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007b3c:	611a      	str	r2, [r3, #16]
 8007b3e:	e01b      	b.n	8007b78 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007b40:	897b      	ldrh	r3, [r7, #10]
 8007b42:	11db      	asrs	r3, r3, #7
 8007b44:	b2db      	uxtb	r3, r3
 8007b46:	f003 0306 	and.w	r3, r3, #6
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	f063 030f 	orn	r3, r3, #15
 8007b50:	b2da      	uxtb	r2, r3
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	490e      	ldr	r1, [pc, #56]	@ (8007b98 <I2C_MasterRequestWrite+0xfc>)
 8007b5e:	68f8      	ldr	r0, [r7, #12]
 8007b60:	f000 fac1 	bl	80080e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007b64:	4603      	mov	r3, r0
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d001      	beq.n	8007b6e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	e010      	b.n	8007b90 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007b6e:	897b      	ldrh	r3, [r7, #10]
 8007b70:	b2da      	uxtb	r2, r3
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	687a      	ldr	r2, [r7, #4]
 8007b7c:	4907      	ldr	r1, [pc, #28]	@ (8007b9c <I2C_MasterRequestWrite+0x100>)
 8007b7e:	68f8      	ldr	r0, [r7, #12]
 8007b80:	f000 fab1 	bl	80080e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007b84:	4603      	mov	r3, r0
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d001      	beq.n	8007b8e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	e000      	b.n	8007b90 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007b8e:	2300      	movs	r3, #0
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3718      	adds	r7, #24
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	00010008 	.word	0x00010008
 8007b9c:	00010002 	.word	0x00010002

08007ba0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b088      	sub	sp, #32
 8007ba4:	af02      	add	r7, sp, #8
 8007ba6:	60f8      	str	r0, [r7, #12]
 8007ba8:	607a      	str	r2, [r7, #4]
 8007baa:	603b      	str	r3, [r7, #0]
 8007bac:	460b      	mov	r3, r1
 8007bae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bb4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007bc4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	2b08      	cmp	r3, #8
 8007bca:	d006      	beq.n	8007bda <I2C_MasterRequestRead+0x3a>
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	2b01      	cmp	r3, #1
 8007bd0:	d003      	beq.n	8007bda <I2C_MasterRequestRead+0x3a>
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007bd8:	d108      	bne.n	8007bec <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007be8:	601a      	str	r2, [r3, #0]
 8007bea:	e00b      	b.n	8007c04 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bf0:	2b11      	cmp	r3, #17
 8007bf2:	d107      	bne.n	8007c04 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007c02:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	9300      	str	r3, [sp, #0]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007c10:	68f8      	ldr	r0, [r7, #12]
 8007c12:	f000 fa11 	bl	8008038 <I2C_WaitOnFlagUntilTimeout>
 8007c16:	4603      	mov	r3, r0
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d00d      	beq.n	8007c38 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c2a:	d103      	bne.n	8007c34 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007c32:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007c34:	2303      	movs	r3, #3
 8007c36:	e079      	b.n	8007d2c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	691b      	ldr	r3, [r3, #16]
 8007c3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007c40:	d108      	bne.n	8007c54 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007c42:	897b      	ldrh	r3, [r7, #10]
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	f043 0301 	orr.w	r3, r3, #1
 8007c4a:	b2da      	uxtb	r2, r3
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	611a      	str	r2, [r3, #16]
 8007c52:	e05f      	b.n	8007d14 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007c54:	897b      	ldrh	r3, [r7, #10]
 8007c56:	11db      	asrs	r3, r3, #7
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	f003 0306 	and.w	r3, r3, #6
 8007c5e:	b2db      	uxtb	r3, r3
 8007c60:	f063 030f 	orn	r3, r3, #15
 8007c64:	b2da      	uxtb	r2, r3
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	4930      	ldr	r1, [pc, #192]	@ (8007d34 <I2C_MasterRequestRead+0x194>)
 8007c72:	68f8      	ldr	r0, [r7, #12]
 8007c74:	f000 fa37 	bl	80080e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d001      	beq.n	8007c82 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e054      	b.n	8007d2c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007c82:	897b      	ldrh	r3, [r7, #10]
 8007c84:	b2da      	uxtb	r2, r3
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	4929      	ldr	r1, [pc, #164]	@ (8007d38 <I2C_MasterRequestRead+0x198>)
 8007c92:	68f8      	ldr	r0, [r7, #12]
 8007c94:	f000 fa27 	bl	80080e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d001      	beq.n	8007ca2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	e044      	b.n	8007d2c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	613b      	str	r3, [r7, #16]
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	695b      	ldr	r3, [r3, #20]
 8007cac:	613b      	str	r3, [r7, #16]
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	699b      	ldr	r3, [r3, #24]
 8007cb4:	613b      	str	r3, [r7, #16]
 8007cb6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	681a      	ldr	r2, [r3, #0]
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007cc6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	9300      	str	r3, [sp, #0]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007cd4:	68f8      	ldr	r0, [r7, #12]
 8007cd6:	f000 f9af 	bl	8008038 <I2C_WaitOnFlagUntilTimeout>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d00d      	beq.n	8007cfc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007cee:	d103      	bne.n	8007cf8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007cf6:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8007cf8:	2303      	movs	r3, #3
 8007cfa:	e017      	b.n	8007d2c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007cfc:	897b      	ldrh	r3, [r7, #10]
 8007cfe:	11db      	asrs	r3, r3, #7
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	f003 0306 	and.w	r3, r3, #6
 8007d06:	b2db      	uxtb	r3, r3
 8007d08:	f063 030e 	orn	r3, r3, #14
 8007d0c:	b2da      	uxtb	r2, r3
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	4907      	ldr	r1, [pc, #28]	@ (8007d38 <I2C_MasterRequestRead+0x198>)
 8007d1a:	68f8      	ldr	r0, [r7, #12]
 8007d1c:	f000 f9e3 	bl	80080e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007d20:	4603      	mov	r3, r0
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d001      	beq.n	8007d2a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8007d26:	2301      	movs	r3, #1
 8007d28:	e000      	b.n	8007d2c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8007d2a:	2300      	movs	r3, #0
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3718      	adds	r7, #24
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}
 8007d34:	00010008 	.word	0x00010008
 8007d38:	00010002 	.word	0x00010002

08007d3c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b088      	sub	sp, #32
 8007d40:	af02      	add	r7, sp, #8
 8007d42:	60f8      	str	r0, [r7, #12]
 8007d44:	4608      	mov	r0, r1
 8007d46:	4611      	mov	r1, r2
 8007d48:	461a      	mov	r2, r3
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	817b      	strh	r3, [r7, #10]
 8007d4e:	460b      	mov	r3, r1
 8007d50:	813b      	strh	r3, [r7, #8]
 8007d52:	4613      	mov	r3, r2
 8007d54:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	681a      	ldr	r2, [r3, #0]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007d64:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d68:	9300      	str	r3, [sp, #0]
 8007d6a:	6a3b      	ldr	r3, [r7, #32]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007d72:	68f8      	ldr	r0, [r7, #12]
 8007d74:	f000 f960 	bl	8008038 <I2C_WaitOnFlagUntilTimeout>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d00d      	beq.n	8007d9a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d8c:	d103      	bne.n	8007d96 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007d94:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007d96:	2303      	movs	r3, #3
 8007d98:	e05f      	b.n	8007e5a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007d9a:	897b      	ldrh	r3, [r7, #10]
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	461a      	mov	r2, r3
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007da8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dac:	6a3a      	ldr	r2, [r7, #32]
 8007dae:	492d      	ldr	r1, [pc, #180]	@ (8007e64 <I2C_RequestMemoryWrite+0x128>)
 8007db0:	68f8      	ldr	r0, [r7, #12]
 8007db2:	f000 f998 	bl	80080e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007db6:	4603      	mov	r3, r0
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d001      	beq.n	8007dc0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	e04c      	b.n	8007e5a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	617b      	str	r3, [r7, #20]
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	695b      	ldr	r3, [r3, #20]
 8007dca:	617b      	str	r3, [r7, #20]
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	699b      	ldr	r3, [r3, #24]
 8007dd2:	617b      	str	r3, [r7, #20]
 8007dd4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007dd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007dd8:	6a39      	ldr	r1, [r7, #32]
 8007dda:	68f8      	ldr	r0, [r7, #12]
 8007ddc:	f000 fa02 	bl	80081e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007de0:	4603      	mov	r3, r0
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d00d      	beq.n	8007e02 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dea:	2b04      	cmp	r3, #4
 8007dec:	d107      	bne.n	8007dfe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	681a      	ldr	r2, [r3, #0]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007dfc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e02b      	b.n	8007e5a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007e02:	88fb      	ldrh	r3, [r7, #6]
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d105      	bne.n	8007e14 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007e08:	893b      	ldrh	r3, [r7, #8]
 8007e0a:	b2da      	uxtb	r2, r3
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	611a      	str	r2, [r3, #16]
 8007e12:	e021      	b.n	8007e58 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007e14:	893b      	ldrh	r3, [r7, #8]
 8007e16:	0a1b      	lsrs	r3, r3, #8
 8007e18:	b29b      	uxth	r3, r3
 8007e1a:	b2da      	uxtb	r2, r3
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e24:	6a39      	ldr	r1, [r7, #32]
 8007e26:	68f8      	ldr	r0, [r7, #12]
 8007e28:	f000 f9dc 	bl	80081e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d00d      	beq.n	8007e4e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e36:	2b04      	cmp	r3, #4
 8007e38:	d107      	bne.n	8007e4a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	681a      	ldr	r2, [r3, #0]
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007e48:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	e005      	b.n	8007e5a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007e4e:	893b      	ldrh	r3, [r7, #8]
 8007e50:	b2da      	uxtb	r2, r3
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007e58:	2300      	movs	r3, #0
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3718      	adds	r7, #24
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	bf00      	nop
 8007e64:	00010002 	.word	0x00010002

08007e68 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b088      	sub	sp, #32
 8007e6c:	af02      	add	r7, sp, #8
 8007e6e:	60f8      	str	r0, [r7, #12]
 8007e70:	4608      	mov	r0, r1
 8007e72:	4611      	mov	r1, r2
 8007e74:	461a      	mov	r2, r3
 8007e76:	4603      	mov	r3, r0
 8007e78:	817b      	strh	r3, [r7, #10]
 8007e7a:	460b      	mov	r3, r1
 8007e7c:	813b      	strh	r3, [r7, #8]
 8007e7e:	4613      	mov	r3, r2
 8007e80:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	681a      	ldr	r2, [r3, #0]
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007e90:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	681a      	ldr	r2, [r3, #0]
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007ea0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ea4:	9300      	str	r3, [sp, #0]
 8007ea6:	6a3b      	ldr	r3, [r7, #32]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007eae:	68f8      	ldr	r0, [r7, #12]
 8007eb0:	f000 f8c2 	bl	8008038 <I2C_WaitOnFlagUntilTimeout>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d00d      	beq.n	8007ed6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ec4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ec8:	d103      	bne.n	8007ed2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007ed0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007ed2:	2303      	movs	r3, #3
 8007ed4:	e0aa      	b.n	800802c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007ed6:	897b      	ldrh	r3, [r7, #10]
 8007ed8:	b2db      	uxtb	r3, r3
 8007eda:	461a      	mov	r2, r3
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007ee4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee8:	6a3a      	ldr	r2, [r7, #32]
 8007eea:	4952      	ldr	r1, [pc, #328]	@ (8008034 <I2C_RequestMemoryRead+0x1cc>)
 8007eec:	68f8      	ldr	r0, [r7, #12]
 8007eee:	f000 f8fa 	bl	80080e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d001      	beq.n	8007efc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007ef8:	2301      	movs	r3, #1
 8007efa:	e097      	b.n	800802c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007efc:	2300      	movs	r3, #0
 8007efe:	617b      	str	r3, [r7, #20]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	695b      	ldr	r3, [r3, #20]
 8007f06:	617b      	str	r3, [r7, #20]
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	699b      	ldr	r3, [r3, #24]
 8007f0e:	617b      	str	r3, [r7, #20]
 8007f10:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f14:	6a39      	ldr	r1, [r7, #32]
 8007f16:	68f8      	ldr	r0, [r7, #12]
 8007f18:	f000 f964 	bl	80081e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d00d      	beq.n	8007f3e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f26:	2b04      	cmp	r3, #4
 8007f28:	d107      	bne.n	8007f3a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	681a      	ldr	r2, [r3, #0]
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007f38:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	e076      	b.n	800802c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007f3e:	88fb      	ldrh	r3, [r7, #6]
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d105      	bne.n	8007f50 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007f44:	893b      	ldrh	r3, [r7, #8]
 8007f46:	b2da      	uxtb	r2, r3
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	611a      	str	r2, [r3, #16]
 8007f4e:	e021      	b.n	8007f94 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007f50:	893b      	ldrh	r3, [r7, #8]
 8007f52:	0a1b      	lsrs	r3, r3, #8
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	b2da      	uxtb	r2, r3
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f60:	6a39      	ldr	r1, [r7, #32]
 8007f62:	68f8      	ldr	r0, [r7, #12]
 8007f64:	f000 f93e 	bl	80081e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d00d      	beq.n	8007f8a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f72:	2b04      	cmp	r3, #4
 8007f74:	d107      	bne.n	8007f86 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	681a      	ldr	r2, [r3, #0]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007f84:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007f86:	2301      	movs	r3, #1
 8007f88:	e050      	b.n	800802c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007f8a:	893b      	ldrh	r3, [r7, #8]
 8007f8c:	b2da      	uxtb	r2, r3
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f96:	6a39      	ldr	r1, [r7, #32]
 8007f98:	68f8      	ldr	r0, [r7, #12]
 8007f9a:	f000 f923 	bl	80081e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d00d      	beq.n	8007fc0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fa8:	2b04      	cmp	r3, #4
 8007faa:	d107      	bne.n	8007fbc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	681a      	ldr	r2, [r3, #0]
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007fba:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	e035      	b.n	800802c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	681a      	ldr	r2, [r3, #0]
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007fce:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fd2:	9300      	str	r3, [sp, #0]
 8007fd4:	6a3b      	ldr	r3, [r7, #32]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007fdc:	68f8      	ldr	r0, [r7, #12]
 8007fde:	f000 f82b 	bl	8008038 <I2C_WaitOnFlagUntilTimeout>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d00d      	beq.n	8008004 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ff2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ff6:	d103      	bne.n	8008000 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007ffe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008000:	2303      	movs	r3, #3
 8008002:	e013      	b.n	800802c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008004:	897b      	ldrh	r3, [r7, #10]
 8008006:	b2db      	uxtb	r3, r3
 8008008:	f043 0301 	orr.w	r3, r3, #1
 800800c:	b2da      	uxtb	r2, r3
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008016:	6a3a      	ldr	r2, [r7, #32]
 8008018:	4906      	ldr	r1, [pc, #24]	@ (8008034 <I2C_RequestMemoryRead+0x1cc>)
 800801a:	68f8      	ldr	r0, [r7, #12]
 800801c:	f000 f863 	bl	80080e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008020:	4603      	mov	r3, r0
 8008022:	2b00      	cmp	r3, #0
 8008024:	d001      	beq.n	800802a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008026:	2301      	movs	r3, #1
 8008028:	e000      	b.n	800802c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800802a:	2300      	movs	r3, #0
}
 800802c:	4618      	mov	r0, r3
 800802e:	3718      	adds	r7, #24
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}
 8008034:	00010002 	.word	0x00010002

08008038 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b084      	sub	sp, #16
 800803c:	af00      	add	r7, sp, #0
 800803e:	60f8      	str	r0, [r7, #12]
 8008040:	60b9      	str	r1, [r7, #8]
 8008042:	603b      	str	r3, [r7, #0]
 8008044:	4613      	mov	r3, r2
 8008046:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008048:	e025      	b.n	8008096 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008050:	d021      	beq.n	8008096 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008052:	f7fd fd5b 	bl	8005b0c <HAL_GetTick>
 8008056:	4602      	mov	r2, r0
 8008058:	69bb      	ldr	r3, [r7, #24]
 800805a:	1ad3      	subs	r3, r2, r3
 800805c:	683a      	ldr	r2, [r7, #0]
 800805e:	429a      	cmp	r2, r3
 8008060:	d302      	bcc.n	8008068 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d116      	bne.n	8008096 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2200      	movs	r2, #0
 800806c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	2220      	movs	r2, #32
 8008072:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2200      	movs	r2, #0
 800807a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008082:	f043 0220 	orr.w	r2, r3, #32
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2200      	movs	r2, #0
 800808e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	e023      	b.n	80080de <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	0c1b      	lsrs	r3, r3, #16
 800809a:	b2db      	uxtb	r3, r3
 800809c:	2b01      	cmp	r3, #1
 800809e:	d10d      	bne.n	80080bc <I2C_WaitOnFlagUntilTimeout+0x84>
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	695b      	ldr	r3, [r3, #20]
 80080a6:	43da      	mvns	r2, r3
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	4013      	ands	r3, r2
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	bf0c      	ite	eq
 80080b2:	2301      	moveq	r3, #1
 80080b4:	2300      	movne	r3, #0
 80080b6:	b2db      	uxtb	r3, r3
 80080b8:	461a      	mov	r2, r3
 80080ba:	e00c      	b.n	80080d6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	699b      	ldr	r3, [r3, #24]
 80080c2:	43da      	mvns	r2, r3
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	4013      	ands	r3, r2
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	bf0c      	ite	eq
 80080ce:	2301      	moveq	r3, #1
 80080d0:	2300      	movne	r3, #0
 80080d2:	b2db      	uxtb	r3, r3
 80080d4:	461a      	mov	r2, r3
 80080d6:	79fb      	ldrb	r3, [r7, #7]
 80080d8:	429a      	cmp	r2, r3
 80080da:	d0b6      	beq.n	800804a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80080dc:	2300      	movs	r3, #0
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3710      	adds	r7, #16
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}

080080e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80080e6:	b580      	push	{r7, lr}
 80080e8:	b084      	sub	sp, #16
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	60f8      	str	r0, [r7, #12]
 80080ee:	60b9      	str	r1, [r7, #8]
 80080f0:	607a      	str	r2, [r7, #4]
 80080f2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80080f4:	e051      	b.n	800819a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	695b      	ldr	r3, [r3, #20]
 80080fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008100:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008104:	d123      	bne.n	800814e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	681a      	ldr	r2, [r3, #0]
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008114:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800811e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	2200      	movs	r2, #0
 8008124:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2220      	movs	r2, #32
 800812a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2200      	movs	r2, #0
 8008132:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800813a:	f043 0204 	orr.w	r2, r3, #4
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2200      	movs	r2, #0
 8008146:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800814a:	2301      	movs	r3, #1
 800814c:	e046      	b.n	80081dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008154:	d021      	beq.n	800819a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008156:	f7fd fcd9 	bl	8005b0c <HAL_GetTick>
 800815a:	4602      	mov	r2, r0
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	1ad3      	subs	r3, r2, r3
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	429a      	cmp	r2, r3
 8008164:	d302      	bcc.n	800816c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d116      	bne.n	800819a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2200      	movs	r2, #0
 8008170:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2220      	movs	r2, #32
 8008176:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2200      	movs	r2, #0
 800817e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008186:	f043 0220 	orr.w	r2, r3, #32
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2200      	movs	r2, #0
 8008192:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8008196:	2301      	movs	r3, #1
 8008198:	e020      	b.n	80081dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	0c1b      	lsrs	r3, r3, #16
 800819e:	b2db      	uxtb	r3, r3
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d10c      	bne.n	80081be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	695b      	ldr	r3, [r3, #20]
 80081aa:	43da      	mvns	r2, r3
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	4013      	ands	r3, r2
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	bf14      	ite	ne
 80081b6:	2301      	movne	r3, #1
 80081b8:	2300      	moveq	r3, #0
 80081ba:	b2db      	uxtb	r3, r3
 80081bc:	e00b      	b.n	80081d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	699b      	ldr	r3, [r3, #24]
 80081c4:	43da      	mvns	r2, r3
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	4013      	ands	r3, r2
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	bf14      	ite	ne
 80081d0:	2301      	movne	r3, #1
 80081d2:	2300      	moveq	r3, #0
 80081d4:	b2db      	uxtb	r3, r3
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d18d      	bne.n	80080f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80081da:	2300      	movs	r3, #0
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3710      	adds	r7, #16
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	60f8      	str	r0, [r7, #12]
 80081ec:	60b9      	str	r1, [r7, #8]
 80081ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80081f0:	e02d      	b.n	800824e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80081f2:	68f8      	ldr	r0, [r7, #12]
 80081f4:	f000 f8ce 	bl	8008394 <I2C_IsAcknowledgeFailed>
 80081f8:	4603      	mov	r3, r0
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d001      	beq.n	8008202 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80081fe:	2301      	movs	r3, #1
 8008200:	e02d      	b.n	800825e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008208:	d021      	beq.n	800824e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800820a:	f7fd fc7f 	bl	8005b0c <HAL_GetTick>
 800820e:	4602      	mov	r2, r0
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	1ad3      	subs	r3, r2, r3
 8008214:	68ba      	ldr	r2, [r7, #8]
 8008216:	429a      	cmp	r2, r3
 8008218:	d302      	bcc.n	8008220 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d116      	bne.n	800824e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2200      	movs	r2, #0
 8008224:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2220      	movs	r2, #32
 800822a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2200      	movs	r2, #0
 8008232:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800823a:	f043 0220 	orr.w	r2, r3, #32
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2200      	movs	r2, #0
 8008246:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800824a:	2301      	movs	r3, #1
 800824c:	e007      	b.n	800825e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	695b      	ldr	r3, [r3, #20]
 8008254:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008258:	2b80      	cmp	r3, #128	@ 0x80
 800825a:	d1ca      	bne.n	80081f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800825c:	2300      	movs	r3, #0
}
 800825e:	4618      	mov	r0, r3
 8008260:	3710      	adds	r7, #16
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}

08008266 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008266:	b580      	push	{r7, lr}
 8008268:	b084      	sub	sp, #16
 800826a:	af00      	add	r7, sp, #0
 800826c:	60f8      	str	r0, [r7, #12]
 800826e:	60b9      	str	r1, [r7, #8]
 8008270:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008272:	e02d      	b.n	80082d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008274:	68f8      	ldr	r0, [r7, #12]
 8008276:	f000 f88d 	bl	8008394 <I2C_IsAcknowledgeFailed>
 800827a:	4603      	mov	r3, r0
 800827c:	2b00      	cmp	r3, #0
 800827e:	d001      	beq.n	8008284 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008280:	2301      	movs	r3, #1
 8008282:	e02d      	b.n	80082e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800828a:	d021      	beq.n	80082d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800828c:	f7fd fc3e 	bl	8005b0c <HAL_GetTick>
 8008290:	4602      	mov	r2, r0
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	1ad3      	subs	r3, r2, r3
 8008296:	68ba      	ldr	r2, [r7, #8]
 8008298:	429a      	cmp	r2, r3
 800829a:	d302      	bcc.n	80082a2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d116      	bne.n	80082d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2200      	movs	r2, #0
 80082a6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	2220      	movs	r2, #32
 80082ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2200      	movs	r2, #0
 80082b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082bc:	f043 0220 	orr.w	r2, r3, #32
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2200      	movs	r2, #0
 80082c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80082cc:	2301      	movs	r3, #1
 80082ce:	e007      	b.n	80082e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	695b      	ldr	r3, [r3, #20]
 80082d6:	f003 0304 	and.w	r3, r3, #4
 80082da:	2b04      	cmp	r3, #4
 80082dc:	d1ca      	bne.n	8008274 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80082de:	2300      	movs	r3, #0
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3710      	adds	r7, #16
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	60f8      	str	r0, [r7, #12]
 80082f0:	60b9      	str	r1, [r7, #8]
 80082f2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80082f4:	e042      	b.n	800837c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	695b      	ldr	r3, [r3, #20]
 80082fc:	f003 0310 	and.w	r3, r3, #16
 8008300:	2b10      	cmp	r3, #16
 8008302:	d119      	bne.n	8008338 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f06f 0210 	mvn.w	r2, #16
 800830c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	2200      	movs	r2, #0
 8008312:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2220      	movs	r2, #32
 8008318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2200      	movs	r2, #0
 8008320:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2200      	movs	r2, #0
 8008330:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008334:	2301      	movs	r3, #1
 8008336:	e029      	b.n	800838c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008338:	f7fd fbe8 	bl	8005b0c <HAL_GetTick>
 800833c:	4602      	mov	r2, r0
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	1ad3      	subs	r3, r2, r3
 8008342:	68ba      	ldr	r2, [r7, #8]
 8008344:	429a      	cmp	r2, r3
 8008346:	d302      	bcc.n	800834e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d116      	bne.n	800837c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2200      	movs	r2, #0
 8008352:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2220      	movs	r2, #32
 8008358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2200      	movs	r2, #0
 8008360:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008368:	f043 0220 	orr.w	r2, r3, #32
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2200      	movs	r2, #0
 8008374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008378:	2301      	movs	r3, #1
 800837a:	e007      	b.n	800838c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	695b      	ldr	r3, [r3, #20]
 8008382:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008386:	2b40      	cmp	r3, #64	@ 0x40
 8008388:	d1b5      	bne.n	80082f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800838a:	2300      	movs	r3, #0
}
 800838c:	4618      	mov	r0, r3
 800838e:	3710      	adds	r7, #16
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}

08008394 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008394:	b480      	push	{r7}
 8008396:	b083      	sub	sp, #12
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	695b      	ldr	r3, [r3, #20]
 80083a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80083a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80083aa:	d11b      	bne.n	80083e4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80083b4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2200      	movs	r2, #0
 80083ba:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2220      	movs	r2, #32
 80083c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2200      	movs	r2, #0
 80083c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083d0:	f043 0204 	orr.w	r2, r3, #4
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2200      	movs	r2, #0
 80083dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80083e0:	2301      	movs	r3, #1
 80083e2:	e000      	b.n	80083e6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80083e4:	2300      	movs	r3, #0
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	370c      	adds	r7, #12
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr
	...

080083f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d101      	bne.n	8008408 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008404:	2301      	movs	r3, #1
 8008406:	e0cc      	b.n	80085a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008408:	4b68      	ldr	r3, [pc, #416]	@ (80085ac <HAL_RCC_ClockConfig+0x1b8>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f003 030f 	and.w	r3, r3, #15
 8008410:	683a      	ldr	r2, [r7, #0]
 8008412:	429a      	cmp	r2, r3
 8008414:	d90c      	bls.n	8008430 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008416:	4b65      	ldr	r3, [pc, #404]	@ (80085ac <HAL_RCC_ClockConfig+0x1b8>)
 8008418:	683a      	ldr	r2, [r7, #0]
 800841a:	b2d2      	uxtb	r2, r2
 800841c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800841e:	4b63      	ldr	r3, [pc, #396]	@ (80085ac <HAL_RCC_ClockConfig+0x1b8>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f003 030f 	and.w	r3, r3, #15
 8008426:	683a      	ldr	r2, [r7, #0]
 8008428:	429a      	cmp	r2, r3
 800842a:	d001      	beq.n	8008430 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800842c:	2301      	movs	r3, #1
 800842e:	e0b8      	b.n	80085a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f003 0302 	and.w	r3, r3, #2
 8008438:	2b00      	cmp	r3, #0
 800843a:	d020      	beq.n	800847e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f003 0304 	and.w	r3, r3, #4
 8008444:	2b00      	cmp	r3, #0
 8008446:	d005      	beq.n	8008454 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008448:	4b59      	ldr	r3, [pc, #356]	@ (80085b0 <HAL_RCC_ClockConfig+0x1bc>)
 800844a:	689b      	ldr	r3, [r3, #8]
 800844c:	4a58      	ldr	r2, [pc, #352]	@ (80085b0 <HAL_RCC_ClockConfig+0x1bc>)
 800844e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008452:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f003 0308 	and.w	r3, r3, #8
 800845c:	2b00      	cmp	r3, #0
 800845e:	d005      	beq.n	800846c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008460:	4b53      	ldr	r3, [pc, #332]	@ (80085b0 <HAL_RCC_ClockConfig+0x1bc>)
 8008462:	689b      	ldr	r3, [r3, #8]
 8008464:	4a52      	ldr	r2, [pc, #328]	@ (80085b0 <HAL_RCC_ClockConfig+0x1bc>)
 8008466:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800846a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800846c:	4b50      	ldr	r3, [pc, #320]	@ (80085b0 <HAL_RCC_ClockConfig+0x1bc>)
 800846e:	689b      	ldr	r3, [r3, #8]
 8008470:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	689b      	ldr	r3, [r3, #8]
 8008478:	494d      	ldr	r1, [pc, #308]	@ (80085b0 <HAL_RCC_ClockConfig+0x1bc>)
 800847a:	4313      	orrs	r3, r2
 800847c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f003 0301 	and.w	r3, r3, #1
 8008486:	2b00      	cmp	r3, #0
 8008488:	d044      	beq.n	8008514 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	2b01      	cmp	r3, #1
 8008490:	d107      	bne.n	80084a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008492:	4b47      	ldr	r3, [pc, #284]	@ (80085b0 <HAL_RCC_ClockConfig+0x1bc>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800849a:	2b00      	cmp	r3, #0
 800849c:	d119      	bne.n	80084d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800849e:	2301      	movs	r3, #1
 80084a0:	e07f      	b.n	80085a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	2b02      	cmp	r3, #2
 80084a8:	d003      	beq.n	80084b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80084ae:	2b03      	cmp	r3, #3
 80084b0:	d107      	bne.n	80084c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80084b2:	4b3f      	ldr	r3, [pc, #252]	@ (80085b0 <HAL_RCC_ClockConfig+0x1bc>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d109      	bne.n	80084d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80084be:	2301      	movs	r3, #1
 80084c0:	e06f      	b.n	80085a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80084c2:	4b3b      	ldr	r3, [pc, #236]	@ (80085b0 <HAL_RCC_ClockConfig+0x1bc>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f003 0302 	and.w	r3, r3, #2
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d101      	bne.n	80084d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80084ce:	2301      	movs	r3, #1
 80084d0:	e067      	b.n	80085a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80084d2:	4b37      	ldr	r3, [pc, #220]	@ (80085b0 <HAL_RCC_ClockConfig+0x1bc>)
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	f023 0203 	bic.w	r2, r3, #3
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	4934      	ldr	r1, [pc, #208]	@ (80085b0 <HAL_RCC_ClockConfig+0x1bc>)
 80084e0:	4313      	orrs	r3, r2
 80084e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80084e4:	f7fd fb12 	bl	8005b0c <HAL_GetTick>
 80084e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80084ea:	e00a      	b.n	8008502 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80084ec:	f7fd fb0e 	bl	8005b0c <HAL_GetTick>
 80084f0:	4602      	mov	r2, r0
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	1ad3      	subs	r3, r2, r3
 80084f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d901      	bls.n	8008502 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80084fe:	2303      	movs	r3, #3
 8008500:	e04f      	b.n	80085a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008502:	4b2b      	ldr	r3, [pc, #172]	@ (80085b0 <HAL_RCC_ClockConfig+0x1bc>)
 8008504:	689b      	ldr	r3, [r3, #8]
 8008506:	f003 020c 	and.w	r2, r3, #12
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	009b      	lsls	r3, r3, #2
 8008510:	429a      	cmp	r2, r3
 8008512:	d1eb      	bne.n	80084ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008514:	4b25      	ldr	r3, [pc, #148]	@ (80085ac <HAL_RCC_ClockConfig+0x1b8>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f003 030f 	and.w	r3, r3, #15
 800851c:	683a      	ldr	r2, [r7, #0]
 800851e:	429a      	cmp	r2, r3
 8008520:	d20c      	bcs.n	800853c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008522:	4b22      	ldr	r3, [pc, #136]	@ (80085ac <HAL_RCC_ClockConfig+0x1b8>)
 8008524:	683a      	ldr	r2, [r7, #0]
 8008526:	b2d2      	uxtb	r2, r2
 8008528:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800852a:	4b20      	ldr	r3, [pc, #128]	@ (80085ac <HAL_RCC_ClockConfig+0x1b8>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f003 030f 	and.w	r3, r3, #15
 8008532:	683a      	ldr	r2, [r7, #0]
 8008534:	429a      	cmp	r2, r3
 8008536:	d001      	beq.n	800853c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008538:	2301      	movs	r3, #1
 800853a:	e032      	b.n	80085a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f003 0304 	and.w	r3, r3, #4
 8008544:	2b00      	cmp	r3, #0
 8008546:	d008      	beq.n	800855a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008548:	4b19      	ldr	r3, [pc, #100]	@ (80085b0 <HAL_RCC_ClockConfig+0x1bc>)
 800854a:	689b      	ldr	r3, [r3, #8]
 800854c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	68db      	ldr	r3, [r3, #12]
 8008554:	4916      	ldr	r1, [pc, #88]	@ (80085b0 <HAL_RCC_ClockConfig+0x1bc>)
 8008556:	4313      	orrs	r3, r2
 8008558:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f003 0308 	and.w	r3, r3, #8
 8008562:	2b00      	cmp	r3, #0
 8008564:	d009      	beq.n	800857a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008566:	4b12      	ldr	r3, [pc, #72]	@ (80085b0 <HAL_RCC_ClockConfig+0x1bc>)
 8008568:	689b      	ldr	r3, [r3, #8]
 800856a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	691b      	ldr	r3, [r3, #16]
 8008572:	00db      	lsls	r3, r3, #3
 8008574:	490e      	ldr	r1, [pc, #56]	@ (80085b0 <HAL_RCC_ClockConfig+0x1bc>)
 8008576:	4313      	orrs	r3, r2
 8008578:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800857a:	f000 f855 	bl	8008628 <HAL_RCC_GetSysClockFreq>
 800857e:	4602      	mov	r2, r0
 8008580:	4b0b      	ldr	r3, [pc, #44]	@ (80085b0 <HAL_RCC_ClockConfig+0x1bc>)
 8008582:	689b      	ldr	r3, [r3, #8]
 8008584:	091b      	lsrs	r3, r3, #4
 8008586:	f003 030f 	and.w	r3, r3, #15
 800858a:	490a      	ldr	r1, [pc, #40]	@ (80085b4 <HAL_RCC_ClockConfig+0x1c0>)
 800858c:	5ccb      	ldrb	r3, [r1, r3]
 800858e:	fa22 f303 	lsr.w	r3, r2, r3
 8008592:	4a09      	ldr	r2, [pc, #36]	@ (80085b8 <HAL_RCC_ClockConfig+0x1c4>)
 8008594:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008596:	4b09      	ldr	r3, [pc, #36]	@ (80085bc <HAL_RCC_ClockConfig+0x1c8>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4618      	mov	r0, r3
 800859c:	f7fd fa72 	bl	8005a84 <HAL_InitTick>

  return HAL_OK;
 80085a0:	2300      	movs	r3, #0
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3710      	adds	r7, #16
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
 80085aa:	bf00      	nop
 80085ac:	40023c00 	.word	0x40023c00
 80085b0:	40023800 	.word	0x40023800
 80085b4:	0800e9b0 	.word	0x0800e9b0
 80085b8:	20000044 	.word	0x20000044
 80085bc:	20000048 	.word	0x20000048

080085c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80085c0:	b480      	push	{r7}
 80085c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80085c4:	4b03      	ldr	r3, [pc, #12]	@ (80085d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80085c6:	681b      	ldr	r3, [r3, #0]
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	46bd      	mov	sp, r7
 80085cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d0:	4770      	bx	lr
 80085d2:	bf00      	nop
 80085d4:	20000044 	.word	0x20000044

080085d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80085dc:	f7ff fff0 	bl	80085c0 <HAL_RCC_GetHCLKFreq>
 80085e0:	4602      	mov	r2, r0
 80085e2:	4b05      	ldr	r3, [pc, #20]	@ (80085f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80085e4:	689b      	ldr	r3, [r3, #8]
 80085e6:	0a9b      	lsrs	r3, r3, #10
 80085e8:	f003 0307 	and.w	r3, r3, #7
 80085ec:	4903      	ldr	r1, [pc, #12]	@ (80085fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80085ee:	5ccb      	ldrb	r3, [r1, r3]
 80085f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	bd80      	pop	{r7, pc}
 80085f8:	40023800 	.word	0x40023800
 80085fc:	0800e9c0 	.word	0x0800e9c0

08008600 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008604:	f7ff ffdc 	bl	80085c0 <HAL_RCC_GetHCLKFreq>
 8008608:	4602      	mov	r2, r0
 800860a:	4b05      	ldr	r3, [pc, #20]	@ (8008620 <HAL_RCC_GetPCLK2Freq+0x20>)
 800860c:	689b      	ldr	r3, [r3, #8]
 800860e:	0b5b      	lsrs	r3, r3, #13
 8008610:	f003 0307 	and.w	r3, r3, #7
 8008614:	4903      	ldr	r1, [pc, #12]	@ (8008624 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008616:	5ccb      	ldrb	r3, [r1, r3]
 8008618:	fa22 f303 	lsr.w	r3, r2, r3
}
 800861c:	4618      	mov	r0, r3
 800861e:	bd80      	pop	{r7, pc}
 8008620:	40023800 	.word	0x40023800
 8008624:	0800e9c0 	.word	0x0800e9c0

08008628 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008628:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800862c:	b0ae      	sub	sp, #184	@ 0xb8
 800862e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008630:	2300      	movs	r3, #0
 8008632:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8008636:	2300      	movs	r3, #0
 8008638:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800863c:	2300      	movs	r3, #0
 800863e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8008642:	2300      	movs	r3, #0
 8008644:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8008648:	2300      	movs	r3, #0
 800864a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800864e:	4bcb      	ldr	r3, [pc, #812]	@ (800897c <HAL_RCC_GetSysClockFreq+0x354>)
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	f003 030c 	and.w	r3, r3, #12
 8008656:	2b0c      	cmp	r3, #12
 8008658:	f200 8206 	bhi.w	8008a68 <HAL_RCC_GetSysClockFreq+0x440>
 800865c:	a201      	add	r2, pc, #4	@ (adr r2, 8008664 <HAL_RCC_GetSysClockFreq+0x3c>)
 800865e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008662:	bf00      	nop
 8008664:	08008699 	.word	0x08008699
 8008668:	08008a69 	.word	0x08008a69
 800866c:	08008a69 	.word	0x08008a69
 8008670:	08008a69 	.word	0x08008a69
 8008674:	080086a1 	.word	0x080086a1
 8008678:	08008a69 	.word	0x08008a69
 800867c:	08008a69 	.word	0x08008a69
 8008680:	08008a69 	.word	0x08008a69
 8008684:	080086a9 	.word	0x080086a9
 8008688:	08008a69 	.word	0x08008a69
 800868c:	08008a69 	.word	0x08008a69
 8008690:	08008a69 	.word	0x08008a69
 8008694:	08008899 	.word	0x08008899
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008698:	4bb9      	ldr	r3, [pc, #740]	@ (8008980 <HAL_RCC_GetSysClockFreq+0x358>)
 800869a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 800869e:	e1e7      	b.n	8008a70 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80086a0:	4bb8      	ldr	r3, [pc, #736]	@ (8008984 <HAL_RCC_GetSysClockFreq+0x35c>)
 80086a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80086a6:	e1e3      	b.n	8008a70 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80086a8:	4bb4      	ldr	r3, [pc, #720]	@ (800897c <HAL_RCC_GetSysClockFreq+0x354>)
 80086aa:	685b      	ldr	r3, [r3, #4]
 80086ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80086b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80086b4:	4bb1      	ldr	r3, [pc, #708]	@ (800897c <HAL_RCC_GetSysClockFreq+0x354>)
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d071      	beq.n	80087a4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80086c0:	4bae      	ldr	r3, [pc, #696]	@ (800897c <HAL_RCC_GetSysClockFreq+0x354>)
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	099b      	lsrs	r3, r3, #6
 80086c6:	2200      	movs	r2, #0
 80086c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80086cc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80086d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80086d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086d8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80086dc:	2300      	movs	r3, #0
 80086de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80086e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80086e6:	4622      	mov	r2, r4
 80086e8:	462b      	mov	r3, r5
 80086ea:	f04f 0000 	mov.w	r0, #0
 80086ee:	f04f 0100 	mov.w	r1, #0
 80086f2:	0159      	lsls	r1, r3, #5
 80086f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80086f8:	0150      	lsls	r0, r2, #5
 80086fa:	4602      	mov	r2, r0
 80086fc:	460b      	mov	r3, r1
 80086fe:	4621      	mov	r1, r4
 8008700:	1a51      	subs	r1, r2, r1
 8008702:	6439      	str	r1, [r7, #64]	@ 0x40
 8008704:	4629      	mov	r1, r5
 8008706:	eb63 0301 	sbc.w	r3, r3, r1
 800870a:	647b      	str	r3, [r7, #68]	@ 0x44
 800870c:	f04f 0200 	mov.w	r2, #0
 8008710:	f04f 0300 	mov.w	r3, #0
 8008714:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8008718:	4649      	mov	r1, r9
 800871a:	018b      	lsls	r3, r1, #6
 800871c:	4641      	mov	r1, r8
 800871e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008722:	4641      	mov	r1, r8
 8008724:	018a      	lsls	r2, r1, #6
 8008726:	4641      	mov	r1, r8
 8008728:	1a51      	subs	r1, r2, r1
 800872a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800872c:	4649      	mov	r1, r9
 800872e:	eb63 0301 	sbc.w	r3, r3, r1
 8008732:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008734:	f04f 0200 	mov.w	r2, #0
 8008738:	f04f 0300 	mov.w	r3, #0
 800873c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8008740:	4649      	mov	r1, r9
 8008742:	00cb      	lsls	r3, r1, #3
 8008744:	4641      	mov	r1, r8
 8008746:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800874a:	4641      	mov	r1, r8
 800874c:	00ca      	lsls	r2, r1, #3
 800874e:	4610      	mov	r0, r2
 8008750:	4619      	mov	r1, r3
 8008752:	4603      	mov	r3, r0
 8008754:	4622      	mov	r2, r4
 8008756:	189b      	adds	r3, r3, r2
 8008758:	633b      	str	r3, [r7, #48]	@ 0x30
 800875a:	462b      	mov	r3, r5
 800875c:	460a      	mov	r2, r1
 800875e:	eb42 0303 	adc.w	r3, r2, r3
 8008762:	637b      	str	r3, [r7, #52]	@ 0x34
 8008764:	f04f 0200 	mov.w	r2, #0
 8008768:	f04f 0300 	mov.w	r3, #0
 800876c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8008770:	4629      	mov	r1, r5
 8008772:	024b      	lsls	r3, r1, #9
 8008774:	4621      	mov	r1, r4
 8008776:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800877a:	4621      	mov	r1, r4
 800877c:	024a      	lsls	r2, r1, #9
 800877e:	4610      	mov	r0, r2
 8008780:	4619      	mov	r1, r3
 8008782:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008786:	2200      	movs	r2, #0
 8008788:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800878c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008790:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8008794:	f7f8 fae0 	bl	8000d58 <__aeabi_uldivmod>
 8008798:	4602      	mov	r2, r0
 800879a:	460b      	mov	r3, r1
 800879c:	4613      	mov	r3, r2
 800879e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80087a2:	e067      	b.n	8008874 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80087a4:	4b75      	ldr	r3, [pc, #468]	@ (800897c <HAL_RCC_GetSysClockFreq+0x354>)
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	099b      	lsrs	r3, r3, #6
 80087aa:	2200      	movs	r2, #0
 80087ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80087b0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80087b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80087b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80087be:	2300      	movs	r3, #0
 80087c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80087c2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80087c6:	4622      	mov	r2, r4
 80087c8:	462b      	mov	r3, r5
 80087ca:	f04f 0000 	mov.w	r0, #0
 80087ce:	f04f 0100 	mov.w	r1, #0
 80087d2:	0159      	lsls	r1, r3, #5
 80087d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80087d8:	0150      	lsls	r0, r2, #5
 80087da:	4602      	mov	r2, r0
 80087dc:	460b      	mov	r3, r1
 80087de:	4621      	mov	r1, r4
 80087e0:	1a51      	subs	r1, r2, r1
 80087e2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80087e4:	4629      	mov	r1, r5
 80087e6:	eb63 0301 	sbc.w	r3, r3, r1
 80087ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80087ec:	f04f 0200 	mov.w	r2, #0
 80087f0:	f04f 0300 	mov.w	r3, #0
 80087f4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80087f8:	4649      	mov	r1, r9
 80087fa:	018b      	lsls	r3, r1, #6
 80087fc:	4641      	mov	r1, r8
 80087fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008802:	4641      	mov	r1, r8
 8008804:	018a      	lsls	r2, r1, #6
 8008806:	4641      	mov	r1, r8
 8008808:	ebb2 0a01 	subs.w	sl, r2, r1
 800880c:	4649      	mov	r1, r9
 800880e:	eb63 0b01 	sbc.w	fp, r3, r1
 8008812:	f04f 0200 	mov.w	r2, #0
 8008816:	f04f 0300 	mov.w	r3, #0
 800881a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800881e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008822:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008826:	4692      	mov	sl, r2
 8008828:	469b      	mov	fp, r3
 800882a:	4623      	mov	r3, r4
 800882c:	eb1a 0303 	adds.w	r3, sl, r3
 8008830:	623b      	str	r3, [r7, #32]
 8008832:	462b      	mov	r3, r5
 8008834:	eb4b 0303 	adc.w	r3, fp, r3
 8008838:	627b      	str	r3, [r7, #36]	@ 0x24
 800883a:	f04f 0200 	mov.w	r2, #0
 800883e:	f04f 0300 	mov.w	r3, #0
 8008842:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8008846:	4629      	mov	r1, r5
 8008848:	028b      	lsls	r3, r1, #10
 800884a:	4621      	mov	r1, r4
 800884c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008850:	4621      	mov	r1, r4
 8008852:	028a      	lsls	r2, r1, #10
 8008854:	4610      	mov	r0, r2
 8008856:	4619      	mov	r1, r3
 8008858:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800885c:	2200      	movs	r2, #0
 800885e:	673b      	str	r3, [r7, #112]	@ 0x70
 8008860:	677a      	str	r2, [r7, #116]	@ 0x74
 8008862:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8008866:	f7f8 fa77 	bl	8000d58 <__aeabi_uldivmod>
 800886a:	4602      	mov	r2, r0
 800886c:	460b      	mov	r3, r1
 800886e:	4613      	mov	r3, r2
 8008870:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008874:	4b41      	ldr	r3, [pc, #260]	@ (800897c <HAL_RCC_GetSysClockFreq+0x354>)
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	0c1b      	lsrs	r3, r3, #16
 800887a:	f003 0303 	and.w	r3, r3, #3
 800887e:	3301      	adds	r3, #1
 8008880:	005b      	lsls	r3, r3, #1
 8008882:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8008886:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800888a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800888e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008892:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8008896:	e0eb      	b.n	8008a70 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008898:	4b38      	ldr	r3, [pc, #224]	@ (800897c <HAL_RCC_GetSysClockFreq+0x354>)
 800889a:	685b      	ldr	r3, [r3, #4]
 800889c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80088a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80088a4:	4b35      	ldr	r3, [pc, #212]	@ (800897c <HAL_RCC_GetSysClockFreq+0x354>)
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d06b      	beq.n	8008988 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80088b0:	4b32      	ldr	r3, [pc, #200]	@ (800897c <HAL_RCC_GetSysClockFreq+0x354>)
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	099b      	lsrs	r3, r3, #6
 80088b6:	2200      	movs	r2, #0
 80088b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80088ba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80088bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80088be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088c2:	663b      	str	r3, [r7, #96]	@ 0x60
 80088c4:	2300      	movs	r3, #0
 80088c6:	667b      	str	r3, [r7, #100]	@ 0x64
 80088c8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80088cc:	4622      	mov	r2, r4
 80088ce:	462b      	mov	r3, r5
 80088d0:	f04f 0000 	mov.w	r0, #0
 80088d4:	f04f 0100 	mov.w	r1, #0
 80088d8:	0159      	lsls	r1, r3, #5
 80088da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80088de:	0150      	lsls	r0, r2, #5
 80088e0:	4602      	mov	r2, r0
 80088e2:	460b      	mov	r3, r1
 80088e4:	4621      	mov	r1, r4
 80088e6:	1a51      	subs	r1, r2, r1
 80088e8:	61b9      	str	r1, [r7, #24]
 80088ea:	4629      	mov	r1, r5
 80088ec:	eb63 0301 	sbc.w	r3, r3, r1
 80088f0:	61fb      	str	r3, [r7, #28]
 80088f2:	f04f 0200 	mov.w	r2, #0
 80088f6:	f04f 0300 	mov.w	r3, #0
 80088fa:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80088fe:	4659      	mov	r1, fp
 8008900:	018b      	lsls	r3, r1, #6
 8008902:	4651      	mov	r1, sl
 8008904:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008908:	4651      	mov	r1, sl
 800890a:	018a      	lsls	r2, r1, #6
 800890c:	4651      	mov	r1, sl
 800890e:	ebb2 0801 	subs.w	r8, r2, r1
 8008912:	4659      	mov	r1, fp
 8008914:	eb63 0901 	sbc.w	r9, r3, r1
 8008918:	f04f 0200 	mov.w	r2, #0
 800891c:	f04f 0300 	mov.w	r3, #0
 8008920:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008924:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008928:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800892c:	4690      	mov	r8, r2
 800892e:	4699      	mov	r9, r3
 8008930:	4623      	mov	r3, r4
 8008932:	eb18 0303 	adds.w	r3, r8, r3
 8008936:	613b      	str	r3, [r7, #16]
 8008938:	462b      	mov	r3, r5
 800893a:	eb49 0303 	adc.w	r3, r9, r3
 800893e:	617b      	str	r3, [r7, #20]
 8008940:	f04f 0200 	mov.w	r2, #0
 8008944:	f04f 0300 	mov.w	r3, #0
 8008948:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800894c:	4629      	mov	r1, r5
 800894e:	024b      	lsls	r3, r1, #9
 8008950:	4621      	mov	r1, r4
 8008952:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008956:	4621      	mov	r1, r4
 8008958:	024a      	lsls	r2, r1, #9
 800895a:	4610      	mov	r0, r2
 800895c:	4619      	mov	r1, r3
 800895e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008962:	2200      	movs	r2, #0
 8008964:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008966:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8008968:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800896c:	f7f8 f9f4 	bl	8000d58 <__aeabi_uldivmod>
 8008970:	4602      	mov	r2, r0
 8008972:	460b      	mov	r3, r1
 8008974:	4613      	mov	r3, r2
 8008976:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800897a:	e065      	b.n	8008a48 <HAL_RCC_GetSysClockFreq+0x420>
 800897c:	40023800 	.word	0x40023800
 8008980:	00f42400 	.word	0x00f42400
 8008984:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008988:	4b3d      	ldr	r3, [pc, #244]	@ (8008a80 <HAL_RCC_GetSysClockFreq+0x458>)
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	099b      	lsrs	r3, r3, #6
 800898e:	2200      	movs	r2, #0
 8008990:	4618      	mov	r0, r3
 8008992:	4611      	mov	r1, r2
 8008994:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008998:	653b      	str	r3, [r7, #80]	@ 0x50
 800899a:	2300      	movs	r3, #0
 800899c:	657b      	str	r3, [r7, #84]	@ 0x54
 800899e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80089a2:	4642      	mov	r2, r8
 80089a4:	464b      	mov	r3, r9
 80089a6:	f04f 0000 	mov.w	r0, #0
 80089aa:	f04f 0100 	mov.w	r1, #0
 80089ae:	0159      	lsls	r1, r3, #5
 80089b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80089b4:	0150      	lsls	r0, r2, #5
 80089b6:	4602      	mov	r2, r0
 80089b8:	460b      	mov	r3, r1
 80089ba:	4641      	mov	r1, r8
 80089bc:	1a51      	subs	r1, r2, r1
 80089be:	60b9      	str	r1, [r7, #8]
 80089c0:	4649      	mov	r1, r9
 80089c2:	eb63 0301 	sbc.w	r3, r3, r1
 80089c6:	60fb      	str	r3, [r7, #12]
 80089c8:	f04f 0200 	mov.w	r2, #0
 80089cc:	f04f 0300 	mov.w	r3, #0
 80089d0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80089d4:	4659      	mov	r1, fp
 80089d6:	018b      	lsls	r3, r1, #6
 80089d8:	4651      	mov	r1, sl
 80089da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80089de:	4651      	mov	r1, sl
 80089e0:	018a      	lsls	r2, r1, #6
 80089e2:	4651      	mov	r1, sl
 80089e4:	1a54      	subs	r4, r2, r1
 80089e6:	4659      	mov	r1, fp
 80089e8:	eb63 0501 	sbc.w	r5, r3, r1
 80089ec:	f04f 0200 	mov.w	r2, #0
 80089f0:	f04f 0300 	mov.w	r3, #0
 80089f4:	00eb      	lsls	r3, r5, #3
 80089f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80089fa:	00e2      	lsls	r2, r4, #3
 80089fc:	4614      	mov	r4, r2
 80089fe:	461d      	mov	r5, r3
 8008a00:	4643      	mov	r3, r8
 8008a02:	18e3      	adds	r3, r4, r3
 8008a04:	603b      	str	r3, [r7, #0]
 8008a06:	464b      	mov	r3, r9
 8008a08:	eb45 0303 	adc.w	r3, r5, r3
 8008a0c:	607b      	str	r3, [r7, #4]
 8008a0e:	f04f 0200 	mov.w	r2, #0
 8008a12:	f04f 0300 	mov.w	r3, #0
 8008a16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008a1a:	4629      	mov	r1, r5
 8008a1c:	028b      	lsls	r3, r1, #10
 8008a1e:	4621      	mov	r1, r4
 8008a20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008a24:	4621      	mov	r1, r4
 8008a26:	028a      	lsls	r2, r1, #10
 8008a28:	4610      	mov	r0, r2
 8008a2a:	4619      	mov	r1, r3
 8008a2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a30:	2200      	movs	r2, #0
 8008a32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a34:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8008a36:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008a3a:	f7f8 f98d 	bl	8000d58 <__aeabi_uldivmod>
 8008a3e:	4602      	mov	r2, r0
 8008a40:	460b      	mov	r3, r1
 8008a42:	4613      	mov	r3, r2
 8008a44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8008a48:	4b0d      	ldr	r3, [pc, #52]	@ (8008a80 <HAL_RCC_GetSysClockFreq+0x458>)
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	0f1b      	lsrs	r3, r3, #28
 8008a4e:	f003 0307 	and.w	r3, r3, #7
 8008a52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8008a56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008a5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8008a66:	e003      	b.n	8008a70 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008a68:	4b06      	ldr	r3, [pc, #24]	@ (8008a84 <HAL_RCC_GetSysClockFreq+0x45c>)
 8008a6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8008a6e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008a70:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	37b8      	adds	r7, #184	@ 0xb8
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008a7e:	bf00      	nop
 8008a80:	40023800 	.word	0x40023800
 8008a84:	00f42400 	.word	0x00f42400

08008a88 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b086      	sub	sp, #24
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d101      	bne.n	8008a9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008a96:	2301      	movs	r3, #1
 8008a98:	e28d      	b.n	8008fb6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f003 0301 	and.w	r3, r3, #1
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	f000 8083 	beq.w	8008bae <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008aa8:	4b94      	ldr	r3, [pc, #592]	@ (8008cfc <HAL_RCC_OscConfig+0x274>)
 8008aaa:	689b      	ldr	r3, [r3, #8]
 8008aac:	f003 030c 	and.w	r3, r3, #12
 8008ab0:	2b04      	cmp	r3, #4
 8008ab2:	d019      	beq.n	8008ae8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008ab4:	4b91      	ldr	r3, [pc, #580]	@ (8008cfc <HAL_RCC_OscConfig+0x274>)
 8008ab6:	689b      	ldr	r3, [r3, #8]
 8008ab8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008abc:	2b08      	cmp	r3, #8
 8008abe:	d106      	bne.n	8008ace <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008ac0:	4b8e      	ldr	r3, [pc, #568]	@ (8008cfc <HAL_RCC_OscConfig+0x274>)
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008ac8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008acc:	d00c      	beq.n	8008ae8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008ace:	4b8b      	ldr	r3, [pc, #556]	@ (8008cfc <HAL_RCC_OscConfig+0x274>)
 8008ad0:	689b      	ldr	r3, [r3, #8]
 8008ad2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008ad6:	2b0c      	cmp	r3, #12
 8008ad8:	d112      	bne.n	8008b00 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008ada:	4b88      	ldr	r3, [pc, #544]	@ (8008cfc <HAL_RCC_OscConfig+0x274>)
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008ae2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008ae6:	d10b      	bne.n	8008b00 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ae8:	4b84      	ldr	r3, [pc, #528]	@ (8008cfc <HAL_RCC_OscConfig+0x274>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d05b      	beq.n	8008bac <HAL_RCC_OscConfig+0x124>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d157      	bne.n	8008bac <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8008afc:	2301      	movs	r3, #1
 8008afe:	e25a      	b.n	8008fb6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	685b      	ldr	r3, [r3, #4]
 8008b04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b08:	d106      	bne.n	8008b18 <HAL_RCC_OscConfig+0x90>
 8008b0a:	4b7c      	ldr	r3, [pc, #496]	@ (8008cfc <HAL_RCC_OscConfig+0x274>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4a7b      	ldr	r2, [pc, #492]	@ (8008cfc <HAL_RCC_OscConfig+0x274>)
 8008b10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008b14:	6013      	str	r3, [r2, #0]
 8008b16:	e01d      	b.n	8008b54 <HAL_RCC_OscConfig+0xcc>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	685b      	ldr	r3, [r3, #4]
 8008b1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008b20:	d10c      	bne.n	8008b3c <HAL_RCC_OscConfig+0xb4>
 8008b22:	4b76      	ldr	r3, [pc, #472]	@ (8008cfc <HAL_RCC_OscConfig+0x274>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a75      	ldr	r2, [pc, #468]	@ (8008cfc <HAL_RCC_OscConfig+0x274>)
 8008b28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008b2c:	6013      	str	r3, [r2, #0]
 8008b2e:	4b73      	ldr	r3, [pc, #460]	@ (8008cfc <HAL_RCC_OscConfig+0x274>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4a72      	ldr	r2, [pc, #456]	@ (8008cfc <HAL_RCC_OscConfig+0x274>)
 8008b34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008b38:	6013      	str	r3, [r2, #0]
 8008b3a:	e00b      	b.n	8008b54 <HAL_RCC_OscConfig+0xcc>
 8008b3c:	4b6f      	ldr	r3, [pc, #444]	@ (8008cfc <HAL_RCC_OscConfig+0x274>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4a6e      	ldr	r2, [pc, #440]	@ (8008cfc <HAL_RCC_OscConfig+0x274>)
 8008b42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008b46:	6013      	str	r3, [r2, #0]
 8008b48:	4b6c      	ldr	r3, [pc, #432]	@ (8008cfc <HAL_RCC_OscConfig+0x274>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a6b      	ldr	r2, [pc, #428]	@ (8008cfc <HAL_RCC_OscConfig+0x274>)
 8008b4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008b52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	685b      	ldr	r3, [r3, #4]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d013      	beq.n	8008b84 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b5c:	f7fc ffd6 	bl	8005b0c <HAL_GetTick>
 8008b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b62:	e008      	b.n	8008b76 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008b64:	f7fc ffd2 	bl	8005b0c <HAL_GetTick>
 8008b68:	4602      	mov	r2, r0
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	1ad3      	subs	r3, r2, r3
 8008b6e:	2b64      	cmp	r3, #100	@ 0x64
 8008b70:	d901      	bls.n	8008b76 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8008b72:	2303      	movs	r3, #3
 8008b74:	e21f      	b.n	8008fb6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b76:	4b61      	ldr	r3, [pc, #388]	@ (8008cfc <HAL_RCC_OscConfig+0x274>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d0f0      	beq.n	8008b64 <HAL_RCC_OscConfig+0xdc>
 8008b82:	e014      	b.n	8008bae <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b84:	f7fc ffc2 	bl	8005b0c <HAL_GetTick>
 8008b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008b8a:	e008      	b.n	8008b9e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008b8c:	f7fc ffbe 	bl	8005b0c <HAL_GetTick>
 8008b90:	4602      	mov	r2, r0
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	1ad3      	subs	r3, r2, r3
 8008b96:	2b64      	cmp	r3, #100	@ 0x64
 8008b98:	d901      	bls.n	8008b9e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8008b9a:	2303      	movs	r3, #3
 8008b9c:	e20b      	b.n	8008fb6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008b9e:	4b57      	ldr	r3, [pc, #348]	@ (8008cfc <HAL_RCC_OscConfig+0x274>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d1f0      	bne.n	8008b8c <HAL_RCC_OscConfig+0x104>
 8008baa:	e000      	b.n	8008bae <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008bac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f003 0302 	and.w	r3, r3, #2
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d06f      	beq.n	8008c9a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008bba:	4b50      	ldr	r3, [pc, #320]	@ (8008cfc <HAL_RCC_OscConfig+0x274>)
 8008bbc:	689b      	ldr	r3, [r3, #8]
 8008bbe:	f003 030c 	and.w	r3, r3, #12
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d017      	beq.n	8008bf6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008bc6:	4b4d      	ldr	r3, [pc, #308]	@ (8008cfc <HAL_RCC_OscConfig+0x274>)
 8008bc8:	689b      	ldr	r3, [r3, #8]
 8008bca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008bce:	2b08      	cmp	r3, #8
 8008bd0:	d105      	bne.n	8008bde <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008bd2:	4b4a      	ldr	r3, [pc, #296]	@ (8008cfc <HAL_RCC_OscConfig+0x274>)
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d00b      	beq.n	8008bf6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008bde:	4b47      	ldr	r3, [pc, #284]	@ (8008cfc <HAL_RCC_OscConfig+0x274>)
 8008be0:	689b      	ldr	r3, [r3, #8]
 8008be2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008be6:	2b0c      	cmp	r3, #12
 8008be8:	d11c      	bne.n	8008c24 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008bea:	4b44      	ldr	r3, [pc, #272]	@ (8008cfc <HAL_RCC_OscConfig+0x274>)
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d116      	bne.n	8008c24 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008bf6:	4b41      	ldr	r3, [pc, #260]	@ (8008cfc <HAL_RCC_OscConfig+0x274>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f003 0302 	and.w	r3, r3, #2
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d005      	beq.n	8008c0e <HAL_RCC_OscConfig+0x186>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	68db      	ldr	r3, [r3, #12]
 8008c06:	2b01      	cmp	r3, #1
 8008c08:	d001      	beq.n	8008c0e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	e1d3      	b.n	8008fb6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c0e:	4b3b      	ldr	r3, [pc, #236]	@ (8008cfc <HAL_RCC_OscConfig+0x274>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	691b      	ldr	r3, [r3, #16]
 8008c1a:	00db      	lsls	r3, r3, #3
 8008c1c:	4937      	ldr	r1, [pc, #220]	@ (8008cfc <HAL_RCC_OscConfig+0x274>)
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008c22:	e03a      	b.n	8008c9a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	68db      	ldr	r3, [r3, #12]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d020      	beq.n	8008c6e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008c2c:	4b34      	ldr	r3, [pc, #208]	@ (8008d00 <HAL_RCC_OscConfig+0x278>)
 8008c2e:	2201      	movs	r2, #1
 8008c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c32:	f7fc ff6b 	bl	8005b0c <HAL_GetTick>
 8008c36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c38:	e008      	b.n	8008c4c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008c3a:	f7fc ff67 	bl	8005b0c <HAL_GetTick>
 8008c3e:	4602      	mov	r2, r0
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	1ad3      	subs	r3, r2, r3
 8008c44:	2b02      	cmp	r3, #2
 8008c46:	d901      	bls.n	8008c4c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8008c48:	2303      	movs	r3, #3
 8008c4a:	e1b4      	b.n	8008fb6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c4c:	4b2b      	ldr	r3, [pc, #172]	@ (8008cfc <HAL_RCC_OscConfig+0x274>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f003 0302 	and.w	r3, r3, #2
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d0f0      	beq.n	8008c3a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c58:	4b28      	ldr	r3, [pc, #160]	@ (8008cfc <HAL_RCC_OscConfig+0x274>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	691b      	ldr	r3, [r3, #16]
 8008c64:	00db      	lsls	r3, r3, #3
 8008c66:	4925      	ldr	r1, [pc, #148]	@ (8008cfc <HAL_RCC_OscConfig+0x274>)
 8008c68:	4313      	orrs	r3, r2
 8008c6a:	600b      	str	r3, [r1, #0]
 8008c6c:	e015      	b.n	8008c9a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008c6e:	4b24      	ldr	r3, [pc, #144]	@ (8008d00 <HAL_RCC_OscConfig+0x278>)
 8008c70:	2200      	movs	r2, #0
 8008c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c74:	f7fc ff4a 	bl	8005b0c <HAL_GetTick>
 8008c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008c7a:	e008      	b.n	8008c8e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008c7c:	f7fc ff46 	bl	8005b0c <HAL_GetTick>
 8008c80:	4602      	mov	r2, r0
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	1ad3      	subs	r3, r2, r3
 8008c86:	2b02      	cmp	r3, #2
 8008c88:	d901      	bls.n	8008c8e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008c8a:	2303      	movs	r3, #3
 8008c8c:	e193      	b.n	8008fb6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008c8e:	4b1b      	ldr	r3, [pc, #108]	@ (8008cfc <HAL_RCC_OscConfig+0x274>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f003 0302 	and.w	r3, r3, #2
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d1f0      	bne.n	8008c7c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f003 0308 	and.w	r3, r3, #8
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d036      	beq.n	8008d14 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	695b      	ldr	r3, [r3, #20]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d016      	beq.n	8008cdc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008cae:	4b15      	ldr	r3, [pc, #84]	@ (8008d04 <HAL_RCC_OscConfig+0x27c>)
 8008cb0:	2201      	movs	r2, #1
 8008cb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008cb4:	f7fc ff2a 	bl	8005b0c <HAL_GetTick>
 8008cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008cba:	e008      	b.n	8008cce <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008cbc:	f7fc ff26 	bl	8005b0c <HAL_GetTick>
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	1ad3      	subs	r3, r2, r3
 8008cc6:	2b02      	cmp	r3, #2
 8008cc8:	d901      	bls.n	8008cce <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8008cca:	2303      	movs	r3, #3
 8008ccc:	e173      	b.n	8008fb6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008cce:	4b0b      	ldr	r3, [pc, #44]	@ (8008cfc <HAL_RCC_OscConfig+0x274>)
 8008cd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008cd2:	f003 0302 	and.w	r3, r3, #2
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d0f0      	beq.n	8008cbc <HAL_RCC_OscConfig+0x234>
 8008cda:	e01b      	b.n	8008d14 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008cdc:	4b09      	ldr	r3, [pc, #36]	@ (8008d04 <HAL_RCC_OscConfig+0x27c>)
 8008cde:	2200      	movs	r2, #0
 8008ce0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ce2:	f7fc ff13 	bl	8005b0c <HAL_GetTick>
 8008ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008ce8:	e00e      	b.n	8008d08 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008cea:	f7fc ff0f 	bl	8005b0c <HAL_GetTick>
 8008cee:	4602      	mov	r2, r0
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	1ad3      	subs	r3, r2, r3
 8008cf4:	2b02      	cmp	r3, #2
 8008cf6:	d907      	bls.n	8008d08 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8008cf8:	2303      	movs	r3, #3
 8008cfa:	e15c      	b.n	8008fb6 <HAL_RCC_OscConfig+0x52e>
 8008cfc:	40023800 	.word	0x40023800
 8008d00:	42470000 	.word	0x42470000
 8008d04:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008d08:	4b8a      	ldr	r3, [pc, #552]	@ (8008f34 <HAL_RCC_OscConfig+0x4ac>)
 8008d0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d0c:	f003 0302 	and.w	r3, r3, #2
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d1ea      	bne.n	8008cea <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f003 0304 	and.w	r3, r3, #4
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	f000 8097 	beq.w	8008e50 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008d22:	2300      	movs	r3, #0
 8008d24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008d26:	4b83      	ldr	r3, [pc, #524]	@ (8008f34 <HAL_RCC_OscConfig+0x4ac>)
 8008d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d10f      	bne.n	8008d52 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008d32:	2300      	movs	r3, #0
 8008d34:	60bb      	str	r3, [r7, #8]
 8008d36:	4b7f      	ldr	r3, [pc, #508]	@ (8008f34 <HAL_RCC_OscConfig+0x4ac>)
 8008d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d3a:	4a7e      	ldr	r2, [pc, #504]	@ (8008f34 <HAL_RCC_OscConfig+0x4ac>)
 8008d3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008d40:	6413      	str	r3, [r2, #64]	@ 0x40
 8008d42:	4b7c      	ldr	r3, [pc, #496]	@ (8008f34 <HAL_RCC_OscConfig+0x4ac>)
 8008d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008d4a:	60bb      	str	r3, [r7, #8]
 8008d4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008d4e:	2301      	movs	r3, #1
 8008d50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d52:	4b79      	ldr	r3, [pc, #484]	@ (8008f38 <HAL_RCC_OscConfig+0x4b0>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d118      	bne.n	8008d90 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008d5e:	4b76      	ldr	r3, [pc, #472]	@ (8008f38 <HAL_RCC_OscConfig+0x4b0>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	4a75      	ldr	r2, [pc, #468]	@ (8008f38 <HAL_RCC_OscConfig+0x4b0>)
 8008d64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008d68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008d6a:	f7fc fecf 	bl	8005b0c <HAL_GetTick>
 8008d6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d70:	e008      	b.n	8008d84 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d72:	f7fc fecb 	bl	8005b0c <HAL_GetTick>
 8008d76:	4602      	mov	r2, r0
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	1ad3      	subs	r3, r2, r3
 8008d7c:	2b02      	cmp	r3, #2
 8008d7e:	d901      	bls.n	8008d84 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8008d80:	2303      	movs	r3, #3
 8008d82:	e118      	b.n	8008fb6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d84:	4b6c      	ldr	r3, [pc, #432]	@ (8008f38 <HAL_RCC_OscConfig+0x4b0>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d0f0      	beq.n	8008d72 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	689b      	ldr	r3, [r3, #8]
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	d106      	bne.n	8008da6 <HAL_RCC_OscConfig+0x31e>
 8008d98:	4b66      	ldr	r3, [pc, #408]	@ (8008f34 <HAL_RCC_OscConfig+0x4ac>)
 8008d9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d9c:	4a65      	ldr	r2, [pc, #404]	@ (8008f34 <HAL_RCC_OscConfig+0x4ac>)
 8008d9e:	f043 0301 	orr.w	r3, r3, #1
 8008da2:	6713      	str	r3, [r2, #112]	@ 0x70
 8008da4:	e01c      	b.n	8008de0 <HAL_RCC_OscConfig+0x358>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	689b      	ldr	r3, [r3, #8]
 8008daa:	2b05      	cmp	r3, #5
 8008dac:	d10c      	bne.n	8008dc8 <HAL_RCC_OscConfig+0x340>
 8008dae:	4b61      	ldr	r3, [pc, #388]	@ (8008f34 <HAL_RCC_OscConfig+0x4ac>)
 8008db0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008db2:	4a60      	ldr	r2, [pc, #384]	@ (8008f34 <HAL_RCC_OscConfig+0x4ac>)
 8008db4:	f043 0304 	orr.w	r3, r3, #4
 8008db8:	6713      	str	r3, [r2, #112]	@ 0x70
 8008dba:	4b5e      	ldr	r3, [pc, #376]	@ (8008f34 <HAL_RCC_OscConfig+0x4ac>)
 8008dbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008dbe:	4a5d      	ldr	r2, [pc, #372]	@ (8008f34 <HAL_RCC_OscConfig+0x4ac>)
 8008dc0:	f043 0301 	orr.w	r3, r3, #1
 8008dc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8008dc6:	e00b      	b.n	8008de0 <HAL_RCC_OscConfig+0x358>
 8008dc8:	4b5a      	ldr	r3, [pc, #360]	@ (8008f34 <HAL_RCC_OscConfig+0x4ac>)
 8008dca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008dcc:	4a59      	ldr	r2, [pc, #356]	@ (8008f34 <HAL_RCC_OscConfig+0x4ac>)
 8008dce:	f023 0301 	bic.w	r3, r3, #1
 8008dd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8008dd4:	4b57      	ldr	r3, [pc, #348]	@ (8008f34 <HAL_RCC_OscConfig+0x4ac>)
 8008dd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008dd8:	4a56      	ldr	r2, [pc, #344]	@ (8008f34 <HAL_RCC_OscConfig+0x4ac>)
 8008dda:	f023 0304 	bic.w	r3, r3, #4
 8008dde:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	689b      	ldr	r3, [r3, #8]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d015      	beq.n	8008e14 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008de8:	f7fc fe90 	bl	8005b0c <HAL_GetTick>
 8008dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008dee:	e00a      	b.n	8008e06 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008df0:	f7fc fe8c 	bl	8005b0c <HAL_GetTick>
 8008df4:	4602      	mov	r2, r0
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	1ad3      	subs	r3, r2, r3
 8008dfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d901      	bls.n	8008e06 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8008e02:	2303      	movs	r3, #3
 8008e04:	e0d7      	b.n	8008fb6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e06:	4b4b      	ldr	r3, [pc, #300]	@ (8008f34 <HAL_RCC_OscConfig+0x4ac>)
 8008e08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e0a:	f003 0302 	and.w	r3, r3, #2
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d0ee      	beq.n	8008df0 <HAL_RCC_OscConfig+0x368>
 8008e12:	e014      	b.n	8008e3e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e14:	f7fc fe7a 	bl	8005b0c <HAL_GetTick>
 8008e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008e1a:	e00a      	b.n	8008e32 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008e1c:	f7fc fe76 	bl	8005b0c <HAL_GetTick>
 8008e20:	4602      	mov	r2, r0
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	1ad3      	subs	r3, r2, r3
 8008e26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d901      	bls.n	8008e32 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8008e2e:	2303      	movs	r3, #3
 8008e30:	e0c1      	b.n	8008fb6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008e32:	4b40      	ldr	r3, [pc, #256]	@ (8008f34 <HAL_RCC_OscConfig+0x4ac>)
 8008e34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e36:	f003 0302 	and.w	r3, r3, #2
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d1ee      	bne.n	8008e1c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008e3e:	7dfb      	ldrb	r3, [r7, #23]
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	d105      	bne.n	8008e50 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008e44:	4b3b      	ldr	r3, [pc, #236]	@ (8008f34 <HAL_RCC_OscConfig+0x4ac>)
 8008e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e48:	4a3a      	ldr	r2, [pc, #232]	@ (8008f34 <HAL_RCC_OscConfig+0x4ac>)
 8008e4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008e4e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	699b      	ldr	r3, [r3, #24]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	f000 80ad 	beq.w	8008fb4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008e5a:	4b36      	ldr	r3, [pc, #216]	@ (8008f34 <HAL_RCC_OscConfig+0x4ac>)
 8008e5c:	689b      	ldr	r3, [r3, #8]
 8008e5e:	f003 030c 	and.w	r3, r3, #12
 8008e62:	2b08      	cmp	r3, #8
 8008e64:	d060      	beq.n	8008f28 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	699b      	ldr	r3, [r3, #24]
 8008e6a:	2b02      	cmp	r3, #2
 8008e6c:	d145      	bne.n	8008efa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e6e:	4b33      	ldr	r3, [pc, #204]	@ (8008f3c <HAL_RCC_OscConfig+0x4b4>)
 8008e70:	2200      	movs	r2, #0
 8008e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e74:	f7fc fe4a 	bl	8005b0c <HAL_GetTick>
 8008e78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e7a:	e008      	b.n	8008e8e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008e7c:	f7fc fe46 	bl	8005b0c <HAL_GetTick>
 8008e80:	4602      	mov	r2, r0
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	1ad3      	subs	r3, r2, r3
 8008e86:	2b02      	cmp	r3, #2
 8008e88:	d901      	bls.n	8008e8e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8008e8a:	2303      	movs	r3, #3
 8008e8c:	e093      	b.n	8008fb6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e8e:	4b29      	ldr	r3, [pc, #164]	@ (8008f34 <HAL_RCC_OscConfig+0x4ac>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d1f0      	bne.n	8008e7c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	69da      	ldr	r2, [r3, #28]
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6a1b      	ldr	r3, [r3, #32]
 8008ea2:	431a      	orrs	r2, r3
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ea8:	019b      	lsls	r3, r3, #6
 8008eaa:	431a      	orrs	r2, r3
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008eb0:	085b      	lsrs	r3, r3, #1
 8008eb2:	3b01      	subs	r3, #1
 8008eb4:	041b      	lsls	r3, r3, #16
 8008eb6:	431a      	orrs	r2, r3
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ebc:	061b      	lsls	r3, r3, #24
 8008ebe:	431a      	orrs	r2, r3
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ec4:	071b      	lsls	r3, r3, #28
 8008ec6:	491b      	ldr	r1, [pc, #108]	@ (8008f34 <HAL_RCC_OscConfig+0x4ac>)
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008ecc:	4b1b      	ldr	r3, [pc, #108]	@ (8008f3c <HAL_RCC_OscConfig+0x4b4>)
 8008ece:	2201      	movs	r2, #1
 8008ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ed2:	f7fc fe1b 	bl	8005b0c <HAL_GetTick>
 8008ed6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008ed8:	e008      	b.n	8008eec <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008eda:	f7fc fe17 	bl	8005b0c <HAL_GetTick>
 8008ede:	4602      	mov	r2, r0
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	1ad3      	subs	r3, r2, r3
 8008ee4:	2b02      	cmp	r3, #2
 8008ee6:	d901      	bls.n	8008eec <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8008ee8:	2303      	movs	r3, #3
 8008eea:	e064      	b.n	8008fb6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008eec:	4b11      	ldr	r3, [pc, #68]	@ (8008f34 <HAL_RCC_OscConfig+0x4ac>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d0f0      	beq.n	8008eda <HAL_RCC_OscConfig+0x452>
 8008ef8:	e05c      	b.n	8008fb4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008efa:	4b10      	ldr	r3, [pc, #64]	@ (8008f3c <HAL_RCC_OscConfig+0x4b4>)
 8008efc:	2200      	movs	r2, #0
 8008efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f00:	f7fc fe04 	bl	8005b0c <HAL_GetTick>
 8008f04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f06:	e008      	b.n	8008f1a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f08:	f7fc fe00 	bl	8005b0c <HAL_GetTick>
 8008f0c:	4602      	mov	r2, r0
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	1ad3      	subs	r3, r2, r3
 8008f12:	2b02      	cmp	r3, #2
 8008f14:	d901      	bls.n	8008f1a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8008f16:	2303      	movs	r3, #3
 8008f18:	e04d      	b.n	8008fb6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f1a:	4b06      	ldr	r3, [pc, #24]	@ (8008f34 <HAL_RCC_OscConfig+0x4ac>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d1f0      	bne.n	8008f08 <HAL_RCC_OscConfig+0x480>
 8008f26:	e045      	b.n	8008fb4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	699b      	ldr	r3, [r3, #24]
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d107      	bne.n	8008f40 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8008f30:	2301      	movs	r3, #1
 8008f32:	e040      	b.n	8008fb6 <HAL_RCC_OscConfig+0x52e>
 8008f34:	40023800 	.word	0x40023800
 8008f38:	40007000 	.word	0x40007000
 8008f3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008f40:	4b1f      	ldr	r3, [pc, #124]	@ (8008fc0 <HAL_RCC_OscConfig+0x538>)
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	699b      	ldr	r3, [r3, #24]
 8008f4a:	2b01      	cmp	r3, #1
 8008f4c:	d030      	beq.n	8008fb0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d129      	bne.n	8008fb0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f66:	429a      	cmp	r2, r3
 8008f68:	d122      	bne.n	8008fb0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008f6a:	68fa      	ldr	r2, [r7, #12]
 8008f6c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008f70:	4013      	ands	r3, r2
 8008f72:	687a      	ldr	r2, [r7, #4]
 8008f74:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008f76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d119      	bne.n	8008fb0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f86:	085b      	lsrs	r3, r3, #1
 8008f88:	3b01      	subs	r3, #1
 8008f8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008f8c:	429a      	cmp	r2, r3
 8008f8e:	d10f      	bne.n	8008fb0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	d107      	bne.n	8008fb0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008faa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008fac:	429a      	cmp	r2, r3
 8008fae:	d001      	beq.n	8008fb4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	e000      	b.n	8008fb6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8008fb4:	2300      	movs	r3, #0
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3718      	adds	r7, #24
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}
 8008fbe:	bf00      	nop
 8008fc0:	40023800 	.word	0x40023800

08008fc4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b082      	sub	sp, #8
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d101      	bne.n	8008fd6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	e07b      	b.n	80090ce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d108      	bne.n	8008ff0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	685b      	ldr	r3, [r3, #4]
 8008fe2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008fe6:	d009      	beq.n	8008ffc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2200      	movs	r2, #0
 8008fec:	61da      	str	r2, [r3, #28]
 8008fee:	e005      	b.n	8008ffc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2200      	movs	r2, #0
 8009000:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009008:	b2db      	uxtb	r3, r3
 800900a:	2b00      	cmp	r3, #0
 800900c:	d106      	bne.n	800901c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2200      	movs	r2, #0
 8009012:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f7fc f9a8 	bl	800536c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2202      	movs	r2, #2
 8009020:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	681a      	ldr	r2, [r3, #0]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009032:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	685b      	ldr	r3, [r3, #4]
 8009038:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	689b      	ldr	r3, [r3, #8]
 8009040:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009044:	431a      	orrs	r2, r3
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	68db      	ldr	r3, [r3, #12]
 800904a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800904e:	431a      	orrs	r2, r3
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	691b      	ldr	r3, [r3, #16]
 8009054:	f003 0302 	and.w	r3, r3, #2
 8009058:	431a      	orrs	r2, r3
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	695b      	ldr	r3, [r3, #20]
 800905e:	f003 0301 	and.w	r3, r3, #1
 8009062:	431a      	orrs	r2, r3
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	699b      	ldr	r3, [r3, #24]
 8009068:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800906c:	431a      	orrs	r2, r3
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	69db      	ldr	r3, [r3, #28]
 8009072:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009076:	431a      	orrs	r2, r3
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6a1b      	ldr	r3, [r3, #32]
 800907c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009080:	ea42 0103 	orr.w	r1, r2, r3
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009088:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	430a      	orrs	r2, r1
 8009092:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	699b      	ldr	r3, [r3, #24]
 8009098:	0c1b      	lsrs	r3, r3, #16
 800909a:	f003 0104 	and.w	r1, r3, #4
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090a2:	f003 0210 	and.w	r2, r3, #16
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	430a      	orrs	r2, r1
 80090ac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	69da      	ldr	r2, [r3, #28]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80090bc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2200      	movs	r2, #0
 80090c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2201      	movs	r2, #1
 80090c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80090cc:	2300      	movs	r3, #0
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3708      	adds	r7, #8
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}

080090d6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80090d6:	b580      	push	{r7, lr}
 80090d8:	b082      	sub	sp, #8
 80090da:	af00      	add	r7, sp, #0
 80090dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d101      	bne.n	80090e8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80090e4:	2301      	movs	r3, #1
 80090e6:	e041      	b.n	800916c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80090ee:	b2db      	uxtb	r3, r3
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d106      	bne.n	8009102 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2200      	movs	r2, #0
 80090f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f7fc f97d 	bl	80053fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2202      	movs	r2, #2
 8009106:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681a      	ldr	r2, [r3, #0]
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	3304      	adds	r3, #4
 8009112:	4619      	mov	r1, r3
 8009114:	4610      	mov	r0, r2
 8009116:	f000 fa65 	bl	80095e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2201      	movs	r2, #1
 800911e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2201      	movs	r2, #1
 8009126:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2201      	movs	r2, #1
 800912e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2201      	movs	r2, #1
 8009136:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2201      	movs	r2, #1
 800913e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2201      	movs	r2, #1
 8009146:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2201      	movs	r2, #1
 800914e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2201      	movs	r2, #1
 8009156:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2201      	movs	r2, #1
 800915e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2201      	movs	r2, #1
 8009166:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800916a:	2300      	movs	r3, #0
}
 800916c:	4618      	mov	r0, r3
 800916e:	3708      	adds	r7, #8
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}

08009174 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009174:	b480      	push	{r7}
 8009176:	b085      	sub	sp, #20
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009182:	b2db      	uxtb	r3, r3
 8009184:	2b01      	cmp	r3, #1
 8009186:	d001      	beq.n	800918c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009188:	2301      	movs	r3, #1
 800918a:	e046      	b.n	800921a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2202      	movs	r2, #2
 8009190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4a23      	ldr	r2, [pc, #140]	@ (8009228 <HAL_TIM_Base_Start+0xb4>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d022      	beq.n	80091e4 <HAL_TIM_Base_Start+0x70>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091a6:	d01d      	beq.n	80091e4 <HAL_TIM_Base_Start+0x70>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4a1f      	ldr	r2, [pc, #124]	@ (800922c <HAL_TIM_Base_Start+0xb8>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d018      	beq.n	80091e4 <HAL_TIM_Base_Start+0x70>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	4a1e      	ldr	r2, [pc, #120]	@ (8009230 <HAL_TIM_Base_Start+0xbc>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d013      	beq.n	80091e4 <HAL_TIM_Base_Start+0x70>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4a1c      	ldr	r2, [pc, #112]	@ (8009234 <HAL_TIM_Base_Start+0xc0>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d00e      	beq.n	80091e4 <HAL_TIM_Base_Start+0x70>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	4a1b      	ldr	r2, [pc, #108]	@ (8009238 <HAL_TIM_Base_Start+0xc4>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d009      	beq.n	80091e4 <HAL_TIM_Base_Start+0x70>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	4a19      	ldr	r2, [pc, #100]	@ (800923c <HAL_TIM_Base_Start+0xc8>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d004      	beq.n	80091e4 <HAL_TIM_Base_Start+0x70>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4a18      	ldr	r2, [pc, #96]	@ (8009240 <HAL_TIM_Base_Start+0xcc>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d111      	bne.n	8009208 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	689b      	ldr	r3, [r3, #8]
 80091ea:	f003 0307 	and.w	r3, r3, #7
 80091ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	2b06      	cmp	r3, #6
 80091f4:	d010      	beq.n	8009218 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	681a      	ldr	r2, [r3, #0]
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f042 0201 	orr.w	r2, r2, #1
 8009204:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009206:	e007      	b.n	8009218 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f042 0201 	orr.w	r2, r2, #1
 8009216:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009218:	2300      	movs	r3, #0
}
 800921a:	4618      	mov	r0, r3
 800921c:	3714      	adds	r7, #20
 800921e:	46bd      	mov	sp, r7
 8009220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009224:	4770      	bx	lr
 8009226:	bf00      	nop
 8009228:	40010000 	.word	0x40010000
 800922c:	40000400 	.word	0x40000400
 8009230:	40000800 	.word	0x40000800
 8009234:	40000c00 	.word	0x40000c00
 8009238:	40010400 	.word	0x40010400
 800923c:	40014000 	.word	0x40014000
 8009240:	40001800 	.word	0x40001800

08009244 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009244:	b480      	push	{r7}
 8009246:	b085      	sub	sp, #20
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009252:	b2db      	uxtb	r3, r3
 8009254:	2b01      	cmp	r3, #1
 8009256:	d001      	beq.n	800925c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009258:	2301      	movs	r3, #1
 800925a:	e04e      	b.n	80092fa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2202      	movs	r2, #2
 8009260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	68da      	ldr	r2, [r3, #12]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f042 0201 	orr.w	r2, r2, #1
 8009272:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	4a23      	ldr	r2, [pc, #140]	@ (8009308 <HAL_TIM_Base_Start_IT+0xc4>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d022      	beq.n	80092c4 <HAL_TIM_Base_Start_IT+0x80>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009286:	d01d      	beq.n	80092c4 <HAL_TIM_Base_Start_IT+0x80>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4a1f      	ldr	r2, [pc, #124]	@ (800930c <HAL_TIM_Base_Start_IT+0xc8>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d018      	beq.n	80092c4 <HAL_TIM_Base_Start_IT+0x80>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	4a1e      	ldr	r2, [pc, #120]	@ (8009310 <HAL_TIM_Base_Start_IT+0xcc>)
 8009298:	4293      	cmp	r3, r2
 800929a:	d013      	beq.n	80092c4 <HAL_TIM_Base_Start_IT+0x80>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4a1c      	ldr	r2, [pc, #112]	@ (8009314 <HAL_TIM_Base_Start_IT+0xd0>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d00e      	beq.n	80092c4 <HAL_TIM_Base_Start_IT+0x80>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	4a1b      	ldr	r2, [pc, #108]	@ (8009318 <HAL_TIM_Base_Start_IT+0xd4>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d009      	beq.n	80092c4 <HAL_TIM_Base_Start_IT+0x80>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4a19      	ldr	r2, [pc, #100]	@ (800931c <HAL_TIM_Base_Start_IT+0xd8>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d004      	beq.n	80092c4 <HAL_TIM_Base_Start_IT+0x80>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	4a18      	ldr	r2, [pc, #96]	@ (8009320 <HAL_TIM_Base_Start_IT+0xdc>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d111      	bne.n	80092e8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	689b      	ldr	r3, [r3, #8]
 80092ca:	f003 0307 	and.w	r3, r3, #7
 80092ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	2b06      	cmp	r3, #6
 80092d4:	d010      	beq.n	80092f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	681a      	ldr	r2, [r3, #0]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f042 0201 	orr.w	r2, r2, #1
 80092e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092e6:	e007      	b.n	80092f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	681a      	ldr	r2, [r3, #0]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f042 0201 	orr.w	r2, r2, #1
 80092f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80092f8:	2300      	movs	r3, #0
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3714      	adds	r7, #20
 80092fe:	46bd      	mov	sp, r7
 8009300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009304:	4770      	bx	lr
 8009306:	bf00      	nop
 8009308:	40010000 	.word	0x40010000
 800930c:	40000400 	.word	0x40000400
 8009310:	40000800 	.word	0x40000800
 8009314:	40000c00 	.word	0x40000c00
 8009318:	40010400 	.word	0x40010400
 800931c:	40014000 	.word	0x40014000
 8009320:	40001800 	.word	0x40001800

08009324 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009324:	b480      	push	{r7}
 8009326:	b083      	sub	sp, #12
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	68da      	ldr	r2, [r3, #12]
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f022 0201 	bic.w	r2, r2, #1
 800933a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	6a1a      	ldr	r2, [r3, #32]
 8009342:	f241 1311 	movw	r3, #4369	@ 0x1111
 8009346:	4013      	ands	r3, r2
 8009348:	2b00      	cmp	r3, #0
 800934a:	d10f      	bne.n	800936c <HAL_TIM_Base_Stop_IT+0x48>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	6a1a      	ldr	r2, [r3, #32]
 8009352:	f240 4344 	movw	r3, #1092	@ 0x444
 8009356:	4013      	ands	r3, r2
 8009358:	2b00      	cmp	r3, #0
 800935a:	d107      	bne.n	800936c <HAL_TIM_Base_Stop_IT+0x48>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	681a      	ldr	r2, [r3, #0]
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f022 0201 	bic.w	r2, r2, #1
 800936a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2201      	movs	r2, #1
 8009370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8009374:	2300      	movs	r3, #0
}
 8009376:	4618      	mov	r0, r3
 8009378:	370c      	adds	r7, #12
 800937a:	46bd      	mov	sp, r7
 800937c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009380:	4770      	bx	lr

08009382 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009382:	b580      	push	{r7, lr}
 8009384:	b082      	sub	sp, #8
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	691b      	ldr	r3, [r3, #16]
 8009390:	f003 0302 	and.w	r3, r3, #2
 8009394:	2b02      	cmp	r3, #2
 8009396:	d122      	bne.n	80093de <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	68db      	ldr	r3, [r3, #12]
 800939e:	f003 0302 	and.w	r3, r3, #2
 80093a2:	2b02      	cmp	r3, #2
 80093a4:	d11b      	bne.n	80093de <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f06f 0202 	mvn.w	r2, #2
 80093ae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2201      	movs	r2, #1
 80093b4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	699b      	ldr	r3, [r3, #24]
 80093bc:	f003 0303 	and.w	r3, r3, #3
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d003      	beq.n	80093cc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f000 f8ee 	bl	80095a6 <HAL_TIM_IC_CaptureCallback>
 80093ca:	e005      	b.n	80093d8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f000 f8e0 	bl	8009592 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f000 f8f1 	bl	80095ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2200      	movs	r2, #0
 80093dc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	691b      	ldr	r3, [r3, #16]
 80093e4:	f003 0304 	and.w	r3, r3, #4
 80093e8:	2b04      	cmp	r3, #4
 80093ea:	d122      	bne.n	8009432 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	68db      	ldr	r3, [r3, #12]
 80093f2:	f003 0304 	and.w	r3, r3, #4
 80093f6:	2b04      	cmp	r3, #4
 80093f8:	d11b      	bne.n	8009432 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f06f 0204 	mvn.w	r2, #4
 8009402:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2202      	movs	r2, #2
 8009408:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	699b      	ldr	r3, [r3, #24]
 8009410:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009414:	2b00      	cmp	r3, #0
 8009416:	d003      	beq.n	8009420 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f000 f8c4 	bl	80095a6 <HAL_TIM_IC_CaptureCallback>
 800941e:	e005      	b.n	800942c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f000 f8b6 	bl	8009592 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f000 f8c7 	bl	80095ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2200      	movs	r2, #0
 8009430:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	691b      	ldr	r3, [r3, #16]
 8009438:	f003 0308 	and.w	r3, r3, #8
 800943c:	2b08      	cmp	r3, #8
 800943e:	d122      	bne.n	8009486 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	68db      	ldr	r3, [r3, #12]
 8009446:	f003 0308 	and.w	r3, r3, #8
 800944a:	2b08      	cmp	r3, #8
 800944c:	d11b      	bne.n	8009486 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f06f 0208 	mvn.w	r2, #8
 8009456:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2204      	movs	r2, #4
 800945c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	69db      	ldr	r3, [r3, #28]
 8009464:	f003 0303 	and.w	r3, r3, #3
 8009468:	2b00      	cmp	r3, #0
 800946a:	d003      	beq.n	8009474 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f000 f89a 	bl	80095a6 <HAL_TIM_IC_CaptureCallback>
 8009472:	e005      	b.n	8009480 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f000 f88c 	bl	8009592 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f000 f89d 	bl	80095ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2200      	movs	r2, #0
 8009484:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	691b      	ldr	r3, [r3, #16]
 800948c:	f003 0310 	and.w	r3, r3, #16
 8009490:	2b10      	cmp	r3, #16
 8009492:	d122      	bne.n	80094da <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	68db      	ldr	r3, [r3, #12]
 800949a:	f003 0310 	and.w	r3, r3, #16
 800949e:	2b10      	cmp	r3, #16
 80094a0:	d11b      	bne.n	80094da <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f06f 0210 	mvn.w	r2, #16
 80094aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2208      	movs	r2, #8
 80094b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	69db      	ldr	r3, [r3, #28]
 80094b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d003      	beq.n	80094c8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f000 f870 	bl	80095a6 <HAL_TIM_IC_CaptureCallback>
 80094c6:	e005      	b.n	80094d4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f000 f862 	bl	8009592 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 f873 	bl	80095ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2200      	movs	r2, #0
 80094d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	691b      	ldr	r3, [r3, #16]
 80094e0:	f003 0301 	and.w	r3, r3, #1
 80094e4:	2b01      	cmp	r3, #1
 80094e6:	d10e      	bne.n	8009506 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	68db      	ldr	r3, [r3, #12]
 80094ee:	f003 0301 	and.w	r3, r3, #1
 80094f2:	2b01      	cmp	r3, #1
 80094f4:	d107      	bne.n	8009506 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f06f 0201 	mvn.w	r2, #1
 80094fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f7fa fa6f 	bl	80039e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	691b      	ldr	r3, [r3, #16]
 800950c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009510:	2b80      	cmp	r3, #128	@ 0x80
 8009512:	d10e      	bne.n	8009532 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	68db      	ldr	r3, [r3, #12]
 800951a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800951e:	2b80      	cmp	r3, #128	@ 0x80
 8009520:	d107      	bne.n	8009532 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800952a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f000 f97f 	bl	8009830 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	691b      	ldr	r3, [r3, #16]
 8009538:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800953c:	2b40      	cmp	r3, #64	@ 0x40
 800953e:	d10e      	bne.n	800955e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	68db      	ldr	r3, [r3, #12]
 8009546:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800954a:	2b40      	cmp	r3, #64	@ 0x40
 800954c:	d107      	bne.n	800955e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009556:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f000 f838 	bl	80095ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	691b      	ldr	r3, [r3, #16]
 8009564:	f003 0320 	and.w	r3, r3, #32
 8009568:	2b20      	cmp	r3, #32
 800956a:	d10e      	bne.n	800958a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	68db      	ldr	r3, [r3, #12]
 8009572:	f003 0320 	and.w	r3, r3, #32
 8009576:	2b20      	cmp	r3, #32
 8009578:	d107      	bne.n	800958a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f06f 0220 	mvn.w	r2, #32
 8009582:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f000 f949 	bl	800981c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800958a:	bf00      	nop
 800958c:	3708      	adds	r7, #8
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}

08009592 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009592:	b480      	push	{r7}
 8009594:	b083      	sub	sp, #12
 8009596:	af00      	add	r7, sp, #0
 8009598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800959a:	bf00      	nop
 800959c:	370c      	adds	r7, #12
 800959e:	46bd      	mov	sp, r7
 80095a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a4:	4770      	bx	lr

080095a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80095a6:	b480      	push	{r7}
 80095a8:	b083      	sub	sp, #12
 80095aa:	af00      	add	r7, sp, #0
 80095ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80095ae:	bf00      	nop
 80095b0:	370c      	adds	r7, #12
 80095b2:	46bd      	mov	sp, r7
 80095b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b8:	4770      	bx	lr

080095ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80095ba:	b480      	push	{r7}
 80095bc:	b083      	sub	sp, #12
 80095be:	af00      	add	r7, sp, #0
 80095c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80095c2:	bf00      	nop
 80095c4:	370c      	adds	r7, #12
 80095c6:	46bd      	mov	sp, r7
 80095c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095cc:	4770      	bx	lr

080095ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80095ce:	b480      	push	{r7}
 80095d0:	b083      	sub	sp, #12
 80095d2:	af00      	add	r7, sp, #0
 80095d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80095d6:	bf00      	nop
 80095d8:	370c      	adds	r7, #12
 80095da:	46bd      	mov	sp, r7
 80095dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e0:	4770      	bx	lr
	...

080095e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b085      	sub	sp, #20
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
 80095ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	4a40      	ldr	r2, [pc, #256]	@ (80096f8 <TIM_Base_SetConfig+0x114>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d013      	beq.n	8009624 <TIM_Base_SetConfig+0x40>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009602:	d00f      	beq.n	8009624 <TIM_Base_SetConfig+0x40>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	4a3d      	ldr	r2, [pc, #244]	@ (80096fc <TIM_Base_SetConfig+0x118>)
 8009608:	4293      	cmp	r3, r2
 800960a:	d00b      	beq.n	8009624 <TIM_Base_SetConfig+0x40>
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	4a3c      	ldr	r2, [pc, #240]	@ (8009700 <TIM_Base_SetConfig+0x11c>)
 8009610:	4293      	cmp	r3, r2
 8009612:	d007      	beq.n	8009624 <TIM_Base_SetConfig+0x40>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	4a3b      	ldr	r2, [pc, #236]	@ (8009704 <TIM_Base_SetConfig+0x120>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d003      	beq.n	8009624 <TIM_Base_SetConfig+0x40>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	4a3a      	ldr	r2, [pc, #232]	@ (8009708 <TIM_Base_SetConfig+0x124>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d108      	bne.n	8009636 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800962a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	68fa      	ldr	r2, [r7, #12]
 8009632:	4313      	orrs	r3, r2
 8009634:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	4a2f      	ldr	r2, [pc, #188]	@ (80096f8 <TIM_Base_SetConfig+0x114>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d02b      	beq.n	8009696 <TIM_Base_SetConfig+0xb2>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009644:	d027      	beq.n	8009696 <TIM_Base_SetConfig+0xb2>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	4a2c      	ldr	r2, [pc, #176]	@ (80096fc <TIM_Base_SetConfig+0x118>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d023      	beq.n	8009696 <TIM_Base_SetConfig+0xb2>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	4a2b      	ldr	r2, [pc, #172]	@ (8009700 <TIM_Base_SetConfig+0x11c>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d01f      	beq.n	8009696 <TIM_Base_SetConfig+0xb2>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	4a2a      	ldr	r2, [pc, #168]	@ (8009704 <TIM_Base_SetConfig+0x120>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d01b      	beq.n	8009696 <TIM_Base_SetConfig+0xb2>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	4a29      	ldr	r2, [pc, #164]	@ (8009708 <TIM_Base_SetConfig+0x124>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d017      	beq.n	8009696 <TIM_Base_SetConfig+0xb2>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	4a28      	ldr	r2, [pc, #160]	@ (800970c <TIM_Base_SetConfig+0x128>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d013      	beq.n	8009696 <TIM_Base_SetConfig+0xb2>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	4a27      	ldr	r2, [pc, #156]	@ (8009710 <TIM_Base_SetConfig+0x12c>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d00f      	beq.n	8009696 <TIM_Base_SetConfig+0xb2>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	4a26      	ldr	r2, [pc, #152]	@ (8009714 <TIM_Base_SetConfig+0x130>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d00b      	beq.n	8009696 <TIM_Base_SetConfig+0xb2>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	4a25      	ldr	r2, [pc, #148]	@ (8009718 <TIM_Base_SetConfig+0x134>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d007      	beq.n	8009696 <TIM_Base_SetConfig+0xb2>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	4a24      	ldr	r2, [pc, #144]	@ (800971c <TIM_Base_SetConfig+0x138>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d003      	beq.n	8009696 <TIM_Base_SetConfig+0xb2>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	4a23      	ldr	r2, [pc, #140]	@ (8009720 <TIM_Base_SetConfig+0x13c>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d108      	bne.n	80096a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800969c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	68db      	ldr	r3, [r3, #12]
 80096a2:	68fa      	ldr	r2, [r7, #12]
 80096a4:	4313      	orrs	r3, r2
 80096a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	695b      	ldr	r3, [r3, #20]
 80096b2:	4313      	orrs	r3, r2
 80096b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	68fa      	ldr	r2, [r7, #12]
 80096ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	689a      	ldr	r2, [r3, #8]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	681a      	ldr	r2, [r3, #0]
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	4a0a      	ldr	r2, [pc, #40]	@ (80096f8 <TIM_Base_SetConfig+0x114>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d003      	beq.n	80096dc <TIM_Base_SetConfig+0xf8>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	4a0c      	ldr	r2, [pc, #48]	@ (8009708 <TIM_Base_SetConfig+0x124>)
 80096d8:	4293      	cmp	r3, r2
 80096da:	d103      	bne.n	80096e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	691a      	ldr	r2, [r3, #16]
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2201      	movs	r2, #1
 80096e8:	615a      	str	r2, [r3, #20]
}
 80096ea:	bf00      	nop
 80096ec:	3714      	adds	r7, #20
 80096ee:	46bd      	mov	sp, r7
 80096f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f4:	4770      	bx	lr
 80096f6:	bf00      	nop
 80096f8:	40010000 	.word	0x40010000
 80096fc:	40000400 	.word	0x40000400
 8009700:	40000800 	.word	0x40000800
 8009704:	40000c00 	.word	0x40000c00
 8009708:	40010400 	.word	0x40010400
 800970c:	40014000 	.word	0x40014000
 8009710:	40014400 	.word	0x40014400
 8009714:	40014800 	.word	0x40014800
 8009718:	40001800 	.word	0x40001800
 800971c:	40001c00 	.word	0x40001c00
 8009720:	40002000 	.word	0x40002000

08009724 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009724:	b480      	push	{r7}
 8009726:	b085      	sub	sp, #20
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
 800972c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009734:	2b01      	cmp	r3, #1
 8009736:	d101      	bne.n	800973c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009738:	2302      	movs	r3, #2
 800973a:	e05a      	b.n	80097f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2201      	movs	r2, #1
 8009740:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2202      	movs	r2, #2
 8009748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	685b      	ldr	r3, [r3, #4]
 8009752:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	689b      	ldr	r3, [r3, #8]
 800975a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009762:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	68fa      	ldr	r2, [r7, #12]
 800976a:	4313      	orrs	r3, r2
 800976c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	68fa      	ldr	r2, [r7, #12]
 8009774:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	4a21      	ldr	r2, [pc, #132]	@ (8009800 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d022      	beq.n	80097c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009788:	d01d      	beq.n	80097c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	4a1d      	ldr	r2, [pc, #116]	@ (8009804 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009790:	4293      	cmp	r3, r2
 8009792:	d018      	beq.n	80097c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	4a1b      	ldr	r2, [pc, #108]	@ (8009808 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d013      	beq.n	80097c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	4a1a      	ldr	r2, [pc, #104]	@ (800980c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d00e      	beq.n	80097c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	4a18      	ldr	r2, [pc, #96]	@ (8009810 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d009      	beq.n	80097c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	4a17      	ldr	r2, [pc, #92]	@ (8009814 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80097b8:	4293      	cmp	r3, r2
 80097ba:	d004      	beq.n	80097c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4a15      	ldr	r2, [pc, #84]	@ (8009818 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80097c2:	4293      	cmp	r3, r2
 80097c4:	d10c      	bne.n	80097e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80097cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	685b      	ldr	r3, [r3, #4]
 80097d2:	68ba      	ldr	r2, [r7, #8]
 80097d4:	4313      	orrs	r3, r2
 80097d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	68ba      	ldr	r2, [r7, #8]
 80097de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2201      	movs	r2, #1
 80097e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2200      	movs	r2, #0
 80097ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80097f0:	2300      	movs	r3, #0
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3714      	adds	r7, #20
 80097f6:	46bd      	mov	sp, r7
 80097f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fc:	4770      	bx	lr
 80097fe:	bf00      	nop
 8009800:	40010000 	.word	0x40010000
 8009804:	40000400 	.word	0x40000400
 8009808:	40000800 	.word	0x40000800
 800980c:	40000c00 	.word	0x40000c00
 8009810:	40010400 	.word	0x40010400
 8009814:	40014000 	.word	0x40014000
 8009818:	40001800 	.word	0x40001800

0800981c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800981c:	b480      	push	{r7}
 800981e:	b083      	sub	sp, #12
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009824:	bf00      	nop
 8009826:	370c      	adds	r7, #12
 8009828:	46bd      	mov	sp, r7
 800982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982e:	4770      	bx	lr

08009830 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009830:	b480      	push	{r7}
 8009832:	b083      	sub	sp, #12
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009838:	bf00      	nop
 800983a:	370c      	adds	r7, #12
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr

08009844 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b082      	sub	sp, #8
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d101      	bne.n	8009856 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009852:	2301      	movs	r3, #1
 8009854:	e03f      	b.n	80098d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800985c:	b2db      	uxtb	r3, r3
 800985e:	2b00      	cmp	r3, #0
 8009860:	d106      	bne.n	8009870 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2200      	movs	r2, #0
 8009866:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f7fb fe48 	bl	8005500 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2224      	movs	r2, #36	@ 0x24
 8009874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	68da      	ldr	r2, [r3, #12]
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009886:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f000 fe23 	bl	800a4d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	691a      	ldr	r2, [r3, #16]
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800989c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	695a      	ldr	r2, [r3, #20]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80098ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	68da      	ldr	r2, [r3, #12]
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80098bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2200      	movs	r2, #0
 80098c2:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2220      	movs	r2, #32
 80098c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2220      	movs	r2, #32
 80098d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80098d4:	2300      	movs	r3, #0
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3708      	adds	r7, #8
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}

080098de <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80098de:	b580      	push	{r7, lr}
 80098e0:	b08a      	sub	sp, #40	@ 0x28
 80098e2:	af02      	add	r7, sp, #8
 80098e4:	60f8      	str	r0, [r7, #12]
 80098e6:	60b9      	str	r1, [r7, #8]
 80098e8:	603b      	str	r3, [r7, #0]
 80098ea:	4613      	mov	r3, r2
 80098ec:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80098ee:	2300      	movs	r3, #0
 80098f0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80098f8:	b2db      	uxtb	r3, r3
 80098fa:	2b20      	cmp	r3, #32
 80098fc:	d17c      	bne.n	80099f8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d002      	beq.n	800990a <HAL_UART_Transmit+0x2c>
 8009904:	88fb      	ldrh	r3, [r7, #6]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d101      	bne.n	800990e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800990a:	2301      	movs	r3, #1
 800990c:	e075      	b.n	80099fa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009914:	2b01      	cmp	r3, #1
 8009916:	d101      	bne.n	800991c <HAL_UART_Transmit+0x3e>
 8009918:	2302      	movs	r3, #2
 800991a:	e06e      	b.n	80099fa <HAL_UART_Transmit+0x11c>
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	2201      	movs	r2, #1
 8009920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	2200      	movs	r2, #0
 8009928:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2221      	movs	r2, #33	@ 0x21
 800992e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009932:	f7fc f8eb 	bl	8005b0c <HAL_GetTick>
 8009936:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	88fa      	ldrh	r2, [r7, #6]
 800993c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	88fa      	ldrh	r2, [r7, #6]
 8009942:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	689b      	ldr	r3, [r3, #8]
 8009948:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800994c:	d108      	bne.n	8009960 <HAL_UART_Transmit+0x82>
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	691b      	ldr	r3, [r3, #16]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d104      	bne.n	8009960 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009956:	2300      	movs	r3, #0
 8009958:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	61bb      	str	r3, [r7, #24]
 800995e:	e003      	b.n	8009968 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009964:	2300      	movs	r3, #0
 8009966:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	2200      	movs	r2, #0
 800996c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8009970:	e02a      	b.n	80099c8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	9300      	str	r3, [sp, #0]
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	2200      	movs	r2, #0
 800997a:	2180      	movs	r1, #128	@ 0x80
 800997c:	68f8      	ldr	r0, [r7, #12]
 800997e:	f000 fb63 	bl	800a048 <UART_WaitOnFlagUntilTimeout>
 8009982:	4603      	mov	r3, r0
 8009984:	2b00      	cmp	r3, #0
 8009986:	d001      	beq.n	800998c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009988:	2303      	movs	r3, #3
 800998a:	e036      	b.n	80099fa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800998c:	69fb      	ldr	r3, [r7, #28]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d10b      	bne.n	80099aa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009992:	69bb      	ldr	r3, [r7, #24]
 8009994:	881b      	ldrh	r3, [r3, #0]
 8009996:	461a      	mov	r2, r3
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80099a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80099a2:	69bb      	ldr	r3, [r7, #24]
 80099a4:	3302      	adds	r3, #2
 80099a6:	61bb      	str	r3, [r7, #24]
 80099a8:	e007      	b.n	80099ba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80099aa:	69fb      	ldr	r3, [r7, #28]
 80099ac:	781a      	ldrb	r2, [r3, #0]
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80099b4:	69fb      	ldr	r3, [r7, #28]
 80099b6:	3301      	adds	r3, #1
 80099b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80099be:	b29b      	uxth	r3, r3
 80099c0:	3b01      	subs	r3, #1
 80099c2:	b29a      	uxth	r2, r3
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80099cc:	b29b      	uxth	r3, r3
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d1cf      	bne.n	8009972 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	9300      	str	r3, [sp, #0]
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	2200      	movs	r2, #0
 80099da:	2140      	movs	r1, #64	@ 0x40
 80099dc:	68f8      	ldr	r0, [r7, #12]
 80099de:	f000 fb33 	bl	800a048 <UART_WaitOnFlagUntilTimeout>
 80099e2:	4603      	mov	r3, r0
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d001      	beq.n	80099ec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80099e8:	2303      	movs	r3, #3
 80099ea:	e006      	b.n	80099fa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	2220      	movs	r2, #32
 80099f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80099f4:	2300      	movs	r3, #0
 80099f6:	e000      	b.n	80099fa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80099f8:	2302      	movs	r3, #2
  }
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3720      	adds	r7, #32
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}

08009a02 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009a02:	b480      	push	{r7}
 8009a04:	b085      	sub	sp, #20
 8009a06:	af00      	add	r7, sp, #0
 8009a08:	60f8      	str	r0, [r7, #12]
 8009a0a:	60b9      	str	r1, [r7, #8]
 8009a0c:	4613      	mov	r3, r2
 8009a0e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009a16:	b2db      	uxtb	r3, r3
 8009a18:	2b20      	cmp	r3, #32
 8009a1a:	d130      	bne.n	8009a7e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d002      	beq.n	8009a28 <HAL_UART_Transmit_IT+0x26>
 8009a22:	88fb      	ldrh	r3, [r7, #6]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d101      	bne.n	8009a2c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8009a28:	2301      	movs	r3, #1
 8009a2a:	e029      	b.n	8009a80 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009a32:	2b01      	cmp	r3, #1
 8009a34:	d101      	bne.n	8009a3a <HAL_UART_Transmit_IT+0x38>
 8009a36:	2302      	movs	r3, #2
 8009a38:	e022      	b.n	8009a80 <HAL_UART_Transmit_IT+0x7e>
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	2201      	movs	r2, #1
 8009a3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->pTxBuffPtr = pData;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	68ba      	ldr	r2, [r7, #8]
 8009a46:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	88fa      	ldrh	r2, [r7, #6]
 8009a4c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	88fa      	ldrh	r2, [r7, #6]
 8009a52:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	2200      	movs	r2, #0
 8009a58:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	2221      	movs	r2, #33	@ 0x21
 8009a5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	2200      	movs	r2, #0
 8009a66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	68da      	ldr	r2, [r3, #12]
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009a78:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	e000      	b.n	8009a80 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8009a7e:	2302      	movs	r3, #2
  }
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3714      	adds	r7, #20
 8009a84:	46bd      	mov	sp, r7
 8009a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8a:	4770      	bx	lr

08009a8c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b084      	sub	sp, #16
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	60f8      	str	r0, [r7, #12]
 8009a94:	60b9      	str	r1, [r7, #8]
 8009a96:	4613      	mov	r3, r2
 8009a98:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009aa0:	b2db      	uxtb	r3, r3
 8009aa2:	2b20      	cmp	r3, #32
 8009aa4:	d11d      	bne.n	8009ae2 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d002      	beq.n	8009ab2 <HAL_UART_Receive_IT+0x26>
 8009aac:	88fb      	ldrh	r3, [r7, #6]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d101      	bne.n	8009ab6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	e016      	b.n	8009ae4 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009abc:	2b01      	cmp	r3, #1
 8009abe:	d101      	bne.n	8009ac4 <HAL_UART_Receive_IT+0x38>
 8009ac0:	2302      	movs	r3, #2
 8009ac2:	e00f      	b.n	8009ae4 <HAL_UART_Receive_IT+0x58>
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009ad2:	88fb      	ldrh	r3, [r7, #6]
 8009ad4:	461a      	mov	r2, r3
 8009ad6:	68b9      	ldr	r1, [r7, #8]
 8009ad8:	68f8      	ldr	r0, [r7, #12]
 8009ada:	f000 fb23 	bl	800a124 <UART_Start_Receive_IT>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	e000      	b.n	8009ae4 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009ae2:	2302      	movs	r3, #2
  }
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3710      	adds	r7, #16
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}

08009aec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b0ba      	sub	sp, #232	@ 0xe8
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	68db      	ldr	r3, [r3, #12]
 8009b04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	695b      	ldr	r3, [r3, #20]
 8009b0e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8009b12:	2300      	movs	r3, #0
 8009b14:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b22:	f003 030f 	and.w	r3, r3, #15
 8009b26:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8009b2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d10f      	bne.n	8009b52 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b36:	f003 0320 	and.w	r3, r3, #32
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d009      	beq.n	8009b52 <HAL_UART_IRQHandler+0x66>
 8009b3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b42:	f003 0320 	and.w	r3, r3, #32
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d003      	beq.n	8009b52 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f000 fc07 	bl	800a35e <UART_Receive_IT>
      return;
 8009b50:	e256      	b.n	800a000 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009b52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	f000 80de 	beq.w	8009d18 <HAL_UART_IRQHandler+0x22c>
 8009b5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b60:	f003 0301 	and.w	r3, r3, #1
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d106      	bne.n	8009b76 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b6c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	f000 80d1 	beq.w	8009d18 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b7a:	f003 0301 	and.w	r3, r3, #1
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d00b      	beq.n	8009b9a <HAL_UART_IRQHandler+0xae>
 8009b82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d005      	beq.n	8009b9a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b92:	f043 0201 	orr.w	r2, r3, #1
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b9e:	f003 0304 	and.w	r3, r3, #4
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d00b      	beq.n	8009bbe <HAL_UART_IRQHandler+0xd2>
 8009ba6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009baa:	f003 0301 	and.w	r3, r3, #1
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d005      	beq.n	8009bbe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bb6:	f043 0202 	orr.w	r2, r3, #2
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009bc2:	f003 0302 	and.w	r3, r3, #2
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d00b      	beq.n	8009be2 <HAL_UART_IRQHandler+0xf6>
 8009bca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009bce:	f003 0301 	and.w	r3, r3, #1
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d005      	beq.n	8009be2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bda:	f043 0204 	orr.w	r2, r3, #4
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009be6:	f003 0308 	and.w	r3, r3, #8
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d011      	beq.n	8009c12 <HAL_UART_IRQHandler+0x126>
 8009bee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009bf2:	f003 0320 	and.w	r3, r3, #32
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d105      	bne.n	8009c06 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009bfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009bfe:	f003 0301 	and.w	r3, r3, #1
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d005      	beq.n	8009c12 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c0a:	f043 0208 	orr.w	r2, r3, #8
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	f000 81ed 	beq.w	8009ff6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009c1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c20:	f003 0320 	and.w	r3, r3, #32
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d008      	beq.n	8009c3a <HAL_UART_IRQHandler+0x14e>
 8009c28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c2c:	f003 0320 	and.w	r3, r3, #32
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d002      	beq.n	8009c3a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f000 fb92 	bl	800a35e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	695b      	ldr	r3, [r3, #20]
 8009c40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c44:	2b40      	cmp	r3, #64	@ 0x40
 8009c46:	bf0c      	ite	eq
 8009c48:	2301      	moveq	r3, #1
 8009c4a:	2300      	movne	r3, #0
 8009c4c:	b2db      	uxtb	r3, r3
 8009c4e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c56:	f003 0308 	and.w	r3, r3, #8
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d103      	bne.n	8009c66 <HAL_UART_IRQHandler+0x17a>
 8009c5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d04f      	beq.n	8009d06 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f000 fa9a 	bl	800a1a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	695b      	ldr	r3, [r3, #20]
 8009c72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c76:	2b40      	cmp	r3, #64	@ 0x40
 8009c78:	d141      	bne.n	8009cfe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	3314      	adds	r3, #20
 8009c80:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c84:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009c88:	e853 3f00 	ldrex	r3, [r3]
 8009c8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009c90:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009c94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009c98:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	3314      	adds	r3, #20
 8009ca2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009ca6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009caa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009cb2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009cb6:	e841 2300 	strex	r3, r2, [r1]
 8009cba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009cbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d1d9      	bne.n	8009c7a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d013      	beq.n	8009cf6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cd2:	4a7d      	ldr	r2, [pc, #500]	@ (8009ec8 <HAL_UART_IRQHandler+0x3dc>)
 8009cd4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f7fc fd53 	bl	8006786 <HAL_DMA_Abort_IT>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d016      	beq.n	8009d14 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009cec:	687a      	ldr	r2, [r7, #4]
 8009cee:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8009cf0:	4610      	mov	r0, r2
 8009cf2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cf4:	e00e      	b.n	8009d14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f000 f990 	bl	800a01c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cfc:	e00a      	b.n	8009d14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f000 f98c 	bl	800a01c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d04:	e006      	b.n	8009d14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f000 f988 	bl	800a01c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8009d12:	e170      	b.n	8009ff6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d14:	bf00      	nop
    return;
 8009d16:	e16e      	b.n	8009ff6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d1c:	2b01      	cmp	r3, #1
 8009d1e:	f040 814a 	bne.w	8009fb6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d26:	f003 0310 	and.w	r3, r3, #16
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	f000 8143 	beq.w	8009fb6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009d30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d34:	f003 0310 	and.w	r3, r3, #16
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	f000 813c 	beq.w	8009fb6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009d3e:	2300      	movs	r3, #0
 8009d40:	60bb      	str	r3, [r7, #8]
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	60bb      	str	r3, [r7, #8]
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	685b      	ldr	r3, [r3, #4]
 8009d50:	60bb      	str	r3, [r7, #8]
 8009d52:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	695b      	ldr	r3, [r3, #20]
 8009d5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d5e:	2b40      	cmp	r3, #64	@ 0x40
 8009d60:	f040 80b4 	bne.w	8009ecc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	685b      	ldr	r3, [r3, #4]
 8009d6c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009d70:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	f000 8140 	beq.w	8009ffa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009d7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009d82:	429a      	cmp	r2, r3
 8009d84:	f080 8139 	bcs.w	8009ffa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009d8e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d94:	69db      	ldr	r3, [r3, #28]
 8009d96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d9a:	f000 8088 	beq.w	8009eae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	330c      	adds	r3, #12
 8009da4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009da8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009dac:	e853 3f00 	ldrex	r3, [r3]
 8009db0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009db4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009db8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009dbc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	330c      	adds	r3, #12
 8009dc6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009dca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009dce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dd2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009dd6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009dda:	e841 2300 	strex	r3, r2, [r1]
 8009dde:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009de2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d1d9      	bne.n	8009d9e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	3314      	adds	r3, #20
 8009df0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009df2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009df4:	e853 3f00 	ldrex	r3, [r3]
 8009df8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009dfa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009dfc:	f023 0301 	bic.w	r3, r3, #1
 8009e00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	3314      	adds	r3, #20
 8009e0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009e0e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009e12:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e14:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009e16:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009e1a:	e841 2300 	strex	r3, r2, [r1]
 8009e1e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009e20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d1e1      	bne.n	8009dea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	3314      	adds	r3, #20
 8009e2c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009e30:	e853 3f00 	ldrex	r3, [r3]
 8009e34:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009e36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009e38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	3314      	adds	r3, #20
 8009e46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009e4a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009e4c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e4e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009e50:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009e52:	e841 2300 	strex	r3, r2, [r1]
 8009e56:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009e58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d1e3      	bne.n	8009e26 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2220      	movs	r2, #32
 8009e62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	330c      	adds	r3, #12
 8009e72:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e76:	e853 3f00 	ldrex	r3, [r3]
 8009e7a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009e7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e7e:	f023 0310 	bic.w	r3, r3, #16
 8009e82:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	330c      	adds	r3, #12
 8009e8c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009e90:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009e92:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e94:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009e96:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009e98:	e841 2300 	strex	r3, r2, [r1]
 8009e9c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009e9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d1e3      	bne.n	8009e6c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f7fc fbfc 	bl	80066a6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009eb6:	b29b      	uxth	r3, r3
 8009eb8:	1ad3      	subs	r3, r2, r3
 8009eba:	b29b      	uxth	r3, r3
 8009ebc:	4619      	mov	r1, r3
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f000 f8b6 	bl	800a030 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009ec4:	e099      	b.n	8009ffa <HAL_UART_IRQHandler+0x50e>
 8009ec6:	bf00      	nop
 8009ec8:	0800a267 	.word	0x0800a267
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009ed4:	b29b      	uxth	r3, r3
 8009ed6:	1ad3      	subs	r3, r2, r3
 8009ed8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009ee0:	b29b      	uxth	r3, r3
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	f000 808b 	beq.w	8009ffe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009ee8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	f000 8086 	beq.w	8009ffe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	330c      	adds	r3, #12
 8009ef8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009efc:	e853 3f00 	ldrex	r3, [r3]
 8009f00:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009f02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009f08:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	330c      	adds	r3, #12
 8009f12:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009f16:	647a      	str	r2, [r7, #68]	@ 0x44
 8009f18:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f1a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009f1c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f1e:	e841 2300 	strex	r3, r2, [r1]
 8009f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009f24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d1e3      	bne.n	8009ef2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	3314      	adds	r3, #20
 8009f30:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f34:	e853 3f00 	ldrex	r3, [r3]
 8009f38:	623b      	str	r3, [r7, #32]
   return(result);
 8009f3a:	6a3b      	ldr	r3, [r7, #32]
 8009f3c:	f023 0301 	bic.w	r3, r3, #1
 8009f40:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	3314      	adds	r3, #20
 8009f4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009f4e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009f54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f56:	e841 2300 	strex	r3, r2, [r1]
 8009f5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d1e3      	bne.n	8009f2a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2220      	movs	r2, #32
 8009f66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	330c      	adds	r3, #12
 8009f76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f78:	693b      	ldr	r3, [r7, #16]
 8009f7a:	e853 3f00 	ldrex	r3, [r3]
 8009f7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	f023 0310 	bic.w	r3, r3, #16
 8009f86:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	330c      	adds	r3, #12
 8009f90:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009f94:	61fa      	str	r2, [r7, #28]
 8009f96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f98:	69b9      	ldr	r1, [r7, #24]
 8009f9a:	69fa      	ldr	r2, [r7, #28]
 8009f9c:	e841 2300 	strex	r3, r2, [r1]
 8009fa0:	617b      	str	r3, [r7, #20]
   return(result);
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d1e3      	bne.n	8009f70 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009fa8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009fac:	4619      	mov	r1, r3
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f000 f83e 	bl	800a030 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009fb4:	e023      	b.n	8009ffe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009fba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d009      	beq.n	8009fd6 <HAL_UART_IRQHandler+0x4ea>
 8009fc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009fc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d003      	beq.n	8009fd6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f000 f95d 	bl	800a28e <UART_Transmit_IT>
    return;
 8009fd4:	e014      	b.n	800a000 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009fda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d00e      	beq.n	800a000 <HAL_UART_IRQHandler+0x514>
 8009fe2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009fe6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d008      	beq.n	800a000 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	f000 f99d 	bl	800a32e <UART_EndTransmit_IT>
    return;
 8009ff4:	e004      	b.n	800a000 <HAL_UART_IRQHandler+0x514>
    return;
 8009ff6:	bf00      	nop
 8009ff8:	e002      	b.n	800a000 <HAL_UART_IRQHandler+0x514>
      return;
 8009ffa:	bf00      	nop
 8009ffc:	e000      	b.n	800a000 <HAL_UART_IRQHandler+0x514>
      return;
 8009ffe:	bf00      	nop
  }
}
 800a000:	37e8      	adds	r7, #232	@ 0xe8
 800a002:	46bd      	mov	sp, r7
 800a004:	bd80      	pop	{r7, pc}
 800a006:	bf00      	nop

0800a008 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a008:	b480      	push	{r7}
 800a00a:	b083      	sub	sp, #12
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a010:	bf00      	nop
 800a012:	370c      	adds	r7, #12
 800a014:	46bd      	mov	sp, r7
 800a016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01a:	4770      	bx	lr

0800a01c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a01c:	b480      	push	{r7}
 800a01e:	b083      	sub	sp, #12
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a024:	bf00      	nop
 800a026:	370c      	adds	r7, #12
 800a028:	46bd      	mov	sp, r7
 800a02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02e:	4770      	bx	lr

0800a030 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a030:	b480      	push	{r7}
 800a032:	b083      	sub	sp, #12
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
 800a038:	460b      	mov	r3, r1
 800a03a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a03c:	bf00      	nop
 800a03e:	370c      	adds	r7, #12
 800a040:	46bd      	mov	sp, r7
 800a042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a046:	4770      	bx	lr

0800a048 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b090      	sub	sp, #64	@ 0x40
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	60f8      	str	r0, [r7, #12]
 800a050:	60b9      	str	r1, [r7, #8]
 800a052:	603b      	str	r3, [r7, #0]
 800a054:	4613      	mov	r3, r2
 800a056:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a058:	e050      	b.n	800a0fc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a05a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a05c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a060:	d04c      	beq.n	800a0fc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a062:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a064:	2b00      	cmp	r3, #0
 800a066:	d007      	beq.n	800a078 <UART_WaitOnFlagUntilTimeout+0x30>
 800a068:	f7fb fd50 	bl	8005b0c <HAL_GetTick>
 800a06c:	4602      	mov	r2, r0
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	1ad3      	subs	r3, r2, r3
 800a072:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a074:	429a      	cmp	r2, r3
 800a076:	d241      	bcs.n	800a0fc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	330c      	adds	r3, #12
 800a07e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a082:	e853 3f00 	ldrex	r3, [r3]
 800a086:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a08a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800a08e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	330c      	adds	r3, #12
 800a096:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a098:	637a      	str	r2, [r7, #52]	@ 0x34
 800a09a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a09c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a09e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a0a0:	e841 2300 	strex	r3, r2, [r1]
 800a0a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a0a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d1e5      	bne.n	800a078 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	3314      	adds	r3, #20
 800a0b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0b4:	697b      	ldr	r3, [r7, #20]
 800a0b6:	e853 3f00 	ldrex	r3, [r3]
 800a0ba:	613b      	str	r3, [r7, #16]
   return(result);
 800a0bc:	693b      	ldr	r3, [r7, #16]
 800a0be:	f023 0301 	bic.w	r3, r3, #1
 800a0c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	3314      	adds	r3, #20
 800a0ca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a0cc:	623a      	str	r2, [r7, #32]
 800a0ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0d0:	69f9      	ldr	r1, [r7, #28]
 800a0d2:	6a3a      	ldr	r2, [r7, #32]
 800a0d4:	e841 2300 	strex	r3, r2, [r1]
 800a0d8:	61bb      	str	r3, [r7, #24]
   return(result);
 800a0da:	69bb      	ldr	r3, [r7, #24]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d1e5      	bne.n	800a0ac <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	2220      	movs	r2, #32
 800a0e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	2220      	movs	r2, #32
 800a0ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 800a0f8:	2303      	movs	r3, #3
 800a0fa:	e00f      	b.n	800a11c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	681a      	ldr	r2, [r3, #0]
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	4013      	ands	r3, r2
 800a106:	68ba      	ldr	r2, [r7, #8]
 800a108:	429a      	cmp	r2, r3
 800a10a:	bf0c      	ite	eq
 800a10c:	2301      	moveq	r3, #1
 800a10e:	2300      	movne	r3, #0
 800a110:	b2db      	uxtb	r3, r3
 800a112:	461a      	mov	r2, r3
 800a114:	79fb      	ldrb	r3, [r7, #7]
 800a116:	429a      	cmp	r2, r3
 800a118:	d09f      	beq.n	800a05a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a11a:	2300      	movs	r3, #0
}
 800a11c:	4618      	mov	r0, r3
 800a11e:	3740      	adds	r7, #64	@ 0x40
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}

0800a124 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a124:	b480      	push	{r7}
 800a126:	b085      	sub	sp, #20
 800a128:	af00      	add	r7, sp, #0
 800a12a:	60f8      	str	r0, [r7, #12]
 800a12c:	60b9      	str	r1, [r7, #8]
 800a12e:	4613      	mov	r3, r2
 800a130:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	68ba      	ldr	r2, [r7, #8]
 800a136:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	88fa      	ldrh	r2, [r7, #6]
 800a13c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	88fa      	ldrh	r2, [r7, #6]
 800a142:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	2200      	movs	r2, #0
 800a148:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	2222      	movs	r2, #34	@ 0x22
 800a14e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	2200      	movs	r2, #0
 800a156:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	691b      	ldr	r3, [r3, #16]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d007      	beq.n	800a172 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	68da      	ldr	r2, [r3, #12]
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a170:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	695a      	ldr	r2, [r3, #20]
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	f042 0201 	orr.w	r2, r2, #1
 800a180:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	68da      	ldr	r2, [r3, #12]
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f042 0220 	orr.w	r2, r2, #32
 800a190:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a192:	2300      	movs	r3, #0
}
 800a194:	4618      	mov	r0, r3
 800a196:	3714      	adds	r7, #20
 800a198:	46bd      	mov	sp, r7
 800a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19e:	4770      	bx	lr

0800a1a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b095      	sub	sp, #84	@ 0x54
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	330c      	adds	r3, #12
 800a1ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1b2:	e853 3f00 	ldrex	r3, [r3]
 800a1b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a1b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a1be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	330c      	adds	r3, #12
 800a1c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a1c8:	643a      	str	r2, [r7, #64]	@ 0x40
 800a1ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a1ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a1d0:	e841 2300 	strex	r3, r2, [r1]
 800a1d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a1d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d1e5      	bne.n	800a1a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	3314      	adds	r3, #20
 800a1e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1e4:	6a3b      	ldr	r3, [r7, #32]
 800a1e6:	e853 3f00 	ldrex	r3, [r3]
 800a1ea:	61fb      	str	r3, [r7, #28]
   return(result);
 800a1ec:	69fb      	ldr	r3, [r7, #28]
 800a1ee:	f023 0301 	bic.w	r3, r3, #1
 800a1f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	3314      	adds	r3, #20
 800a1fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a1fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a1fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a200:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a202:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a204:	e841 2300 	strex	r3, r2, [r1]
 800a208:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a20a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d1e5      	bne.n	800a1dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a214:	2b01      	cmp	r3, #1
 800a216:	d119      	bne.n	800a24c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	330c      	adds	r3, #12
 800a21e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	e853 3f00 	ldrex	r3, [r3]
 800a226:	60bb      	str	r3, [r7, #8]
   return(result);
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	f023 0310 	bic.w	r3, r3, #16
 800a22e:	647b      	str	r3, [r7, #68]	@ 0x44
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	330c      	adds	r3, #12
 800a236:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a238:	61ba      	str	r2, [r7, #24]
 800a23a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a23c:	6979      	ldr	r1, [r7, #20]
 800a23e:	69ba      	ldr	r2, [r7, #24]
 800a240:	e841 2300 	strex	r3, r2, [r1]
 800a244:	613b      	str	r3, [r7, #16]
   return(result);
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d1e5      	bne.n	800a218 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2220      	movs	r2, #32
 800a250:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2200      	movs	r2, #0
 800a258:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a25a:	bf00      	nop
 800a25c:	3754      	adds	r7, #84	@ 0x54
 800a25e:	46bd      	mov	sp, r7
 800a260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a264:	4770      	bx	lr

0800a266 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a266:	b580      	push	{r7, lr}
 800a268:	b084      	sub	sp, #16
 800a26a:	af00      	add	r7, sp, #0
 800a26c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a272:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	2200      	movs	r2, #0
 800a278:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	2200      	movs	r2, #0
 800a27e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a280:	68f8      	ldr	r0, [r7, #12]
 800a282:	f7ff fecb 	bl	800a01c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a286:	bf00      	nop
 800a288:	3710      	adds	r7, #16
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}

0800a28e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a28e:	b480      	push	{r7}
 800a290:	b085      	sub	sp, #20
 800a292:	af00      	add	r7, sp, #0
 800a294:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a29c:	b2db      	uxtb	r3, r3
 800a29e:	2b21      	cmp	r3, #33	@ 0x21
 800a2a0:	d13e      	bne.n	800a320 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	689b      	ldr	r3, [r3, #8]
 800a2a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a2aa:	d114      	bne.n	800a2d6 <UART_Transmit_IT+0x48>
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	691b      	ldr	r3, [r3, #16]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d110      	bne.n	800a2d6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6a1b      	ldr	r3, [r3, #32]
 800a2b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	881b      	ldrh	r3, [r3, #0]
 800a2be:	461a      	mov	r2, r3
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a2c8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6a1b      	ldr	r3, [r3, #32]
 800a2ce:	1c9a      	adds	r2, r3, #2
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	621a      	str	r2, [r3, #32]
 800a2d4:	e008      	b.n	800a2e8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6a1b      	ldr	r3, [r3, #32]
 800a2da:	1c59      	adds	r1, r3, #1
 800a2dc:	687a      	ldr	r2, [r7, #4]
 800a2de:	6211      	str	r1, [r2, #32]
 800a2e0:	781a      	ldrb	r2, [r3, #0]
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a2ec:	b29b      	uxth	r3, r3
 800a2ee:	3b01      	subs	r3, #1
 800a2f0:	b29b      	uxth	r3, r3
 800a2f2:	687a      	ldr	r2, [r7, #4]
 800a2f4:	4619      	mov	r1, r3
 800a2f6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d10f      	bne.n	800a31c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	68da      	ldr	r2, [r3, #12]
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a30a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	68da      	ldr	r2, [r3, #12]
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a31a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a31c:	2300      	movs	r3, #0
 800a31e:	e000      	b.n	800a322 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a320:	2302      	movs	r3, #2
  }
}
 800a322:	4618      	mov	r0, r3
 800a324:	3714      	adds	r7, #20
 800a326:	46bd      	mov	sp, r7
 800a328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32c:	4770      	bx	lr

0800a32e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a32e:	b580      	push	{r7, lr}
 800a330:	b082      	sub	sp, #8
 800a332:	af00      	add	r7, sp, #0
 800a334:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	68da      	ldr	r2, [r3, #12]
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a344:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2220      	movs	r2, #32
 800a34a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f7ff fe5a 	bl	800a008 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a354:	2300      	movs	r3, #0
}
 800a356:	4618      	mov	r0, r3
 800a358:	3708      	adds	r7, #8
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}

0800a35e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a35e:	b580      	push	{r7, lr}
 800a360:	b08c      	sub	sp, #48	@ 0x30
 800a362:	af00      	add	r7, sp, #0
 800a364:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a36c:	b2db      	uxtb	r3, r3
 800a36e:	2b22      	cmp	r3, #34	@ 0x22
 800a370:	f040 80ab 	bne.w	800a4ca <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	689b      	ldr	r3, [r3, #8]
 800a378:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a37c:	d117      	bne.n	800a3ae <UART_Receive_IT+0x50>
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	691b      	ldr	r3, [r3, #16]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d113      	bne.n	800a3ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a386:	2300      	movs	r3, #0
 800a388:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a38e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	685b      	ldr	r3, [r3, #4]
 800a396:	b29b      	uxth	r3, r3
 800a398:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a39c:	b29a      	uxth	r2, r3
 800a39e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3a6:	1c9a      	adds	r2, r3, #2
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	629a      	str	r2, [r3, #40]	@ 0x28
 800a3ac:	e026      	b.n	800a3fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	689b      	ldr	r3, [r3, #8]
 800a3bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a3c0:	d007      	beq.n	800a3d2 <UART_Receive_IT+0x74>
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	689b      	ldr	r3, [r3, #8]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d10a      	bne.n	800a3e0 <UART_Receive_IT+0x82>
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	691b      	ldr	r3, [r3, #16]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d106      	bne.n	800a3e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	b2da      	uxtb	r2, r3
 800a3da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3dc:	701a      	strb	r2, [r3, #0]
 800a3de:	e008      	b.n	800a3f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	685b      	ldr	r3, [r3, #4]
 800a3e6:	b2db      	uxtb	r3, r3
 800a3e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a3ec:	b2da      	uxtb	r2, r3
 800a3ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3f6:	1c5a      	adds	r2, r3, #1
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a400:	b29b      	uxth	r3, r3
 800a402:	3b01      	subs	r3, #1
 800a404:	b29b      	uxth	r3, r3
 800a406:	687a      	ldr	r2, [r7, #4]
 800a408:	4619      	mov	r1, r3
 800a40a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d15a      	bne.n	800a4c6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	68da      	ldr	r2, [r3, #12]
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f022 0220 	bic.w	r2, r2, #32
 800a41e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	68da      	ldr	r2, [r3, #12]
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a42e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	695a      	ldr	r2, [r3, #20]
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f022 0201 	bic.w	r2, r2, #1
 800a43e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2220      	movs	r2, #32
 800a444:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a44c:	2b01      	cmp	r3, #1
 800a44e:	d135      	bne.n	800a4bc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2200      	movs	r2, #0
 800a454:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	330c      	adds	r3, #12
 800a45c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	e853 3f00 	ldrex	r3, [r3]
 800a464:	613b      	str	r3, [r7, #16]
   return(result);
 800a466:	693b      	ldr	r3, [r7, #16]
 800a468:	f023 0310 	bic.w	r3, r3, #16
 800a46c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	330c      	adds	r3, #12
 800a474:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a476:	623a      	str	r2, [r7, #32]
 800a478:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a47a:	69f9      	ldr	r1, [r7, #28]
 800a47c:	6a3a      	ldr	r2, [r7, #32]
 800a47e:	e841 2300 	strex	r3, r2, [r1]
 800a482:	61bb      	str	r3, [r7, #24]
   return(result);
 800a484:	69bb      	ldr	r3, [r7, #24]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d1e5      	bne.n	800a456 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f003 0310 	and.w	r3, r3, #16
 800a494:	2b10      	cmp	r3, #16
 800a496:	d10a      	bne.n	800a4ae <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a498:	2300      	movs	r3, #0
 800a49a:	60fb      	str	r3, [r7, #12]
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	60fb      	str	r3, [r7, #12]
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	685b      	ldr	r3, [r3, #4]
 800a4aa:	60fb      	str	r3, [r7, #12]
 800a4ac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a4b2:	4619      	mov	r1, r3
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f7ff fdbb 	bl	800a030 <HAL_UARTEx_RxEventCallback>
 800a4ba:	e002      	b.n	800a4c2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f7f9 fa27 	bl	8003910 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	e002      	b.n	800a4cc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	e000      	b.n	800a4cc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a4ca:	2302      	movs	r3, #2
  }
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3730      	adds	r7, #48	@ 0x30
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}

0800a4d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a4d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a4d8:	b0c0      	sub	sp, #256	@ 0x100
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a4e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	691b      	ldr	r3, [r3, #16]
 800a4e8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a4ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a4f0:	68d9      	ldr	r1, [r3, #12]
 800a4f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a4f6:	681a      	ldr	r2, [r3, #0]
 800a4f8:	ea40 0301 	orr.w	r3, r0, r1
 800a4fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a4fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a502:	689a      	ldr	r2, [r3, #8]
 800a504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a508:	691b      	ldr	r3, [r3, #16]
 800a50a:	431a      	orrs	r2, r3
 800a50c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a510:	695b      	ldr	r3, [r3, #20]
 800a512:	431a      	orrs	r2, r3
 800a514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a518:	69db      	ldr	r3, [r3, #28]
 800a51a:	4313      	orrs	r3, r2
 800a51c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	68db      	ldr	r3, [r3, #12]
 800a528:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800a52c:	f021 010c 	bic.w	r1, r1, #12
 800a530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a534:	681a      	ldr	r2, [r3, #0]
 800a536:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a53a:	430b      	orrs	r3, r1
 800a53c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a53e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	695b      	ldr	r3, [r3, #20]
 800a546:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a54a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a54e:	6999      	ldr	r1, [r3, #24]
 800a550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a554:	681a      	ldr	r2, [r3, #0]
 800a556:	ea40 0301 	orr.w	r3, r0, r1
 800a55a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a55c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a560:	681a      	ldr	r2, [r3, #0]
 800a562:	4b8f      	ldr	r3, [pc, #572]	@ (800a7a0 <UART_SetConfig+0x2cc>)
 800a564:	429a      	cmp	r2, r3
 800a566:	d005      	beq.n	800a574 <UART_SetConfig+0xa0>
 800a568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a56c:	681a      	ldr	r2, [r3, #0]
 800a56e:	4b8d      	ldr	r3, [pc, #564]	@ (800a7a4 <UART_SetConfig+0x2d0>)
 800a570:	429a      	cmp	r2, r3
 800a572:	d104      	bne.n	800a57e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a574:	f7fe f844 	bl	8008600 <HAL_RCC_GetPCLK2Freq>
 800a578:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a57c:	e003      	b.n	800a586 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a57e:	f7fe f82b 	bl	80085d8 <HAL_RCC_GetPCLK1Freq>
 800a582:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a58a:	69db      	ldr	r3, [r3, #28]
 800a58c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a590:	f040 810c 	bne.w	800a7ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a594:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a598:	2200      	movs	r2, #0
 800a59a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a59e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a5a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a5a6:	4622      	mov	r2, r4
 800a5a8:	462b      	mov	r3, r5
 800a5aa:	1891      	adds	r1, r2, r2
 800a5ac:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a5ae:	415b      	adcs	r3, r3
 800a5b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a5b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a5b6:	4621      	mov	r1, r4
 800a5b8:	eb12 0801 	adds.w	r8, r2, r1
 800a5bc:	4629      	mov	r1, r5
 800a5be:	eb43 0901 	adc.w	r9, r3, r1
 800a5c2:	f04f 0200 	mov.w	r2, #0
 800a5c6:	f04f 0300 	mov.w	r3, #0
 800a5ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a5ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a5d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a5d6:	4690      	mov	r8, r2
 800a5d8:	4699      	mov	r9, r3
 800a5da:	4623      	mov	r3, r4
 800a5dc:	eb18 0303 	adds.w	r3, r8, r3
 800a5e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a5e4:	462b      	mov	r3, r5
 800a5e6:	eb49 0303 	adc.w	r3, r9, r3
 800a5ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a5ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5f2:	685b      	ldr	r3, [r3, #4]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a5fa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a5fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a602:	460b      	mov	r3, r1
 800a604:	18db      	adds	r3, r3, r3
 800a606:	653b      	str	r3, [r7, #80]	@ 0x50
 800a608:	4613      	mov	r3, r2
 800a60a:	eb42 0303 	adc.w	r3, r2, r3
 800a60e:	657b      	str	r3, [r7, #84]	@ 0x54
 800a610:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a614:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a618:	f7f6 fb9e 	bl	8000d58 <__aeabi_uldivmod>
 800a61c:	4602      	mov	r2, r0
 800a61e:	460b      	mov	r3, r1
 800a620:	4b61      	ldr	r3, [pc, #388]	@ (800a7a8 <UART_SetConfig+0x2d4>)
 800a622:	fba3 2302 	umull	r2, r3, r3, r2
 800a626:	095b      	lsrs	r3, r3, #5
 800a628:	011c      	lsls	r4, r3, #4
 800a62a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a62e:	2200      	movs	r2, #0
 800a630:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a634:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a638:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a63c:	4642      	mov	r2, r8
 800a63e:	464b      	mov	r3, r9
 800a640:	1891      	adds	r1, r2, r2
 800a642:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a644:	415b      	adcs	r3, r3
 800a646:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a648:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a64c:	4641      	mov	r1, r8
 800a64e:	eb12 0a01 	adds.w	sl, r2, r1
 800a652:	4649      	mov	r1, r9
 800a654:	eb43 0b01 	adc.w	fp, r3, r1
 800a658:	f04f 0200 	mov.w	r2, #0
 800a65c:	f04f 0300 	mov.w	r3, #0
 800a660:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a664:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a668:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a66c:	4692      	mov	sl, r2
 800a66e:	469b      	mov	fp, r3
 800a670:	4643      	mov	r3, r8
 800a672:	eb1a 0303 	adds.w	r3, sl, r3
 800a676:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a67a:	464b      	mov	r3, r9
 800a67c:	eb4b 0303 	adc.w	r3, fp, r3
 800a680:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a688:	685b      	ldr	r3, [r3, #4]
 800a68a:	2200      	movs	r2, #0
 800a68c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a690:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a694:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a698:	460b      	mov	r3, r1
 800a69a:	18db      	adds	r3, r3, r3
 800a69c:	643b      	str	r3, [r7, #64]	@ 0x40
 800a69e:	4613      	mov	r3, r2
 800a6a0:	eb42 0303 	adc.w	r3, r2, r3
 800a6a4:	647b      	str	r3, [r7, #68]	@ 0x44
 800a6a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a6aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a6ae:	f7f6 fb53 	bl	8000d58 <__aeabi_uldivmod>
 800a6b2:	4602      	mov	r2, r0
 800a6b4:	460b      	mov	r3, r1
 800a6b6:	4611      	mov	r1, r2
 800a6b8:	4b3b      	ldr	r3, [pc, #236]	@ (800a7a8 <UART_SetConfig+0x2d4>)
 800a6ba:	fba3 2301 	umull	r2, r3, r3, r1
 800a6be:	095b      	lsrs	r3, r3, #5
 800a6c0:	2264      	movs	r2, #100	@ 0x64
 800a6c2:	fb02 f303 	mul.w	r3, r2, r3
 800a6c6:	1acb      	subs	r3, r1, r3
 800a6c8:	00db      	lsls	r3, r3, #3
 800a6ca:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a6ce:	4b36      	ldr	r3, [pc, #216]	@ (800a7a8 <UART_SetConfig+0x2d4>)
 800a6d0:	fba3 2302 	umull	r2, r3, r3, r2
 800a6d4:	095b      	lsrs	r3, r3, #5
 800a6d6:	005b      	lsls	r3, r3, #1
 800a6d8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a6dc:	441c      	add	r4, r3
 800a6de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a6e8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a6ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a6f0:	4642      	mov	r2, r8
 800a6f2:	464b      	mov	r3, r9
 800a6f4:	1891      	adds	r1, r2, r2
 800a6f6:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a6f8:	415b      	adcs	r3, r3
 800a6fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a700:	4641      	mov	r1, r8
 800a702:	1851      	adds	r1, r2, r1
 800a704:	6339      	str	r1, [r7, #48]	@ 0x30
 800a706:	4649      	mov	r1, r9
 800a708:	414b      	adcs	r3, r1
 800a70a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a70c:	f04f 0200 	mov.w	r2, #0
 800a710:	f04f 0300 	mov.w	r3, #0
 800a714:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a718:	4659      	mov	r1, fp
 800a71a:	00cb      	lsls	r3, r1, #3
 800a71c:	4651      	mov	r1, sl
 800a71e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a722:	4651      	mov	r1, sl
 800a724:	00ca      	lsls	r2, r1, #3
 800a726:	4610      	mov	r0, r2
 800a728:	4619      	mov	r1, r3
 800a72a:	4603      	mov	r3, r0
 800a72c:	4642      	mov	r2, r8
 800a72e:	189b      	adds	r3, r3, r2
 800a730:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a734:	464b      	mov	r3, r9
 800a736:	460a      	mov	r2, r1
 800a738:	eb42 0303 	adc.w	r3, r2, r3
 800a73c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a744:	685b      	ldr	r3, [r3, #4]
 800a746:	2200      	movs	r2, #0
 800a748:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a74c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a750:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a754:	460b      	mov	r3, r1
 800a756:	18db      	adds	r3, r3, r3
 800a758:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a75a:	4613      	mov	r3, r2
 800a75c:	eb42 0303 	adc.w	r3, r2, r3
 800a760:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a762:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a766:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a76a:	f7f6 faf5 	bl	8000d58 <__aeabi_uldivmod>
 800a76e:	4602      	mov	r2, r0
 800a770:	460b      	mov	r3, r1
 800a772:	4b0d      	ldr	r3, [pc, #52]	@ (800a7a8 <UART_SetConfig+0x2d4>)
 800a774:	fba3 1302 	umull	r1, r3, r3, r2
 800a778:	095b      	lsrs	r3, r3, #5
 800a77a:	2164      	movs	r1, #100	@ 0x64
 800a77c:	fb01 f303 	mul.w	r3, r1, r3
 800a780:	1ad3      	subs	r3, r2, r3
 800a782:	00db      	lsls	r3, r3, #3
 800a784:	3332      	adds	r3, #50	@ 0x32
 800a786:	4a08      	ldr	r2, [pc, #32]	@ (800a7a8 <UART_SetConfig+0x2d4>)
 800a788:	fba2 2303 	umull	r2, r3, r2, r3
 800a78c:	095b      	lsrs	r3, r3, #5
 800a78e:	f003 0207 	and.w	r2, r3, #7
 800a792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	4422      	add	r2, r4
 800a79a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a79c:	e106      	b.n	800a9ac <UART_SetConfig+0x4d8>
 800a79e:	bf00      	nop
 800a7a0:	40011000 	.word	0x40011000
 800a7a4:	40011400 	.word	0x40011400
 800a7a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a7ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a7b6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a7ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a7be:	4642      	mov	r2, r8
 800a7c0:	464b      	mov	r3, r9
 800a7c2:	1891      	adds	r1, r2, r2
 800a7c4:	6239      	str	r1, [r7, #32]
 800a7c6:	415b      	adcs	r3, r3
 800a7c8:	627b      	str	r3, [r7, #36]	@ 0x24
 800a7ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a7ce:	4641      	mov	r1, r8
 800a7d0:	1854      	adds	r4, r2, r1
 800a7d2:	4649      	mov	r1, r9
 800a7d4:	eb43 0501 	adc.w	r5, r3, r1
 800a7d8:	f04f 0200 	mov.w	r2, #0
 800a7dc:	f04f 0300 	mov.w	r3, #0
 800a7e0:	00eb      	lsls	r3, r5, #3
 800a7e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a7e6:	00e2      	lsls	r2, r4, #3
 800a7e8:	4614      	mov	r4, r2
 800a7ea:	461d      	mov	r5, r3
 800a7ec:	4643      	mov	r3, r8
 800a7ee:	18e3      	adds	r3, r4, r3
 800a7f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a7f4:	464b      	mov	r3, r9
 800a7f6:	eb45 0303 	adc.w	r3, r5, r3
 800a7fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a7fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a802:	685b      	ldr	r3, [r3, #4]
 800a804:	2200      	movs	r2, #0
 800a806:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a80a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a80e:	f04f 0200 	mov.w	r2, #0
 800a812:	f04f 0300 	mov.w	r3, #0
 800a816:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a81a:	4629      	mov	r1, r5
 800a81c:	008b      	lsls	r3, r1, #2
 800a81e:	4621      	mov	r1, r4
 800a820:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a824:	4621      	mov	r1, r4
 800a826:	008a      	lsls	r2, r1, #2
 800a828:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a82c:	f7f6 fa94 	bl	8000d58 <__aeabi_uldivmod>
 800a830:	4602      	mov	r2, r0
 800a832:	460b      	mov	r3, r1
 800a834:	4b60      	ldr	r3, [pc, #384]	@ (800a9b8 <UART_SetConfig+0x4e4>)
 800a836:	fba3 2302 	umull	r2, r3, r3, r2
 800a83a:	095b      	lsrs	r3, r3, #5
 800a83c:	011c      	lsls	r4, r3, #4
 800a83e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a842:	2200      	movs	r2, #0
 800a844:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a848:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a84c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a850:	4642      	mov	r2, r8
 800a852:	464b      	mov	r3, r9
 800a854:	1891      	adds	r1, r2, r2
 800a856:	61b9      	str	r1, [r7, #24]
 800a858:	415b      	adcs	r3, r3
 800a85a:	61fb      	str	r3, [r7, #28]
 800a85c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a860:	4641      	mov	r1, r8
 800a862:	1851      	adds	r1, r2, r1
 800a864:	6139      	str	r1, [r7, #16]
 800a866:	4649      	mov	r1, r9
 800a868:	414b      	adcs	r3, r1
 800a86a:	617b      	str	r3, [r7, #20]
 800a86c:	f04f 0200 	mov.w	r2, #0
 800a870:	f04f 0300 	mov.w	r3, #0
 800a874:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a878:	4659      	mov	r1, fp
 800a87a:	00cb      	lsls	r3, r1, #3
 800a87c:	4651      	mov	r1, sl
 800a87e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a882:	4651      	mov	r1, sl
 800a884:	00ca      	lsls	r2, r1, #3
 800a886:	4610      	mov	r0, r2
 800a888:	4619      	mov	r1, r3
 800a88a:	4603      	mov	r3, r0
 800a88c:	4642      	mov	r2, r8
 800a88e:	189b      	adds	r3, r3, r2
 800a890:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a894:	464b      	mov	r3, r9
 800a896:	460a      	mov	r2, r1
 800a898:	eb42 0303 	adc.w	r3, r2, r3
 800a89c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a8a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8a4:	685b      	ldr	r3, [r3, #4]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a8aa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a8ac:	f04f 0200 	mov.w	r2, #0
 800a8b0:	f04f 0300 	mov.w	r3, #0
 800a8b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a8b8:	4649      	mov	r1, r9
 800a8ba:	008b      	lsls	r3, r1, #2
 800a8bc:	4641      	mov	r1, r8
 800a8be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a8c2:	4641      	mov	r1, r8
 800a8c4:	008a      	lsls	r2, r1, #2
 800a8c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a8ca:	f7f6 fa45 	bl	8000d58 <__aeabi_uldivmod>
 800a8ce:	4602      	mov	r2, r0
 800a8d0:	460b      	mov	r3, r1
 800a8d2:	4611      	mov	r1, r2
 800a8d4:	4b38      	ldr	r3, [pc, #224]	@ (800a9b8 <UART_SetConfig+0x4e4>)
 800a8d6:	fba3 2301 	umull	r2, r3, r3, r1
 800a8da:	095b      	lsrs	r3, r3, #5
 800a8dc:	2264      	movs	r2, #100	@ 0x64
 800a8de:	fb02 f303 	mul.w	r3, r2, r3
 800a8e2:	1acb      	subs	r3, r1, r3
 800a8e4:	011b      	lsls	r3, r3, #4
 800a8e6:	3332      	adds	r3, #50	@ 0x32
 800a8e8:	4a33      	ldr	r2, [pc, #204]	@ (800a9b8 <UART_SetConfig+0x4e4>)
 800a8ea:	fba2 2303 	umull	r2, r3, r2, r3
 800a8ee:	095b      	lsrs	r3, r3, #5
 800a8f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a8f4:	441c      	add	r4, r3
 800a8f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	673b      	str	r3, [r7, #112]	@ 0x70
 800a8fe:	677a      	str	r2, [r7, #116]	@ 0x74
 800a900:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a904:	4642      	mov	r2, r8
 800a906:	464b      	mov	r3, r9
 800a908:	1891      	adds	r1, r2, r2
 800a90a:	60b9      	str	r1, [r7, #8]
 800a90c:	415b      	adcs	r3, r3
 800a90e:	60fb      	str	r3, [r7, #12]
 800a910:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a914:	4641      	mov	r1, r8
 800a916:	1851      	adds	r1, r2, r1
 800a918:	6039      	str	r1, [r7, #0]
 800a91a:	4649      	mov	r1, r9
 800a91c:	414b      	adcs	r3, r1
 800a91e:	607b      	str	r3, [r7, #4]
 800a920:	f04f 0200 	mov.w	r2, #0
 800a924:	f04f 0300 	mov.w	r3, #0
 800a928:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a92c:	4659      	mov	r1, fp
 800a92e:	00cb      	lsls	r3, r1, #3
 800a930:	4651      	mov	r1, sl
 800a932:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a936:	4651      	mov	r1, sl
 800a938:	00ca      	lsls	r2, r1, #3
 800a93a:	4610      	mov	r0, r2
 800a93c:	4619      	mov	r1, r3
 800a93e:	4603      	mov	r3, r0
 800a940:	4642      	mov	r2, r8
 800a942:	189b      	adds	r3, r3, r2
 800a944:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a946:	464b      	mov	r3, r9
 800a948:	460a      	mov	r2, r1
 800a94a:	eb42 0303 	adc.w	r3, r2, r3
 800a94e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a954:	685b      	ldr	r3, [r3, #4]
 800a956:	2200      	movs	r2, #0
 800a958:	663b      	str	r3, [r7, #96]	@ 0x60
 800a95a:	667a      	str	r2, [r7, #100]	@ 0x64
 800a95c:	f04f 0200 	mov.w	r2, #0
 800a960:	f04f 0300 	mov.w	r3, #0
 800a964:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a968:	4649      	mov	r1, r9
 800a96a:	008b      	lsls	r3, r1, #2
 800a96c:	4641      	mov	r1, r8
 800a96e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a972:	4641      	mov	r1, r8
 800a974:	008a      	lsls	r2, r1, #2
 800a976:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a97a:	f7f6 f9ed 	bl	8000d58 <__aeabi_uldivmod>
 800a97e:	4602      	mov	r2, r0
 800a980:	460b      	mov	r3, r1
 800a982:	4b0d      	ldr	r3, [pc, #52]	@ (800a9b8 <UART_SetConfig+0x4e4>)
 800a984:	fba3 1302 	umull	r1, r3, r3, r2
 800a988:	095b      	lsrs	r3, r3, #5
 800a98a:	2164      	movs	r1, #100	@ 0x64
 800a98c:	fb01 f303 	mul.w	r3, r1, r3
 800a990:	1ad3      	subs	r3, r2, r3
 800a992:	011b      	lsls	r3, r3, #4
 800a994:	3332      	adds	r3, #50	@ 0x32
 800a996:	4a08      	ldr	r2, [pc, #32]	@ (800a9b8 <UART_SetConfig+0x4e4>)
 800a998:	fba2 2303 	umull	r2, r3, r2, r3
 800a99c:	095b      	lsrs	r3, r3, #5
 800a99e:	f003 020f 	and.w	r2, r3, #15
 800a9a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	4422      	add	r2, r4
 800a9aa:	609a      	str	r2, [r3, #8]
}
 800a9ac:	bf00      	nop
 800a9ae:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a9b8:	51eb851f 	.word	0x51eb851f

0800a9bc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800a9c0:	4904      	ldr	r1, [pc, #16]	@ (800a9d4 <MX_FATFS_Init+0x18>)
 800a9c2:	4805      	ldr	r0, [pc, #20]	@ (800a9d8 <MX_FATFS_Init+0x1c>)
 800a9c4:	f000 f8b0 	bl	800ab28 <FATFS_LinkDriver>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	461a      	mov	r2, r3
 800a9cc:	4b03      	ldr	r3, [pc, #12]	@ (800a9dc <MX_FATFS_Init+0x20>)
 800a9ce:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a9d0:	bf00      	nop
 800a9d2:	bd80      	pop	{r7, pc}
 800a9d4:	20000c5c 	.word	0x20000c5c
 800a9d8:	20000050 	.word	0x20000050
 800a9dc:	20000c58 	.word	0x20000c58

0800a9e0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b083      	sub	sp, #12
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800a9ea:	4b06      	ldr	r3, [pc, #24]	@ (800aa04 <USER_initialize+0x24>)
 800a9ec:	2201      	movs	r2, #1
 800a9ee:	701a      	strb	r2, [r3, #0]
    return Stat;
 800a9f0:	4b04      	ldr	r3, [pc, #16]	@ (800aa04 <USER_initialize+0x24>)
 800a9f2:	781b      	ldrb	r3, [r3, #0]
 800a9f4:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	370c      	adds	r7, #12
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa00:	4770      	bx	lr
 800aa02:	bf00      	nop
 800aa04:	2000004d 	.word	0x2000004d

0800aa08 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b083      	sub	sp, #12
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	4603      	mov	r3, r0
 800aa10:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800aa12:	4b06      	ldr	r3, [pc, #24]	@ (800aa2c <USER_status+0x24>)
 800aa14:	2201      	movs	r2, #1
 800aa16:	701a      	strb	r2, [r3, #0]
    return Stat;
 800aa18:	4b04      	ldr	r3, [pc, #16]	@ (800aa2c <USER_status+0x24>)
 800aa1a:	781b      	ldrb	r3, [r3, #0]
 800aa1c:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	370c      	adds	r7, #12
 800aa22:	46bd      	mov	sp, r7
 800aa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa28:	4770      	bx	lr
 800aa2a:	bf00      	nop
 800aa2c:	2000004d 	.word	0x2000004d

0800aa30 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800aa30:	b480      	push	{r7}
 800aa32:	b085      	sub	sp, #20
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	60b9      	str	r1, [r7, #8]
 800aa38:	607a      	str	r2, [r7, #4]
 800aa3a:	603b      	str	r3, [r7, #0]
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800aa40:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	3714      	adds	r7, #20
 800aa46:	46bd      	mov	sp, r7
 800aa48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4c:	4770      	bx	lr

0800aa4e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800aa4e:	b480      	push	{r7}
 800aa50:	b085      	sub	sp, #20
 800aa52:	af00      	add	r7, sp, #0
 800aa54:	60b9      	str	r1, [r7, #8]
 800aa56:	607a      	str	r2, [r7, #4]
 800aa58:	603b      	str	r3, [r7, #0]
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800aa5e:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	3714      	adds	r7, #20
 800aa64:	46bd      	mov	sp, r7
 800aa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6a:	4770      	bx	lr

0800aa6c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b085      	sub	sp, #20
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	4603      	mov	r3, r0
 800aa74:	603a      	str	r2, [r7, #0]
 800aa76:	71fb      	strb	r3, [r7, #7]
 800aa78:	460b      	mov	r3, r1
 800aa7a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	73fb      	strb	r3, [r7, #15]
    return res;
 800aa80:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3714      	adds	r7, #20
 800aa86:	46bd      	mov	sp, r7
 800aa88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8c:	4770      	bx	lr
	...

0800aa90 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800aa90:	b480      	push	{r7}
 800aa92:	b087      	sub	sp, #28
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	60f8      	str	r0, [r7, #12]
 800aa98:	60b9      	str	r1, [r7, #8]
 800aa9a:	4613      	mov	r3, r2
 800aa9c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800aa9e:	2301      	movs	r3, #1
 800aaa0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800aaa6:	4b1f      	ldr	r3, [pc, #124]	@ (800ab24 <FATFS_LinkDriverEx+0x94>)
 800aaa8:	7a5b      	ldrb	r3, [r3, #9]
 800aaaa:	b2db      	uxtb	r3, r3
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d131      	bne.n	800ab14 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800aab0:	4b1c      	ldr	r3, [pc, #112]	@ (800ab24 <FATFS_LinkDriverEx+0x94>)
 800aab2:	7a5b      	ldrb	r3, [r3, #9]
 800aab4:	b2db      	uxtb	r3, r3
 800aab6:	461a      	mov	r2, r3
 800aab8:	4b1a      	ldr	r3, [pc, #104]	@ (800ab24 <FATFS_LinkDriverEx+0x94>)
 800aaba:	2100      	movs	r1, #0
 800aabc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800aabe:	4b19      	ldr	r3, [pc, #100]	@ (800ab24 <FATFS_LinkDriverEx+0x94>)
 800aac0:	7a5b      	ldrb	r3, [r3, #9]
 800aac2:	b2db      	uxtb	r3, r3
 800aac4:	4a17      	ldr	r2, [pc, #92]	@ (800ab24 <FATFS_LinkDriverEx+0x94>)
 800aac6:	009b      	lsls	r3, r3, #2
 800aac8:	4413      	add	r3, r2
 800aaca:	68fa      	ldr	r2, [r7, #12]
 800aacc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800aace:	4b15      	ldr	r3, [pc, #84]	@ (800ab24 <FATFS_LinkDriverEx+0x94>)
 800aad0:	7a5b      	ldrb	r3, [r3, #9]
 800aad2:	b2db      	uxtb	r3, r3
 800aad4:	461a      	mov	r2, r3
 800aad6:	4b13      	ldr	r3, [pc, #76]	@ (800ab24 <FATFS_LinkDriverEx+0x94>)
 800aad8:	4413      	add	r3, r2
 800aada:	79fa      	ldrb	r2, [r7, #7]
 800aadc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800aade:	4b11      	ldr	r3, [pc, #68]	@ (800ab24 <FATFS_LinkDriverEx+0x94>)
 800aae0:	7a5b      	ldrb	r3, [r3, #9]
 800aae2:	b2db      	uxtb	r3, r3
 800aae4:	1c5a      	adds	r2, r3, #1
 800aae6:	b2d1      	uxtb	r1, r2
 800aae8:	4a0e      	ldr	r2, [pc, #56]	@ (800ab24 <FATFS_LinkDriverEx+0x94>)
 800aaea:	7251      	strb	r1, [r2, #9]
 800aaec:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800aaee:	7dbb      	ldrb	r3, [r7, #22]
 800aaf0:	3330      	adds	r3, #48	@ 0x30
 800aaf2:	b2da      	uxtb	r2, r3
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	3301      	adds	r3, #1
 800aafc:	223a      	movs	r2, #58	@ 0x3a
 800aafe:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	3302      	adds	r3, #2
 800ab04:	222f      	movs	r2, #47	@ 0x2f
 800ab06:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	3303      	adds	r3, #3
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ab10:	2300      	movs	r3, #0
 800ab12:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ab14:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	371c      	adds	r7, #28
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab20:	4770      	bx	lr
 800ab22:	bf00      	nop
 800ab24:	20000c60 	.word	0x20000c60

0800ab28 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b082      	sub	sp, #8
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
 800ab30:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ab32:	2200      	movs	r2, #0
 800ab34:	6839      	ldr	r1, [r7, #0]
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f7ff ffaa 	bl	800aa90 <FATFS_LinkDriverEx>
 800ab3c:	4603      	mov	r3, r0
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	3708      	adds	r7, #8
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}
	...

0800ab48 <malloc>:
 800ab48:	4b02      	ldr	r3, [pc, #8]	@ (800ab54 <malloc+0xc>)
 800ab4a:	4601      	mov	r1, r0
 800ab4c:	6818      	ldr	r0, [r3, #0]
 800ab4e:	f000 b82d 	b.w	800abac <_malloc_r>
 800ab52:	bf00      	nop
 800ab54:	200001dc 	.word	0x200001dc

0800ab58 <free>:
 800ab58:	4b02      	ldr	r3, [pc, #8]	@ (800ab64 <free+0xc>)
 800ab5a:	4601      	mov	r1, r0
 800ab5c:	6818      	ldr	r0, [r3, #0]
 800ab5e:	f001 b87b 	b.w	800bc58 <_free_r>
 800ab62:	bf00      	nop
 800ab64:	200001dc 	.word	0x200001dc

0800ab68 <sbrk_aligned>:
 800ab68:	b570      	push	{r4, r5, r6, lr}
 800ab6a:	4e0f      	ldr	r6, [pc, #60]	@ (800aba8 <sbrk_aligned+0x40>)
 800ab6c:	460c      	mov	r4, r1
 800ab6e:	6831      	ldr	r1, [r6, #0]
 800ab70:	4605      	mov	r5, r0
 800ab72:	b911      	cbnz	r1, 800ab7a <sbrk_aligned+0x12>
 800ab74:	f001 f808 	bl	800bb88 <_sbrk_r>
 800ab78:	6030      	str	r0, [r6, #0]
 800ab7a:	4621      	mov	r1, r4
 800ab7c:	4628      	mov	r0, r5
 800ab7e:	f001 f803 	bl	800bb88 <_sbrk_r>
 800ab82:	1c43      	adds	r3, r0, #1
 800ab84:	d103      	bne.n	800ab8e <sbrk_aligned+0x26>
 800ab86:	f04f 34ff 	mov.w	r4, #4294967295
 800ab8a:	4620      	mov	r0, r4
 800ab8c:	bd70      	pop	{r4, r5, r6, pc}
 800ab8e:	1cc4      	adds	r4, r0, #3
 800ab90:	f024 0403 	bic.w	r4, r4, #3
 800ab94:	42a0      	cmp	r0, r4
 800ab96:	d0f8      	beq.n	800ab8a <sbrk_aligned+0x22>
 800ab98:	1a21      	subs	r1, r4, r0
 800ab9a:	4628      	mov	r0, r5
 800ab9c:	f000 fff4 	bl	800bb88 <_sbrk_r>
 800aba0:	3001      	adds	r0, #1
 800aba2:	d1f2      	bne.n	800ab8a <sbrk_aligned+0x22>
 800aba4:	e7ef      	b.n	800ab86 <sbrk_aligned+0x1e>
 800aba6:	bf00      	nop
 800aba8:	20000c6c 	.word	0x20000c6c

0800abac <_malloc_r>:
 800abac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abb0:	1ccd      	adds	r5, r1, #3
 800abb2:	f025 0503 	bic.w	r5, r5, #3
 800abb6:	3508      	adds	r5, #8
 800abb8:	2d0c      	cmp	r5, #12
 800abba:	bf38      	it	cc
 800abbc:	250c      	movcc	r5, #12
 800abbe:	2d00      	cmp	r5, #0
 800abc0:	4606      	mov	r6, r0
 800abc2:	db01      	blt.n	800abc8 <_malloc_r+0x1c>
 800abc4:	42a9      	cmp	r1, r5
 800abc6:	d904      	bls.n	800abd2 <_malloc_r+0x26>
 800abc8:	230c      	movs	r3, #12
 800abca:	6033      	str	r3, [r6, #0]
 800abcc:	2000      	movs	r0, #0
 800abce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abd2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aca8 <_malloc_r+0xfc>
 800abd6:	f000 f869 	bl	800acac <__malloc_lock>
 800abda:	f8d8 3000 	ldr.w	r3, [r8]
 800abde:	461c      	mov	r4, r3
 800abe0:	bb44      	cbnz	r4, 800ac34 <_malloc_r+0x88>
 800abe2:	4629      	mov	r1, r5
 800abe4:	4630      	mov	r0, r6
 800abe6:	f7ff ffbf 	bl	800ab68 <sbrk_aligned>
 800abea:	1c43      	adds	r3, r0, #1
 800abec:	4604      	mov	r4, r0
 800abee:	d158      	bne.n	800aca2 <_malloc_r+0xf6>
 800abf0:	f8d8 4000 	ldr.w	r4, [r8]
 800abf4:	4627      	mov	r7, r4
 800abf6:	2f00      	cmp	r7, #0
 800abf8:	d143      	bne.n	800ac82 <_malloc_r+0xd6>
 800abfa:	2c00      	cmp	r4, #0
 800abfc:	d04b      	beq.n	800ac96 <_malloc_r+0xea>
 800abfe:	6823      	ldr	r3, [r4, #0]
 800ac00:	4639      	mov	r1, r7
 800ac02:	4630      	mov	r0, r6
 800ac04:	eb04 0903 	add.w	r9, r4, r3
 800ac08:	f000 ffbe 	bl	800bb88 <_sbrk_r>
 800ac0c:	4581      	cmp	r9, r0
 800ac0e:	d142      	bne.n	800ac96 <_malloc_r+0xea>
 800ac10:	6821      	ldr	r1, [r4, #0]
 800ac12:	1a6d      	subs	r5, r5, r1
 800ac14:	4629      	mov	r1, r5
 800ac16:	4630      	mov	r0, r6
 800ac18:	f7ff ffa6 	bl	800ab68 <sbrk_aligned>
 800ac1c:	3001      	adds	r0, #1
 800ac1e:	d03a      	beq.n	800ac96 <_malloc_r+0xea>
 800ac20:	6823      	ldr	r3, [r4, #0]
 800ac22:	442b      	add	r3, r5
 800ac24:	6023      	str	r3, [r4, #0]
 800ac26:	f8d8 3000 	ldr.w	r3, [r8]
 800ac2a:	685a      	ldr	r2, [r3, #4]
 800ac2c:	bb62      	cbnz	r2, 800ac88 <_malloc_r+0xdc>
 800ac2e:	f8c8 7000 	str.w	r7, [r8]
 800ac32:	e00f      	b.n	800ac54 <_malloc_r+0xa8>
 800ac34:	6822      	ldr	r2, [r4, #0]
 800ac36:	1b52      	subs	r2, r2, r5
 800ac38:	d420      	bmi.n	800ac7c <_malloc_r+0xd0>
 800ac3a:	2a0b      	cmp	r2, #11
 800ac3c:	d917      	bls.n	800ac6e <_malloc_r+0xc2>
 800ac3e:	1961      	adds	r1, r4, r5
 800ac40:	42a3      	cmp	r3, r4
 800ac42:	6025      	str	r5, [r4, #0]
 800ac44:	bf18      	it	ne
 800ac46:	6059      	strne	r1, [r3, #4]
 800ac48:	6863      	ldr	r3, [r4, #4]
 800ac4a:	bf08      	it	eq
 800ac4c:	f8c8 1000 	streq.w	r1, [r8]
 800ac50:	5162      	str	r2, [r4, r5]
 800ac52:	604b      	str	r3, [r1, #4]
 800ac54:	4630      	mov	r0, r6
 800ac56:	f000 f82f 	bl	800acb8 <__malloc_unlock>
 800ac5a:	f104 000b 	add.w	r0, r4, #11
 800ac5e:	1d23      	adds	r3, r4, #4
 800ac60:	f020 0007 	bic.w	r0, r0, #7
 800ac64:	1ac2      	subs	r2, r0, r3
 800ac66:	bf1c      	itt	ne
 800ac68:	1a1b      	subne	r3, r3, r0
 800ac6a:	50a3      	strne	r3, [r4, r2]
 800ac6c:	e7af      	b.n	800abce <_malloc_r+0x22>
 800ac6e:	6862      	ldr	r2, [r4, #4]
 800ac70:	42a3      	cmp	r3, r4
 800ac72:	bf0c      	ite	eq
 800ac74:	f8c8 2000 	streq.w	r2, [r8]
 800ac78:	605a      	strne	r2, [r3, #4]
 800ac7a:	e7eb      	b.n	800ac54 <_malloc_r+0xa8>
 800ac7c:	4623      	mov	r3, r4
 800ac7e:	6864      	ldr	r4, [r4, #4]
 800ac80:	e7ae      	b.n	800abe0 <_malloc_r+0x34>
 800ac82:	463c      	mov	r4, r7
 800ac84:	687f      	ldr	r7, [r7, #4]
 800ac86:	e7b6      	b.n	800abf6 <_malloc_r+0x4a>
 800ac88:	461a      	mov	r2, r3
 800ac8a:	685b      	ldr	r3, [r3, #4]
 800ac8c:	42a3      	cmp	r3, r4
 800ac8e:	d1fb      	bne.n	800ac88 <_malloc_r+0xdc>
 800ac90:	2300      	movs	r3, #0
 800ac92:	6053      	str	r3, [r2, #4]
 800ac94:	e7de      	b.n	800ac54 <_malloc_r+0xa8>
 800ac96:	230c      	movs	r3, #12
 800ac98:	6033      	str	r3, [r6, #0]
 800ac9a:	4630      	mov	r0, r6
 800ac9c:	f000 f80c 	bl	800acb8 <__malloc_unlock>
 800aca0:	e794      	b.n	800abcc <_malloc_r+0x20>
 800aca2:	6005      	str	r5, [r0, #0]
 800aca4:	e7d6      	b.n	800ac54 <_malloc_r+0xa8>
 800aca6:	bf00      	nop
 800aca8:	20000c70 	.word	0x20000c70

0800acac <__malloc_lock>:
 800acac:	4801      	ldr	r0, [pc, #4]	@ (800acb4 <__malloc_lock+0x8>)
 800acae:	f000 bfb8 	b.w	800bc22 <__retarget_lock_acquire_recursive>
 800acb2:	bf00      	nop
 800acb4:	20000db4 	.word	0x20000db4

0800acb8 <__malloc_unlock>:
 800acb8:	4801      	ldr	r0, [pc, #4]	@ (800acc0 <__malloc_unlock+0x8>)
 800acba:	f000 bfb3 	b.w	800bc24 <__retarget_lock_release_recursive>
 800acbe:	bf00      	nop
 800acc0:	20000db4 	.word	0x20000db4

0800acc4 <sulp>:
 800acc4:	b570      	push	{r4, r5, r6, lr}
 800acc6:	4604      	mov	r4, r0
 800acc8:	460d      	mov	r5, r1
 800acca:	ec45 4b10 	vmov	d0, r4, r5
 800acce:	4616      	mov	r6, r2
 800acd0:	f001 fecc 	bl	800ca6c <__ulp>
 800acd4:	ec51 0b10 	vmov	r0, r1, d0
 800acd8:	b17e      	cbz	r6, 800acfa <sulp+0x36>
 800acda:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800acde:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	dd09      	ble.n	800acfa <sulp+0x36>
 800ace6:	051b      	lsls	r3, r3, #20
 800ace8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800acec:	2400      	movs	r4, #0
 800acee:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800acf2:	4622      	mov	r2, r4
 800acf4:	462b      	mov	r3, r5
 800acf6:	f7f5 fc97 	bl	8000628 <__aeabi_dmul>
 800acfa:	ec41 0b10 	vmov	d0, r0, r1
 800acfe:	bd70      	pop	{r4, r5, r6, pc}

0800ad00 <_strtod_l>:
 800ad00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad04:	b09f      	sub	sp, #124	@ 0x7c
 800ad06:	460c      	mov	r4, r1
 800ad08:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	921a      	str	r2, [sp, #104]	@ 0x68
 800ad0e:	9005      	str	r0, [sp, #20]
 800ad10:	f04f 0a00 	mov.w	sl, #0
 800ad14:	f04f 0b00 	mov.w	fp, #0
 800ad18:	460a      	mov	r2, r1
 800ad1a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ad1c:	7811      	ldrb	r1, [r2, #0]
 800ad1e:	292b      	cmp	r1, #43	@ 0x2b
 800ad20:	d04a      	beq.n	800adb8 <_strtod_l+0xb8>
 800ad22:	d838      	bhi.n	800ad96 <_strtod_l+0x96>
 800ad24:	290d      	cmp	r1, #13
 800ad26:	d832      	bhi.n	800ad8e <_strtod_l+0x8e>
 800ad28:	2908      	cmp	r1, #8
 800ad2a:	d832      	bhi.n	800ad92 <_strtod_l+0x92>
 800ad2c:	2900      	cmp	r1, #0
 800ad2e:	d03b      	beq.n	800ada8 <_strtod_l+0xa8>
 800ad30:	2200      	movs	r2, #0
 800ad32:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ad34:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800ad36:	782a      	ldrb	r2, [r5, #0]
 800ad38:	2a30      	cmp	r2, #48	@ 0x30
 800ad3a:	f040 80b3 	bne.w	800aea4 <_strtod_l+0x1a4>
 800ad3e:	786a      	ldrb	r2, [r5, #1]
 800ad40:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ad44:	2a58      	cmp	r2, #88	@ 0x58
 800ad46:	d16e      	bne.n	800ae26 <_strtod_l+0x126>
 800ad48:	9302      	str	r3, [sp, #8]
 800ad4a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ad4c:	9301      	str	r3, [sp, #4]
 800ad4e:	ab1a      	add	r3, sp, #104	@ 0x68
 800ad50:	9300      	str	r3, [sp, #0]
 800ad52:	4a8e      	ldr	r2, [pc, #568]	@ (800af8c <_strtod_l+0x28c>)
 800ad54:	9805      	ldr	r0, [sp, #20]
 800ad56:	ab1b      	add	r3, sp, #108	@ 0x6c
 800ad58:	a919      	add	r1, sp, #100	@ 0x64
 800ad5a:	f001 f82f 	bl	800bdbc <__gethex>
 800ad5e:	f010 060f 	ands.w	r6, r0, #15
 800ad62:	4604      	mov	r4, r0
 800ad64:	d005      	beq.n	800ad72 <_strtod_l+0x72>
 800ad66:	2e06      	cmp	r6, #6
 800ad68:	d128      	bne.n	800adbc <_strtod_l+0xbc>
 800ad6a:	3501      	adds	r5, #1
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	9519      	str	r5, [sp, #100]	@ 0x64
 800ad70:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ad72:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	f040 858e 	bne.w	800b896 <_strtod_l+0xb96>
 800ad7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ad7c:	b1cb      	cbz	r3, 800adb2 <_strtod_l+0xb2>
 800ad7e:	4652      	mov	r2, sl
 800ad80:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800ad84:	ec43 2b10 	vmov	d0, r2, r3
 800ad88:	b01f      	add	sp, #124	@ 0x7c
 800ad8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad8e:	2920      	cmp	r1, #32
 800ad90:	d1ce      	bne.n	800ad30 <_strtod_l+0x30>
 800ad92:	3201      	adds	r2, #1
 800ad94:	e7c1      	b.n	800ad1a <_strtod_l+0x1a>
 800ad96:	292d      	cmp	r1, #45	@ 0x2d
 800ad98:	d1ca      	bne.n	800ad30 <_strtod_l+0x30>
 800ad9a:	2101      	movs	r1, #1
 800ad9c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ad9e:	1c51      	adds	r1, r2, #1
 800ada0:	9119      	str	r1, [sp, #100]	@ 0x64
 800ada2:	7852      	ldrb	r2, [r2, #1]
 800ada4:	2a00      	cmp	r2, #0
 800ada6:	d1c5      	bne.n	800ad34 <_strtod_l+0x34>
 800ada8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800adaa:	9419      	str	r4, [sp, #100]	@ 0x64
 800adac:	2b00      	cmp	r3, #0
 800adae:	f040 8570 	bne.w	800b892 <_strtod_l+0xb92>
 800adb2:	4652      	mov	r2, sl
 800adb4:	465b      	mov	r3, fp
 800adb6:	e7e5      	b.n	800ad84 <_strtod_l+0x84>
 800adb8:	2100      	movs	r1, #0
 800adba:	e7ef      	b.n	800ad9c <_strtod_l+0x9c>
 800adbc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800adbe:	b13a      	cbz	r2, 800add0 <_strtod_l+0xd0>
 800adc0:	2135      	movs	r1, #53	@ 0x35
 800adc2:	a81c      	add	r0, sp, #112	@ 0x70
 800adc4:	f001 ff4c 	bl	800cc60 <__copybits>
 800adc8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800adca:	9805      	ldr	r0, [sp, #20]
 800adcc:	f001 fb1a 	bl	800c404 <_Bfree>
 800add0:	3e01      	subs	r6, #1
 800add2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800add4:	2e04      	cmp	r6, #4
 800add6:	d806      	bhi.n	800ade6 <_strtod_l+0xe6>
 800add8:	e8df f006 	tbb	[pc, r6]
 800addc:	201d0314 	.word	0x201d0314
 800ade0:	14          	.byte	0x14
 800ade1:	00          	.byte	0x00
 800ade2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ade6:	05e1      	lsls	r1, r4, #23
 800ade8:	bf48      	it	mi
 800adea:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800adee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800adf2:	0d1b      	lsrs	r3, r3, #20
 800adf4:	051b      	lsls	r3, r3, #20
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d1bb      	bne.n	800ad72 <_strtod_l+0x72>
 800adfa:	f000 fee7 	bl	800bbcc <__errno>
 800adfe:	2322      	movs	r3, #34	@ 0x22
 800ae00:	6003      	str	r3, [r0, #0]
 800ae02:	e7b6      	b.n	800ad72 <_strtod_l+0x72>
 800ae04:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ae08:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ae0c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ae10:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ae14:	e7e7      	b.n	800ade6 <_strtod_l+0xe6>
 800ae16:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800af94 <_strtod_l+0x294>
 800ae1a:	e7e4      	b.n	800ade6 <_strtod_l+0xe6>
 800ae1c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ae20:	f04f 3aff 	mov.w	sl, #4294967295
 800ae24:	e7df      	b.n	800ade6 <_strtod_l+0xe6>
 800ae26:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ae28:	1c5a      	adds	r2, r3, #1
 800ae2a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ae2c:	785b      	ldrb	r3, [r3, #1]
 800ae2e:	2b30      	cmp	r3, #48	@ 0x30
 800ae30:	d0f9      	beq.n	800ae26 <_strtod_l+0x126>
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d09d      	beq.n	800ad72 <_strtod_l+0x72>
 800ae36:	2301      	movs	r3, #1
 800ae38:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae3a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ae3c:	930c      	str	r3, [sp, #48]	@ 0x30
 800ae3e:	2300      	movs	r3, #0
 800ae40:	9308      	str	r3, [sp, #32]
 800ae42:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae44:	461f      	mov	r7, r3
 800ae46:	220a      	movs	r2, #10
 800ae48:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ae4a:	7805      	ldrb	r5, [r0, #0]
 800ae4c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800ae50:	b2d9      	uxtb	r1, r3
 800ae52:	2909      	cmp	r1, #9
 800ae54:	d928      	bls.n	800aea8 <_strtod_l+0x1a8>
 800ae56:	494e      	ldr	r1, [pc, #312]	@ (800af90 <_strtod_l+0x290>)
 800ae58:	2201      	movs	r2, #1
 800ae5a:	f000 fe4e 	bl	800bafa <strncmp>
 800ae5e:	2800      	cmp	r0, #0
 800ae60:	d032      	beq.n	800aec8 <_strtod_l+0x1c8>
 800ae62:	2000      	movs	r0, #0
 800ae64:	462a      	mov	r2, r5
 800ae66:	4681      	mov	r9, r0
 800ae68:	463d      	mov	r5, r7
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	2a65      	cmp	r2, #101	@ 0x65
 800ae6e:	d001      	beq.n	800ae74 <_strtod_l+0x174>
 800ae70:	2a45      	cmp	r2, #69	@ 0x45
 800ae72:	d114      	bne.n	800ae9e <_strtod_l+0x19e>
 800ae74:	b91d      	cbnz	r5, 800ae7e <_strtod_l+0x17e>
 800ae76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae78:	4302      	orrs	r2, r0
 800ae7a:	d095      	beq.n	800ada8 <_strtod_l+0xa8>
 800ae7c:	2500      	movs	r5, #0
 800ae7e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ae80:	1c62      	adds	r2, r4, #1
 800ae82:	9219      	str	r2, [sp, #100]	@ 0x64
 800ae84:	7862      	ldrb	r2, [r4, #1]
 800ae86:	2a2b      	cmp	r2, #43	@ 0x2b
 800ae88:	d077      	beq.n	800af7a <_strtod_l+0x27a>
 800ae8a:	2a2d      	cmp	r2, #45	@ 0x2d
 800ae8c:	d07b      	beq.n	800af86 <_strtod_l+0x286>
 800ae8e:	f04f 0c00 	mov.w	ip, #0
 800ae92:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ae96:	2909      	cmp	r1, #9
 800ae98:	f240 8082 	bls.w	800afa0 <_strtod_l+0x2a0>
 800ae9c:	9419      	str	r4, [sp, #100]	@ 0x64
 800ae9e:	f04f 0800 	mov.w	r8, #0
 800aea2:	e0a2      	b.n	800afea <_strtod_l+0x2ea>
 800aea4:	2300      	movs	r3, #0
 800aea6:	e7c7      	b.n	800ae38 <_strtod_l+0x138>
 800aea8:	2f08      	cmp	r7, #8
 800aeaa:	bfd5      	itete	le
 800aeac:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800aeae:	9908      	ldrgt	r1, [sp, #32]
 800aeb0:	fb02 3301 	mlale	r3, r2, r1, r3
 800aeb4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800aeb8:	f100 0001 	add.w	r0, r0, #1
 800aebc:	bfd4      	ite	le
 800aebe:	930a      	strle	r3, [sp, #40]	@ 0x28
 800aec0:	9308      	strgt	r3, [sp, #32]
 800aec2:	3701      	adds	r7, #1
 800aec4:	9019      	str	r0, [sp, #100]	@ 0x64
 800aec6:	e7bf      	b.n	800ae48 <_strtod_l+0x148>
 800aec8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aeca:	1c5a      	adds	r2, r3, #1
 800aecc:	9219      	str	r2, [sp, #100]	@ 0x64
 800aece:	785a      	ldrb	r2, [r3, #1]
 800aed0:	b37f      	cbz	r7, 800af32 <_strtod_l+0x232>
 800aed2:	4681      	mov	r9, r0
 800aed4:	463d      	mov	r5, r7
 800aed6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800aeda:	2b09      	cmp	r3, #9
 800aedc:	d912      	bls.n	800af04 <_strtod_l+0x204>
 800aede:	2301      	movs	r3, #1
 800aee0:	e7c4      	b.n	800ae6c <_strtod_l+0x16c>
 800aee2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aee4:	1c5a      	adds	r2, r3, #1
 800aee6:	9219      	str	r2, [sp, #100]	@ 0x64
 800aee8:	785a      	ldrb	r2, [r3, #1]
 800aeea:	3001      	adds	r0, #1
 800aeec:	2a30      	cmp	r2, #48	@ 0x30
 800aeee:	d0f8      	beq.n	800aee2 <_strtod_l+0x1e2>
 800aef0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800aef4:	2b08      	cmp	r3, #8
 800aef6:	f200 84d3 	bhi.w	800b8a0 <_strtod_l+0xba0>
 800aefa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aefc:	930c      	str	r3, [sp, #48]	@ 0x30
 800aefe:	4681      	mov	r9, r0
 800af00:	2000      	movs	r0, #0
 800af02:	4605      	mov	r5, r0
 800af04:	3a30      	subs	r2, #48	@ 0x30
 800af06:	f100 0301 	add.w	r3, r0, #1
 800af0a:	d02a      	beq.n	800af62 <_strtod_l+0x262>
 800af0c:	4499      	add	r9, r3
 800af0e:	eb00 0c05 	add.w	ip, r0, r5
 800af12:	462b      	mov	r3, r5
 800af14:	210a      	movs	r1, #10
 800af16:	4563      	cmp	r3, ip
 800af18:	d10d      	bne.n	800af36 <_strtod_l+0x236>
 800af1a:	1c69      	adds	r1, r5, #1
 800af1c:	4401      	add	r1, r0
 800af1e:	4428      	add	r0, r5
 800af20:	2808      	cmp	r0, #8
 800af22:	dc16      	bgt.n	800af52 <_strtod_l+0x252>
 800af24:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800af26:	230a      	movs	r3, #10
 800af28:	fb03 2300 	mla	r3, r3, r0, r2
 800af2c:	930a      	str	r3, [sp, #40]	@ 0x28
 800af2e:	2300      	movs	r3, #0
 800af30:	e018      	b.n	800af64 <_strtod_l+0x264>
 800af32:	4638      	mov	r0, r7
 800af34:	e7da      	b.n	800aeec <_strtod_l+0x1ec>
 800af36:	2b08      	cmp	r3, #8
 800af38:	f103 0301 	add.w	r3, r3, #1
 800af3c:	dc03      	bgt.n	800af46 <_strtod_l+0x246>
 800af3e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800af40:	434e      	muls	r6, r1
 800af42:	960a      	str	r6, [sp, #40]	@ 0x28
 800af44:	e7e7      	b.n	800af16 <_strtod_l+0x216>
 800af46:	2b10      	cmp	r3, #16
 800af48:	bfde      	ittt	le
 800af4a:	9e08      	ldrle	r6, [sp, #32]
 800af4c:	434e      	mulle	r6, r1
 800af4e:	9608      	strle	r6, [sp, #32]
 800af50:	e7e1      	b.n	800af16 <_strtod_l+0x216>
 800af52:	280f      	cmp	r0, #15
 800af54:	dceb      	bgt.n	800af2e <_strtod_l+0x22e>
 800af56:	9808      	ldr	r0, [sp, #32]
 800af58:	230a      	movs	r3, #10
 800af5a:	fb03 2300 	mla	r3, r3, r0, r2
 800af5e:	9308      	str	r3, [sp, #32]
 800af60:	e7e5      	b.n	800af2e <_strtod_l+0x22e>
 800af62:	4629      	mov	r1, r5
 800af64:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800af66:	1c50      	adds	r0, r2, #1
 800af68:	9019      	str	r0, [sp, #100]	@ 0x64
 800af6a:	7852      	ldrb	r2, [r2, #1]
 800af6c:	4618      	mov	r0, r3
 800af6e:	460d      	mov	r5, r1
 800af70:	e7b1      	b.n	800aed6 <_strtod_l+0x1d6>
 800af72:	f04f 0900 	mov.w	r9, #0
 800af76:	2301      	movs	r3, #1
 800af78:	e77d      	b.n	800ae76 <_strtod_l+0x176>
 800af7a:	f04f 0c00 	mov.w	ip, #0
 800af7e:	1ca2      	adds	r2, r4, #2
 800af80:	9219      	str	r2, [sp, #100]	@ 0x64
 800af82:	78a2      	ldrb	r2, [r4, #2]
 800af84:	e785      	b.n	800ae92 <_strtod_l+0x192>
 800af86:	f04f 0c01 	mov.w	ip, #1
 800af8a:	e7f8      	b.n	800af7e <_strtod_l+0x27e>
 800af8c:	0800e9ec 	.word	0x0800e9ec
 800af90:	0800e9c8 	.word	0x0800e9c8
 800af94:	7ff00000 	.word	0x7ff00000
 800af98:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800af9a:	1c51      	adds	r1, r2, #1
 800af9c:	9119      	str	r1, [sp, #100]	@ 0x64
 800af9e:	7852      	ldrb	r2, [r2, #1]
 800afa0:	2a30      	cmp	r2, #48	@ 0x30
 800afa2:	d0f9      	beq.n	800af98 <_strtod_l+0x298>
 800afa4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800afa8:	2908      	cmp	r1, #8
 800afaa:	f63f af78 	bhi.w	800ae9e <_strtod_l+0x19e>
 800afae:	3a30      	subs	r2, #48	@ 0x30
 800afb0:	920e      	str	r2, [sp, #56]	@ 0x38
 800afb2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800afb4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800afb6:	f04f 080a 	mov.w	r8, #10
 800afba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800afbc:	1c56      	adds	r6, r2, #1
 800afbe:	9619      	str	r6, [sp, #100]	@ 0x64
 800afc0:	7852      	ldrb	r2, [r2, #1]
 800afc2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800afc6:	f1be 0f09 	cmp.w	lr, #9
 800afca:	d939      	bls.n	800b040 <_strtod_l+0x340>
 800afcc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800afce:	1a76      	subs	r6, r6, r1
 800afd0:	2e08      	cmp	r6, #8
 800afd2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800afd6:	dc03      	bgt.n	800afe0 <_strtod_l+0x2e0>
 800afd8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800afda:	4588      	cmp	r8, r1
 800afdc:	bfa8      	it	ge
 800afde:	4688      	movge	r8, r1
 800afe0:	f1bc 0f00 	cmp.w	ip, #0
 800afe4:	d001      	beq.n	800afea <_strtod_l+0x2ea>
 800afe6:	f1c8 0800 	rsb	r8, r8, #0
 800afea:	2d00      	cmp	r5, #0
 800afec:	d14e      	bne.n	800b08c <_strtod_l+0x38c>
 800afee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800aff0:	4308      	orrs	r0, r1
 800aff2:	f47f aebe 	bne.w	800ad72 <_strtod_l+0x72>
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	f47f aed6 	bne.w	800ada8 <_strtod_l+0xa8>
 800affc:	2a69      	cmp	r2, #105	@ 0x69
 800affe:	d028      	beq.n	800b052 <_strtod_l+0x352>
 800b000:	dc25      	bgt.n	800b04e <_strtod_l+0x34e>
 800b002:	2a49      	cmp	r2, #73	@ 0x49
 800b004:	d025      	beq.n	800b052 <_strtod_l+0x352>
 800b006:	2a4e      	cmp	r2, #78	@ 0x4e
 800b008:	f47f aece 	bne.w	800ada8 <_strtod_l+0xa8>
 800b00c:	499b      	ldr	r1, [pc, #620]	@ (800b27c <_strtod_l+0x57c>)
 800b00e:	a819      	add	r0, sp, #100	@ 0x64
 800b010:	f001 f8f6 	bl	800c200 <__match>
 800b014:	2800      	cmp	r0, #0
 800b016:	f43f aec7 	beq.w	800ada8 <_strtod_l+0xa8>
 800b01a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b01c:	781b      	ldrb	r3, [r3, #0]
 800b01e:	2b28      	cmp	r3, #40	@ 0x28
 800b020:	d12e      	bne.n	800b080 <_strtod_l+0x380>
 800b022:	4997      	ldr	r1, [pc, #604]	@ (800b280 <_strtod_l+0x580>)
 800b024:	aa1c      	add	r2, sp, #112	@ 0x70
 800b026:	a819      	add	r0, sp, #100	@ 0x64
 800b028:	f001 f8fe 	bl	800c228 <__hexnan>
 800b02c:	2805      	cmp	r0, #5
 800b02e:	d127      	bne.n	800b080 <_strtod_l+0x380>
 800b030:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b032:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b036:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b03a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b03e:	e698      	b.n	800ad72 <_strtod_l+0x72>
 800b040:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b042:	fb08 2101 	mla	r1, r8, r1, r2
 800b046:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b04a:	920e      	str	r2, [sp, #56]	@ 0x38
 800b04c:	e7b5      	b.n	800afba <_strtod_l+0x2ba>
 800b04e:	2a6e      	cmp	r2, #110	@ 0x6e
 800b050:	e7da      	b.n	800b008 <_strtod_l+0x308>
 800b052:	498c      	ldr	r1, [pc, #560]	@ (800b284 <_strtod_l+0x584>)
 800b054:	a819      	add	r0, sp, #100	@ 0x64
 800b056:	f001 f8d3 	bl	800c200 <__match>
 800b05a:	2800      	cmp	r0, #0
 800b05c:	f43f aea4 	beq.w	800ada8 <_strtod_l+0xa8>
 800b060:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b062:	4989      	ldr	r1, [pc, #548]	@ (800b288 <_strtod_l+0x588>)
 800b064:	3b01      	subs	r3, #1
 800b066:	a819      	add	r0, sp, #100	@ 0x64
 800b068:	9319      	str	r3, [sp, #100]	@ 0x64
 800b06a:	f001 f8c9 	bl	800c200 <__match>
 800b06e:	b910      	cbnz	r0, 800b076 <_strtod_l+0x376>
 800b070:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b072:	3301      	adds	r3, #1
 800b074:	9319      	str	r3, [sp, #100]	@ 0x64
 800b076:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800b298 <_strtod_l+0x598>
 800b07a:	f04f 0a00 	mov.w	sl, #0
 800b07e:	e678      	b.n	800ad72 <_strtod_l+0x72>
 800b080:	4882      	ldr	r0, [pc, #520]	@ (800b28c <_strtod_l+0x58c>)
 800b082:	f000 fde1 	bl	800bc48 <nan>
 800b086:	ec5b ab10 	vmov	sl, fp, d0
 800b08a:	e672      	b.n	800ad72 <_strtod_l+0x72>
 800b08c:	eba8 0309 	sub.w	r3, r8, r9
 800b090:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b092:	9309      	str	r3, [sp, #36]	@ 0x24
 800b094:	2f00      	cmp	r7, #0
 800b096:	bf08      	it	eq
 800b098:	462f      	moveq	r7, r5
 800b09a:	2d10      	cmp	r5, #16
 800b09c:	462c      	mov	r4, r5
 800b09e:	bfa8      	it	ge
 800b0a0:	2410      	movge	r4, #16
 800b0a2:	f7f5 fa47 	bl	8000534 <__aeabi_ui2d>
 800b0a6:	2d09      	cmp	r5, #9
 800b0a8:	4682      	mov	sl, r0
 800b0aa:	468b      	mov	fp, r1
 800b0ac:	dc13      	bgt.n	800b0d6 <_strtod_l+0x3d6>
 800b0ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	f43f ae5e 	beq.w	800ad72 <_strtod_l+0x72>
 800b0b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0b8:	dd78      	ble.n	800b1ac <_strtod_l+0x4ac>
 800b0ba:	2b16      	cmp	r3, #22
 800b0bc:	dc5f      	bgt.n	800b17e <_strtod_l+0x47e>
 800b0be:	4974      	ldr	r1, [pc, #464]	@ (800b290 <_strtod_l+0x590>)
 800b0c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b0c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0c8:	4652      	mov	r2, sl
 800b0ca:	465b      	mov	r3, fp
 800b0cc:	f7f5 faac 	bl	8000628 <__aeabi_dmul>
 800b0d0:	4682      	mov	sl, r0
 800b0d2:	468b      	mov	fp, r1
 800b0d4:	e64d      	b.n	800ad72 <_strtod_l+0x72>
 800b0d6:	4b6e      	ldr	r3, [pc, #440]	@ (800b290 <_strtod_l+0x590>)
 800b0d8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b0dc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b0e0:	f7f5 faa2 	bl	8000628 <__aeabi_dmul>
 800b0e4:	4682      	mov	sl, r0
 800b0e6:	9808      	ldr	r0, [sp, #32]
 800b0e8:	468b      	mov	fp, r1
 800b0ea:	f7f5 fa23 	bl	8000534 <__aeabi_ui2d>
 800b0ee:	4602      	mov	r2, r0
 800b0f0:	460b      	mov	r3, r1
 800b0f2:	4650      	mov	r0, sl
 800b0f4:	4659      	mov	r1, fp
 800b0f6:	f7f5 f8e1 	bl	80002bc <__adddf3>
 800b0fa:	2d0f      	cmp	r5, #15
 800b0fc:	4682      	mov	sl, r0
 800b0fe:	468b      	mov	fp, r1
 800b100:	ddd5      	ble.n	800b0ae <_strtod_l+0x3ae>
 800b102:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b104:	1b2c      	subs	r4, r5, r4
 800b106:	441c      	add	r4, r3
 800b108:	2c00      	cmp	r4, #0
 800b10a:	f340 8096 	ble.w	800b23a <_strtod_l+0x53a>
 800b10e:	f014 030f 	ands.w	r3, r4, #15
 800b112:	d00a      	beq.n	800b12a <_strtod_l+0x42a>
 800b114:	495e      	ldr	r1, [pc, #376]	@ (800b290 <_strtod_l+0x590>)
 800b116:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b11a:	4652      	mov	r2, sl
 800b11c:	465b      	mov	r3, fp
 800b11e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b122:	f7f5 fa81 	bl	8000628 <__aeabi_dmul>
 800b126:	4682      	mov	sl, r0
 800b128:	468b      	mov	fp, r1
 800b12a:	f034 040f 	bics.w	r4, r4, #15
 800b12e:	d073      	beq.n	800b218 <_strtod_l+0x518>
 800b130:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b134:	dd48      	ble.n	800b1c8 <_strtod_l+0x4c8>
 800b136:	2400      	movs	r4, #0
 800b138:	46a0      	mov	r8, r4
 800b13a:	940a      	str	r4, [sp, #40]	@ 0x28
 800b13c:	46a1      	mov	r9, r4
 800b13e:	9a05      	ldr	r2, [sp, #20]
 800b140:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800b298 <_strtod_l+0x598>
 800b144:	2322      	movs	r3, #34	@ 0x22
 800b146:	6013      	str	r3, [r2, #0]
 800b148:	f04f 0a00 	mov.w	sl, #0
 800b14c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b14e:	2b00      	cmp	r3, #0
 800b150:	f43f ae0f 	beq.w	800ad72 <_strtod_l+0x72>
 800b154:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b156:	9805      	ldr	r0, [sp, #20]
 800b158:	f001 f954 	bl	800c404 <_Bfree>
 800b15c:	9805      	ldr	r0, [sp, #20]
 800b15e:	4649      	mov	r1, r9
 800b160:	f001 f950 	bl	800c404 <_Bfree>
 800b164:	9805      	ldr	r0, [sp, #20]
 800b166:	4641      	mov	r1, r8
 800b168:	f001 f94c 	bl	800c404 <_Bfree>
 800b16c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b16e:	9805      	ldr	r0, [sp, #20]
 800b170:	f001 f948 	bl	800c404 <_Bfree>
 800b174:	9805      	ldr	r0, [sp, #20]
 800b176:	4621      	mov	r1, r4
 800b178:	f001 f944 	bl	800c404 <_Bfree>
 800b17c:	e5f9      	b.n	800ad72 <_strtod_l+0x72>
 800b17e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b180:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b184:	4293      	cmp	r3, r2
 800b186:	dbbc      	blt.n	800b102 <_strtod_l+0x402>
 800b188:	4c41      	ldr	r4, [pc, #260]	@ (800b290 <_strtod_l+0x590>)
 800b18a:	f1c5 050f 	rsb	r5, r5, #15
 800b18e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b192:	4652      	mov	r2, sl
 800b194:	465b      	mov	r3, fp
 800b196:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b19a:	f7f5 fa45 	bl	8000628 <__aeabi_dmul>
 800b19e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1a0:	1b5d      	subs	r5, r3, r5
 800b1a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b1a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b1aa:	e78f      	b.n	800b0cc <_strtod_l+0x3cc>
 800b1ac:	3316      	adds	r3, #22
 800b1ae:	dba8      	blt.n	800b102 <_strtod_l+0x402>
 800b1b0:	4b37      	ldr	r3, [pc, #220]	@ (800b290 <_strtod_l+0x590>)
 800b1b2:	eba9 0808 	sub.w	r8, r9, r8
 800b1b6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b1ba:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b1be:	4650      	mov	r0, sl
 800b1c0:	4659      	mov	r1, fp
 800b1c2:	f7f5 fb5b 	bl	800087c <__aeabi_ddiv>
 800b1c6:	e783      	b.n	800b0d0 <_strtod_l+0x3d0>
 800b1c8:	4b32      	ldr	r3, [pc, #200]	@ (800b294 <_strtod_l+0x594>)
 800b1ca:	9308      	str	r3, [sp, #32]
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	1124      	asrs	r4, r4, #4
 800b1d0:	4650      	mov	r0, sl
 800b1d2:	4659      	mov	r1, fp
 800b1d4:	461e      	mov	r6, r3
 800b1d6:	2c01      	cmp	r4, #1
 800b1d8:	dc21      	bgt.n	800b21e <_strtod_l+0x51e>
 800b1da:	b10b      	cbz	r3, 800b1e0 <_strtod_l+0x4e0>
 800b1dc:	4682      	mov	sl, r0
 800b1de:	468b      	mov	fp, r1
 800b1e0:	492c      	ldr	r1, [pc, #176]	@ (800b294 <_strtod_l+0x594>)
 800b1e2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b1e6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b1ea:	4652      	mov	r2, sl
 800b1ec:	465b      	mov	r3, fp
 800b1ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b1f2:	f7f5 fa19 	bl	8000628 <__aeabi_dmul>
 800b1f6:	4b28      	ldr	r3, [pc, #160]	@ (800b298 <_strtod_l+0x598>)
 800b1f8:	460a      	mov	r2, r1
 800b1fa:	400b      	ands	r3, r1
 800b1fc:	4927      	ldr	r1, [pc, #156]	@ (800b29c <_strtod_l+0x59c>)
 800b1fe:	428b      	cmp	r3, r1
 800b200:	4682      	mov	sl, r0
 800b202:	d898      	bhi.n	800b136 <_strtod_l+0x436>
 800b204:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b208:	428b      	cmp	r3, r1
 800b20a:	bf86      	itte	hi
 800b20c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800b2a0 <_strtod_l+0x5a0>
 800b210:	f04f 3aff 	movhi.w	sl, #4294967295
 800b214:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b218:	2300      	movs	r3, #0
 800b21a:	9308      	str	r3, [sp, #32]
 800b21c:	e07a      	b.n	800b314 <_strtod_l+0x614>
 800b21e:	07e2      	lsls	r2, r4, #31
 800b220:	d505      	bpl.n	800b22e <_strtod_l+0x52e>
 800b222:	9b08      	ldr	r3, [sp, #32]
 800b224:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b228:	f7f5 f9fe 	bl	8000628 <__aeabi_dmul>
 800b22c:	2301      	movs	r3, #1
 800b22e:	9a08      	ldr	r2, [sp, #32]
 800b230:	3208      	adds	r2, #8
 800b232:	3601      	adds	r6, #1
 800b234:	1064      	asrs	r4, r4, #1
 800b236:	9208      	str	r2, [sp, #32]
 800b238:	e7cd      	b.n	800b1d6 <_strtod_l+0x4d6>
 800b23a:	d0ed      	beq.n	800b218 <_strtod_l+0x518>
 800b23c:	4264      	negs	r4, r4
 800b23e:	f014 020f 	ands.w	r2, r4, #15
 800b242:	d00a      	beq.n	800b25a <_strtod_l+0x55a>
 800b244:	4b12      	ldr	r3, [pc, #72]	@ (800b290 <_strtod_l+0x590>)
 800b246:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b24a:	4650      	mov	r0, sl
 800b24c:	4659      	mov	r1, fp
 800b24e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b252:	f7f5 fb13 	bl	800087c <__aeabi_ddiv>
 800b256:	4682      	mov	sl, r0
 800b258:	468b      	mov	fp, r1
 800b25a:	1124      	asrs	r4, r4, #4
 800b25c:	d0dc      	beq.n	800b218 <_strtod_l+0x518>
 800b25e:	2c1f      	cmp	r4, #31
 800b260:	dd20      	ble.n	800b2a4 <_strtod_l+0x5a4>
 800b262:	2400      	movs	r4, #0
 800b264:	46a0      	mov	r8, r4
 800b266:	940a      	str	r4, [sp, #40]	@ 0x28
 800b268:	46a1      	mov	r9, r4
 800b26a:	9a05      	ldr	r2, [sp, #20]
 800b26c:	2322      	movs	r3, #34	@ 0x22
 800b26e:	f04f 0a00 	mov.w	sl, #0
 800b272:	f04f 0b00 	mov.w	fp, #0
 800b276:	6013      	str	r3, [r2, #0]
 800b278:	e768      	b.n	800b14c <_strtod_l+0x44c>
 800b27a:	bf00      	nop
 800b27c:	0800e9d3 	.word	0x0800e9d3
 800b280:	0800e9d8 	.word	0x0800e9d8
 800b284:	0800e9ca 	.word	0x0800e9ca
 800b288:	0800e9cd 	.word	0x0800e9cd
 800b28c:	0800ed4c 	.word	0x0800ed4c
 800b290:	0800eb48 	.word	0x0800eb48
 800b294:	0800eb20 	.word	0x0800eb20
 800b298:	7ff00000 	.word	0x7ff00000
 800b29c:	7ca00000 	.word	0x7ca00000
 800b2a0:	7fefffff 	.word	0x7fefffff
 800b2a4:	f014 0310 	ands.w	r3, r4, #16
 800b2a8:	bf18      	it	ne
 800b2aa:	236a      	movne	r3, #106	@ 0x6a
 800b2ac:	4ea9      	ldr	r6, [pc, #676]	@ (800b554 <_strtod_l+0x854>)
 800b2ae:	9308      	str	r3, [sp, #32]
 800b2b0:	4650      	mov	r0, sl
 800b2b2:	4659      	mov	r1, fp
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	07e2      	lsls	r2, r4, #31
 800b2b8:	d504      	bpl.n	800b2c4 <_strtod_l+0x5c4>
 800b2ba:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b2be:	f7f5 f9b3 	bl	8000628 <__aeabi_dmul>
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	1064      	asrs	r4, r4, #1
 800b2c6:	f106 0608 	add.w	r6, r6, #8
 800b2ca:	d1f4      	bne.n	800b2b6 <_strtod_l+0x5b6>
 800b2cc:	b10b      	cbz	r3, 800b2d2 <_strtod_l+0x5d2>
 800b2ce:	4682      	mov	sl, r0
 800b2d0:	468b      	mov	fp, r1
 800b2d2:	9b08      	ldr	r3, [sp, #32]
 800b2d4:	b1b3      	cbz	r3, 800b304 <_strtod_l+0x604>
 800b2d6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b2da:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	4659      	mov	r1, fp
 800b2e2:	dd0f      	ble.n	800b304 <_strtod_l+0x604>
 800b2e4:	2b1f      	cmp	r3, #31
 800b2e6:	dd55      	ble.n	800b394 <_strtod_l+0x694>
 800b2e8:	2b34      	cmp	r3, #52	@ 0x34
 800b2ea:	bfde      	ittt	le
 800b2ec:	f04f 33ff 	movle.w	r3, #4294967295
 800b2f0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b2f4:	4093      	lslle	r3, r2
 800b2f6:	f04f 0a00 	mov.w	sl, #0
 800b2fa:	bfcc      	ite	gt
 800b2fc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b300:	ea03 0b01 	andle.w	fp, r3, r1
 800b304:	2200      	movs	r2, #0
 800b306:	2300      	movs	r3, #0
 800b308:	4650      	mov	r0, sl
 800b30a:	4659      	mov	r1, fp
 800b30c:	f7f5 fbf4 	bl	8000af8 <__aeabi_dcmpeq>
 800b310:	2800      	cmp	r0, #0
 800b312:	d1a6      	bne.n	800b262 <_strtod_l+0x562>
 800b314:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b316:	9300      	str	r3, [sp, #0]
 800b318:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b31a:	9805      	ldr	r0, [sp, #20]
 800b31c:	462b      	mov	r3, r5
 800b31e:	463a      	mov	r2, r7
 800b320:	f001 f8d8 	bl	800c4d4 <__s2b>
 800b324:	900a      	str	r0, [sp, #40]	@ 0x28
 800b326:	2800      	cmp	r0, #0
 800b328:	f43f af05 	beq.w	800b136 <_strtod_l+0x436>
 800b32c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b32e:	2a00      	cmp	r2, #0
 800b330:	eba9 0308 	sub.w	r3, r9, r8
 800b334:	bfa8      	it	ge
 800b336:	2300      	movge	r3, #0
 800b338:	9312      	str	r3, [sp, #72]	@ 0x48
 800b33a:	2400      	movs	r4, #0
 800b33c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b340:	9316      	str	r3, [sp, #88]	@ 0x58
 800b342:	46a0      	mov	r8, r4
 800b344:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b346:	9805      	ldr	r0, [sp, #20]
 800b348:	6859      	ldr	r1, [r3, #4]
 800b34a:	f001 f81b 	bl	800c384 <_Balloc>
 800b34e:	4681      	mov	r9, r0
 800b350:	2800      	cmp	r0, #0
 800b352:	f43f aef4 	beq.w	800b13e <_strtod_l+0x43e>
 800b356:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b358:	691a      	ldr	r2, [r3, #16]
 800b35a:	3202      	adds	r2, #2
 800b35c:	f103 010c 	add.w	r1, r3, #12
 800b360:	0092      	lsls	r2, r2, #2
 800b362:	300c      	adds	r0, #12
 800b364:	f000 fc5f 	bl	800bc26 <memcpy>
 800b368:	ec4b ab10 	vmov	d0, sl, fp
 800b36c:	9805      	ldr	r0, [sp, #20]
 800b36e:	aa1c      	add	r2, sp, #112	@ 0x70
 800b370:	a91b      	add	r1, sp, #108	@ 0x6c
 800b372:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b376:	f001 fbe9 	bl	800cb4c <__d2b>
 800b37a:	901a      	str	r0, [sp, #104]	@ 0x68
 800b37c:	2800      	cmp	r0, #0
 800b37e:	f43f aede 	beq.w	800b13e <_strtod_l+0x43e>
 800b382:	9805      	ldr	r0, [sp, #20]
 800b384:	2101      	movs	r1, #1
 800b386:	f001 f93b 	bl	800c600 <__i2b>
 800b38a:	4680      	mov	r8, r0
 800b38c:	b948      	cbnz	r0, 800b3a2 <_strtod_l+0x6a2>
 800b38e:	f04f 0800 	mov.w	r8, #0
 800b392:	e6d4      	b.n	800b13e <_strtod_l+0x43e>
 800b394:	f04f 32ff 	mov.w	r2, #4294967295
 800b398:	fa02 f303 	lsl.w	r3, r2, r3
 800b39c:	ea03 0a0a 	and.w	sl, r3, sl
 800b3a0:	e7b0      	b.n	800b304 <_strtod_l+0x604>
 800b3a2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b3a4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b3a6:	2d00      	cmp	r5, #0
 800b3a8:	bfab      	itete	ge
 800b3aa:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b3ac:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b3ae:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b3b0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b3b2:	bfac      	ite	ge
 800b3b4:	18ef      	addge	r7, r5, r3
 800b3b6:	1b5e      	sublt	r6, r3, r5
 800b3b8:	9b08      	ldr	r3, [sp, #32]
 800b3ba:	1aed      	subs	r5, r5, r3
 800b3bc:	4415      	add	r5, r2
 800b3be:	4b66      	ldr	r3, [pc, #408]	@ (800b558 <_strtod_l+0x858>)
 800b3c0:	3d01      	subs	r5, #1
 800b3c2:	429d      	cmp	r5, r3
 800b3c4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b3c8:	da50      	bge.n	800b46c <_strtod_l+0x76c>
 800b3ca:	1b5b      	subs	r3, r3, r5
 800b3cc:	2b1f      	cmp	r3, #31
 800b3ce:	eba2 0203 	sub.w	r2, r2, r3
 800b3d2:	f04f 0101 	mov.w	r1, #1
 800b3d6:	dc3d      	bgt.n	800b454 <_strtod_l+0x754>
 800b3d8:	fa01 f303 	lsl.w	r3, r1, r3
 800b3dc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b3de:	2300      	movs	r3, #0
 800b3e0:	9310      	str	r3, [sp, #64]	@ 0x40
 800b3e2:	18bd      	adds	r5, r7, r2
 800b3e4:	9b08      	ldr	r3, [sp, #32]
 800b3e6:	42af      	cmp	r7, r5
 800b3e8:	4416      	add	r6, r2
 800b3ea:	441e      	add	r6, r3
 800b3ec:	463b      	mov	r3, r7
 800b3ee:	bfa8      	it	ge
 800b3f0:	462b      	movge	r3, r5
 800b3f2:	42b3      	cmp	r3, r6
 800b3f4:	bfa8      	it	ge
 800b3f6:	4633      	movge	r3, r6
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	bfc2      	ittt	gt
 800b3fc:	1aed      	subgt	r5, r5, r3
 800b3fe:	1af6      	subgt	r6, r6, r3
 800b400:	1aff      	subgt	r7, r7, r3
 800b402:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b404:	2b00      	cmp	r3, #0
 800b406:	dd16      	ble.n	800b436 <_strtod_l+0x736>
 800b408:	4641      	mov	r1, r8
 800b40a:	9805      	ldr	r0, [sp, #20]
 800b40c:	461a      	mov	r2, r3
 800b40e:	f001 f9b7 	bl	800c780 <__pow5mult>
 800b412:	4680      	mov	r8, r0
 800b414:	2800      	cmp	r0, #0
 800b416:	d0ba      	beq.n	800b38e <_strtod_l+0x68e>
 800b418:	4601      	mov	r1, r0
 800b41a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b41c:	9805      	ldr	r0, [sp, #20]
 800b41e:	f001 f905 	bl	800c62c <__multiply>
 800b422:	900e      	str	r0, [sp, #56]	@ 0x38
 800b424:	2800      	cmp	r0, #0
 800b426:	f43f ae8a 	beq.w	800b13e <_strtod_l+0x43e>
 800b42a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b42c:	9805      	ldr	r0, [sp, #20]
 800b42e:	f000 ffe9 	bl	800c404 <_Bfree>
 800b432:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b434:	931a      	str	r3, [sp, #104]	@ 0x68
 800b436:	2d00      	cmp	r5, #0
 800b438:	dc1d      	bgt.n	800b476 <_strtod_l+0x776>
 800b43a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	dd23      	ble.n	800b488 <_strtod_l+0x788>
 800b440:	4649      	mov	r1, r9
 800b442:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b444:	9805      	ldr	r0, [sp, #20]
 800b446:	f001 f99b 	bl	800c780 <__pow5mult>
 800b44a:	4681      	mov	r9, r0
 800b44c:	b9e0      	cbnz	r0, 800b488 <_strtod_l+0x788>
 800b44e:	f04f 0900 	mov.w	r9, #0
 800b452:	e674      	b.n	800b13e <_strtod_l+0x43e>
 800b454:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b458:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b45c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b460:	35e2      	adds	r5, #226	@ 0xe2
 800b462:	fa01 f305 	lsl.w	r3, r1, r5
 800b466:	9310      	str	r3, [sp, #64]	@ 0x40
 800b468:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b46a:	e7ba      	b.n	800b3e2 <_strtod_l+0x6e2>
 800b46c:	2300      	movs	r3, #0
 800b46e:	9310      	str	r3, [sp, #64]	@ 0x40
 800b470:	2301      	movs	r3, #1
 800b472:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b474:	e7b5      	b.n	800b3e2 <_strtod_l+0x6e2>
 800b476:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b478:	9805      	ldr	r0, [sp, #20]
 800b47a:	462a      	mov	r2, r5
 800b47c:	f001 f9da 	bl	800c834 <__lshift>
 800b480:	901a      	str	r0, [sp, #104]	@ 0x68
 800b482:	2800      	cmp	r0, #0
 800b484:	d1d9      	bne.n	800b43a <_strtod_l+0x73a>
 800b486:	e65a      	b.n	800b13e <_strtod_l+0x43e>
 800b488:	2e00      	cmp	r6, #0
 800b48a:	dd07      	ble.n	800b49c <_strtod_l+0x79c>
 800b48c:	4649      	mov	r1, r9
 800b48e:	9805      	ldr	r0, [sp, #20]
 800b490:	4632      	mov	r2, r6
 800b492:	f001 f9cf 	bl	800c834 <__lshift>
 800b496:	4681      	mov	r9, r0
 800b498:	2800      	cmp	r0, #0
 800b49a:	d0d8      	beq.n	800b44e <_strtod_l+0x74e>
 800b49c:	2f00      	cmp	r7, #0
 800b49e:	dd08      	ble.n	800b4b2 <_strtod_l+0x7b2>
 800b4a0:	4641      	mov	r1, r8
 800b4a2:	9805      	ldr	r0, [sp, #20]
 800b4a4:	463a      	mov	r2, r7
 800b4a6:	f001 f9c5 	bl	800c834 <__lshift>
 800b4aa:	4680      	mov	r8, r0
 800b4ac:	2800      	cmp	r0, #0
 800b4ae:	f43f ae46 	beq.w	800b13e <_strtod_l+0x43e>
 800b4b2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b4b4:	9805      	ldr	r0, [sp, #20]
 800b4b6:	464a      	mov	r2, r9
 800b4b8:	f001 fa44 	bl	800c944 <__mdiff>
 800b4bc:	4604      	mov	r4, r0
 800b4be:	2800      	cmp	r0, #0
 800b4c0:	f43f ae3d 	beq.w	800b13e <_strtod_l+0x43e>
 800b4c4:	68c3      	ldr	r3, [r0, #12]
 800b4c6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	60c3      	str	r3, [r0, #12]
 800b4cc:	4641      	mov	r1, r8
 800b4ce:	f001 fa1d 	bl	800c90c <__mcmp>
 800b4d2:	2800      	cmp	r0, #0
 800b4d4:	da46      	bge.n	800b564 <_strtod_l+0x864>
 800b4d6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b4d8:	ea53 030a 	orrs.w	r3, r3, sl
 800b4dc:	d16c      	bne.n	800b5b8 <_strtod_l+0x8b8>
 800b4de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d168      	bne.n	800b5b8 <_strtod_l+0x8b8>
 800b4e6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b4ea:	0d1b      	lsrs	r3, r3, #20
 800b4ec:	051b      	lsls	r3, r3, #20
 800b4ee:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b4f2:	d961      	bls.n	800b5b8 <_strtod_l+0x8b8>
 800b4f4:	6963      	ldr	r3, [r4, #20]
 800b4f6:	b913      	cbnz	r3, 800b4fe <_strtod_l+0x7fe>
 800b4f8:	6923      	ldr	r3, [r4, #16]
 800b4fa:	2b01      	cmp	r3, #1
 800b4fc:	dd5c      	ble.n	800b5b8 <_strtod_l+0x8b8>
 800b4fe:	4621      	mov	r1, r4
 800b500:	2201      	movs	r2, #1
 800b502:	9805      	ldr	r0, [sp, #20]
 800b504:	f001 f996 	bl	800c834 <__lshift>
 800b508:	4641      	mov	r1, r8
 800b50a:	4604      	mov	r4, r0
 800b50c:	f001 f9fe 	bl	800c90c <__mcmp>
 800b510:	2800      	cmp	r0, #0
 800b512:	dd51      	ble.n	800b5b8 <_strtod_l+0x8b8>
 800b514:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b518:	9a08      	ldr	r2, [sp, #32]
 800b51a:	0d1b      	lsrs	r3, r3, #20
 800b51c:	051b      	lsls	r3, r3, #20
 800b51e:	2a00      	cmp	r2, #0
 800b520:	d06b      	beq.n	800b5fa <_strtod_l+0x8fa>
 800b522:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b526:	d868      	bhi.n	800b5fa <_strtod_l+0x8fa>
 800b528:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b52c:	f67f ae9d 	bls.w	800b26a <_strtod_l+0x56a>
 800b530:	4b0a      	ldr	r3, [pc, #40]	@ (800b55c <_strtod_l+0x85c>)
 800b532:	4650      	mov	r0, sl
 800b534:	4659      	mov	r1, fp
 800b536:	2200      	movs	r2, #0
 800b538:	f7f5 f876 	bl	8000628 <__aeabi_dmul>
 800b53c:	4b08      	ldr	r3, [pc, #32]	@ (800b560 <_strtod_l+0x860>)
 800b53e:	400b      	ands	r3, r1
 800b540:	4682      	mov	sl, r0
 800b542:	468b      	mov	fp, r1
 800b544:	2b00      	cmp	r3, #0
 800b546:	f47f ae05 	bne.w	800b154 <_strtod_l+0x454>
 800b54a:	9a05      	ldr	r2, [sp, #20]
 800b54c:	2322      	movs	r3, #34	@ 0x22
 800b54e:	6013      	str	r3, [r2, #0]
 800b550:	e600      	b.n	800b154 <_strtod_l+0x454>
 800b552:	bf00      	nop
 800b554:	0800ea00 	.word	0x0800ea00
 800b558:	fffffc02 	.word	0xfffffc02
 800b55c:	39500000 	.word	0x39500000
 800b560:	7ff00000 	.word	0x7ff00000
 800b564:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b568:	d165      	bne.n	800b636 <_strtod_l+0x936>
 800b56a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b56c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b570:	b35a      	cbz	r2, 800b5ca <_strtod_l+0x8ca>
 800b572:	4a9f      	ldr	r2, [pc, #636]	@ (800b7f0 <_strtod_l+0xaf0>)
 800b574:	4293      	cmp	r3, r2
 800b576:	d12b      	bne.n	800b5d0 <_strtod_l+0x8d0>
 800b578:	9b08      	ldr	r3, [sp, #32]
 800b57a:	4651      	mov	r1, sl
 800b57c:	b303      	cbz	r3, 800b5c0 <_strtod_l+0x8c0>
 800b57e:	4b9d      	ldr	r3, [pc, #628]	@ (800b7f4 <_strtod_l+0xaf4>)
 800b580:	465a      	mov	r2, fp
 800b582:	4013      	ands	r3, r2
 800b584:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b588:	f04f 32ff 	mov.w	r2, #4294967295
 800b58c:	d81b      	bhi.n	800b5c6 <_strtod_l+0x8c6>
 800b58e:	0d1b      	lsrs	r3, r3, #20
 800b590:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b594:	fa02 f303 	lsl.w	r3, r2, r3
 800b598:	4299      	cmp	r1, r3
 800b59a:	d119      	bne.n	800b5d0 <_strtod_l+0x8d0>
 800b59c:	4b96      	ldr	r3, [pc, #600]	@ (800b7f8 <_strtod_l+0xaf8>)
 800b59e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b5a0:	429a      	cmp	r2, r3
 800b5a2:	d102      	bne.n	800b5aa <_strtod_l+0x8aa>
 800b5a4:	3101      	adds	r1, #1
 800b5a6:	f43f adca 	beq.w	800b13e <_strtod_l+0x43e>
 800b5aa:	4b92      	ldr	r3, [pc, #584]	@ (800b7f4 <_strtod_l+0xaf4>)
 800b5ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b5ae:	401a      	ands	r2, r3
 800b5b0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b5b4:	f04f 0a00 	mov.w	sl, #0
 800b5b8:	9b08      	ldr	r3, [sp, #32]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d1b8      	bne.n	800b530 <_strtod_l+0x830>
 800b5be:	e5c9      	b.n	800b154 <_strtod_l+0x454>
 800b5c0:	f04f 33ff 	mov.w	r3, #4294967295
 800b5c4:	e7e8      	b.n	800b598 <_strtod_l+0x898>
 800b5c6:	4613      	mov	r3, r2
 800b5c8:	e7e6      	b.n	800b598 <_strtod_l+0x898>
 800b5ca:	ea53 030a 	orrs.w	r3, r3, sl
 800b5ce:	d0a1      	beq.n	800b514 <_strtod_l+0x814>
 800b5d0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b5d2:	b1db      	cbz	r3, 800b60c <_strtod_l+0x90c>
 800b5d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b5d6:	4213      	tst	r3, r2
 800b5d8:	d0ee      	beq.n	800b5b8 <_strtod_l+0x8b8>
 800b5da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5dc:	9a08      	ldr	r2, [sp, #32]
 800b5de:	4650      	mov	r0, sl
 800b5e0:	4659      	mov	r1, fp
 800b5e2:	b1bb      	cbz	r3, 800b614 <_strtod_l+0x914>
 800b5e4:	f7ff fb6e 	bl	800acc4 <sulp>
 800b5e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b5ec:	ec53 2b10 	vmov	r2, r3, d0
 800b5f0:	f7f4 fe64 	bl	80002bc <__adddf3>
 800b5f4:	4682      	mov	sl, r0
 800b5f6:	468b      	mov	fp, r1
 800b5f8:	e7de      	b.n	800b5b8 <_strtod_l+0x8b8>
 800b5fa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b5fe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b602:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b606:	f04f 3aff 	mov.w	sl, #4294967295
 800b60a:	e7d5      	b.n	800b5b8 <_strtod_l+0x8b8>
 800b60c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b60e:	ea13 0f0a 	tst.w	r3, sl
 800b612:	e7e1      	b.n	800b5d8 <_strtod_l+0x8d8>
 800b614:	f7ff fb56 	bl	800acc4 <sulp>
 800b618:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b61c:	ec53 2b10 	vmov	r2, r3, d0
 800b620:	f7f4 fe4a 	bl	80002b8 <__aeabi_dsub>
 800b624:	2200      	movs	r2, #0
 800b626:	2300      	movs	r3, #0
 800b628:	4682      	mov	sl, r0
 800b62a:	468b      	mov	fp, r1
 800b62c:	f7f5 fa64 	bl	8000af8 <__aeabi_dcmpeq>
 800b630:	2800      	cmp	r0, #0
 800b632:	d0c1      	beq.n	800b5b8 <_strtod_l+0x8b8>
 800b634:	e619      	b.n	800b26a <_strtod_l+0x56a>
 800b636:	4641      	mov	r1, r8
 800b638:	4620      	mov	r0, r4
 800b63a:	f001 fadf 	bl	800cbfc <__ratio>
 800b63e:	ec57 6b10 	vmov	r6, r7, d0
 800b642:	2200      	movs	r2, #0
 800b644:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b648:	4630      	mov	r0, r6
 800b64a:	4639      	mov	r1, r7
 800b64c:	f7f5 fa68 	bl	8000b20 <__aeabi_dcmple>
 800b650:	2800      	cmp	r0, #0
 800b652:	d06f      	beq.n	800b734 <_strtod_l+0xa34>
 800b654:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b656:	2b00      	cmp	r3, #0
 800b658:	d17a      	bne.n	800b750 <_strtod_l+0xa50>
 800b65a:	f1ba 0f00 	cmp.w	sl, #0
 800b65e:	d158      	bne.n	800b712 <_strtod_l+0xa12>
 800b660:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b662:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b666:	2b00      	cmp	r3, #0
 800b668:	d15a      	bne.n	800b720 <_strtod_l+0xa20>
 800b66a:	4b64      	ldr	r3, [pc, #400]	@ (800b7fc <_strtod_l+0xafc>)
 800b66c:	2200      	movs	r2, #0
 800b66e:	4630      	mov	r0, r6
 800b670:	4639      	mov	r1, r7
 800b672:	f7f5 fa4b 	bl	8000b0c <__aeabi_dcmplt>
 800b676:	2800      	cmp	r0, #0
 800b678:	d159      	bne.n	800b72e <_strtod_l+0xa2e>
 800b67a:	4630      	mov	r0, r6
 800b67c:	4639      	mov	r1, r7
 800b67e:	4b60      	ldr	r3, [pc, #384]	@ (800b800 <_strtod_l+0xb00>)
 800b680:	2200      	movs	r2, #0
 800b682:	f7f4 ffd1 	bl	8000628 <__aeabi_dmul>
 800b686:	4606      	mov	r6, r0
 800b688:	460f      	mov	r7, r1
 800b68a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b68e:	9606      	str	r6, [sp, #24]
 800b690:	9307      	str	r3, [sp, #28]
 800b692:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b696:	4d57      	ldr	r5, [pc, #348]	@ (800b7f4 <_strtod_l+0xaf4>)
 800b698:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b69c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b69e:	401d      	ands	r5, r3
 800b6a0:	4b58      	ldr	r3, [pc, #352]	@ (800b804 <_strtod_l+0xb04>)
 800b6a2:	429d      	cmp	r5, r3
 800b6a4:	f040 80b2 	bne.w	800b80c <_strtod_l+0xb0c>
 800b6a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b6aa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b6ae:	ec4b ab10 	vmov	d0, sl, fp
 800b6b2:	f001 f9db 	bl	800ca6c <__ulp>
 800b6b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b6ba:	ec51 0b10 	vmov	r0, r1, d0
 800b6be:	f7f4 ffb3 	bl	8000628 <__aeabi_dmul>
 800b6c2:	4652      	mov	r2, sl
 800b6c4:	465b      	mov	r3, fp
 800b6c6:	f7f4 fdf9 	bl	80002bc <__adddf3>
 800b6ca:	460b      	mov	r3, r1
 800b6cc:	4949      	ldr	r1, [pc, #292]	@ (800b7f4 <_strtod_l+0xaf4>)
 800b6ce:	4a4e      	ldr	r2, [pc, #312]	@ (800b808 <_strtod_l+0xb08>)
 800b6d0:	4019      	ands	r1, r3
 800b6d2:	4291      	cmp	r1, r2
 800b6d4:	4682      	mov	sl, r0
 800b6d6:	d942      	bls.n	800b75e <_strtod_l+0xa5e>
 800b6d8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b6da:	4b47      	ldr	r3, [pc, #284]	@ (800b7f8 <_strtod_l+0xaf8>)
 800b6dc:	429a      	cmp	r2, r3
 800b6de:	d103      	bne.n	800b6e8 <_strtod_l+0x9e8>
 800b6e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b6e2:	3301      	adds	r3, #1
 800b6e4:	f43f ad2b 	beq.w	800b13e <_strtod_l+0x43e>
 800b6e8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b7f8 <_strtod_l+0xaf8>
 800b6ec:	f04f 3aff 	mov.w	sl, #4294967295
 800b6f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b6f2:	9805      	ldr	r0, [sp, #20]
 800b6f4:	f000 fe86 	bl	800c404 <_Bfree>
 800b6f8:	9805      	ldr	r0, [sp, #20]
 800b6fa:	4649      	mov	r1, r9
 800b6fc:	f000 fe82 	bl	800c404 <_Bfree>
 800b700:	9805      	ldr	r0, [sp, #20]
 800b702:	4641      	mov	r1, r8
 800b704:	f000 fe7e 	bl	800c404 <_Bfree>
 800b708:	9805      	ldr	r0, [sp, #20]
 800b70a:	4621      	mov	r1, r4
 800b70c:	f000 fe7a 	bl	800c404 <_Bfree>
 800b710:	e618      	b.n	800b344 <_strtod_l+0x644>
 800b712:	f1ba 0f01 	cmp.w	sl, #1
 800b716:	d103      	bne.n	800b720 <_strtod_l+0xa20>
 800b718:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	f43f ada5 	beq.w	800b26a <_strtod_l+0x56a>
 800b720:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b7d0 <_strtod_l+0xad0>
 800b724:	4f35      	ldr	r7, [pc, #212]	@ (800b7fc <_strtod_l+0xafc>)
 800b726:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b72a:	2600      	movs	r6, #0
 800b72c:	e7b1      	b.n	800b692 <_strtod_l+0x992>
 800b72e:	4f34      	ldr	r7, [pc, #208]	@ (800b800 <_strtod_l+0xb00>)
 800b730:	2600      	movs	r6, #0
 800b732:	e7aa      	b.n	800b68a <_strtod_l+0x98a>
 800b734:	4b32      	ldr	r3, [pc, #200]	@ (800b800 <_strtod_l+0xb00>)
 800b736:	4630      	mov	r0, r6
 800b738:	4639      	mov	r1, r7
 800b73a:	2200      	movs	r2, #0
 800b73c:	f7f4 ff74 	bl	8000628 <__aeabi_dmul>
 800b740:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b742:	4606      	mov	r6, r0
 800b744:	460f      	mov	r7, r1
 800b746:	2b00      	cmp	r3, #0
 800b748:	d09f      	beq.n	800b68a <_strtod_l+0x98a>
 800b74a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b74e:	e7a0      	b.n	800b692 <_strtod_l+0x992>
 800b750:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b7d8 <_strtod_l+0xad8>
 800b754:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b758:	ec57 6b17 	vmov	r6, r7, d7
 800b75c:	e799      	b.n	800b692 <_strtod_l+0x992>
 800b75e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b762:	9b08      	ldr	r3, [sp, #32]
 800b764:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d1c1      	bne.n	800b6f0 <_strtod_l+0x9f0>
 800b76c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b770:	0d1b      	lsrs	r3, r3, #20
 800b772:	051b      	lsls	r3, r3, #20
 800b774:	429d      	cmp	r5, r3
 800b776:	d1bb      	bne.n	800b6f0 <_strtod_l+0x9f0>
 800b778:	4630      	mov	r0, r6
 800b77a:	4639      	mov	r1, r7
 800b77c:	f7f5 fb04 	bl	8000d88 <__aeabi_d2lz>
 800b780:	f7f4 ff24 	bl	80005cc <__aeabi_l2d>
 800b784:	4602      	mov	r2, r0
 800b786:	460b      	mov	r3, r1
 800b788:	4630      	mov	r0, r6
 800b78a:	4639      	mov	r1, r7
 800b78c:	f7f4 fd94 	bl	80002b8 <__aeabi_dsub>
 800b790:	460b      	mov	r3, r1
 800b792:	4602      	mov	r2, r0
 800b794:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b798:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b79c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b79e:	ea46 060a 	orr.w	r6, r6, sl
 800b7a2:	431e      	orrs	r6, r3
 800b7a4:	d06f      	beq.n	800b886 <_strtod_l+0xb86>
 800b7a6:	a30e      	add	r3, pc, #56	@ (adr r3, 800b7e0 <_strtod_l+0xae0>)
 800b7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ac:	f7f5 f9ae 	bl	8000b0c <__aeabi_dcmplt>
 800b7b0:	2800      	cmp	r0, #0
 800b7b2:	f47f accf 	bne.w	800b154 <_strtod_l+0x454>
 800b7b6:	a30c      	add	r3, pc, #48	@ (adr r3, 800b7e8 <_strtod_l+0xae8>)
 800b7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b7c0:	f7f5 f9c2 	bl	8000b48 <__aeabi_dcmpgt>
 800b7c4:	2800      	cmp	r0, #0
 800b7c6:	d093      	beq.n	800b6f0 <_strtod_l+0x9f0>
 800b7c8:	e4c4      	b.n	800b154 <_strtod_l+0x454>
 800b7ca:	bf00      	nop
 800b7cc:	f3af 8000 	nop.w
 800b7d0:	00000000 	.word	0x00000000
 800b7d4:	bff00000 	.word	0xbff00000
 800b7d8:	00000000 	.word	0x00000000
 800b7dc:	3ff00000 	.word	0x3ff00000
 800b7e0:	94a03595 	.word	0x94a03595
 800b7e4:	3fdfffff 	.word	0x3fdfffff
 800b7e8:	35afe535 	.word	0x35afe535
 800b7ec:	3fe00000 	.word	0x3fe00000
 800b7f0:	000fffff 	.word	0x000fffff
 800b7f4:	7ff00000 	.word	0x7ff00000
 800b7f8:	7fefffff 	.word	0x7fefffff
 800b7fc:	3ff00000 	.word	0x3ff00000
 800b800:	3fe00000 	.word	0x3fe00000
 800b804:	7fe00000 	.word	0x7fe00000
 800b808:	7c9fffff 	.word	0x7c9fffff
 800b80c:	9b08      	ldr	r3, [sp, #32]
 800b80e:	b323      	cbz	r3, 800b85a <_strtod_l+0xb5a>
 800b810:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b814:	d821      	bhi.n	800b85a <_strtod_l+0xb5a>
 800b816:	a328      	add	r3, pc, #160	@ (adr r3, 800b8b8 <_strtod_l+0xbb8>)
 800b818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b81c:	4630      	mov	r0, r6
 800b81e:	4639      	mov	r1, r7
 800b820:	f7f5 f97e 	bl	8000b20 <__aeabi_dcmple>
 800b824:	b1a0      	cbz	r0, 800b850 <_strtod_l+0xb50>
 800b826:	4639      	mov	r1, r7
 800b828:	4630      	mov	r0, r6
 800b82a:	f7f5 f9d5 	bl	8000bd8 <__aeabi_d2uiz>
 800b82e:	2801      	cmp	r0, #1
 800b830:	bf38      	it	cc
 800b832:	2001      	movcc	r0, #1
 800b834:	f7f4 fe7e 	bl	8000534 <__aeabi_ui2d>
 800b838:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b83a:	4606      	mov	r6, r0
 800b83c:	460f      	mov	r7, r1
 800b83e:	b9fb      	cbnz	r3, 800b880 <_strtod_l+0xb80>
 800b840:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b844:	9014      	str	r0, [sp, #80]	@ 0x50
 800b846:	9315      	str	r3, [sp, #84]	@ 0x54
 800b848:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b84c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b850:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b852:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b856:	1b5b      	subs	r3, r3, r5
 800b858:	9311      	str	r3, [sp, #68]	@ 0x44
 800b85a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b85e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b862:	f001 f903 	bl	800ca6c <__ulp>
 800b866:	4650      	mov	r0, sl
 800b868:	ec53 2b10 	vmov	r2, r3, d0
 800b86c:	4659      	mov	r1, fp
 800b86e:	f7f4 fedb 	bl	8000628 <__aeabi_dmul>
 800b872:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b876:	f7f4 fd21 	bl	80002bc <__adddf3>
 800b87a:	4682      	mov	sl, r0
 800b87c:	468b      	mov	fp, r1
 800b87e:	e770      	b.n	800b762 <_strtod_l+0xa62>
 800b880:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b884:	e7e0      	b.n	800b848 <_strtod_l+0xb48>
 800b886:	a30e      	add	r3, pc, #56	@ (adr r3, 800b8c0 <_strtod_l+0xbc0>)
 800b888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b88c:	f7f5 f93e 	bl	8000b0c <__aeabi_dcmplt>
 800b890:	e798      	b.n	800b7c4 <_strtod_l+0xac4>
 800b892:	2300      	movs	r3, #0
 800b894:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b896:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b898:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b89a:	6013      	str	r3, [r2, #0]
 800b89c:	f7ff ba6d 	b.w	800ad7a <_strtod_l+0x7a>
 800b8a0:	2a65      	cmp	r2, #101	@ 0x65
 800b8a2:	f43f ab66 	beq.w	800af72 <_strtod_l+0x272>
 800b8a6:	2a45      	cmp	r2, #69	@ 0x45
 800b8a8:	f43f ab63 	beq.w	800af72 <_strtod_l+0x272>
 800b8ac:	2301      	movs	r3, #1
 800b8ae:	f7ff bb9e 	b.w	800afee <_strtod_l+0x2ee>
 800b8b2:	bf00      	nop
 800b8b4:	f3af 8000 	nop.w
 800b8b8:	ffc00000 	.word	0xffc00000
 800b8bc:	41dfffff 	.word	0x41dfffff
 800b8c0:	94a03595 	.word	0x94a03595
 800b8c4:	3fcfffff 	.word	0x3fcfffff

0800b8c8 <strtod>:
 800b8c8:	460a      	mov	r2, r1
 800b8ca:	4601      	mov	r1, r0
 800b8cc:	4802      	ldr	r0, [pc, #8]	@ (800b8d8 <strtod+0x10>)
 800b8ce:	4b03      	ldr	r3, [pc, #12]	@ (800b8dc <strtod+0x14>)
 800b8d0:	6800      	ldr	r0, [r0, #0]
 800b8d2:	f7ff ba15 	b.w	800ad00 <_strtod_l>
 800b8d6:	bf00      	nop
 800b8d8:	200001dc 	.word	0x200001dc
 800b8dc:	20000070 	.word	0x20000070

0800b8e0 <std>:
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	b510      	push	{r4, lr}
 800b8e4:	4604      	mov	r4, r0
 800b8e6:	e9c0 3300 	strd	r3, r3, [r0]
 800b8ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b8ee:	6083      	str	r3, [r0, #8]
 800b8f0:	8181      	strh	r1, [r0, #12]
 800b8f2:	6643      	str	r3, [r0, #100]	@ 0x64
 800b8f4:	81c2      	strh	r2, [r0, #14]
 800b8f6:	6183      	str	r3, [r0, #24]
 800b8f8:	4619      	mov	r1, r3
 800b8fa:	2208      	movs	r2, #8
 800b8fc:	305c      	adds	r0, #92	@ 0x5c
 800b8fe:	f000 f8f4 	bl	800baea <memset>
 800b902:	4b0d      	ldr	r3, [pc, #52]	@ (800b938 <std+0x58>)
 800b904:	6263      	str	r3, [r4, #36]	@ 0x24
 800b906:	4b0d      	ldr	r3, [pc, #52]	@ (800b93c <std+0x5c>)
 800b908:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b90a:	4b0d      	ldr	r3, [pc, #52]	@ (800b940 <std+0x60>)
 800b90c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b90e:	4b0d      	ldr	r3, [pc, #52]	@ (800b944 <std+0x64>)
 800b910:	6323      	str	r3, [r4, #48]	@ 0x30
 800b912:	4b0d      	ldr	r3, [pc, #52]	@ (800b948 <std+0x68>)
 800b914:	6224      	str	r4, [r4, #32]
 800b916:	429c      	cmp	r4, r3
 800b918:	d006      	beq.n	800b928 <std+0x48>
 800b91a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b91e:	4294      	cmp	r4, r2
 800b920:	d002      	beq.n	800b928 <std+0x48>
 800b922:	33d0      	adds	r3, #208	@ 0xd0
 800b924:	429c      	cmp	r4, r3
 800b926:	d105      	bne.n	800b934 <std+0x54>
 800b928:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b92c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b930:	f000 b976 	b.w	800bc20 <__retarget_lock_init_recursive>
 800b934:	bd10      	pop	{r4, pc}
 800b936:	bf00      	nop
 800b938:	0800ba65 	.word	0x0800ba65
 800b93c:	0800ba87 	.word	0x0800ba87
 800b940:	0800babf 	.word	0x0800babf
 800b944:	0800bae3 	.word	0x0800bae3
 800b948:	20000c74 	.word	0x20000c74

0800b94c <stdio_exit_handler>:
 800b94c:	4a02      	ldr	r2, [pc, #8]	@ (800b958 <stdio_exit_handler+0xc>)
 800b94e:	4903      	ldr	r1, [pc, #12]	@ (800b95c <stdio_exit_handler+0x10>)
 800b950:	4803      	ldr	r0, [pc, #12]	@ (800b960 <stdio_exit_handler+0x14>)
 800b952:	f000 b869 	b.w	800ba28 <_fwalk_sglue>
 800b956:	bf00      	nop
 800b958:	20000064 	.word	0x20000064
 800b95c:	0800ce0d 	.word	0x0800ce0d
 800b960:	200001e0 	.word	0x200001e0

0800b964 <cleanup_stdio>:
 800b964:	6841      	ldr	r1, [r0, #4]
 800b966:	4b0c      	ldr	r3, [pc, #48]	@ (800b998 <cleanup_stdio+0x34>)
 800b968:	4299      	cmp	r1, r3
 800b96a:	b510      	push	{r4, lr}
 800b96c:	4604      	mov	r4, r0
 800b96e:	d001      	beq.n	800b974 <cleanup_stdio+0x10>
 800b970:	f001 fa4c 	bl	800ce0c <_fflush_r>
 800b974:	68a1      	ldr	r1, [r4, #8]
 800b976:	4b09      	ldr	r3, [pc, #36]	@ (800b99c <cleanup_stdio+0x38>)
 800b978:	4299      	cmp	r1, r3
 800b97a:	d002      	beq.n	800b982 <cleanup_stdio+0x1e>
 800b97c:	4620      	mov	r0, r4
 800b97e:	f001 fa45 	bl	800ce0c <_fflush_r>
 800b982:	68e1      	ldr	r1, [r4, #12]
 800b984:	4b06      	ldr	r3, [pc, #24]	@ (800b9a0 <cleanup_stdio+0x3c>)
 800b986:	4299      	cmp	r1, r3
 800b988:	d004      	beq.n	800b994 <cleanup_stdio+0x30>
 800b98a:	4620      	mov	r0, r4
 800b98c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b990:	f001 ba3c 	b.w	800ce0c <_fflush_r>
 800b994:	bd10      	pop	{r4, pc}
 800b996:	bf00      	nop
 800b998:	20000c74 	.word	0x20000c74
 800b99c:	20000cdc 	.word	0x20000cdc
 800b9a0:	20000d44 	.word	0x20000d44

0800b9a4 <global_stdio_init.part.0>:
 800b9a4:	b510      	push	{r4, lr}
 800b9a6:	4b0b      	ldr	r3, [pc, #44]	@ (800b9d4 <global_stdio_init.part.0+0x30>)
 800b9a8:	4c0b      	ldr	r4, [pc, #44]	@ (800b9d8 <global_stdio_init.part.0+0x34>)
 800b9aa:	4a0c      	ldr	r2, [pc, #48]	@ (800b9dc <global_stdio_init.part.0+0x38>)
 800b9ac:	601a      	str	r2, [r3, #0]
 800b9ae:	4620      	mov	r0, r4
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	2104      	movs	r1, #4
 800b9b4:	f7ff ff94 	bl	800b8e0 <std>
 800b9b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b9bc:	2201      	movs	r2, #1
 800b9be:	2109      	movs	r1, #9
 800b9c0:	f7ff ff8e 	bl	800b8e0 <std>
 800b9c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b9c8:	2202      	movs	r2, #2
 800b9ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9ce:	2112      	movs	r1, #18
 800b9d0:	f7ff bf86 	b.w	800b8e0 <std>
 800b9d4:	20000dac 	.word	0x20000dac
 800b9d8:	20000c74 	.word	0x20000c74
 800b9dc:	0800b94d 	.word	0x0800b94d

0800b9e0 <__sfp_lock_acquire>:
 800b9e0:	4801      	ldr	r0, [pc, #4]	@ (800b9e8 <__sfp_lock_acquire+0x8>)
 800b9e2:	f000 b91e 	b.w	800bc22 <__retarget_lock_acquire_recursive>
 800b9e6:	bf00      	nop
 800b9e8:	20000db5 	.word	0x20000db5

0800b9ec <__sfp_lock_release>:
 800b9ec:	4801      	ldr	r0, [pc, #4]	@ (800b9f4 <__sfp_lock_release+0x8>)
 800b9ee:	f000 b919 	b.w	800bc24 <__retarget_lock_release_recursive>
 800b9f2:	bf00      	nop
 800b9f4:	20000db5 	.word	0x20000db5

0800b9f8 <__sinit>:
 800b9f8:	b510      	push	{r4, lr}
 800b9fa:	4604      	mov	r4, r0
 800b9fc:	f7ff fff0 	bl	800b9e0 <__sfp_lock_acquire>
 800ba00:	6a23      	ldr	r3, [r4, #32]
 800ba02:	b11b      	cbz	r3, 800ba0c <__sinit+0x14>
 800ba04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba08:	f7ff bff0 	b.w	800b9ec <__sfp_lock_release>
 800ba0c:	4b04      	ldr	r3, [pc, #16]	@ (800ba20 <__sinit+0x28>)
 800ba0e:	6223      	str	r3, [r4, #32]
 800ba10:	4b04      	ldr	r3, [pc, #16]	@ (800ba24 <__sinit+0x2c>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d1f5      	bne.n	800ba04 <__sinit+0xc>
 800ba18:	f7ff ffc4 	bl	800b9a4 <global_stdio_init.part.0>
 800ba1c:	e7f2      	b.n	800ba04 <__sinit+0xc>
 800ba1e:	bf00      	nop
 800ba20:	0800b965 	.word	0x0800b965
 800ba24:	20000dac 	.word	0x20000dac

0800ba28 <_fwalk_sglue>:
 800ba28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba2c:	4607      	mov	r7, r0
 800ba2e:	4688      	mov	r8, r1
 800ba30:	4614      	mov	r4, r2
 800ba32:	2600      	movs	r6, #0
 800ba34:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ba38:	f1b9 0901 	subs.w	r9, r9, #1
 800ba3c:	d505      	bpl.n	800ba4a <_fwalk_sglue+0x22>
 800ba3e:	6824      	ldr	r4, [r4, #0]
 800ba40:	2c00      	cmp	r4, #0
 800ba42:	d1f7      	bne.n	800ba34 <_fwalk_sglue+0xc>
 800ba44:	4630      	mov	r0, r6
 800ba46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba4a:	89ab      	ldrh	r3, [r5, #12]
 800ba4c:	2b01      	cmp	r3, #1
 800ba4e:	d907      	bls.n	800ba60 <_fwalk_sglue+0x38>
 800ba50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ba54:	3301      	adds	r3, #1
 800ba56:	d003      	beq.n	800ba60 <_fwalk_sglue+0x38>
 800ba58:	4629      	mov	r1, r5
 800ba5a:	4638      	mov	r0, r7
 800ba5c:	47c0      	blx	r8
 800ba5e:	4306      	orrs	r6, r0
 800ba60:	3568      	adds	r5, #104	@ 0x68
 800ba62:	e7e9      	b.n	800ba38 <_fwalk_sglue+0x10>

0800ba64 <__sread>:
 800ba64:	b510      	push	{r4, lr}
 800ba66:	460c      	mov	r4, r1
 800ba68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba6c:	f000 f87a 	bl	800bb64 <_read_r>
 800ba70:	2800      	cmp	r0, #0
 800ba72:	bfab      	itete	ge
 800ba74:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ba76:	89a3      	ldrhlt	r3, [r4, #12]
 800ba78:	181b      	addge	r3, r3, r0
 800ba7a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ba7e:	bfac      	ite	ge
 800ba80:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ba82:	81a3      	strhlt	r3, [r4, #12]
 800ba84:	bd10      	pop	{r4, pc}

0800ba86 <__swrite>:
 800ba86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba8a:	461f      	mov	r7, r3
 800ba8c:	898b      	ldrh	r3, [r1, #12]
 800ba8e:	05db      	lsls	r3, r3, #23
 800ba90:	4605      	mov	r5, r0
 800ba92:	460c      	mov	r4, r1
 800ba94:	4616      	mov	r6, r2
 800ba96:	d505      	bpl.n	800baa4 <__swrite+0x1e>
 800ba98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba9c:	2302      	movs	r3, #2
 800ba9e:	2200      	movs	r2, #0
 800baa0:	f000 f84e 	bl	800bb40 <_lseek_r>
 800baa4:	89a3      	ldrh	r3, [r4, #12]
 800baa6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800baaa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800baae:	81a3      	strh	r3, [r4, #12]
 800bab0:	4632      	mov	r2, r6
 800bab2:	463b      	mov	r3, r7
 800bab4:	4628      	mov	r0, r5
 800bab6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800baba:	f000 b875 	b.w	800bba8 <_write_r>

0800babe <__sseek>:
 800babe:	b510      	push	{r4, lr}
 800bac0:	460c      	mov	r4, r1
 800bac2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bac6:	f000 f83b 	bl	800bb40 <_lseek_r>
 800baca:	1c43      	adds	r3, r0, #1
 800bacc:	89a3      	ldrh	r3, [r4, #12]
 800bace:	bf15      	itete	ne
 800bad0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bad2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bad6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bada:	81a3      	strheq	r3, [r4, #12]
 800badc:	bf18      	it	ne
 800bade:	81a3      	strhne	r3, [r4, #12]
 800bae0:	bd10      	pop	{r4, pc}

0800bae2 <__sclose>:
 800bae2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bae6:	f000 b81b 	b.w	800bb20 <_close_r>

0800baea <memset>:
 800baea:	4402      	add	r2, r0
 800baec:	4603      	mov	r3, r0
 800baee:	4293      	cmp	r3, r2
 800baf0:	d100      	bne.n	800baf4 <memset+0xa>
 800baf2:	4770      	bx	lr
 800baf4:	f803 1b01 	strb.w	r1, [r3], #1
 800baf8:	e7f9      	b.n	800baee <memset+0x4>

0800bafa <strncmp>:
 800bafa:	b510      	push	{r4, lr}
 800bafc:	b16a      	cbz	r2, 800bb1a <strncmp+0x20>
 800bafe:	3901      	subs	r1, #1
 800bb00:	1884      	adds	r4, r0, r2
 800bb02:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb06:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bb0a:	429a      	cmp	r2, r3
 800bb0c:	d103      	bne.n	800bb16 <strncmp+0x1c>
 800bb0e:	42a0      	cmp	r0, r4
 800bb10:	d001      	beq.n	800bb16 <strncmp+0x1c>
 800bb12:	2a00      	cmp	r2, #0
 800bb14:	d1f5      	bne.n	800bb02 <strncmp+0x8>
 800bb16:	1ad0      	subs	r0, r2, r3
 800bb18:	bd10      	pop	{r4, pc}
 800bb1a:	4610      	mov	r0, r2
 800bb1c:	e7fc      	b.n	800bb18 <strncmp+0x1e>
	...

0800bb20 <_close_r>:
 800bb20:	b538      	push	{r3, r4, r5, lr}
 800bb22:	4d06      	ldr	r5, [pc, #24]	@ (800bb3c <_close_r+0x1c>)
 800bb24:	2300      	movs	r3, #0
 800bb26:	4604      	mov	r4, r0
 800bb28:	4608      	mov	r0, r1
 800bb2a:	602b      	str	r3, [r5, #0]
 800bb2c:	f7f9 fee2 	bl	80058f4 <_close>
 800bb30:	1c43      	adds	r3, r0, #1
 800bb32:	d102      	bne.n	800bb3a <_close_r+0x1a>
 800bb34:	682b      	ldr	r3, [r5, #0]
 800bb36:	b103      	cbz	r3, 800bb3a <_close_r+0x1a>
 800bb38:	6023      	str	r3, [r4, #0]
 800bb3a:	bd38      	pop	{r3, r4, r5, pc}
 800bb3c:	20000db0 	.word	0x20000db0

0800bb40 <_lseek_r>:
 800bb40:	b538      	push	{r3, r4, r5, lr}
 800bb42:	4d07      	ldr	r5, [pc, #28]	@ (800bb60 <_lseek_r+0x20>)
 800bb44:	4604      	mov	r4, r0
 800bb46:	4608      	mov	r0, r1
 800bb48:	4611      	mov	r1, r2
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	602a      	str	r2, [r5, #0]
 800bb4e:	461a      	mov	r2, r3
 800bb50:	f7f9 fef7 	bl	8005942 <_lseek>
 800bb54:	1c43      	adds	r3, r0, #1
 800bb56:	d102      	bne.n	800bb5e <_lseek_r+0x1e>
 800bb58:	682b      	ldr	r3, [r5, #0]
 800bb5a:	b103      	cbz	r3, 800bb5e <_lseek_r+0x1e>
 800bb5c:	6023      	str	r3, [r4, #0]
 800bb5e:	bd38      	pop	{r3, r4, r5, pc}
 800bb60:	20000db0 	.word	0x20000db0

0800bb64 <_read_r>:
 800bb64:	b538      	push	{r3, r4, r5, lr}
 800bb66:	4d07      	ldr	r5, [pc, #28]	@ (800bb84 <_read_r+0x20>)
 800bb68:	4604      	mov	r4, r0
 800bb6a:	4608      	mov	r0, r1
 800bb6c:	4611      	mov	r1, r2
 800bb6e:	2200      	movs	r2, #0
 800bb70:	602a      	str	r2, [r5, #0]
 800bb72:	461a      	mov	r2, r3
 800bb74:	f7f9 fe85 	bl	8005882 <_read>
 800bb78:	1c43      	adds	r3, r0, #1
 800bb7a:	d102      	bne.n	800bb82 <_read_r+0x1e>
 800bb7c:	682b      	ldr	r3, [r5, #0]
 800bb7e:	b103      	cbz	r3, 800bb82 <_read_r+0x1e>
 800bb80:	6023      	str	r3, [r4, #0]
 800bb82:	bd38      	pop	{r3, r4, r5, pc}
 800bb84:	20000db0 	.word	0x20000db0

0800bb88 <_sbrk_r>:
 800bb88:	b538      	push	{r3, r4, r5, lr}
 800bb8a:	4d06      	ldr	r5, [pc, #24]	@ (800bba4 <_sbrk_r+0x1c>)
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	4604      	mov	r4, r0
 800bb90:	4608      	mov	r0, r1
 800bb92:	602b      	str	r3, [r5, #0]
 800bb94:	f7f9 fee2 	bl	800595c <_sbrk>
 800bb98:	1c43      	adds	r3, r0, #1
 800bb9a:	d102      	bne.n	800bba2 <_sbrk_r+0x1a>
 800bb9c:	682b      	ldr	r3, [r5, #0]
 800bb9e:	b103      	cbz	r3, 800bba2 <_sbrk_r+0x1a>
 800bba0:	6023      	str	r3, [r4, #0]
 800bba2:	bd38      	pop	{r3, r4, r5, pc}
 800bba4:	20000db0 	.word	0x20000db0

0800bba8 <_write_r>:
 800bba8:	b538      	push	{r3, r4, r5, lr}
 800bbaa:	4d07      	ldr	r5, [pc, #28]	@ (800bbc8 <_write_r+0x20>)
 800bbac:	4604      	mov	r4, r0
 800bbae:	4608      	mov	r0, r1
 800bbb0:	4611      	mov	r1, r2
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	602a      	str	r2, [r5, #0]
 800bbb6:	461a      	mov	r2, r3
 800bbb8:	f7f9 fe80 	bl	80058bc <_write>
 800bbbc:	1c43      	adds	r3, r0, #1
 800bbbe:	d102      	bne.n	800bbc6 <_write_r+0x1e>
 800bbc0:	682b      	ldr	r3, [r5, #0]
 800bbc2:	b103      	cbz	r3, 800bbc6 <_write_r+0x1e>
 800bbc4:	6023      	str	r3, [r4, #0]
 800bbc6:	bd38      	pop	{r3, r4, r5, pc}
 800bbc8:	20000db0 	.word	0x20000db0

0800bbcc <__errno>:
 800bbcc:	4b01      	ldr	r3, [pc, #4]	@ (800bbd4 <__errno+0x8>)
 800bbce:	6818      	ldr	r0, [r3, #0]
 800bbd0:	4770      	bx	lr
 800bbd2:	bf00      	nop
 800bbd4:	200001dc 	.word	0x200001dc

0800bbd8 <__libc_init_array>:
 800bbd8:	b570      	push	{r4, r5, r6, lr}
 800bbda:	4d0d      	ldr	r5, [pc, #52]	@ (800bc10 <__libc_init_array+0x38>)
 800bbdc:	4c0d      	ldr	r4, [pc, #52]	@ (800bc14 <__libc_init_array+0x3c>)
 800bbde:	1b64      	subs	r4, r4, r5
 800bbe0:	10a4      	asrs	r4, r4, #2
 800bbe2:	2600      	movs	r6, #0
 800bbe4:	42a6      	cmp	r6, r4
 800bbe6:	d109      	bne.n	800bbfc <__libc_init_array+0x24>
 800bbe8:	4d0b      	ldr	r5, [pc, #44]	@ (800bc18 <__libc_init_array+0x40>)
 800bbea:	4c0c      	ldr	r4, [pc, #48]	@ (800bc1c <__libc_init_array+0x44>)
 800bbec:	f002 feac 	bl	800e948 <_init>
 800bbf0:	1b64      	subs	r4, r4, r5
 800bbf2:	10a4      	asrs	r4, r4, #2
 800bbf4:	2600      	movs	r6, #0
 800bbf6:	42a6      	cmp	r6, r4
 800bbf8:	d105      	bne.n	800bc06 <__libc_init_array+0x2e>
 800bbfa:	bd70      	pop	{r4, r5, r6, pc}
 800bbfc:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc00:	4798      	blx	r3
 800bc02:	3601      	adds	r6, #1
 800bc04:	e7ee      	b.n	800bbe4 <__libc_init_array+0xc>
 800bc06:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc0a:	4798      	blx	r3
 800bc0c:	3601      	adds	r6, #1
 800bc0e:	e7f2      	b.n	800bbf6 <__libc_init_array+0x1e>
 800bc10:	0800edf0 	.word	0x0800edf0
 800bc14:	0800edf0 	.word	0x0800edf0
 800bc18:	0800edf0 	.word	0x0800edf0
 800bc1c:	0800edf4 	.word	0x0800edf4

0800bc20 <__retarget_lock_init_recursive>:
 800bc20:	4770      	bx	lr

0800bc22 <__retarget_lock_acquire_recursive>:
 800bc22:	4770      	bx	lr

0800bc24 <__retarget_lock_release_recursive>:
 800bc24:	4770      	bx	lr

0800bc26 <memcpy>:
 800bc26:	440a      	add	r2, r1
 800bc28:	4291      	cmp	r1, r2
 800bc2a:	f100 33ff 	add.w	r3, r0, #4294967295
 800bc2e:	d100      	bne.n	800bc32 <memcpy+0xc>
 800bc30:	4770      	bx	lr
 800bc32:	b510      	push	{r4, lr}
 800bc34:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc38:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bc3c:	4291      	cmp	r1, r2
 800bc3e:	d1f9      	bne.n	800bc34 <memcpy+0xe>
 800bc40:	bd10      	pop	{r4, pc}
 800bc42:	0000      	movs	r0, r0
 800bc44:	0000      	movs	r0, r0
	...

0800bc48 <nan>:
 800bc48:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800bc50 <nan+0x8>
 800bc4c:	4770      	bx	lr
 800bc4e:	bf00      	nop
 800bc50:	00000000 	.word	0x00000000
 800bc54:	7ff80000 	.word	0x7ff80000

0800bc58 <_free_r>:
 800bc58:	b538      	push	{r3, r4, r5, lr}
 800bc5a:	4605      	mov	r5, r0
 800bc5c:	2900      	cmp	r1, #0
 800bc5e:	d041      	beq.n	800bce4 <_free_r+0x8c>
 800bc60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc64:	1f0c      	subs	r4, r1, #4
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	bfb8      	it	lt
 800bc6a:	18e4      	addlt	r4, r4, r3
 800bc6c:	f7ff f81e 	bl	800acac <__malloc_lock>
 800bc70:	4a1d      	ldr	r2, [pc, #116]	@ (800bce8 <_free_r+0x90>)
 800bc72:	6813      	ldr	r3, [r2, #0]
 800bc74:	b933      	cbnz	r3, 800bc84 <_free_r+0x2c>
 800bc76:	6063      	str	r3, [r4, #4]
 800bc78:	6014      	str	r4, [r2, #0]
 800bc7a:	4628      	mov	r0, r5
 800bc7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc80:	f7ff b81a 	b.w	800acb8 <__malloc_unlock>
 800bc84:	42a3      	cmp	r3, r4
 800bc86:	d908      	bls.n	800bc9a <_free_r+0x42>
 800bc88:	6820      	ldr	r0, [r4, #0]
 800bc8a:	1821      	adds	r1, r4, r0
 800bc8c:	428b      	cmp	r3, r1
 800bc8e:	bf01      	itttt	eq
 800bc90:	6819      	ldreq	r1, [r3, #0]
 800bc92:	685b      	ldreq	r3, [r3, #4]
 800bc94:	1809      	addeq	r1, r1, r0
 800bc96:	6021      	streq	r1, [r4, #0]
 800bc98:	e7ed      	b.n	800bc76 <_free_r+0x1e>
 800bc9a:	461a      	mov	r2, r3
 800bc9c:	685b      	ldr	r3, [r3, #4]
 800bc9e:	b10b      	cbz	r3, 800bca4 <_free_r+0x4c>
 800bca0:	42a3      	cmp	r3, r4
 800bca2:	d9fa      	bls.n	800bc9a <_free_r+0x42>
 800bca4:	6811      	ldr	r1, [r2, #0]
 800bca6:	1850      	adds	r0, r2, r1
 800bca8:	42a0      	cmp	r0, r4
 800bcaa:	d10b      	bne.n	800bcc4 <_free_r+0x6c>
 800bcac:	6820      	ldr	r0, [r4, #0]
 800bcae:	4401      	add	r1, r0
 800bcb0:	1850      	adds	r0, r2, r1
 800bcb2:	4283      	cmp	r3, r0
 800bcb4:	6011      	str	r1, [r2, #0]
 800bcb6:	d1e0      	bne.n	800bc7a <_free_r+0x22>
 800bcb8:	6818      	ldr	r0, [r3, #0]
 800bcba:	685b      	ldr	r3, [r3, #4]
 800bcbc:	6053      	str	r3, [r2, #4]
 800bcbe:	4408      	add	r0, r1
 800bcc0:	6010      	str	r0, [r2, #0]
 800bcc2:	e7da      	b.n	800bc7a <_free_r+0x22>
 800bcc4:	d902      	bls.n	800bccc <_free_r+0x74>
 800bcc6:	230c      	movs	r3, #12
 800bcc8:	602b      	str	r3, [r5, #0]
 800bcca:	e7d6      	b.n	800bc7a <_free_r+0x22>
 800bccc:	6820      	ldr	r0, [r4, #0]
 800bcce:	1821      	adds	r1, r4, r0
 800bcd0:	428b      	cmp	r3, r1
 800bcd2:	bf04      	itt	eq
 800bcd4:	6819      	ldreq	r1, [r3, #0]
 800bcd6:	685b      	ldreq	r3, [r3, #4]
 800bcd8:	6063      	str	r3, [r4, #4]
 800bcda:	bf04      	itt	eq
 800bcdc:	1809      	addeq	r1, r1, r0
 800bcde:	6021      	streq	r1, [r4, #0]
 800bce0:	6054      	str	r4, [r2, #4]
 800bce2:	e7ca      	b.n	800bc7a <_free_r+0x22>
 800bce4:	bd38      	pop	{r3, r4, r5, pc}
 800bce6:	bf00      	nop
 800bce8:	20000c70 	.word	0x20000c70

0800bcec <rshift>:
 800bcec:	6903      	ldr	r3, [r0, #16]
 800bcee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bcf2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bcf6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bcfa:	f100 0414 	add.w	r4, r0, #20
 800bcfe:	dd45      	ble.n	800bd8c <rshift+0xa0>
 800bd00:	f011 011f 	ands.w	r1, r1, #31
 800bd04:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bd08:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bd0c:	d10c      	bne.n	800bd28 <rshift+0x3c>
 800bd0e:	f100 0710 	add.w	r7, r0, #16
 800bd12:	4629      	mov	r1, r5
 800bd14:	42b1      	cmp	r1, r6
 800bd16:	d334      	bcc.n	800bd82 <rshift+0x96>
 800bd18:	1a9b      	subs	r3, r3, r2
 800bd1a:	009b      	lsls	r3, r3, #2
 800bd1c:	1eea      	subs	r2, r5, #3
 800bd1e:	4296      	cmp	r6, r2
 800bd20:	bf38      	it	cc
 800bd22:	2300      	movcc	r3, #0
 800bd24:	4423      	add	r3, r4
 800bd26:	e015      	b.n	800bd54 <rshift+0x68>
 800bd28:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bd2c:	f1c1 0820 	rsb	r8, r1, #32
 800bd30:	40cf      	lsrs	r7, r1
 800bd32:	f105 0e04 	add.w	lr, r5, #4
 800bd36:	46a1      	mov	r9, r4
 800bd38:	4576      	cmp	r6, lr
 800bd3a:	46f4      	mov	ip, lr
 800bd3c:	d815      	bhi.n	800bd6a <rshift+0x7e>
 800bd3e:	1a9a      	subs	r2, r3, r2
 800bd40:	0092      	lsls	r2, r2, #2
 800bd42:	3a04      	subs	r2, #4
 800bd44:	3501      	adds	r5, #1
 800bd46:	42ae      	cmp	r6, r5
 800bd48:	bf38      	it	cc
 800bd4a:	2200      	movcc	r2, #0
 800bd4c:	18a3      	adds	r3, r4, r2
 800bd4e:	50a7      	str	r7, [r4, r2]
 800bd50:	b107      	cbz	r7, 800bd54 <rshift+0x68>
 800bd52:	3304      	adds	r3, #4
 800bd54:	1b1a      	subs	r2, r3, r4
 800bd56:	42a3      	cmp	r3, r4
 800bd58:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bd5c:	bf08      	it	eq
 800bd5e:	2300      	moveq	r3, #0
 800bd60:	6102      	str	r2, [r0, #16]
 800bd62:	bf08      	it	eq
 800bd64:	6143      	streq	r3, [r0, #20]
 800bd66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd6a:	f8dc c000 	ldr.w	ip, [ip]
 800bd6e:	fa0c fc08 	lsl.w	ip, ip, r8
 800bd72:	ea4c 0707 	orr.w	r7, ip, r7
 800bd76:	f849 7b04 	str.w	r7, [r9], #4
 800bd7a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bd7e:	40cf      	lsrs	r7, r1
 800bd80:	e7da      	b.n	800bd38 <rshift+0x4c>
 800bd82:	f851 cb04 	ldr.w	ip, [r1], #4
 800bd86:	f847 cf04 	str.w	ip, [r7, #4]!
 800bd8a:	e7c3      	b.n	800bd14 <rshift+0x28>
 800bd8c:	4623      	mov	r3, r4
 800bd8e:	e7e1      	b.n	800bd54 <rshift+0x68>

0800bd90 <__hexdig_fun>:
 800bd90:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800bd94:	2b09      	cmp	r3, #9
 800bd96:	d802      	bhi.n	800bd9e <__hexdig_fun+0xe>
 800bd98:	3820      	subs	r0, #32
 800bd9a:	b2c0      	uxtb	r0, r0
 800bd9c:	4770      	bx	lr
 800bd9e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800bda2:	2b05      	cmp	r3, #5
 800bda4:	d801      	bhi.n	800bdaa <__hexdig_fun+0x1a>
 800bda6:	3847      	subs	r0, #71	@ 0x47
 800bda8:	e7f7      	b.n	800bd9a <__hexdig_fun+0xa>
 800bdaa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800bdae:	2b05      	cmp	r3, #5
 800bdb0:	d801      	bhi.n	800bdb6 <__hexdig_fun+0x26>
 800bdb2:	3827      	subs	r0, #39	@ 0x27
 800bdb4:	e7f1      	b.n	800bd9a <__hexdig_fun+0xa>
 800bdb6:	2000      	movs	r0, #0
 800bdb8:	4770      	bx	lr
	...

0800bdbc <__gethex>:
 800bdbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdc0:	b085      	sub	sp, #20
 800bdc2:	468a      	mov	sl, r1
 800bdc4:	9302      	str	r3, [sp, #8]
 800bdc6:	680b      	ldr	r3, [r1, #0]
 800bdc8:	9001      	str	r0, [sp, #4]
 800bdca:	4690      	mov	r8, r2
 800bdcc:	1c9c      	adds	r4, r3, #2
 800bdce:	46a1      	mov	r9, r4
 800bdd0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800bdd4:	2830      	cmp	r0, #48	@ 0x30
 800bdd6:	d0fa      	beq.n	800bdce <__gethex+0x12>
 800bdd8:	eba9 0303 	sub.w	r3, r9, r3
 800bddc:	f1a3 0b02 	sub.w	fp, r3, #2
 800bde0:	f7ff ffd6 	bl	800bd90 <__hexdig_fun>
 800bde4:	4605      	mov	r5, r0
 800bde6:	2800      	cmp	r0, #0
 800bde8:	d168      	bne.n	800bebc <__gethex+0x100>
 800bdea:	49a0      	ldr	r1, [pc, #640]	@ (800c06c <__gethex+0x2b0>)
 800bdec:	2201      	movs	r2, #1
 800bdee:	4648      	mov	r0, r9
 800bdf0:	f7ff fe83 	bl	800bafa <strncmp>
 800bdf4:	4607      	mov	r7, r0
 800bdf6:	2800      	cmp	r0, #0
 800bdf8:	d167      	bne.n	800beca <__gethex+0x10e>
 800bdfa:	f899 0001 	ldrb.w	r0, [r9, #1]
 800bdfe:	4626      	mov	r6, r4
 800be00:	f7ff ffc6 	bl	800bd90 <__hexdig_fun>
 800be04:	2800      	cmp	r0, #0
 800be06:	d062      	beq.n	800bece <__gethex+0x112>
 800be08:	4623      	mov	r3, r4
 800be0a:	7818      	ldrb	r0, [r3, #0]
 800be0c:	2830      	cmp	r0, #48	@ 0x30
 800be0e:	4699      	mov	r9, r3
 800be10:	f103 0301 	add.w	r3, r3, #1
 800be14:	d0f9      	beq.n	800be0a <__gethex+0x4e>
 800be16:	f7ff ffbb 	bl	800bd90 <__hexdig_fun>
 800be1a:	fab0 f580 	clz	r5, r0
 800be1e:	096d      	lsrs	r5, r5, #5
 800be20:	f04f 0b01 	mov.w	fp, #1
 800be24:	464a      	mov	r2, r9
 800be26:	4616      	mov	r6, r2
 800be28:	3201      	adds	r2, #1
 800be2a:	7830      	ldrb	r0, [r6, #0]
 800be2c:	f7ff ffb0 	bl	800bd90 <__hexdig_fun>
 800be30:	2800      	cmp	r0, #0
 800be32:	d1f8      	bne.n	800be26 <__gethex+0x6a>
 800be34:	498d      	ldr	r1, [pc, #564]	@ (800c06c <__gethex+0x2b0>)
 800be36:	2201      	movs	r2, #1
 800be38:	4630      	mov	r0, r6
 800be3a:	f7ff fe5e 	bl	800bafa <strncmp>
 800be3e:	2800      	cmp	r0, #0
 800be40:	d13f      	bne.n	800bec2 <__gethex+0x106>
 800be42:	b944      	cbnz	r4, 800be56 <__gethex+0x9a>
 800be44:	1c74      	adds	r4, r6, #1
 800be46:	4622      	mov	r2, r4
 800be48:	4616      	mov	r6, r2
 800be4a:	3201      	adds	r2, #1
 800be4c:	7830      	ldrb	r0, [r6, #0]
 800be4e:	f7ff ff9f 	bl	800bd90 <__hexdig_fun>
 800be52:	2800      	cmp	r0, #0
 800be54:	d1f8      	bne.n	800be48 <__gethex+0x8c>
 800be56:	1ba4      	subs	r4, r4, r6
 800be58:	00a7      	lsls	r7, r4, #2
 800be5a:	7833      	ldrb	r3, [r6, #0]
 800be5c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800be60:	2b50      	cmp	r3, #80	@ 0x50
 800be62:	d13e      	bne.n	800bee2 <__gethex+0x126>
 800be64:	7873      	ldrb	r3, [r6, #1]
 800be66:	2b2b      	cmp	r3, #43	@ 0x2b
 800be68:	d033      	beq.n	800bed2 <__gethex+0x116>
 800be6a:	2b2d      	cmp	r3, #45	@ 0x2d
 800be6c:	d034      	beq.n	800bed8 <__gethex+0x11c>
 800be6e:	1c71      	adds	r1, r6, #1
 800be70:	2400      	movs	r4, #0
 800be72:	7808      	ldrb	r0, [r1, #0]
 800be74:	f7ff ff8c 	bl	800bd90 <__hexdig_fun>
 800be78:	1e43      	subs	r3, r0, #1
 800be7a:	b2db      	uxtb	r3, r3
 800be7c:	2b18      	cmp	r3, #24
 800be7e:	d830      	bhi.n	800bee2 <__gethex+0x126>
 800be80:	f1a0 0210 	sub.w	r2, r0, #16
 800be84:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800be88:	f7ff ff82 	bl	800bd90 <__hexdig_fun>
 800be8c:	f100 3cff 	add.w	ip, r0, #4294967295
 800be90:	fa5f fc8c 	uxtb.w	ip, ip
 800be94:	f1bc 0f18 	cmp.w	ip, #24
 800be98:	f04f 030a 	mov.w	r3, #10
 800be9c:	d91e      	bls.n	800bedc <__gethex+0x120>
 800be9e:	b104      	cbz	r4, 800bea2 <__gethex+0xe6>
 800bea0:	4252      	negs	r2, r2
 800bea2:	4417      	add	r7, r2
 800bea4:	f8ca 1000 	str.w	r1, [sl]
 800bea8:	b1ed      	cbz	r5, 800bee6 <__gethex+0x12a>
 800beaa:	f1bb 0f00 	cmp.w	fp, #0
 800beae:	bf0c      	ite	eq
 800beb0:	2506      	moveq	r5, #6
 800beb2:	2500      	movne	r5, #0
 800beb4:	4628      	mov	r0, r5
 800beb6:	b005      	add	sp, #20
 800beb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bebc:	2500      	movs	r5, #0
 800bebe:	462c      	mov	r4, r5
 800bec0:	e7b0      	b.n	800be24 <__gethex+0x68>
 800bec2:	2c00      	cmp	r4, #0
 800bec4:	d1c7      	bne.n	800be56 <__gethex+0x9a>
 800bec6:	4627      	mov	r7, r4
 800bec8:	e7c7      	b.n	800be5a <__gethex+0x9e>
 800beca:	464e      	mov	r6, r9
 800becc:	462f      	mov	r7, r5
 800bece:	2501      	movs	r5, #1
 800bed0:	e7c3      	b.n	800be5a <__gethex+0x9e>
 800bed2:	2400      	movs	r4, #0
 800bed4:	1cb1      	adds	r1, r6, #2
 800bed6:	e7cc      	b.n	800be72 <__gethex+0xb6>
 800bed8:	2401      	movs	r4, #1
 800beda:	e7fb      	b.n	800bed4 <__gethex+0x118>
 800bedc:	fb03 0002 	mla	r0, r3, r2, r0
 800bee0:	e7ce      	b.n	800be80 <__gethex+0xc4>
 800bee2:	4631      	mov	r1, r6
 800bee4:	e7de      	b.n	800bea4 <__gethex+0xe8>
 800bee6:	eba6 0309 	sub.w	r3, r6, r9
 800beea:	3b01      	subs	r3, #1
 800beec:	4629      	mov	r1, r5
 800beee:	2b07      	cmp	r3, #7
 800bef0:	dc0a      	bgt.n	800bf08 <__gethex+0x14c>
 800bef2:	9801      	ldr	r0, [sp, #4]
 800bef4:	f000 fa46 	bl	800c384 <_Balloc>
 800bef8:	4604      	mov	r4, r0
 800befa:	b940      	cbnz	r0, 800bf0e <__gethex+0x152>
 800befc:	4b5c      	ldr	r3, [pc, #368]	@ (800c070 <__gethex+0x2b4>)
 800befe:	4602      	mov	r2, r0
 800bf00:	21e4      	movs	r1, #228	@ 0xe4
 800bf02:	485c      	ldr	r0, [pc, #368]	@ (800c074 <__gethex+0x2b8>)
 800bf04:	f000 ffaa 	bl	800ce5c <__assert_func>
 800bf08:	3101      	adds	r1, #1
 800bf0a:	105b      	asrs	r3, r3, #1
 800bf0c:	e7ef      	b.n	800beee <__gethex+0x132>
 800bf0e:	f100 0a14 	add.w	sl, r0, #20
 800bf12:	2300      	movs	r3, #0
 800bf14:	4655      	mov	r5, sl
 800bf16:	469b      	mov	fp, r3
 800bf18:	45b1      	cmp	r9, r6
 800bf1a:	d337      	bcc.n	800bf8c <__gethex+0x1d0>
 800bf1c:	f845 bb04 	str.w	fp, [r5], #4
 800bf20:	eba5 050a 	sub.w	r5, r5, sl
 800bf24:	10ad      	asrs	r5, r5, #2
 800bf26:	6125      	str	r5, [r4, #16]
 800bf28:	4658      	mov	r0, fp
 800bf2a:	f000 fb1d 	bl	800c568 <__hi0bits>
 800bf2e:	016d      	lsls	r5, r5, #5
 800bf30:	f8d8 6000 	ldr.w	r6, [r8]
 800bf34:	1a2d      	subs	r5, r5, r0
 800bf36:	42b5      	cmp	r5, r6
 800bf38:	dd54      	ble.n	800bfe4 <__gethex+0x228>
 800bf3a:	1bad      	subs	r5, r5, r6
 800bf3c:	4629      	mov	r1, r5
 800bf3e:	4620      	mov	r0, r4
 800bf40:	f000 feb1 	bl	800cca6 <__any_on>
 800bf44:	4681      	mov	r9, r0
 800bf46:	b178      	cbz	r0, 800bf68 <__gethex+0x1ac>
 800bf48:	1e6b      	subs	r3, r5, #1
 800bf4a:	1159      	asrs	r1, r3, #5
 800bf4c:	f003 021f 	and.w	r2, r3, #31
 800bf50:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800bf54:	f04f 0901 	mov.w	r9, #1
 800bf58:	fa09 f202 	lsl.w	r2, r9, r2
 800bf5c:	420a      	tst	r2, r1
 800bf5e:	d003      	beq.n	800bf68 <__gethex+0x1ac>
 800bf60:	454b      	cmp	r3, r9
 800bf62:	dc36      	bgt.n	800bfd2 <__gethex+0x216>
 800bf64:	f04f 0902 	mov.w	r9, #2
 800bf68:	4629      	mov	r1, r5
 800bf6a:	4620      	mov	r0, r4
 800bf6c:	f7ff febe 	bl	800bcec <rshift>
 800bf70:	442f      	add	r7, r5
 800bf72:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bf76:	42bb      	cmp	r3, r7
 800bf78:	da42      	bge.n	800c000 <__gethex+0x244>
 800bf7a:	9801      	ldr	r0, [sp, #4]
 800bf7c:	4621      	mov	r1, r4
 800bf7e:	f000 fa41 	bl	800c404 <_Bfree>
 800bf82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bf84:	2300      	movs	r3, #0
 800bf86:	6013      	str	r3, [r2, #0]
 800bf88:	25a3      	movs	r5, #163	@ 0xa3
 800bf8a:	e793      	b.n	800beb4 <__gethex+0xf8>
 800bf8c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800bf90:	2a2e      	cmp	r2, #46	@ 0x2e
 800bf92:	d012      	beq.n	800bfba <__gethex+0x1fe>
 800bf94:	2b20      	cmp	r3, #32
 800bf96:	d104      	bne.n	800bfa2 <__gethex+0x1e6>
 800bf98:	f845 bb04 	str.w	fp, [r5], #4
 800bf9c:	f04f 0b00 	mov.w	fp, #0
 800bfa0:	465b      	mov	r3, fp
 800bfa2:	7830      	ldrb	r0, [r6, #0]
 800bfa4:	9303      	str	r3, [sp, #12]
 800bfa6:	f7ff fef3 	bl	800bd90 <__hexdig_fun>
 800bfaa:	9b03      	ldr	r3, [sp, #12]
 800bfac:	f000 000f 	and.w	r0, r0, #15
 800bfb0:	4098      	lsls	r0, r3
 800bfb2:	ea4b 0b00 	orr.w	fp, fp, r0
 800bfb6:	3304      	adds	r3, #4
 800bfb8:	e7ae      	b.n	800bf18 <__gethex+0x15c>
 800bfba:	45b1      	cmp	r9, r6
 800bfbc:	d8ea      	bhi.n	800bf94 <__gethex+0x1d8>
 800bfbe:	492b      	ldr	r1, [pc, #172]	@ (800c06c <__gethex+0x2b0>)
 800bfc0:	9303      	str	r3, [sp, #12]
 800bfc2:	2201      	movs	r2, #1
 800bfc4:	4630      	mov	r0, r6
 800bfc6:	f7ff fd98 	bl	800bafa <strncmp>
 800bfca:	9b03      	ldr	r3, [sp, #12]
 800bfcc:	2800      	cmp	r0, #0
 800bfce:	d1e1      	bne.n	800bf94 <__gethex+0x1d8>
 800bfd0:	e7a2      	b.n	800bf18 <__gethex+0x15c>
 800bfd2:	1ea9      	subs	r1, r5, #2
 800bfd4:	4620      	mov	r0, r4
 800bfd6:	f000 fe66 	bl	800cca6 <__any_on>
 800bfda:	2800      	cmp	r0, #0
 800bfdc:	d0c2      	beq.n	800bf64 <__gethex+0x1a8>
 800bfde:	f04f 0903 	mov.w	r9, #3
 800bfe2:	e7c1      	b.n	800bf68 <__gethex+0x1ac>
 800bfe4:	da09      	bge.n	800bffa <__gethex+0x23e>
 800bfe6:	1b75      	subs	r5, r6, r5
 800bfe8:	4621      	mov	r1, r4
 800bfea:	9801      	ldr	r0, [sp, #4]
 800bfec:	462a      	mov	r2, r5
 800bfee:	f000 fc21 	bl	800c834 <__lshift>
 800bff2:	1b7f      	subs	r7, r7, r5
 800bff4:	4604      	mov	r4, r0
 800bff6:	f100 0a14 	add.w	sl, r0, #20
 800bffa:	f04f 0900 	mov.w	r9, #0
 800bffe:	e7b8      	b.n	800bf72 <__gethex+0x1b6>
 800c000:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c004:	42bd      	cmp	r5, r7
 800c006:	dd6f      	ble.n	800c0e8 <__gethex+0x32c>
 800c008:	1bed      	subs	r5, r5, r7
 800c00a:	42ae      	cmp	r6, r5
 800c00c:	dc34      	bgt.n	800c078 <__gethex+0x2bc>
 800c00e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c012:	2b02      	cmp	r3, #2
 800c014:	d022      	beq.n	800c05c <__gethex+0x2a0>
 800c016:	2b03      	cmp	r3, #3
 800c018:	d024      	beq.n	800c064 <__gethex+0x2a8>
 800c01a:	2b01      	cmp	r3, #1
 800c01c:	d115      	bne.n	800c04a <__gethex+0x28e>
 800c01e:	42ae      	cmp	r6, r5
 800c020:	d113      	bne.n	800c04a <__gethex+0x28e>
 800c022:	2e01      	cmp	r6, #1
 800c024:	d10b      	bne.n	800c03e <__gethex+0x282>
 800c026:	9a02      	ldr	r2, [sp, #8]
 800c028:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c02c:	6013      	str	r3, [r2, #0]
 800c02e:	2301      	movs	r3, #1
 800c030:	6123      	str	r3, [r4, #16]
 800c032:	f8ca 3000 	str.w	r3, [sl]
 800c036:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c038:	2562      	movs	r5, #98	@ 0x62
 800c03a:	601c      	str	r4, [r3, #0]
 800c03c:	e73a      	b.n	800beb4 <__gethex+0xf8>
 800c03e:	1e71      	subs	r1, r6, #1
 800c040:	4620      	mov	r0, r4
 800c042:	f000 fe30 	bl	800cca6 <__any_on>
 800c046:	2800      	cmp	r0, #0
 800c048:	d1ed      	bne.n	800c026 <__gethex+0x26a>
 800c04a:	9801      	ldr	r0, [sp, #4]
 800c04c:	4621      	mov	r1, r4
 800c04e:	f000 f9d9 	bl	800c404 <_Bfree>
 800c052:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c054:	2300      	movs	r3, #0
 800c056:	6013      	str	r3, [r2, #0]
 800c058:	2550      	movs	r5, #80	@ 0x50
 800c05a:	e72b      	b.n	800beb4 <__gethex+0xf8>
 800c05c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d1f3      	bne.n	800c04a <__gethex+0x28e>
 800c062:	e7e0      	b.n	800c026 <__gethex+0x26a>
 800c064:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c066:	2b00      	cmp	r3, #0
 800c068:	d1dd      	bne.n	800c026 <__gethex+0x26a>
 800c06a:	e7ee      	b.n	800c04a <__gethex+0x28e>
 800c06c:	0800e9c8 	.word	0x0800e9c8
 800c070:	0800ea30 	.word	0x0800ea30
 800c074:	0800ea41 	.word	0x0800ea41
 800c078:	1e6f      	subs	r7, r5, #1
 800c07a:	f1b9 0f00 	cmp.w	r9, #0
 800c07e:	d130      	bne.n	800c0e2 <__gethex+0x326>
 800c080:	b127      	cbz	r7, 800c08c <__gethex+0x2d0>
 800c082:	4639      	mov	r1, r7
 800c084:	4620      	mov	r0, r4
 800c086:	f000 fe0e 	bl	800cca6 <__any_on>
 800c08a:	4681      	mov	r9, r0
 800c08c:	117a      	asrs	r2, r7, #5
 800c08e:	2301      	movs	r3, #1
 800c090:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c094:	f007 071f 	and.w	r7, r7, #31
 800c098:	40bb      	lsls	r3, r7
 800c09a:	4213      	tst	r3, r2
 800c09c:	4629      	mov	r1, r5
 800c09e:	4620      	mov	r0, r4
 800c0a0:	bf18      	it	ne
 800c0a2:	f049 0902 	orrne.w	r9, r9, #2
 800c0a6:	f7ff fe21 	bl	800bcec <rshift>
 800c0aa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c0ae:	1b76      	subs	r6, r6, r5
 800c0b0:	2502      	movs	r5, #2
 800c0b2:	f1b9 0f00 	cmp.w	r9, #0
 800c0b6:	d047      	beq.n	800c148 <__gethex+0x38c>
 800c0b8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c0bc:	2b02      	cmp	r3, #2
 800c0be:	d015      	beq.n	800c0ec <__gethex+0x330>
 800c0c0:	2b03      	cmp	r3, #3
 800c0c2:	d017      	beq.n	800c0f4 <__gethex+0x338>
 800c0c4:	2b01      	cmp	r3, #1
 800c0c6:	d109      	bne.n	800c0dc <__gethex+0x320>
 800c0c8:	f019 0f02 	tst.w	r9, #2
 800c0cc:	d006      	beq.n	800c0dc <__gethex+0x320>
 800c0ce:	f8da 3000 	ldr.w	r3, [sl]
 800c0d2:	ea49 0903 	orr.w	r9, r9, r3
 800c0d6:	f019 0f01 	tst.w	r9, #1
 800c0da:	d10e      	bne.n	800c0fa <__gethex+0x33e>
 800c0dc:	f045 0510 	orr.w	r5, r5, #16
 800c0e0:	e032      	b.n	800c148 <__gethex+0x38c>
 800c0e2:	f04f 0901 	mov.w	r9, #1
 800c0e6:	e7d1      	b.n	800c08c <__gethex+0x2d0>
 800c0e8:	2501      	movs	r5, #1
 800c0ea:	e7e2      	b.n	800c0b2 <__gethex+0x2f6>
 800c0ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c0ee:	f1c3 0301 	rsb	r3, r3, #1
 800c0f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c0f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d0f0      	beq.n	800c0dc <__gethex+0x320>
 800c0fa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c0fe:	f104 0314 	add.w	r3, r4, #20
 800c102:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c106:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c10a:	f04f 0c00 	mov.w	ip, #0
 800c10e:	4618      	mov	r0, r3
 800c110:	f853 2b04 	ldr.w	r2, [r3], #4
 800c114:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c118:	d01b      	beq.n	800c152 <__gethex+0x396>
 800c11a:	3201      	adds	r2, #1
 800c11c:	6002      	str	r2, [r0, #0]
 800c11e:	2d02      	cmp	r5, #2
 800c120:	f104 0314 	add.w	r3, r4, #20
 800c124:	d13c      	bne.n	800c1a0 <__gethex+0x3e4>
 800c126:	f8d8 2000 	ldr.w	r2, [r8]
 800c12a:	3a01      	subs	r2, #1
 800c12c:	42b2      	cmp	r2, r6
 800c12e:	d109      	bne.n	800c144 <__gethex+0x388>
 800c130:	1171      	asrs	r1, r6, #5
 800c132:	2201      	movs	r2, #1
 800c134:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c138:	f006 061f 	and.w	r6, r6, #31
 800c13c:	fa02 f606 	lsl.w	r6, r2, r6
 800c140:	421e      	tst	r6, r3
 800c142:	d13a      	bne.n	800c1ba <__gethex+0x3fe>
 800c144:	f045 0520 	orr.w	r5, r5, #32
 800c148:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c14a:	601c      	str	r4, [r3, #0]
 800c14c:	9b02      	ldr	r3, [sp, #8]
 800c14e:	601f      	str	r7, [r3, #0]
 800c150:	e6b0      	b.n	800beb4 <__gethex+0xf8>
 800c152:	4299      	cmp	r1, r3
 800c154:	f843 cc04 	str.w	ip, [r3, #-4]
 800c158:	d8d9      	bhi.n	800c10e <__gethex+0x352>
 800c15a:	68a3      	ldr	r3, [r4, #8]
 800c15c:	459b      	cmp	fp, r3
 800c15e:	db17      	blt.n	800c190 <__gethex+0x3d4>
 800c160:	6861      	ldr	r1, [r4, #4]
 800c162:	9801      	ldr	r0, [sp, #4]
 800c164:	3101      	adds	r1, #1
 800c166:	f000 f90d 	bl	800c384 <_Balloc>
 800c16a:	4681      	mov	r9, r0
 800c16c:	b918      	cbnz	r0, 800c176 <__gethex+0x3ba>
 800c16e:	4b1a      	ldr	r3, [pc, #104]	@ (800c1d8 <__gethex+0x41c>)
 800c170:	4602      	mov	r2, r0
 800c172:	2184      	movs	r1, #132	@ 0x84
 800c174:	e6c5      	b.n	800bf02 <__gethex+0x146>
 800c176:	6922      	ldr	r2, [r4, #16]
 800c178:	3202      	adds	r2, #2
 800c17a:	f104 010c 	add.w	r1, r4, #12
 800c17e:	0092      	lsls	r2, r2, #2
 800c180:	300c      	adds	r0, #12
 800c182:	f7ff fd50 	bl	800bc26 <memcpy>
 800c186:	4621      	mov	r1, r4
 800c188:	9801      	ldr	r0, [sp, #4]
 800c18a:	f000 f93b 	bl	800c404 <_Bfree>
 800c18e:	464c      	mov	r4, r9
 800c190:	6923      	ldr	r3, [r4, #16]
 800c192:	1c5a      	adds	r2, r3, #1
 800c194:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c198:	6122      	str	r2, [r4, #16]
 800c19a:	2201      	movs	r2, #1
 800c19c:	615a      	str	r2, [r3, #20]
 800c19e:	e7be      	b.n	800c11e <__gethex+0x362>
 800c1a0:	6922      	ldr	r2, [r4, #16]
 800c1a2:	455a      	cmp	r2, fp
 800c1a4:	dd0b      	ble.n	800c1be <__gethex+0x402>
 800c1a6:	2101      	movs	r1, #1
 800c1a8:	4620      	mov	r0, r4
 800c1aa:	f7ff fd9f 	bl	800bcec <rshift>
 800c1ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c1b2:	3701      	adds	r7, #1
 800c1b4:	42bb      	cmp	r3, r7
 800c1b6:	f6ff aee0 	blt.w	800bf7a <__gethex+0x1be>
 800c1ba:	2501      	movs	r5, #1
 800c1bc:	e7c2      	b.n	800c144 <__gethex+0x388>
 800c1be:	f016 061f 	ands.w	r6, r6, #31
 800c1c2:	d0fa      	beq.n	800c1ba <__gethex+0x3fe>
 800c1c4:	4453      	add	r3, sl
 800c1c6:	f1c6 0620 	rsb	r6, r6, #32
 800c1ca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c1ce:	f000 f9cb 	bl	800c568 <__hi0bits>
 800c1d2:	42b0      	cmp	r0, r6
 800c1d4:	dbe7      	blt.n	800c1a6 <__gethex+0x3ea>
 800c1d6:	e7f0      	b.n	800c1ba <__gethex+0x3fe>
 800c1d8:	0800ea30 	.word	0x0800ea30

0800c1dc <L_shift>:
 800c1dc:	f1c2 0208 	rsb	r2, r2, #8
 800c1e0:	0092      	lsls	r2, r2, #2
 800c1e2:	b570      	push	{r4, r5, r6, lr}
 800c1e4:	f1c2 0620 	rsb	r6, r2, #32
 800c1e8:	6843      	ldr	r3, [r0, #4]
 800c1ea:	6804      	ldr	r4, [r0, #0]
 800c1ec:	fa03 f506 	lsl.w	r5, r3, r6
 800c1f0:	432c      	orrs	r4, r5
 800c1f2:	40d3      	lsrs	r3, r2
 800c1f4:	6004      	str	r4, [r0, #0]
 800c1f6:	f840 3f04 	str.w	r3, [r0, #4]!
 800c1fa:	4288      	cmp	r0, r1
 800c1fc:	d3f4      	bcc.n	800c1e8 <L_shift+0xc>
 800c1fe:	bd70      	pop	{r4, r5, r6, pc}

0800c200 <__match>:
 800c200:	b530      	push	{r4, r5, lr}
 800c202:	6803      	ldr	r3, [r0, #0]
 800c204:	3301      	adds	r3, #1
 800c206:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c20a:	b914      	cbnz	r4, 800c212 <__match+0x12>
 800c20c:	6003      	str	r3, [r0, #0]
 800c20e:	2001      	movs	r0, #1
 800c210:	bd30      	pop	{r4, r5, pc}
 800c212:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c216:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c21a:	2d19      	cmp	r5, #25
 800c21c:	bf98      	it	ls
 800c21e:	3220      	addls	r2, #32
 800c220:	42a2      	cmp	r2, r4
 800c222:	d0f0      	beq.n	800c206 <__match+0x6>
 800c224:	2000      	movs	r0, #0
 800c226:	e7f3      	b.n	800c210 <__match+0x10>

0800c228 <__hexnan>:
 800c228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c22c:	680b      	ldr	r3, [r1, #0]
 800c22e:	6801      	ldr	r1, [r0, #0]
 800c230:	115e      	asrs	r6, r3, #5
 800c232:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c236:	f013 031f 	ands.w	r3, r3, #31
 800c23a:	b087      	sub	sp, #28
 800c23c:	bf18      	it	ne
 800c23e:	3604      	addne	r6, #4
 800c240:	2500      	movs	r5, #0
 800c242:	1f37      	subs	r7, r6, #4
 800c244:	4682      	mov	sl, r0
 800c246:	4690      	mov	r8, r2
 800c248:	9301      	str	r3, [sp, #4]
 800c24a:	f846 5c04 	str.w	r5, [r6, #-4]
 800c24e:	46b9      	mov	r9, r7
 800c250:	463c      	mov	r4, r7
 800c252:	9502      	str	r5, [sp, #8]
 800c254:	46ab      	mov	fp, r5
 800c256:	784a      	ldrb	r2, [r1, #1]
 800c258:	1c4b      	adds	r3, r1, #1
 800c25a:	9303      	str	r3, [sp, #12]
 800c25c:	b342      	cbz	r2, 800c2b0 <__hexnan+0x88>
 800c25e:	4610      	mov	r0, r2
 800c260:	9105      	str	r1, [sp, #20]
 800c262:	9204      	str	r2, [sp, #16]
 800c264:	f7ff fd94 	bl	800bd90 <__hexdig_fun>
 800c268:	2800      	cmp	r0, #0
 800c26a:	d151      	bne.n	800c310 <__hexnan+0xe8>
 800c26c:	9a04      	ldr	r2, [sp, #16]
 800c26e:	9905      	ldr	r1, [sp, #20]
 800c270:	2a20      	cmp	r2, #32
 800c272:	d818      	bhi.n	800c2a6 <__hexnan+0x7e>
 800c274:	9b02      	ldr	r3, [sp, #8]
 800c276:	459b      	cmp	fp, r3
 800c278:	dd13      	ble.n	800c2a2 <__hexnan+0x7a>
 800c27a:	454c      	cmp	r4, r9
 800c27c:	d206      	bcs.n	800c28c <__hexnan+0x64>
 800c27e:	2d07      	cmp	r5, #7
 800c280:	dc04      	bgt.n	800c28c <__hexnan+0x64>
 800c282:	462a      	mov	r2, r5
 800c284:	4649      	mov	r1, r9
 800c286:	4620      	mov	r0, r4
 800c288:	f7ff ffa8 	bl	800c1dc <L_shift>
 800c28c:	4544      	cmp	r4, r8
 800c28e:	d952      	bls.n	800c336 <__hexnan+0x10e>
 800c290:	2300      	movs	r3, #0
 800c292:	f1a4 0904 	sub.w	r9, r4, #4
 800c296:	f844 3c04 	str.w	r3, [r4, #-4]
 800c29a:	f8cd b008 	str.w	fp, [sp, #8]
 800c29e:	464c      	mov	r4, r9
 800c2a0:	461d      	mov	r5, r3
 800c2a2:	9903      	ldr	r1, [sp, #12]
 800c2a4:	e7d7      	b.n	800c256 <__hexnan+0x2e>
 800c2a6:	2a29      	cmp	r2, #41	@ 0x29
 800c2a8:	d157      	bne.n	800c35a <__hexnan+0x132>
 800c2aa:	3102      	adds	r1, #2
 800c2ac:	f8ca 1000 	str.w	r1, [sl]
 800c2b0:	f1bb 0f00 	cmp.w	fp, #0
 800c2b4:	d051      	beq.n	800c35a <__hexnan+0x132>
 800c2b6:	454c      	cmp	r4, r9
 800c2b8:	d206      	bcs.n	800c2c8 <__hexnan+0xa0>
 800c2ba:	2d07      	cmp	r5, #7
 800c2bc:	dc04      	bgt.n	800c2c8 <__hexnan+0xa0>
 800c2be:	462a      	mov	r2, r5
 800c2c0:	4649      	mov	r1, r9
 800c2c2:	4620      	mov	r0, r4
 800c2c4:	f7ff ff8a 	bl	800c1dc <L_shift>
 800c2c8:	4544      	cmp	r4, r8
 800c2ca:	d936      	bls.n	800c33a <__hexnan+0x112>
 800c2cc:	f1a8 0204 	sub.w	r2, r8, #4
 800c2d0:	4623      	mov	r3, r4
 800c2d2:	f853 1b04 	ldr.w	r1, [r3], #4
 800c2d6:	f842 1f04 	str.w	r1, [r2, #4]!
 800c2da:	429f      	cmp	r7, r3
 800c2dc:	d2f9      	bcs.n	800c2d2 <__hexnan+0xaa>
 800c2de:	1b3b      	subs	r3, r7, r4
 800c2e0:	f023 0303 	bic.w	r3, r3, #3
 800c2e4:	3304      	adds	r3, #4
 800c2e6:	3401      	adds	r4, #1
 800c2e8:	3e03      	subs	r6, #3
 800c2ea:	42b4      	cmp	r4, r6
 800c2ec:	bf88      	it	hi
 800c2ee:	2304      	movhi	r3, #4
 800c2f0:	4443      	add	r3, r8
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	f843 2b04 	str.w	r2, [r3], #4
 800c2f8:	429f      	cmp	r7, r3
 800c2fa:	d2fb      	bcs.n	800c2f4 <__hexnan+0xcc>
 800c2fc:	683b      	ldr	r3, [r7, #0]
 800c2fe:	b91b      	cbnz	r3, 800c308 <__hexnan+0xe0>
 800c300:	4547      	cmp	r7, r8
 800c302:	d128      	bne.n	800c356 <__hexnan+0x12e>
 800c304:	2301      	movs	r3, #1
 800c306:	603b      	str	r3, [r7, #0]
 800c308:	2005      	movs	r0, #5
 800c30a:	b007      	add	sp, #28
 800c30c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c310:	3501      	adds	r5, #1
 800c312:	2d08      	cmp	r5, #8
 800c314:	f10b 0b01 	add.w	fp, fp, #1
 800c318:	dd06      	ble.n	800c328 <__hexnan+0x100>
 800c31a:	4544      	cmp	r4, r8
 800c31c:	d9c1      	bls.n	800c2a2 <__hexnan+0x7a>
 800c31e:	2300      	movs	r3, #0
 800c320:	f844 3c04 	str.w	r3, [r4, #-4]
 800c324:	2501      	movs	r5, #1
 800c326:	3c04      	subs	r4, #4
 800c328:	6822      	ldr	r2, [r4, #0]
 800c32a:	f000 000f 	and.w	r0, r0, #15
 800c32e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c332:	6020      	str	r0, [r4, #0]
 800c334:	e7b5      	b.n	800c2a2 <__hexnan+0x7a>
 800c336:	2508      	movs	r5, #8
 800c338:	e7b3      	b.n	800c2a2 <__hexnan+0x7a>
 800c33a:	9b01      	ldr	r3, [sp, #4]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d0dd      	beq.n	800c2fc <__hexnan+0xd4>
 800c340:	f1c3 0320 	rsb	r3, r3, #32
 800c344:	f04f 32ff 	mov.w	r2, #4294967295
 800c348:	40da      	lsrs	r2, r3
 800c34a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c34e:	4013      	ands	r3, r2
 800c350:	f846 3c04 	str.w	r3, [r6, #-4]
 800c354:	e7d2      	b.n	800c2fc <__hexnan+0xd4>
 800c356:	3f04      	subs	r7, #4
 800c358:	e7d0      	b.n	800c2fc <__hexnan+0xd4>
 800c35a:	2004      	movs	r0, #4
 800c35c:	e7d5      	b.n	800c30a <__hexnan+0xe2>

0800c35e <__ascii_mbtowc>:
 800c35e:	b082      	sub	sp, #8
 800c360:	b901      	cbnz	r1, 800c364 <__ascii_mbtowc+0x6>
 800c362:	a901      	add	r1, sp, #4
 800c364:	b142      	cbz	r2, 800c378 <__ascii_mbtowc+0x1a>
 800c366:	b14b      	cbz	r3, 800c37c <__ascii_mbtowc+0x1e>
 800c368:	7813      	ldrb	r3, [r2, #0]
 800c36a:	600b      	str	r3, [r1, #0]
 800c36c:	7812      	ldrb	r2, [r2, #0]
 800c36e:	1e10      	subs	r0, r2, #0
 800c370:	bf18      	it	ne
 800c372:	2001      	movne	r0, #1
 800c374:	b002      	add	sp, #8
 800c376:	4770      	bx	lr
 800c378:	4610      	mov	r0, r2
 800c37a:	e7fb      	b.n	800c374 <__ascii_mbtowc+0x16>
 800c37c:	f06f 0001 	mvn.w	r0, #1
 800c380:	e7f8      	b.n	800c374 <__ascii_mbtowc+0x16>
	...

0800c384 <_Balloc>:
 800c384:	b570      	push	{r4, r5, r6, lr}
 800c386:	69c6      	ldr	r6, [r0, #28]
 800c388:	4604      	mov	r4, r0
 800c38a:	460d      	mov	r5, r1
 800c38c:	b976      	cbnz	r6, 800c3ac <_Balloc+0x28>
 800c38e:	2010      	movs	r0, #16
 800c390:	f7fe fbda 	bl	800ab48 <malloc>
 800c394:	4602      	mov	r2, r0
 800c396:	61e0      	str	r0, [r4, #28]
 800c398:	b920      	cbnz	r0, 800c3a4 <_Balloc+0x20>
 800c39a:	4b18      	ldr	r3, [pc, #96]	@ (800c3fc <_Balloc+0x78>)
 800c39c:	4818      	ldr	r0, [pc, #96]	@ (800c400 <_Balloc+0x7c>)
 800c39e:	216b      	movs	r1, #107	@ 0x6b
 800c3a0:	f000 fd5c 	bl	800ce5c <__assert_func>
 800c3a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c3a8:	6006      	str	r6, [r0, #0]
 800c3aa:	60c6      	str	r6, [r0, #12]
 800c3ac:	69e6      	ldr	r6, [r4, #28]
 800c3ae:	68f3      	ldr	r3, [r6, #12]
 800c3b0:	b183      	cbz	r3, 800c3d4 <_Balloc+0x50>
 800c3b2:	69e3      	ldr	r3, [r4, #28]
 800c3b4:	68db      	ldr	r3, [r3, #12]
 800c3b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c3ba:	b9b8      	cbnz	r0, 800c3ec <_Balloc+0x68>
 800c3bc:	2101      	movs	r1, #1
 800c3be:	fa01 f605 	lsl.w	r6, r1, r5
 800c3c2:	1d72      	adds	r2, r6, #5
 800c3c4:	0092      	lsls	r2, r2, #2
 800c3c6:	4620      	mov	r0, r4
 800c3c8:	f000 fd66 	bl	800ce98 <_calloc_r>
 800c3cc:	b160      	cbz	r0, 800c3e8 <_Balloc+0x64>
 800c3ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c3d2:	e00e      	b.n	800c3f2 <_Balloc+0x6e>
 800c3d4:	2221      	movs	r2, #33	@ 0x21
 800c3d6:	2104      	movs	r1, #4
 800c3d8:	4620      	mov	r0, r4
 800c3da:	f000 fd5d 	bl	800ce98 <_calloc_r>
 800c3de:	69e3      	ldr	r3, [r4, #28]
 800c3e0:	60f0      	str	r0, [r6, #12]
 800c3e2:	68db      	ldr	r3, [r3, #12]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d1e4      	bne.n	800c3b2 <_Balloc+0x2e>
 800c3e8:	2000      	movs	r0, #0
 800c3ea:	bd70      	pop	{r4, r5, r6, pc}
 800c3ec:	6802      	ldr	r2, [r0, #0]
 800c3ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c3f8:	e7f7      	b.n	800c3ea <_Balloc+0x66>
 800c3fa:	bf00      	nop
 800c3fc:	0800eaa1 	.word	0x0800eaa1
 800c400:	0800eab8 	.word	0x0800eab8

0800c404 <_Bfree>:
 800c404:	b570      	push	{r4, r5, r6, lr}
 800c406:	69c6      	ldr	r6, [r0, #28]
 800c408:	4605      	mov	r5, r0
 800c40a:	460c      	mov	r4, r1
 800c40c:	b976      	cbnz	r6, 800c42c <_Bfree+0x28>
 800c40e:	2010      	movs	r0, #16
 800c410:	f7fe fb9a 	bl	800ab48 <malloc>
 800c414:	4602      	mov	r2, r0
 800c416:	61e8      	str	r0, [r5, #28]
 800c418:	b920      	cbnz	r0, 800c424 <_Bfree+0x20>
 800c41a:	4b09      	ldr	r3, [pc, #36]	@ (800c440 <_Bfree+0x3c>)
 800c41c:	4809      	ldr	r0, [pc, #36]	@ (800c444 <_Bfree+0x40>)
 800c41e:	218f      	movs	r1, #143	@ 0x8f
 800c420:	f000 fd1c 	bl	800ce5c <__assert_func>
 800c424:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c428:	6006      	str	r6, [r0, #0]
 800c42a:	60c6      	str	r6, [r0, #12]
 800c42c:	b13c      	cbz	r4, 800c43e <_Bfree+0x3a>
 800c42e:	69eb      	ldr	r3, [r5, #28]
 800c430:	6862      	ldr	r2, [r4, #4]
 800c432:	68db      	ldr	r3, [r3, #12]
 800c434:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c438:	6021      	str	r1, [r4, #0]
 800c43a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c43e:	bd70      	pop	{r4, r5, r6, pc}
 800c440:	0800eaa1 	.word	0x0800eaa1
 800c444:	0800eab8 	.word	0x0800eab8

0800c448 <__multadd>:
 800c448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c44c:	690d      	ldr	r5, [r1, #16]
 800c44e:	4607      	mov	r7, r0
 800c450:	460c      	mov	r4, r1
 800c452:	461e      	mov	r6, r3
 800c454:	f101 0c14 	add.w	ip, r1, #20
 800c458:	2000      	movs	r0, #0
 800c45a:	f8dc 3000 	ldr.w	r3, [ip]
 800c45e:	b299      	uxth	r1, r3
 800c460:	fb02 6101 	mla	r1, r2, r1, r6
 800c464:	0c1e      	lsrs	r6, r3, #16
 800c466:	0c0b      	lsrs	r3, r1, #16
 800c468:	fb02 3306 	mla	r3, r2, r6, r3
 800c46c:	b289      	uxth	r1, r1
 800c46e:	3001      	adds	r0, #1
 800c470:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c474:	4285      	cmp	r5, r0
 800c476:	f84c 1b04 	str.w	r1, [ip], #4
 800c47a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c47e:	dcec      	bgt.n	800c45a <__multadd+0x12>
 800c480:	b30e      	cbz	r6, 800c4c6 <__multadd+0x7e>
 800c482:	68a3      	ldr	r3, [r4, #8]
 800c484:	42ab      	cmp	r3, r5
 800c486:	dc19      	bgt.n	800c4bc <__multadd+0x74>
 800c488:	6861      	ldr	r1, [r4, #4]
 800c48a:	4638      	mov	r0, r7
 800c48c:	3101      	adds	r1, #1
 800c48e:	f7ff ff79 	bl	800c384 <_Balloc>
 800c492:	4680      	mov	r8, r0
 800c494:	b928      	cbnz	r0, 800c4a2 <__multadd+0x5a>
 800c496:	4602      	mov	r2, r0
 800c498:	4b0c      	ldr	r3, [pc, #48]	@ (800c4cc <__multadd+0x84>)
 800c49a:	480d      	ldr	r0, [pc, #52]	@ (800c4d0 <__multadd+0x88>)
 800c49c:	21ba      	movs	r1, #186	@ 0xba
 800c49e:	f000 fcdd 	bl	800ce5c <__assert_func>
 800c4a2:	6922      	ldr	r2, [r4, #16]
 800c4a4:	3202      	adds	r2, #2
 800c4a6:	f104 010c 	add.w	r1, r4, #12
 800c4aa:	0092      	lsls	r2, r2, #2
 800c4ac:	300c      	adds	r0, #12
 800c4ae:	f7ff fbba 	bl	800bc26 <memcpy>
 800c4b2:	4621      	mov	r1, r4
 800c4b4:	4638      	mov	r0, r7
 800c4b6:	f7ff ffa5 	bl	800c404 <_Bfree>
 800c4ba:	4644      	mov	r4, r8
 800c4bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c4c0:	3501      	adds	r5, #1
 800c4c2:	615e      	str	r6, [r3, #20]
 800c4c4:	6125      	str	r5, [r4, #16]
 800c4c6:	4620      	mov	r0, r4
 800c4c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4cc:	0800ea30 	.word	0x0800ea30
 800c4d0:	0800eab8 	.word	0x0800eab8

0800c4d4 <__s2b>:
 800c4d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4d8:	460c      	mov	r4, r1
 800c4da:	4615      	mov	r5, r2
 800c4dc:	461f      	mov	r7, r3
 800c4de:	2209      	movs	r2, #9
 800c4e0:	3308      	adds	r3, #8
 800c4e2:	4606      	mov	r6, r0
 800c4e4:	fb93 f3f2 	sdiv	r3, r3, r2
 800c4e8:	2100      	movs	r1, #0
 800c4ea:	2201      	movs	r2, #1
 800c4ec:	429a      	cmp	r2, r3
 800c4ee:	db09      	blt.n	800c504 <__s2b+0x30>
 800c4f0:	4630      	mov	r0, r6
 800c4f2:	f7ff ff47 	bl	800c384 <_Balloc>
 800c4f6:	b940      	cbnz	r0, 800c50a <__s2b+0x36>
 800c4f8:	4602      	mov	r2, r0
 800c4fa:	4b19      	ldr	r3, [pc, #100]	@ (800c560 <__s2b+0x8c>)
 800c4fc:	4819      	ldr	r0, [pc, #100]	@ (800c564 <__s2b+0x90>)
 800c4fe:	21d3      	movs	r1, #211	@ 0xd3
 800c500:	f000 fcac 	bl	800ce5c <__assert_func>
 800c504:	0052      	lsls	r2, r2, #1
 800c506:	3101      	adds	r1, #1
 800c508:	e7f0      	b.n	800c4ec <__s2b+0x18>
 800c50a:	9b08      	ldr	r3, [sp, #32]
 800c50c:	6143      	str	r3, [r0, #20]
 800c50e:	2d09      	cmp	r5, #9
 800c510:	f04f 0301 	mov.w	r3, #1
 800c514:	6103      	str	r3, [r0, #16]
 800c516:	dd16      	ble.n	800c546 <__s2b+0x72>
 800c518:	f104 0909 	add.w	r9, r4, #9
 800c51c:	46c8      	mov	r8, r9
 800c51e:	442c      	add	r4, r5
 800c520:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c524:	4601      	mov	r1, r0
 800c526:	3b30      	subs	r3, #48	@ 0x30
 800c528:	220a      	movs	r2, #10
 800c52a:	4630      	mov	r0, r6
 800c52c:	f7ff ff8c 	bl	800c448 <__multadd>
 800c530:	45a0      	cmp	r8, r4
 800c532:	d1f5      	bne.n	800c520 <__s2b+0x4c>
 800c534:	f1a5 0408 	sub.w	r4, r5, #8
 800c538:	444c      	add	r4, r9
 800c53a:	1b2d      	subs	r5, r5, r4
 800c53c:	1963      	adds	r3, r4, r5
 800c53e:	42bb      	cmp	r3, r7
 800c540:	db04      	blt.n	800c54c <__s2b+0x78>
 800c542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c546:	340a      	adds	r4, #10
 800c548:	2509      	movs	r5, #9
 800c54a:	e7f6      	b.n	800c53a <__s2b+0x66>
 800c54c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c550:	4601      	mov	r1, r0
 800c552:	3b30      	subs	r3, #48	@ 0x30
 800c554:	220a      	movs	r2, #10
 800c556:	4630      	mov	r0, r6
 800c558:	f7ff ff76 	bl	800c448 <__multadd>
 800c55c:	e7ee      	b.n	800c53c <__s2b+0x68>
 800c55e:	bf00      	nop
 800c560:	0800ea30 	.word	0x0800ea30
 800c564:	0800eab8 	.word	0x0800eab8

0800c568 <__hi0bits>:
 800c568:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c56c:	4603      	mov	r3, r0
 800c56e:	bf36      	itet	cc
 800c570:	0403      	lslcc	r3, r0, #16
 800c572:	2000      	movcs	r0, #0
 800c574:	2010      	movcc	r0, #16
 800c576:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c57a:	bf3c      	itt	cc
 800c57c:	021b      	lslcc	r3, r3, #8
 800c57e:	3008      	addcc	r0, #8
 800c580:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c584:	bf3c      	itt	cc
 800c586:	011b      	lslcc	r3, r3, #4
 800c588:	3004      	addcc	r0, #4
 800c58a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c58e:	bf3c      	itt	cc
 800c590:	009b      	lslcc	r3, r3, #2
 800c592:	3002      	addcc	r0, #2
 800c594:	2b00      	cmp	r3, #0
 800c596:	db05      	blt.n	800c5a4 <__hi0bits+0x3c>
 800c598:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c59c:	f100 0001 	add.w	r0, r0, #1
 800c5a0:	bf08      	it	eq
 800c5a2:	2020      	moveq	r0, #32
 800c5a4:	4770      	bx	lr

0800c5a6 <__lo0bits>:
 800c5a6:	6803      	ldr	r3, [r0, #0]
 800c5a8:	4602      	mov	r2, r0
 800c5aa:	f013 0007 	ands.w	r0, r3, #7
 800c5ae:	d00b      	beq.n	800c5c8 <__lo0bits+0x22>
 800c5b0:	07d9      	lsls	r1, r3, #31
 800c5b2:	d421      	bmi.n	800c5f8 <__lo0bits+0x52>
 800c5b4:	0798      	lsls	r0, r3, #30
 800c5b6:	bf49      	itett	mi
 800c5b8:	085b      	lsrmi	r3, r3, #1
 800c5ba:	089b      	lsrpl	r3, r3, #2
 800c5bc:	2001      	movmi	r0, #1
 800c5be:	6013      	strmi	r3, [r2, #0]
 800c5c0:	bf5c      	itt	pl
 800c5c2:	6013      	strpl	r3, [r2, #0]
 800c5c4:	2002      	movpl	r0, #2
 800c5c6:	4770      	bx	lr
 800c5c8:	b299      	uxth	r1, r3
 800c5ca:	b909      	cbnz	r1, 800c5d0 <__lo0bits+0x2a>
 800c5cc:	0c1b      	lsrs	r3, r3, #16
 800c5ce:	2010      	movs	r0, #16
 800c5d0:	b2d9      	uxtb	r1, r3
 800c5d2:	b909      	cbnz	r1, 800c5d8 <__lo0bits+0x32>
 800c5d4:	3008      	adds	r0, #8
 800c5d6:	0a1b      	lsrs	r3, r3, #8
 800c5d8:	0719      	lsls	r1, r3, #28
 800c5da:	bf04      	itt	eq
 800c5dc:	091b      	lsreq	r3, r3, #4
 800c5de:	3004      	addeq	r0, #4
 800c5e0:	0799      	lsls	r1, r3, #30
 800c5e2:	bf04      	itt	eq
 800c5e4:	089b      	lsreq	r3, r3, #2
 800c5e6:	3002      	addeq	r0, #2
 800c5e8:	07d9      	lsls	r1, r3, #31
 800c5ea:	d403      	bmi.n	800c5f4 <__lo0bits+0x4e>
 800c5ec:	085b      	lsrs	r3, r3, #1
 800c5ee:	f100 0001 	add.w	r0, r0, #1
 800c5f2:	d003      	beq.n	800c5fc <__lo0bits+0x56>
 800c5f4:	6013      	str	r3, [r2, #0]
 800c5f6:	4770      	bx	lr
 800c5f8:	2000      	movs	r0, #0
 800c5fa:	4770      	bx	lr
 800c5fc:	2020      	movs	r0, #32
 800c5fe:	4770      	bx	lr

0800c600 <__i2b>:
 800c600:	b510      	push	{r4, lr}
 800c602:	460c      	mov	r4, r1
 800c604:	2101      	movs	r1, #1
 800c606:	f7ff febd 	bl	800c384 <_Balloc>
 800c60a:	4602      	mov	r2, r0
 800c60c:	b928      	cbnz	r0, 800c61a <__i2b+0x1a>
 800c60e:	4b05      	ldr	r3, [pc, #20]	@ (800c624 <__i2b+0x24>)
 800c610:	4805      	ldr	r0, [pc, #20]	@ (800c628 <__i2b+0x28>)
 800c612:	f240 1145 	movw	r1, #325	@ 0x145
 800c616:	f000 fc21 	bl	800ce5c <__assert_func>
 800c61a:	2301      	movs	r3, #1
 800c61c:	6144      	str	r4, [r0, #20]
 800c61e:	6103      	str	r3, [r0, #16]
 800c620:	bd10      	pop	{r4, pc}
 800c622:	bf00      	nop
 800c624:	0800ea30 	.word	0x0800ea30
 800c628:	0800eab8 	.word	0x0800eab8

0800c62c <__multiply>:
 800c62c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c630:	4614      	mov	r4, r2
 800c632:	690a      	ldr	r2, [r1, #16]
 800c634:	6923      	ldr	r3, [r4, #16]
 800c636:	429a      	cmp	r2, r3
 800c638:	bfa8      	it	ge
 800c63a:	4623      	movge	r3, r4
 800c63c:	460f      	mov	r7, r1
 800c63e:	bfa4      	itt	ge
 800c640:	460c      	movge	r4, r1
 800c642:	461f      	movge	r7, r3
 800c644:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c648:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c64c:	68a3      	ldr	r3, [r4, #8]
 800c64e:	6861      	ldr	r1, [r4, #4]
 800c650:	eb0a 0609 	add.w	r6, sl, r9
 800c654:	42b3      	cmp	r3, r6
 800c656:	b085      	sub	sp, #20
 800c658:	bfb8      	it	lt
 800c65a:	3101      	addlt	r1, #1
 800c65c:	f7ff fe92 	bl	800c384 <_Balloc>
 800c660:	b930      	cbnz	r0, 800c670 <__multiply+0x44>
 800c662:	4602      	mov	r2, r0
 800c664:	4b44      	ldr	r3, [pc, #272]	@ (800c778 <__multiply+0x14c>)
 800c666:	4845      	ldr	r0, [pc, #276]	@ (800c77c <__multiply+0x150>)
 800c668:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c66c:	f000 fbf6 	bl	800ce5c <__assert_func>
 800c670:	f100 0514 	add.w	r5, r0, #20
 800c674:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c678:	462b      	mov	r3, r5
 800c67a:	2200      	movs	r2, #0
 800c67c:	4543      	cmp	r3, r8
 800c67e:	d321      	bcc.n	800c6c4 <__multiply+0x98>
 800c680:	f107 0114 	add.w	r1, r7, #20
 800c684:	f104 0214 	add.w	r2, r4, #20
 800c688:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c68c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c690:	9302      	str	r3, [sp, #8]
 800c692:	1b13      	subs	r3, r2, r4
 800c694:	3b15      	subs	r3, #21
 800c696:	f023 0303 	bic.w	r3, r3, #3
 800c69a:	3304      	adds	r3, #4
 800c69c:	f104 0715 	add.w	r7, r4, #21
 800c6a0:	42ba      	cmp	r2, r7
 800c6a2:	bf38      	it	cc
 800c6a4:	2304      	movcc	r3, #4
 800c6a6:	9301      	str	r3, [sp, #4]
 800c6a8:	9b02      	ldr	r3, [sp, #8]
 800c6aa:	9103      	str	r1, [sp, #12]
 800c6ac:	428b      	cmp	r3, r1
 800c6ae:	d80c      	bhi.n	800c6ca <__multiply+0x9e>
 800c6b0:	2e00      	cmp	r6, #0
 800c6b2:	dd03      	ble.n	800c6bc <__multiply+0x90>
 800c6b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d05b      	beq.n	800c774 <__multiply+0x148>
 800c6bc:	6106      	str	r6, [r0, #16]
 800c6be:	b005      	add	sp, #20
 800c6c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6c4:	f843 2b04 	str.w	r2, [r3], #4
 800c6c8:	e7d8      	b.n	800c67c <__multiply+0x50>
 800c6ca:	f8b1 a000 	ldrh.w	sl, [r1]
 800c6ce:	f1ba 0f00 	cmp.w	sl, #0
 800c6d2:	d024      	beq.n	800c71e <__multiply+0xf2>
 800c6d4:	f104 0e14 	add.w	lr, r4, #20
 800c6d8:	46a9      	mov	r9, r5
 800c6da:	f04f 0c00 	mov.w	ip, #0
 800c6de:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c6e2:	f8d9 3000 	ldr.w	r3, [r9]
 800c6e6:	fa1f fb87 	uxth.w	fp, r7
 800c6ea:	b29b      	uxth	r3, r3
 800c6ec:	fb0a 330b 	mla	r3, sl, fp, r3
 800c6f0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c6f4:	f8d9 7000 	ldr.w	r7, [r9]
 800c6f8:	4463      	add	r3, ip
 800c6fa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c6fe:	fb0a c70b 	mla	r7, sl, fp, ip
 800c702:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c706:	b29b      	uxth	r3, r3
 800c708:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c70c:	4572      	cmp	r2, lr
 800c70e:	f849 3b04 	str.w	r3, [r9], #4
 800c712:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c716:	d8e2      	bhi.n	800c6de <__multiply+0xb2>
 800c718:	9b01      	ldr	r3, [sp, #4]
 800c71a:	f845 c003 	str.w	ip, [r5, r3]
 800c71e:	9b03      	ldr	r3, [sp, #12]
 800c720:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c724:	3104      	adds	r1, #4
 800c726:	f1b9 0f00 	cmp.w	r9, #0
 800c72a:	d021      	beq.n	800c770 <__multiply+0x144>
 800c72c:	682b      	ldr	r3, [r5, #0]
 800c72e:	f104 0c14 	add.w	ip, r4, #20
 800c732:	46ae      	mov	lr, r5
 800c734:	f04f 0a00 	mov.w	sl, #0
 800c738:	f8bc b000 	ldrh.w	fp, [ip]
 800c73c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c740:	fb09 770b 	mla	r7, r9, fp, r7
 800c744:	4457      	add	r7, sl
 800c746:	b29b      	uxth	r3, r3
 800c748:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c74c:	f84e 3b04 	str.w	r3, [lr], #4
 800c750:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c754:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c758:	f8be 3000 	ldrh.w	r3, [lr]
 800c75c:	fb09 330a 	mla	r3, r9, sl, r3
 800c760:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c764:	4562      	cmp	r2, ip
 800c766:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c76a:	d8e5      	bhi.n	800c738 <__multiply+0x10c>
 800c76c:	9f01      	ldr	r7, [sp, #4]
 800c76e:	51eb      	str	r3, [r5, r7]
 800c770:	3504      	adds	r5, #4
 800c772:	e799      	b.n	800c6a8 <__multiply+0x7c>
 800c774:	3e01      	subs	r6, #1
 800c776:	e79b      	b.n	800c6b0 <__multiply+0x84>
 800c778:	0800ea30 	.word	0x0800ea30
 800c77c:	0800eab8 	.word	0x0800eab8

0800c780 <__pow5mult>:
 800c780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c784:	4615      	mov	r5, r2
 800c786:	f012 0203 	ands.w	r2, r2, #3
 800c78a:	4607      	mov	r7, r0
 800c78c:	460e      	mov	r6, r1
 800c78e:	d007      	beq.n	800c7a0 <__pow5mult+0x20>
 800c790:	4c25      	ldr	r4, [pc, #148]	@ (800c828 <__pow5mult+0xa8>)
 800c792:	3a01      	subs	r2, #1
 800c794:	2300      	movs	r3, #0
 800c796:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c79a:	f7ff fe55 	bl	800c448 <__multadd>
 800c79e:	4606      	mov	r6, r0
 800c7a0:	10ad      	asrs	r5, r5, #2
 800c7a2:	d03d      	beq.n	800c820 <__pow5mult+0xa0>
 800c7a4:	69fc      	ldr	r4, [r7, #28]
 800c7a6:	b97c      	cbnz	r4, 800c7c8 <__pow5mult+0x48>
 800c7a8:	2010      	movs	r0, #16
 800c7aa:	f7fe f9cd 	bl	800ab48 <malloc>
 800c7ae:	4602      	mov	r2, r0
 800c7b0:	61f8      	str	r0, [r7, #28]
 800c7b2:	b928      	cbnz	r0, 800c7c0 <__pow5mult+0x40>
 800c7b4:	4b1d      	ldr	r3, [pc, #116]	@ (800c82c <__pow5mult+0xac>)
 800c7b6:	481e      	ldr	r0, [pc, #120]	@ (800c830 <__pow5mult+0xb0>)
 800c7b8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c7bc:	f000 fb4e 	bl	800ce5c <__assert_func>
 800c7c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c7c4:	6004      	str	r4, [r0, #0]
 800c7c6:	60c4      	str	r4, [r0, #12]
 800c7c8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c7cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c7d0:	b94c      	cbnz	r4, 800c7e6 <__pow5mult+0x66>
 800c7d2:	f240 2171 	movw	r1, #625	@ 0x271
 800c7d6:	4638      	mov	r0, r7
 800c7d8:	f7ff ff12 	bl	800c600 <__i2b>
 800c7dc:	2300      	movs	r3, #0
 800c7de:	f8c8 0008 	str.w	r0, [r8, #8]
 800c7e2:	4604      	mov	r4, r0
 800c7e4:	6003      	str	r3, [r0, #0]
 800c7e6:	f04f 0900 	mov.w	r9, #0
 800c7ea:	07eb      	lsls	r3, r5, #31
 800c7ec:	d50a      	bpl.n	800c804 <__pow5mult+0x84>
 800c7ee:	4631      	mov	r1, r6
 800c7f0:	4622      	mov	r2, r4
 800c7f2:	4638      	mov	r0, r7
 800c7f4:	f7ff ff1a 	bl	800c62c <__multiply>
 800c7f8:	4631      	mov	r1, r6
 800c7fa:	4680      	mov	r8, r0
 800c7fc:	4638      	mov	r0, r7
 800c7fe:	f7ff fe01 	bl	800c404 <_Bfree>
 800c802:	4646      	mov	r6, r8
 800c804:	106d      	asrs	r5, r5, #1
 800c806:	d00b      	beq.n	800c820 <__pow5mult+0xa0>
 800c808:	6820      	ldr	r0, [r4, #0]
 800c80a:	b938      	cbnz	r0, 800c81c <__pow5mult+0x9c>
 800c80c:	4622      	mov	r2, r4
 800c80e:	4621      	mov	r1, r4
 800c810:	4638      	mov	r0, r7
 800c812:	f7ff ff0b 	bl	800c62c <__multiply>
 800c816:	6020      	str	r0, [r4, #0]
 800c818:	f8c0 9000 	str.w	r9, [r0]
 800c81c:	4604      	mov	r4, r0
 800c81e:	e7e4      	b.n	800c7ea <__pow5mult+0x6a>
 800c820:	4630      	mov	r0, r6
 800c822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c826:	bf00      	nop
 800c828:	0800eb14 	.word	0x0800eb14
 800c82c:	0800eaa1 	.word	0x0800eaa1
 800c830:	0800eab8 	.word	0x0800eab8

0800c834 <__lshift>:
 800c834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c838:	460c      	mov	r4, r1
 800c83a:	6849      	ldr	r1, [r1, #4]
 800c83c:	6923      	ldr	r3, [r4, #16]
 800c83e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c842:	68a3      	ldr	r3, [r4, #8]
 800c844:	4607      	mov	r7, r0
 800c846:	4691      	mov	r9, r2
 800c848:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c84c:	f108 0601 	add.w	r6, r8, #1
 800c850:	42b3      	cmp	r3, r6
 800c852:	db0b      	blt.n	800c86c <__lshift+0x38>
 800c854:	4638      	mov	r0, r7
 800c856:	f7ff fd95 	bl	800c384 <_Balloc>
 800c85a:	4605      	mov	r5, r0
 800c85c:	b948      	cbnz	r0, 800c872 <__lshift+0x3e>
 800c85e:	4602      	mov	r2, r0
 800c860:	4b28      	ldr	r3, [pc, #160]	@ (800c904 <__lshift+0xd0>)
 800c862:	4829      	ldr	r0, [pc, #164]	@ (800c908 <__lshift+0xd4>)
 800c864:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c868:	f000 faf8 	bl	800ce5c <__assert_func>
 800c86c:	3101      	adds	r1, #1
 800c86e:	005b      	lsls	r3, r3, #1
 800c870:	e7ee      	b.n	800c850 <__lshift+0x1c>
 800c872:	2300      	movs	r3, #0
 800c874:	f100 0114 	add.w	r1, r0, #20
 800c878:	f100 0210 	add.w	r2, r0, #16
 800c87c:	4618      	mov	r0, r3
 800c87e:	4553      	cmp	r3, sl
 800c880:	db33      	blt.n	800c8ea <__lshift+0xb6>
 800c882:	6920      	ldr	r0, [r4, #16]
 800c884:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c888:	f104 0314 	add.w	r3, r4, #20
 800c88c:	f019 091f 	ands.w	r9, r9, #31
 800c890:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c894:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c898:	d02b      	beq.n	800c8f2 <__lshift+0xbe>
 800c89a:	f1c9 0e20 	rsb	lr, r9, #32
 800c89e:	468a      	mov	sl, r1
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	6818      	ldr	r0, [r3, #0]
 800c8a4:	fa00 f009 	lsl.w	r0, r0, r9
 800c8a8:	4310      	orrs	r0, r2
 800c8aa:	f84a 0b04 	str.w	r0, [sl], #4
 800c8ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8b2:	459c      	cmp	ip, r3
 800c8b4:	fa22 f20e 	lsr.w	r2, r2, lr
 800c8b8:	d8f3      	bhi.n	800c8a2 <__lshift+0x6e>
 800c8ba:	ebac 0304 	sub.w	r3, ip, r4
 800c8be:	3b15      	subs	r3, #21
 800c8c0:	f023 0303 	bic.w	r3, r3, #3
 800c8c4:	3304      	adds	r3, #4
 800c8c6:	f104 0015 	add.w	r0, r4, #21
 800c8ca:	4584      	cmp	ip, r0
 800c8cc:	bf38      	it	cc
 800c8ce:	2304      	movcc	r3, #4
 800c8d0:	50ca      	str	r2, [r1, r3]
 800c8d2:	b10a      	cbz	r2, 800c8d8 <__lshift+0xa4>
 800c8d4:	f108 0602 	add.w	r6, r8, #2
 800c8d8:	3e01      	subs	r6, #1
 800c8da:	4638      	mov	r0, r7
 800c8dc:	612e      	str	r6, [r5, #16]
 800c8de:	4621      	mov	r1, r4
 800c8e0:	f7ff fd90 	bl	800c404 <_Bfree>
 800c8e4:	4628      	mov	r0, r5
 800c8e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8ea:	f842 0f04 	str.w	r0, [r2, #4]!
 800c8ee:	3301      	adds	r3, #1
 800c8f0:	e7c5      	b.n	800c87e <__lshift+0x4a>
 800c8f2:	3904      	subs	r1, #4
 800c8f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8f8:	f841 2f04 	str.w	r2, [r1, #4]!
 800c8fc:	459c      	cmp	ip, r3
 800c8fe:	d8f9      	bhi.n	800c8f4 <__lshift+0xc0>
 800c900:	e7ea      	b.n	800c8d8 <__lshift+0xa4>
 800c902:	bf00      	nop
 800c904:	0800ea30 	.word	0x0800ea30
 800c908:	0800eab8 	.word	0x0800eab8

0800c90c <__mcmp>:
 800c90c:	690a      	ldr	r2, [r1, #16]
 800c90e:	4603      	mov	r3, r0
 800c910:	6900      	ldr	r0, [r0, #16]
 800c912:	1a80      	subs	r0, r0, r2
 800c914:	b530      	push	{r4, r5, lr}
 800c916:	d10e      	bne.n	800c936 <__mcmp+0x2a>
 800c918:	3314      	adds	r3, #20
 800c91a:	3114      	adds	r1, #20
 800c91c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c920:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c924:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c928:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c92c:	4295      	cmp	r5, r2
 800c92e:	d003      	beq.n	800c938 <__mcmp+0x2c>
 800c930:	d205      	bcs.n	800c93e <__mcmp+0x32>
 800c932:	f04f 30ff 	mov.w	r0, #4294967295
 800c936:	bd30      	pop	{r4, r5, pc}
 800c938:	42a3      	cmp	r3, r4
 800c93a:	d3f3      	bcc.n	800c924 <__mcmp+0x18>
 800c93c:	e7fb      	b.n	800c936 <__mcmp+0x2a>
 800c93e:	2001      	movs	r0, #1
 800c940:	e7f9      	b.n	800c936 <__mcmp+0x2a>
	...

0800c944 <__mdiff>:
 800c944:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c948:	4689      	mov	r9, r1
 800c94a:	4606      	mov	r6, r0
 800c94c:	4611      	mov	r1, r2
 800c94e:	4648      	mov	r0, r9
 800c950:	4614      	mov	r4, r2
 800c952:	f7ff ffdb 	bl	800c90c <__mcmp>
 800c956:	1e05      	subs	r5, r0, #0
 800c958:	d112      	bne.n	800c980 <__mdiff+0x3c>
 800c95a:	4629      	mov	r1, r5
 800c95c:	4630      	mov	r0, r6
 800c95e:	f7ff fd11 	bl	800c384 <_Balloc>
 800c962:	4602      	mov	r2, r0
 800c964:	b928      	cbnz	r0, 800c972 <__mdiff+0x2e>
 800c966:	4b3f      	ldr	r3, [pc, #252]	@ (800ca64 <__mdiff+0x120>)
 800c968:	f240 2137 	movw	r1, #567	@ 0x237
 800c96c:	483e      	ldr	r0, [pc, #248]	@ (800ca68 <__mdiff+0x124>)
 800c96e:	f000 fa75 	bl	800ce5c <__assert_func>
 800c972:	2301      	movs	r3, #1
 800c974:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c978:	4610      	mov	r0, r2
 800c97a:	b003      	add	sp, #12
 800c97c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c980:	bfbc      	itt	lt
 800c982:	464b      	movlt	r3, r9
 800c984:	46a1      	movlt	r9, r4
 800c986:	4630      	mov	r0, r6
 800c988:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c98c:	bfba      	itte	lt
 800c98e:	461c      	movlt	r4, r3
 800c990:	2501      	movlt	r5, #1
 800c992:	2500      	movge	r5, #0
 800c994:	f7ff fcf6 	bl	800c384 <_Balloc>
 800c998:	4602      	mov	r2, r0
 800c99a:	b918      	cbnz	r0, 800c9a4 <__mdiff+0x60>
 800c99c:	4b31      	ldr	r3, [pc, #196]	@ (800ca64 <__mdiff+0x120>)
 800c99e:	f240 2145 	movw	r1, #581	@ 0x245
 800c9a2:	e7e3      	b.n	800c96c <__mdiff+0x28>
 800c9a4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c9a8:	6926      	ldr	r6, [r4, #16]
 800c9aa:	60c5      	str	r5, [r0, #12]
 800c9ac:	f109 0310 	add.w	r3, r9, #16
 800c9b0:	f109 0514 	add.w	r5, r9, #20
 800c9b4:	f104 0e14 	add.w	lr, r4, #20
 800c9b8:	f100 0b14 	add.w	fp, r0, #20
 800c9bc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c9c0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c9c4:	9301      	str	r3, [sp, #4]
 800c9c6:	46d9      	mov	r9, fp
 800c9c8:	f04f 0c00 	mov.w	ip, #0
 800c9cc:	9b01      	ldr	r3, [sp, #4]
 800c9ce:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c9d2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c9d6:	9301      	str	r3, [sp, #4]
 800c9d8:	fa1f f38a 	uxth.w	r3, sl
 800c9dc:	4619      	mov	r1, r3
 800c9de:	b283      	uxth	r3, r0
 800c9e0:	1acb      	subs	r3, r1, r3
 800c9e2:	0c00      	lsrs	r0, r0, #16
 800c9e4:	4463      	add	r3, ip
 800c9e6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c9ea:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c9ee:	b29b      	uxth	r3, r3
 800c9f0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c9f4:	4576      	cmp	r6, lr
 800c9f6:	f849 3b04 	str.w	r3, [r9], #4
 800c9fa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c9fe:	d8e5      	bhi.n	800c9cc <__mdiff+0x88>
 800ca00:	1b33      	subs	r3, r6, r4
 800ca02:	3b15      	subs	r3, #21
 800ca04:	f023 0303 	bic.w	r3, r3, #3
 800ca08:	3415      	adds	r4, #21
 800ca0a:	3304      	adds	r3, #4
 800ca0c:	42a6      	cmp	r6, r4
 800ca0e:	bf38      	it	cc
 800ca10:	2304      	movcc	r3, #4
 800ca12:	441d      	add	r5, r3
 800ca14:	445b      	add	r3, fp
 800ca16:	461e      	mov	r6, r3
 800ca18:	462c      	mov	r4, r5
 800ca1a:	4544      	cmp	r4, r8
 800ca1c:	d30e      	bcc.n	800ca3c <__mdiff+0xf8>
 800ca1e:	f108 0103 	add.w	r1, r8, #3
 800ca22:	1b49      	subs	r1, r1, r5
 800ca24:	f021 0103 	bic.w	r1, r1, #3
 800ca28:	3d03      	subs	r5, #3
 800ca2a:	45a8      	cmp	r8, r5
 800ca2c:	bf38      	it	cc
 800ca2e:	2100      	movcc	r1, #0
 800ca30:	440b      	add	r3, r1
 800ca32:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ca36:	b191      	cbz	r1, 800ca5e <__mdiff+0x11a>
 800ca38:	6117      	str	r7, [r2, #16]
 800ca3a:	e79d      	b.n	800c978 <__mdiff+0x34>
 800ca3c:	f854 1b04 	ldr.w	r1, [r4], #4
 800ca40:	46e6      	mov	lr, ip
 800ca42:	0c08      	lsrs	r0, r1, #16
 800ca44:	fa1c fc81 	uxtah	ip, ip, r1
 800ca48:	4471      	add	r1, lr
 800ca4a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ca4e:	b289      	uxth	r1, r1
 800ca50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ca54:	f846 1b04 	str.w	r1, [r6], #4
 800ca58:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ca5c:	e7dd      	b.n	800ca1a <__mdiff+0xd6>
 800ca5e:	3f01      	subs	r7, #1
 800ca60:	e7e7      	b.n	800ca32 <__mdiff+0xee>
 800ca62:	bf00      	nop
 800ca64:	0800ea30 	.word	0x0800ea30
 800ca68:	0800eab8 	.word	0x0800eab8

0800ca6c <__ulp>:
 800ca6c:	b082      	sub	sp, #8
 800ca6e:	ed8d 0b00 	vstr	d0, [sp]
 800ca72:	9a01      	ldr	r2, [sp, #4]
 800ca74:	4b0f      	ldr	r3, [pc, #60]	@ (800cab4 <__ulp+0x48>)
 800ca76:	4013      	ands	r3, r2
 800ca78:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	dc08      	bgt.n	800ca92 <__ulp+0x26>
 800ca80:	425b      	negs	r3, r3
 800ca82:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ca86:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ca8a:	da04      	bge.n	800ca96 <__ulp+0x2a>
 800ca8c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ca90:	4113      	asrs	r3, r2
 800ca92:	2200      	movs	r2, #0
 800ca94:	e008      	b.n	800caa8 <__ulp+0x3c>
 800ca96:	f1a2 0314 	sub.w	r3, r2, #20
 800ca9a:	2b1e      	cmp	r3, #30
 800ca9c:	bfda      	itte	le
 800ca9e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800caa2:	40da      	lsrle	r2, r3
 800caa4:	2201      	movgt	r2, #1
 800caa6:	2300      	movs	r3, #0
 800caa8:	4619      	mov	r1, r3
 800caaa:	4610      	mov	r0, r2
 800caac:	ec41 0b10 	vmov	d0, r0, r1
 800cab0:	b002      	add	sp, #8
 800cab2:	4770      	bx	lr
 800cab4:	7ff00000 	.word	0x7ff00000

0800cab8 <__b2d>:
 800cab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cabc:	6906      	ldr	r6, [r0, #16]
 800cabe:	f100 0814 	add.w	r8, r0, #20
 800cac2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800cac6:	1f37      	subs	r7, r6, #4
 800cac8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cacc:	4610      	mov	r0, r2
 800cace:	f7ff fd4b 	bl	800c568 <__hi0bits>
 800cad2:	f1c0 0320 	rsb	r3, r0, #32
 800cad6:	280a      	cmp	r0, #10
 800cad8:	600b      	str	r3, [r1, #0]
 800cada:	491b      	ldr	r1, [pc, #108]	@ (800cb48 <__b2d+0x90>)
 800cadc:	dc15      	bgt.n	800cb0a <__b2d+0x52>
 800cade:	f1c0 0c0b 	rsb	ip, r0, #11
 800cae2:	fa22 f30c 	lsr.w	r3, r2, ip
 800cae6:	45b8      	cmp	r8, r7
 800cae8:	ea43 0501 	orr.w	r5, r3, r1
 800caec:	bf34      	ite	cc
 800caee:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800caf2:	2300      	movcs	r3, #0
 800caf4:	3015      	adds	r0, #21
 800caf6:	fa02 f000 	lsl.w	r0, r2, r0
 800cafa:	fa23 f30c 	lsr.w	r3, r3, ip
 800cafe:	4303      	orrs	r3, r0
 800cb00:	461c      	mov	r4, r3
 800cb02:	ec45 4b10 	vmov	d0, r4, r5
 800cb06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb0a:	45b8      	cmp	r8, r7
 800cb0c:	bf3a      	itte	cc
 800cb0e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800cb12:	f1a6 0708 	subcc.w	r7, r6, #8
 800cb16:	2300      	movcs	r3, #0
 800cb18:	380b      	subs	r0, #11
 800cb1a:	d012      	beq.n	800cb42 <__b2d+0x8a>
 800cb1c:	f1c0 0120 	rsb	r1, r0, #32
 800cb20:	fa23 f401 	lsr.w	r4, r3, r1
 800cb24:	4082      	lsls	r2, r0
 800cb26:	4322      	orrs	r2, r4
 800cb28:	4547      	cmp	r7, r8
 800cb2a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800cb2e:	bf8c      	ite	hi
 800cb30:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800cb34:	2200      	movls	r2, #0
 800cb36:	4083      	lsls	r3, r0
 800cb38:	40ca      	lsrs	r2, r1
 800cb3a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800cb3e:	4313      	orrs	r3, r2
 800cb40:	e7de      	b.n	800cb00 <__b2d+0x48>
 800cb42:	ea42 0501 	orr.w	r5, r2, r1
 800cb46:	e7db      	b.n	800cb00 <__b2d+0x48>
 800cb48:	3ff00000 	.word	0x3ff00000

0800cb4c <__d2b>:
 800cb4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cb50:	460f      	mov	r7, r1
 800cb52:	2101      	movs	r1, #1
 800cb54:	ec59 8b10 	vmov	r8, r9, d0
 800cb58:	4616      	mov	r6, r2
 800cb5a:	f7ff fc13 	bl	800c384 <_Balloc>
 800cb5e:	4604      	mov	r4, r0
 800cb60:	b930      	cbnz	r0, 800cb70 <__d2b+0x24>
 800cb62:	4602      	mov	r2, r0
 800cb64:	4b23      	ldr	r3, [pc, #140]	@ (800cbf4 <__d2b+0xa8>)
 800cb66:	4824      	ldr	r0, [pc, #144]	@ (800cbf8 <__d2b+0xac>)
 800cb68:	f240 310f 	movw	r1, #783	@ 0x30f
 800cb6c:	f000 f976 	bl	800ce5c <__assert_func>
 800cb70:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cb74:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cb78:	b10d      	cbz	r5, 800cb7e <__d2b+0x32>
 800cb7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cb7e:	9301      	str	r3, [sp, #4]
 800cb80:	f1b8 0300 	subs.w	r3, r8, #0
 800cb84:	d023      	beq.n	800cbce <__d2b+0x82>
 800cb86:	4668      	mov	r0, sp
 800cb88:	9300      	str	r3, [sp, #0]
 800cb8a:	f7ff fd0c 	bl	800c5a6 <__lo0bits>
 800cb8e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cb92:	b1d0      	cbz	r0, 800cbca <__d2b+0x7e>
 800cb94:	f1c0 0320 	rsb	r3, r0, #32
 800cb98:	fa02 f303 	lsl.w	r3, r2, r3
 800cb9c:	430b      	orrs	r3, r1
 800cb9e:	40c2      	lsrs	r2, r0
 800cba0:	6163      	str	r3, [r4, #20]
 800cba2:	9201      	str	r2, [sp, #4]
 800cba4:	9b01      	ldr	r3, [sp, #4]
 800cba6:	61a3      	str	r3, [r4, #24]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	bf0c      	ite	eq
 800cbac:	2201      	moveq	r2, #1
 800cbae:	2202      	movne	r2, #2
 800cbb0:	6122      	str	r2, [r4, #16]
 800cbb2:	b1a5      	cbz	r5, 800cbde <__d2b+0x92>
 800cbb4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cbb8:	4405      	add	r5, r0
 800cbba:	603d      	str	r5, [r7, #0]
 800cbbc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cbc0:	6030      	str	r0, [r6, #0]
 800cbc2:	4620      	mov	r0, r4
 800cbc4:	b003      	add	sp, #12
 800cbc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cbca:	6161      	str	r1, [r4, #20]
 800cbcc:	e7ea      	b.n	800cba4 <__d2b+0x58>
 800cbce:	a801      	add	r0, sp, #4
 800cbd0:	f7ff fce9 	bl	800c5a6 <__lo0bits>
 800cbd4:	9b01      	ldr	r3, [sp, #4]
 800cbd6:	6163      	str	r3, [r4, #20]
 800cbd8:	3020      	adds	r0, #32
 800cbda:	2201      	movs	r2, #1
 800cbdc:	e7e8      	b.n	800cbb0 <__d2b+0x64>
 800cbde:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cbe2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cbe6:	6038      	str	r0, [r7, #0]
 800cbe8:	6918      	ldr	r0, [r3, #16]
 800cbea:	f7ff fcbd 	bl	800c568 <__hi0bits>
 800cbee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cbf2:	e7e5      	b.n	800cbc0 <__d2b+0x74>
 800cbf4:	0800ea30 	.word	0x0800ea30
 800cbf8:	0800eab8 	.word	0x0800eab8

0800cbfc <__ratio>:
 800cbfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc00:	b085      	sub	sp, #20
 800cc02:	e9cd 1000 	strd	r1, r0, [sp]
 800cc06:	a902      	add	r1, sp, #8
 800cc08:	f7ff ff56 	bl	800cab8 <__b2d>
 800cc0c:	9800      	ldr	r0, [sp, #0]
 800cc0e:	a903      	add	r1, sp, #12
 800cc10:	ec55 4b10 	vmov	r4, r5, d0
 800cc14:	f7ff ff50 	bl	800cab8 <__b2d>
 800cc18:	9b01      	ldr	r3, [sp, #4]
 800cc1a:	6919      	ldr	r1, [r3, #16]
 800cc1c:	9b00      	ldr	r3, [sp, #0]
 800cc1e:	691b      	ldr	r3, [r3, #16]
 800cc20:	1ac9      	subs	r1, r1, r3
 800cc22:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800cc26:	1a9b      	subs	r3, r3, r2
 800cc28:	ec5b ab10 	vmov	sl, fp, d0
 800cc2c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	bfce      	itee	gt
 800cc34:	462a      	movgt	r2, r5
 800cc36:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cc3a:	465a      	movle	r2, fp
 800cc3c:	462f      	mov	r7, r5
 800cc3e:	46d9      	mov	r9, fp
 800cc40:	bfcc      	ite	gt
 800cc42:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cc46:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800cc4a:	464b      	mov	r3, r9
 800cc4c:	4652      	mov	r2, sl
 800cc4e:	4620      	mov	r0, r4
 800cc50:	4639      	mov	r1, r7
 800cc52:	f7f3 fe13 	bl	800087c <__aeabi_ddiv>
 800cc56:	ec41 0b10 	vmov	d0, r0, r1
 800cc5a:	b005      	add	sp, #20
 800cc5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cc60 <__copybits>:
 800cc60:	3901      	subs	r1, #1
 800cc62:	b570      	push	{r4, r5, r6, lr}
 800cc64:	1149      	asrs	r1, r1, #5
 800cc66:	6914      	ldr	r4, [r2, #16]
 800cc68:	3101      	adds	r1, #1
 800cc6a:	f102 0314 	add.w	r3, r2, #20
 800cc6e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cc72:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cc76:	1f05      	subs	r5, r0, #4
 800cc78:	42a3      	cmp	r3, r4
 800cc7a:	d30c      	bcc.n	800cc96 <__copybits+0x36>
 800cc7c:	1aa3      	subs	r3, r4, r2
 800cc7e:	3b11      	subs	r3, #17
 800cc80:	f023 0303 	bic.w	r3, r3, #3
 800cc84:	3211      	adds	r2, #17
 800cc86:	42a2      	cmp	r2, r4
 800cc88:	bf88      	it	hi
 800cc8a:	2300      	movhi	r3, #0
 800cc8c:	4418      	add	r0, r3
 800cc8e:	2300      	movs	r3, #0
 800cc90:	4288      	cmp	r0, r1
 800cc92:	d305      	bcc.n	800cca0 <__copybits+0x40>
 800cc94:	bd70      	pop	{r4, r5, r6, pc}
 800cc96:	f853 6b04 	ldr.w	r6, [r3], #4
 800cc9a:	f845 6f04 	str.w	r6, [r5, #4]!
 800cc9e:	e7eb      	b.n	800cc78 <__copybits+0x18>
 800cca0:	f840 3b04 	str.w	r3, [r0], #4
 800cca4:	e7f4      	b.n	800cc90 <__copybits+0x30>

0800cca6 <__any_on>:
 800cca6:	f100 0214 	add.w	r2, r0, #20
 800ccaa:	6900      	ldr	r0, [r0, #16]
 800ccac:	114b      	asrs	r3, r1, #5
 800ccae:	4298      	cmp	r0, r3
 800ccb0:	b510      	push	{r4, lr}
 800ccb2:	db11      	blt.n	800ccd8 <__any_on+0x32>
 800ccb4:	dd0a      	ble.n	800cccc <__any_on+0x26>
 800ccb6:	f011 011f 	ands.w	r1, r1, #31
 800ccba:	d007      	beq.n	800cccc <__any_on+0x26>
 800ccbc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ccc0:	fa24 f001 	lsr.w	r0, r4, r1
 800ccc4:	fa00 f101 	lsl.w	r1, r0, r1
 800ccc8:	428c      	cmp	r4, r1
 800ccca:	d10b      	bne.n	800cce4 <__any_on+0x3e>
 800cccc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ccd0:	4293      	cmp	r3, r2
 800ccd2:	d803      	bhi.n	800ccdc <__any_on+0x36>
 800ccd4:	2000      	movs	r0, #0
 800ccd6:	bd10      	pop	{r4, pc}
 800ccd8:	4603      	mov	r3, r0
 800ccda:	e7f7      	b.n	800cccc <__any_on+0x26>
 800ccdc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cce0:	2900      	cmp	r1, #0
 800cce2:	d0f5      	beq.n	800ccd0 <__any_on+0x2a>
 800cce4:	2001      	movs	r0, #1
 800cce6:	e7f6      	b.n	800ccd6 <__any_on+0x30>

0800cce8 <__ascii_wctomb>:
 800cce8:	4603      	mov	r3, r0
 800ccea:	4608      	mov	r0, r1
 800ccec:	b141      	cbz	r1, 800cd00 <__ascii_wctomb+0x18>
 800ccee:	2aff      	cmp	r2, #255	@ 0xff
 800ccf0:	d904      	bls.n	800ccfc <__ascii_wctomb+0x14>
 800ccf2:	228a      	movs	r2, #138	@ 0x8a
 800ccf4:	601a      	str	r2, [r3, #0]
 800ccf6:	f04f 30ff 	mov.w	r0, #4294967295
 800ccfa:	4770      	bx	lr
 800ccfc:	700a      	strb	r2, [r1, #0]
 800ccfe:	2001      	movs	r0, #1
 800cd00:	4770      	bx	lr
	...

0800cd04 <__sflush_r>:
 800cd04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cd08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd0c:	0716      	lsls	r6, r2, #28
 800cd0e:	4605      	mov	r5, r0
 800cd10:	460c      	mov	r4, r1
 800cd12:	d454      	bmi.n	800cdbe <__sflush_r+0xba>
 800cd14:	684b      	ldr	r3, [r1, #4]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	dc02      	bgt.n	800cd20 <__sflush_r+0x1c>
 800cd1a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	dd48      	ble.n	800cdb2 <__sflush_r+0xae>
 800cd20:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cd22:	2e00      	cmp	r6, #0
 800cd24:	d045      	beq.n	800cdb2 <__sflush_r+0xae>
 800cd26:	2300      	movs	r3, #0
 800cd28:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cd2c:	682f      	ldr	r7, [r5, #0]
 800cd2e:	6a21      	ldr	r1, [r4, #32]
 800cd30:	602b      	str	r3, [r5, #0]
 800cd32:	d030      	beq.n	800cd96 <__sflush_r+0x92>
 800cd34:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cd36:	89a3      	ldrh	r3, [r4, #12]
 800cd38:	0759      	lsls	r1, r3, #29
 800cd3a:	d505      	bpl.n	800cd48 <__sflush_r+0x44>
 800cd3c:	6863      	ldr	r3, [r4, #4]
 800cd3e:	1ad2      	subs	r2, r2, r3
 800cd40:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cd42:	b10b      	cbz	r3, 800cd48 <__sflush_r+0x44>
 800cd44:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cd46:	1ad2      	subs	r2, r2, r3
 800cd48:	2300      	movs	r3, #0
 800cd4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cd4c:	6a21      	ldr	r1, [r4, #32]
 800cd4e:	4628      	mov	r0, r5
 800cd50:	47b0      	blx	r6
 800cd52:	1c43      	adds	r3, r0, #1
 800cd54:	89a3      	ldrh	r3, [r4, #12]
 800cd56:	d106      	bne.n	800cd66 <__sflush_r+0x62>
 800cd58:	6829      	ldr	r1, [r5, #0]
 800cd5a:	291d      	cmp	r1, #29
 800cd5c:	d82b      	bhi.n	800cdb6 <__sflush_r+0xb2>
 800cd5e:	4a2a      	ldr	r2, [pc, #168]	@ (800ce08 <__sflush_r+0x104>)
 800cd60:	410a      	asrs	r2, r1
 800cd62:	07d6      	lsls	r6, r2, #31
 800cd64:	d427      	bmi.n	800cdb6 <__sflush_r+0xb2>
 800cd66:	2200      	movs	r2, #0
 800cd68:	6062      	str	r2, [r4, #4]
 800cd6a:	04d9      	lsls	r1, r3, #19
 800cd6c:	6922      	ldr	r2, [r4, #16]
 800cd6e:	6022      	str	r2, [r4, #0]
 800cd70:	d504      	bpl.n	800cd7c <__sflush_r+0x78>
 800cd72:	1c42      	adds	r2, r0, #1
 800cd74:	d101      	bne.n	800cd7a <__sflush_r+0x76>
 800cd76:	682b      	ldr	r3, [r5, #0]
 800cd78:	b903      	cbnz	r3, 800cd7c <__sflush_r+0x78>
 800cd7a:	6560      	str	r0, [r4, #84]	@ 0x54
 800cd7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cd7e:	602f      	str	r7, [r5, #0]
 800cd80:	b1b9      	cbz	r1, 800cdb2 <__sflush_r+0xae>
 800cd82:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cd86:	4299      	cmp	r1, r3
 800cd88:	d002      	beq.n	800cd90 <__sflush_r+0x8c>
 800cd8a:	4628      	mov	r0, r5
 800cd8c:	f7fe ff64 	bl	800bc58 <_free_r>
 800cd90:	2300      	movs	r3, #0
 800cd92:	6363      	str	r3, [r4, #52]	@ 0x34
 800cd94:	e00d      	b.n	800cdb2 <__sflush_r+0xae>
 800cd96:	2301      	movs	r3, #1
 800cd98:	4628      	mov	r0, r5
 800cd9a:	47b0      	blx	r6
 800cd9c:	4602      	mov	r2, r0
 800cd9e:	1c50      	adds	r0, r2, #1
 800cda0:	d1c9      	bne.n	800cd36 <__sflush_r+0x32>
 800cda2:	682b      	ldr	r3, [r5, #0]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d0c6      	beq.n	800cd36 <__sflush_r+0x32>
 800cda8:	2b1d      	cmp	r3, #29
 800cdaa:	d001      	beq.n	800cdb0 <__sflush_r+0xac>
 800cdac:	2b16      	cmp	r3, #22
 800cdae:	d11e      	bne.n	800cdee <__sflush_r+0xea>
 800cdb0:	602f      	str	r7, [r5, #0]
 800cdb2:	2000      	movs	r0, #0
 800cdb4:	e022      	b.n	800cdfc <__sflush_r+0xf8>
 800cdb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cdba:	b21b      	sxth	r3, r3
 800cdbc:	e01b      	b.n	800cdf6 <__sflush_r+0xf2>
 800cdbe:	690f      	ldr	r7, [r1, #16]
 800cdc0:	2f00      	cmp	r7, #0
 800cdc2:	d0f6      	beq.n	800cdb2 <__sflush_r+0xae>
 800cdc4:	0793      	lsls	r3, r2, #30
 800cdc6:	680e      	ldr	r6, [r1, #0]
 800cdc8:	bf08      	it	eq
 800cdca:	694b      	ldreq	r3, [r1, #20]
 800cdcc:	600f      	str	r7, [r1, #0]
 800cdce:	bf18      	it	ne
 800cdd0:	2300      	movne	r3, #0
 800cdd2:	eba6 0807 	sub.w	r8, r6, r7
 800cdd6:	608b      	str	r3, [r1, #8]
 800cdd8:	f1b8 0f00 	cmp.w	r8, #0
 800cddc:	dde9      	ble.n	800cdb2 <__sflush_r+0xae>
 800cdde:	6a21      	ldr	r1, [r4, #32]
 800cde0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cde2:	4643      	mov	r3, r8
 800cde4:	463a      	mov	r2, r7
 800cde6:	4628      	mov	r0, r5
 800cde8:	47b0      	blx	r6
 800cdea:	2800      	cmp	r0, #0
 800cdec:	dc08      	bgt.n	800ce00 <__sflush_r+0xfc>
 800cdee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cdf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cdf6:	81a3      	strh	r3, [r4, #12]
 800cdf8:	f04f 30ff 	mov.w	r0, #4294967295
 800cdfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce00:	4407      	add	r7, r0
 800ce02:	eba8 0800 	sub.w	r8, r8, r0
 800ce06:	e7e7      	b.n	800cdd8 <__sflush_r+0xd4>
 800ce08:	dfbffffe 	.word	0xdfbffffe

0800ce0c <_fflush_r>:
 800ce0c:	b538      	push	{r3, r4, r5, lr}
 800ce0e:	690b      	ldr	r3, [r1, #16]
 800ce10:	4605      	mov	r5, r0
 800ce12:	460c      	mov	r4, r1
 800ce14:	b913      	cbnz	r3, 800ce1c <_fflush_r+0x10>
 800ce16:	2500      	movs	r5, #0
 800ce18:	4628      	mov	r0, r5
 800ce1a:	bd38      	pop	{r3, r4, r5, pc}
 800ce1c:	b118      	cbz	r0, 800ce26 <_fflush_r+0x1a>
 800ce1e:	6a03      	ldr	r3, [r0, #32]
 800ce20:	b90b      	cbnz	r3, 800ce26 <_fflush_r+0x1a>
 800ce22:	f7fe fde9 	bl	800b9f8 <__sinit>
 800ce26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d0f3      	beq.n	800ce16 <_fflush_r+0xa>
 800ce2e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ce30:	07d0      	lsls	r0, r2, #31
 800ce32:	d404      	bmi.n	800ce3e <_fflush_r+0x32>
 800ce34:	0599      	lsls	r1, r3, #22
 800ce36:	d402      	bmi.n	800ce3e <_fflush_r+0x32>
 800ce38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ce3a:	f7fe fef2 	bl	800bc22 <__retarget_lock_acquire_recursive>
 800ce3e:	4628      	mov	r0, r5
 800ce40:	4621      	mov	r1, r4
 800ce42:	f7ff ff5f 	bl	800cd04 <__sflush_r>
 800ce46:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ce48:	07da      	lsls	r2, r3, #31
 800ce4a:	4605      	mov	r5, r0
 800ce4c:	d4e4      	bmi.n	800ce18 <_fflush_r+0xc>
 800ce4e:	89a3      	ldrh	r3, [r4, #12]
 800ce50:	059b      	lsls	r3, r3, #22
 800ce52:	d4e1      	bmi.n	800ce18 <_fflush_r+0xc>
 800ce54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ce56:	f7fe fee5 	bl	800bc24 <__retarget_lock_release_recursive>
 800ce5a:	e7dd      	b.n	800ce18 <_fflush_r+0xc>

0800ce5c <__assert_func>:
 800ce5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ce5e:	4614      	mov	r4, r2
 800ce60:	461a      	mov	r2, r3
 800ce62:	4b09      	ldr	r3, [pc, #36]	@ (800ce88 <__assert_func+0x2c>)
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	4605      	mov	r5, r0
 800ce68:	68d8      	ldr	r0, [r3, #12]
 800ce6a:	b954      	cbnz	r4, 800ce82 <__assert_func+0x26>
 800ce6c:	4b07      	ldr	r3, [pc, #28]	@ (800ce8c <__assert_func+0x30>)
 800ce6e:	461c      	mov	r4, r3
 800ce70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ce74:	9100      	str	r1, [sp, #0]
 800ce76:	462b      	mov	r3, r5
 800ce78:	4905      	ldr	r1, [pc, #20]	@ (800ce90 <__assert_func+0x34>)
 800ce7a:	f000 f821 	bl	800cec0 <fiprintf>
 800ce7e:	f000 f831 	bl	800cee4 <abort>
 800ce82:	4b04      	ldr	r3, [pc, #16]	@ (800ce94 <__assert_func+0x38>)
 800ce84:	e7f4      	b.n	800ce70 <__assert_func+0x14>
 800ce86:	bf00      	nop
 800ce88:	200001dc 	.word	0x200001dc
 800ce8c:	0800ed4c 	.word	0x0800ed4c
 800ce90:	0800ed1e 	.word	0x0800ed1e
 800ce94:	0800ed11 	.word	0x0800ed11

0800ce98 <_calloc_r>:
 800ce98:	b570      	push	{r4, r5, r6, lr}
 800ce9a:	fba1 5402 	umull	r5, r4, r1, r2
 800ce9e:	b93c      	cbnz	r4, 800ceb0 <_calloc_r+0x18>
 800cea0:	4629      	mov	r1, r5
 800cea2:	f7fd fe83 	bl	800abac <_malloc_r>
 800cea6:	4606      	mov	r6, r0
 800cea8:	b928      	cbnz	r0, 800ceb6 <_calloc_r+0x1e>
 800ceaa:	2600      	movs	r6, #0
 800ceac:	4630      	mov	r0, r6
 800ceae:	bd70      	pop	{r4, r5, r6, pc}
 800ceb0:	220c      	movs	r2, #12
 800ceb2:	6002      	str	r2, [r0, #0]
 800ceb4:	e7f9      	b.n	800ceaa <_calloc_r+0x12>
 800ceb6:	462a      	mov	r2, r5
 800ceb8:	4621      	mov	r1, r4
 800ceba:	f7fe fe16 	bl	800baea <memset>
 800cebe:	e7f5      	b.n	800ceac <_calloc_r+0x14>

0800cec0 <fiprintf>:
 800cec0:	b40e      	push	{r1, r2, r3}
 800cec2:	b503      	push	{r0, r1, lr}
 800cec4:	4601      	mov	r1, r0
 800cec6:	ab03      	add	r3, sp, #12
 800cec8:	4805      	ldr	r0, [pc, #20]	@ (800cee0 <fiprintf+0x20>)
 800ceca:	f853 2b04 	ldr.w	r2, [r3], #4
 800cece:	6800      	ldr	r0, [r0, #0]
 800ced0:	9301      	str	r3, [sp, #4]
 800ced2:	f000 f837 	bl	800cf44 <_vfiprintf_r>
 800ced6:	b002      	add	sp, #8
 800ced8:	f85d eb04 	ldr.w	lr, [sp], #4
 800cedc:	b003      	add	sp, #12
 800cede:	4770      	bx	lr
 800cee0:	200001dc 	.word	0x200001dc

0800cee4 <abort>:
 800cee4:	b508      	push	{r3, lr}
 800cee6:	2006      	movs	r0, #6
 800cee8:	f000 fb8e 	bl	800d608 <raise>
 800ceec:	2001      	movs	r0, #1
 800ceee:	f7f8 fcbd 	bl	800586c <_exit>

0800cef2 <__sfputc_r>:
 800cef2:	6893      	ldr	r3, [r2, #8]
 800cef4:	3b01      	subs	r3, #1
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	b410      	push	{r4}
 800cefa:	6093      	str	r3, [r2, #8]
 800cefc:	da08      	bge.n	800cf10 <__sfputc_r+0x1e>
 800cefe:	6994      	ldr	r4, [r2, #24]
 800cf00:	42a3      	cmp	r3, r4
 800cf02:	db01      	blt.n	800cf08 <__sfputc_r+0x16>
 800cf04:	290a      	cmp	r1, #10
 800cf06:	d103      	bne.n	800cf10 <__sfputc_r+0x1e>
 800cf08:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf0c:	f000 bac0 	b.w	800d490 <__swbuf_r>
 800cf10:	6813      	ldr	r3, [r2, #0]
 800cf12:	1c58      	adds	r0, r3, #1
 800cf14:	6010      	str	r0, [r2, #0]
 800cf16:	7019      	strb	r1, [r3, #0]
 800cf18:	4608      	mov	r0, r1
 800cf1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf1e:	4770      	bx	lr

0800cf20 <__sfputs_r>:
 800cf20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf22:	4606      	mov	r6, r0
 800cf24:	460f      	mov	r7, r1
 800cf26:	4614      	mov	r4, r2
 800cf28:	18d5      	adds	r5, r2, r3
 800cf2a:	42ac      	cmp	r4, r5
 800cf2c:	d101      	bne.n	800cf32 <__sfputs_r+0x12>
 800cf2e:	2000      	movs	r0, #0
 800cf30:	e007      	b.n	800cf42 <__sfputs_r+0x22>
 800cf32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf36:	463a      	mov	r2, r7
 800cf38:	4630      	mov	r0, r6
 800cf3a:	f7ff ffda 	bl	800cef2 <__sfputc_r>
 800cf3e:	1c43      	adds	r3, r0, #1
 800cf40:	d1f3      	bne.n	800cf2a <__sfputs_r+0xa>
 800cf42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cf44 <_vfiprintf_r>:
 800cf44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf48:	460d      	mov	r5, r1
 800cf4a:	b09d      	sub	sp, #116	@ 0x74
 800cf4c:	4614      	mov	r4, r2
 800cf4e:	4698      	mov	r8, r3
 800cf50:	4606      	mov	r6, r0
 800cf52:	b118      	cbz	r0, 800cf5c <_vfiprintf_r+0x18>
 800cf54:	6a03      	ldr	r3, [r0, #32]
 800cf56:	b90b      	cbnz	r3, 800cf5c <_vfiprintf_r+0x18>
 800cf58:	f7fe fd4e 	bl	800b9f8 <__sinit>
 800cf5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cf5e:	07d9      	lsls	r1, r3, #31
 800cf60:	d405      	bmi.n	800cf6e <_vfiprintf_r+0x2a>
 800cf62:	89ab      	ldrh	r3, [r5, #12]
 800cf64:	059a      	lsls	r2, r3, #22
 800cf66:	d402      	bmi.n	800cf6e <_vfiprintf_r+0x2a>
 800cf68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cf6a:	f7fe fe5a 	bl	800bc22 <__retarget_lock_acquire_recursive>
 800cf6e:	89ab      	ldrh	r3, [r5, #12]
 800cf70:	071b      	lsls	r3, r3, #28
 800cf72:	d501      	bpl.n	800cf78 <_vfiprintf_r+0x34>
 800cf74:	692b      	ldr	r3, [r5, #16]
 800cf76:	b99b      	cbnz	r3, 800cfa0 <_vfiprintf_r+0x5c>
 800cf78:	4629      	mov	r1, r5
 800cf7a:	4630      	mov	r0, r6
 800cf7c:	f000 fac6 	bl	800d50c <__swsetup_r>
 800cf80:	b170      	cbz	r0, 800cfa0 <_vfiprintf_r+0x5c>
 800cf82:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cf84:	07dc      	lsls	r4, r3, #31
 800cf86:	d504      	bpl.n	800cf92 <_vfiprintf_r+0x4e>
 800cf88:	f04f 30ff 	mov.w	r0, #4294967295
 800cf8c:	b01d      	add	sp, #116	@ 0x74
 800cf8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf92:	89ab      	ldrh	r3, [r5, #12]
 800cf94:	0598      	lsls	r0, r3, #22
 800cf96:	d4f7      	bmi.n	800cf88 <_vfiprintf_r+0x44>
 800cf98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cf9a:	f7fe fe43 	bl	800bc24 <__retarget_lock_release_recursive>
 800cf9e:	e7f3      	b.n	800cf88 <_vfiprintf_r+0x44>
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	9309      	str	r3, [sp, #36]	@ 0x24
 800cfa4:	2320      	movs	r3, #32
 800cfa6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cfaa:	f8cd 800c 	str.w	r8, [sp, #12]
 800cfae:	2330      	movs	r3, #48	@ 0x30
 800cfb0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d160 <_vfiprintf_r+0x21c>
 800cfb4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cfb8:	f04f 0901 	mov.w	r9, #1
 800cfbc:	4623      	mov	r3, r4
 800cfbe:	469a      	mov	sl, r3
 800cfc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cfc4:	b10a      	cbz	r2, 800cfca <_vfiprintf_r+0x86>
 800cfc6:	2a25      	cmp	r2, #37	@ 0x25
 800cfc8:	d1f9      	bne.n	800cfbe <_vfiprintf_r+0x7a>
 800cfca:	ebba 0b04 	subs.w	fp, sl, r4
 800cfce:	d00b      	beq.n	800cfe8 <_vfiprintf_r+0xa4>
 800cfd0:	465b      	mov	r3, fp
 800cfd2:	4622      	mov	r2, r4
 800cfd4:	4629      	mov	r1, r5
 800cfd6:	4630      	mov	r0, r6
 800cfd8:	f7ff ffa2 	bl	800cf20 <__sfputs_r>
 800cfdc:	3001      	adds	r0, #1
 800cfde:	f000 80a7 	beq.w	800d130 <_vfiprintf_r+0x1ec>
 800cfe2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cfe4:	445a      	add	r2, fp
 800cfe6:	9209      	str	r2, [sp, #36]	@ 0x24
 800cfe8:	f89a 3000 	ldrb.w	r3, [sl]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	f000 809f 	beq.w	800d130 <_vfiprintf_r+0x1ec>
 800cff2:	2300      	movs	r3, #0
 800cff4:	f04f 32ff 	mov.w	r2, #4294967295
 800cff8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cffc:	f10a 0a01 	add.w	sl, sl, #1
 800d000:	9304      	str	r3, [sp, #16]
 800d002:	9307      	str	r3, [sp, #28]
 800d004:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d008:	931a      	str	r3, [sp, #104]	@ 0x68
 800d00a:	4654      	mov	r4, sl
 800d00c:	2205      	movs	r2, #5
 800d00e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d012:	4853      	ldr	r0, [pc, #332]	@ (800d160 <_vfiprintf_r+0x21c>)
 800d014:	f7f3 f8fc 	bl	8000210 <memchr>
 800d018:	9a04      	ldr	r2, [sp, #16]
 800d01a:	b9d8      	cbnz	r0, 800d054 <_vfiprintf_r+0x110>
 800d01c:	06d1      	lsls	r1, r2, #27
 800d01e:	bf44      	itt	mi
 800d020:	2320      	movmi	r3, #32
 800d022:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d026:	0713      	lsls	r3, r2, #28
 800d028:	bf44      	itt	mi
 800d02a:	232b      	movmi	r3, #43	@ 0x2b
 800d02c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d030:	f89a 3000 	ldrb.w	r3, [sl]
 800d034:	2b2a      	cmp	r3, #42	@ 0x2a
 800d036:	d015      	beq.n	800d064 <_vfiprintf_r+0x120>
 800d038:	9a07      	ldr	r2, [sp, #28]
 800d03a:	4654      	mov	r4, sl
 800d03c:	2000      	movs	r0, #0
 800d03e:	f04f 0c0a 	mov.w	ip, #10
 800d042:	4621      	mov	r1, r4
 800d044:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d048:	3b30      	subs	r3, #48	@ 0x30
 800d04a:	2b09      	cmp	r3, #9
 800d04c:	d94b      	bls.n	800d0e6 <_vfiprintf_r+0x1a2>
 800d04e:	b1b0      	cbz	r0, 800d07e <_vfiprintf_r+0x13a>
 800d050:	9207      	str	r2, [sp, #28]
 800d052:	e014      	b.n	800d07e <_vfiprintf_r+0x13a>
 800d054:	eba0 0308 	sub.w	r3, r0, r8
 800d058:	fa09 f303 	lsl.w	r3, r9, r3
 800d05c:	4313      	orrs	r3, r2
 800d05e:	9304      	str	r3, [sp, #16]
 800d060:	46a2      	mov	sl, r4
 800d062:	e7d2      	b.n	800d00a <_vfiprintf_r+0xc6>
 800d064:	9b03      	ldr	r3, [sp, #12]
 800d066:	1d19      	adds	r1, r3, #4
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	9103      	str	r1, [sp, #12]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	bfbb      	ittet	lt
 800d070:	425b      	neglt	r3, r3
 800d072:	f042 0202 	orrlt.w	r2, r2, #2
 800d076:	9307      	strge	r3, [sp, #28]
 800d078:	9307      	strlt	r3, [sp, #28]
 800d07a:	bfb8      	it	lt
 800d07c:	9204      	strlt	r2, [sp, #16]
 800d07e:	7823      	ldrb	r3, [r4, #0]
 800d080:	2b2e      	cmp	r3, #46	@ 0x2e
 800d082:	d10a      	bne.n	800d09a <_vfiprintf_r+0x156>
 800d084:	7863      	ldrb	r3, [r4, #1]
 800d086:	2b2a      	cmp	r3, #42	@ 0x2a
 800d088:	d132      	bne.n	800d0f0 <_vfiprintf_r+0x1ac>
 800d08a:	9b03      	ldr	r3, [sp, #12]
 800d08c:	1d1a      	adds	r2, r3, #4
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	9203      	str	r2, [sp, #12]
 800d092:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d096:	3402      	adds	r4, #2
 800d098:	9305      	str	r3, [sp, #20]
 800d09a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d170 <_vfiprintf_r+0x22c>
 800d09e:	7821      	ldrb	r1, [r4, #0]
 800d0a0:	2203      	movs	r2, #3
 800d0a2:	4650      	mov	r0, sl
 800d0a4:	f7f3 f8b4 	bl	8000210 <memchr>
 800d0a8:	b138      	cbz	r0, 800d0ba <_vfiprintf_r+0x176>
 800d0aa:	9b04      	ldr	r3, [sp, #16]
 800d0ac:	eba0 000a 	sub.w	r0, r0, sl
 800d0b0:	2240      	movs	r2, #64	@ 0x40
 800d0b2:	4082      	lsls	r2, r0
 800d0b4:	4313      	orrs	r3, r2
 800d0b6:	3401      	adds	r4, #1
 800d0b8:	9304      	str	r3, [sp, #16]
 800d0ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0be:	4829      	ldr	r0, [pc, #164]	@ (800d164 <_vfiprintf_r+0x220>)
 800d0c0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d0c4:	2206      	movs	r2, #6
 800d0c6:	f7f3 f8a3 	bl	8000210 <memchr>
 800d0ca:	2800      	cmp	r0, #0
 800d0cc:	d03f      	beq.n	800d14e <_vfiprintf_r+0x20a>
 800d0ce:	4b26      	ldr	r3, [pc, #152]	@ (800d168 <_vfiprintf_r+0x224>)
 800d0d0:	bb1b      	cbnz	r3, 800d11a <_vfiprintf_r+0x1d6>
 800d0d2:	9b03      	ldr	r3, [sp, #12]
 800d0d4:	3307      	adds	r3, #7
 800d0d6:	f023 0307 	bic.w	r3, r3, #7
 800d0da:	3308      	adds	r3, #8
 800d0dc:	9303      	str	r3, [sp, #12]
 800d0de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0e0:	443b      	add	r3, r7
 800d0e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d0e4:	e76a      	b.n	800cfbc <_vfiprintf_r+0x78>
 800d0e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800d0ea:	460c      	mov	r4, r1
 800d0ec:	2001      	movs	r0, #1
 800d0ee:	e7a8      	b.n	800d042 <_vfiprintf_r+0xfe>
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	3401      	adds	r4, #1
 800d0f4:	9305      	str	r3, [sp, #20]
 800d0f6:	4619      	mov	r1, r3
 800d0f8:	f04f 0c0a 	mov.w	ip, #10
 800d0fc:	4620      	mov	r0, r4
 800d0fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d102:	3a30      	subs	r2, #48	@ 0x30
 800d104:	2a09      	cmp	r2, #9
 800d106:	d903      	bls.n	800d110 <_vfiprintf_r+0x1cc>
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d0c6      	beq.n	800d09a <_vfiprintf_r+0x156>
 800d10c:	9105      	str	r1, [sp, #20]
 800d10e:	e7c4      	b.n	800d09a <_vfiprintf_r+0x156>
 800d110:	fb0c 2101 	mla	r1, ip, r1, r2
 800d114:	4604      	mov	r4, r0
 800d116:	2301      	movs	r3, #1
 800d118:	e7f0      	b.n	800d0fc <_vfiprintf_r+0x1b8>
 800d11a:	ab03      	add	r3, sp, #12
 800d11c:	9300      	str	r3, [sp, #0]
 800d11e:	462a      	mov	r2, r5
 800d120:	4b12      	ldr	r3, [pc, #72]	@ (800d16c <_vfiprintf_r+0x228>)
 800d122:	a904      	add	r1, sp, #16
 800d124:	4630      	mov	r0, r6
 800d126:	f3af 8000 	nop.w
 800d12a:	4607      	mov	r7, r0
 800d12c:	1c78      	adds	r0, r7, #1
 800d12e:	d1d6      	bne.n	800d0de <_vfiprintf_r+0x19a>
 800d130:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d132:	07d9      	lsls	r1, r3, #31
 800d134:	d405      	bmi.n	800d142 <_vfiprintf_r+0x1fe>
 800d136:	89ab      	ldrh	r3, [r5, #12]
 800d138:	059a      	lsls	r2, r3, #22
 800d13a:	d402      	bmi.n	800d142 <_vfiprintf_r+0x1fe>
 800d13c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d13e:	f7fe fd71 	bl	800bc24 <__retarget_lock_release_recursive>
 800d142:	89ab      	ldrh	r3, [r5, #12]
 800d144:	065b      	lsls	r3, r3, #25
 800d146:	f53f af1f 	bmi.w	800cf88 <_vfiprintf_r+0x44>
 800d14a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d14c:	e71e      	b.n	800cf8c <_vfiprintf_r+0x48>
 800d14e:	ab03      	add	r3, sp, #12
 800d150:	9300      	str	r3, [sp, #0]
 800d152:	462a      	mov	r2, r5
 800d154:	4b05      	ldr	r3, [pc, #20]	@ (800d16c <_vfiprintf_r+0x228>)
 800d156:	a904      	add	r1, sp, #16
 800d158:	4630      	mov	r0, r6
 800d15a:	f000 f879 	bl	800d250 <_printf_i>
 800d15e:	e7e4      	b.n	800d12a <_vfiprintf_r+0x1e6>
 800d160:	0800ed4d 	.word	0x0800ed4d
 800d164:	0800ed57 	.word	0x0800ed57
 800d168:	00000000 	.word	0x00000000
 800d16c:	0800cf21 	.word	0x0800cf21
 800d170:	0800ed53 	.word	0x0800ed53

0800d174 <_printf_common>:
 800d174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d178:	4616      	mov	r6, r2
 800d17a:	4698      	mov	r8, r3
 800d17c:	688a      	ldr	r2, [r1, #8]
 800d17e:	690b      	ldr	r3, [r1, #16]
 800d180:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d184:	4293      	cmp	r3, r2
 800d186:	bfb8      	it	lt
 800d188:	4613      	movlt	r3, r2
 800d18a:	6033      	str	r3, [r6, #0]
 800d18c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d190:	4607      	mov	r7, r0
 800d192:	460c      	mov	r4, r1
 800d194:	b10a      	cbz	r2, 800d19a <_printf_common+0x26>
 800d196:	3301      	adds	r3, #1
 800d198:	6033      	str	r3, [r6, #0]
 800d19a:	6823      	ldr	r3, [r4, #0]
 800d19c:	0699      	lsls	r1, r3, #26
 800d19e:	bf42      	ittt	mi
 800d1a0:	6833      	ldrmi	r3, [r6, #0]
 800d1a2:	3302      	addmi	r3, #2
 800d1a4:	6033      	strmi	r3, [r6, #0]
 800d1a6:	6825      	ldr	r5, [r4, #0]
 800d1a8:	f015 0506 	ands.w	r5, r5, #6
 800d1ac:	d106      	bne.n	800d1bc <_printf_common+0x48>
 800d1ae:	f104 0a19 	add.w	sl, r4, #25
 800d1b2:	68e3      	ldr	r3, [r4, #12]
 800d1b4:	6832      	ldr	r2, [r6, #0]
 800d1b6:	1a9b      	subs	r3, r3, r2
 800d1b8:	42ab      	cmp	r3, r5
 800d1ba:	dc26      	bgt.n	800d20a <_printf_common+0x96>
 800d1bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d1c0:	6822      	ldr	r2, [r4, #0]
 800d1c2:	3b00      	subs	r3, #0
 800d1c4:	bf18      	it	ne
 800d1c6:	2301      	movne	r3, #1
 800d1c8:	0692      	lsls	r2, r2, #26
 800d1ca:	d42b      	bmi.n	800d224 <_printf_common+0xb0>
 800d1cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d1d0:	4641      	mov	r1, r8
 800d1d2:	4638      	mov	r0, r7
 800d1d4:	47c8      	blx	r9
 800d1d6:	3001      	adds	r0, #1
 800d1d8:	d01e      	beq.n	800d218 <_printf_common+0xa4>
 800d1da:	6823      	ldr	r3, [r4, #0]
 800d1dc:	6922      	ldr	r2, [r4, #16]
 800d1de:	f003 0306 	and.w	r3, r3, #6
 800d1e2:	2b04      	cmp	r3, #4
 800d1e4:	bf02      	ittt	eq
 800d1e6:	68e5      	ldreq	r5, [r4, #12]
 800d1e8:	6833      	ldreq	r3, [r6, #0]
 800d1ea:	1aed      	subeq	r5, r5, r3
 800d1ec:	68a3      	ldr	r3, [r4, #8]
 800d1ee:	bf0c      	ite	eq
 800d1f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d1f4:	2500      	movne	r5, #0
 800d1f6:	4293      	cmp	r3, r2
 800d1f8:	bfc4      	itt	gt
 800d1fa:	1a9b      	subgt	r3, r3, r2
 800d1fc:	18ed      	addgt	r5, r5, r3
 800d1fe:	2600      	movs	r6, #0
 800d200:	341a      	adds	r4, #26
 800d202:	42b5      	cmp	r5, r6
 800d204:	d11a      	bne.n	800d23c <_printf_common+0xc8>
 800d206:	2000      	movs	r0, #0
 800d208:	e008      	b.n	800d21c <_printf_common+0xa8>
 800d20a:	2301      	movs	r3, #1
 800d20c:	4652      	mov	r2, sl
 800d20e:	4641      	mov	r1, r8
 800d210:	4638      	mov	r0, r7
 800d212:	47c8      	blx	r9
 800d214:	3001      	adds	r0, #1
 800d216:	d103      	bne.n	800d220 <_printf_common+0xac>
 800d218:	f04f 30ff 	mov.w	r0, #4294967295
 800d21c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d220:	3501      	adds	r5, #1
 800d222:	e7c6      	b.n	800d1b2 <_printf_common+0x3e>
 800d224:	18e1      	adds	r1, r4, r3
 800d226:	1c5a      	adds	r2, r3, #1
 800d228:	2030      	movs	r0, #48	@ 0x30
 800d22a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d22e:	4422      	add	r2, r4
 800d230:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d234:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d238:	3302      	adds	r3, #2
 800d23a:	e7c7      	b.n	800d1cc <_printf_common+0x58>
 800d23c:	2301      	movs	r3, #1
 800d23e:	4622      	mov	r2, r4
 800d240:	4641      	mov	r1, r8
 800d242:	4638      	mov	r0, r7
 800d244:	47c8      	blx	r9
 800d246:	3001      	adds	r0, #1
 800d248:	d0e6      	beq.n	800d218 <_printf_common+0xa4>
 800d24a:	3601      	adds	r6, #1
 800d24c:	e7d9      	b.n	800d202 <_printf_common+0x8e>
	...

0800d250 <_printf_i>:
 800d250:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d254:	7e0f      	ldrb	r7, [r1, #24]
 800d256:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d258:	2f78      	cmp	r7, #120	@ 0x78
 800d25a:	4691      	mov	r9, r2
 800d25c:	4680      	mov	r8, r0
 800d25e:	460c      	mov	r4, r1
 800d260:	469a      	mov	sl, r3
 800d262:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d266:	d807      	bhi.n	800d278 <_printf_i+0x28>
 800d268:	2f62      	cmp	r7, #98	@ 0x62
 800d26a:	d80a      	bhi.n	800d282 <_printf_i+0x32>
 800d26c:	2f00      	cmp	r7, #0
 800d26e:	f000 80d2 	beq.w	800d416 <_printf_i+0x1c6>
 800d272:	2f58      	cmp	r7, #88	@ 0x58
 800d274:	f000 80b9 	beq.w	800d3ea <_printf_i+0x19a>
 800d278:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d27c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d280:	e03a      	b.n	800d2f8 <_printf_i+0xa8>
 800d282:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d286:	2b15      	cmp	r3, #21
 800d288:	d8f6      	bhi.n	800d278 <_printf_i+0x28>
 800d28a:	a101      	add	r1, pc, #4	@ (adr r1, 800d290 <_printf_i+0x40>)
 800d28c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d290:	0800d2e9 	.word	0x0800d2e9
 800d294:	0800d2fd 	.word	0x0800d2fd
 800d298:	0800d279 	.word	0x0800d279
 800d29c:	0800d279 	.word	0x0800d279
 800d2a0:	0800d279 	.word	0x0800d279
 800d2a4:	0800d279 	.word	0x0800d279
 800d2a8:	0800d2fd 	.word	0x0800d2fd
 800d2ac:	0800d279 	.word	0x0800d279
 800d2b0:	0800d279 	.word	0x0800d279
 800d2b4:	0800d279 	.word	0x0800d279
 800d2b8:	0800d279 	.word	0x0800d279
 800d2bc:	0800d3fd 	.word	0x0800d3fd
 800d2c0:	0800d327 	.word	0x0800d327
 800d2c4:	0800d3b7 	.word	0x0800d3b7
 800d2c8:	0800d279 	.word	0x0800d279
 800d2cc:	0800d279 	.word	0x0800d279
 800d2d0:	0800d41f 	.word	0x0800d41f
 800d2d4:	0800d279 	.word	0x0800d279
 800d2d8:	0800d327 	.word	0x0800d327
 800d2dc:	0800d279 	.word	0x0800d279
 800d2e0:	0800d279 	.word	0x0800d279
 800d2e4:	0800d3bf 	.word	0x0800d3bf
 800d2e8:	6833      	ldr	r3, [r6, #0]
 800d2ea:	1d1a      	adds	r2, r3, #4
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	6032      	str	r2, [r6, #0]
 800d2f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d2f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d2f8:	2301      	movs	r3, #1
 800d2fa:	e09d      	b.n	800d438 <_printf_i+0x1e8>
 800d2fc:	6833      	ldr	r3, [r6, #0]
 800d2fe:	6820      	ldr	r0, [r4, #0]
 800d300:	1d19      	adds	r1, r3, #4
 800d302:	6031      	str	r1, [r6, #0]
 800d304:	0606      	lsls	r6, r0, #24
 800d306:	d501      	bpl.n	800d30c <_printf_i+0xbc>
 800d308:	681d      	ldr	r5, [r3, #0]
 800d30a:	e003      	b.n	800d314 <_printf_i+0xc4>
 800d30c:	0645      	lsls	r5, r0, #25
 800d30e:	d5fb      	bpl.n	800d308 <_printf_i+0xb8>
 800d310:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d314:	2d00      	cmp	r5, #0
 800d316:	da03      	bge.n	800d320 <_printf_i+0xd0>
 800d318:	232d      	movs	r3, #45	@ 0x2d
 800d31a:	426d      	negs	r5, r5
 800d31c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d320:	4859      	ldr	r0, [pc, #356]	@ (800d488 <_printf_i+0x238>)
 800d322:	230a      	movs	r3, #10
 800d324:	e011      	b.n	800d34a <_printf_i+0xfa>
 800d326:	6821      	ldr	r1, [r4, #0]
 800d328:	6833      	ldr	r3, [r6, #0]
 800d32a:	0608      	lsls	r0, r1, #24
 800d32c:	f853 5b04 	ldr.w	r5, [r3], #4
 800d330:	d402      	bmi.n	800d338 <_printf_i+0xe8>
 800d332:	0649      	lsls	r1, r1, #25
 800d334:	bf48      	it	mi
 800d336:	b2ad      	uxthmi	r5, r5
 800d338:	2f6f      	cmp	r7, #111	@ 0x6f
 800d33a:	4853      	ldr	r0, [pc, #332]	@ (800d488 <_printf_i+0x238>)
 800d33c:	6033      	str	r3, [r6, #0]
 800d33e:	bf14      	ite	ne
 800d340:	230a      	movne	r3, #10
 800d342:	2308      	moveq	r3, #8
 800d344:	2100      	movs	r1, #0
 800d346:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d34a:	6866      	ldr	r6, [r4, #4]
 800d34c:	60a6      	str	r6, [r4, #8]
 800d34e:	2e00      	cmp	r6, #0
 800d350:	bfa2      	ittt	ge
 800d352:	6821      	ldrge	r1, [r4, #0]
 800d354:	f021 0104 	bicge.w	r1, r1, #4
 800d358:	6021      	strge	r1, [r4, #0]
 800d35a:	b90d      	cbnz	r5, 800d360 <_printf_i+0x110>
 800d35c:	2e00      	cmp	r6, #0
 800d35e:	d04b      	beq.n	800d3f8 <_printf_i+0x1a8>
 800d360:	4616      	mov	r6, r2
 800d362:	fbb5 f1f3 	udiv	r1, r5, r3
 800d366:	fb03 5711 	mls	r7, r3, r1, r5
 800d36a:	5dc7      	ldrb	r7, [r0, r7]
 800d36c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d370:	462f      	mov	r7, r5
 800d372:	42bb      	cmp	r3, r7
 800d374:	460d      	mov	r5, r1
 800d376:	d9f4      	bls.n	800d362 <_printf_i+0x112>
 800d378:	2b08      	cmp	r3, #8
 800d37a:	d10b      	bne.n	800d394 <_printf_i+0x144>
 800d37c:	6823      	ldr	r3, [r4, #0]
 800d37e:	07df      	lsls	r7, r3, #31
 800d380:	d508      	bpl.n	800d394 <_printf_i+0x144>
 800d382:	6923      	ldr	r3, [r4, #16]
 800d384:	6861      	ldr	r1, [r4, #4]
 800d386:	4299      	cmp	r1, r3
 800d388:	bfde      	ittt	le
 800d38a:	2330      	movle	r3, #48	@ 0x30
 800d38c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d390:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d394:	1b92      	subs	r2, r2, r6
 800d396:	6122      	str	r2, [r4, #16]
 800d398:	f8cd a000 	str.w	sl, [sp]
 800d39c:	464b      	mov	r3, r9
 800d39e:	aa03      	add	r2, sp, #12
 800d3a0:	4621      	mov	r1, r4
 800d3a2:	4640      	mov	r0, r8
 800d3a4:	f7ff fee6 	bl	800d174 <_printf_common>
 800d3a8:	3001      	adds	r0, #1
 800d3aa:	d14a      	bne.n	800d442 <_printf_i+0x1f2>
 800d3ac:	f04f 30ff 	mov.w	r0, #4294967295
 800d3b0:	b004      	add	sp, #16
 800d3b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3b6:	6823      	ldr	r3, [r4, #0]
 800d3b8:	f043 0320 	orr.w	r3, r3, #32
 800d3bc:	6023      	str	r3, [r4, #0]
 800d3be:	4833      	ldr	r0, [pc, #204]	@ (800d48c <_printf_i+0x23c>)
 800d3c0:	2778      	movs	r7, #120	@ 0x78
 800d3c2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d3c6:	6823      	ldr	r3, [r4, #0]
 800d3c8:	6831      	ldr	r1, [r6, #0]
 800d3ca:	061f      	lsls	r7, r3, #24
 800d3cc:	f851 5b04 	ldr.w	r5, [r1], #4
 800d3d0:	d402      	bmi.n	800d3d8 <_printf_i+0x188>
 800d3d2:	065f      	lsls	r7, r3, #25
 800d3d4:	bf48      	it	mi
 800d3d6:	b2ad      	uxthmi	r5, r5
 800d3d8:	6031      	str	r1, [r6, #0]
 800d3da:	07d9      	lsls	r1, r3, #31
 800d3dc:	bf44      	itt	mi
 800d3de:	f043 0320 	orrmi.w	r3, r3, #32
 800d3e2:	6023      	strmi	r3, [r4, #0]
 800d3e4:	b11d      	cbz	r5, 800d3ee <_printf_i+0x19e>
 800d3e6:	2310      	movs	r3, #16
 800d3e8:	e7ac      	b.n	800d344 <_printf_i+0xf4>
 800d3ea:	4827      	ldr	r0, [pc, #156]	@ (800d488 <_printf_i+0x238>)
 800d3ec:	e7e9      	b.n	800d3c2 <_printf_i+0x172>
 800d3ee:	6823      	ldr	r3, [r4, #0]
 800d3f0:	f023 0320 	bic.w	r3, r3, #32
 800d3f4:	6023      	str	r3, [r4, #0]
 800d3f6:	e7f6      	b.n	800d3e6 <_printf_i+0x196>
 800d3f8:	4616      	mov	r6, r2
 800d3fa:	e7bd      	b.n	800d378 <_printf_i+0x128>
 800d3fc:	6833      	ldr	r3, [r6, #0]
 800d3fe:	6825      	ldr	r5, [r4, #0]
 800d400:	6961      	ldr	r1, [r4, #20]
 800d402:	1d18      	adds	r0, r3, #4
 800d404:	6030      	str	r0, [r6, #0]
 800d406:	062e      	lsls	r6, r5, #24
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	d501      	bpl.n	800d410 <_printf_i+0x1c0>
 800d40c:	6019      	str	r1, [r3, #0]
 800d40e:	e002      	b.n	800d416 <_printf_i+0x1c6>
 800d410:	0668      	lsls	r0, r5, #25
 800d412:	d5fb      	bpl.n	800d40c <_printf_i+0x1bc>
 800d414:	8019      	strh	r1, [r3, #0]
 800d416:	2300      	movs	r3, #0
 800d418:	6123      	str	r3, [r4, #16]
 800d41a:	4616      	mov	r6, r2
 800d41c:	e7bc      	b.n	800d398 <_printf_i+0x148>
 800d41e:	6833      	ldr	r3, [r6, #0]
 800d420:	1d1a      	adds	r2, r3, #4
 800d422:	6032      	str	r2, [r6, #0]
 800d424:	681e      	ldr	r6, [r3, #0]
 800d426:	6862      	ldr	r2, [r4, #4]
 800d428:	2100      	movs	r1, #0
 800d42a:	4630      	mov	r0, r6
 800d42c:	f7f2 fef0 	bl	8000210 <memchr>
 800d430:	b108      	cbz	r0, 800d436 <_printf_i+0x1e6>
 800d432:	1b80      	subs	r0, r0, r6
 800d434:	6060      	str	r0, [r4, #4]
 800d436:	6863      	ldr	r3, [r4, #4]
 800d438:	6123      	str	r3, [r4, #16]
 800d43a:	2300      	movs	r3, #0
 800d43c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d440:	e7aa      	b.n	800d398 <_printf_i+0x148>
 800d442:	6923      	ldr	r3, [r4, #16]
 800d444:	4632      	mov	r2, r6
 800d446:	4649      	mov	r1, r9
 800d448:	4640      	mov	r0, r8
 800d44a:	47d0      	blx	sl
 800d44c:	3001      	adds	r0, #1
 800d44e:	d0ad      	beq.n	800d3ac <_printf_i+0x15c>
 800d450:	6823      	ldr	r3, [r4, #0]
 800d452:	079b      	lsls	r3, r3, #30
 800d454:	d413      	bmi.n	800d47e <_printf_i+0x22e>
 800d456:	68e0      	ldr	r0, [r4, #12]
 800d458:	9b03      	ldr	r3, [sp, #12]
 800d45a:	4298      	cmp	r0, r3
 800d45c:	bfb8      	it	lt
 800d45e:	4618      	movlt	r0, r3
 800d460:	e7a6      	b.n	800d3b0 <_printf_i+0x160>
 800d462:	2301      	movs	r3, #1
 800d464:	4632      	mov	r2, r6
 800d466:	4649      	mov	r1, r9
 800d468:	4640      	mov	r0, r8
 800d46a:	47d0      	blx	sl
 800d46c:	3001      	adds	r0, #1
 800d46e:	d09d      	beq.n	800d3ac <_printf_i+0x15c>
 800d470:	3501      	adds	r5, #1
 800d472:	68e3      	ldr	r3, [r4, #12]
 800d474:	9903      	ldr	r1, [sp, #12]
 800d476:	1a5b      	subs	r3, r3, r1
 800d478:	42ab      	cmp	r3, r5
 800d47a:	dcf2      	bgt.n	800d462 <_printf_i+0x212>
 800d47c:	e7eb      	b.n	800d456 <_printf_i+0x206>
 800d47e:	2500      	movs	r5, #0
 800d480:	f104 0619 	add.w	r6, r4, #25
 800d484:	e7f5      	b.n	800d472 <_printf_i+0x222>
 800d486:	bf00      	nop
 800d488:	0800ed5e 	.word	0x0800ed5e
 800d48c:	0800ed6f 	.word	0x0800ed6f

0800d490 <__swbuf_r>:
 800d490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d492:	460e      	mov	r6, r1
 800d494:	4614      	mov	r4, r2
 800d496:	4605      	mov	r5, r0
 800d498:	b118      	cbz	r0, 800d4a2 <__swbuf_r+0x12>
 800d49a:	6a03      	ldr	r3, [r0, #32]
 800d49c:	b90b      	cbnz	r3, 800d4a2 <__swbuf_r+0x12>
 800d49e:	f7fe faab 	bl	800b9f8 <__sinit>
 800d4a2:	69a3      	ldr	r3, [r4, #24]
 800d4a4:	60a3      	str	r3, [r4, #8]
 800d4a6:	89a3      	ldrh	r3, [r4, #12]
 800d4a8:	071a      	lsls	r2, r3, #28
 800d4aa:	d501      	bpl.n	800d4b0 <__swbuf_r+0x20>
 800d4ac:	6923      	ldr	r3, [r4, #16]
 800d4ae:	b943      	cbnz	r3, 800d4c2 <__swbuf_r+0x32>
 800d4b0:	4621      	mov	r1, r4
 800d4b2:	4628      	mov	r0, r5
 800d4b4:	f000 f82a 	bl	800d50c <__swsetup_r>
 800d4b8:	b118      	cbz	r0, 800d4c2 <__swbuf_r+0x32>
 800d4ba:	f04f 37ff 	mov.w	r7, #4294967295
 800d4be:	4638      	mov	r0, r7
 800d4c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4c2:	6823      	ldr	r3, [r4, #0]
 800d4c4:	6922      	ldr	r2, [r4, #16]
 800d4c6:	1a98      	subs	r0, r3, r2
 800d4c8:	6963      	ldr	r3, [r4, #20]
 800d4ca:	b2f6      	uxtb	r6, r6
 800d4cc:	4283      	cmp	r3, r0
 800d4ce:	4637      	mov	r7, r6
 800d4d0:	dc05      	bgt.n	800d4de <__swbuf_r+0x4e>
 800d4d2:	4621      	mov	r1, r4
 800d4d4:	4628      	mov	r0, r5
 800d4d6:	f7ff fc99 	bl	800ce0c <_fflush_r>
 800d4da:	2800      	cmp	r0, #0
 800d4dc:	d1ed      	bne.n	800d4ba <__swbuf_r+0x2a>
 800d4de:	68a3      	ldr	r3, [r4, #8]
 800d4e0:	3b01      	subs	r3, #1
 800d4e2:	60a3      	str	r3, [r4, #8]
 800d4e4:	6823      	ldr	r3, [r4, #0]
 800d4e6:	1c5a      	adds	r2, r3, #1
 800d4e8:	6022      	str	r2, [r4, #0]
 800d4ea:	701e      	strb	r6, [r3, #0]
 800d4ec:	6962      	ldr	r2, [r4, #20]
 800d4ee:	1c43      	adds	r3, r0, #1
 800d4f0:	429a      	cmp	r2, r3
 800d4f2:	d004      	beq.n	800d4fe <__swbuf_r+0x6e>
 800d4f4:	89a3      	ldrh	r3, [r4, #12]
 800d4f6:	07db      	lsls	r3, r3, #31
 800d4f8:	d5e1      	bpl.n	800d4be <__swbuf_r+0x2e>
 800d4fa:	2e0a      	cmp	r6, #10
 800d4fc:	d1df      	bne.n	800d4be <__swbuf_r+0x2e>
 800d4fe:	4621      	mov	r1, r4
 800d500:	4628      	mov	r0, r5
 800d502:	f7ff fc83 	bl	800ce0c <_fflush_r>
 800d506:	2800      	cmp	r0, #0
 800d508:	d0d9      	beq.n	800d4be <__swbuf_r+0x2e>
 800d50a:	e7d6      	b.n	800d4ba <__swbuf_r+0x2a>

0800d50c <__swsetup_r>:
 800d50c:	b538      	push	{r3, r4, r5, lr}
 800d50e:	4b29      	ldr	r3, [pc, #164]	@ (800d5b4 <__swsetup_r+0xa8>)
 800d510:	4605      	mov	r5, r0
 800d512:	6818      	ldr	r0, [r3, #0]
 800d514:	460c      	mov	r4, r1
 800d516:	b118      	cbz	r0, 800d520 <__swsetup_r+0x14>
 800d518:	6a03      	ldr	r3, [r0, #32]
 800d51a:	b90b      	cbnz	r3, 800d520 <__swsetup_r+0x14>
 800d51c:	f7fe fa6c 	bl	800b9f8 <__sinit>
 800d520:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d524:	0719      	lsls	r1, r3, #28
 800d526:	d422      	bmi.n	800d56e <__swsetup_r+0x62>
 800d528:	06da      	lsls	r2, r3, #27
 800d52a:	d407      	bmi.n	800d53c <__swsetup_r+0x30>
 800d52c:	2209      	movs	r2, #9
 800d52e:	602a      	str	r2, [r5, #0]
 800d530:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d534:	81a3      	strh	r3, [r4, #12]
 800d536:	f04f 30ff 	mov.w	r0, #4294967295
 800d53a:	e033      	b.n	800d5a4 <__swsetup_r+0x98>
 800d53c:	0758      	lsls	r0, r3, #29
 800d53e:	d512      	bpl.n	800d566 <__swsetup_r+0x5a>
 800d540:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d542:	b141      	cbz	r1, 800d556 <__swsetup_r+0x4a>
 800d544:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d548:	4299      	cmp	r1, r3
 800d54a:	d002      	beq.n	800d552 <__swsetup_r+0x46>
 800d54c:	4628      	mov	r0, r5
 800d54e:	f7fe fb83 	bl	800bc58 <_free_r>
 800d552:	2300      	movs	r3, #0
 800d554:	6363      	str	r3, [r4, #52]	@ 0x34
 800d556:	89a3      	ldrh	r3, [r4, #12]
 800d558:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d55c:	81a3      	strh	r3, [r4, #12]
 800d55e:	2300      	movs	r3, #0
 800d560:	6063      	str	r3, [r4, #4]
 800d562:	6923      	ldr	r3, [r4, #16]
 800d564:	6023      	str	r3, [r4, #0]
 800d566:	89a3      	ldrh	r3, [r4, #12]
 800d568:	f043 0308 	orr.w	r3, r3, #8
 800d56c:	81a3      	strh	r3, [r4, #12]
 800d56e:	6923      	ldr	r3, [r4, #16]
 800d570:	b94b      	cbnz	r3, 800d586 <__swsetup_r+0x7a>
 800d572:	89a3      	ldrh	r3, [r4, #12]
 800d574:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d578:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d57c:	d003      	beq.n	800d586 <__swsetup_r+0x7a>
 800d57e:	4621      	mov	r1, r4
 800d580:	4628      	mov	r0, r5
 800d582:	f000 f883 	bl	800d68c <__smakebuf_r>
 800d586:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d58a:	f013 0201 	ands.w	r2, r3, #1
 800d58e:	d00a      	beq.n	800d5a6 <__swsetup_r+0x9a>
 800d590:	2200      	movs	r2, #0
 800d592:	60a2      	str	r2, [r4, #8]
 800d594:	6962      	ldr	r2, [r4, #20]
 800d596:	4252      	negs	r2, r2
 800d598:	61a2      	str	r2, [r4, #24]
 800d59a:	6922      	ldr	r2, [r4, #16]
 800d59c:	b942      	cbnz	r2, 800d5b0 <__swsetup_r+0xa4>
 800d59e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d5a2:	d1c5      	bne.n	800d530 <__swsetup_r+0x24>
 800d5a4:	bd38      	pop	{r3, r4, r5, pc}
 800d5a6:	0799      	lsls	r1, r3, #30
 800d5a8:	bf58      	it	pl
 800d5aa:	6962      	ldrpl	r2, [r4, #20]
 800d5ac:	60a2      	str	r2, [r4, #8]
 800d5ae:	e7f4      	b.n	800d59a <__swsetup_r+0x8e>
 800d5b0:	2000      	movs	r0, #0
 800d5b2:	e7f7      	b.n	800d5a4 <__swsetup_r+0x98>
 800d5b4:	200001dc 	.word	0x200001dc

0800d5b8 <_raise_r>:
 800d5b8:	291f      	cmp	r1, #31
 800d5ba:	b538      	push	{r3, r4, r5, lr}
 800d5bc:	4605      	mov	r5, r0
 800d5be:	460c      	mov	r4, r1
 800d5c0:	d904      	bls.n	800d5cc <_raise_r+0x14>
 800d5c2:	2316      	movs	r3, #22
 800d5c4:	6003      	str	r3, [r0, #0]
 800d5c6:	f04f 30ff 	mov.w	r0, #4294967295
 800d5ca:	bd38      	pop	{r3, r4, r5, pc}
 800d5cc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d5ce:	b112      	cbz	r2, 800d5d6 <_raise_r+0x1e>
 800d5d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d5d4:	b94b      	cbnz	r3, 800d5ea <_raise_r+0x32>
 800d5d6:	4628      	mov	r0, r5
 800d5d8:	f000 f830 	bl	800d63c <_getpid_r>
 800d5dc:	4622      	mov	r2, r4
 800d5de:	4601      	mov	r1, r0
 800d5e0:	4628      	mov	r0, r5
 800d5e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d5e6:	f000 b817 	b.w	800d618 <_kill_r>
 800d5ea:	2b01      	cmp	r3, #1
 800d5ec:	d00a      	beq.n	800d604 <_raise_r+0x4c>
 800d5ee:	1c59      	adds	r1, r3, #1
 800d5f0:	d103      	bne.n	800d5fa <_raise_r+0x42>
 800d5f2:	2316      	movs	r3, #22
 800d5f4:	6003      	str	r3, [r0, #0]
 800d5f6:	2001      	movs	r0, #1
 800d5f8:	e7e7      	b.n	800d5ca <_raise_r+0x12>
 800d5fa:	2100      	movs	r1, #0
 800d5fc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d600:	4620      	mov	r0, r4
 800d602:	4798      	blx	r3
 800d604:	2000      	movs	r0, #0
 800d606:	e7e0      	b.n	800d5ca <_raise_r+0x12>

0800d608 <raise>:
 800d608:	4b02      	ldr	r3, [pc, #8]	@ (800d614 <raise+0xc>)
 800d60a:	4601      	mov	r1, r0
 800d60c:	6818      	ldr	r0, [r3, #0]
 800d60e:	f7ff bfd3 	b.w	800d5b8 <_raise_r>
 800d612:	bf00      	nop
 800d614:	200001dc 	.word	0x200001dc

0800d618 <_kill_r>:
 800d618:	b538      	push	{r3, r4, r5, lr}
 800d61a:	4d07      	ldr	r5, [pc, #28]	@ (800d638 <_kill_r+0x20>)
 800d61c:	2300      	movs	r3, #0
 800d61e:	4604      	mov	r4, r0
 800d620:	4608      	mov	r0, r1
 800d622:	4611      	mov	r1, r2
 800d624:	602b      	str	r3, [r5, #0]
 800d626:	f7f8 f911 	bl	800584c <_kill>
 800d62a:	1c43      	adds	r3, r0, #1
 800d62c:	d102      	bne.n	800d634 <_kill_r+0x1c>
 800d62e:	682b      	ldr	r3, [r5, #0]
 800d630:	b103      	cbz	r3, 800d634 <_kill_r+0x1c>
 800d632:	6023      	str	r3, [r4, #0]
 800d634:	bd38      	pop	{r3, r4, r5, pc}
 800d636:	bf00      	nop
 800d638:	20000db0 	.word	0x20000db0

0800d63c <_getpid_r>:
 800d63c:	f7f8 b8fe 	b.w	800583c <_getpid>

0800d640 <__swhatbuf_r>:
 800d640:	b570      	push	{r4, r5, r6, lr}
 800d642:	460c      	mov	r4, r1
 800d644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d648:	2900      	cmp	r1, #0
 800d64a:	b096      	sub	sp, #88	@ 0x58
 800d64c:	4615      	mov	r5, r2
 800d64e:	461e      	mov	r6, r3
 800d650:	da0d      	bge.n	800d66e <__swhatbuf_r+0x2e>
 800d652:	89a3      	ldrh	r3, [r4, #12]
 800d654:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d658:	f04f 0100 	mov.w	r1, #0
 800d65c:	bf14      	ite	ne
 800d65e:	2340      	movne	r3, #64	@ 0x40
 800d660:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d664:	2000      	movs	r0, #0
 800d666:	6031      	str	r1, [r6, #0]
 800d668:	602b      	str	r3, [r5, #0]
 800d66a:	b016      	add	sp, #88	@ 0x58
 800d66c:	bd70      	pop	{r4, r5, r6, pc}
 800d66e:	466a      	mov	r2, sp
 800d670:	f000 f848 	bl	800d704 <_fstat_r>
 800d674:	2800      	cmp	r0, #0
 800d676:	dbec      	blt.n	800d652 <__swhatbuf_r+0x12>
 800d678:	9901      	ldr	r1, [sp, #4]
 800d67a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d67e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d682:	4259      	negs	r1, r3
 800d684:	4159      	adcs	r1, r3
 800d686:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d68a:	e7eb      	b.n	800d664 <__swhatbuf_r+0x24>

0800d68c <__smakebuf_r>:
 800d68c:	898b      	ldrh	r3, [r1, #12]
 800d68e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d690:	079d      	lsls	r5, r3, #30
 800d692:	4606      	mov	r6, r0
 800d694:	460c      	mov	r4, r1
 800d696:	d507      	bpl.n	800d6a8 <__smakebuf_r+0x1c>
 800d698:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d69c:	6023      	str	r3, [r4, #0]
 800d69e:	6123      	str	r3, [r4, #16]
 800d6a0:	2301      	movs	r3, #1
 800d6a2:	6163      	str	r3, [r4, #20]
 800d6a4:	b003      	add	sp, #12
 800d6a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6a8:	ab01      	add	r3, sp, #4
 800d6aa:	466a      	mov	r2, sp
 800d6ac:	f7ff ffc8 	bl	800d640 <__swhatbuf_r>
 800d6b0:	9f00      	ldr	r7, [sp, #0]
 800d6b2:	4605      	mov	r5, r0
 800d6b4:	4639      	mov	r1, r7
 800d6b6:	4630      	mov	r0, r6
 800d6b8:	f7fd fa78 	bl	800abac <_malloc_r>
 800d6bc:	b948      	cbnz	r0, 800d6d2 <__smakebuf_r+0x46>
 800d6be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6c2:	059a      	lsls	r2, r3, #22
 800d6c4:	d4ee      	bmi.n	800d6a4 <__smakebuf_r+0x18>
 800d6c6:	f023 0303 	bic.w	r3, r3, #3
 800d6ca:	f043 0302 	orr.w	r3, r3, #2
 800d6ce:	81a3      	strh	r3, [r4, #12]
 800d6d0:	e7e2      	b.n	800d698 <__smakebuf_r+0xc>
 800d6d2:	89a3      	ldrh	r3, [r4, #12]
 800d6d4:	6020      	str	r0, [r4, #0]
 800d6d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d6da:	81a3      	strh	r3, [r4, #12]
 800d6dc:	9b01      	ldr	r3, [sp, #4]
 800d6de:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d6e2:	b15b      	cbz	r3, 800d6fc <__smakebuf_r+0x70>
 800d6e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d6e8:	4630      	mov	r0, r6
 800d6ea:	f000 f81d 	bl	800d728 <_isatty_r>
 800d6ee:	b128      	cbz	r0, 800d6fc <__smakebuf_r+0x70>
 800d6f0:	89a3      	ldrh	r3, [r4, #12]
 800d6f2:	f023 0303 	bic.w	r3, r3, #3
 800d6f6:	f043 0301 	orr.w	r3, r3, #1
 800d6fa:	81a3      	strh	r3, [r4, #12]
 800d6fc:	89a3      	ldrh	r3, [r4, #12]
 800d6fe:	431d      	orrs	r5, r3
 800d700:	81a5      	strh	r5, [r4, #12]
 800d702:	e7cf      	b.n	800d6a4 <__smakebuf_r+0x18>

0800d704 <_fstat_r>:
 800d704:	b538      	push	{r3, r4, r5, lr}
 800d706:	4d07      	ldr	r5, [pc, #28]	@ (800d724 <_fstat_r+0x20>)
 800d708:	2300      	movs	r3, #0
 800d70a:	4604      	mov	r4, r0
 800d70c:	4608      	mov	r0, r1
 800d70e:	4611      	mov	r1, r2
 800d710:	602b      	str	r3, [r5, #0]
 800d712:	f7f8 f8fb 	bl	800590c <_fstat>
 800d716:	1c43      	adds	r3, r0, #1
 800d718:	d102      	bne.n	800d720 <_fstat_r+0x1c>
 800d71a:	682b      	ldr	r3, [r5, #0]
 800d71c:	b103      	cbz	r3, 800d720 <_fstat_r+0x1c>
 800d71e:	6023      	str	r3, [r4, #0]
 800d720:	bd38      	pop	{r3, r4, r5, pc}
 800d722:	bf00      	nop
 800d724:	20000db0 	.word	0x20000db0

0800d728 <_isatty_r>:
 800d728:	b538      	push	{r3, r4, r5, lr}
 800d72a:	4d06      	ldr	r5, [pc, #24]	@ (800d744 <_isatty_r+0x1c>)
 800d72c:	2300      	movs	r3, #0
 800d72e:	4604      	mov	r4, r0
 800d730:	4608      	mov	r0, r1
 800d732:	602b      	str	r3, [r5, #0]
 800d734:	f7f8 f8fa 	bl	800592c <_isatty>
 800d738:	1c43      	adds	r3, r0, #1
 800d73a:	d102      	bne.n	800d742 <_isatty_r+0x1a>
 800d73c:	682b      	ldr	r3, [r5, #0]
 800d73e:	b103      	cbz	r3, 800d742 <_isatty_r+0x1a>
 800d740:	6023      	str	r3, [r4, #0]
 800d742:	bd38      	pop	{r3, r4, r5, pc}
 800d744:	20000db0 	.word	0x20000db0

0800d748 <pow>:
 800d748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d74a:	ed2d 8b02 	vpush	{d8}
 800d74e:	eeb0 8a40 	vmov.f32	s16, s0
 800d752:	eef0 8a60 	vmov.f32	s17, s1
 800d756:	ec55 4b11 	vmov	r4, r5, d1
 800d75a:	f000 f971 	bl	800da40 <__ieee754_pow>
 800d75e:	4622      	mov	r2, r4
 800d760:	462b      	mov	r3, r5
 800d762:	4620      	mov	r0, r4
 800d764:	4629      	mov	r1, r5
 800d766:	ec57 6b10 	vmov	r6, r7, d0
 800d76a:	f7f3 f9f7 	bl	8000b5c <__aeabi_dcmpun>
 800d76e:	2800      	cmp	r0, #0
 800d770:	d13b      	bne.n	800d7ea <pow+0xa2>
 800d772:	ec51 0b18 	vmov	r0, r1, d8
 800d776:	2200      	movs	r2, #0
 800d778:	2300      	movs	r3, #0
 800d77a:	f7f3 f9bd 	bl	8000af8 <__aeabi_dcmpeq>
 800d77e:	b1b8      	cbz	r0, 800d7b0 <pow+0x68>
 800d780:	2200      	movs	r2, #0
 800d782:	2300      	movs	r3, #0
 800d784:	4620      	mov	r0, r4
 800d786:	4629      	mov	r1, r5
 800d788:	f7f3 f9b6 	bl	8000af8 <__aeabi_dcmpeq>
 800d78c:	2800      	cmp	r0, #0
 800d78e:	d146      	bne.n	800d81e <pow+0xd6>
 800d790:	ec45 4b10 	vmov	d0, r4, r5
 800d794:	f000 f868 	bl	800d868 <finite>
 800d798:	b338      	cbz	r0, 800d7ea <pow+0xa2>
 800d79a:	2200      	movs	r2, #0
 800d79c:	2300      	movs	r3, #0
 800d79e:	4620      	mov	r0, r4
 800d7a0:	4629      	mov	r1, r5
 800d7a2:	f7f3 f9b3 	bl	8000b0c <__aeabi_dcmplt>
 800d7a6:	b300      	cbz	r0, 800d7ea <pow+0xa2>
 800d7a8:	f7fe fa10 	bl	800bbcc <__errno>
 800d7ac:	2322      	movs	r3, #34	@ 0x22
 800d7ae:	e01b      	b.n	800d7e8 <pow+0xa0>
 800d7b0:	ec47 6b10 	vmov	d0, r6, r7
 800d7b4:	f000 f858 	bl	800d868 <finite>
 800d7b8:	b9e0      	cbnz	r0, 800d7f4 <pow+0xac>
 800d7ba:	eeb0 0a48 	vmov.f32	s0, s16
 800d7be:	eef0 0a68 	vmov.f32	s1, s17
 800d7c2:	f000 f851 	bl	800d868 <finite>
 800d7c6:	b1a8      	cbz	r0, 800d7f4 <pow+0xac>
 800d7c8:	ec45 4b10 	vmov	d0, r4, r5
 800d7cc:	f000 f84c 	bl	800d868 <finite>
 800d7d0:	b180      	cbz	r0, 800d7f4 <pow+0xac>
 800d7d2:	4632      	mov	r2, r6
 800d7d4:	463b      	mov	r3, r7
 800d7d6:	4630      	mov	r0, r6
 800d7d8:	4639      	mov	r1, r7
 800d7da:	f7f3 f9bf 	bl	8000b5c <__aeabi_dcmpun>
 800d7de:	2800      	cmp	r0, #0
 800d7e0:	d0e2      	beq.n	800d7a8 <pow+0x60>
 800d7e2:	f7fe f9f3 	bl	800bbcc <__errno>
 800d7e6:	2321      	movs	r3, #33	@ 0x21
 800d7e8:	6003      	str	r3, [r0, #0]
 800d7ea:	ecbd 8b02 	vpop	{d8}
 800d7ee:	ec47 6b10 	vmov	d0, r6, r7
 800d7f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	2300      	movs	r3, #0
 800d7f8:	4630      	mov	r0, r6
 800d7fa:	4639      	mov	r1, r7
 800d7fc:	f7f3 f97c 	bl	8000af8 <__aeabi_dcmpeq>
 800d800:	2800      	cmp	r0, #0
 800d802:	d0f2      	beq.n	800d7ea <pow+0xa2>
 800d804:	eeb0 0a48 	vmov.f32	s0, s16
 800d808:	eef0 0a68 	vmov.f32	s1, s17
 800d80c:	f000 f82c 	bl	800d868 <finite>
 800d810:	2800      	cmp	r0, #0
 800d812:	d0ea      	beq.n	800d7ea <pow+0xa2>
 800d814:	ec45 4b10 	vmov	d0, r4, r5
 800d818:	f000 f826 	bl	800d868 <finite>
 800d81c:	e7c3      	b.n	800d7a6 <pow+0x5e>
 800d81e:	4f01      	ldr	r7, [pc, #4]	@ (800d824 <pow+0xdc>)
 800d820:	2600      	movs	r6, #0
 800d822:	e7e2      	b.n	800d7ea <pow+0xa2>
 800d824:	3ff00000 	.word	0x3ff00000

0800d828 <atan2f>:
 800d828:	f000 be56 	b.w	800e4d8 <__ieee754_atan2f>

0800d82c <sqrtf>:
 800d82c:	b508      	push	{r3, lr}
 800d82e:	ed2d 8b02 	vpush	{d8}
 800d832:	eeb0 8a40 	vmov.f32	s16, s0
 800d836:	f000 f8fd 	bl	800da34 <__ieee754_sqrtf>
 800d83a:	eeb4 8a48 	vcmp.f32	s16, s16
 800d83e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d842:	d60c      	bvs.n	800d85e <sqrtf+0x32>
 800d844:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800d864 <sqrtf+0x38>
 800d848:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800d84c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d850:	d505      	bpl.n	800d85e <sqrtf+0x32>
 800d852:	f7fe f9bb 	bl	800bbcc <__errno>
 800d856:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800d85a:	2321      	movs	r3, #33	@ 0x21
 800d85c:	6003      	str	r3, [r0, #0]
 800d85e:	ecbd 8b02 	vpop	{d8}
 800d862:	bd08      	pop	{r3, pc}
 800d864:	00000000 	.word	0x00000000

0800d868 <finite>:
 800d868:	b082      	sub	sp, #8
 800d86a:	ed8d 0b00 	vstr	d0, [sp]
 800d86e:	9801      	ldr	r0, [sp, #4]
 800d870:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800d874:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800d878:	0fc0      	lsrs	r0, r0, #31
 800d87a:	b002      	add	sp, #8
 800d87c:	4770      	bx	lr
	...

0800d880 <__ieee754_sqrt>:
 800d880:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d884:	4a68      	ldr	r2, [pc, #416]	@ (800da28 <__ieee754_sqrt+0x1a8>)
 800d886:	ec55 4b10 	vmov	r4, r5, d0
 800d88a:	43aa      	bics	r2, r5
 800d88c:	462b      	mov	r3, r5
 800d88e:	4621      	mov	r1, r4
 800d890:	d110      	bne.n	800d8b4 <__ieee754_sqrt+0x34>
 800d892:	4622      	mov	r2, r4
 800d894:	4620      	mov	r0, r4
 800d896:	4629      	mov	r1, r5
 800d898:	f7f2 fec6 	bl	8000628 <__aeabi_dmul>
 800d89c:	4602      	mov	r2, r0
 800d89e:	460b      	mov	r3, r1
 800d8a0:	4620      	mov	r0, r4
 800d8a2:	4629      	mov	r1, r5
 800d8a4:	f7f2 fd0a 	bl	80002bc <__adddf3>
 800d8a8:	4604      	mov	r4, r0
 800d8aa:	460d      	mov	r5, r1
 800d8ac:	ec45 4b10 	vmov	d0, r4, r5
 800d8b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8b4:	2d00      	cmp	r5, #0
 800d8b6:	dc0e      	bgt.n	800d8d6 <__ieee754_sqrt+0x56>
 800d8b8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800d8bc:	4322      	orrs	r2, r4
 800d8be:	d0f5      	beq.n	800d8ac <__ieee754_sqrt+0x2c>
 800d8c0:	b19d      	cbz	r5, 800d8ea <__ieee754_sqrt+0x6a>
 800d8c2:	4622      	mov	r2, r4
 800d8c4:	4620      	mov	r0, r4
 800d8c6:	4629      	mov	r1, r5
 800d8c8:	f7f2 fcf6 	bl	80002b8 <__aeabi_dsub>
 800d8cc:	4602      	mov	r2, r0
 800d8ce:	460b      	mov	r3, r1
 800d8d0:	f7f2 ffd4 	bl	800087c <__aeabi_ddiv>
 800d8d4:	e7e8      	b.n	800d8a8 <__ieee754_sqrt+0x28>
 800d8d6:	152a      	asrs	r2, r5, #20
 800d8d8:	d115      	bne.n	800d906 <__ieee754_sqrt+0x86>
 800d8da:	2000      	movs	r0, #0
 800d8dc:	e009      	b.n	800d8f2 <__ieee754_sqrt+0x72>
 800d8de:	0acb      	lsrs	r3, r1, #11
 800d8e0:	3a15      	subs	r2, #21
 800d8e2:	0549      	lsls	r1, r1, #21
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d0fa      	beq.n	800d8de <__ieee754_sqrt+0x5e>
 800d8e8:	e7f7      	b.n	800d8da <__ieee754_sqrt+0x5a>
 800d8ea:	462a      	mov	r2, r5
 800d8ec:	e7fa      	b.n	800d8e4 <__ieee754_sqrt+0x64>
 800d8ee:	005b      	lsls	r3, r3, #1
 800d8f0:	3001      	adds	r0, #1
 800d8f2:	02dc      	lsls	r4, r3, #11
 800d8f4:	d5fb      	bpl.n	800d8ee <__ieee754_sqrt+0x6e>
 800d8f6:	1e44      	subs	r4, r0, #1
 800d8f8:	1b12      	subs	r2, r2, r4
 800d8fa:	f1c0 0420 	rsb	r4, r0, #32
 800d8fe:	fa21 f404 	lsr.w	r4, r1, r4
 800d902:	4323      	orrs	r3, r4
 800d904:	4081      	lsls	r1, r0
 800d906:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d90a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800d90e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d912:	07d2      	lsls	r2, r2, #31
 800d914:	bf5c      	itt	pl
 800d916:	005b      	lslpl	r3, r3, #1
 800d918:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800d91c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d920:	bf58      	it	pl
 800d922:	0049      	lslpl	r1, r1, #1
 800d924:	2600      	movs	r6, #0
 800d926:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800d92a:	106d      	asrs	r5, r5, #1
 800d92c:	0049      	lsls	r1, r1, #1
 800d92e:	2016      	movs	r0, #22
 800d930:	4632      	mov	r2, r6
 800d932:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800d936:	1917      	adds	r7, r2, r4
 800d938:	429f      	cmp	r7, r3
 800d93a:	bfde      	ittt	le
 800d93c:	193a      	addle	r2, r7, r4
 800d93e:	1bdb      	suble	r3, r3, r7
 800d940:	1936      	addle	r6, r6, r4
 800d942:	0fcf      	lsrs	r7, r1, #31
 800d944:	3801      	subs	r0, #1
 800d946:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800d94a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d94e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800d952:	d1f0      	bne.n	800d936 <__ieee754_sqrt+0xb6>
 800d954:	4604      	mov	r4, r0
 800d956:	2720      	movs	r7, #32
 800d958:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800d95c:	429a      	cmp	r2, r3
 800d95e:	eb00 0e0c 	add.w	lr, r0, ip
 800d962:	db02      	blt.n	800d96a <__ieee754_sqrt+0xea>
 800d964:	d113      	bne.n	800d98e <__ieee754_sqrt+0x10e>
 800d966:	458e      	cmp	lr, r1
 800d968:	d811      	bhi.n	800d98e <__ieee754_sqrt+0x10e>
 800d96a:	f1be 0f00 	cmp.w	lr, #0
 800d96e:	eb0e 000c 	add.w	r0, lr, ip
 800d972:	da42      	bge.n	800d9fa <__ieee754_sqrt+0x17a>
 800d974:	2800      	cmp	r0, #0
 800d976:	db40      	blt.n	800d9fa <__ieee754_sqrt+0x17a>
 800d978:	f102 0801 	add.w	r8, r2, #1
 800d97c:	1a9b      	subs	r3, r3, r2
 800d97e:	458e      	cmp	lr, r1
 800d980:	bf88      	it	hi
 800d982:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800d986:	eba1 010e 	sub.w	r1, r1, lr
 800d98a:	4464      	add	r4, ip
 800d98c:	4642      	mov	r2, r8
 800d98e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800d992:	3f01      	subs	r7, #1
 800d994:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800d998:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d99c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800d9a0:	d1dc      	bne.n	800d95c <__ieee754_sqrt+0xdc>
 800d9a2:	4319      	orrs	r1, r3
 800d9a4:	d01b      	beq.n	800d9de <__ieee754_sqrt+0x15e>
 800d9a6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800da2c <__ieee754_sqrt+0x1ac>
 800d9aa:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800da30 <__ieee754_sqrt+0x1b0>
 800d9ae:	e9da 0100 	ldrd	r0, r1, [sl]
 800d9b2:	e9db 2300 	ldrd	r2, r3, [fp]
 800d9b6:	f7f2 fc7f 	bl	80002b8 <__aeabi_dsub>
 800d9ba:	e9da 8900 	ldrd	r8, r9, [sl]
 800d9be:	4602      	mov	r2, r0
 800d9c0:	460b      	mov	r3, r1
 800d9c2:	4640      	mov	r0, r8
 800d9c4:	4649      	mov	r1, r9
 800d9c6:	f7f3 f8ab 	bl	8000b20 <__aeabi_dcmple>
 800d9ca:	b140      	cbz	r0, 800d9de <__ieee754_sqrt+0x15e>
 800d9cc:	f1b4 3fff 	cmp.w	r4, #4294967295
 800d9d0:	e9da 0100 	ldrd	r0, r1, [sl]
 800d9d4:	e9db 2300 	ldrd	r2, r3, [fp]
 800d9d8:	d111      	bne.n	800d9fe <__ieee754_sqrt+0x17e>
 800d9da:	3601      	adds	r6, #1
 800d9dc:	463c      	mov	r4, r7
 800d9de:	1072      	asrs	r2, r6, #1
 800d9e0:	0863      	lsrs	r3, r4, #1
 800d9e2:	07f1      	lsls	r1, r6, #31
 800d9e4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800d9e8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800d9ec:	bf48      	it	mi
 800d9ee:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800d9f2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	e756      	b.n	800d8a8 <__ieee754_sqrt+0x28>
 800d9fa:	4690      	mov	r8, r2
 800d9fc:	e7be      	b.n	800d97c <__ieee754_sqrt+0xfc>
 800d9fe:	f7f2 fc5d 	bl	80002bc <__adddf3>
 800da02:	e9da 8900 	ldrd	r8, r9, [sl]
 800da06:	4602      	mov	r2, r0
 800da08:	460b      	mov	r3, r1
 800da0a:	4640      	mov	r0, r8
 800da0c:	4649      	mov	r1, r9
 800da0e:	f7f3 f87d 	bl	8000b0c <__aeabi_dcmplt>
 800da12:	b120      	cbz	r0, 800da1e <__ieee754_sqrt+0x19e>
 800da14:	1ca0      	adds	r0, r4, #2
 800da16:	bf08      	it	eq
 800da18:	3601      	addeq	r6, #1
 800da1a:	3402      	adds	r4, #2
 800da1c:	e7df      	b.n	800d9de <__ieee754_sqrt+0x15e>
 800da1e:	1c63      	adds	r3, r4, #1
 800da20:	f023 0401 	bic.w	r4, r3, #1
 800da24:	e7db      	b.n	800d9de <__ieee754_sqrt+0x15e>
 800da26:	bf00      	nop
 800da28:	7ff00000 	.word	0x7ff00000
 800da2c:	20000238 	.word	0x20000238
 800da30:	20000230 	.word	0x20000230

0800da34 <__ieee754_sqrtf>:
 800da34:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800da38:	4770      	bx	lr
 800da3a:	0000      	movs	r0, r0
 800da3c:	0000      	movs	r0, r0
	...

0800da40 <__ieee754_pow>:
 800da40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da44:	b091      	sub	sp, #68	@ 0x44
 800da46:	ed8d 1b00 	vstr	d1, [sp]
 800da4a:	e9dd 1900 	ldrd	r1, r9, [sp]
 800da4e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800da52:	ea5a 0001 	orrs.w	r0, sl, r1
 800da56:	ec57 6b10 	vmov	r6, r7, d0
 800da5a:	d113      	bne.n	800da84 <__ieee754_pow+0x44>
 800da5c:	19b3      	adds	r3, r6, r6
 800da5e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800da62:	4152      	adcs	r2, r2
 800da64:	4298      	cmp	r0, r3
 800da66:	4b98      	ldr	r3, [pc, #608]	@ (800dcc8 <__ieee754_pow+0x288>)
 800da68:	4193      	sbcs	r3, r2
 800da6a:	f080 84ea 	bcs.w	800e442 <__ieee754_pow+0xa02>
 800da6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800da72:	4630      	mov	r0, r6
 800da74:	4639      	mov	r1, r7
 800da76:	f7f2 fc21 	bl	80002bc <__adddf3>
 800da7a:	ec41 0b10 	vmov	d0, r0, r1
 800da7e:	b011      	add	sp, #68	@ 0x44
 800da80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da84:	4a91      	ldr	r2, [pc, #580]	@ (800dccc <__ieee754_pow+0x28c>)
 800da86:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800da8a:	4590      	cmp	r8, r2
 800da8c:	463d      	mov	r5, r7
 800da8e:	4633      	mov	r3, r6
 800da90:	d806      	bhi.n	800daa0 <__ieee754_pow+0x60>
 800da92:	d101      	bne.n	800da98 <__ieee754_pow+0x58>
 800da94:	2e00      	cmp	r6, #0
 800da96:	d1ea      	bne.n	800da6e <__ieee754_pow+0x2e>
 800da98:	4592      	cmp	sl, r2
 800da9a:	d801      	bhi.n	800daa0 <__ieee754_pow+0x60>
 800da9c:	d10e      	bne.n	800dabc <__ieee754_pow+0x7c>
 800da9e:	b169      	cbz	r1, 800dabc <__ieee754_pow+0x7c>
 800daa0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800daa4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800daa8:	431d      	orrs	r5, r3
 800daaa:	d1e0      	bne.n	800da6e <__ieee754_pow+0x2e>
 800daac:	e9dd 3200 	ldrd	r3, r2, [sp]
 800dab0:	18db      	adds	r3, r3, r3
 800dab2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800dab6:	4152      	adcs	r2, r2
 800dab8:	429d      	cmp	r5, r3
 800daba:	e7d4      	b.n	800da66 <__ieee754_pow+0x26>
 800dabc:	2d00      	cmp	r5, #0
 800dabe:	46c3      	mov	fp, r8
 800dac0:	da3a      	bge.n	800db38 <__ieee754_pow+0xf8>
 800dac2:	4a83      	ldr	r2, [pc, #524]	@ (800dcd0 <__ieee754_pow+0x290>)
 800dac4:	4592      	cmp	sl, r2
 800dac6:	d84d      	bhi.n	800db64 <__ieee754_pow+0x124>
 800dac8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800dacc:	4592      	cmp	sl, r2
 800dace:	f240 84c7 	bls.w	800e460 <__ieee754_pow+0xa20>
 800dad2:	ea4f 522a 	mov.w	r2, sl, asr #20
 800dad6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800dada:	2a14      	cmp	r2, #20
 800dadc:	dd0f      	ble.n	800dafe <__ieee754_pow+0xbe>
 800dade:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800dae2:	fa21 f402 	lsr.w	r4, r1, r2
 800dae6:	fa04 f202 	lsl.w	r2, r4, r2
 800daea:	428a      	cmp	r2, r1
 800daec:	f040 84b8 	bne.w	800e460 <__ieee754_pow+0xa20>
 800daf0:	f004 0401 	and.w	r4, r4, #1
 800daf4:	f1c4 0402 	rsb	r4, r4, #2
 800daf8:	2900      	cmp	r1, #0
 800dafa:	d158      	bne.n	800dbae <__ieee754_pow+0x16e>
 800dafc:	e00e      	b.n	800db1c <__ieee754_pow+0xdc>
 800dafe:	2900      	cmp	r1, #0
 800db00:	d154      	bne.n	800dbac <__ieee754_pow+0x16c>
 800db02:	f1c2 0214 	rsb	r2, r2, #20
 800db06:	fa4a f402 	asr.w	r4, sl, r2
 800db0a:	fa04 f202 	lsl.w	r2, r4, r2
 800db0e:	4552      	cmp	r2, sl
 800db10:	f040 84a3 	bne.w	800e45a <__ieee754_pow+0xa1a>
 800db14:	f004 0401 	and.w	r4, r4, #1
 800db18:	f1c4 0402 	rsb	r4, r4, #2
 800db1c:	4a6d      	ldr	r2, [pc, #436]	@ (800dcd4 <__ieee754_pow+0x294>)
 800db1e:	4592      	cmp	sl, r2
 800db20:	d12e      	bne.n	800db80 <__ieee754_pow+0x140>
 800db22:	f1b9 0f00 	cmp.w	r9, #0
 800db26:	f280 8494 	bge.w	800e452 <__ieee754_pow+0xa12>
 800db2a:	496a      	ldr	r1, [pc, #424]	@ (800dcd4 <__ieee754_pow+0x294>)
 800db2c:	4632      	mov	r2, r6
 800db2e:	463b      	mov	r3, r7
 800db30:	2000      	movs	r0, #0
 800db32:	f7f2 fea3 	bl	800087c <__aeabi_ddiv>
 800db36:	e7a0      	b.n	800da7a <__ieee754_pow+0x3a>
 800db38:	2400      	movs	r4, #0
 800db3a:	bbc1      	cbnz	r1, 800dbae <__ieee754_pow+0x16e>
 800db3c:	4a63      	ldr	r2, [pc, #396]	@ (800dccc <__ieee754_pow+0x28c>)
 800db3e:	4592      	cmp	sl, r2
 800db40:	d1ec      	bne.n	800db1c <__ieee754_pow+0xdc>
 800db42:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800db46:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800db4a:	431a      	orrs	r2, r3
 800db4c:	f000 8479 	beq.w	800e442 <__ieee754_pow+0xa02>
 800db50:	4b61      	ldr	r3, [pc, #388]	@ (800dcd8 <__ieee754_pow+0x298>)
 800db52:	4598      	cmp	r8, r3
 800db54:	d908      	bls.n	800db68 <__ieee754_pow+0x128>
 800db56:	f1b9 0f00 	cmp.w	r9, #0
 800db5a:	f2c0 8476 	blt.w	800e44a <__ieee754_pow+0xa0a>
 800db5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800db62:	e78a      	b.n	800da7a <__ieee754_pow+0x3a>
 800db64:	2402      	movs	r4, #2
 800db66:	e7e8      	b.n	800db3a <__ieee754_pow+0xfa>
 800db68:	f1b9 0f00 	cmp.w	r9, #0
 800db6c:	f04f 0000 	mov.w	r0, #0
 800db70:	f04f 0100 	mov.w	r1, #0
 800db74:	da81      	bge.n	800da7a <__ieee754_pow+0x3a>
 800db76:	e9dd 0300 	ldrd	r0, r3, [sp]
 800db7a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800db7e:	e77c      	b.n	800da7a <__ieee754_pow+0x3a>
 800db80:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800db84:	d106      	bne.n	800db94 <__ieee754_pow+0x154>
 800db86:	4632      	mov	r2, r6
 800db88:	463b      	mov	r3, r7
 800db8a:	4630      	mov	r0, r6
 800db8c:	4639      	mov	r1, r7
 800db8e:	f7f2 fd4b 	bl	8000628 <__aeabi_dmul>
 800db92:	e772      	b.n	800da7a <__ieee754_pow+0x3a>
 800db94:	4a51      	ldr	r2, [pc, #324]	@ (800dcdc <__ieee754_pow+0x29c>)
 800db96:	4591      	cmp	r9, r2
 800db98:	d109      	bne.n	800dbae <__ieee754_pow+0x16e>
 800db9a:	2d00      	cmp	r5, #0
 800db9c:	db07      	blt.n	800dbae <__ieee754_pow+0x16e>
 800db9e:	ec47 6b10 	vmov	d0, r6, r7
 800dba2:	b011      	add	sp, #68	@ 0x44
 800dba4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dba8:	f7ff be6a 	b.w	800d880 <__ieee754_sqrt>
 800dbac:	2400      	movs	r4, #0
 800dbae:	ec47 6b10 	vmov	d0, r6, r7
 800dbb2:	9302      	str	r3, [sp, #8]
 800dbb4:	f000 fc88 	bl	800e4c8 <fabs>
 800dbb8:	9b02      	ldr	r3, [sp, #8]
 800dbba:	ec51 0b10 	vmov	r0, r1, d0
 800dbbe:	bb53      	cbnz	r3, 800dc16 <__ieee754_pow+0x1d6>
 800dbc0:	4b44      	ldr	r3, [pc, #272]	@ (800dcd4 <__ieee754_pow+0x294>)
 800dbc2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800dbc6:	429a      	cmp	r2, r3
 800dbc8:	d002      	beq.n	800dbd0 <__ieee754_pow+0x190>
 800dbca:	f1b8 0f00 	cmp.w	r8, #0
 800dbce:	d122      	bne.n	800dc16 <__ieee754_pow+0x1d6>
 800dbd0:	f1b9 0f00 	cmp.w	r9, #0
 800dbd4:	da05      	bge.n	800dbe2 <__ieee754_pow+0x1a2>
 800dbd6:	4602      	mov	r2, r0
 800dbd8:	460b      	mov	r3, r1
 800dbda:	2000      	movs	r0, #0
 800dbdc:	493d      	ldr	r1, [pc, #244]	@ (800dcd4 <__ieee754_pow+0x294>)
 800dbde:	f7f2 fe4d 	bl	800087c <__aeabi_ddiv>
 800dbe2:	2d00      	cmp	r5, #0
 800dbe4:	f6bf af49 	bge.w	800da7a <__ieee754_pow+0x3a>
 800dbe8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800dbec:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800dbf0:	ea58 0804 	orrs.w	r8, r8, r4
 800dbf4:	d108      	bne.n	800dc08 <__ieee754_pow+0x1c8>
 800dbf6:	4602      	mov	r2, r0
 800dbf8:	460b      	mov	r3, r1
 800dbfa:	4610      	mov	r0, r2
 800dbfc:	4619      	mov	r1, r3
 800dbfe:	f7f2 fb5b 	bl	80002b8 <__aeabi_dsub>
 800dc02:	4602      	mov	r2, r0
 800dc04:	460b      	mov	r3, r1
 800dc06:	e794      	b.n	800db32 <__ieee754_pow+0xf2>
 800dc08:	2c01      	cmp	r4, #1
 800dc0a:	f47f af36 	bne.w	800da7a <__ieee754_pow+0x3a>
 800dc0e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800dc12:	4619      	mov	r1, r3
 800dc14:	e731      	b.n	800da7a <__ieee754_pow+0x3a>
 800dc16:	0feb      	lsrs	r3, r5, #31
 800dc18:	3b01      	subs	r3, #1
 800dc1a:	ea53 0204 	orrs.w	r2, r3, r4
 800dc1e:	d102      	bne.n	800dc26 <__ieee754_pow+0x1e6>
 800dc20:	4632      	mov	r2, r6
 800dc22:	463b      	mov	r3, r7
 800dc24:	e7e9      	b.n	800dbfa <__ieee754_pow+0x1ba>
 800dc26:	3c01      	subs	r4, #1
 800dc28:	431c      	orrs	r4, r3
 800dc2a:	d016      	beq.n	800dc5a <__ieee754_pow+0x21a>
 800dc2c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800dcb8 <__ieee754_pow+0x278>
 800dc30:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800dc34:	ed8d 7b02 	vstr	d7, [sp, #8]
 800dc38:	f240 8112 	bls.w	800de60 <__ieee754_pow+0x420>
 800dc3c:	4b28      	ldr	r3, [pc, #160]	@ (800dce0 <__ieee754_pow+0x2a0>)
 800dc3e:	459a      	cmp	sl, r3
 800dc40:	4b25      	ldr	r3, [pc, #148]	@ (800dcd8 <__ieee754_pow+0x298>)
 800dc42:	d916      	bls.n	800dc72 <__ieee754_pow+0x232>
 800dc44:	4598      	cmp	r8, r3
 800dc46:	d80b      	bhi.n	800dc60 <__ieee754_pow+0x220>
 800dc48:	f1b9 0f00 	cmp.w	r9, #0
 800dc4c:	da0b      	bge.n	800dc66 <__ieee754_pow+0x226>
 800dc4e:	2000      	movs	r0, #0
 800dc50:	b011      	add	sp, #68	@ 0x44
 800dc52:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc56:	f000 be6f 	b.w	800e938 <__math_oflow>
 800dc5a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800dcc0 <__ieee754_pow+0x280>
 800dc5e:	e7e7      	b.n	800dc30 <__ieee754_pow+0x1f0>
 800dc60:	f1b9 0f00 	cmp.w	r9, #0
 800dc64:	dcf3      	bgt.n	800dc4e <__ieee754_pow+0x20e>
 800dc66:	2000      	movs	r0, #0
 800dc68:	b011      	add	sp, #68	@ 0x44
 800dc6a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc6e:	f000 be5b 	b.w	800e928 <__math_uflow>
 800dc72:	4598      	cmp	r8, r3
 800dc74:	d20c      	bcs.n	800dc90 <__ieee754_pow+0x250>
 800dc76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	f7f2 ff45 	bl	8000b0c <__aeabi_dcmplt>
 800dc82:	3800      	subs	r0, #0
 800dc84:	bf18      	it	ne
 800dc86:	2001      	movne	r0, #1
 800dc88:	f1b9 0f00 	cmp.w	r9, #0
 800dc8c:	daec      	bge.n	800dc68 <__ieee754_pow+0x228>
 800dc8e:	e7df      	b.n	800dc50 <__ieee754_pow+0x210>
 800dc90:	4b10      	ldr	r3, [pc, #64]	@ (800dcd4 <__ieee754_pow+0x294>)
 800dc92:	4598      	cmp	r8, r3
 800dc94:	f04f 0200 	mov.w	r2, #0
 800dc98:	d924      	bls.n	800dce4 <__ieee754_pow+0x2a4>
 800dc9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dc9e:	2300      	movs	r3, #0
 800dca0:	f7f2 ff34 	bl	8000b0c <__aeabi_dcmplt>
 800dca4:	3800      	subs	r0, #0
 800dca6:	bf18      	it	ne
 800dca8:	2001      	movne	r0, #1
 800dcaa:	f1b9 0f00 	cmp.w	r9, #0
 800dcae:	dccf      	bgt.n	800dc50 <__ieee754_pow+0x210>
 800dcb0:	e7da      	b.n	800dc68 <__ieee754_pow+0x228>
 800dcb2:	bf00      	nop
 800dcb4:	f3af 8000 	nop.w
 800dcb8:	00000000 	.word	0x00000000
 800dcbc:	3ff00000 	.word	0x3ff00000
 800dcc0:	00000000 	.word	0x00000000
 800dcc4:	bff00000 	.word	0xbff00000
 800dcc8:	fff00000 	.word	0xfff00000
 800dccc:	7ff00000 	.word	0x7ff00000
 800dcd0:	433fffff 	.word	0x433fffff
 800dcd4:	3ff00000 	.word	0x3ff00000
 800dcd8:	3fefffff 	.word	0x3fefffff
 800dcdc:	3fe00000 	.word	0x3fe00000
 800dce0:	43f00000 	.word	0x43f00000
 800dce4:	4b5a      	ldr	r3, [pc, #360]	@ (800de50 <__ieee754_pow+0x410>)
 800dce6:	f7f2 fae7 	bl	80002b8 <__aeabi_dsub>
 800dcea:	a351      	add	r3, pc, #324	@ (adr r3, 800de30 <__ieee754_pow+0x3f0>)
 800dcec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcf0:	4604      	mov	r4, r0
 800dcf2:	460d      	mov	r5, r1
 800dcf4:	f7f2 fc98 	bl	8000628 <__aeabi_dmul>
 800dcf8:	a34f      	add	r3, pc, #316	@ (adr r3, 800de38 <__ieee754_pow+0x3f8>)
 800dcfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcfe:	4606      	mov	r6, r0
 800dd00:	460f      	mov	r7, r1
 800dd02:	4620      	mov	r0, r4
 800dd04:	4629      	mov	r1, r5
 800dd06:	f7f2 fc8f 	bl	8000628 <__aeabi_dmul>
 800dd0a:	4b52      	ldr	r3, [pc, #328]	@ (800de54 <__ieee754_pow+0x414>)
 800dd0c:	4682      	mov	sl, r0
 800dd0e:	468b      	mov	fp, r1
 800dd10:	2200      	movs	r2, #0
 800dd12:	4620      	mov	r0, r4
 800dd14:	4629      	mov	r1, r5
 800dd16:	f7f2 fc87 	bl	8000628 <__aeabi_dmul>
 800dd1a:	4602      	mov	r2, r0
 800dd1c:	460b      	mov	r3, r1
 800dd1e:	a148      	add	r1, pc, #288	@ (adr r1, 800de40 <__ieee754_pow+0x400>)
 800dd20:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd24:	f7f2 fac8 	bl	80002b8 <__aeabi_dsub>
 800dd28:	4622      	mov	r2, r4
 800dd2a:	462b      	mov	r3, r5
 800dd2c:	f7f2 fc7c 	bl	8000628 <__aeabi_dmul>
 800dd30:	4602      	mov	r2, r0
 800dd32:	460b      	mov	r3, r1
 800dd34:	2000      	movs	r0, #0
 800dd36:	4948      	ldr	r1, [pc, #288]	@ (800de58 <__ieee754_pow+0x418>)
 800dd38:	f7f2 fabe 	bl	80002b8 <__aeabi_dsub>
 800dd3c:	4622      	mov	r2, r4
 800dd3e:	4680      	mov	r8, r0
 800dd40:	4689      	mov	r9, r1
 800dd42:	462b      	mov	r3, r5
 800dd44:	4620      	mov	r0, r4
 800dd46:	4629      	mov	r1, r5
 800dd48:	f7f2 fc6e 	bl	8000628 <__aeabi_dmul>
 800dd4c:	4602      	mov	r2, r0
 800dd4e:	460b      	mov	r3, r1
 800dd50:	4640      	mov	r0, r8
 800dd52:	4649      	mov	r1, r9
 800dd54:	f7f2 fc68 	bl	8000628 <__aeabi_dmul>
 800dd58:	a33b      	add	r3, pc, #236	@ (adr r3, 800de48 <__ieee754_pow+0x408>)
 800dd5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd5e:	f7f2 fc63 	bl	8000628 <__aeabi_dmul>
 800dd62:	4602      	mov	r2, r0
 800dd64:	460b      	mov	r3, r1
 800dd66:	4650      	mov	r0, sl
 800dd68:	4659      	mov	r1, fp
 800dd6a:	f7f2 faa5 	bl	80002b8 <__aeabi_dsub>
 800dd6e:	4602      	mov	r2, r0
 800dd70:	460b      	mov	r3, r1
 800dd72:	4680      	mov	r8, r0
 800dd74:	4689      	mov	r9, r1
 800dd76:	4630      	mov	r0, r6
 800dd78:	4639      	mov	r1, r7
 800dd7a:	f7f2 fa9f 	bl	80002bc <__adddf3>
 800dd7e:	2400      	movs	r4, #0
 800dd80:	4632      	mov	r2, r6
 800dd82:	463b      	mov	r3, r7
 800dd84:	4620      	mov	r0, r4
 800dd86:	460d      	mov	r5, r1
 800dd88:	f7f2 fa96 	bl	80002b8 <__aeabi_dsub>
 800dd8c:	4602      	mov	r2, r0
 800dd8e:	460b      	mov	r3, r1
 800dd90:	4640      	mov	r0, r8
 800dd92:	4649      	mov	r1, r9
 800dd94:	f7f2 fa90 	bl	80002b8 <__aeabi_dsub>
 800dd98:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dd9c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800dda0:	2300      	movs	r3, #0
 800dda2:	9304      	str	r3, [sp, #16]
 800dda4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800dda8:	4606      	mov	r6, r0
 800ddaa:	460f      	mov	r7, r1
 800ddac:	4652      	mov	r2, sl
 800ddae:	465b      	mov	r3, fp
 800ddb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ddb4:	f7f2 fa80 	bl	80002b8 <__aeabi_dsub>
 800ddb8:	4622      	mov	r2, r4
 800ddba:	462b      	mov	r3, r5
 800ddbc:	f7f2 fc34 	bl	8000628 <__aeabi_dmul>
 800ddc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ddc4:	4680      	mov	r8, r0
 800ddc6:	4689      	mov	r9, r1
 800ddc8:	4630      	mov	r0, r6
 800ddca:	4639      	mov	r1, r7
 800ddcc:	f7f2 fc2c 	bl	8000628 <__aeabi_dmul>
 800ddd0:	4602      	mov	r2, r0
 800ddd2:	460b      	mov	r3, r1
 800ddd4:	4640      	mov	r0, r8
 800ddd6:	4649      	mov	r1, r9
 800ddd8:	f7f2 fa70 	bl	80002bc <__adddf3>
 800dddc:	4652      	mov	r2, sl
 800ddde:	465b      	mov	r3, fp
 800dde0:	4606      	mov	r6, r0
 800dde2:	460f      	mov	r7, r1
 800dde4:	4620      	mov	r0, r4
 800dde6:	4629      	mov	r1, r5
 800dde8:	f7f2 fc1e 	bl	8000628 <__aeabi_dmul>
 800ddec:	460b      	mov	r3, r1
 800ddee:	4602      	mov	r2, r0
 800ddf0:	4680      	mov	r8, r0
 800ddf2:	4689      	mov	r9, r1
 800ddf4:	4630      	mov	r0, r6
 800ddf6:	4639      	mov	r1, r7
 800ddf8:	f7f2 fa60 	bl	80002bc <__adddf3>
 800ddfc:	4b17      	ldr	r3, [pc, #92]	@ (800de5c <__ieee754_pow+0x41c>)
 800ddfe:	4299      	cmp	r1, r3
 800de00:	4604      	mov	r4, r0
 800de02:	460d      	mov	r5, r1
 800de04:	468a      	mov	sl, r1
 800de06:	468b      	mov	fp, r1
 800de08:	f340 82ef 	ble.w	800e3ea <__ieee754_pow+0x9aa>
 800de0c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800de10:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800de14:	4303      	orrs	r3, r0
 800de16:	f000 81e8 	beq.w	800e1ea <__ieee754_pow+0x7aa>
 800de1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800de1e:	2200      	movs	r2, #0
 800de20:	2300      	movs	r3, #0
 800de22:	f7f2 fe73 	bl	8000b0c <__aeabi_dcmplt>
 800de26:	3800      	subs	r0, #0
 800de28:	bf18      	it	ne
 800de2a:	2001      	movne	r0, #1
 800de2c:	e710      	b.n	800dc50 <__ieee754_pow+0x210>
 800de2e:	bf00      	nop
 800de30:	60000000 	.word	0x60000000
 800de34:	3ff71547 	.word	0x3ff71547
 800de38:	f85ddf44 	.word	0xf85ddf44
 800de3c:	3e54ae0b 	.word	0x3e54ae0b
 800de40:	55555555 	.word	0x55555555
 800de44:	3fd55555 	.word	0x3fd55555
 800de48:	652b82fe 	.word	0x652b82fe
 800de4c:	3ff71547 	.word	0x3ff71547
 800de50:	3ff00000 	.word	0x3ff00000
 800de54:	3fd00000 	.word	0x3fd00000
 800de58:	3fe00000 	.word	0x3fe00000
 800de5c:	408fffff 	.word	0x408fffff
 800de60:	4bd5      	ldr	r3, [pc, #852]	@ (800e1b8 <__ieee754_pow+0x778>)
 800de62:	402b      	ands	r3, r5
 800de64:	2200      	movs	r2, #0
 800de66:	b92b      	cbnz	r3, 800de74 <__ieee754_pow+0x434>
 800de68:	4bd4      	ldr	r3, [pc, #848]	@ (800e1bc <__ieee754_pow+0x77c>)
 800de6a:	f7f2 fbdd 	bl	8000628 <__aeabi_dmul>
 800de6e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800de72:	468b      	mov	fp, r1
 800de74:	ea4f 532b 	mov.w	r3, fp, asr #20
 800de78:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800de7c:	4413      	add	r3, r2
 800de7e:	930a      	str	r3, [sp, #40]	@ 0x28
 800de80:	4bcf      	ldr	r3, [pc, #828]	@ (800e1c0 <__ieee754_pow+0x780>)
 800de82:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800de86:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800de8a:	459b      	cmp	fp, r3
 800de8c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800de90:	dd08      	ble.n	800dea4 <__ieee754_pow+0x464>
 800de92:	4bcc      	ldr	r3, [pc, #816]	@ (800e1c4 <__ieee754_pow+0x784>)
 800de94:	459b      	cmp	fp, r3
 800de96:	f340 81a5 	ble.w	800e1e4 <__ieee754_pow+0x7a4>
 800de9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800de9c:	3301      	adds	r3, #1
 800de9e:	930a      	str	r3, [sp, #40]	@ 0x28
 800dea0:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800dea4:	f04f 0a00 	mov.w	sl, #0
 800dea8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800deac:	930b      	str	r3, [sp, #44]	@ 0x2c
 800deae:	4bc6      	ldr	r3, [pc, #792]	@ (800e1c8 <__ieee754_pow+0x788>)
 800deb0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800deb4:	ed93 7b00 	vldr	d7, [r3]
 800deb8:	4629      	mov	r1, r5
 800deba:	ec53 2b17 	vmov	r2, r3, d7
 800debe:	ed8d 7b06 	vstr	d7, [sp, #24]
 800dec2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800dec6:	f7f2 f9f7 	bl	80002b8 <__aeabi_dsub>
 800deca:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800dece:	4606      	mov	r6, r0
 800ded0:	460f      	mov	r7, r1
 800ded2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ded6:	f7f2 f9f1 	bl	80002bc <__adddf3>
 800deda:	4602      	mov	r2, r0
 800dedc:	460b      	mov	r3, r1
 800dede:	2000      	movs	r0, #0
 800dee0:	49ba      	ldr	r1, [pc, #744]	@ (800e1cc <__ieee754_pow+0x78c>)
 800dee2:	f7f2 fccb 	bl	800087c <__aeabi_ddiv>
 800dee6:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800deea:	4602      	mov	r2, r0
 800deec:	460b      	mov	r3, r1
 800deee:	4630      	mov	r0, r6
 800def0:	4639      	mov	r1, r7
 800def2:	f7f2 fb99 	bl	8000628 <__aeabi_dmul>
 800def6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800defa:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800defe:	106d      	asrs	r5, r5, #1
 800df00:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800df04:	f04f 0b00 	mov.w	fp, #0
 800df08:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800df0c:	4661      	mov	r1, ip
 800df0e:	2200      	movs	r2, #0
 800df10:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800df14:	4658      	mov	r0, fp
 800df16:	46e1      	mov	r9, ip
 800df18:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800df1c:	4614      	mov	r4, r2
 800df1e:	461d      	mov	r5, r3
 800df20:	f7f2 fb82 	bl	8000628 <__aeabi_dmul>
 800df24:	4602      	mov	r2, r0
 800df26:	460b      	mov	r3, r1
 800df28:	4630      	mov	r0, r6
 800df2a:	4639      	mov	r1, r7
 800df2c:	f7f2 f9c4 	bl	80002b8 <__aeabi_dsub>
 800df30:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800df34:	4606      	mov	r6, r0
 800df36:	460f      	mov	r7, r1
 800df38:	4620      	mov	r0, r4
 800df3a:	4629      	mov	r1, r5
 800df3c:	f7f2 f9bc 	bl	80002b8 <__aeabi_dsub>
 800df40:	4602      	mov	r2, r0
 800df42:	460b      	mov	r3, r1
 800df44:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800df48:	f7f2 f9b6 	bl	80002b8 <__aeabi_dsub>
 800df4c:	465a      	mov	r2, fp
 800df4e:	464b      	mov	r3, r9
 800df50:	f7f2 fb6a 	bl	8000628 <__aeabi_dmul>
 800df54:	4602      	mov	r2, r0
 800df56:	460b      	mov	r3, r1
 800df58:	4630      	mov	r0, r6
 800df5a:	4639      	mov	r1, r7
 800df5c:	f7f2 f9ac 	bl	80002b8 <__aeabi_dsub>
 800df60:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800df64:	f7f2 fb60 	bl	8000628 <__aeabi_dmul>
 800df68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800df6c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800df70:	4610      	mov	r0, r2
 800df72:	4619      	mov	r1, r3
 800df74:	f7f2 fb58 	bl	8000628 <__aeabi_dmul>
 800df78:	a37d      	add	r3, pc, #500	@ (adr r3, 800e170 <__ieee754_pow+0x730>)
 800df7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df7e:	4604      	mov	r4, r0
 800df80:	460d      	mov	r5, r1
 800df82:	f7f2 fb51 	bl	8000628 <__aeabi_dmul>
 800df86:	a37c      	add	r3, pc, #496	@ (adr r3, 800e178 <__ieee754_pow+0x738>)
 800df88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df8c:	f7f2 f996 	bl	80002bc <__adddf3>
 800df90:	4622      	mov	r2, r4
 800df92:	462b      	mov	r3, r5
 800df94:	f7f2 fb48 	bl	8000628 <__aeabi_dmul>
 800df98:	a379      	add	r3, pc, #484	@ (adr r3, 800e180 <__ieee754_pow+0x740>)
 800df9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df9e:	f7f2 f98d 	bl	80002bc <__adddf3>
 800dfa2:	4622      	mov	r2, r4
 800dfa4:	462b      	mov	r3, r5
 800dfa6:	f7f2 fb3f 	bl	8000628 <__aeabi_dmul>
 800dfaa:	a377      	add	r3, pc, #476	@ (adr r3, 800e188 <__ieee754_pow+0x748>)
 800dfac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfb0:	f7f2 f984 	bl	80002bc <__adddf3>
 800dfb4:	4622      	mov	r2, r4
 800dfb6:	462b      	mov	r3, r5
 800dfb8:	f7f2 fb36 	bl	8000628 <__aeabi_dmul>
 800dfbc:	a374      	add	r3, pc, #464	@ (adr r3, 800e190 <__ieee754_pow+0x750>)
 800dfbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfc2:	f7f2 f97b 	bl	80002bc <__adddf3>
 800dfc6:	4622      	mov	r2, r4
 800dfc8:	462b      	mov	r3, r5
 800dfca:	f7f2 fb2d 	bl	8000628 <__aeabi_dmul>
 800dfce:	a372      	add	r3, pc, #456	@ (adr r3, 800e198 <__ieee754_pow+0x758>)
 800dfd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfd4:	f7f2 f972 	bl	80002bc <__adddf3>
 800dfd8:	4622      	mov	r2, r4
 800dfda:	4606      	mov	r6, r0
 800dfdc:	460f      	mov	r7, r1
 800dfde:	462b      	mov	r3, r5
 800dfe0:	4620      	mov	r0, r4
 800dfe2:	4629      	mov	r1, r5
 800dfe4:	f7f2 fb20 	bl	8000628 <__aeabi_dmul>
 800dfe8:	4602      	mov	r2, r0
 800dfea:	460b      	mov	r3, r1
 800dfec:	4630      	mov	r0, r6
 800dfee:	4639      	mov	r1, r7
 800dff0:	f7f2 fb1a 	bl	8000628 <__aeabi_dmul>
 800dff4:	465a      	mov	r2, fp
 800dff6:	4604      	mov	r4, r0
 800dff8:	460d      	mov	r5, r1
 800dffa:	464b      	mov	r3, r9
 800dffc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e000:	f7f2 f95c 	bl	80002bc <__adddf3>
 800e004:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e008:	f7f2 fb0e 	bl	8000628 <__aeabi_dmul>
 800e00c:	4622      	mov	r2, r4
 800e00e:	462b      	mov	r3, r5
 800e010:	f7f2 f954 	bl	80002bc <__adddf3>
 800e014:	465a      	mov	r2, fp
 800e016:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e01a:	464b      	mov	r3, r9
 800e01c:	4658      	mov	r0, fp
 800e01e:	4649      	mov	r1, r9
 800e020:	f7f2 fb02 	bl	8000628 <__aeabi_dmul>
 800e024:	4b6a      	ldr	r3, [pc, #424]	@ (800e1d0 <__ieee754_pow+0x790>)
 800e026:	2200      	movs	r2, #0
 800e028:	4606      	mov	r6, r0
 800e02a:	460f      	mov	r7, r1
 800e02c:	f7f2 f946 	bl	80002bc <__adddf3>
 800e030:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e034:	f7f2 f942 	bl	80002bc <__adddf3>
 800e038:	46d8      	mov	r8, fp
 800e03a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800e03e:	460d      	mov	r5, r1
 800e040:	465a      	mov	r2, fp
 800e042:	460b      	mov	r3, r1
 800e044:	4640      	mov	r0, r8
 800e046:	4649      	mov	r1, r9
 800e048:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800e04c:	f7f2 faec 	bl	8000628 <__aeabi_dmul>
 800e050:	465c      	mov	r4, fp
 800e052:	4680      	mov	r8, r0
 800e054:	4689      	mov	r9, r1
 800e056:	4b5e      	ldr	r3, [pc, #376]	@ (800e1d0 <__ieee754_pow+0x790>)
 800e058:	2200      	movs	r2, #0
 800e05a:	4620      	mov	r0, r4
 800e05c:	4629      	mov	r1, r5
 800e05e:	f7f2 f92b 	bl	80002b8 <__aeabi_dsub>
 800e062:	4632      	mov	r2, r6
 800e064:	463b      	mov	r3, r7
 800e066:	f7f2 f927 	bl	80002b8 <__aeabi_dsub>
 800e06a:	4602      	mov	r2, r0
 800e06c:	460b      	mov	r3, r1
 800e06e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e072:	f7f2 f921 	bl	80002b8 <__aeabi_dsub>
 800e076:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e07a:	f7f2 fad5 	bl	8000628 <__aeabi_dmul>
 800e07e:	4622      	mov	r2, r4
 800e080:	4606      	mov	r6, r0
 800e082:	460f      	mov	r7, r1
 800e084:	462b      	mov	r3, r5
 800e086:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e08a:	f7f2 facd 	bl	8000628 <__aeabi_dmul>
 800e08e:	4602      	mov	r2, r0
 800e090:	460b      	mov	r3, r1
 800e092:	4630      	mov	r0, r6
 800e094:	4639      	mov	r1, r7
 800e096:	f7f2 f911 	bl	80002bc <__adddf3>
 800e09a:	4606      	mov	r6, r0
 800e09c:	460f      	mov	r7, r1
 800e09e:	4602      	mov	r2, r0
 800e0a0:	460b      	mov	r3, r1
 800e0a2:	4640      	mov	r0, r8
 800e0a4:	4649      	mov	r1, r9
 800e0a6:	f7f2 f909 	bl	80002bc <__adddf3>
 800e0aa:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800e0ae:	a33c      	add	r3, pc, #240	@ (adr r3, 800e1a0 <__ieee754_pow+0x760>)
 800e0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0b4:	4658      	mov	r0, fp
 800e0b6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800e0ba:	460d      	mov	r5, r1
 800e0bc:	f7f2 fab4 	bl	8000628 <__aeabi_dmul>
 800e0c0:	465c      	mov	r4, fp
 800e0c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e0c6:	4642      	mov	r2, r8
 800e0c8:	464b      	mov	r3, r9
 800e0ca:	4620      	mov	r0, r4
 800e0cc:	4629      	mov	r1, r5
 800e0ce:	f7f2 f8f3 	bl	80002b8 <__aeabi_dsub>
 800e0d2:	4602      	mov	r2, r0
 800e0d4:	460b      	mov	r3, r1
 800e0d6:	4630      	mov	r0, r6
 800e0d8:	4639      	mov	r1, r7
 800e0da:	f7f2 f8ed 	bl	80002b8 <__aeabi_dsub>
 800e0de:	a332      	add	r3, pc, #200	@ (adr r3, 800e1a8 <__ieee754_pow+0x768>)
 800e0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0e4:	f7f2 faa0 	bl	8000628 <__aeabi_dmul>
 800e0e8:	a331      	add	r3, pc, #196	@ (adr r3, 800e1b0 <__ieee754_pow+0x770>)
 800e0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ee:	4606      	mov	r6, r0
 800e0f0:	460f      	mov	r7, r1
 800e0f2:	4620      	mov	r0, r4
 800e0f4:	4629      	mov	r1, r5
 800e0f6:	f7f2 fa97 	bl	8000628 <__aeabi_dmul>
 800e0fa:	4602      	mov	r2, r0
 800e0fc:	460b      	mov	r3, r1
 800e0fe:	4630      	mov	r0, r6
 800e100:	4639      	mov	r1, r7
 800e102:	f7f2 f8db 	bl	80002bc <__adddf3>
 800e106:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e108:	4b32      	ldr	r3, [pc, #200]	@ (800e1d4 <__ieee754_pow+0x794>)
 800e10a:	4413      	add	r3, r2
 800e10c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e110:	f7f2 f8d4 	bl	80002bc <__adddf3>
 800e114:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e118:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e11a:	f7f2 fa1b 	bl	8000554 <__aeabi_i2d>
 800e11e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e120:	4b2d      	ldr	r3, [pc, #180]	@ (800e1d8 <__ieee754_pow+0x798>)
 800e122:	4413      	add	r3, r2
 800e124:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e128:	4606      	mov	r6, r0
 800e12a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e12e:	460f      	mov	r7, r1
 800e130:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e134:	f7f2 f8c2 	bl	80002bc <__adddf3>
 800e138:	4642      	mov	r2, r8
 800e13a:	464b      	mov	r3, r9
 800e13c:	f7f2 f8be 	bl	80002bc <__adddf3>
 800e140:	4632      	mov	r2, r6
 800e142:	463b      	mov	r3, r7
 800e144:	f7f2 f8ba 	bl	80002bc <__adddf3>
 800e148:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800e14c:	4632      	mov	r2, r6
 800e14e:	463b      	mov	r3, r7
 800e150:	4658      	mov	r0, fp
 800e152:	460d      	mov	r5, r1
 800e154:	f7f2 f8b0 	bl	80002b8 <__aeabi_dsub>
 800e158:	4642      	mov	r2, r8
 800e15a:	464b      	mov	r3, r9
 800e15c:	f7f2 f8ac 	bl	80002b8 <__aeabi_dsub>
 800e160:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e164:	f7f2 f8a8 	bl	80002b8 <__aeabi_dsub>
 800e168:	465c      	mov	r4, fp
 800e16a:	4602      	mov	r2, r0
 800e16c:	e036      	b.n	800e1dc <__ieee754_pow+0x79c>
 800e16e:	bf00      	nop
 800e170:	4a454eef 	.word	0x4a454eef
 800e174:	3fca7e28 	.word	0x3fca7e28
 800e178:	93c9db65 	.word	0x93c9db65
 800e17c:	3fcd864a 	.word	0x3fcd864a
 800e180:	a91d4101 	.word	0xa91d4101
 800e184:	3fd17460 	.word	0x3fd17460
 800e188:	518f264d 	.word	0x518f264d
 800e18c:	3fd55555 	.word	0x3fd55555
 800e190:	db6fabff 	.word	0xdb6fabff
 800e194:	3fdb6db6 	.word	0x3fdb6db6
 800e198:	33333303 	.word	0x33333303
 800e19c:	3fe33333 	.word	0x3fe33333
 800e1a0:	e0000000 	.word	0xe0000000
 800e1a4:	3feec709 	.word	0x3feec709
 800e1a8:	dc3a03fd 	.word	0xdc3a03fd
 800e1ac:	3feec709 	.word	0x3feec709
 800e1b0:	145b01f5 	.word	0x145b01f5
 800e1b4:	be3e2fe0 	.word	0xbe3e2fe0
 800e1b8:	7ff00000 	.word	0x7ff00000
 800e1bc:	43400000 	.word	0x43400000
 800e1c0:	0003988e 	.word	0x0003988e
 800e1c4:	000bb679 	.word	0x000bb679
 800e1c8:	0800eda0 	.word	0x0800eda0
 800e1cc:	3ff00000 	.word	0x3ff00000
 800e1d0:	40080000 	.word	0x40080000
 800e1d4:	0800ed80 	.word	0x0800ed80
 800e1d8:	0800ed90 	.word	0x0800ed90
 800e1dc:	460b      	mov	r3, r1
 800e1de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e1e2:	e5d7      	b.n	800dd94 <__ieee754_pow+0x354>
 800e1e4:	f04f 0a01 	mov.w	sl, #1
 800e1e8:	e65e      	b.n	800dea8 <__ieee754_pow+0x468>
 800e1ea:	a3b4      	add	r3, pc, #720	@ (adr r3, 800e4bc <__ieee754_pow+0xa7c>)
 800e1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1f0:	4630      	mov	r0, r6
 800e1f2:	4639      	mov	r1, r7
 800e1f4:	f7f2 f862 	bl	80002bc <__adddf3>
 800e1f8:	4642      	mov	r2, r8
 800e1fa:	e9cd 0100 	strd	r0, r1, [sp]
 800e1fe:	464b      	mov	r3, r9
 800e200:	4620      	mov	r0, r4
 800e202:	4629      	mov	r1, r5
 800e204:	f7f2 f858 	bl	80002b8 <__aeabi_dsub>
 800e208:	4602      	mov	r2, r0
 800e20a:	460b      	mov	r3, r1
 800e20c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e210:	f7f2 fc9a 	bl	8000b48 <__aeabi_dcmpgt>
 800e214:	2800      	cmp	r0, #0
 800e216:	f47f ae00 	bne.w	800de1a <__ieee754_pow+0x3da>
 800e21a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800e21e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800e222:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800e226:	fa43 fa0a 	asr.w	sl, r3, sl
 800e22a:	44da      	add	sl, fp
 800e22c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800e230:	489d      	ldr	r0, [pc, #628]	@ (800e4a8 <__ieee754_pow+0xa68>)
 800e232:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800e236:	4108      	asrs	r0, r1
 800e238:	ea00 030a 	and.w	r3, r0, sl
 800e23c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800e240:	f1c1 0114 	rsb	r1, r1, #20
 800e244:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800e248:	fa4a fa01 	asr.w	sl, sl, r1
 800e24c:	f1bb 0f00 	cmp.w	fp, #0
 800e250:	4640      	mov	r0, r8
 800e252:	4649      	mov	r1, r9
 800e254:	f04f 0200 	mov.w	r2, #0
 800e258:	bfb8      	it	lt
 800e25a:	f1ca 0a00 	rsblt	sl, sl, #0
 800e25e:	f7f2 f82b 	bl	80002b8 <__aeabi_dsub>
 800e262:	4680      	mov	r8, r0
 800e264:	4689      	mov	r9, r1
 800e266:	4632      	mov	r2, r6
 800e268:	463b      	mov	r3, r7
 800e26a:	4640      	mov	r0, r8
 800e26c:	4649      	mov	r1, r9
 800e26e:	f7f2 f825 	bl	80002bc <__adddf3>
 800e272:	2400      	movs	r4, #0
 800e274:	a37c      	add	r3, pc, #496	@ (adr r3, 800e468 <__ieee754_pow+0xa28>)
 800e276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e27a:	4620      	mov	r0, r4
 800e27c:	460d      	mov	r5, r1
 800e27e:	f7f2 f9d3 	bl	8000628 <__aeabi_dmul>
 800e282:	4642      	mov	r2, r8
 800e284:	e9cd 0100 	strd	r0, r1, [sp]
 800e288:	464b      	mov	r3, r9
 800e28a:	4620      	mov	r0, r4
 800e28c:	4629      	mov	r1, r5
 800e28e:	f7f2 f813 	bl	80002b8 <__aeabi_dsub>
 800e292:	4602      	mov	r2, r0
 800e294:	460b      	mov	r3, r1
 800e296:	4630      	mov	r0, r6
 800e298:	4639      	mov	r1, r7
 800e29a:	f7f2 f80d 	bl	80002b8 <__aeabi_dsub>
 800e29e:	a374      	add	r3, pc, #464	@ (adr r3, 800e470 <__ieee754_pow+0xa30>)
 800e2a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2a4:	f7f2 f9c0 	bl	8000628 <__aeabi_dmul>
 800e2a8:	a373      	add	r3, pc, #460	@ (adr r3, 800e478 <__ieee754_pow+0xa38>)
 800e2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ae:	4680      	mov	r8, r0
 800e2b0:	4689      	mov	r9, r1
 800e2b2:	4620      	mov	r0, r4
 800e2b4:	4629      	mov	r1, r5
 800e2b6:	f7f2 f9b7 	bl	8000628 <__aeabi_dmul>
 800e2ba:	4602      	mov	r2, r0
 800e2bc:	460b      	mov	r3, r1
 800e2be:	4640      	mov	r0, r8
 800e2c0:	4649      	mov	r1, r9
 800e2c2:	f7f1 fffb 	bl	80002bc <__adddf3>
 800e2c6:	4604      	mov	r4, r0
 800e2c8:	460d      	mov	r5, r1
 800e2ca:	4602      	mov	r2, r0
 800e2cc:	460b      	mov	r3, r1
 800e2ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e2d2:	f7f1 fff3 	bl	80002bc <__adddf3>
 800e2d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e2da:	4680      	mov	r8, r0
 800e2dc:	4689      	mov	r9, r1
 800e2de:	f7f1 ffeb 	bl	80002b8 <__aeabi_dsub>
 800e2e2:	4602      	mov	r2, r0
 800e2e4:	460b      	mov	r3, r1
 800e2e6:	4620      	mov	r0, r4
 800e2e8:	4629      	mov	r1, r5
 800e2ea:	f7f1 ffe5 	bl	80002b8 <__aeabi_dsub>
 800e2ee:	4642      	mov	r2, r8
 800e2f0:	4606      	mov	r6, r0
 800e2f2:	460f      	mov	r7, r1
 800e2f4:	464b      	mov	r3, r9
 800e2f6:	4640      	mov	r0, r8
 800e2f8:	4649      	mov	r1, r9
 800e2fa:	f7f2 f995 	bl	8000628 <__aeabi_dmul>
 800e2fe:	a360      	add	r3, pc, #384	@ (adr r3, 800e480 <__ieee754_pow+0xa40>)
 800e300:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e304:	4604      	mov	r4, r0
 800e306:	460d      	mov	r5, r1
 800e308:	f7f2 f98e 	bl	8000628 <__aeabi_dmul>
 800e30c:	a35e      	add	r3, pc, #376	@ (adr r3, 800e488 <__ieee754_pow+0xa48>)
 800e30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e312:	f7f1 ffd1 	bl	80002b8 <__aeabi_dsub>
 800e316:	4622      	mov	r2, r4
 800e318:	462b      	mov	r3, r5
 800e31a:	f7f2 f985 	bl	8000628 <__aeabi_dmul>
 800e31e:	a35c      	add	r3, pc, #368	@ (adr r3, 800e490 <__ieee754_pow+0xa50>)
 800e320:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e324:	f7f1 ffca 	bl	80002bc <__adddf3>
 800e328:	4622      	mov	r2, r4
 800e32a:	462b      	mov	r3, r5
 800e32c:	f7f2 f97c 	bl	8000628 <__aeabi_dmul>
 800e330:	a359      	add	r3, pc, #356	@ (adr r3, 800e498 <__ieee754_pow+0xa58>)
 800e332:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e336:	f7f1 ffbf 	bl	80002b8 <__aeabi_dsub>
 800e33a:	4622      	mov	r2, r4
 800e33c:	462b      	mov	r3, r5
 800e33e:	f7f2 f973 	bl	8000628 <__aeabi_dmul>
 800e342:	a357      	add	r3, pc, #348	@ (adr r3, 800e4a0 <__ieee754_pow+0xa60>)
 800e344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e348:	f7f1 ffb8 	bl	80002bc <__adddf3>
 800e34c:	4622      	mov	r2, r4
 800e34e:	462b      	mov	r3, r5
 800e350:	f7f2 f96a 	bl	8000628 <__aeabi_dmul>
 800e354:	4602      	mov	r2, r0
 800e356:	460b      	mov	r3, r1
 800e358:	4640      	mov	r0, r8
 800e35a:	4649      	mov	r1, r9
 800e35c:	f7f1 ffac 	bl	80002b8 <__aeabi_dsub>
 800e360:	4604      	mov	r4, r0
 800e362:	460d      	mov	r5, r1
 800e364:	4602      	mov	r2, r0
 800e366:	460b      	mov	r3, r1
 800e368:	4640      	mov	r0, r8
 800e36a:	4649      	mov	r1, r9
 800e36c:	f7f2 f95c 	bl	8000628 <__aeabi_dmul>
 800e370:	2200      	movs	r2, #0
 800e372:	e9cd 0100 	strd	r0, r1, [sp]
 800e376:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e37a:	4620      	mov	r0, r4
 800e37c:	4629      	mov	r1, r5
 800e37e:	f7f1 ff9b 	bl	80002b8 <__aeabi_dsub>
 800e382:	4602      	mov	r2, r0
 800e384:	460b      	mov	r3, r1
 800e386:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e38a:	f7f2 fa77 	bl	800087c <__aeabi_ddiv>
 800e38e:	4632      	mov	r2, r6
 800e390:	4604      	mov	r4, r0
 800e392:	460d      	mov	r5, r1
 800e394:	463b      	mov	r3, r7
 800e396:	4640      	mov	r0, r8
 800e398:	4649      	mov	r1, r9
 800e39a:	f7f2 f945 	bl	8000628 <__aeabi_dmul>
 800e39e:	4632      	mov	r2, r6
 800e3a0:	463b      	mov	r3, r7
 800e3a2:	f7f1 ff8b 	bl	80002bc <__adddf3>
 800e3a6:	4602      	mov	r2, r0
 800e3a8:	460b      	mov	r3, r1
 800e3aa:	4620      	mov	r0, r4
 800e3ac:	4629      	mov	r1, r5
 800e3ae:	f7f1 ff83 	bl	80002b8 <__aeabi_dsub>
 800e3b2:	4642      	mov	r2, r8
 800e3b4:	464b      	mov	r3, r9
 800e3b6:	f7f1 ff7f 	bl	80002b8 <__aeabi_dsub>
 800e3ba:	460b      	mov	r3, r1
 800e3bc:	4602      	mov	r2, r0
 800e3be:	493b      	ldr	r1, [pc, #236]	@ (800e4ac <__ieee754_pow+0xa6c>)
 800e3c0:	2000      	movs	r0, #0
 800e3c2:	f7f1 ff79 	bl	80002b8 <__aeabi_dsub>
 800e3c6:	ec41 0b10 	vmov	d0, r0, r1
 800e3ca:	ee10 3a90 	vmov	r3, s1
 800e3ce:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800e3d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e3d6:	da30      	bge.n	800e43a <__ieee754_pow+0x9fa>
 800e3d8:	4650      	mov	r0, sl
 800e3da:	f000 f9f9 	bl	800e7d0 <scalbn>
 800e3de:	ec51 0b10 	vmov	r0, r1, d0
 800e3e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e3e6:	f7ff bbd2 	b.w	800db8e <__ieee754_pow+0x14e>
 800e3ea:	4c31      	ldr	r4, [pc, #196]	@ (800e4b0 <__ieee754_pow+0xa70>)
 800e3ec:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e3f0:	42a3      	cmp	r3, r4
 800e3f2:	d91a      	bls.n	800e42a <__ieee754_pow+0x9ea>
 800e3f4:	4b2f      	ldr	r3, [pc, #188]	@ (800e4b4 <__ieee754_pow+0xa74>)
 800e3f6:	440b      	add	r3, r1
 800e3f8:	4303      	orrs	r3, r0
 800e3fa:	d009      	beq.n	800e410 <__ieee754_pow+0x9d0>
 800e3fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e400:	2200      	movs	r2, #0
 800e402:	2300      	movs	r3, #0
 800e404:	f7f2 fb82 	bl	8000b0c <__aeabi_dcmplt>
 800e408:	3800      	subs	r0, #0
 800e40a:	bf18      	it	ne
 800e40c:	2001      	movne	r0, #1
 800e40e:	e42b      	b.n	800dc68 <__ieee754_pow+0x228>
 800e410:	4642      	mov	r2, r8
 800e412:	464b      	mov	r3, r9
 800e414:	f7f1 ff50 	bl	80002b8 <__aeabi_dsub>
 800e418:	4632      	mov	r2, r6
 800e41a:	463b      	mov	r3, r7
 800e41c:	f7f2 fb8a 	bl	8000b34 <__aeabi_dcmpge>
 800e420:	2800      	cmp	r0, #0
 800e422:	d1eb      	bne.n	800e3fc <__ieee754_pow+0x9bc>
 800e424:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800e4c4 <__ieee754_pow+0xa84>
 800e428:	e6f7      	b.n	800e21a <__ieee754_pow+0x7da>
 800e42a:	469a      	mov	sl, r3
 800e42c:	4b22      	ldr	r3, [pc, #136]	@ (800e4b8 <__ieee754_pow+0xa78>)
 800e42e:	459a      	cmp	sl, r3
 800e430:	f63f aef3 	bhi.w	800e21a <__ieee754_pow+0x7da>
 800e434:	f8dd a010 	ldr.w	sl, [sp, #16]
 800e438:	e715      	b.n	800e266 <__ieee754_pow+0x826>
 800e43a:	ec51 0b10 	vmov	r0, r1, d0
 800e43e:	4619      	mov	r1, r3
 800e440:	e7cf      	b.n	800e3e2 <__ieee754_pow+0x9a2>
 800e442:	491a      	ldr	r1, [pc, #104]	@ (800e4ac <__ieee754_pow+0xa6c>)
 800e444:	2000      	movs	r0, #0
 800e446:	f7ff bb18 	b.w	800da7a <__ieee754_pow+0x3a>
 800e44a:	2000      	movs	r0, #0
 800e44c:	2100      	movs	r1, #0
 800e44e:	f7ff bb14 	b.w	800da7a <__ieee754_pow+0x3a>
 800e452:	4630      	mov	r0, r6
 800e454:	4639      	mov	r1, r7
 800e456:	f7ff bb10 	b.w	800da7a <__ieee754_pow+0x3a>
 800e45a:	460c      	mov	r4, r1
 800e45c:	f7ff bb5e 	b.w	800db1c <__ieee754_pow+0xdc>
 800e460:	2400      	movs	r4, #0
 800e462:	f7ff bb49 	b.w	800daf8 <__ieee754_pow+0xb8>
 800e466:	bf00      	nop
 800e468:	00000000 	.word	0x00000000
 800e46c:	3fe62e43 	.word	0x3fe62e43
 800e470:	fefa39ef 	.word	0xfefa39ef
 800e474:	3fe62e42 	.word	0x3fe62e42
 800e478:	0ca86c39 	.word	0x0ca86c39
 800e47c:	be205c61 	.word	0xbe205c61
 800e480:	72bea4d0 	.word	0x72bea4d0
 800e484:	3e663769 	.word	0x3e663769
 800e488:	c5d26bf1 	.word	0xc5d26bf1
 800e48c:	3ebbbd41 	.word	0x3ebbbd41
 800e490:	af25de2c 	.word	0xaf25de2c
 800e494:	3f11566a 	.word	0x3f11566a
 800e498:	16bebd93 	.word	0x16bebd93
 800e49c:	3f66c16c 	.word	0x3f66c16c
 800e4a0:	5555553e 	.word	0x5555553e
 800e4a4:	3fc55555 	.word	0x3fc55555
 800e4a8:	fff00000 	.word	0xfff00000
 800e4ac:	3ff00000 	.word	0x3ff00000
 800e4b0:	4090cbff 	.word	0x4090cbff
 800e4b4:	3f6f3400 	.word	0x3f6f3400
 800e4b8:	3fe00000 	.word	0x3fe00000
 800e4bc:	652b82fe 	.word	0x652b82fe
 800e4c0:	3c971547 	.word	0x3c971547
 800e4c4:	4090cc00 	.word	0x4090cc00

0800e4c8 <fabs>:
 800e4c8:	ec51 0b10 	vmov	r0, r1, d0
 800e4cc:	4602      	mov	r2, r0
 800e4ce:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e4d2:	ec43 2b10 	vmov	d0, r2, r3
 800e4d6:	4770      	bx	lr

0800e4d8 <__ieee754_atan2f>:
 800e4d8:	ee10 2a90 	vmov	r2, s1
 800e4dc:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800e4e0:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800e4e4:	b510      	push	{r4, lr}
 800e4e6:	eef0 7a40 	vmov.f32	s15, s0
 800e4ea:	d806      	bhi.n	800e4fa <__ieee754_atan2f+0x22>
 800e4ec:	ee10 0a10 	vmov	r0, s0
 800e4f0:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800e4f4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800e4f8:	d904      	bls.n	800e504 <__ieee754_atan2f+0x2c>
 800e4fa:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800e4fe:	eeb0 0a67 	vmov.f32	s0, s15
 800e502:	bd10      	pop	{r4, pc}
 800e504:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800e508:	d103      	bne.n	800e512 <__ieee754_atan2f+0x3a>
 800e50a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e50e:	f000 b883 	b.w	800e618 <atanf>
 800e512:	1794      	asrs	r4, r2, #30
 800e514:	f004 0402 	and.w	r4, r4, #2
 800e518:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800e51c:	b943      	cbnz	r3, 800e530 <__ieee754_atan2f+0x58>
 800e51e:	2c02      	cmp	r4, #2
 800e520:	d05e      	beq.n	800e5e0 <__ieee754_atan2f+0x108>
 800e522:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800e5f4 <__ieee754_atan2f+0x11c>
 800e526:	2c03      	cmp	r4, #3
 800e528:	bf08      	it	eq
 800e52a:	eef0 7a47 	vmoveq.f32	s15, s14
 800e52e:	e7e6      	b.n	800e4fe <__ieee754_atan2f+0x26>
 800e530:	b941      	cbnz	r1, 800e544 <__ieee754_atan2f+0x6c>
 800e532:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800e5f8 <__ieee754_atan2f+0x120>
 800e536:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800e5fc <__ieee754_atan2f+0x124>
 800e53a:	2800      	cmp	r0, #0
 800e53c:	bfb8      	it	lt
 800e53e:	eef0 7a47 	vmovlt.f32	s15, s14
 800e542:	e7dc      	b.n	800e4fe <__ieee754_atan2f+0x26>
 800e544:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800e548:	d110      	bne.n	800e56c <__ieee754_atan2f+0x94>
 800e54a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800e54e:	f104 34ff 	add.w	r4, r4, #4294967295
 800e552:	d107      	bne.n	800e564 <__ieee754_atan2f+0x8c>
 800e554:	2c02      	cmp	r4, #2
 800e556:	d846      	bhi.n	800e5e6 <__ieee754_atan2f+0x10e>
 800e558:	4b29      	ldr	r3, [pc, #164]	@ (800e600 <__ieee754_atan2f+0x128>)
 800e55a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e55e:	edd3 7a00 	vldr	s15, [r3]
 800e562:	e7cc      	b.n	800e4fe <__ieee754_atan2f+0x26>
 800e564:	2c02      	cmp	r4, #2
 800e566:	d841      	bhi.n	800e5ec <__ieee754_atan2f+0x114>
 800e568:	4b26      	ldr	r3, [pc, #152]	@ (800e604 <__ieee754_atan2f+0x12c>)
 800e56a:	e7f6      	b.n	800e55a <__ieee754_atan2f+0x82>
 800e56c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800e570:	d0df      	beq.n	800e532 <__ieee754_atan2f+0x5a>
 800e572:	1a5b      	subs	r3, r3, r1
 800e574:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800e578:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800e57c:	da1a      	bge.n	800e5b4 <__ieee754_atan2f+0xdc>
 800e57e:	2a00      	cmp	r2, #0
 800e580:	da01      	bge.n	800e586 <__ieee754_atan2f+0xae>
 800e582:	313c      	adds	r1, #60	@ 0x3c
 800e584:	db19      	blt.n	800e5ba <__ieee754_atan2f+0xe2>
 800e586:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800e58a:	f000 f919 	bl	800e7c0 <fabsf>
 800e58e:	f000 f843 	bl	800e618 <atanf>
 800e592:	eef0 7a40 	vmov.f32	s15, s0
 800e596:	2c01      	cmp	r4, #1
 800e598:	d012      	beq.n	800e5c0 <__ieee754_atan2f+0xe8>
 800e59a:	2c02      	cmp	r4, #2
 800e59c:	d017      	beq.n	800e5ce <__ieee754_atan2f+0xf6>
 800e59e:	2c00      	cmp	r4, #0
 800e5a0:	d0ad      	beq.n	800e4fe <__ieee754_atan2f+0x26>
 800e5a2:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800e608 <__ieee754_atan2f+0x130>
 800e5a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e5aa:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800e60c <__ieee754_atan2f+0x134>
 800e5ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e5b2:	e7a4      	b.n	800e4fe <__ieee754_atan2f+0x26>
 800e5b4:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800e5f8 <__ieee754_atan2f+0x120>
 800e5b8:	e7ed      	b.n	800e596 <__ieee754_atan2f+0xbe>
 800e5ba:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800e610 <__ieee754_atan2f+0x138>
 800e5be:	e7ea      	b.n	800e596 <__ieee754_atan2f+0xbe>
 800e5c0:	ee17 3a90 	vmov	r3, s15
 800e5c4:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800e5c8:	ee07 3a90 	vmov	s15, r3
 800e5cc:	e797      	b.n	800e4fe <__ieee754_atan2f+0x26>
 800e5ce:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800e608 <__ieee754_atan2f+0x130>
 800e5d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e5d6:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800e60c <__ieee754_atan2f+0x134>
 800e5da:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e5de:	e78e      	b.n	800e4fe <__ieee754_atan2f+0x26>
 800e5e0:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800e60c <__ieee754_atan2f+0x134>
 800e5e4:	e78b      	b.n	800e4fe <__ieee754_atan2f+0x26>
 800e5e6:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800e614 <__ieee754_atan2f+0x13c>
 800e5ea:	e788      	b.n	800e4fe <__ieee754_atan2f+0x26>
 800e5ec:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800e610 <__ieee754_atan2f+0x138>
 800e5f0:	e785      	b.n	800e4fe <__ieee754_atan2f+0x26>
 800e5f2:	bf00      	nop
 800e5f4:	c0490fdb 	.word	0xc0490fdb
 800e5f8:	3fc90fdb 	.word	0x3fc90fdb
 800e5fc:	bfc90fdb 	.word	0xbfc90fdb
 800e600:	0800edbc 	.word	0x0800edbc
 800e604:	0800edb0 	.word	0x0800edb0
 800e608:	33bbbd2e 	.word	0x33bbbd2e
 800e60c:	40490fdb 	.word	0x40490fdb
 800e610:	00000000 	.word	0x00000000
 800e614:	3f490fdb 	.word	0x3f490fdb

0800e618 <atanf>:
 800e618:	b538      	push	{r3, r4, r5, lr}
 800e61a:	ee10 5a10 	vmov	r5, s0
 800e61e:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800e622:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800e626:	eef0 7a40 	vmov.f32	s15, s0
 800e62a:	d310      	bcc.n	800e64e <atanf+0x36>
 800e62c:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800e630:	d904      	bls.n	800e63c <atanf+0x24>
 800e632:	ee70 7a00 	vadd.f32	s15, s0, s0
 800e636:	eeb0 0a67 	vmov.f32	s0, s15
 800e63a:	bd38      	pop	{r3, r4, r5, pc}
 800e63c:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800e774 <atanf+0x15c>
 800e640:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800e778 <atanf+0x160>
 800e644:	2d00      	cmp	r5, #0
 800e646:	bfc8      	it	gt
 800e648:	eef0 7a47 	vmovgt.f32	s15, s14
 800e64c:	e7f3      	b.n	800e636 <atanf+0x1e>
 800e64e:	4b4b      	ldr	r3, [pc, #300]	@ (800e77c <atanf+0x164>)
 800e650:	429c      	cmp	r4, r3
 800e652:	d810      	bhi.n	800e676 <atanf+0x5e>
 800e654:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800e658:	d20a      	bcs.n	800e670 <atanf+0x58>
 800e65a:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800e780 <atanf+0x168>
 800e65e:	ee30 7a07 	vadd.f32	s14, s0, s14
 800e662:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e666:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800e66a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e66e:	dce2      	bgt.n	800e636 <atanf+0x1e>
 800e670:	f04f 33ff 	mov.w	r3, #4294967295
 800e674:	e013      	b.n	800e69e <atanf+0x86>
 800e676:	f000 f8a3 	bl	800e7c0 <fabsf>
 800e67a:	4b42      	ldr	r3, [pc, #264]	@ (800e784 <atanf+0x16c>)
 800e67c:	429c      	cmp	r4, r3
 800e67e:	d84f      	bhi.n	800e720 <atanf+0x108>
 800e680:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800e684:	429c      	cmp	r4, r3
 800e686:	d841      	bhi.n	800e70c <atanf+0xf4>
 800e688:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800e68c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800e690:	eea0 7a27 	vfma.f32	s14, s0, s15
 800e694:	2300      	movs	r3, #0
 800e696:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e69a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e69e:	1c5a      	adds	r2, r3, #1
 800e6a0:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800e6a4:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800e788 <atanf+0x170>
 800e6a8:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800e78c <atanf+0x174>
 800e6ac:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800e790 <atanf+0x178>
 800e6b0:	ee66 6a06 	vmul.f32	s13, s12, s12
 800e6b4:	eee6 5a87 	vfma.f32	s11, s13, s14
 800e6b8:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800e794 <atanf+0x17c>
 800e6bc:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800e6c0:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800e798 <atanf+0x180>
 800e6c4:	eee7 5a26 	vfma.f32	s11, s14, s13
 800e6c8:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800e79c <atanf+0x184>
 800e6cc:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800e6d0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800e7a0 <atanf+0x188>
 800e6d4:	eee7 5a26 	vfma.f32	s11, s14, s13
 800e6d8:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800e7a4 <atanf+0x18c>
 800e6dc:	eea6 5a87 	vfma.f32	s10, s13, s14
 800e6e0:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800e7a8 <atanf+0x190>
 800e6e4:	eea5 7a26 	vfma.f32	s14, s10, s13
 800e6e8:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800e7ac <atanf+0x194>
 800e6ec:	eea7 5a26 	vfma.f32	s10, s14, s13
 800e6f0:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800e7b0 <atanf+0x198>
 800e6f4:	eea5 7a26 	vfma.f32	s14, s10, s13
 800e6f8:	ee27 7a26 	vmul.f32	s14, s14, s13
 800e6fc:	eea5 7a86 	vfma.f32	s14, s11, s12
 800e700:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e704:	d121      	bne.n	800e74a <atanf+0x132>
 800e706:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e70a:	e794      	b.n	800e636 <atanf+0x1e>
 800e70c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800e710:	ee30 7a67 	vsub.f32	s14, s0, s15
 800e714:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e718:	2301      	movs	r3, #1
 800e71a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e71e:	e7be      	b.n	800e69e <atanf+0x86>
 800e720:	4b24      	ldr	r3, [pc, #144]	@ (800e7b4 <atanf+0x19c>)
 800e722:	429c      	cmp	r4, r3
 800e724:	d80b      	bhi.n	800e73e <atanf+0x126>
 800e726:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800e72a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e72e:	eea0 7a27 	vfma.f32	s14, s0, s15
 800e732:	2302      	movs	r3, #2
 800e734:	ee70 6a67 	vsub.f32	s13, s0, s15
 800e738:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e73c:	e7af      	b.n	800e69e <atanf+0x86>
 800e73e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800e742:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e746:	2303      	movs	r3, #3
 800e748:	e7a9      	b.n	800e69e <atanf+0x86>
 800e74a:	4a1b      	ldr	r2, [pc, #108]	@ (800e7b8 <atanf+0x1a0>)
 800e74c:	491b      	ldr	r1, [pc, #108]	@ (800e7bc <atanf+0x1a4>)
 800e74e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800e752:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800e756:	edd3 6a00 	vldr	s13, [r3]
 800e75a:	ee37 7a66 	vsub.f32	s14, s14, s13
 800e75e:	2d00      	cmp	r5, #0
 800e760:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e764:	edd2 7a00 	vldr	s15, [r2]
 800e768:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e76c:	bfb8      	it	lt
 800e76e:	eef1 7a67 	vneglt.f32	s15, s15
 800e772:	e760      	b.n	800e636 <atanf+0x1e>
 800e774:	bfc90fdb 	.word	0xbfc90fdb
 800e778:	3fc90fdb 	.word	0x3fc90fdb
 800e77c:	3edfffff 	.word	0x3edfffff
 800e780:	7149f2ca 	.word	0x7149f2ca
 800e784:	3f97ffff 	.word	0x3f97ffff
 800e788:	3c8569d7 	.word	0x3c8569d7
 800e78c:	3d4bda59 	.word	0x3d4bda59
 800e790:	bd6ef16b 	.word	0xbd6ef16b
 800e794:	3d886b35 	.word	0x3d886b35
 800e798:	3dba2e6e 	.word	0x3dba2e6e
 800e79c:	3e124925 	.word	0x3e124925
 800e7a0:	3eaaaaab 	.word	0x3eaaaaab
 800e7a4:	bd15a221 	.word	0xbd15a221
 800e7a8:	bd9d8795 	.word	0xbd9d8795
 800e7ac:	bde38e38 	.word	0xbde38e38
 800e7b0:	be4ccccd 	.word	0xbe4ccccd
 800e7b4:	401bffff 	.word	0x401bffff
 800e7b8:	0800edd8 	.word	0x0800edd8
 800e7bc:	0800edc8 	.word	0x0800edc8

0800e7c0 <fabsf>:
 800e7c0:	ee10 3a10 	vmov	r3, s0
 800e7c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e7c8:	ee00 3a10 	vmov	s0, r3
 800e7cc:	4770      	bx	lr
	...

0800e7d0 <scalbn>:
 800e7d0:	b570      	push	{r4, r5, r6, lr}
 800e7d2:	ec55 4b10 	vmov	r4, r5, d0
 800e7d6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800e7da:	4606      	mov	r6, r0
 800e7dc:	462b      	mov	r3, r5
 800e7de:	b991      	cbnz	r1, 800e806 <scalbn+0x36>
 800e7e0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800e7e4:	4323      	orrs	r3, r4
 800e7e6:	d03d      	beq.n	800e864 <scalbn+0x94>
 800e7e8:	4b35      	ldr	r3, [pc, #212]	@ (800e8c0 <scalbn+0xf0>)
 800e7ea:	4620      	mov	r0, r4
 800e7ec:	4629      	mov	r1, r5
 800e7ee:	2200      	movs	r2, #0
 800e7f0:	f7f1 ff1a 	bl	8000628 <__aeabi_dmul>
 800e7f4:	4b33      	ldr	r3, [pc, #204]	@ (800e8c4 <scalbn+0xf4>)
 800e7f6:	429e      	cmp	r6, r3
 800e7f8:	4604      	mov	r4, r0
 800e7fa:	460d      	mov	r5, r1
 800e7fc:	da0f      	bge.n	800e81e <scalbn+0x4e>
 800e7fe:	a328      	add	r3, pc, #160	@ (adr r3, 800e8a0 <scalbn+0xd0>)
 800e800:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e804:	e01e      	b.n	800e844 <scalbn+0x74>
 800e806:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800e80a:	4291      	cmp	r1, r2
 800e80c:	d10b      	bne.n	800e826 <scalbn+0x56>
 800e80e:	4622      	mov	r2, r4
 800e810:	4620      	mov	r0, r4
 800e812:	4629      	mov	r1, r5
 800e814:	f7f1 fd52 	bl	80002bc <__adddf3>
 800e818:	4604      	mov	r4, r0
 800e81a:	460d      	mov	r5, r1
 800e81c:	e022      	b.n	800e864 <scalbn+0x94>
 800e81e:	460b      	mov	r3, r1
 800e820:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800e824:	3936      	subs	r1, #54	@ 0x36
 800e826:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800e82a:	4296      	cmp	r6, r2
 800e82c:	dd0d      	ble.n	800e84a <scalbn+0x7a>
 800e82e:	2d00      	cmp	r5, #0
 800e830:	a11d      	add	r1, pc, #116	@ (adr r1, 800e8a8 <scalbn+0xd8>)
 800e832:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e836:	da02      	bge.n	800e83e <scalbn+0x6e>
 800e838:	a11d      	add	r1, pc, #116	@ (adr r1, 800e8b0 <scalbn+0xe0>)
 800e83a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e83e:	a31a      	add	r3, pc, #104	@ (adr r3, 800e8a8 <scalbn+0xd8>)
 800e840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e844:	f7f1 fef0 	bl	8000628 <__aeabi_dmul>
 800e848:	e7e6      	b.n	800e818 <scalbn+0x48>
 800e84a:	1872      	adds	r2, r6, r1
 800e84c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800e850:	428a      	cmp	r2, r1
 800e852:	dcec      	bgt.n	800e82e <scalbn+0x5e>
 800e854:	2a00      	cmp	r2, #0
 800e856:	dd08      	ble.n	800e86a <scalbn+0x9a>
 800e858:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e85c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800e860:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e864:	ec45 4b10 	vmov	d0, r4, r5
 800e868:	bd70      	pop	{r4, r5, r6, pc}
 800e86a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800e86e:	da08      	bge.n	800e882 <scalbn+0xb2>
 800e870:	2d00      	cmp	r5, #0
 800e872:	a10b      	add	r1, pc, #44	@ (adr r1, 800e8a0 <scalbn+0xd0>)
 800e874:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e878:	dac1      	bge.n	800e7fe <scalbn+0x2e>
 800e87a:	a10f      	add	r1, pc, #60	@ (adr r1, 800e8b8 <scalbn+0xe8>)
 800e87c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e880:	e7bd      	b.n	800e7fe <scalbn+0x2e>
 800e882:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e886:	3236      	adds	r2, #54	@ 0x36
 800e888:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800e88c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e890:	4620      	mov	r0, r4
 800e892:	4b0d      	ldr	r3, [pc, #52]	@ (800e8c8 <scalbn+0xf8>)
 800e894:	4629      	mov	r1, r5
 800e896:	2200      	movs	r2, #0
 800e898:	e7d4      	b.n	800e844 <scalbn+0x74>
 800e89a:	bf00      	nop
 800e89c:	f3af 8000 	nop.w
 800e8a0:	c2f8f359 	.word	0xc2f8f359
 800e8a4:	01a56e1f 	.word	0x01a56e1f
 800e8a8:	8800759c 	.word	0x8800759c
 800e8ac:	7e37e43c 	.word	0x7e37e43c
 800e8b0:	8800759c 	.word	0x8800759c
 800e8b4:	fe37e43c 	.word	0xfe37e43c
 800e8b8:	c2f8f359 	.word	0xc2f8f359
 800e8bc:	81a56e1f 	.word	0x81a56e1f
 800e8c0:	43500000 	.word	0x43500000
 800e8c4:	ffff3cb0 	.word	0xffff3cb0
 800e8c8:	3c900000 	.word	0x3c900000

0800e8cc <with_errno>:
 800e8cc:	b510      	push	{r4, lr}
 800e8ce:	ed2d 8b02 	vpush	{d8}
 800e8d2:	eeb0 8a40 	vmov.f32	s16, s0
 800e8d6:	eef0 8a60 	vmov.f32	s17, s1
 800e8da:	4604      	mov	r4, r0
 800e8dc:	f7fd f976 	bl	800bbcc <__errno>
 800e8e0:	eeb0 0a48 	vmov.f32	s0, s16
 800e8e4:	eef0 0a68 	vmov.f32	s1, s17
 800e8e8:	ecbd 8b02 	vpop	{d8}
 800e8ec:	6004      	str	r4, [r0, #0]
 800e8ee:	bd10      	pop	{r4, pc}

0800e8f0 <xflow>:
 800e8f0:	4603      	mov	r3, r0
 800e8f2:	b507      	push	{r0, r1, r2, lr}
 800e8f4:	ec51 0b10 	vmov	r0, r1, d0
 800e8f8:	b183      	cbz	r3, 800e91c <xflow+0x2c>
 800e8fa:	4602      	mov	r2, r0
 800e8fc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e900:	e9cd 2300 	strd	r2, r3, [sp]
 800e904:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e908:	f7f1 fe8e 	bl	8000628 <__aeabi_dmul>
 800e90c:	ec41 0b10 	vmov	d0, r0, r1
 800e910:	2022      	movs	r0, #34	@ 0x22
 800e912:	b003      	add	sp, #12
 800e914:	f85d eb04 	ldr.w	lr, [sp], #4
 800e918:	f7ff bfd8 	b.w	800e8cc <with_errno>
 800e91c:	4602      	mov	r2, r0
 800e91e:	460b      	mov	r3, r1
 800e920:	e7ee      	b.n	800e900 <xflow+0x10>
 800e922:	0000      	movs	r0, r0
 800e924:	0000      	movs	r0, r0
	...

0800e928 <__math_uflow>:
 800e928:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e930 <__math_uflow+0x8>
 800e92c:	f7ff bfe0 	b.w	800e8f0 <xflow>
 800e930:	00000000 	.word	0x00000000
 800e934:	10000000 	.word	0x10000000

0800e938 <__math_oflow>:
 800e938:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e940 <__math_oflow+0x8>
 800e93c:	f7ff bfd8 	b.w	800e8f0 <xflow>
 800e940:	00000000 	.word	0x00000000
 800e944:	70000000 	.word	0x70000000

0800e948 <_init>:
 800e948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e94a:	bf00      	nop
 800e94c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e94e:	bc08      	pop	{r3}
 800e950:	469e      	mov	lr, r3
 800e952:	4770      	bx	lr

0800e954 <_fini>:
 800e954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e956:	bf00      	nop
 800e958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e95a:	bc08      	pop	{r3}
 800e95c:	469e      	mov	lr, r3
 800e95e:	4770      	bx	lr
