
max.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ee88  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  0800f058  0800f058  00010058  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f4e0  0800f4e0  00011200  2**0
                  CONTENTS
  4 .ARM          00000008  0800f4e0  0800f4e0  000104e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f4e8  0800f4e8  00011200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f4e8  0800f4e8  000104e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f4ec  0800f4ec  000104ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800f4f0  00011000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000254c  20000200  0800f6f0  00011200  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000274c  0800f6f0  0001174c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011200  2**0
                  CONTENTS, READONLY
 12 .debug_info   000192d0  00000000  00000000  00011230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003798  00000000  00000000  0002a500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001730  00000000  00000000  0002dc98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000122f  00000000  00000000  0002f3c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026c34  00000000  00000000  000305f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e649  00000000  00000000  0005722b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e72f2  00000000  00000000  00075874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015cb66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000779c  00000000  00000000  0015cbac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00164348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000200 	.word	0x20000200
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f040 	.word	0x0800f040

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000204 	.word	0x20000204
 800020c:	0800f040 	.word	0x0800f040

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_ldivmod>:
 8000cb8:	b97b      	cbnz	r3, 8000cda <__aeabi_ldivmod+0x22>
 8000cba:	b972      	cbnz	r2, 8000cda <__aeabi_ldivmod+0x22>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bfbe      	ittt	lt
 8000cc0:	2000      	movlt	r0, #0
 8000cc2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000cc6:	e006      	blt.n	8000cd6 <__aeabi_ldivmod+0x1e>
 8000cc8:	bf08      	it	eq
 8000cca:	2800      	cmpeq	r0, #0
 8000ccc:	bf1c      	itt	ne
 8000cce:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000cd2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd6:	f000 b9eb 	b.w	80010b0 <__aeabi_idiv0>
 8000cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	db09      	blt.n	8000cfa <__aeabi_ldivmod+0x42>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db1a      	blt.n	8000d20 <__aeabi_ldivmod+0x68>
 8000cea:	f000 f883 	bl	8000df4 <__udivmoddi4>
 8000cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf6:	b004      	add	sp, #16
 8000cf8:	4770      	bx	lr
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db1b      	blt.n	8000d3c <__aeabi_ldivmod+0x84>
 8000d04:	f000 f876 	bl	8000df4 <__udivmoddi4>
 8000d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d10:	b004      	add	sp, #16
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	4252      	negs	r2, r2
 8000d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f865 	bl	8000df4 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4240      	negs	r0, r0
 8000d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3a:	4770      	bx	lr
 8000d3c:	4252      	negs	r2, r2
 8000d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d42:	f000 f857 	bl	8000df4 <__udivmoddi4>
 8000d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d4e:	b004      	add	sp, #16
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_uldivmod>:
 8000d58:	b953      	cbnz	r3, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5a:	b94a      	cbnz	r2, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5c:	2900      	cmp	r1, #0
 8000d5e:	bf08      	it	eq
 8000d60:	2800      	cmpeq	r0, #0
 8000d62:	bf1c      	itt	ne
 8000d64:	f04f 31ff 	movne.w	r1, #4294967295
 8000d68:	f04f 30ff 	movne.w	r0, #4294967295
 8000d6c:	f000 b9a0 	b.w	80010b0 <__aeabi_idiv0>
 8000d70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d78:	f000 f83c 	bl	8000df4 <__udivmoddi4>
 8000d7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d84:	b004      	add	sp, #16
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_d2lz>:
 8000d88:	b538      	push	{r3, r4, r5, lr}
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	4604      	mov	r4, r0
 8000d90:	460d      	mov	r5, r1
 8000d92:	f7ff febb 	bl	8000b0c <__aeabi_dcmplt>
 8000d96:	b928      	cbnz	r0, 8000da4 <__aeabi_d2lz+0x1c>
 8000d98:	4620      	mov	r0, r4
 8000d9a:	4629      	mov	r1, r5
 8000d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000da0:	f000 b80a 	b.w	8000db8 <__aeabi_d2ulz>
 8000da4:	4620      	mov	r0, r4
 8000da6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000daa:	f000 f805 	bl	8000db8 <__aeabi_d2ulz>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	bd38      	pop	{r3, r4, r5, pc}
 8000db6:	bf00      	nop

08000db8 <__aeabi_d2ulz>:
 8000db8:	b5d0      	push	{r4, r6, r7, lr}
 8000dba:	4b0c      	ldr	r3, [pc, #48]	@ (8000dec <__aeabi_d2ulz+0x34>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	4606      	mov	r6, r0
 8000dc0:	460f      	mov	r7, r1
 8000dc2:	f7ff fc31 	bl	8000628 <__aeabi_dmul>
 8000dc6:	f7ff ff07 	bl	8000bd8 <__aeabi_d2uiz>
 8000dca:	4604      	mov	r4, r0
 8000dcc:	f7ff fbb2 	bl	8000534 <__aeabi_ui2d>
 8000dd0:	4b07      	ldr	r3, [pc, #28]	@ (8000df0 <__aeabi_d2ulz+0x38>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f7ff fc28 	bl	8000628 <__aeabi_dmul>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4630      	mov	r0, r6
 8000dde:	4639      	mov	r1, r7
 8000de0:	f7ff fa6a 	bl	80002b8 <__aeabi_dsub>
 8000de4:	f7ff fef8 	bl	8000bd8 <__aeabi_d2uiz>
 8000de8:	4621      	mov	r1, r4
 8000dea:	bdd0      	pop	{r4, r6, r7, pc}
 8000dec:	3df00000 	.word	0x3df00000
 8000df0:	41f00000 	.word	0x41f00000

08000df4 <__udivmoddi4>:
 8000df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df8:	9d08      	ldr	r5, [sp, #32]
 8000dfa:	460c      	mov	r4, r1
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d14e      	bne.n	8000e9e <__udivmoddi4+0xaa>
 8000e00:	4694      	mov	ip, r2
 8000e02:	458c      	cmp	ip, r1
 8000e04:	4686      	mov	lr, r0
 8000e06:	fab2 f282 	clz	r2, r2
 8000e0a:	d962      	bls.n	8000ed2 <__udivmoddi4+0xde>
 8000e0c:	b14a      	cbz	r2, 8000e22 <__udivmoddi4+0x2e>
 8000e0e:	f1c2 0320 	rsb	r3, r2, #32
 8000e12:	4091      	lsls	r1, r2
 8000e14:	fa20 f303 	lsr.w	r3, r0, r3
 8000e18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1c:	4319      	orrs	r1, r3
 8000e1e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e26:	fa1f f68c 	uxth.w	r6, ip
 8000e2a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e2e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e32:	fb07 1114 	mls	r1, r7, r4, r1
 8000e36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e3a:	fb04 f106 	mul.w	r1, r4, r6
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d90a      	bls.n	8000e58 <__udivmoddi4+0x64>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e4a:	f080 8112 	bcs.w	8001072 <__udivmoddi4+0x27e>
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	f240 810f 	bls.w	8001072 <__udivmoddi4+0x27e>
 8000e54:	3c02      	subs	r4, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1a59      	subs	r1, r3, r1
 8000e5a:	fa1f f38e 	uxth.w	r3, lr
 8000e5e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e62:	fb07 1110 	mls	r1, r7, r0, r1
 8000e66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e6a:	fb00 f606 	mul.w	r6, r0, r6
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	d90a      	bls.n	8000e88 <__udivmoddi4+0x94>
 8000e72:	eb1c 0303 	adds.w	r3, ip, r3
 8000e76:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e7a:	f080 80fc 	bcs.w	8001076 <__udivmoddi4+0x282>
 8000e7e:	429e      	cmp	r6, r3
 8000e80:	f240 80f9 	bls.w	8001076 <__udivmoddi4+0x282>
 8000e84:	4463      	add	r3, ip
 8000e86:	3802      	subs	r0, #2
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e8e:	2100      	movs	r1, #0
 8000e90:	b11d      	cbz	r5, 8000e9a <__udivmoddi4+0xa6>
 8000e92:	40d3      	lsrs	r3, r2
 8000e94:	2200      	movs	r2, #0
 8000e96:	e9c5 3200 	strd	r3, r2, [r5]
 8000e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9e:	428b      	cmp	r3, r1
 8000ea0:	d905      	bls.n	8000eae <__udivmoddi4+0xba>
 8000ea2:	b10d      	cbz	r5, 8000ea8 <__udivmoddi4+0xb4>
 8000ea4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e7f5      	b.n	8000e9a <__udivmoddi4+0xa6>
 8000eae:	fab3 f183 	clz	r1, r3
 8000eb2:	2900      	cmp	r1, #0
 8000eb4:	d146      	bne.n	8000f44 <__udivmoddi4+0x150>
 8000eb6:	42a3      	cmp	r3, r4
 8000eb8:	d302      	bcc.n	8000ec0 <__udivmoddi4+0xcc>
 8000eba:	4290      	cmp	r0, r2
 8000ebc:	f0c0 80f0 	bcc.w	80010a0 <__udivmoddi4+0x2ac>
 8000ec0:	1a86      	subs	r6, r0, r2
 8000ec2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ec6:	2001      	movs	r0, #1
 8000ec8:	2d00      	cmp	r5, #0
 8000eca:	d0e6      	beq.n	8000e9a <__udivmoddi4+0xa6>
 8000ecc:	e9c5 6300 	strd	r6, r3, [r5]
 8000ed0:	e7e3      	b.n	8000e9a <__udivmoddi4+0xa6>
 8000ed2:	2a00      	cmp	r2, #0
 8000ed4:	f040 8090 	bne.w	8000ff8 <__udivmoddi4+0x204>
 8000ed8:	eba1 040c 	sub.w	r4, r1, ip
 8000edc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee0:	fa1f f78c 	uxth.w	r7, ip
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000eea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000eee:	fb08 4416 	mls	r4, r8, r6, r4
 8000ef2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ef6:	fb07 f006 	mul.w	r0, r7, r6
 8000efa:	4298      	cmp	r0, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x11c>
 8000efe:	eb1c 0303 	adds.w	r3, ip, r3
 8000f02:	f106 34ff 	add.w	r4, r6, #4294967295
 8000f06:	d202      	bcs.n	8000f0e <__udivmoddi4+0x11a>
 8000f08:	4298      	cmp	r0, r3
 8000f0a:	f200 80cd 	bhi.w	80010a8 <__udivmoddi4+0x2b4>
 8000f0e:	4626      	mov	r6, r4
 8000f10:	1a1c      	subs	r4, r3, r0
 8000f12:	fa1f f38e 	uxth.w	r3, lr
 8000f16:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f1a:	fb08 4410 	mls	r4, r8, r0, r4
 8000f1e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f22:	fb00 f707 	mul.w	r7, r0, r7
 8000f26:	429f      	cmp	r7, r3
 8000f28:	d908      	bls.n	8000f3c <__udivmoddi4+0x148>
 8000f2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f2e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f32:	d202      	bcs.n	8000f3a <__udivmoddi4+0x146>
 8000f34:	429f      	cmp	r7, r3
 8000f36:	f200 80b0 	bhi.w	800109a <__udivmoddi4+0x2a6>
 8000f3a:	4620      	mov	r0, r4
 8000f3c:	1bdb      	subs	r3, r3, r7
 8000f3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f42:	e7a5      	b.n	8000e90 <__udivmoddi4+0x9c>
 8000f44:	f1c1 0620 	rsb	r6, r1, #32
 8000f48:	408b      	lsls	r3, r1
 8000f4a:	fa22 f706 	lsr.w	r7, r2, r6
 8000f4e:	431f      	orrs	r7, r3
 8000f50:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f54:	fa04 f301 	lsl.w	r3, r4, r1
 8000f58:	ea43 030c 	orr.w	r3, r3, ip
 8000f5c:	40f4      	lsrs	r4, r6
 8000f5e:	fa00 f801 	lsl.w	r8, r0, r1
 8000f62:	0c38      	lsrs	r0, r7, #16
 8000f64:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f68:	fbb4 fef0 	udiv	lr, r4, r0
 8000f6c:	fa1f fc87 	uxth.w	ip, r7
 8000f70:	fb00 441e 	mls	r4, r0, lr, r4
 8000f74:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f78:	fb0e f90c 	mul.w	r9, lr, ip
 8000f7c:	45a1      	cmp	r9, r4
 8000f7e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f82:	d90a      	bls.n	8000f9a <__udivmoddi4+0x1a6>
 8000f84:	193c      	adds	r4, r7, r4
 8000f86:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f8a:	f080 8084 	bcs.w	8001096 <__udivmoddi4+0x2a2>
 8000f8e:	45a1      	cmp	r9, r4
 8000f90:	f240 8081 	bls.w	8001096 <__udivmoddi4+0x2a2>
 8000f94:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f98:	443c      	add	r4, r7
 8000f9a:	eba4 0409 	sub.w	r4, r4, r9
 8000f9e:	fa1f f983 	uxth.w	r9, r3
 8000fa2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000fa6:	fb00 4413 	mls	r4, r0, r3, r4
 8000faa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fae:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fb2:	45a4      	cmp	ip, r4
 8000fb4:	d907      	bls.n	8000fc6 <__udivmoddi4+0x1d2>
 8000fb6:	193c      	adds	r4, r7, r4
 8000fb8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000fbc:	d267      	bcs.n	800108e <__udivmoddi4+0x29a>
 8000fbe:	45a4      	cmp	ip, r4
 8000fc0:	d965      	bls.n	800108e <__udivmoddi4+0x29a>
 8000fc2:	3b02      	subs	r3, #2
 8000fc4:	443c      	add	r4, r7
 8000fc6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000fca:	fba0 9302 	umull	r9, r3, r0, r2
 8000fce:	eba4 040c 	sub.w	r4, r4, ip
 8000fd2:	429c      	cmp	r4, r3
 8000fd4:	46ce      	mov	lr, r9
 8000fd6:	469c      	mov	ip, r3
 8000fd8:	d351      	bcc.n	800107e <__udivmoddi4+0x28a>
 8000fda:	d04e      	beq.n	800107a <__udivmoddi4+0x286>
 8000fdc:	b155      	cbz	r5, 8000ff4 <__udivmoddi4+0x200>
 8000fde:	ebb8 030e 	subs.w	r3, r8, lr
 8000fe2:	eb64 040c 	sbc.w	r4, r4, ip
 8000fe6:	fa04 f606 	lsl.w	r6, r4, r6
 8000fea:	40cb      	lsrs	r3, r1
 8000fec:	431e      	orrs	r6, r3
 8000fee:	40cc      	lsrs	r4, r1
 8000ff0:	e9c5 6400 	strd	r6, r4, [r5]
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	e750      	b.n	8000e9a <__udivmoddi4+0xa6>
 8000ff8:	f1c2 0320 	rsb	r3, r2, #32
 8000ffc:	fa20 f103 	lsr.w	r1, r0, r3
 8001000:	fa0c fc02 	lsl.w	ip, ip, r2
 8001004:	fa24 f303 	lsr.w	r3, r4, r3
 8001008:	4094      	lsls	r4, r2
 800100a:	430c      	orrs	r4, r1
 800100c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001010:	fa00 fe02 	lsl.w	lr, r0, r2
 8001014:	fa1f f78c 	uxth.w	r7, ip
 8001018:	fbb3 f0f8 	udiv	r0, r3, r8
 800101c:	fb08 3110 	mls	r1, r8, r0, r3
 8001020:	0c23      	lsrs	r3, r4, #16
 8001022:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001026:	fb00 f107 	mul.w	r1, r0, r7
 800102a:	4299      	cmp	r1, r3
 800102c:	d908      	bls.n	8001040 <__udivmoddi4+0x24c>
 800102e:	eb1c 0303 	adds.w	r3, ip, r3
 8001032:	f100 36ff 	add.w	r6, r0, #4294967295
 8001036:	d22c      	bcs.n	8001092 <__udivmoddi4+0x29e>
 8001038:	4299      	cmp	r1, r3
 800103a:	d92a      	bls.n	8001092 <__udivmoddi4+0x29e>
 800103c:	3802      	subs	r0, #2
 800103e:	4463      	add	r3, ip
 8001040:	1a5b      	subs	r3, r3, r1
 8001042:	b2a4      	uxth	r4, r4
 8001044:	fbb3 f1f8 	udiv	r1, r3, r8
 8001048:	fb08 3311 	mls	r3, r8, r1, r3
 800104c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001050:	fb01 f307 	mul.w	r3, r1, r7
 8001054:	42a3      	cmp	r3, r4
 8001056:	d908      	bls.n	800106a <__udivmoddi4+0x276>
 8001058:	eb1c 0404 	adds.w	r4, ip, r4
 800105c:	f101 36ff 	add.w	r6, r1, #4294967295
 8001060:	d213      	bcs.n	800108a <__udivmoddi4+0x296>
 8001062:	42a3      	cmp	r3, r4
 8001064:	d911      	bls.n	800108a <__udivmoddi4+0x296>
 8001066:	3902      	subs	r1, #2
 8001068:	4464      	add	r4, ip
 800106a:	1ae4      	subs	r4, r4, r3
 800106c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001070:	e739      	b.n	8000ee6 <__udivmoddi4+0xf2>
 8001072:	4604      	mov	r4, r0
 8001074:	e6f0      	b.n	8000e58 <__udivmoddi4+0x64>
 8001076:	4608      	mov	r0, r1
 8001078:	e706      	b.n	8000e88 <__udivmoddi4+0x94>
 800107a:	45c8      	cmp	r8, r9
 800107c:	d2ae      	bcs.n	8000fdc <__udivmoddi4+0x1e8>
 800107e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001082:	eb63 0c07 	sbc.w	ip, r3, r7
 8001086:	3801      	subs	r0, #1
 8001088:	e7a8      	b.n	8000fdc <__udivmoddi4+0x1e8>
 800108a:	4631      	mov	r1, r6
 800108c:	e7ed      	b.n	800106a <__udivmoddi4+0x276>
 800108e:	4603      	mov	r3, r0
 8001090:	e799      	b.n	8000fc6 <__udivmoddi4+0x1d2>
 8001092:	4630      	mov	r0, r6
 8001094:	e7d4      	b.n	8001040 <__udivmoddi4+0x24c>
 8001096:	46d6      	mov	lr, sl
 8001098:	e77f      	b.n	8000f9a <__udivmoddi4+0x1a6>
 800109a:	4463      	add	r3, ip
 800109c:	3802      	subs	r0, #2
 800109e:	e74d      	b.n	8000f3c <__udivmoddi4+0x148>
 80010a0:	4606      	mov	r6, r0
 80010a2:	4623      	mov	r3, r4
 80010a4:	4608      	mov	r0, r1
 80010a6:	e70f      	b.n	8000ec8 <__udivmoddi4+0xd4>
 80010a8:	3e02      	subs	r6, #2
 80010aa:	4463      	add	r3, ip
 80010ac:	e730      	b.n	8000f10 <__udivmoddi4+0x11c>
 80010ae:	bf00      	nop

080010b0 <__aeabi_idiv0>:
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop

080010b4 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	/* chip id read try count */
	uint8_t try_count = 5;
 80010bc:	2305      	movs	r3, #5
 80010be:	73bb      	strb	r3, [r7, #14]
	uint8_t chip_id = 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f001 facb 	bl	8002660 <null_ptr_check>
 80010ca:	4603      	mov	r3, r0
 80010cc:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt ==  BME280_OK) {
 80010ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d133      	bne.n	800113e <bme280_init+0x8a>
		while (try_count) {
 80010d6:	e028      	b.n	800112a <bme280_init+0x76>
			/* Read the chip-id of bme280 sensor */
			rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 80010d8:	f107 010d 	add.w	r1, r7, #13
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2201      	movs	r2, #1
 80010e0:	20d0      	movs	r0, #208	@ 0xd0
 80010e2:	f000 f832 	bl	800114a <bme280_get_regs>
 80010e6:	4603      	mov	r3, r0
 80010e8:	73fb      	strb	r3, [r7, #15]
			/* Check for chip id validity */
			if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID)) {
 80010ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d114      	bne.n	800111c <bme280_init+0x68>
 80010f2:	7b7b      	ldrb	r3, [r7, #13]
 80010f4:	2b60      	cmp	r3, #96	@ 0x60
 80010f6:	d111      	bne.n	800111c <bme280_init+0x68>
				dev->chip_id = chip_id;
 80010f8:	7b7a      	ldrb	r2, [r7, #13]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	701a      	strb	r2, [r3, #0]
				/* Reset the sensor */
				rslt = bme280_soft_reset(dev);
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f000 f978 	bl	80013f4 <bme280_soft_reset>
 8001104:	4603      	mov	r3, r0
 8001106:	73fb      	strb	r3, [r7, #15]
				if (rslt == BME280_OK) {
 8001108:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d110      	bne.n	8001132 <bme280_init+0x7e>
					/* Read the calibration data */
					rslt = get_calib_data(dev);
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f001 f919 	bl	8002348 <get_calib_data>
 8001116:	4603      	mov	r3, r0
 8001118:	73fb      	strb	r3, [r7, #15]
				}
				break;
 800111a:	e00a      	b.n	8001132 <bme280_init+0x7e>
			}
			/* Wait for 1 ms */
			dev->delay_ms(1);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	2001      	movs	r0, #1
 8001122:	4798      	blx	r3
			--try_count;
 8001124:	7bbb      	ldrb	r3, [r7, #14]
 8001126:	3b01      	subs	r3, #1
 8001128:	73bb      	strb	r3, [r7, #14]
		while (try_count) {
 800112a:	7bbb      	ldrb	r3, [r7, #14]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d1d3      	bne.n	80010d8 <bme280_init+0x24>
 8001130:	e000      	b.n	8001134 <bme280_init+0x80>
				break;
 8001132:	bf00      	nop
		}
		/* Chip id check failed */
		if (!try_count)
 8001134:	7bbb      	ldrb	r3, [r7, #14]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d101      	bne.n	800113e <bme280_init+0x8a>
			rslt = BME280_E_DEV_NOT_FOUND;
 800113a:	23fe      	movs	r3, #254	@ 0xfe
 800113c:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 800113e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001142:	4618      	mov	r0, r3
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 800114a:	b590      	push	{r4, r7, lr}
 800114c:	b087      	sub	sp, #28
 800114e:	af00      	add	r7, sp, #0
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607b      	str	r3, [r7, #4]
 8001154:	4603      	mov	r3, r0
 8001156:	73fb      	strb	r3, [r7, #15]
 8001158:	4613      	mov	r3, r2
 800115a:	81bb      	strh	r3, [r7, #12]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f001 fa7f 	bl	8002660 <null_ptr_check>
 8001162:	4603      	mov	r3, r0
 8001164:	75fb      	strb	r3, [r7, #23]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8001166:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d117      	bne.n	800119e <bme280_get_regs+0x54>
		/* If interface selected is SPI */
		if (dev->intf != BME280_I2C_INTF)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	789b      	ldrb	r3, [r3, #2]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d003      	beq.n	800117e <bme280_get_regs+0x34>
			reg_addr = reg_addr | 0x80;
 8001176:	7bfb      	ldrb	r3, [r7, #15]
 8001178:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800117c:	73fb      	strb	r3, [r7, #15]
		/* Read the data  */
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	685c      	ldr	r4, [r3, #4]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	7858      	ldrb	r0, [r3, #1]
 8001186:	89bb      	ldrh	r3, [r7, #12]
 8001188:	7bf9      	ldrb	r1, [r7, #15]
 800118a:	68ba      	ldr	r2, [r7, #8]
 800118c:	47a0      	blx	r4
 800118e:	4603      	mov	r3, r0
 8001190:	75fb      	strb	r3, [r7, #23]
		/* Check for communication error */
		if (rslt != BME280_OK)
 8001192:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <bme280_get_regs+0x54>
			rslt = BME280_E_COMM_FAIL;
 800119a:	23fc      	movs	r3, #252	@ 0xfc
 800119c:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800119e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	371c      	adds	r7, #28
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd90      	pop	{r4, r7, pc}

080011aa <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 80011aa:	b590      	push	{r4, r7, lr}
 80011ac:	b08d      	sub	sp, #52	@ 0x34
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	60f8      	str	r0, [r7, #12]
 80011b2:	60b9      	str	r1, [r7, #8]
 80011b4:	603b      	str	r3, [r7, #0]
 80011b6:	4613      	mov	r3, r2
 80011b8:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

	if (len > 10)
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	2b0a      	cmp	r3, #10
 80011be:	d901      	bls.n	80011c4 <bme280_set_regs+0x1a>
		len = 10;
 80011c0:	230a      	movs	r3, #10
 80011c2:	71fb      	strb	r3, [r7, #7]

	uint16_t temp_len;
	uint8_t reg_addr_cnt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80011c4:	6838      	ldr	r0, [r7, #0]
 80011c6:	f001 fa4b 	bl	8002660 <null_ptr_check>
 80011ca:	4603      	mov	r3, r0
 80011cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	/* Check for arguments validity */
	if ((rslt ==  BME280_OK) && (reg_addr != NULL) && (reg_data != NULL)) {
 80011d0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d156      	bne.n	8001286 <bme280_set_regs+0xdc>
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d053      	beq.n	8001286 <bme280_set_regs+0xdc>
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d050      	beq.n	8001286 <bme280_set_regs+0xdc>
		if (len != 0) {
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d049      	beq.n	800127e <bme280_set_regs+0xd4>
			temp_buff[0] = reg_data[0];
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	753b      	strb	r3, [r7, #20]
			/* If interface selected is SPI */
			if (dev->intf != BME280_I2C_INTF) {
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	789b      	ldrb	r3, [r3, #2]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d01a      	beq.n	800122e <bme280_set_regs+0x84>
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80011f8:	2300      	movs	r3, #0
 80011fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80011fe:	e011      	b.n	8001224 <bme280_set_regs+0x7a>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8001200:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001204:	68fa      	ldr	r2, [r7, #12]
 8001206:	4413      	add	r3, r2
 8001208:	781a      	ldrb	r2, [r3, #0]
 800120a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800120e:	68f9      	ldr	r1, [r7, #12]
 8001210:	440b      	add	r3, r1
 8001212:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001216:	b2d2      	uxtb	r2, r2
 8001218:	701a      	strb	r2, [r3, #0]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800121a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800121e:	3301      	adds	r3, #1
 8001220:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001224:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	429a      	cmp	r2, r3
 800122c:	d3e8      	bcc.n	8001200 <bme280_set_regs+0x56>
			}
			/* Burst write mode */
			if (len > 1) {
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d90d      	bls.n	8001250 <bme280_set_regs+0xa6>
				/* Interleave register address w.r.t data for
				burst write*/
				interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	f107 0114 	add.w	r1, r7, #20
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	68f8      	ldr	r0, [r7, #12]
 800123e:	f001 f8c8 	bl	80023d2 <interleave_reg_addr>
				temp_len = ((len * 2) - 1);
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	b29b      	uxth	r3, r3
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	b29b      	uxth	r3, r3
 800124a:	3b01      	subs	r3, #1
 800124c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800124e:	e001      	b.n	8001254 <bme280_set_regs+0xaa>
			} else {
				temp_len = len;
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	85bb      	strh	r3, [r7, #44]	@ 0x2c
			}
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	689c      	ldr	r4, [r3, #8]
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	7858      	ldrb	r0, [r3, #1]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	7819      	ldrb	r1, [r3, #0]
 8001260:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001262:	f107 0214 	add.w	r2, r7, #20
 8001266:	47a0      	blx	r4
 8001268:	4603      	mov	r3, r0
 800126a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			/* Check for communication error */
			if (rslt != BME280_OK)
 800126e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8001272:	2b00      	cmp	r3, #0
 8001274:	d00b      	beq.n	800128e <bme280_set_regs+0xe4>
				rslt = BME280_E_COMM_FAIL;
 8001276:	23fc      	movs	r3, #252	@ 0xfc
 8001278:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (len != 0) {
 800127c:	e007      	b.n	800128e <bme280_set_regs+0xe4>
		} else {
			rslt = BME280_E_INVALID_LEN;
 800127e:	23fd      	movs	r3, #253	@ 0xfd
 8001280:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (len != 0) {
 8001284:	e003      	b.n	800128e <bme280_set_regs+0xe4>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8001286:	23ff      	movs	r3, #255	@ 0xff
 8001288:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800128c:	e000      	b.n	8001290 <bme280_set_regs+0xe6>
		if (len != 0) {
 800128e:	bf00      	nop
	}


	return rslt;
 8001290:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8001294:	4618      	mov	r0, r3
 8001296:	3734      	adds	r7, #52	@ 0x34
 8001298:	46bd      	mov	sp, r7
 800129a:	bd90      	pop	{r4, r7, pc}

0800129c <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	6039      	str	r1, [r7, #0]
 80012a6:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t sensor_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80012a8:	6838      	ldr	r0, [r7, #0]
 80012aa:	f001 f9d9 	bl	8002660 <null_ptr_check>
 80012ae:	4603      	mov	r3, r0
 80012b0:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 80012b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d13f      	bne.n	800133a <bme280_set_sensor_settings+0x9e>
		rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 80012ba:	f107 030e 	add.w	r3, r7, #14
 80012be:	6839      	ldr	r1, [r7, #0]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f000 f874 	bl	80013ae <bme280_get_sensor_mode>
 80012c6:	4603      	mov	r3, r0
 80012c8:	73fb      	strb	r3, [r7, #15]
		if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 80012ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d107      	bne.n	80012e2 <bme280_set_sensor_settings+0x46>
 80012d2:	7bbb      	ldrb	r3, [r7, #14]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d004      	beq.n	80012e2 <bme280_set_sensor_settings+0x46>
			rslt = put_device_to_sleep(dev);
 80012d8:	6838      	ldr	r0, [r7, #0]
 80012da:	f000 fb36 	bl	800194a <put_device_to_sleep>
 80012de:	4603      	mov	r3, r0
 80012e0:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK) {
 80012e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d127      	bne.n	800133a <bme280_set_sensor_settings+0x9e>
			/* Check if user wants to change oversampling
			   settings */
			if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	4619      	mov	r1, r3
 80012ee:	2007      	movs	r0, #7
 80012f0:	f001 f99a 	bl	8002628 <are_settings_changed>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d009      	beq.n	800130e <bme280_set_sensor_settings+0x72>
				rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	683a      	ldr	r2, [r7, #0]
 8001304:	4618      	mov	r0, r3
 8001306:	f000 f972 	bl	80015ee <set_osr_settings>
 800130a:	4603      	mov	r3, r0
 800130c:	73fb      	strb	r3, [r7, #15]
			/* Check if user wants to change filter and/or
			   standby settings */
			if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 800130e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d111      	bne.n	800133a <bme280_set_sensor_settings+0x9e>
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	4619      	mov	r1, r3
 800131a:	2018      	movs	r0, #24
 800131c:	f001 f984 	bl	8002628 <are_settings_changed>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d009      	beq.n	800133a <bme280_set_sensor_settings+0x9e>
				rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	683a      	ldr	r2, [r7, #0]
 8001330:	4618      	mov	r0, r3
 8001332:	f000 f9f9 	bl	8001728 <set_filter_standby_settings>
 8001336:	4603      	mov	r3, r0
 8001338:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
 800133a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800133e:	4618      	mov	r0, r3
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b084      	sub	sp, #16
 800134a:	af00      	add	r7, sp, #0
 800134c:	4603      	mov	r3, r0
 800134e:	6039      	str	r1, [r7, #0]
 8001350:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t last_set_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001352:	6838      	ldr	r0, [r7, #0]
 8001354:	f001 f984 	bl	8002660 <null_ptr_check>
 8001358:	4603      	mov	r3, r0
 800135a:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 800135c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d11e      	bne.n	80013a2 <bme280_set_sensor_mode+0x5c>
		rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 8001364:	f107 030e 	add.w	r3, r7, #14
 8001368:	6839      	ldr	r1, [r7, #0]
 800136a:	4618      	mov	r0, r3
 800136c:	f000 f81f 	bl	80013ae <bme280_get_sensor_mode>
 8001370:	4603      	mov	r3, r0
 8001372:	73fb      	strb	r3, [r7, #15]
		/* If the sensor is not in sleep mode put the device to sleep
		   mode */
		if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 8001374:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d107      	bne.n	800138c <bme280_set_sensor_mode+0x46>
 800137c:	7bbb      	ldrb	r3, [r7, #14]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d004      	beq.n	800138c <bme280_set_sensor_mode+0x46>
			rslt = put_device_to_sleep(dev);
 8001382:	6838      	ldr	r0, [r7, #0]
 8001384:	f000 fae1 	bl	800194a <put_device_to_sleep>
 8001388:	4603      	mov	r3, r0
 800138a:	73fb      	strb	r3, [r7, #15]
		/* Set the power mode */
		if (rslt == BME280_OK)
 800138c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d106      	bne.n	80013a2 <bme280_set_sensor_mode+0x5c>
			rslt = write_power_mode(sensor_mode, dev);
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	6839      	ldr	r1, [r7, #0]
 8001398:	4618      	mov	r0, r3
 800139a:	f000 faa3 	bl	80018e4 <write_power_mode>
 800139e:	4603      	mov	r3, r0
 80013a0:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80013a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b084      	sub	sp, #16
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
 80013b6:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80013b8:	6838      	ldr	r0, [r7, #0]
 80013ba:	f001 f951 	bl	8002660 <null_ptr_check>
 80013be:	4603      	mov	r3, r0
 80013c0:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 80013c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d10e      	bne.n	80013e8 <bme280_get_sensor_mode+0x3a>
		/* Read the power mode register */
		rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	2201      	movs	r2, #1
 80013ce:	6879      	ldr	r1, [r7, #4]
 80013d0:	20f4      	movs	r0, #244	@ 0xf4
 80013d2:	f7ff feba 	bl	800114a <bme280_get_regs>
 80013d6:	4603      	mov	r3, r0
 80013d8:	73fb      	strb	r3, [r7, #15]
		/* Assign the power mode in the device structure */
		*sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	f003 0303 	and.w	r3, r3, #3
 80013e2:	b2da      	uxtb	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
 80013e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3710      	adds	r7, #16
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_RESET_ADDR;
 80013fc:	23e0      	movs	r3, #224	@ 0xe0
 80013fe:	73bb      	strb	r3, [r7, #14]
	/* 0xB6 is the soft reset command */
	uint8_t soft_rst_cmd = 0xB6;
 8001400:	23b6      	movs	r3, #182	@ 0xb6
 8001402:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f001 f92b 	bl	8002660 <null_ptr_check>
 800140a:	4603      	mov	r3, r0
 800140c:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 800140e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d10d      	bne.n	8001432 <bme280_soft_reset+0x3e>
		/* Write the soft reset command in the sensor */
		rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001416:	f107 010d 	add.w	r1, r7, #13
 800141a:	f107 000e 	add.w	r0, r7, #14
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2201      	movs	r2, #1
 8001422:	f7ff fec2 	bl	80011aa <bme280_set_regs>
 8001426:	4603      	mov	r3, r0
 8001428:	73fb      	strb	r3, [r7, #15]
		/* As per data sheet, startup time is 2 ms. */
		dev->delay_ms(2);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	68db      	ldr	r3, [r3, #12]
 800142e:	2002      	movs	r0, #2
 8001430:	4798      	blx	r3
	}

	return rslt;
 8001432:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001436:	4618      	mov	r0, r3
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b08a      	sub	sp, #40	@ 0x28
 8001442:	af00      	add	r7, sp, #0
 8001444:	4603      	mov	r3, r0
 8001446:	60b9      	str	r1, [r7, #8]
 8001448:	607a      	str	r2, [r7, #4]
 800144a:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	/* Array to store the pressure, temperature and humidity data read from
	the sensor */
	uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
 800144c:	2300      	movs	r3, #0
 800144e:	61fb      	str	r3, [r7, #28]
 8001450:	2300      	movs	r3, #0
 8001452:	623b      	str	r3, [r7, #32]
	struct bme280_uncomp_data uncomp_data = {0};
 8001454:	f107 0310 	add.w	r3, r7, #16
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f001 f8fd 	bl	8002660 <null_ptr_check>
 8001466:	4603      	mov	r3, r0
 8001468:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if ((rslt == BME280_OK) && (comp_data != NULL)) {
 800146c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001470:	2b00      	cmp	r3, #0
 8001472:	d124      	bne.n	80014be <bme280_get_sensor_data+0x80>
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d021      	beq.n	80014be <bme280_get_sensor_data+0x80>
		/* Read the pressure and temperature data from the sensor */
		rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 800147a:	f107 011c 	add.w	r1, r7, #28
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2208      	movs	r2, #8
 8001482:	20f7      	movs	r0, #247	@ 0xf7
 8001484:	f7ff fe61 	bl	800114a <bme280_get_regs>
 8001488:	4603      	mov	r3, r0
 800148a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		if (rslt == BME280_OK) {
 800148e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001492:	2b00      	cmp	r3, #0
 8001494:	d116      	bne.n	80014c4 <bme280_get_sensor_data+0x86>
			/* Parse the read data from the sensor */
			bme280_parse_sensor_data(reg_data, &uncomp_data);
 8001496:	f107 0210 	add.w	r2, r7, #16
 800149a:	f107 031c 	add.w	r3, r7, #28
 800149e:	4611      	mov	r1, r2
 80014a0:	4618      	mov	r0, r3
 80014a2:	f000 f815 	bl	80014d0 <bme280_parse_sensor_data>
			/* Compensate the pressure and/or temperature and/or
			   humidity data from the sensor */
			rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	3310      	adds	r3, #16
 80014aa:	f107 0110 	add.w	r1, r7, #16
 80014ae:	7bf8      	ldrb	r0, [r7, #15]
 80014b0:	68ba      	ldr	r2, [r7, #8]
 80014b2:	f000 f853 	bl	800155c <bme280_compensate_data>
 80014b6:	4603      	mov	r3, r0
 80014b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (rslt == BME280_OK) {
 80014bc:	e002      	b.n	80014c4 <bme280_get_sensor_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 80014be:	23ff      	movs	r3, #255	@ 0xff
 80014c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	return rslt;
 80014c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3728      	adds	r7, #40	@ 0x28
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b087      	sub	sp, #28
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
	uint32_t data_xlsb;
	uint32_t data_lsb;
	uint32_t data_msb;

	/* Store the parsed register values for pressure data */
	data_msb = (uint32_t)reg_data[0] << 12;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	031b      	lsls	r3, r3, #12
 80014e0:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[1] << 4;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	3301      	adds	r3, #1
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	011b      	lsls	r3, r3, #4
 80014ea:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[2] >> 4;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3302      	adds	r3, #2
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	091b      	lsrs	r3, r3, #4
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	60fb      	str	r3, [r7, #12]
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 80014f8:	697a      	ldr	r2, [r7, #20]
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	431a      	orrs	r2, r3
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	431a      	orrs	r2, r3
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	601a      	str	r2, [r3, #0]

	/* Store the parsed register values for temperature data */
	data_msb = (uint32_t)reg_data[3] << 12;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	3303      	adds	r3, #3
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	031b      	lsls	r3, r3, #12
 800150e:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[4] << 4;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3304      	adds	r3, #4
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	011b      	lsls	r3, r3, #4
 8001518:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[5] >> 4;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	3305      	adds	r3, #5
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	091b      	lsrs	r3, r3, #4
 8001522:	b2db      	uxtb	r3, r3
 8001524:	60fb      	str	r3, [r7, #12]
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8001526:	697a      	ldr	r2, [r7, #20]
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	431a      	orrs	r2, r3
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	431a      	orrs	r2, r3
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	605a      	str	r2, [r3, #4]

	/* Store the parsed register values for temperature data */
	data_lsb = (uint32_t)reg_data[6] << 8;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3306      	adds	r3, #6
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	021b      	lsls	r3, r3, #8
 800153c:	613b      	str	r3, [r7, #16]
	data_msb = (uint32_t)reg_data[7];
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	3307      	adds	r3, #7
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	617b      	str	r3, [r7, #20]
	uncomp_data->humidity = data_msb | data_lsb;
 8001546:	697a      	ldr	r2, [r7, #20]
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	431a      	orrs	r2, r3
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	609a      	str	r2, [r3, #8]
}
 8001550:	bf00      	nop
 8001552:	371c      	adds	r7, #28
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <bme280_compensate_data>:
 * temperature and/or humidity data according to the component selected
 * by the user.
 */
int8_t bme280_compensate_data(uint8_t sensor_comp, const struct bme280_uncomp_data *uncomp_data,
				     struct bme280_data *comp_data, struct bme280_calib_data *calib_data)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0
 8001562:	60b9      	str	r1, [r7, #8]
 8001564:	607a      	str	r2, [r7, #4]
 8001566:	603b      	str	r3, [r7, #0]
 8001568:	4603      	mov	r3, r0
 800156a:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_OK;
 800156c:	2300      	movs	r3, #0
 800156e:	75fb      	strb	r3, [r7, #23]

	if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL)) {
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d033      	beq.n	80015de <bme280_compensate_data+0x82>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d030      	beq.n	80015de <bme280_compensate_data+0x82>
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d02d      	beq.n	80015de <bme280_compensate_data+0x82>
		/* Initialize to zero */
		comp_data->temperature = 0;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	605a      	str	r2, [r3, #4]
		comp_data->pressure = 0;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
		comp_data->humidity = 0;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
		/* If pressure or temperature component is selected */
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
 8001594:	7bfb      	ldrb	r3, [r7, #15]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	2b00      	cmp	r3, #0
 800159c:	d006      	beq.n	80015ac <bme280_compensate_data+0x50>
			/* Compensate the temperature data */
			comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 800159e:	6839      	ldr	r1, [r7, #0]
 80015a0:	68b8      	ldr	r0, [r7, #8]
 80015a2:	f000 fa1f 	bl	80019e4 <compensate_temperature>
 80015a6:	4602      	mov	r2, r0
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	605a      	str	r2, [r3, #4]
		}
		if (sensor_comp & BME280_PRESS) {
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d006      	beq.n	80015c4 <bme280_compensate_data+0x68>
			/* Compensate the pressure data */
			comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 80015b6:	6839      	ldr	r1, [r7, #0]
 80015b8:	68b8      	ldr	r0, [r7, #8]
 80015ba:	f000 fa75 	bl	8001aa8 <compensate_pressure>
 80015be:	4602      	mov	r2, r0
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	601a      	str	r2, [r3, #0]
		}
		if (sensor_comp & BME280_HUM) {
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
 80015c6:	f003 0304 	and.w	r3, r3, #4
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d009      	beq.n	80015e2 <bme280_compensate_data+0x86>
			/* Compensate the humidity data */
			comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 80015ce:	6839      	ldr	r1, [r7, #0]
 80015d0:	68b8      	ldr	r0, [r7, #8]
 80015d2:	f000 fe0d 	bl	80021f0 <compensate_humidity>
 80015d6:	4602      	mov	r2, r0
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	609a      	str	r2, [r3, #8]
		if (sensor_comp & BME280_HUM) {
 80015dc:	e001      	b.n	80015e2 <bme280_compensate_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 80015de:	23ff      	movs	r3, #255	@ 0xff
 80015e0:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80015e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3718      	adds	r7, #24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <set_osr_settings>:
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings,
				const struct bme280_dev *dev)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b086      	sub	sp, #24
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	4603      	mov	r3, r0
 80015f6:	60b9      	str	r1, [r7, #8]
 80015f8:	607a      	str	r2, [r7, #4]
 80015fa:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 80015fc:	2301      	movs	r3, #1
 80015fe:	75fb      	strb	r3, [r7, #23]

	if (desired_settings & BME280_OSR_HUM_SEL)
 8001600:	7bfb      	ldrb	r3, [r7, #15]
 8001602:	f003 0304 	and.w	r3, r3, #4
 8001606:	2b00      	cmp	r3, #0
 8001608:	d005      	beq.n	8001616 <set_osr_settings+0x28>
		rslt = set_osr_humidity_settings(settings, dev);
 800160a:	6879      	ldr	r1, [r7, #4]
 800160c:	68b8      	ldr	r0, [r7, #8]
 800160e:	f000 f815 	bl	800163c <set_osr_humidity_settings>
 8001612:	4603      	mov	r3, r0
 8001614:	75fb      	strb	r3, [r7, #23]
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 8001616:	7bfb      	ldrb	r3, [r7, #15]
 8001618:	f003 0303 	and.w	r3, r3, #3
 800161c:	2b00      	cmp	r3, #0
 800161e:	d007      	beq.n	8001630 <set_osr_settings+0x42>
		rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 8001620:	7bfb      	ldrb	r3, [r7, #15]
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	68b9      	ldr	r1, [r7, #8]
 8001626:	4618      	mov	r0, r3
 8001628:	f000 f842 	bl	80016b0 <set_osr_press_temp_settings>
 800162c:	4603      	mov	r3, r0
 800162e:	75fb      	strb	r3, [r7, #23]

	return rslt;
 8001630:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001634:	4618      	mov	r0, r3
 8001636:	3718      	adds	r7, #24
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t ctrl_hum;
	uint8_t ctrl_meas;
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 8001646:	23f2      	movs	r3, #242	@ 0xf2
 8001648:	733b      	strb	r3, [r7, #12]

	ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	789b      	ldrb	r3, [r3, #2]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	b2db      	uxtb	r3, r3
 8001654:	73bb      	strb	r3, [r7, #14]
	/* Write the humidity control value in the register */
	rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 8001656:	f107 010e 	add.w	r1, r7, #14
 800165a:	f107 000c 	add.w	r0, r7, #12
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	2201      	movs	r2, #1
 8001662:	f7ff fda2 	bl	80011aa <bme280_set_regs>
 8001666:	4603      	mov	r3, r0
 8001668:	73fb      	strb	r3, [r7, #15]
	/* Humidity related changes will be only effective after a
	   write operation to ctrl_meas register */
	if (rslt == BME280_OK) {
 800166a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d118      	bne.n	80016a4 <set_osr_humidity_settings+0x68>
		reg_addr = BME280_CTRL_MEAS_ADDR;
 8001672:	23f4      	movs	r3, #244	@ 0xf4
 8001674:	733b      	strb	r3, [r7, #12]
		rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 8001676:	7b38      	ldrb	r0, [r7, #12]
 8001678:	f107 010d 	add.w	r1, r7, #13
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	2201      	movs	r2, #1
 8001680:	f7ff fd63 	bl	800114a <bme280_get_regs>
 8001684:	4603      	mov	r3, r0
 8001686:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK)
 8001688:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d109      	bne.n	80016a4 <set_osr_humidity_settings+0x68>
			rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 8001690:	f107 010d 	add.w	r1, r7, #13
 8001694:	f107 000c 	add.w	r0, r7, #12
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	2201      	movs	r2, #1
 800169c:	f7ff fd85 	bl	80011aa <bme280_set_regs>
 80016a0:	4603      	mov	r3, r0
 80016a2:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80016a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3710      	adds	r7, #16
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <set_osr_press_temp_settings>:
 * @brief This API sets the pressure and/or temperature oversampling settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
 80016bc:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 80016be:	23f4      	movs	r3, #244	@ 0xf4
 80016c0:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 80016c2:	7db8      	ldrb	r0, [r7, #22]
 80016c4:	f107 0115 	add.w	r1, r7, #21
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2201      	movs	r2, #1
 80016cc:	f7ff fd3d 	bl	800114a <bme280_get_regs>
 80016d0:	4603      	mov	r3, r0
 80016d2:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 80016d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d11f      	bne.n	800171c <set_osr_press_temp_settings+0x6c>
		if (desired_settings & BME280_OSR_PRESS_SEL)
 80016dc:	7bfb      	ldrb	r3, [r7, #15]
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d005      	beq.n	80016f2 <set_osr_press_temp_settings+0x42>
			fill_osr_press_settings(&reg_data, settings);
 80016e6:	f107 0315 	add.w	r3, r7, #21
 80016ea:	68b9      	ldr	r1, [r7, #8]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f000 f88e 	bl	800180e <fill_osr_press_settings>
		if (desired_settings & BME280_OSR_TEMP_SEL)
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
 80016f4:	f003 0302 	and.w	r3, r3, #2
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d005      	beq.n	8001708 <set_osr_press_temp_settings+0x58>
			fill_osr_temp_settings(&reg_data, settings);
 80016fc:	f107 0315 	add.w	r3, r7, #21
 8001700:	68b9      	ldr	r1, [r7, #8]
 8001702:	4618      	mov	r0, r3
 8001704:	f000 f8a0 	bl	8001848 <fill_osr_temp_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8001708:	f107 0115 	add.w	r1, r7, #21
 800170c:	f107 0016 	add.w	r0, r7, #22
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2201      	movs	r2, #1
 8001714:	f7ff fd49 	bl	80011aa <bme280_set_regs>
 8001718:	4603      	mov	r3, r0
 800171a:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800171c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001720:	4618      	mov	r0, r3
 8001722:	3718      	adds	r7, #24
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <set_filter_standby_settings>:
 * @brief This internal API sets the filter and/or standby duration settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
 8001734:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CONFIG_ADDR;
 8001736:	23f5      	movs	r3, #245	@ 0xf5
 8001738:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 800173a:	7db8      	ldrb	r0, [r7, #22]
 800173c:	f107 0115 	add.w	r1, r7, #21
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2201      	movs	r2, #1
 8001744:	f7ff fd01 	bl	800114a <bme280_get_regs>
 8001748:	4603      	mov	r3, r0
 800174a:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 800174c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d11f      	bne.n	8001794 <set_filter_standby_settings+0x6c>
		if (desired_settings & BME280_FILTER_SEL)
 8001754:	7bfb      	ldrb	r3, [r7, #15]
 8001756:	f003 0308 	and.w	r3, r3, #8
 800175a:	2b00      	cmp	r3, #0
 800175c:	d005      	beq.n	800176a <set_filter_standby_settings+0x42>
			fill_filter_settings(&reg_data, settings);
 800175e:	f107 0315 	add.w	r3, r7, #21
 8001762:	68b9      	ldr	r1, [r7, #8]
 8001764:	4618      	mov	r0, r3
 8001766:	f000 f81b 	bl	80017a0 <fill_filter_settings>
		if (desired_settings & BME280_STANDBY_SEL)
 800176a:	7bfb      	ldrb	r3, [r7, #15]
 800176c:	f003 0310 	and.w	r3, r3, #16
 8001770:	2b00      	cmp	r3, #0
 8001772:	d005      	beq.n	8001780 <set_filter_standby_settings+0x58>
			fill_standby_settings(&reg_data, settings);
 8001774:	f107 0315 	add.w	r3, r7, #21
 8001778:	68b9      	ldr	r1, [r7, #8]
 800177a:	4618      	mov	r0, r3
 800177c:	f000 f82d 	bl	80017da <fill_standby_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8001780:	f107 0115 	add.w	r1, r7, #21
 8001784:	f107 0016 	add.w	r0, r7, #22
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2201      	movs	r2, #1
 800178c:	f7ff fd0d 	bl	80011aa <bme280_set_regs>
 8001790:	4603      	mov	r3, r0
 8001792:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8001794:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001798:	4618      	mov	r0, r3
 800179a:	3718      	adds	r7, #24
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	b25b      	sxtb	r3, r3
 80017b0:	f023 031c 	bic.w	r3, r3, #28
 80017b4:	b25a      	sxtb	r2, r3
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	78db      	ldrb	r3, [r3, #3]
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	b25b      	sxtb	r3, r3
 80017be:	f003 031c 	and.w	r3, r3, #28
 80017c2:	b25b      	sxtb	r3, r3
 80017c4:	4313      	orrs	r3, r2
 80017c6:	b25b      	sxtb	r3, r3
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	701a      	strb	r2, [r3, #0]
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80017da:	b480      	push	{r7}
 80017dc:	b083      	sub	sp, #12
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
 80017e2:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	b25b      	sxtb	r3, r3
 80017ea:	f003 031f 	and.w	r3, r3, #31
 80017ee:	b25a      	sxtb	r2, r3
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	791b      	ldrb	r3, [r3, #4]
 80017f4:	015b      	lsls	r3, r3, #5
 80017f6:	b25b      	sxtb	r3, r3
 80017f8:	4313      	orrs	r3, r2
 80017fa:	b25b      	sxtb	r3, r3
 80017fc:	b2da      	uxtb	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	701a      	strb	r2, [r3, #0]
}
 8001802:	bf00      	nop
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800180e:	b480      	push	{r7}
 8001810:	b083      	sub	sp, #12
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
 8001816:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	b25b      	sxtb	r3, r3
 800181e:	f023 031c 	bic.w	r3, r3, #28
 8001822:	b25a      	sxtb	r2, r3
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	b25b      	sxtb	r3, r3
 800182c:	f003 031c 	and.w	r3, r3, #28
 8001830:	b25b      	sxtb	r3, r3
 8001832:	4313      	orrs	r3, r2
 8001834:	b25b      	sxtb	r3, r3
 8001836:	b2da      	uxtb	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	701a      	strb	r2, [r3, #0]
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	b25b      	sxtb	r3, r3
 8001858:	f003 031f 	and.w	r3, r3, #31
 800185c:	b25a      	sxtb	r2, r3
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	785b      	ldrb	r3, [r3, #1]
 8001862:	015b      	lsls	r3, r3, #5
 8001864:	b25b      	sxtb	r3, r3
 8001866:	4313      	orrs	r3, r2
 8001868:	b25b      	sxtb	r3, r3
 800186a:	b2da      	uxtb	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	701a      	strb	r2, [r3, #0]
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	b2da      	uxtb	r2, r3
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	709a      	strb	r2, [r3, #2]
	settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3302      	adds	r3, #2
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	109b      	asrs	r3, r3, #2
 800189c:	b2db      	uxtb	r3, r3
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	701a      	strb	r2, [r3, #0]
	settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3302      	adds	r3, #2
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	095b      	lsrs	r3, r3, #5
 80018b0:	b2da      	uxtb	r2, r3
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	705a      	strb	r2, [r3, #1]
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	3303      	adds	r3, #3
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	109b      	asrs	r3, r3, #2
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	f003 0307 	and.w	r3, r3, #7
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	70da      	strb	r2, [r3, #3]
	settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	3303      	adds	r3, #3
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	095b      	lsrs	r3, r3, #5
 80018d2:	b2da      	uxtb	r2, r3
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	711a      	strb	r2, [r3, #4]
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <write_power_mode>:
/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	6039      	str	r1, [r7, #0]
 80018ee:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 80018f0:	23f4      	movs	r3, #244	@ 0xf4
 80018f2:	73bb      	strb	r3, [r7, #14]
	/* Variable to store the value read from power mode register */
	uint8_t sensor_mode_reg_val;

	/* Read the power mode register */
	rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 80018f4:	7bb8      	ldrb	r0, [r7, #14]
 80018f6:	f107 010d 	add.w	r1, r7, #13
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	2201      	movs	r2, #1
 80018fe:	f7ff fc24 	bl	800114a <bme280_get_regs>
 8001902:	4603      	mov	r3, r0
 8001904:	73fb      	strb	r3, [r7, #15]
	/* Set the power mode */
	if (rslt == BME280_OK) {
 8001906:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d117      	bne.n	800193e <write_power_mode+0x5a>
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 800190e:	7b7b      	ldrb	r3, [r7, #13]
 8001910:	b25b      	sxtb	r3, r3
 8001912:	f023 0303 	bic.w	r3, r3, #3
 8001916:	b25a      	sxtb	r2, r3
 8001918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191c:	f003 0303 	and.w	r3, r3, #3
 8001920:	b25b      	sxtb	r3, r3
 8001922:	4313      	orrs	r3, r2
 8001924:	b25b      	sxtb	r3, r3
 8001926:	b2db      	uxtb	r3, r3
 8001928:	737b      	strb	r3, [r7, #13]
		/* Write the power mode in the register */
		rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 800192a:	f107 010d 	add.w	r1, r7, #13
 800192e:	f107 000e 	add.w	r0, r7, #14
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	2201      	movs	r2, #1
 8001936:	f7ff fc38 	bl	80011aa <bme280_set_regs>
 800193a:	4603      	mov	r3, r0
 800193c:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 800193e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001942:	4618      	mov	r0, r3
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b086      	sub	sp, #24
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_data[4];
	struct bme280_settings settings;

	rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 8001952:	f107 0110 	add.w	r1, r7, #16
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2204      	movs	r2, #4
 800195a:	20f2      	movs	r0, #242	@ 0xf2
 800195c:	f7ff fbf5 	bl	800114a <bme280_get_regs>
 8001960:	4603      	mov	r3, r0
 8001962:	75fb      	strb	r3, [r7, #23]
	if (rslt == BME280_OK) {
 8001964:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d118      	bne.n	800199e <put_device_to_sleep+0x54>
		parse_device_settings(reg_data, &settings);
 800196c:	f107 0208 	add.w	r2, r7, #8
 8001970:	f107 0310 	add.w	r3, r7, #16
 8001974:	4611      	mov	r1, r2
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff ff80 	bl	800187c <parse_device_settings>
		rslt = bme280_soft_reset(dev);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff fd39 	bl	80013f4 <bme280_soft_reset>
 8001982:	4603      	mov	r3, r0
 8001984:	75fb      	strb	r3, [r7, #23]
		if (rslt == BME280_OK)
 8001986:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d107      	bne.n	800199e <put_device_to_sleep+0x54>
			rslt = reload_device_settings(&settings, dev);
 800198e:	f107 0308 	add.w	r3, r7, #8
 8001992:	6879      	ldr	r1, [r7, #4]
 8001994:	4618      	mov	r0, r3
 8001996:	f000 f808 	bl	80019aa <reload_device_settings>
 800199a:	4603      	mov	r3, r0
 800199c:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800199e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3718      	adds	r7, #24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b084      	sub	sp, #16
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
 80019b2:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	201f      	movs	r0, #31
 80019ba:	f7ff fe18 	bl	80015ee <set_osr_settings>
 80019be:	4603      	mov	r3, r0
 80019c0:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME280_OK)
 80019c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d106      	bne.n	80019d8 <reload_device_settings+0x2e>
		rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 80019ca:	683a      	ldr	r2, [r7, #0]
 80019cc:	6879      	ldr	r1, [r7, #4]
 80019ce:	201f      	movs	r0, #31
 80019d0:	f7ff feaa 	bl	8001728 <set_filter_standby_settings>
 80019d4:	4603      	mov	r3, r0
 80019d6:	73fb      	strb	r3, [r7, #15]

	return rslt;
 80019d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in integer data type.
 */
static int32_t compensate_temperature(const struct bme280_uncomp_data *uncomp_data,
						struct bme280_calib_data *calib_data)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b089      	sub	sp, #36	@ 0x24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
	int32_t var1;
	int32_t var2;
	int32_t temperature;
	int32_t temperature_min = -4000;
 80019ee:	4b2d      	ldr	r3, [pc, #180]	@ (8001aa4 <compensate_temperature+0xc0>)
 80019f0:	61bb      	str	r3, [r7, #24]
	int32_t temperature_max = 8500;
 80019f2:	f242 1334 	movw	r3, #8500	@ 0x2134
 80019f6:	617b      	str	r3, [r7, #20]

	var1 = (int32_t)((uncomp_data->temperature / 8) - ((int32_t)calib_data->dig_T1 * 2));
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	08db      	lsrs	r3, r3, #3
 80019fe:	683a      	ldr	r2, [r7, #0]
 8001a00:	8812      	ldrh	r2, [r2, #0]
 8001a02:	0052      	lsls	r2, r2, #1
 8001a04:	1a9b      	subs	r3, r3, r2
 8001a06:	613b      	str	r3, [r7, #16]
	var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a0e:	461a      	mov	r2, r3
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	fb02 f303 	mul.w	r3, r2, r3
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	da01      	bge.n	8001a1e <compensate_temperature+0x3a>
 8001a1a:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8001a1e:	12db      	asrs	r3, r3, #11
 8001a20:	613b      	str	r3, [r7, #16]
	var2 = (int32_t)((uncomp_data->temperature / 16) - ((int32_t)calib_data->dig_T1));
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	091b      	lsrs	r3, r3, #4
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	8812      	ldrh	r2, [r2, #0]
 8001a2c:	1a9b      	subs	r3, r3, r2
 8001a2e:	60fb      	str	r3, [r7, #12]
	var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_T3)) / 16384;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	fb03 f303 	mul.w	r3, r3, r3
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	da01      	bge.n	8001a3e <compensate_temperature+0x5a>
 8001a3a:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8001a3e:	131b      	asrs	r3, r3, #12
 8001a40:	461a      	mov	r2, r3
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a48:	fb02 f303 	mul.w	r3, r2, r3
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	da02      	bge.n	8001a56 <compensate_temperature+0x72>
 8001a50:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 8001a54:	333f      	adds	r3, #63	@ 0x3f
 8001a56:	139b      	asrs	r3, r3, #14
 8001a58:	60fb      	str	r3, [r7, #12]
	calib_data->t_fine = var1 + var2;
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	441a      	add	r2, r3
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	625a      	str	r2, [r3, #36]	@ 0x24
	temperature = (calib_data->t_fine * 5 + 128) / 256;
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a68:	4613      	mov	r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4413      	add	r3, r2
 8001a6e:	3380      	adds	r3, #128	@ 0x80
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	da00      	bge.n	8001a76 <compensate_temperature+0x92>
 8001a74:	33ff      	adds	r3, #255	@ 0xff
 8001a76:	121b      	asrs	r3, r3, #8
 8001a78:	61fb      	str	r3, [r7, #28]

	if (temperature < temperature_min)
 8001a7a:	69fa      	ldr	r2, [r7, #28]
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	da02      	bge.n	8001a88 <compensate_temperature+0xa4>
		temperature = temperature_min;
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	61fb      	str	r3, [r7, #28]
 8001a86:	e005      	b.n	8001a94 <compensate_temperature+0xb0>
	else if (temperature > temperature_max)
 8001a88:	69fa      	ldr	r2, [r7, #28]
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	dd01      	ble.n	8001a94 <compensate_temperature+0xb0>
		temperature = temperature_max;
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	61fb      	str	r3, [r7, #28]

	return temperature;
 8001a94:	69fb      	ldr	r3, [r7, #28]
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3724      	adds	r7, #36	@ 0x24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	fffff060 	.word	0xfffff060

08001aa8 <compensate_pressure>:
 * return the compensated pressure data in integer data type with higher
 * accuracy.
 */
static uint32_t compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8001aa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001aac:	b0ea      	sub	sp, #424	@ 0x1a8
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	f8c7 0174 	str.w	r0, [r7, #372]	@ 0x174
 8001ab4:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int64_t var4;
	uint32_t pressure;
	uint32_t pressure_min = 3000000;
 8001ab8:	4bbf      	ldr	r3, [pc, #764]	@ (8001db8 <compensate_pressure+0x310>)
 8001aba:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
	uint32_t pressure_max = 11000000;
 8001abe:	4bbf      	ldr	r3, [pc, #764]	@ (8001dbc <compensate_pressure+0x314>)
 8001ac0:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c

	var1 = ((int64_t)calib_data->t_fine) - 128000;
 8001ac4:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aca:	17da      	asrs	r2, r3, #31
 8001acc:	4698      	mov	r8, r3
 8001ace:	4691      	mov	r9, r2
 8001ad0:	f5b8 3afa 	subs.w	sl, r8, #128000	@ 0x1f400
 8001ad4:	f149 3bff 	adc.w	fp, r9, #4294967295
 8001ad8:	e9c7 ab64 	strd	sl, fp, [r7, #400]	@ 0x190
	var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
 8001adc:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001ae0:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001ae4:	fb03 f102 	mul.w	r1, r3, r2
 8001ae8:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001aec:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001af0:	fb02 f303 	mul.w	r3, r2, r3
 8001af4:	18ca      	adds	r2, r1, r3
 8001af6:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001afa:	fba3 4503 	umull	r4, r5, r3, r3
 8001afe:	1953      	adds	r3, r2, r5
 8001b00:	461d      	mov	r5, r3
 8001b02:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001b06:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001b0a:	b21b      	sxth	r3, r3
 8001b0c:	17da      	asrs	r2, r3, #31
 8001b0e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001b12:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 8001b16:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	fb03 f205 	mul.w	r2, r3, r5
 8001b20:	460b      	mov	r3, r1
 8001b22:	fb04 f303 	mul.w	r3, r4, r3
 8001b26:	4413      	add	r3, r2
 8001b28:	4602      	mov	r2, r0
 8001b2a:	fba4 1202 	umull	r1, r2, r4, r2
 8001b2e:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 8001b32:	460a      	mov	r2, r1
 8001b34:	f8c7 2128 	str.w	r2, [r7, #296]	@ 0x128
 8001b38:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001b3c:	4413      	add	r3, r2
 8001b3e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001b42:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	@ 0x128
 8001b46:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
 8001b4a:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
	var2 = var2 + ((var1 * (int64_t)calib_data->dig_P5) * 131072);
 8001b4e:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001b52:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001b56:	b21b      	sxth	r3, r3
 8001b58:	17da      	asrs	r2, r3, #31
 8001b5a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8001b5e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001b62:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001b66:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	@ 0x118
 8001b6a:	462a      	mov	r2, r5
 8001b6c:	fb02 f203 	mul.w	r2, r2, r3
 8001b70:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001b74:	4621      	mov	r1, r4
 8001b76:	fb01 f303 	mul.w	r3, r1, r3
 8001b7a:	441a      	add	r2, r3
 8001b7c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001b80:	4621      	mov	r1, r4
 8001b82:	fba3 1301 	umull	r1, r3, r3, r1
 8001b86:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8001b90:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001b94:	18d3      	adds	r3, r2, r3
 8001b96:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8001b9a:	f04f 0000 	mov.w	r0, #0
 8001b9e:	f04f 0100 	mov.w	r1, #0
 8001ba2:	e9d7 455a 	ldrd	r4, r5, [r7, #360]	@ 0x168
 8001ba6:	462b      	mov	r3, r5
 8001ba8:	0459      	lsls	r1, r3, #17
 8001baa:	4623      	mov	r3, r4
 8001bac:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001bb0:	4623      	mov	r3, r4
 8001bb2:	0458      	lsls	r0, r3, #17
 8001bb4:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8001bb8:	1814      	adds	r4, r2, r0
 8001bba:	f8c7 40a8 	str.w	r4, [r7, #168]	@ 0xa8
 8001bbe:	414b      	adcs	r3, r1
 8001bc0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001bc4:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 8001bc8:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
	var2 = var2 + (((int64_t)calib_data->dig_P4) * 34359738368);
 8001bcc:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001bd0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001bd4:	b21b      	sxth	r3, r3
 8001bd6:	17da      	asrs	r2, r3, #31
 8001bd8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8001bdc:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 8001be0:	f04f 0000 	mov.w	r0, #0
 8001be4:	f04f 0100 	mov.w	r1, #0
 8001be8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001bec:	00d9      	lsls	r1, r3, #3
 8001bee:	2000      	movs	r0, #0
 8001bf0:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8001bf4:	1814      	adds	r4, r2, r0
 8001bf6:	f8c7 40a0 	str.w	r4, [r7, #160]	@ 0xa0
 8001bfa:	414b      	adcs	r3, r1
 8001bfc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001c00:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	@ 0xa0
 8001c04:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
	var1 = ((var1 * var1 * (int64_t)calib_data->dig_P3) / 256) + ((var1 * ((int64_t)calib_data->dig_P2) * 4096));
 8001c08:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001c0c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001c10:	fb03 f102 	mul.w	r1, r3, r2
 8001c14:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001c18:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001c1c:	fb02 f303 	mul.w	r3, r2, r3
 8001c20:	18ca      	adds	r2, r1, r3
 8001c22:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001c26:	fba3 1303 	umull	r1, r3, r3, r3
 8001c2a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8001c2e:	460b      	mov	r3, r1
 8001c30:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8001c34:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001c38:	18d3      	adds	r3, r2, r3
 8001c3a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8001c3e:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001c42:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001c46:	b21b      	sxth	r3, r3
 8001c48:	17da      	asrs	r2, r3, #31
 8001c4a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8001c4e:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8001c52:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 8001c56:	462b      	mov	r3, r5
 8001c58:	e9d7 8942 	ldrd	r8, r9, [r7, #264]	@ 0x108
 8001c5c:	4642      	mov	r2, r8
 8001c5e:	fb02 f203 	mul.w	r2, r2, r3
 8001c62:	464b      	mov	r3, r9
 8001c64:	4621      	mov	r1, r4
 8001c66:	fb01 f303 	mul.w	r3, r1, r3
 8001c6a:	4413      	add	r3, r2
 8001c6c:	4622      	mov	r2, r4
 8001c6e:	4641      	mov	r1, r8
 8001c70:	fba2 1201 	umull	r1, r2, r2, r1
 8001c74:	f8c7 215c 	str.w	r2, [r7, #348]	@ 0x15c
 8001c78:	460a      	mov	r2, r1
 8001c7a:	f8c7 2158 	str.w	r2, [r7, #344]	@ 0x158
 8001c7e:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 8001c82:	4413      	add	r3, r2
 8001c84:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8001c88:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	da09      	bge.n	8001ca4 <compensate_pressure+0x1fc>
 8001c90:	f112 01ff 	adds.w	r1, r2, #255	@ 0xff
 8001c94:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8001c98:	f143 0300 	adc.w	r3, r3, #0
 8001c9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001ca0:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8001ca4:	f04f 0000 	mov.w	r0, #0
 8001ca8:	f04f 0100 	mov.w	r1, #0
 8001cac:	0a10      	lsrs	r0, r2, #8
 8001cae:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001cb2:	1219      	asrs	r1, r3, #8
 8001cb4:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001cb8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001cbc:	b21b      	sxth	r3, r3
 8001cbe:	17da      	asrs	r2, r3, #31
 8001cc0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001cc4:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8001cc8:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001ccc:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	@ 0x100
 8001cd0:	464a      	mov	r2, r9
 8001cd2:	fb02 f203 	mul.w	r2, r2, r3
 8001cd6:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001cda:	4644      	mov	r4, r8
 8001cdc:	fb04 f303 	mul.w	r3, r4, r3
 8001ce0:	441a      	add	r2, r3
 8001ce2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001ce6:	4644      	mov	r4, r8
 8001ce8:	fba3 4304 	umull	r4, r3, r3, r4
 8001cec:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001cf0:	4623      	mov	r3, r4
 8001cf2:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001cf6:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001cfa:	18d3      	adds	r3, r2, r3
 8001cfc:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001d00:	f04f 0200 	mov.w	r2, #0
 8001d04:	f04f 0300 	mov.w	r3, #0
 8001d08:	e9d7 8954 	ldrd	r8, r9, [r7, #336]	@ 0x150
 8001d0c:	464c      	mov	r4, r9
 8001d0e:	0323      	lsls	r3, r4, #12
 8001d10:	4644      	mov	r4, r8
 8001d12:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001d16:	4644      	mov	r4, r8
 8001d18:	0322      	lsls	r2, r4, #12
 8001d1a:	1884      	adds	r4, r0, r2
 8001d1c:	f8c7 4090 	str.w	r4, [r7, #144]	@ 0x90
 8001d20:	eb41 0303 	adc.w	r3, r1, r3
 8001d24:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001d28:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	@ 0x90
 8001d2c:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
	var3 = ((int64_t)1) * 140737488355328;
 8001d30:	f04f 0200 	mov.w	r2, #0
 8001d34:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001d38:	e9c7 2360 	strd	r2, r3, [r7, #384]	@ 0x180
	var1 = (var3 + var1) * ((int64_t)calib_data->dig_P1) / 8589934592;
 8001d3c:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	@ 0x180
 8001d40:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8001d44:	1884      	adds	r4, r0, r2
 8001d46:	f8c7 40f8 	str.w	r4, [r7, #248]	@ 0xf8
 8001d4a:	eb41 0303 	adc.w	r3, r1, r3
 8001d4e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001d52:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001d56:	88db      	ldrh	r3, [r3, #6]
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8001d60:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001d64:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8001d68:	462b      	mov	r3, r5
 8001d6a:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 8001d6e:	4642      	mov	r2, r8
 8001d70:	fb02 f203 	mul.w	r2, r2, r3
 8001d74:	464b      	mov	r3, r9
 8001d76:	4621      	mov	r1, r4
 8001d78:	fb01 f303 	mul.w	r3, r1, r3
 8001d7c:	4413      	add	r3, r2
 8001d7e:	4622      	mov	r2, r4
 8001d80:	4641      	mov	r1, r8
 8001d82:	fba2 1201 	umull	r1, r2, r2, r1
 8001d86:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001d8a:	460a      	mov	r2, r1
 8001d8c:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001d90:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001d94:	4413      	add	r3, r2
 8001d96:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001d9a:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	da0e      	bge.n	8001dc0 <compensate_pressure+0x318>
 8001da2:	1e51      	subs	r1, r2, #1
 8001da4:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8001da8:	f143 0301 	adc.w	r3, r3, #1
 8001dac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001db0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001db4:	e004      	b.n	8001dc0 <compensate_pressure+0x318>
 8001db6:	bf00      	nop
 8001db8:	002dc6c0 	.word	0x002dc6c0
 8001dbc:	00a7d8c0 	.word	0x00a7d8c0
 8001dc0:	f04f 0000 	mov.w	r0, #0
 8001dc4:	f04f 0100 	mov.w	r1, #0
 8001dc8:	1058      	asrs	r0, r3, #1
 8001dca:	17d9      	asrs	r1, r3, #31
 8001dcc:	e9c7 0164 	strd	r0, r1, [r7, #400]	@ 0x190

	/* To avoid divide by zero exception */
	if (var1 != 0) {
 8001dd0:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	f000 81fc 	beq.w	80021d2 <compensate_pressure+0x72a>
		var4 = 1048576 - uncomp_data->pressure;
 8001dda:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001de4:	2200      	movs	r2, #0
 8001de6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001dea:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001dee:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	@ 0x80
 8001df2:	e9c7 345e 	strd	r3, r4, [r7, #376]	@ 0x178
		var4 = (((var4 * 2147483648) - var2) * 3125) / var1;
 8001df6:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 8001dfa:	f04f 0000 	mov.w	r0, #0
 8001dfe:	f04f 0100 	mov.w	r1, #0
 8001e02:	07d9      	lsls	r1, r3, #31
 8001e04:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8001e08:	07d0      	lsls	r0, r2, #31
 8001e0a:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8001e0e:	1a84      	subs	r4, r0, r2
 8001e10:	f8c7 40e8 	str.w	r4, [r7, #232]	@ 0xe8
 8001e14:	eb61 0303 	sbc.w	r3, r1, r3
 8001e18:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001e1c:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001e20:	4622      	mov	r2, r4
 8001e22:	462b      	mov	r3, r5
 8001e24:	1891      	adds	r1, r2, r2
 8001e26:	67b9      	str	r1, [r7, #120]	@ 0x78
 8001e28:	415b      	adcs	r3, r3
 8001e2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001e2c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8001e30:	4621      	mov	r1, r4
 8001e32:	1851      	adds	r1, r2, r1
 8001e34:	6739      	str	r1, [r7, #112]	@ 0x70
 8001e36:	4629      	mov	r1, r5
 8001e38:	414b      	adcs	r3, r1
 8001e3a:	677b      	str	r3, [r7, #116]	@ 0x74
 8001e3c:	f04f 0200 	mov.w	r2, #0
 8001e40:	f04f 0300 	mov.w	r3, #0
 8001e44:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8001e48:	4649      	mov	r1, r9
 8001e4a:	018b      	lsls	r3, r1, #6
 8001e4c:	4641      	mov	r1, r8
 8001e4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e52:	4641      	mov	r1, r8
 8001e54:	018a      	lsls	r2, r1, #6
 8001e56:	4641      	mov	r1, r8
 8001e58:	1889      	adds	r1, r1, r2
 8001e5a:	66b9      	str	r1, [r7, #104]	@ 0x68
 8001e5c:	4649      	mov	r1, r9
 8001e5e:	eb43 0101 	adc.w	r1, r3, r1
 8001e62:	66f9      	str	r1, [r7, #108]	@ 0x6c
 8001e64:	f04f 0200 	mov.w	r2, #0
 8001e68:	f04f 0300 	mov.w	r3, #0
 8001e6c:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8001e70:	4649      	mov	r1, r9
 8001e72:	008b      	lsls	r3, r1, #2
 8001e74:	4641      	mov	r1, r8
 8001e76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001e7a:	4641      	mov	r1, r8
 8001e7c:	008a      	lsls	r2, r1, #2
 8001e7e:	4610      	mov	r0, r2
 8001e80:	4619      	mov	r1, r3
 8001e82:	4603      	mov	r3, r0
 8001e84:	4622      	mov	r2, r4
 8001e86:	189b      	adds	r3, r3, r2
 8001e88:	663b      	str	r3, [r7, #96]	@ 0x60
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	462a      	mov	r2, r5
 8001e8e:	eb42 0303 	adc.w	r3, r2, r3
 8001e92:	667b      	str	r3, [r7, #100]	@ 0x64
 8001e94:	f04f 0200 	mov.w	r2, #0
 8001e98:	f04f 0300 	mov.w	r3, #0
 8001e9c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8001ea0:	4649      	mov	r1, r9
 8001ea2:	008b      	lsls	r3, r1, #2
 8001ea4:	4641      	mov	r1, r8
 8001ea6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001eaa:	4641      	mov	r1, r8
 8001eac:	008a      	lsls	r2, r1, #2
 8001eae:	4610      	mov	r0, r2
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	4622      	mov	r2, r4
 8001eb6:	189b      	adds	r3, r3, r2
 8001eb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001ebc:	462b      	mov	r3, r5
 8001ebe:	460a      	mov	r2, r1
 8001ec0:	eb42 0303 	adc.w	r3, r2, r3
 8001ec4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001ec8:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8001ecc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001ed0:	f7fe fef2 	bl	8000cb8 <__aeabi_ldivmod>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	e9c7 235e 	strd	r2, r3, [r7, #376]	@ 0x178
		var1 = (((int64_t)calib_data->dig_P9) * (var4 / 8192) * (var4 / 8192)) / 33554432;
 8001edc:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001ee0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001ee4:	b21b      	sxth	r3, r3
 8001ee6:	17da      	asrs	r2, r3, #31
 8001ee8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001eec:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001ef0:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	da08      	bge.n	8001f0a <compensate_pressure+0x462>
 8001ef8:	f641 71ff 	movw	r1, #8191	@ 0x1fff
 8001efc:	1851      	adds	r1, r2, r1
 8001efe:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001f00:	f143 0300 	adc.w	r3, r3, #0
 8001f04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001f06:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001f0a:	f04f 0000 	mov.w	r0, #0
 8001f0e:	f04f 0100 	mov.w	r1, #0
 8001f12:	0b50      	lsrs	r0, r2, #13
 8001f14:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001f18:	1359      	asrs	r1, r3, #13
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001f22:	4629      	mov	r1, r5
 8001f24:	fb02 f001 	mul.w	r0, r2, r1
 8001f28:	4621      	mov	r1, r4
 8001f2a:	fb01 f103 	mul.w	r1, r1, r3
 8001f2e:	4401      	add	r1, r0
 8001f30:	4620      	mov	r0, r4
 8001f32:	fba0 2302 	umull	r2, r3, r0, r2
 8001f36:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8001f40:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8001f44:	18cb      	adds	r3, r1, r3
 8001f46:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8001f4a:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	da08      	bge.n	8001f64 <compensate_pressure+0x4bc>
 8001f52:	f641 71ff 	movw	r1, #8191	@ 0x1fff
 8001f56:	1851      	adds	r1, r2, r1
 8001f58:	6539      	str	r1, [r7, #80]	@ 0x50
 8001f5a:	f143 0300 	adc.w	r3, r3, #0
 8001f5e:	657b      	str	r3, [r7, #84]	@ 0x54
 8001f60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001f64:	f04f 0000 	mov.w	r0, #0
 8001f68:	f04f 0100 	mov.w	r1, #0
 8001f6c:	0b50      	lsrs	r0, r2, #13
 8001f6e:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001f72:	1359      	asrs	r1, r3, #13
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	@ 0x140
 8001f7c:	4629      	mov	r1, r5
 8001f7e:	fb02 f001 	mul.w	r0, r2, r1
 8001f82:	4621      	mov	r1, r4
 8001f84:	fb01 f103 	mul.w	r1, r1, r3
 8001f88:	4401      	add	r1, r0
 8001f8a:	4620      	mov	r0, r4
 8001f8c:	fba0 2302 	umull	r2, r3, r0, r2
 8001f90:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8001f94:	4613      	mov	r3, r2
 8001f96:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8001f9a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001f9e:	18cb      	adds	r3, r1, r3
 8001fa0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8001fa4:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	da08      	bge.n	8001fbe <compensate_pressure+0x516>
 8001fac:	f06f 417e 	mvn.w	r1, #4261412864	@ 0xfe000000
 8001fb0:	1851      	adds	r1, r2, r1
 8001fb2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001fb4:	f143 0300 	adc.w	r3, r3, #0
 8001fb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001fba:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001fbe:	f04f 0000 	mov.w	r0, #0
 8001fc2:	f04f 0100 	mov.w	r1, #0
 8001fc6:	0e50      	lsrs	r0, r2, #25
 8001fc8:	ea40 10c3 	orr.w	r0, r0, r3, lsl #7
 8001fcc:	1659      	asrs	r1, r3, #25
 8001fce:	e9c7 0164 	strd	r0, r1, [r7, #400]	@ 0x190
		var2 = (((int64_t)calib_data->dig_P8) * var4) / 524288;
 8001fd2:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001fd6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001fda:	b21b      	sxth	r3, r3
 8001fdc:	17da      	asrs	r2, r3, #31
 8001fde:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001fe2:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001fe6:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8001fea:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001fee:	462a      	mov	r2, r5
 8001ff0:	fb02 f203 	mul.w	r2, r2, r3
 8001ff4:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001ff8:	4621      	mov	r1, r4
 8001ffa:	fb01 f303 	mul.w	r3, r1, r3
 8001ffe:	441a      	add	r2, r3
 8002000:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8002004:	4621      	mov	r1, r4
 8002006:	fba3 1301 	umull	r1, r3, r3, r1
 800200a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800200e:	460b      	mov	r3, r1
 8002010:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8002014:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002018:	18d3      	adds	r3, r2, r3
 800201a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800201e:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8002022:	2b00      	cmp	r3, #0
 8002024:	da07      	bge.n	8002036 <compensate_pressure+0x58e>
 8002026:	4971      	ldr	r1, [pc, #452]	@ (80021ec <compensate_pressure+0x744>)
 8002028:	1851      	adds	r1, r2, r1
 800202a:	6439      	str	r1, [r7, #64]	@ 0x40
 800202c:	f143 0300 	adc.w	r3, r3, #0
 8002030:	647b      	str	r3, [r7, #68]	@ 0x44
 8002032:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002036:	f04f 0000 	mov.w	r0, #0
 800203a:	f04f 0100 	mov.w	r1, #0
 800203e:	0cd0      	lsrs	r0, r2, #19
 8002040:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 8002044:	14d9      	asrs	r1, r3, #19
 8002046:	e9c7 0162 	strd	r0, r1, [r7, #392]	@ 0x188
		var4 = ((var4 + var1 + var2) / 256) + (((int64_t)calib_data->dig_P7) * 16);
 800204a:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	@ 0x178
 800204e:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8002052:	1884      	adds	r4, r0, r2
 8002054:	f8c7 40c8 	str.w	r4, [r7, #200]	@ 0xc8
 8002058:	eb41 0303 	adc.w	r3, r1, r3
 800205c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002060:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8002064:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8002068:	4621      	mov	r1, r4
 800206a:	1889      	adds	r1, r1, r2
 800206c:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 8002070:	4629      	mov	r1, r5
 8002072:	eb43 0101 	adc.w	r1, r3, r1
 8002076:	f8c7 10c4 	str.w	r1, [r7, #196]	@ 0xc4
 800207a:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 800207e:	2b00      	cmp	r3, #0
 8002080:	da07      	bge.n	8002092 <compensate_pressure+0x5ea>
 8002082:	f112 01ff 	adds.w	r1, r2, #255	@ 0xff
 8002086:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002088:	f143 0300 	adc.w	r3, r3, #0
 800208c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800208e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002092:	f04f 0000 	mov.w	r0, #0
 8002096:	f04f 0100 	mov.w	r1, #0
 800209a:	0a10      	lsrs	r0, r2, #8
 800209c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80020a0:	1219      	asrs	r1, r3, #8
 80020a2:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80020a6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80020aa:	b21b      	sxth	r3, r3
 80020ac:	17da      	asrs	r2, r3, #31
 80020ae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80020b2:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80020b6:	f04f 0200 	mov.w	r2, #0
 80020ba:	f04f 0300 	mov.w	r3, #0
 80020be:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80020c2:	464c      	mov	r4, r9
 80020c4:	0123      	lsls	r3, r4, #4
 80020c6:	4644      	mov	r4, r8
 80020c8:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80020cc:	4644      	mov	r4, r8
 80020ce:	0122      	lsls	r2, r4, #4
 80020d0:	1884      	adds	r4, r0, r2
 80020d2:	633c      	str	r4, [r7, #48]	@ 0x30
 80020d4:	eb41 0303 	adc.w	r3, r1, r3
 80020d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80020da:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80020de:	e9c7 345e 	strd	r3, r4, [r7, #376]	@ 0x178
		pressure = (uint32_t)(((var4 / 2) * 100) / 128);
 80020e2:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 80020e6:	0fd9      	lsrs	r1, r3, #31
 80020e8:	2000      	movs	r0, #0
 80020ea:	62b9      	str	r1, [r7, #40]	@ 0x28
 80020ec:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80020ee:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 80020f2:	4621      	mov	r1, r4
 80020f4:	1889      	adds	r1, r1, r2
 80020f6:	6239      	str	r1, [r7, #32]
 80020f8:	4629      	mov	r1, r5
 80020fa:	eb43 0101 	adc.w	r1, r3, r1
 80020fe:	6279      	str	r1, [r7, #36]	@ 0x24
 8002100:	f04f 0200 	mov.w	r2, #0
 8002104:	f04f 0300 	mov.w	r3, #0
 8002108:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800210c:	4621      	mov	r1, r4
 800210e:	084a      	lsrs	r2, r1, #1
 8002110:	4629      	mov	r1, r5
 8002112:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8002116:	4629      	mov	r1, r5
 8002118:	104b      	asrs	r3, r1, #1
 800211a:	4610      	mov	r0, r2
 800211c:	4619      	mov	r1, r3
 800211e:	4602      	mov	r2, r0
 8002120:	460b      	mov	r3, r1
 8002122:	1894      	adds	r4, r2, r2
 8002124:	61bc      	str	r4, [r7, #24]
 8002126:	415b      	adcs	r3, r3
 8002128:	61fb      	str	r3, [r7, #28]
 800212a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800212e:	1814      	adds	r4, r2, r0
 8002130:	613c      	str	r4, [r7, #16]
 8002132:	414b      	adcs	r3, r1
 8002134:	617b      	str	r3, [r7, #20]
 8002136:	f04f 0200 	mov.w	r2, #0
 800213a:	f04f 0300 	mov.w	r3, #0
 800213e:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002142:	464c      	mov	r4, r9
 8002144:	0163      	lsls	r3, r4, #5
 8002146:	4644      	mov	r4, r8
 8002148:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800214c:	4644      	mov	r4, r8
 800214e:	0162      	lsls	r2, r4, #5
 8002150:	4644      	mov	r4, r8
 8002152:	18a4      	adds	r4, r4, r2
 8002154:	60bc      	str	r4, [r7, #8]
 8002156:	464c      	mov	r4, r9
 8002158:	eb43 0404 	adc.w	r4, r3, r4
 800215c:	60fc      	str	r4, [r7, #12]
 800215e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002162:	4623      	mov	r3, r4
 8002164:	181b      	adds	r3, r3, r0
 8002166:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800216a:	462b      	mov	r3, r5
 800216c:	eb41 0303 	adc.w	r3, r1, r3
 8002170:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002174:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 8002178:	2b00      	cmp	r3, #0
 800217a:	da07      	bge.n	800218c <compensate_pressure+0x6e4>
 800217c:	f112 017f 	adds.w	r1, r2, #127	@ 0x7f
 8002180:	6039      	str	r1, [r7, #0]
 8002182:	f143 0300 	adc.w	r3, r3, #0
 8002186:	607b      	str	r3, [r7, #4]
 8002188:	e9d7 2300 	ldrd	r2, r3, [r7]
 800218c:	f04f 0000 	mov.w	r0, #0
 8002190:	f04f 0100 	mov.w	r1, #0
 8002194:	09d0      	lsrs	r0, r2, #7
 8002196:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 800219a:	11d9      	asrs	r1, r3, #7
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
 80021a0:	4613      	mov	r3, r2
 80021a2:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4

		if (pressure < pressure_min)
 80021a6:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 80021aa:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d204      	bcs.n	80021bc <compensate_pressure+0x714>
			pressure = pressure_min;
 80021b2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80021b6:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80021ba:	e00e      	b.n	80021da <compensate_pressure+0x732>
		else if (pressure > pressure_max)
 80021bc:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 80021c0:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d908      	bls.n	80021da <compensate_pressure+0x732>
			pressure = pressure_max;
 80021c8:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 80021cc:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80021d0:	e003      	b.n	80021da <compensate_pressure+0x732>
	} else {
		pressure = pressure_min;
 80021d2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80021d6:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
	}

	return pressure;
 80021da:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
}
 80021de:	4618      	mov	r0, r3
 80021e0:	f507 77d4 	add.w	r7, r7, #424	@ 0x1a8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021ea:	bf00      	nop
 80021ec:	0007ffff 	.word	0x0007ffff

080021f0 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in integer data type.
 */
static uint32_t compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b08b      	sub	sp, #44	@ 0x2c
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
	int32_t var2;
	int32_t var3;
	int32_t var4;
	int32_t var5;
	uint32_t humidity;
	uint32_t humidity_max = 102400;
 80021fa:	f44f 33c8 	mov.w	r3, #102400	@ 0x19000
 80021fe:	623b      	str	r3, [r7, #32]

	var1 = calib_data->t_fine - ((int32_t)76800);
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002204:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8002208:	61fb      	str	r3, [r7, #28]
	var2 = (int32_t)(uncomp_data->humidity * 16384);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	039b      	lsls	r3, r3, #14
 8002210:	61bb      	str	r3, [r7, #24]
	var3 = (int32_t)(((int32_t)calib_data->dig_H4) * 1048576);
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002218:	051b      	lsls	r3, r3, #20
 800221a:	617b      	str	r3, [r7, #20]
	var4 = ((int32_t)calib_data->dig_H5) * var1;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002222:	461a      	mov	r2, r3
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	fb02 f303 	mul.w	r3, r2, r3
 800222a:	613b      	str	r3, [r7, #16]
	var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	1ad2      	subs	r2, r2, r3
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800223a:	2b00      	cmp	r3, #0
 800223c:	da02      	bge.n	8002244 <compensate_humidity+0x54>
 800223e:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8002242:	337f      	adds	r3, #127	@ 0x7f
 8002244:	13db      	asrs	r3, r3, #15
 8002246:	60fb      	str	r3, [r7, #12]
	var2 = (var1 * ((int32_t)calib_data->dig_H6)) / 1024;
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	f993 3022 	ldrsb.w	r3, [r3, #34]	@ 0x22
 800224e:	461a      	mov	r2, r3
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	fb02 f303 	mul.w	r3, r2, r3
 8002256:	2b00      	cmp	r3, #0
 8002258:	da01      	bge.n	800225e <compensate_humidity+0x6e>
 800225a:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 800225e:	129b      	asrs	r3, r3, #10
 8002260:	61bb      	str	r3, [r7, #24]
	var3 = (var1 * ((int32_t)calib_data->dig_H3)) / 2048;
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	7f1b      	ldrb	r3, [r3, #28]
 8002266:	461a      	mov	r2, r3
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	fb02 f303 	mul.w	r3, r2, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	da01      	bge.n	8002276 <compensate_humidity+0x86>
 8002272:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8002276:	12db      	asrs	r3, r3, #11
 8002278:	617b      	str	r3, [r7, #20]
	var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	fb02 f303 	mul.w	r3, r2, r3
 8002286:	2b00      	cmp	r3, #0
 8002288:	da01      	bge.n	800228e <compensate_humidity+0x9e>
 800228a:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 800228e:	129b      	asrs	r3, r3, #10
 8002290:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8002294:	613b      	str	r3, [r7, #16]
	var2 = ((var4 * ((int32_t)calib_data->dig_H2)) + 8192) / 16384;
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800229c:	461a      	mov	r2, r3
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	fb02 f303 	mul.w	r3, r2, r3
 80022a4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	da02      	bge.n	80022b2 <compensate_humidity+0xc2>
 80022ac:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 80022b0:	333f      	adds	r3, #63	@ 0x3f
 80022b2:	139b      	asrs	r3, r3, #14
 80022b4:	61bb      	str	r3, [r7, #24]
	var3 = var5 * var2;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	fb02 f303 	mul.w	r3, r2, r3
 80022be:	617b      	str	r3, [r7, #20]
	var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	da02      	bge.n	80022cc <compensate_humidity+0xdc>
 80022c6:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 80022ca:	337f      	adds	r3, #127	@ 0x7f
 80022cc:	13db      	asrs	r3, r3, #15
 80022ce:	461a      	mov	r2, r3
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	da02      	bge.n	80022dc <compensate_humidity+0xec>
 80022d6:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 80022da:	337f      	adds	r3, #127	@ 0x7f
 80022dc:	13db      	asrs	r3, r3, #15
 80022de:	fb02 f303 	mul.w	r3, r2, r3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	da00      	bge.n	80022e8 <compensate_humidity+0xf8>
 80022e6:	337f      	adds	r3, #127	@ 0x7f
 80022e8:	11db      	asrs	r3, r3, #7
 80022ea:	613b      	str	r3, [r7, #16]
	var5 = var3 - ((var4 * ((int32_t)calib_data->dig_H1)) / 16);
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	7e1b      	ldrb	r3, [r3, #24]
 80022f0:	461a      	mov	r2, r3
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	fb02 f303 	mul.w	r3, r2, r3
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	da00      	bge.n	80022fe <compensate_humidity+0x10e>
 80022fc:	330f      	adds	r3, #15
 80022fe:	111b      	asrs	r3, r3, #4
 8002300:	425b      	negs	r3, r3
 8002302:	461a      	mov	r2, r3
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	4413      	add	r3, r2
 8002308:	60fb      	str	r3, [r7, #12]
	var5 = (var5 < 0 ? 0 : var5);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002310:	60fb      	str	r3, [r7, #12]
	var5 = (var5 > 419430400 ? 419430400 : var5);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8002318:	bfa8      	it	ge
 800231a:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 800231e:	60fb      	str	r3, [r7, #12]
	humidity = (uint32_t)(var5 / 4096);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2b00      	cmp	r3, #0
 8002324:	da01      	bge.n	800232a <compensate_humidity+0x13a>
 8002326:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 800232a:	131b      	asrs	r3, r3, #12
 800232c:	627b      	str	r3, [r7, #36]	@ 0x24

	if (humidity > humidity_max)
 800232e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002330:	6a3b      	ldr	r3, [r7, #32]
 8002332:	429a      	cmp	r2, r3
 8002334:	d901      	bls.n	800233a <compensate_humidity+0x14a>
		humidity = humidity_max;
 8002336:	6a3b      	ldr	r3, [r7, #32]
 8002338:	627b      	str	r3, [r7, #36]	@ 0x24

	return humidity;
 800233a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800233c:	4618      	mov	r0, r3
 800233e:	372c      	adds	r7, #44	@ 0x2c
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b08a      	sub	sp, #40	@ 0x28
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 8002350:	2388      	movs	r3, #136	@ 0x88
 8002352:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	/* Array to store calibration data */
	uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = {0};
 8002356:	2300      	movs	r3, #0
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	f107 0310 	add.w	r3, r7, #16
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]
 8002362:	605a      	str	r2, [r3, #4]
 8002364:	609a      	str	r2, [r3, #8]
 8002366:	60da      	str	r2, [r3, #12]
 8002368:	611a      	str	r2, [r3, #16]
 800236a:	829a      	strh	r2, [r3, #20]

	/* Read the calibration data from the sensor */
	rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 800236c:	f107 010c 	add.w	r1, r7, #12
 8002370:	f897 0026 	ldrb.w	r0, [r7, #38]	@ 0x26
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	221a      	movs	r2, #26
 8002378:	f7fe fee7 	bl	800114a <bme280_get_regs>
 800237c:	4603      	mov	r3, r0
 800237e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (rslt == BME280_OK) {
 8002382:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002386:	2b00      	cmp	r3, #0
 8002388:	d11d      	bne.n	80023c6 <get_calib_data+0x7e>
		/* Parse temperature and pressure calibration data and store
		   it in device structure */
		parse_temp_press_calib_data(calib_data, dev);
 800238a:	f107 030c 	add.w	r3, r7, #12
 800238e:	6879      	ldr	r1, [r7, #4]
 8002390:	4618      	mov	r0, r3
 8002392:	f000 f84a 	bl	800242a <parse_temp_press_calib_data>

		reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 8002396:	23e1      	movs	r3, #225	@ 0xe1
 8002398:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		/* Read the humidity calibration data from the sensor */
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 800239c:	f107 010c 	add.w	r1, r7, #12
 80023a0:	f897 0026 	ldrb.w	r0, [r7, #38]	@ 0x26
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2207      	movs	r2, #7
 80023a8:	f7fe fecf 	bl	800114a <bme280_get_regs>
 80023ac:	4603      	mov	r3, r0
 80023ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (rslt == BME280_OK) {
 80023b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d105      	bne.n	80023c6 <get_calib_data+0x7e>
			/* Parse humidity calibration data and store it in
			   device structure */
			parse_humidity_calib_data(calib_data, dev);
 80023ba:	f107 030c 	add.w	r3, r7, #12
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f000 f8e2 	bl	800258a <parse_humidity_calib_data>
		}
	}

	return rslt;
 80023c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3728      	adds	r7, #40	@ 0x28
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 80023d2:	b480      	push	{r7}
 80023d4:	b087      	sub	sp, #28
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	60f8      	str	r0, [r7, #12]
 80023da:	60b9      	str	r1, [r7, #8]
 80023dc:	607a      	str	r2, [r7, #4]
 80023de:	70fb      	strb	r3, [r7, #3]
	uint8_t index;

	for (index = 1; index < len; index++) {
 80023e0:	2301      	movs	r3, #1
 80023e2:	75fb      	strb	r3, [r7, #23]
 80023e4:	e016      	b.n	8002414 <interleave_reg_addr+0x42>
		temp_buff[(index * 2) - 1] = reg_addr[index];
 80023e6:	7dfb      	ldrb	r3, [r7, #23]
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	441a      	add	r2, r3
 80023ec:	7dfb      	ldrb	r3, [r7, #23]
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	3b01      	subs	r3, #1
 80023f2:	68b9      	ldr	r1, [r7, #8]
 80023f4:	440b      	add	r3, r1
 80023f6:	7812      	ldrb	r2, [r2, #0]
 80023f8:	701a      	strb	r2, [r3, #0]
		temp_buff[index * 2] = reg_data[index];
 80023fa:	7dfb      	ldrb	r3, [r7, #23]
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	441a      	add	r2, r3
 8002400:	7dfb      	ldrb	r3, [r7, #23]
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	4619      	mov	r1, r3
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	440b      	add	r3, r1
 800240a:	7812      	ldrb	r2, [r2, #0]
 800240c:	701a      	strb	r2, [r3, #0]
	for (index = 1; index < len; index++) {
 800240e:	7dfb      	ldrb	r3, [r7, #23]
 8002410:	3301      	adds	r3, #1
 8002412:	75fb      	strb	r3, [r7, #23]
 8002414:	7dfa      	ldrb	r2, [r7, #23]
 8002416:	78fb      	ldrb	r3, [r7, #3]
 8002418:	429a      	cmp	r2, r3
 800241a:	d3e4      	bcc.n	80023e6 <interleave_reg_addr+0x14>
	}
}
 800241c:	bf00      	nop
 800241e:	bf00      	nop
 8002420:	371c      	adds	r7, #28
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr

0800242a <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 800242a:	b480      	push	{r7}
 800242c:	b085      	sub	sp, #20
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
 8002432:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	3310      	adds	r3, #16
 8002438:	60fb      	str	r3, [r7, #12]

	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	3301      	adds	r3, #1
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	021b      	lsls	r3, r3, #8
 8002442:	b21a      	sxth	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	b21b      	sxth	r3, r3
 800244a:	4313      	orrs	r3, r2
 800244c:	b21b      	sxth	r3, r3
 800244e:	b29a      	uxth	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	801a      	strh	r2, [r3, #0]
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	3303      	adds	r3, #3
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	021b      	lsls	r3, r3, #8
 800245c:	b21a      	sxth	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	3302      	adds	r3, #2
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	b21b      	sxth	r3, r3
 8002466:	4313      	orrs	r3, r2
 8002468:	b21a      	sxth	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	805a      	strh	r2, [r3, #2]
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	3305      	adds	r3, #5
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	021b      	lsls	r3, r3, #8
 8002476:	b21a      	sxth	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3304      	adds	r3, #4
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	b21b      	sxth	r3, r3
 8002480:	4313      	orrs	r3, r2
 8002482:	b21a      	sxth	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	809a      	strh	r2, [r3, #4]
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3307      	adds	r3, #7
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	021b      	lsls	r3, r3, #8
 8002490:	b21a      	sxth	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	3306      	adds	r3, #6
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	b21b      	sxth	r3, r3
 800249a:	4313      	orrs	r3, r2
 800249c:	b21b      	sxth	r3, r3
 800249e:	b29a      	uxth	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	80da      	strh	r2, [r3, #6]
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3309      	adds	r3, #9
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	021b      	lsls	r3, r3, #8
 80024ac:	b21a      	sxth	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	3308      	adds	r3, #8
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	b21b      	sxth	r3, r3
 80024b6:	4313      	orrs	r3, r2
 80024b8:	b21a      	sxth	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	811a      	strh	r2, [r3, #8]
	calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	330b      	adds	r3, #11
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	021b      	lsls	r3, r3, #8
 80024c6:	b21a      	sxth	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	330a      	adds	r3, #10
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	b21b      	sxth	r3, r3
 80024d0:	4313      	orrs	r3, r2
 80024d2:	b21a      	sxth	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	815a      	strh	r2, [r3, #10]
	calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	330d      	adds	r3, #13
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	021b      	lsls	r3, r3, #8
 80024e0:	b21a      	sxth	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	330c      	adds	r3, #12
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	b21b      	sxth	r3, r3
 80024ea:	4313      	orrs	r3, r2
 80024ec:	b21a      	sxth	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	819a      	strh	r2, [r3, #12]
	calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	330f      	adds	r3, #15
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	021b      	lsls	r3, r3, #8
 80024fa:	b21a      	sxth	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	330e      	adds	r3, #14
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	b21b      	sxth	r3, r3
 8002504:	4313      	orrs	r3, r2
 8002506:	b21a      	sxth	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	81da      	strh	r2, [r3, #14]
	calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3311      	adds	r3, #17
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	021b      	lsls	r3, r3, #8
 8002514:	b21a      	sxth	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	3310      	adds	r3, #16
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	b21b      	sxth	r3, r3
 800251e:	4313      	orrs	r3, r2
 8002520:	b21a      	sxth	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	821a      	strh	r2, [r3, #16]
	calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	3313      	adds	r3, #19
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	021b      	lsls	r3, r3, #8
 800252e:	b21a      	sxth	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	3312      	adds	r3, #18
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	b21b      	sxth	r3, r3
 8002538:	4313      	orrs	r3, r2
 800253a:	b21a      	sxth	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	825a      	strh	r2, [r3, #18]
	calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	3315      	adds	r3, #21
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	021b      	lsls	r3, r3, #8
 8002548:	b21a      	sxth	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	3314      	adds	r3, #20
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	b21b      	sxth	r3, r3
 8002552:	4313      	orrs	r3, r2
 8002554:	b21a      	sxth	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	829a      	strh	r2, [r3, #20]
	calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	3317      	adds	r3, #23
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	021b      	lsls	r3, r3, #8
 8002562:	b21a      	sxth	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	3316      	adds	r3, #22
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	b21b      	sxth	r3, r3
 800256c:	4313      	orrs	r3, r2
 800256e:	b21a      	sxth	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	82da      	strh	r2, [r3, #22]
	calib_data->dig_H1 = reg_data[25];
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	3319      	adds	r3, #25
 8002578:	781a      	ldrb	r2, [r3, #0]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	761a      	strb	r2, [r3, #24]

}
 800257e:	bf00      	nop
 8002580:	3714      	adds	r7, #20
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr

0800258a <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 800258a:	b480      	push	{r7}
 800258c:	b087      	sub	sp, #28
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
 8002592:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	3310      	adds	r3, #16
 8002598:	617b      	str	r3, [r7, #20]
	int16_t dig_H4_lsb;
	int16_t dig_H4_msb;
	int16_t dig_H5_lsb;
	int16_t dig_H5_msb;

	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	3301      	adds	r3, #1
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	021b      	lsls	r3, r3, #8
 80025a2:	b21a      	sxth	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	b21b      	sxth	r3, r3
 80025aa:	4313      	orrs	r3, r2
 80025ac:	b21a      	sxth	r2, r3
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	835a      	strh	r2, [r3, #26]
	calib_data->dig_H3 = reg_data[2];
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	3302      	adds	r3, #2
 80025b6:	781a      	ldrb	r2, [r3, #0]
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	771a      	strb	r2, [r3, #28]

	dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	3303      	adds	r3, #3
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	b25b      	sxtb	r3, r3
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	011b      	lsls	r3, r3, #4
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	827b      	strh	r3, [r7, #18]
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	3304      	adds	r3, #4
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	b21b      	sxth	r3, r3
 80025d4:	f003 030f 	and.w	r3, r3, #15
 80025d8:	823b      	strh	r3, [r7, #16]
	calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 80025da:	8a7a      	ldrh	r2, [r7, #18]
 80025dc:	8a3b      	ldrh	r3, [r7, #16]
 80025de:	4313      	orrs	r3, r2
 80025e0:	b21a      	sxth	r2, r3
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	83da      	strh	r2, [r3, #30]

	dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	3305      	adds	r3, #5
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	b25b      	sxtb	r3, r3
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	011b      	lsls	r3, r3, #4
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	81fb      	strh	r3, [r7, #14]
	dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	3304      	adds	r3, #4
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	091b      	lsrs	r3, r3, #4
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	81bb      	strh	r3, [r7, #12]
	calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 8002602:	89fa      	ldrh	r2, [r7, #14]
 8002604:	89bb      	ldrh	r3, [r7, #12]
 8002606:	4313      	orrs	r3, r2
 8002608:	b21a      	sxth	r2, r3
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	841a      	strh	r2, [r3, #32]
	calib_data->dig_H6 = (int8_t)reg_data[6];
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	3306      	adds	r3, #6
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	b25a      	sxtb	r2, r3
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 800261c:	bf00      	nop
 800261e:	371c      	adds	r7, #28
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	4603      	mov	r3, r0
 8002630:	460a      	mov	r2, r1
 8002632:	71fb      	strb	r3, [r7, #7]
 8002634:	4613      	mov	r3, r2
 8002636:	71bb      	strb	r3, [r7, #6]
	uint8_t settings_changed = FALSE;
 8002638:	2300      	movs	r3, #0
 800263a:	73fb      	strb	r3, [r7, #15]

	if (sub_settings & desired_settings) {
 800263c:	79fa      	ldrb	r2, [r7, #7]
 800263e:	79bb      	ldrb	r3, [r7, #6]
 8002640:	4013      	ands	r3, r2
 8002642:	b2db      	uxtb	r3, r3
 8002644:	2b00      	cmp	r3, #0
 8002646:	d002      	beq.n	800264e <are_settings_changed+0x26>
		/* User wants to modify this particular settings */
		settings_changed = TRUE;
 8002648:	2301      	movs	r3, #1
 800264a:	73fb      	strb	r3, [r7, #15]
 800264c:	e001      	b.n	8002652 <are_settings_changed+0x2a>
	} else {
		/* User don't want to modify this particular settings */
		settings_changed = FALSE;
 800264e:	2300      	movs	r3, #0
 8002650:	73fb      	strb	r3, [r7, #15]
	}

	return settings_changed;
 8002652:	7bfb      	ldrb	r3, [r7, #15]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3714      	adds	r7, #20
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00b      	beq.n	8002686 <null_ptr_check+0x26>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d007      	beq.n	8002686 <null_ptr_check+0x26>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d003      	beq.n	8002686 <null_ptr_check+0x26>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d102      	bne.n	800268c <null_ptr_check+0x2c>
		/* Device structure pointer is not valid */
		rslt = BME280_E_NULL_PTR;
 8002686:	23ff      	movs	r3, #255	@ 0xff
 8002688:	73fb      	strb	r3, [r7, #15]
 800268a:	e001      	b.n	8002690 <null_ptr_check+0x30>
	} else {
		/* Device structure is fine */
		rslt = BME280_OK;
 800268c:	2300      	movs	r3, #0
 800268e:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8002690:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002694:	4618      	mov	r0, r3
 8002696:	3714      	adds	r7, #20
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <FIRFilter_Init>:
static float MAF_IMPULSE_RESPONSE [4] = {0.25f , 0.25f , 0.25f , 0.25f};



void FIRFilter_Init(FIRFilter *fir)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
	for (uint8_t n = 0; n< FIR_FILTER_LENGHT; n++)
 80026a8:	2300      	movs	r3, #0
 80026aa:	73fb      	strb	r3, [r7, #15]
 80026ac:	e009      	b.n	80026c2 <FIRFilter_Init+0x22>
	{
		fir->buf[n] =0.0f; // filtre buffer temizleme
 80026ae:	7bfb      	ldrb	r3, [r7, #15]
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	4413      	add	r3, r2
 80026b6:	f04f 0200 	mov.w	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
	for (uint8_t n = 0; n< FIR_FILTER_LENGHT; n++)
 80026bc:	7bfb      	ldrb	r3, [r7, #15]
 80026be:	3301      	adds	r3, #1
 80026c0:	73fb      	strb	r3, [r7, #15]
 80026c2:	7bfb      	ldrb	r3, [r7, #15]
 80026c4:	2b0f      	cmp	r3, #15
 80026c6:	d9f2      	bls.n	80026ae <FIRFilter_Init+0xe>

	}

	fir->bufIndex =0; // index reset
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	fir->out = 0; // clear output
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f04f 0200 	mov.w	r2, #0
 80026d6:	645a      	str	r2, [r3, #68]	@ 0x44
}
 80026d8:	bf00      	nop
 80026da:	3714      	adds	r7, #20
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <MAFilter_Init>:
}



void MAFilter_Init(FIRFilter *fir)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
	for (uint8_t n = 0; n< MAV_FILTER_LENGHT; n++)
 80026ec:	2300      	movs	r3, #0
 80026ee:	73fb      	strb	r3, [r7, #15]
 80026f0:	e009      	b.n	8002706 <MAFilter_Init+0x22>
	{
		fir->buf[n] =0.0f; // filtre buffer temizleme
 80026f2:	7bfb      	ldrb	r3, [r7, #15]
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	4413      	add	r3, r2
 80026fa:	f04f 0200 	mov.w	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]
	for (uint8_t n = 0; n< MAV_FILTER_LENGHT; n++)
 8002700:	7bfb      	ldrb	r3, [r7, #15]
 8002702:	3301      	adds	r3, #1
 8002704:	73fb      	strb	r3, [r7, #15]
 8002706:	7bfb      	ldrb	r3, [r7, #15]
 8002708:	2b03      	cmp	r3, #3
 800270a:	d9f2      	bls.n	80026f2 <MAFilter_Init+0xe>

	}

	fir->bufIndex =0; // index reset
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	fir->out = 0; // clear output
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f04f 0200 	mov.w	r2, #0
 800271a:	645a      	str	r2, [r3, #68]	@ 0x44
}
 800271c:	bf00      	nop
 800271e:	3714      	adds	r7, #20
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <LSM6DSLTR_Init>:

//extern LSM6DSLTR;
extern I2C_HandleTypeDef hi2c1;

void LSM6DSLTR_Init()
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af04      	add	r7, sp, #16
	uint8_t data1;

	// Gyro ve Accel interrupt pin 1 aktif
	data1 = 0xA4; // 16G 6.66khz
 800272e:	23a4      	movs	r3, #164	@ 0xa4
 8002730:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, LSM6DSL_Write_Address, CTRL1_XL, 1, &data1,  1, 1);
 8002732:	2301      	movs	r3, #1
 8002734:	9302      	str	r3, [sp, #8]
 8002736:	2301      	movs	r3, #1
 8002738:	9301      	str	r3, [sp, #4]
 800273a:	1dfb      	adds	r3, r7, #7
 800273c:	9300      	str	r3, [sp, #0]
 800273e:	2301      	movs	r3, #1
 8002740:	2210      	movs	r2, #16
 8002742:	21d4      	movs	r1, #212	@ 0xd4
 8002744:	481f      	ldr	r0, [pc, #124]	@ (80027c4 <LSM6DSLTR_Init+0x9c>)
 8002746:	f005 f8eb 	bl	8007920 <HAL_I2C_Mem_Write>

	data1 = 0xA4; // 500 dps 6.6khz
 800274a:	23a4      	movs	r3, #164	@ 0xa4
 800274c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, LSM6DSL_Write_Address,CTRL2_G, 1, &data1, 1, 1);
 800274e:	2301      	movs	r3, #1
 8002750:	9302      	str	r3, [sp, #8]
 8002752:	2301      	movs	r3, #1
 8002754:	9301      	str	r3, [sp, #4]
 8002756:	1dfb      	adds	r3, r7, #7
 8002758:	9300      	str	r3, [sp, #0]
 800275a:	2301      	movs	r3, #1
 800275c:	2211      	movs	r2, #17
 800275e:	21d4      	movs	r1, #212	@ 0xd4
 8002760:	4818      	ldr	r0, [pc, #96]	@ (80027c4 <LSM6DSLTR_Init+0x9c>)
 8002762:	f005 f8dd 	bl	8007920 <HAL_I2C_Mem_Write>

	data1= 0x00;
 8002766:	2300      	movs	r3, #0
 8002768:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, LSM6DSL_Write_Address, CTRL3_C, 1, &data1, 1, 1);
 800276a:	2301      	movs	r3, #1
 800276c:	9302      	str	r3, [sp, #8]
 800276e:	2301      	movs	r3, #1
 8002770:	9301      	str	r3, [sp, #4]
 8002772:	1dfb      	adds	r3, r7, #7
 8002774:	9300      	str	r3, [sp, #0]
 8002776:	2301      	movs	r3, #1
 8002778:	2212      	movs	r2, #18
 800277a:	21d4      	movs	r1, #212	@ 0xd4
 800277c:	4811      	ldr	r0, [pc, #68]	@ (80027c4 <LSM6DSLTR_Init+0x9c>)
 800277e:	f005 f8cf 	bl	8007920 <HAL_I2C_Mem_Write>

	data1= 0x08;
 8002782:	2308      	movs	r3, #8
 8002784:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, LSM6DSL_Write_Address, CTRL4_C, 1, &data1, 1, 1);
 8002786:	2301      	movs	r3, #1
 8002788:	9302      	str	r3, [sp, #8]
 800278a:	2301      	movs	r3, #1
 800278c:	9301      	str	r3, [sp, #4]
 800278e:	1dfb      	adds	r3, r7, #7
 8002790:	9300      	str	r3, [sp, #0]
 8002792:	2301      	movs	r3, #1
 8002794:	2213      	movs	r2, #19
 8002796:	21d4      	movs	r1, #212	@ 0xd4
 8002798:	480a      	ldr	r0, [pc, #40]	@ (80027c4 <LSM6DSLTR_Init+0x9c>)
 800279a:	f005 f8c1 	bl	8007920 <HAL_I2C_Mem_Write>

	data1 = 0x38;
 800279e:	2338      	movs	r3, #56	@ 0x38
 80027a0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, LSM6DSL_Write_Address, CTRL10_C, 1, &data1, 1, 1);
 80027a2:	2301      	movs	r3, #1
 80027a4:	9302      	str	r3, [sp, #8]
 80027a6:	2301      	movs	r3, #1
 80027a8:	9301      	str	r3, [sp, #4]
 80027aa:	1dfb      	adds	r3, r7, #7
 80027ac:	9300      	str	r3, [sp, #0]
 80027ae:	2301      	movs	r3, #1
 80027b0:	2219      	movs	r2, #25
 80027b2:	21d4      	movs	r1, #212	@ 0xd4
 80027b4:	4803      	ldr	r0, [pc, #12]	@ (80027c4 <LSM6DSLTR_Init+0x9c>)
 80027b6:	f005 f8b3 	bl	8007920 <HAL_I2C_Mem_Write>




}
 80027ba:	bf00      	nop
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	20000264 	.word	0x20000264

080027c8 <LSM6DSLTR_Read_Accel_Data>:


void LSM6DSLTR_Read_Accel_Data(LSM6DSLTR* Lsm_Sensor)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b088      	sub	sp, #32
 80027cc:	af04      	add	r7, sp, #16
 80027ce:	6078      	str	r0, [r7, #4]
	uint8_t data;
	uint8_t s;
	int16_t accel;


	HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTZ_L_XL, 1, &data, 1, 1);
 80027d0:	2301      	movs	r3, #1
 80027d2:	9302      	str	r3, [sp, #8]
 80027d4:	2301      	movs	r3, #1
 80027d6:	9301      	str	r3, [sp, #4]
 80027d8:	f107 030d 	add.w	r3, r7, #13
 80027dc:	9300      	str	r3, [sp, #0]
 80027de:	2301      	movs	r3, #1
 80027e0:	222c      	movs	r2, #44	@ 0x2c
 80027e2:	21d5      	movs	r1, #213	@ 0xd5
 80027e4:	4864      	ldr	r0, [pc, #400]	@ (8002978 <LSM6DSLTR_Read_Accel_Data+0x1b0>)
 80027e6:	f005 f995 	bl	8007b14 <HAL_I2C_Mem_Read>

	HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTZ_H_XL, 1, &s, 1, 1);
 80027ea:	2301      	movs	r3, #1
 80027ec:	9302      	str	r3, [sp, #8]
 80027ee:	2301      	movs	r3, #1
 80027f0:	9301      	str	r3, [sp, #4]
 80027f2:	f107 030c 	add.w	r3, r7, #12
 80027f6:	9300      	str	r3, [sp, #0]
 80027f8:	2301      	movs	r3, #1
 80027fa:	222d      	movs	r2, #45	@ 0x2d
 80027fc:	21d5      	movs	r1, #213	@ 0xd5
 80027fe:	485e      	ldr	r0, [pc, #376]	@ (8002978 <LSM6DSLTR_Read_Accel_Data+0x1b0>)
 8002800:	f005 f988 	bl	8007b14 <HAL_I2C_Mem_Read>

	accel = (int16_t) ( (s << 8 ) | (data));
 8002804:	7b3b      	ldrb	r3, [r7, #12]
 8002806:	021b      	lsls	r3, r3, #8
 8002808:	b21a      	sxth	r2, r3
 800280a:	7b7b      	ldrb	r3, [r7, #13]
 800280c:	b21b      	sxth	r3, r3
 800280e:	4313      	orrs	r3, r2
 8002810:	81fb      	strh	r3, [r7, #14]

	Lsm_Sensor->Accel_Z = (float)accel* 0.000488*9.81; // 16g mg/LSB 0.488
 8002812:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002816:	ee07 3a90 	vmov	s15, r3
 800281a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800281e:	ee17 0a90 	vmov	r0, s15
 8002822:	f7fd fea9 	bl	8000578 <__aeabi_f2d>
 8002826:	a350      	add	r3, pc, #320	@ (adr r3, 8002968 <LSM6DSLTR_Read_Accel_Data+0x1a0>)
 8002828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800282c:	f7fd fefc 	bl	8000628 <__aeabi_dmul>
 8002830:	4602      	mov	r2, r0
 8002832:	460b      	mov	r3, r1
 8002834:	4610      	mov	r0, r2
 8002836:	4619      	mov	r1, r3
 8002838:	a34d      	add	r3, pc, #308	@ (adr r3, 8002970 <LSM6DSLTR_Read_Accel_Data+0x1a8>)
 800283a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800283e:	f7fd fef3 	bl	8000628 <__aeabi_dmul>
 8002842:	4602      	mov	r2, r0
 8002844:	460b      	mov	r3, r1
 8002846:	4610      	mov	r0, r2
 8002848:	4619      	mov	r1, r3
 800284a:	f7fe f9e5 	bl	8000c18 <__aeabi_d2f>
 800284e:	4602      	mov	r2, r0
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	609a      	str	r2, [r3, #8]



	HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTX_L_XL, 1, &data, 1, 1);
 8002854:	2301      	movs	r3, #1
 8002856:	9302      	str	r3, [sp, #8]
 8002858:	2301      	movs	r3, #1
 800285a:	9301      	str	r3, [sp, #4]
 800285c:	f107 030d 	add.w	r3, r7, #13
 8002860:	9300      	str	r3, [sp, #0]
 8002862:	2301      	movs	r3, #1
 8002864:	2228      	movs	r2, #40	@ 0x28
 8002866:	21d5      	movs	r1, #213	@ 0xd5
 8002868:	4843      	ldr	r0, [pc, #268]	@ (8002978 <LSM6DSLTR_Read_Accel_Data+0x1b0>)
 800286a:	f005 f953 	bl	8007b14 <HAL_I2C_Mem_Read>

	HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTX_H_XL, 1, &s, 1, 1);
 800286e:	2301      	movs	r3, #1
 8002870:	9302      	str	r3, [sp, #8]
 8002872:	2301      	movs	r3, #1
 8002874:	9301      	str	r3, [sp, #4]
 8002876:	f107 030c 	add.w	r3, r7, #12
 800287a:	9300      	str	r3, [sp, #0]
 800287c:	2301      	movs	r3, #1
 800287e:	2229      	movs	r2, #41	@ 0x29
 8002880:	21d5      	movs	r1, #213	@ 0xd5
 8002882:	483d      	ldr	r0, [pc, #244]	@ (8002978 <LSM6DSLTR_Read_Accel_Data+0x1b0>)
 8002884:	f005 f946 	bl	8007b14 <HAL_I2C_Mem_Read>

	accel = (int16_t) ( (s << 8 ) | (data));
 8002888:	7b3b      	ldrb	r3, [r7, #12]
 800288a:	021b      	lsls	r3, r3, #8
 800288c:	b21a      	sxth	r2, r3
 800288e:	7b7b      	ldrb	r3, [r7, #13]
 8002890:	b21b      	sxth	r3, r3
 8002892:	4313      	orrs	r3, r2
 8002894:	81fb      	strh	r3, [r7, #14]

	Lsm_Sensor->Accel_X= (float)accel* 0.000488*9.81; // 16g mg/LSB 0.488
 8002896:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800289a:	ee07 3a90 	vmov	s15, r3
 800289e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028a2:	ee17 0a90 	vmov	r0, s15
 80028a6:	f7fd fe67 	bl	8000578 <__aeabi_f2d>
 80028aa:	a32f      	add	r3, pc, #188	@ (adr r3, 8002968 <LSM6DSLTR_Read_Accel_Data+0x1a0>)
 80028ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b0:	f7fd feba 	bl	8000628 <__aeabi_dmul>
 80028b4:	4602      	mov	r2, r0
 80028b6:	460b      	mov	r3, r1
 80028b8:	4610      	mov	r0, r2
 80028ba:	4619      	mov	r1, r3
 80028bc:	a32c      	add	r3, pc, #176	@ (adr r3, 8002970 <LSM6DSLTR_Read_Accel_Data+0x1a8>)
 80028be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c2:	f7fd feb1 	bl	8000628 <__aeabi_dmul>
 80028c6:	4602      	mov	r2, r0
 80028c8:	460b      	mov	r3, r1
 80028ca:	4610      	mov	r0, r2
 80028cc:	4619      	mov	r1, r3
 80028ce:	f7fe f9a3 	bl	8000c18 <__aeabi_d2f>
 80028d2:	4602      	mov	r2, r0
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	601a      	str	r2, [r3, #0]



	HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTY_L_XL, 1, &data, 1, 1);
 80028d8:	2301      	movs	r3, #1
 80028da:	9302      	str	r3, [sp, #8]
 80028dc:	2301      	movs	r3, #1
 80028de:	9301      	str	r3, [sp, #4]
 80028e0:	f107 030d 	add.w	r3, r7, #13
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	2301      	movs	r3, #1
 80028e8:	222a      	movs	r2, #42	@ 0x2a
 80028ea:	21d5      	movs	r1, #213	@ 0xd5
 80028ec:	4822      	ldr	r0, [pc, #136]	@ (8002978 <LSM6DSLTR_Read_Accel_Data+0x1b0>)
 80028ee:	f005 f911 	bl	8007b14 <HAL_I2C_Mem_Read>

	HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTY_H_XL, 1, &s, 1, 1);
 80028f2:	2301      	movs	r3, #1
 80028f4:	9302      	str	r3, [sp, #8]
 80028f6:	2301      	movs	r3, #1
 80028f8:	9301      	str	r3, [sp, #4]
 80028fa:	f107 030c 	add.w	r3, r7, #12
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	2301      	movs	r3, #1
 8002902:	222b      	movs	r2, #43	@ 0x2b
 8002904:	21d5      	movs	r1, #213	@ 0xd5
 8002906:	481c      	ldr	r0, [pc, #112]	@ (8002978 <LSM6DSLTR_Read_Accel_Data+0x1b0>)
 8002908:	f005 f904 	bl	8007b14 <HAL_I2C_Mem_Read>

	accel = (int16_t) ( (s << 8 ) | (data));
 800290c:	7b3b      	ldrb	r3, [r7, #12]
 800290e:	021b      	lsls	r3, r3, #8
 8002910:	b21a      	sxth	r2, r3
 8002912:	7b7b      	ldrb	r3, [r7, #13]
 8002914:	b21b      	sxth	r3, r3
 8002916:	4313      	orrs	r3, r2
 8002918:	81fb      	strh	r3, [r7, #14]

	Lsm_Sensor->Accel_Y = (float)accel* 0.000488*9.81; // 16g mg/LSB 0.488
 800291a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800291e:	ee07 3a90 	vmov	s15, r3
 8002922:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002926:	ee17 0a90 	vmov	r0, s15
 800292a:	f7fd fe25 	bl	8000578 <__aeabi_f2d>
 800292e:	a30e      	add	r3, pc, #56	@ (adr r3, 8002968 <LSM6DSLTR_Read_Accel_Data+0x1a0>)
 8002930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002934:	f7fd fe78 	bl	8000628 <__aeabi_dmul>
 8002938:	4602      	mov	r2, r0
 800293a:	460b      	mov	r3, r1
 800293c:	4610      	mov	r0, r2
 800293e:	4619      	mov	r1, r3
 8002940:	a30b      	add	r3, pc, #44	@ (adr r3, 8002970 <LSM6DSLTR_Read_Accel_Data+0x1a8>)
 8002942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002946:	f7fd fe6f 	bl	8000628 <__aeabi_dmul>
 800294a:	4602      	mov	r2, r0
 800294c:	460b      	mov	r3, r1
 800294e:	4610      	mov	r0, r2
 8002950:	4619      	mov	r1, r3
 8002952:	f7fe f961 	bl	8000c18 <__aeabi_d2f>
 8002956:	4602      	mov	r2, r0
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	605a      	str	r2, [r3, #4]


}
 800295c:	bf00      	nop
 800295e:	3710      	adds	r7, #16
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	f3af 8000 	nop.w
 8002968:	0a5accd5 	.word	0x0a5accd5
 800296c:	3f3ffb48 	.word	0x3f3ffb48
 8002970:	51eb851f 	.word	0x51eb851f
 8002974:	40239eb8 	.word	0x40239eb8
 8002978:	20000264 	.word	0x20000264

0800297c <LSM6DSLTR_Read_Gyro_Data>:

void LSM6DSLTR_Read_Gyro_Data(LSM6DSLTR* Lsm_Sensor){
 800297c:	b580      	push	{r7, lr}
 800297e:	b088      	sub	sp, #32
 8002980:	af04      	add	r7, sp, #16
 8002982:	6078      	str	r0, [r7, #4]
     	uint8_t data;
		uint8_t s;
		int16_t gyro;


		HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTX_L_G, 1, &data, 1, 1);
 8002984:	2301      	movs	r3, #1
 8002986:	9302      	str	r3, [sp, #8]
 8002988:	2301      	movs	r3, #1
 800298a:	9301      	str	r3, [sp, #4]
 800298c:	f107 030d 	add.w	r3, r7, #13
 8002990:	9300      	str	r3, [sp, #0]
 8002992:	2301      	movs	r3, #1
 8002994:	2222      	movs	r2, #34	@ 0x22
 8002996:	21d5      	movs	r1, #213	@ 0xd5
 8002998:	4843      	ldr	r0, [pc, #268]	@ (8002aa8 <LSM6DSLTR_Read_Gyro_Data+0x12c>)
 800299a:	f005 f8bb 	bl	8007b14 <HAL_I2C_Mem_Read>

		HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTX_H_G, 1, &s, 1, 1);
 800299e:	2301      	movs	r3, #1
 80029a0:	9302      	str	r3, [sp, #8]
 80029a2:	2301      	movs	r3, #1
 80029a4:	9301      	str	r3, [sp, #4]
 80029a6:	f107 030c 	add.w	r3, r7, #12
 80029aa:	9300      	str	r3, [sp, #0]
 80029ac:	2301      	movs	r3, #1
 80029ae:	2223      	movs	r2, #35	@ 0x23
 80029b0:	21d5      	movs	r1, #213	@ 0xd5
 80029b2:	483d      	ldr	r0, [pc, #244]	@ (8002aa8 <LSM6DSLTR_Read_Gyro_Data+0x12c>)
 80029b4:	f005 f8ae 	bl	8007b14 <HAL_I2C_Mem_Read>

		gyro = (int16_t) ( (s << 8 ) | (data));
 80029b8:	7b3b      	ldrb	r3, [r7, #12]
 80029ba:	021b      	lsls	r3, r3, #8
 80029bc:	b21a      	sxth	r2, r3
 80029be:	7b7b      	ldrb	r3, [r7, #13]
 80029c0:	b21b      	sxth	r3, r3
 80029c2:	4313      	orrs	r3, r2
 80029c4:	81fb      	strh	r3, [r7, #14]

		Lsm_Sensor->Gyro_X = (float)gyro*gyro_constant;
 80029c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029ca:	ee07 3a90 	vmov	s15, r3
 80029ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029d2:	4b36      	ldr	r3, [pc, #216]	@ (8002aac <LSM6DSLTR_Read_Gyro_Data+0x130>)
 80029d4:	edd3 7a00 	vldr	s15, [r3]
 80029d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	edc3 7a03 	vstr	s15, [r3, #12]



		HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTY_L_G, 1, &data, 1, 1);
 80029e2:	2301      	movs	r3, #1
 80029e4:	9302      	str	r3, [sp, #8]
 80029e6:	2301      	movs	r3, #1
 80029e8:	9301      	str	r3, [sp, #4]
 80029ea:	f107 030d 	add.w	r3, r7, #13
 80029ee:	9300      	str	r3, [sp, #0]
 80029f0:	2301      	movs	r3, #1
 80029f2:	2224      	movs	r2, #36	@ 0x24
 80029f4:	21d5      	movs	r1, #213	@ 0xd5
 80029f6:	482c      	ldr	r0, [pc, #176]	@ (8002aa8 <LSM6DSLTR_Read_Gyro_Data+0x12c>)
 80029f8:	f005 f88c 	bl	8007b14 <HAL_I2C_Mem_Read>

		HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTY_H_G, 1, &s, 1, 1);
 80029fc:	2301      	movs	r3, #1
 80029fe:	9302      	str	r3, [sp, #8]
 8002a00:	2301      	movs	r3, #1
 8002a02:	9301      	str	r3, [sp, #4]
 8002a04:	f107 030c 	add.w	r3, r7, #12
 8002a08:	9300      	str	r3, [sp, #0]
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	2225      	movs	r2, #37	@ 0x25
 8002a0e:	21d5      	movs	r1, #213	@ 0xd5
 8002a10:	4825      	ldr	r0, [pc, #148]	@ (8002aa8 <LSM6DSLTR_Read_Gyro_Data+0x12c>)
 8002a12:	f005 f87f 	bl	8007b14 <HAL_I2C_Mem_Read>

		gyro = (int16_t) ( (s << 8 ) | (data));
 8002a16:	7b3b      	ldrb	r3, [r7, #12]
 8002a18:	021b      	lsls	r3, r3, #8
 8002a1a:	b21a      	sxth	r2, r3
 8002a1c:	7b7b      	ldrb	r3, [r7, #13]
 8002a1e:	b21b      	sxth	r3, r3
 8002a20:	4313      	orrs	r3, r2
 8002a22:	81fb      	strh	r3, [r7, #14]

		Lsm_Sensor->Gyro_Y = (float)gyro*gyro_constant;
 8002a24:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a28:	ee07 3a90 	vmov	s15, r3
 8002a2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a30:	4b1e      	ldr	r3, [pc, #120]	@ (8002aac <LSM6DSLTR_Read_Gyro_Data+0x130>)
 8002a32:	edd3 7a00 	vldr	s15, [r3]
 8002a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	edc3 7a04 	vstr	s15, [r3, #16]


		HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTZ_L_G, 1, &data, 1, 1);
 8002a40:	2301      	movs	r3, #1
 8002a42:	9302      	str	r3, [sp, #8]
 8002a44:	2301      	movs	r3, #1
 8002a46:	9301      	str	r3, [sp, #4]
 8002a48:	f107 030d 	add.w	r3, r7, #13
 8002a4c:	9300      	str	r3, [sp, #0]
 8002a4e:	2301      	movs	r3, #1
 8002a50:	2226      	movs	r2, #38	@ 0x26
 8002a52:	21d5      	movs	r1, #213	@ 0xd5
 8002a54:	4814      	ldr	r0, [pc, #80]	@ (8002aa8 <LSM6DSLTR_Read_Gyro_Data+0x12c>)
 8002a56:	f005 f85d 	bl	8007b14 <HAL_I2C_Mem_Read>

		HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTZ_H_G, 1, &s, 1, 1);
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	9302      	str	r3, [sp, #8]
 8002a5e:	2301      	movs	r3, #1
 8002a60:	9301      	str	r3, [sp, #4]
 8002a62:	f107 030c 	add.w	r3, r7, #12
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	2301      	movs	r3, #1
 8002a6a:	2227      	movs	r2, #39	@ 0x27
 8002a6c:	21d5      	movs	r1, #213	@ 0xd5
 8002a6e:	480e      	ldr	r0, [pc, #56]	@ (8002aa8 <LSM6DSLTR_Read_Gyro_Data+0x12c>)
 8002a70:	f005 f850 	bl	8007b14 <HAL_I2C_Mem_Read>

		gyro = (int16_t) ( (s << 8 ) | (data));
 8002a74:	7b3b      	ldrb	r3, [r7, #12]
 8002a76:	021b      	lsls	r3, r3, #8
 8002a78:	b21a      	sxth	r2, r3
 8002a7a:	7b7b      	ldrb	r3, [r7, #13]
 8002a7c:	b21b      	sxth	r3, r3
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	81fb      	strh	r3, [r7, #14]

		Lsm_Sensor->Gyro_Z = (float)gyro*gyro_constant;
 8002a82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a86:	ee07 3a90 	vmov	s15, r3
 8002a8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a8e:	4b07      	ldr	r3, [pc, #28]	@ (8002aac <LSM6DSLTR_Read_Gyro_Data+0x130>)
 8002a90:	edd3 7a00 	vldr	s15, [r3]
 8002a94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	edc3 7a05 	vstr	s15, [r3, #20]

}
 8002a9e:	bf00      	nop
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	20000264 	.word	0x20000264
 8002aac:	20000000 	.word	0x20000000

08002ab0 <KalmanFilter_Update>:
    kf->x = initial_value;
    kf->P = 1.0;
    kf->K = 0.0;
}

float KalmanFilter_Update(KalmanFilter *kf, float measurement) {
 8002ab0:	b5b0      	push	{r4, r5, r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	ed87 0a00 	vstr	s0, [r7]
    // Prediction update
    kf->P += kf->Q;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	ed93 7a03 	vldr	s14, [r3, #12]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	edd3 7a00 	vldr	s15, [r3]
 8002ac8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	edc3 7a03 	vstr	s15, [r3, #12]

    // Measurement update
    kf->K = kf->P / (kf->P + kf->R);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	edd3 6a03 	vldr	s13, [r3, #12]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	ed93 7a03 	vldr	s14, [r3, #12]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	edd3 7a01 	vldr	s15, [r3, #4]
 8002ae4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ae8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	edc3 7a04 	vstr	s15, [r3, #16]
    kf->x += kf->K * (measurement - kf->x);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	ed93 7a02 	vldr	s14, [r3, #8]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	edd3 6a04 	vldr	s13, [r3, #16]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	edd3 7a02 	vldr	s15, [r3, #8]
 8002b04:	ed97 6a00 	vldr	s12, [r7]
 8002b08:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002b0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	edc3 7a02 	vstr	s15, [r3, #8]
    kf->P *= (1.0 - kf->K);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7fd fd2a 	bl	8000578 <__aeabi_f2d>
 8002b24:	4604      	mov	r4, r0
 8002b26:	460d      	mov	r5, r1
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7fd fd23 	bl	8000578 <__aeabi_f2d>
 8002b32:	4602      	mov	r2, r0
 8002b34:	460b      	mov	r3, r1
 8002b36:	f04f 0000 	mov.w	r0, #0
 8002b3a:	490d      	ldr	r1, [pc, #52]	@ (8002b70 <KalmanFilter_Update+0xc0>)
 8002b3c:	f7fd fbbc 	bl	80002b8 <__aeabi_dsub>
 8002b40:	4602      	mov	r2, r0
 8002b42:	460b      	mov	r3, r1
 8002b44:	4620      	mov	r0, r4
 8002b46:	4629      	mov	r1, r5
 8002b48:	f7fd fd6e 	bl	8000628 <__aeabi_dmul>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	460b      	mov	r3, r1
 8002b50:	4610      	mov	r0, r2
 8002b52:	4619      	mov	r1, r3
 8002b54:	f7fe f860 	bl	8000c18 <__aeabi_d2f>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	60da      	str	r2, [r3, #12]

    return kf->x;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	ee07 3a90 	vmov	s15, r3
}
 8002b66:	eeb0 0a67 	vmov.f32	s0, s15
 8002b6a:	3708      	adds	r7, #8
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bdb0      	pop	{r4, r5, r7, pc}
 8002b70:	3ff00000 	.word	0x3ff00000

08002b74 <prv_parse_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed integer
 */
static int32_t
prv_parse_number(lwgps_t* gh, const char* t) {
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
    int32_t res = 0;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	60fb      	str	r3, [r7, #12]
    uint8_t minus;

    if (t == NULL) {
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d106      	bne.n	8002b96 <prv_parse_number+0x22>
        t = gh->p.term_str;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3371      	adds	r3, #113	@ 0x71
 8002b8c:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 8002b8e:	e002      	b.n	8002b96 <prv_parse_number+0x22>
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	3301      	adds	r3, #1
 8002b94:	603b      	str	r3, [r7, #0]
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d003      	beq.n	8002ba4 <prv_parse_number+0x30>
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	2b20      	cmp	r3, #32
 8002ba2:	d0f5      	beq.n	8002b90 <prv_parse_number+0x1c>

    minus = (*t == '-' ? (++t, 1) : 0);
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	2b2d      	cmp	r3, #45	@ 0x2d
 8002baa:	d104      	bne.n	8002bb6 <prv_parse_number+0x42>
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	3301      	adds	r3, #1
 8002bb0:	603b      	str	r3, [r7, #0]
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e000      	b.n	8002bb8 <prv_parse_number+0x44>
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	72fb      	strb	r3, [r7, #11]
    for (; t != NULL && CIN(*t); ++t) {
 8002bba:	e00d      	b.n	8002bd8 <prv_parse_number+0x64>
        res = 10 * res + CTN(*t);
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	4413      	add	r3, r2
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	3b30      	subs	r3, #48	@ 0x30
 8002bce:	4413      	add	r3, r2
 8002bd0:	60fb      	str	r3, [r7, #12]
    for (; t != NULL && CIN(*t); ++t) {
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	603b      	str	r3, [r7, #0]
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d007      	beq.n	8002bee <prv_parse_number+0x7a>
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	2b2f      	cmp	r3, #47	@ 0x2f
 8002be4:	d903      	bls.n	8002bee <prv_parse_number+0x7a>
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	2b39      	cmp	r3, #57	@ 0x39
 8002bec:	d9e6      	bls.n	8002bbc <prv_parse_number+0x48>
    }
    return minus ? -res : res;
 8002bee:	7afb      	ldrb	r3, [r7, #11]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d002      	beq.n	8002bfa <prv_parse_number+0x86>
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	425b      	negs	r3, r3
 8002bf8:	e000      	b.n	8002bfc <prv_parse_number+0x88>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3714      	adds	r7, #20
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <prv_parse_float_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed double in \ref lwgps_float_t format
 */
static lwgps_float_t
prv_parse_float_number(lwgps_t* gh, const char* t) {
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
    lwgps_float_t res;

    if (t == NULL) {
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d106      	bne.n	8002c26 <prv_parse_float_number+0x1e>
        t = gh->p.term_str;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	3371      	adds	r3, #113	@ 0x71
 8002c1c:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 8002c1e:	e002      	b.n	8002c26 <prv_parse_float_number+0x1e>
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	3301      	adds	r3, #1
 8002c24:	603b      	str	r3, [r7, #0]
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d003      	beq.n	8002c34 <prv_parse_float_number+0x2c>
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	2b20      	cmp	r3, #32
 8002c32:	d0f5      	beq.n	8002c20 <prv_parse_float_number+0x18>

#if LWGPS_CFG_DOUBLE
    res = strtod(t, NULL);                      /* Parse string to double */
 8002c34:	2100      	movs	r1, #0
 8002c36:	6838      	ldr	r0, [r7, #0]
 8002c38:	f009 f9c6 	bl	800bfc8 <strtod>
 8002c3c:	ed87 0b02 	vstr	d0, [r7, #8]
#else /* LWGPS_CFG_DOUBLE */
    res = strtof(t, NULL);                      /* Parse string to float */
#endif /* !LWGPS_CFG_DOUBLE */

    return FLT(res);                            /* Return casted value, based on float size */
 8002c40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c44:	ec43 2b17 	vmov	d7, r2, r3
}
 8002c48:	eeb0 0a47 	vmov.f32	s0, s14
 8002c4c:	eef0 0a67 	vmov.f32	s1, s15
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
	...

08002c58 <prv_parse_lat_long>:
 *                  NMEA output for latitude is ddmm.sss and longitude is dddmm.sss
 * \param[in]       gh: GPS handle
 * \return          Latitude/Longitude value in degrees
 */
static lwgps_float_t
prv_parse_lat_long(lwgps_t* gh) {
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b088      	sub	sp, #32
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
    lwgps_float_t ll, deg, min;

    ll = prv_parse_float_number(gh, NULL);      /* Parse value as double */
 8002c60:	2100      	movs	r1, #0
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f7ff ffd0 	bl	8002c08 <prv_parse_float_number>
 8002c68:	ed87 0b06 	vstr	d0, [r7, #24]
    deg = FLT((int)((int)ll / 100));            /* Get absolute degrees value, interested in integer part only */
 8002c6c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c70:	f7fd ff8a 	bl	8000b88 <__aeabi_d2iz>
 8002c74:	4603      	mov	r3, r0
 8002c76:	4a1d      	ldr	r2, [pc, #116]	@ (8002cec <prv_parse_lat_long+0x94>)
 8002c78:	fb82 1203 	smull	r1, r2, r2, r3
 8002c7c:	1152      	asrs	r2, r2, #5
 8002c7e:	17db      	asrs	r3, r3, #31
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7fd fc66 	bl	8000554 <__aeabi_i2d>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    min = ll - (deg * FLT(100));                /* Get remaining part from full number, minutes */
 8002c90:	f04f 0200 	mov.w	r2, #0
 8002c94:	4b16      	ldr	r3, [pc, #88]	@ (8002cf0 <prv_parse_lat_long+0x98>)
 8002c96:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002c9a:	f7fd fcc5 	bl	8000628 <__aeabi_dmul>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002ca6:	f7fd fb07 	bl	80002b8 <__aeabi_dsub>
 8002caa:	4602      	mov	r2, r0
 8002cac:	460b      	mov	r3, r1
 8002cae:	e9c7 2302 	strd	r2, r3, [r7, #8]
    ll = deg + (min / FLT(60.0));               /* Calculate latitude/longitude */
 8002cb2:	f04f 0200 	mov.w	r2, #0
 8002cb6:	4b0f      	ldr	r3, [pc, #60]	@ (8002cf4 <prv_parse_lat_long+0x9c>)
 8002cb8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002cbc:	f7fd fdde 	bl	800087c <__aeabi_ddiv>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002cc8:	f7fd faf8 	bl	80002bc <__adddf3>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	460b      	mov	r3, r1
 8002cd0:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return ll;
 8002cd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cd8:	ec43 2b17 	vmov	d7, r2, r3
}
 8002cdc:	eeb0 0a47 	vmov.f32	s0, s14
 8002ce0:	eef0 0a67 	vmov.f32	s1, s15
 8002ce4:	3720      	adds	r7, #32
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	51eb851f 	.word	0x51eb851f
 8002cf0:	40590000 	.word	0x40590000
 8002cf4:	404e0000 	.word	0x404e0000

08002cf8 <prv_parse_term>:
 * \brief           Parse received term
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_parse_term(lwgps_t* gh) {
 8002cf8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002cfc:	b082      	sub	sp, #8
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
    if (gh->p.term_num == 0) {                  /* Check string type */
 8002d02:	6879      	ldr	r1, [r7, #4]
 8002d04:	f891 107f 	ldrb.w	r1, [r1, #127]	@ 0x7f
 8002d08:	2900      	cmp	r1, #0
 8002d0a:	d169      	bne.n	8002de0 <prv_parse_term+0xe8>
        if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
        } else if (!strncmp(gh->p.term_str, "$GPGGA", 6) || !strncmp(gh->p.term_str, "$GNGGA", 6)) {
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	3371      	adds	r3, #113	@ 0x71
 8002d10:	2206      	movs	r2, #6
 8002d12:	49ba      	ldr	r1, [pc, #744]	@ (8002ffc <prv_parse_term+0x304>)
 8002d14:	4618      	mov	r0, r3
 8002d16:	f009 fa70 	bl	800c1fa <strncmp>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d009      	beq.n	8002d34 <prv_parse_term+0x3c>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	3371      	adds	r3, #113	@ 0x71
 8002d24:	2206      	movs	r2, #6
 8002d26:	49b6      	ldr	r1, [pc, #728]	@ (8003000 <prv_parse_term+0x308>)
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f009 fa66 	bl	800c1fa <strncmp>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d104      	bne.n	8002d3e <prv_parse_term+0x46>
            gh->p.stat = STAT_GGA;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 8002d3c:	e04e      	b.n	8002ddc <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
        } else if (!strncmp(gh->p.term_str, "$GPGSA", 6) || !strncmp(gh->p.term_str, "$GNGSA", 6)) {
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	3371      	adds	r3, #113	@ 0x71
 8002d42:	2206      	movs	r2, #6
 8002d44:	49af      	ldr	r1, [pc, #700]	@ (8003004 <prv_parse_term+0x30c>)
 8002d46:	4618      	mov	r0, r3
 8002d48:	f009 fa57 	bl	800c1fa <strncmp>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d009      	beq.n	8002d66 <prv_parse_term+0x6e>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	3371      	adds	r3, #113	@ 0x71
 8002d56:	2206      	movs	r2, #6
 8002d58:	49ab      	ldr	r1, [pc, #684]	@ (8003008 <prv_parse_term+0x310>)
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f009 fa4d 	bl	800c1fa <strncmp>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d104      	bne.n	8002d70 <prv_parse_term+0x78>
            gh->p.stat = STAT_GSA;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2202      	movs	r2, #2
 8002d6a:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 8002d6e:	e035      	b.n	8002ddc <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
        } else if (!strncmp(gh->p.term_str, "$GPGSV", 6) || !strncmp(gh->p.term_str, "$GNGSV", 6)) {
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	3371      	adds	r3, #113	@ 0x71
 8002d74:	2206      	movs	r2, #6
 8002d76:	49a5      	ldr	r1, [pc, #660]	@ (800300c <prv_parse_term+0x314>)
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f009 fa3e 	bl	800c1fa <strncmp>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d009      	beq.n	8002d98 <prv_parse_term+0xa0>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	3371      	adds	r3, #113	@ 0x71
 8002d88:	2206      	movs	r2, #6
 8002d8a:	49a1      	ldr	r1, [pc, #644]	@ (8003010 <prv_parse_term+0x318>)
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f009 fa34 	bl	800c1fa <strncmp>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d104      	bne.n	8002da2 <prv_parse_term+0xaa>
            gh->p.stat = STAT_GSV;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2203      	movs	r2, #3
 8002d9c:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 8002da0:	e01c      	b.n	8002ddc <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
        } else if (!strncmp(gh->p.term_str, "$GPRMC", 6) || !strncmp(gh->p.term_str, "$GNRMC", 6)) {
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	3371      	adds	r3, #113	@ 0x71
 8002da6:	2206      	movs	r2, #6
 8002da8:	499a      	ldr	r1, [pc, #616]	@ (8003014 <prv_parse_term+0x31c>)
 8002daa:	4618      	mov	r0, r3
 8002dac:	f009 fa25 	bl	800c1fa <strncmp>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d009      	beq.n	8002dca <prv_parse_term+0xd2>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	3371      	adds	r3, #113	@ 0x71
 8002dba:	2206      	movs	r2, #6
 8002dbc:	4996      	ldr	r1, [pc, #600]	@ (8003018 <prv_parse_term+0x320>)
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f009 fa1b 	bl	800c1fa <strncmp>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d104      	bne.n	8002dd4 <prv_parse_term+0xdc>
            gh->p.stat = STAT_RMC;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2204      	movs	r2, #4
 8002dce:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 8002dd2:	e003      	b.n	8002ddc <prv_parse_term+0xe4>
#if LWGPS_CFG_STATEMENT_PUBX
        } else if (!strncmp(gh->p.term_str, "$PUBX", 5)) {
            gh->p.stat = STAT_UBX;
#endif /* LWGPS_CFG_STATEMENT_PUBX */
        } else {
            gh->p.stat = STAT_UNKNOWN;          /* Invalid statement for library */
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
        }
        return 1;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e231      	b.n	8003244 <prv_parse_term+0x54c>
    }

    /* Start parsing terms */
    if (gh->p.stat == STAT_UNKNOWN) {
 8002de0:	6879      	ldr	r1, [r7, #4]
 8002de2:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 8002de6:	2900      	cmp	r1, #0
 8002de8:	f000 822b 	beq.w	8003242 <prv_parse_term+0x54a>
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {        /* Process GPGGA statement */
 8002dec:	6879      	ldr	r1, [r7, #4]
 8002dee:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 8002df2:	2901      	cmp	r1, #1
 8002df4:	f040 80c9 	bne.w	8002f8a <prv_parse_term+0x292>
        switch (gh->p.term_num) {
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	2b0a      	cmp	r3, #10
 8002e02:	f200 8213 	bhi.w	800322c <prv_parse_term+0x534>
 8002e06:	a201      	add	r2, pc, #4	@ (adr r2, 8002e0c <prv_parse_term+0x114>)
 8002e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e0c:	08002e39 	.word	0x08002e39
 8002e10:	08002eb3 	.word	0x08002eb3
 8002e14:	08002ec9 	.word	0x08002ec9
 8002e18:	08002ef3 	.word	0x08002ef3
 8002e1c:	08002f09 	.word	0x08002f09
 8002e20:	08002f33 	.word	0x08002f33
 8002e24:	08002f47 	.word	0x08002f47
 8002e28:	0800322d 	.word	0x0800322d
 8002e2c:	08002f5b 	.word	0x08002f5b
 8002e30:	0800322d 	.word	0x0800322d
 8002e34:	08002f73 	.word	0x08002f73
            case 1:                             /* Process UTC time */
                gh->p.data.gga.hours = 10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8002e3e:	3b30      	subs	r3, #48	@ 0x30
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	461a      	mov	r2, r3
 8002e44:	0092      	lsls	r2, r2, #2
 8002e46:	4413      	add	r3, r2
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	b2da      	uxtb	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8002e52:	4413      	add	r3, r2
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	3b30      	subs	r3, #48	@ 0x30
 8002e58:	b2da      	uxtb	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f883 20aa 	strb.w	r2, [r3, #170]	@ 0xaa
                gh->p.data.gga.minutes = 10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 8002e66:	3b30      	subs	r3, #48	@ 0x30
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	0092      	lsls	r2, r2, #2
 8002e6e:	4413      	add	r3, r2
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	b2da      	uxtb	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8002e7a:	4413      	add	r3, r2
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	3b30      	subs	r3, #48	@ 0x30
 8002e80:	b2da      	uxtb	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f883 20ab 	strb.w	r2, [r3, #171]	@ 0xab
                gh->p.data.gga.seconds = 10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8002e8e:	3b30      	subs	r3, #48	@ 0x30
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	461a      	mov	r2, r3
 8002e94:	0092      	lsls	r2, r2, #2
 8002e96:	4413      	add	r3, r2
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	b2da      	uxtb	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 8002ea2:	4413      	add	r3, r2
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	3b30      	subs	r3, #48	@ 0x30
 8002ea8:	b2da      	uxtb	r2, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
                break;
 8002eb0:	e1c7      	b.n	8003242 <prv_parse_term+0x54a>
            case 2:                             /* Latitude */
                gh->p.data.gga.latitude = prv_parse_lat_long(gh);   /* Parse latitude */
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f7ff fed0 	bl	8002c58 <prv_parse_lat_long>
 8002eb8:	eeb0 7a40 	vmov.f32	s14, s0
 8002ebc:	eef0 7a60 	vmov.f32	s15, s1
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	ed83 7b22 	vstr	d7, [r3, #136]	@ 0x88
                break;
 8002ec6:	e1bc      	b.n	8003242 <prv_parse_term+0x54a>
            case 3:                             /* Latitude north/south information */
                if (gh->p.term_str[0] == 'S' || gh->p.term_str[0] == 's') {
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8002ece:	2b53      	cmp	r3, #83	@ 0x53
 8002ed0:	d005      	beq.n	8002ede <prv_parse_term+0x1e6>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8002ed8:	2b73      	cmp	r3, #115	@ 0x73
 8002eda:	f040 81a9 	bne.w	8003230 <prv_parse_term+0x538>
                    gh->p.data.gga.latitude = -gh->p.data.gga.latitude;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8002ee4:	4690      	mov	r8, r2
 8002ee6:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	e9c3 8922 	strd	r8, r9, [r3, #136]	@ 0x88
                }
                break;
 8002ef0:	e19e      	b.n	8003230 <prv_parse_term+0x538>
            case 4:                             /* Longitude */
                gh->p.data.gga.longitude = prv_parse_lat_long(gh);  /* Parse longitude */
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f7ff feb0 	bl	8002c58 <prv_parse_lat_long>
 8002ef8:	eeb0 7a40 	vmov.f32	s14, s0
 8002efc:	eef0 7a60 	vmov.f32	s15, s1
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	ed83 7b24 	vstr	d7, [r3, #144]	@ 0x90
                break;
 8002f06:	e19c      	b.n	8003242 <prv_parse_term+0x54a>
            case 5:                             /* Longitude east/west information */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8002f0e:	2b57      	cmp	r3, #87	@ 0x57
 8002f10:	d005      	beq.n	8002f1e <prv_parse_term+0x226>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8002f18:	2b77      	cmp	r3, #119	@ 0x77
 8002f1a:	f040 818b 	bne.w	8003234 <prv_parse_term+0x53c>
                    gh->p.data.gga.longitude = -gh->p.data.gga.longitude;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8002f24:	4614      	mov	r4, r2
 8002f26:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	e9c3 4524 	strd	r4, r5, [r3, #144]	@ 0x90
                }
                break;
 8002f30:	e180      	b.n	8003234 <prv_parse_term+0x53c>
            case 6:                             /* Fix status */
                gh->p.data.gga.fix = (uint8_t)prv_parse_number(gh, NULL);
 8002f32:	2100      	movs	r1, #0
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f7ff fe1d 	bl	8002b74 <prv_parse_number>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	b2da      	uxtb	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
                break;
 8002f44:	e17d      	b.n	8003242 <prv_parse_term+0x54a>
            case 7:                             /* Satellites in use */
                gh->p.data.gga.sats_in_use = (uint8_t)prv_parse_number(gh, NULL);
 8002f46:	2100      	movs	r1, #0
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f7ff fe13 	bl	8002b74 <prv_parse_number>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	b2da      	uxtb	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
                break;
 8002f58:	e173      	b.n	8003242 <prv_parse_term+0x54a>
            case 9:                             /* Altitude */
                gh->p.data.gga.altitude = prv_parse_float_number(gh, NULL);
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f7ff fe53 	bl	8002c08 <prv_parse_float_number>
 8002f62:	eeb0 7a40 	vmov.f32	s14, s0
 8002f66:	eef0 7a60 	vmov.f32	s15, s1
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	ed83 7b26 	vstr	d7, [r3, #152]	@ 0x98
                break;
 8002f70:	e167      	b.n	8003242 <prv_parse_term+0x54a>
            case 11:                            /* Altitude above ellipsoid */
                gh->p.data.gga.geo_sep = prv_parse_float_number(gh, NULL);
 8002f72:	2100      	movs	r1, #0
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f7ff fe47 	bl	8002c08 <prv_parse_float_number>
 8002f7a:	eeb0 7a40 	vmov.f32	s14, s0
 8002f7e:	eef0 7a60 	vmov.f32	s15, s1
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	ed83 7b28 	vstr	d7, [r3, #160]	@ 0xa0
                break;
 8002f88:	e15b      	b.n	8003242 <prv_parse_term+0x54a>
            default:
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {        /* Process GPGSA statement */
 8002f8a:	6879      	ldr	r1, [r7, #4]
 8002f8c:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 8002f90:	2902      	cmp	r1, #2
 8002f92:	f040 8083 	bne.w	800309c <prv_parse_term+0x3a4>
        switch (gh->p.term_num) {
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8002f9c:	3b02      	subs	r3, #2
 8002f9e:	2b0f      	cmp	r3, #15
 8002fa0:	d860      	bhi.n	8003064 <prv_parse_term+0x36c>
 8002fa2:	a201      	add	r2, pc, #4	@ (adr r2, 8002fa8 <prv_parse_term+0x2b0>)
 8002fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fa8:	08002fe9 	.word	0x08002fe9
 8002fac:	08003065 	.word	0x08003065
 8002fb0:	08003065 	.word	0x08003065
 8002fb4:	08003065 	.word	0x08003065
 8002fb8:	08003065 	.word	0x08003065
 8002fbc:	08003065 	.word	0x08003065
 8002fc0:	08003065 	.word	0x08003065
 8002fc4:	08003065 	.word	0x08003065
 8002fc8:	08003065 	.word	0x08003065
 8002fcc:	08003065 	.word	0x08003065
 8002fd0:	08003065 	.word	0x08003065
 8002fd4:	08003065 	.word	0x08003065
 8002fd8:	08003065 	.word	0x08003065
 8002fdc:	0800301d 	.word	0x0800301d
 8002fe0:	08003035 	.word	0x08003035
 8002fe4:	0800304d 	.word	0x0800304d
            case 2:                             /* Process fix mode */
                gh->p.data.gsa.fix_mode = (uint8_t)prv_parse_number(gh, NULL);
 8002fe8:	2100      	movs	r1, #0
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f7ff fdc2 	bl	8002b74 <prv_parse_number>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	b2da      	uxtb	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
                break;
 8002ffa:	e122      	b.n	8003242 <prv_parse_term+0x54a>
 8002ffc:	0800f058 	.word	0x0800f058
 8003000:	0800f060 	.word	0x0800f060
 8003004:	0800f068 	.word	0x0800f068
 8003008:	0800f070 	.word	0x0800f070
 800300c:	0800f078 	.word	0x0800f078
 8003010:	0800f080 	.word	0x0800f080
 8003014:	0800f088 	.word	0x0800f088
 8003018:	0800f090 	.word	0x0800f090
            case 15:                            /* Process PDOP */
                gh->p.data.gsa.dop_p = prv_parse_float_number(gh, NULL);
 800301c:	2100      	movs	r1, #0
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f7ff fdf2 	bl	8002c08 <prv_parse_float_number>
 8003024:	eeb0 7a40 	vmov.f32	s14, s0
 8003028:	eef0 7a60 	vmov.f32	s15, s1
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	ed83 7b26 	vstr	d7, [r3, #152]	@ 0x98
                break;
 8003032:	e106      	b.n	8003242 <prv_parse_term+0x54a>
            case 16:                            /* Process HDOP */
                gh->p.data.gsa.dop_h = prv_parse_float_number(gh, NULL);
 8003034:	2100      	movs	r1, #0
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f7ff fde6 	bl	8002c08 <prv_parse_float_number>
 800303c:	eeb0 7a40 	vmov.f32	s14, s0
 8003040:	eef0 7a60 	vmov.f32	s15, s1
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	ed83 7b22 	vstr	d7, [r3, #136]	@ 0x88
                break;
 800304a:	e0fa      	b.n	8003242 <prv_parse_term+0x54a>
            case 17:                            /* Process VDOP */
                gh->p.data.gsa.dop_v = prv_parse_float_number(gh, NULL);
 800304c:	2100      	movs	r1, #0
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f7ff fdda 	bl	8002c08 <prv_parse_float_number>
 8003054:	eeb0 7a40 	vmov.f32	s14, s0
 8003058:	eef0 7a60 	vmov.f32	s15, s1
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	ed83 7b24 	vstr	d7, [r3, #144]	@ 0x90
                break;
 8003062:	e0ee      	b.n	8003242 <prv_parse_term+0x54a>
            default:
                /* Parse satellite IDs */
                if (gh->p.term_num >= 3 && gh->p.term_num <= 14) {
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 800306a:	2b02      	cmp	r3, #2
 800306c:	f240 80e4 	bls.w	8003238 <prv_parse_term+0x540>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8003076:	2b0e      	cmp	r3, #14
 8003078:	f200 80de 	bhi.w	8003238 <prv_parse_term+0x540>
                    gh->p.data.gsa.satellites_ids[gh->p.term_num - 3] = (uint8_t)prv_parse_number(gh, NULL);
 800307c:	2100      	movs	r1, #0
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7ff fd78 	bl	8002b74 <prv_parse_number>
 8003084:	4602      	mov	r2, r0
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 800308c:	3b03      	subs	r3, #3
 800308e:	b2d1      	uxtb	r1, r2
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	4413      	add	r3, r2
 8003094:	460a      	mov	r2, r1
 8003096:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
                }
                break;
 800309a:	e0cd      	b.n	8003238 <prv_parse_term+0x540>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {        /* Process GPGSV statement */
 800309c:	6879      	ldr	r1, [r7, #4]
 800309e:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 80030a2:	2903      	cmp	r1, #3
 80030a4:	d11b      	bne.n	80030de <prv_parse_term+0x3e6>
        switch (gh->p.term_num) {
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d002      	beq.n	80030b6 <prv_parse_term+0x3be>
 80030b0:	2b03      	cmp	r3, #3
 80030b2:	d00a      	beq.n	80030ca <prv_parse_term+0x3d2>
                                break;
                        }
                    }
                }
#endif /* LWGPS_CFG_STATEMENT_GPGSV_SAT_DET */
                break;
 80030b4:	e0c5      	b.n	8003242 <prv_parse_term+0x54a>
                gh->p.data.gsv.stat_num = (uint8_t)prv_parse_number(gh, NULL);
 80030b6:	2100      	movs	r1, #0
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f7ff fd5b 	bl	8002b74 <prv_parse_number>
 80030be:	4603      	mov	r3, r0
 80030c0:	b2da      	uxtb	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
                break;
 80030c8:	e0bb      	b.n	8003242 <prv_parse_term+0x54a>
                gh->p.data.gsv.sats_in_view = (uint8_t)prv_parse_number(gh, NULL);
 80030ca:	2100      	movs	r1, #0
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f7ff fd51 	bl	8002b74 <prv_parse_number>
 80030d2:	4603      	mov	r3, r0
 80030d4:	b2da      	uxtb	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
                break;
 80030dc:	e0b1      	b.n	8003242 <prv_parse_term+0x54a>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {        /* Process GPRMC statement */
 80030de:	6879      	ldr	r1, [r7, #4]
 80030e0:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 80030e4:	2904      	cmp	r1, #4
 80030e6:	f040 80ac 	bne.w	8003242 <prv_parse_term+0x54a>
        switch (gh->p.term_num) {
 80030ea:	6879      	ldr	r1, [r7, #4]
 80030ec:	f891 107f 	ldrb.w	r1, [r1, #127]	@ 0x7f
 80030f0:	3902      	subs	r1, #2
 80030f2:	2909      	cmp	r1, #9
 80030f4:	f200 80a2 	bhi.w	800323c <prv_parse_term+0x544>
 80030f8:	a001      	add	r0, pc, #4	@ (adr r0, 8003100 <prv_parse_term+0x408>)
 80030fa:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80030fe:	bf00      	nop
 8003100:	08003129 	.word	0x08003129
 8003104:	0800323d 	.word	0x0800323d
 8003108:	0800323d 	.word	0x0800323d
 800310c:	0800323d 	.word	0x0800323d
 8003110:	0800323d 	.word	0x0800323d
 8003114:	08003143 	.word	0x08003143
 8003118:	0800315b 	.word	0x0800315b
 800311c:	08003173 	.word	0x08003173
 8003120:	080031ed 	.word	0x080031ed
 8003124:	08003205 	.word	0x08003205
            case 2:                             /* Process valid status */
                gh->p.data.rmc.is_valid = (gh->p.term_str[0] == 'A');
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800312e:	2b41      	cmp	r3, #65	@ 0x41
 8003130:	bf0c      	ite	eq
 8003132:	2301      	moveq	r3, #1
 8003134:	2300      	movne	r3, #0
 8003136:	b2db      	uxtb	r3, r3
 8003138:	461a      	mov	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
                break;
 8003140:	e07f      	b.n	8003242 <prv_parse_term+0x54a>
            case 7:                             /* Process ground speed in knots */
                gh->p.data.rmc.speed = prv_parse_float_number(gh, NULL);
 8003142:	2100      	movs	r1, #0
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f7ff fd5f 	bl	8002c08 <prv_parse_float_number>
 800314a:	eeb0 7a40 	vmov.f32	s14, s0
 800314e:	eef0 7a60 	vmov.f32	s15, s1
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	ed83 7b24 	vstr	d7, [r3, #144]	@ 0x90
                break;
 8003158:	e073      	b.n	8003242 <prv_parse_term+0x54a>
            case 8:                             /* Process true ground coarse */
                gh->p.data.rmc.course = prv_parse_float_number(gh, NULL);
 800315a:	2100      	movs	r1, #0
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f7ff fd53 	bl	8002c08 <prv_parse_float_number>
 8003162:	eeb0 7a40 	vmov.f32	s14, s0
 8003166:	eef0 7a60 	vmov.f32	s15, s1
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	ed83 7b26 	vstr	d7, [r3, #152]	@ 0x98
                break;
 8003170:	e067      	b.n	8003242 <prv_parse_term+0x54a>
            case 9:                             /* Process date */
                gh->p.data.rmc.date = (uint8_t)(10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]));
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8003178:	3b30      	subs	r3, #48	@ 0x30
 800317a:	b2db      	uxtb	r3, r3
 800317c:	461a      	mov	r2, r3
 800317e:	0092      	lsls	r2, r2, #2
 8003180:	4413      	add	r3, r2
 8003182:	005b      	lsls	r3, r3, #1
 8003184:	b2da      	uxtb	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 800318c:	4413      	add	r3, r2
 800318e:	b2db      	uxtb	r3, r3
 8003190:	3b30      	subs	r3, #48	@ 0x30
 8003192:	b2da      	uxtb	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
                gh->p.data.rmc.month = (uint8_t)(10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]));
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 80031a0:	3b30      	subs	r3, #48	@ 0x30
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	461a      	mov	r2, r3
 80031a6:	0092      	lsls	r2, r2, #2
 80031a8:	4413      	add	r3, r2
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	b2da      	uxtb	r2, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80031b4:	4413      	add	r3, r2
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	3b30      	subs	r3, #48	@ 0x30
 80031ba:	b2da      	uxtb	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
                gh->p.data.rmc.year = (uint8_t)(10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]));
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 80031c8:	3b30      	subs	r3, #48	@ 0x30
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	461a      	mov	r2, r3
 80031ce:	0092      	lsls	r2, r2, #2
 80031d0:	4413      	add	r3, r2
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	b2da      	uxtb	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 80031dc:	4413      	add	r3, r2
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	3b30      	subs	r3, #48	@ 0x30
 80031e2:	b2da      	uxtb	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f883 208b 	strb.w	r2, [r3, #139]	@ 0x8b
                break;
 80031ea:	e02a      	b.n	8003242 <prv_parse_term+0x54a>
            case 10:                            /* Process magnetic variation */
                gh->p.data.rmc.variation = prv_parse_float_number(gh, NULL);
 80031ec:	2100      	movs	r1, #0
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f7ff fd0a 	bl	8002c08 <prv_parse_float_number>
 80031f4:	eeb0 7a40 	vmov.f32	s14, s0
 80031f8:	eef0 7a60 	vmov.f32	s15, s1
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	ed83 7b28 	vstr	d7, [r3, #160]	@ 0xa0
                break;
 8003202:	e01e      	b.n	8003242 <prv_parse_term+0x54a>
            case 11:                            /* Process magnetic variation east/west */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 8003204:	6879      	ldr	r1, [r7, #4]
 8003206:	f891 1071 	ldrb.w	r1, [r1, #113]	@ 0x71
 800320a:	2957      	cmp	r1, #87	@ 0x57
 800320c:	d004      	beq.n	8003218 <prv_parse_term+0x520>
 800320e:	6879      	ldr	r1, [r7, #4]
 8003210:	f891 1071 	ldrb.w	r1, [r1, #113]	@ 0x71
 8003214:	2977      	cmp	r1, #119	@ 0x77
 8003216:	d113      	bne.n	8003240 <prv_parse_term+0x548>
                    gh->p.data.rmc.variation = -gh->p.data.rmc.variation;
 8003218:	6879      	ldr	r1, [r7, #4]
 800321a:	e9d1 0128 	ldrd	r0, r1, [r1, #160]	@ 0xa0
 800321e:	4602      	mov	r2, r0
 8003220:	f081 4300 	eor.w	r3, r1, #2147483648	@ 0x80000000
 8003224:	6879      	ldr	r1, [r7, #4]
 8003226:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
                }
                break;
 800322a:	e009      	b.n	8003240 <prv_parse_term+0x548>
                break;
 800322c:	bf00      	nop
 800322e:	e008      	b.n	8003242 <prv_parse_term+0x54a>
                break;
 8003230:	bf00      	nop
 8003232:	e006      	b.n	8003242 <prv_parse_term+0x54a>
                break;
 8003234:	bf00      	nop
 8003236:	e004      	b.n	8003242 <prv_parse_term+0x54a>
                break;
 8003238:	bf00      	nop
 800323a:	e002      	b.n	8003242 <prv_parse_term+0x54a>
            default:
                break;
 800323c:	bf00      	nop
 800323e:	e000      	b.n	8003242 <prv_parse_term+0x54a>
                break;
 8003240:	bf00      	nop
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
#endif /* LWGPS_CFG_STATEMENT_PUBX */
    }
    return 1;
 8003242:	2301      	movs	r3, #1
}
 8003244:	4618      	mov	r0, r3
 8003246:	3708      	adds	r7, #8
 8003248:	46bd      	mov	sp, r7
 800324a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800324e:	bf00      	nop

08003250 <prv_check_crc>:
 * \brief           Compare calculated CRC with received CRC
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_check_crc(lwgps_t* gh) {
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
    uint8_t crc;
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04) | (CHTN(gh->p.term_str[1]) & 0x0F);   /* Convert received CRC from string (hex) to number */
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800325e:	2b2f      	cmp	r3, #47	@ 0x2f
 8003260:	d90d      	bls.n	800327e <prv_check_crc+0x2e>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8003268:	2b39      	cmp	r3, #57	@ 0x39
 800326a:	d808      	bhi.n	800327e <prv_check_crc+0x2e>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8003272:	3b30      	subs	r3, #48	@ 0x30
 8003274:	b2db      	uxtb	r3, r3
 8003276:	b25b      	sxtb	r3, r3
 8003278:	011b      	lsls	r3, r3, #4
 800327a:	b25a      	sxtb	r2, r3
 800327c:	e026      	b.n	80032cc <prv_check_crc+0x7c>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8003284:	2b60      	cmp	r3, #96	@ 0x60
 8003286:	d90d      	bls.n	80032a4 <prv_check_crc+0x54>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800328e:	2b7a      	cmp	r3, #122	@ 0x7a
 8003290:	d808      	bhi.n	80032a4 <prv_check_crc+0x54>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8003298:	3b57      	subs	r3, #87	@ 0x57
 800329a:	b2db      	uxtb	r3, r3
 800329c:	b25b      	sxtb	r3, r3
 800329e:	011b      	lsls	r3, r3, #4
 80032a0:	b25a      	sxtb	r2, r3
 80032a2:	e013      	b.n	80032cc <prv_check_crc+0x7c>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80032aa:	2b40      	cmp	r3, #64	@ 0x40
 80032ac:	d90d      	bls.n	80032ca <prv_check_crc+0x7a>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80032b4:	2b5a      	cmp	r3, #90	@ 0x5a
 80032b6:	d808      	bhi.n	80032ca <prv_check_crc+0x7a>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80032be:	3b37      	subs	r3, #55	@ 0x37
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	b25b      	sxtb	r3, r3
 80032c4:	011b      	lsls	r3, r3, #4
 80032c6:	b25a      	sxtb	r2, r3
 80032c8:	e000      	b.n	80032cc <prv_check_crc+0x7c>
 80032ca:	2200      	movs	r2, #0
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80032d2:	2b2f      	cmp	r3, #47	@ 0x2f
 80032d4:	d90c      	bls.n	80032f0 <prv_check_crc+0xa0>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80032dc:	2b39      	cmp	r3, #57	@ 0x39
 80032de:	d807      	bhi.n	80032f0 <prv_check_crc+0xa0>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80032e6:	b25b      	sxtb	r3, r3
 80032e8:	f003 030f 	and.w	r3, r3, #15
 80032ec:	b25b      	sxtb	r3, r3
 80032ee:	e028      	b.n	8003342 <prv_check_crc+0xf2>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80032f6:	2b60      	cmp	r3, #96	@ 0x60
 80032f8:	d90e      	bls.n	8003318 <prv_check_crc+0xc8>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8003300:	2b7a      	cmp	r3, #122	@ 0x7a
 8003302:	d809      	bhi.n	8003318 <prv_check_crc+0xc8>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 800330a:	3b57      	subs	r3, #87	@ 0x57
 800330c:	b2db      	uxtb	r3, r3
 800330e:	b25b      	sxtb	r3, r3
 8003310:	f003 030f 	and.w	r3, r3, #15
 8003314:	b25b      	sxtb	r3, r3
 8003316:	e014      	b.n	8003342 <prv_check_crc+0xf2>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 800331e:	2b40      	cmp	r3, #64	@ 0x40
 8003320:	d90e      	bls.n	8003340 <prv_check_crc+0xf0>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8003328:	2b5a      	cmp	r3, #90	@ 0x5a
 800332a:	d809      	bhi.n	8003340 <prv_check_crc+0xf0>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8003332:	3b37      	subs	r3, #55	@ 0x37
 8003334:	b2db      	uxtb	r3, r3
 8003336:	b25b      	sxtb	r3, r3
 8003338:	f003 030f 	and.w	r3, r3, #15
 800333c:	b25b      	sxtb	r3, r3
 800333e:	e000      	b.n	8003342 <prv_check_crc+0xf2>
 8003340:	2300      	movs	r3, #0
 8003342:	4313      	orrs	r3, r2
 8003344:	b25b      	sxtb	r3, r3
 8003346:	73fb      	strb	r3, [r7, #15]
    return gh->p.crc_calc == crc;               /* They must match! */
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800334e:	7bfa      	ldrb	r2, [r7, #15]
 8003350:	429a      	cmp	r2, r3
 8003352:	bf0c      	ite	eq
 8003354:	2301      	moveq	r3, #1
 8003356:	2300      	movne	r3, #0
 8003358:	b2db      	uxtb	r3, r3
}
 800335a:	4618      	mov	r0, r3
 800335c:	3714      	adds	r7, #20
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr

08003366 <prv_copy_from_tmp_memory>:
 * \brief           Copy temporary memory to user memory
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_copy_from_tmp_memory(lwgps_t* gh) {
 8003366:	b580      	push	{r7, lr}
 8003368:	b082      	sub	sp, #8
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
    if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8003374:	2b01      	cmp	r3, #1
 8003376:	d136      	bne.n	80033e6 <prv_copy_from_tmp_memory+0x80>
        gh->latitude = gh->p.data.gga.latitude;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 800337e:	6879      	ldr	r1, [r7, #4]
 8003380:	e9c1 2300 	strd	r2, r3, [r1]
        gh->longitude = gh->p.data.gga.longitude;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 800338a:	6879      	ldr	r1, [r7, #4]
 800338c:	e9c1 2302 	strd	r2, r3, [r1, #8]
        gh->altitude = gh->p.data.gga.altitude;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 8003396:	6879      	ldr	r1, [r7, #4]
 8003398:	e9c1 2304 	strd	r2, r3, [r1, #16]
        gh->geo_sep = gh->p.data.gga.geo_sep;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 80033a2:	6879      	ldr	r1, [r7, #4]
 80033a4:	e9c1 2306 	strd	r2, r3, [r1, #24]
        gh->sats_in_use = gh->p.data.gga.sats_in_use;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f893 20a8 	ldrb.w	r2, [r3, #168]	@ 0xa8
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f883 2020 	strb.w	r2, [r3, #32]
        gh->fix = gh->p.data.gga.fix;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f893 20a9 	ldrb.w	r2, [r3, #169]	@ 0xa9
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        gh->hours = gh->p.data.gga.hours;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f893 20aa 	ldrb.w	r2, [r3, #170]	@ 0xaa
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
        gh->minutes = gh->p.data.gga.minutes;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f893 20ab 	ldrb.w	r2, [r3, #171]	@ 0xab
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
        gh->seconds = gh->p.data.gga.seconds;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f893 20ac 	ldrb.w	r2, [r3, #172]	@ 0xac
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80033e4:	e061      	b.n	80034aa <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d121      	bne.n	8003434 <prv_copy_from_tmp_memory+0xce>
        gh->dop_h = gh->p.data.gsa.dop_h;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 80033f6:	6879      	ldr	r1, [r7, #4]
 80033f8:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
        gh->dop_p = gh->p.data.gsa.dop_p;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 8003402:	6879      	ldr	r1, [r7, #4]
 8003404:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
        gh->dop_v = gh->p.data.gsa.dop_v;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 800340e:	6879      	ldr	r1, [r7, #4]
 8003410:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
        gh->fix_mode = gh->p.data.gsa.fix_mode;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f893 20a0 	ldrb.w	r2, [r3, #160]	@ 0xa0
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        memcpy(gh->satellites_ids, gh->p.data.gsa.satellites_ids, sizeof(gh->satellites_ids));
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f103 0041 	add.w	r0, r3, #65	@ 0x41
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	33a1      	adds	r3, #161	@ 0xa1
 800342a:	220c      	movs	r2, #12
 800342c:	4619      	mov	r1, r3
 800342e:	f008 ff7a 	bl	800c326 <memcpy>
 8003432:	e03a      	b.n	80034aa <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800343a:	2b03      	cmp	r3, #3
 800343c:	d106      	bne.n	800344c <prv_copy_from_tmp_memory+0xe6>
        gh->sats_in_view = gh->p.data.gsv.sats_in_view;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 2088 	ldrb.w	r2, [r3, #136]	@ 0x88
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 800344a:	e02e      	b.n	80034aa <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8003452:	2b04      	cmp	r3, #4
 8003454:	d129      	bne.n	80034aa <prv_copy_from_tmp_memory+0x144>
        gh->course = gh->p.data.rmc.course;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 800345c:	6879      	ldr	r1, [r7, #4]
 800345e:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
        gh->is_valid = gh->p.data.rmc.is_valid;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 2088 	ldrb.w	r2, [r3, #136]	@ 0x88
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
        gh->speed = gh->p.data.rmc.speed;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8003474:	6879      	ldr	r1, [r7, #4]
 8003476:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
        gh->variation = gh->p.data.rmc.variation;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 8003480:	6879      	ldr	r1, [r7, #4]
 8003482:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
        gh->date = gh->p.data.rmc.date;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 2089 	ldrb.w	r2, [r3, #137]	@ 0x89
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
        gh->month = gh->p.data.rmc.month;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 208a 	ldrb.w	r2, [r3, #138]	@ 0x8a
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
        gh->year = gh->p.data.rmc.year;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f893 208b 	ldrb.w	r2, [r3, #139]	@ 0x8b
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
        gh->clk_bias = gh->p.data.time.clk_bias;
        gh->clk_drift = gh->p.data.time.clk_drift;
        gh->tp_gran = gh->p.data.time.tp_gran;
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
    }
    return 1;
 80034aa:	2301      	movs	r3, #1
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3708      	adds	r7, #8
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       gh: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* gh) {
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
    memset(gh, 0x00, sizeof(*gh));              /* Reset structure */
 80034bc:	22b0      	movs	r2, #176	@ 0xb0
 80034be:	2100      	movs	r1, #0
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f008 fe92 	bl	800c1ea <memset>
    return 1;
 80034c6:	2301      	movs	r3, #1
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3708      	adds	r7, #8
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <lwgps_process>:
 */
uint8_t
#if LWGPS_CFG_STATUS || __DOXYGEN__
lwgps_process(lwgps_t* gh, const void* data, size_t len, lwgps_process_fn evt_fn) {
#else /* LWGPS_CFG_STATUS */
lwgps_process(lwgps_t* gh, const void* data, size_t len) {
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b086      	sub	sp, #24
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
#endif /* !LWGPS_CFG_STATUS */
    const uint8_t* d = data;
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	617b      	str	r3, [r7, #20]

    for (; len > 0; ++d, --len) {               /* Process all bytes */
 80034e0:	e0ad      	b.n	800363e <lwgps_process+0x16e>
        if (*d == '$') {                        /* Check for beginning of NMEA line */
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	2b24      	cmp	r3, #36	@ 0x24
 80034e8:	d128      	bne.n	800353c <lwgps_process+0x6c>
            memset(&gh->p, 0x00, sizeof(gh->p));/* Reset private memory */
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	3370      	adds	r3, #112	@ 0x70
 80034ee:	2240      	movs	r2, #64	@ 0x40
 80034f0:	2100      	movs	r1, #0
 80034f2:	4618      	mov	r0, r3
 80034f4:	f008 fe79 	bl	800c1ea <memset>
            TERM_ADD(gh, *d);                   /* Add character to term */
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 80034fe:	2b0b      	cmp	r3, #11
 8003500:	f200 8097 	bhi.w	8003632 <lwgps_process+0x162>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 800350a:	4619      	mov	r1, r3
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	781a      	ldrb	r2, [r3, #0]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	440b      	add	r3, r1
 8003514:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 800351e:	3301      	adds	r3, #1
 8003520:	b2da      	uxtb	r2, r3
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 800352e:	461a      	mov	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	4413      	add	r3, r2
 8003534:	2200      	movs	r2, #0
 8003536:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 800353a:	e07a      	b.n	8003632 <lwgps_process+0x162>
        } else if (*d == ',') {                 /* Term separator character */
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	2b2c      	cmp	r3, #44	@ 0x2c
 8003542:	d11d      	bne.n	8003580 <lwgps_process+0xb0>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f7ff fbd7 	bl	8002cf8 <prv_parse_term>
            CRC_ADD(gh, *d);                    /* Add character to CRC computation */
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f893 2081 	ldrb.w	r2, [r3, #129]	@ 0x81
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	4053      	eors	r3, r2
 8003556:	b2da      	uxtb	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
            TERM_NEXT(gh);                      /* Start with next term */
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8003574:	3301      	adds	r3, #1
 8003576:	b2da      	uxtb	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
 800357e:	e058      	b.n	8003632 <lwgps_process+0x162>
        } else if (*d == '*') {                 /* Start indicates end of data for CRC computation */
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	2b2a      	cmp	r3, #42	@ 0x2a
 8003586:	d117      	bne.n	80035b8 <lwgps_process+0xe8>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f7ff fbb5 	bl	8002cf8 <prv_parse_term>
            gh->p.star = 1;                     /* STAR detected */
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2201      	movs	r2, #1
 8003592:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
            TERM_NEXT(gh);                      /* Start with next term */
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 80035ac:	3301      	adds	r3, #1
 80035ae:	b2da      	uxtb	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
 80035b6:	e03c      	b.n	8003632 <lwgps_process+0x162>
        } else if (*d == '\r') {
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	2b0d      	cmp	r3, #13
 80035be:	d109      	bne.n	80035d4 <lwgps_process+0x104>
            if (prv_check_crc(gh)) {            /* Check for CRC result */
 80035c0:	68f8      	ldr	r0, [r7, #12]
 80035c2:	f7ff fe45 	bl	8003250 <prv_check_crc>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d032      	beq.n	8003632 <lwgps_process+0x162>
                /* CRC is OK, in theory we can copy data from statements to user data */
                prv_copy_from_tmp_memory(gh);   /* Copy memory from temporary to user memory */
 80035cc:	68f8      	ldr	r0, [r7, #12]
 80035ce:	f7ff feca 	bl	8003366 <prv_copy_from_tmp_memory>
 80035d2:	e02e      	b.n	8003632 <lwgps_process+0x162>
            } else if (evt_fn != NULL) {
                evt_fn(STAT_CHECKSUM_FAIL);
#endif /* LWGPS_CFG_STATUS */
            }
        } else {
            if (!gh->p.star) {                  /* Add to CRC only if star not yet detected */
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d109      	bne.n	80035f2 <lwgps_process+0x122>
                CRC_ADD(gh, *d);                /* Add to CRC */
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f893 2081 	ldrb.w	r2, [r3, #129]	@ 0x81
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	4053      	eors	r3, r2
 80035ea:	b2da      	uxtb	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
            }
            TERM_ADD(gh, *d);                   /* Add character to term */
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 80035f8:	2b0b      	cmp	r3, #11
 80035fa:	d81a      	bhi.n	8003632 <lwgps_process+0x162>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8003602:	4619      	mov	r1, r3
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	781a      	ldrb	r2, [r3, #0]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	440b      	add	r3, r1
 800360c:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8003616:	3301      	adds	r3, #1
 8003618:	b2da      	uxtb	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8003626:	461a      	mov	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	4413      	add	r3, r2
 800362c:	2200      	movs	r2, #0
 800362e:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
    for (; len > 0; ++d, --len) {               /* Process all bytes */
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	3301      	adds	r3, #1
 8003636:	617b      	str	r3, [r7, #20]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	3b01      	subs	r3, #1
 800363c:	607b      	str	r3, [r7, #4]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	f47f af4e 	bne.w	80034e2 <lwgps_process+0x12>
        }
    }
    return 1;
 8003646:	2301      	movs	r3, #1
}
 8003648:	4618      	mov	r0, r3
 800364a:	3718      	adds	r7, #24
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <HAL_UART_RxCpltCallback>:
{
	return ( A - B) * (E - D ) / (C - B )+ D ;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
	if(huart==&huart2){
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a29      	ldr	r2, [pc, #164]	@ (8003700 <HAL_UART_RxCpltCallback+0xb0>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d127      	bne.n	80036b0 <HAL_UART_RxCpltCallback+0x60>
	if(rx_data != '\n' && rx_index < RX_BUFFER_SIZE) {
 8003660:	4b28      	ldr	r3, [pc, #160]	@ (8003704 <HAL_UART_RxCpltCallback+0xb4>)
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	2b0a      	cmp	r3, #10
 8003666:	d010      	beq.n	800368a <HAL_UART_RxCpltCallback+0x3a>
 8003668:	4b27      	ldr	r3, [pc, #156]	@ (8003708 <HAL_UART_RxCpltCallback+0xb8>)
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	b25b      	sxtb	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	db0b      	blt.n	800368a <HAL_UART_RxCpltCallback+0x3a>
		rx_buffer[rx_index++] = rx_data;
 8003672:	4b25      	ldr	r3, [pc, #148]	@ (8003708 <HAL_UART_RxCpltCallback+0xb8>)
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	1c5a      	adds	r2, r3, #1
 8003678:	b2d1      	uxtb	r1, r2
 800367a:	4a23      	ldr	r2, [pc, #140]	@ (8003708 <HAL_UART_RxCpltCallback+0xb8>)
 800367c:	7011      	strb	r1, [r2, #0]
 800367e:	461a      	mov	r2, r3
 8003680:	4b20      	ldr	r3, [pc, #128]	@ (8003704 <HAL_UART_RxCpltCallback+0xb4>)
 8003682:	7819      	ldrb	r1, [r3, #0]
 8003684:	4b21      	ldr	r3, [pc, #132]	@ (800370c <HAL_UART_RxCpltCallback+0xbc>)
 8003686:	5499      	strb	r1, [r3, r2]
 8003688:	e00d      	b.n	80036a6 <HAL_UART_RxCpltCallback+0x56>
	} else {
		lwgps_process(&gps, rx_buffer, rx_index+1);
 800368a:	4b1f      	ldr	r3, [pc, #124]	@ (8003708 <HAL_UART_RxCpltCallback+0xb8>)
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	3301      	adds	r3, #1
 8003690:	461a      	mov	r2, r3
 8003692:	491e      	ldr	r1, [pc, #120]	@ (800370c <HAL_UART_RxCpltCallback+0xbc>)
 8003694:	481e      	ldr	r0, [pc, #120]	@ (8003710 <HAL_UART_RxCpltCallback+0xc0>)
 8003696:	f7ff ff1b 	bl	80034d0 <lwgps_process>
		rx_index = 0;
 800369a:	4b1b      	ldr	r3, [pc, #108]	@ (8003708 <HAL_UART_RxCpltCallback+0xb8>)
 800369c:	2200      	movs	r2, #0
 800369e:	701a      	strb	r2, [r3, #0]
		rx_data = 0;
 80036a0:	4b18      	ldr	r3, [pc, #96]	@ (8003704 <HAL_UART_RxCpltCallback+0xb4>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 80036a6:	2201      	movs	r2, #1
 80036a8:	4916      	ldr	r1, [pc, #88]	@ (8003704 <HAL_UART_RxCpltCallback+0xb4>)
 80036aa:	4815      	ldr	r0, [pc, #84]	@ (8003700 <HAL_UART_RxCpltCallback+0xb0>)
 80036ac:	f006 fd6b 	bl	800a186 <HAL_UART_Receive_IT>
	}


	if(huart == &huart6){
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a18      	ldr	r2, [pc, #96]	@ (8003714 <HAL_UART_RxCpltCallback+0xc4>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d11e      	bne.n	80036f6 <HAL_UART_RxCpltCallback+0xa6>
		if(rx_data_EGU != '\n' && rx_index_EGU <34){//sol taraf silinebilir
 80036b8:	4b17      	ldr	r3, [pc, #92]	@ (8003718 <HAL_UART_RxCpltCallback+0xc8>)
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	2b0a      	cmp	r3, #10
 80036be:	d00f      	beq.n	80036e0 <HAL_UART_RxCpltCallback+0x90>
 80036c0:	4b16      	ldr	r3, [pc, #88]	@ (800371c <HAL_UART_RxCpltCallback+0xcc>)
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	2b21      	cmp	r3, #33	@ 0x21
 80036c6:	d80b      	bhi.n	80036e0 <HAL_UART_RxCpltCallback+0x90>
			EGU_RX_BUFFER[rx_index_EGU++]=rx_data_EGU;
 80036c8:	4b14      	ldr	r3, [pc, #80]	@ (800371c <HAL_UART_RxCpltCallback+0xcc>)
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	1c5a      	adds	r2, r3, #1
 80036ce:	b2d1      	uxtb	r1, r2
 80036d0:	4a12      	ldr	r2, [pc, #72]	@ (800371c <HAL_UART_RxCpltCallback+0xcc>)
 80036d2:	7011      	strb	r1, [r2, #0]
 80036d4:	461a      	mov	r2, r3
 80036d6:	4b10      	ldr	r3, [pc, #64]	@ (8003718 <HAL_UART_RxCpltCallback+0xc8>)
 80036d8:	7819      	ldrb	r1, [r3, #0]
 80036da:	4b11      	ldr	r3, [pc, #68]	@ (8003720 <HAL_UART_RxCpltCallback+0xd0>)
 80036dc:	5499      	strb	r1, [r3, r2]
 80036de:	e005      	b.n	80036ec <HAL_UART_RxCpltCallback+0x9c>

		}
		else
		{
			rx_data_EGU=0;
 80036e0:	4b0d      	ldr	r3, [pc, #52]	@ (8003718 <HAL_UART_RxCpltCallback+0xc8>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	701a      	strb	r2, [r3, #0]
			rx_index_EGU=0;
 80036e6:	4b0d      	ldr	r3, [pc, #52]	@ (800371c <HAL_UART_RxCpltCallback+0xcc>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	701a      	strb	r2, [r3, #0]

		}
	HAL_UART_Receive_IT(&huart6, &rx_data_EGU, 1);
 80036ec:	2201      	movs	r2, #1
 80036ee:	490a      	ldr	r1, [pc, #40]	@ (8003718 <HAL_UART_RxCpltCallback+0xc8>)
 80036f0:	4808      	ldr	r0, [pc, #32]	@ (8003714 <HAL_UART_RxCpltCallback+0xc4>)
 80036f2:	f006 fd48 	bl	800a186 <HAL_UART_Receive_IT>
		}
}
 80036f6:	bf00      	nop
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	200004bc 	.word	0x200004bc
 8003704:	20000639 	.word	0x20000639
 8003708:	20000638 	.word	0x20000638
 800370c:	200005b8 	.word	0x200005b8
 8003710:	20002350 	.word	0x20002350
 8003714:	20000544 	.word	0x20000544
 8003718:	200005aa 	.word	0x200005aa
 800371c:	200005ab 	.word	0x200005ab
 8003720:	20000588 	.word	0x20000588

08003724 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]

	if(htim==&htim11){ // 1 sn
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a14      	ldr	r2, [pc, #80]	@ (8003780 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d102      	bne.n	800373a <HAL_TIM_PeriodElapsedCallback+0x16>
   lora_flag=1;
 8003734:	4b13      	ldr	r3, [pc, #76]	@ (8003784 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003736:	2201      	movs	r2, #1
 8003738:	701a      	strb	r2, [r3, #0]


	}

	if(htim==&htim10){ //30ms
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a12      	ldr	r2, [pc, #72]	@ (8003788 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d102      	bne.n	8003748 <HAL_TIM_PeriodElapsedCallback+0x24>
	sensor_flag=1;
 8003742:	4b12      	ldr	r3, [pc, #72]	@ (800378c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003744:	2201      	movs	r2, #1
 8003746:	701a      	strb	r2, [r3, #0]


	}


	if(htim==&htim6){ // 200 ms timer
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a11      	ldr	r2, [pc, #68]	@ (8003790 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d112      	bne.n	8003776 <HAL_TIM_PeriodElapsedCallback+0x52>
	timer_200ms_flag = 1;
 8003750:	4b10      	ldr	r3, [pc, #64]	@ (8003794 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8003752:	2201      	movs	r2, #1
 8003754:	701a      	strb	r2, [r3, #0]
	egu_durum_flag=1;
 8003756:	4b10      	ldr	r3, [pc, #64]	@ (8003798 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003758:	2201      	movs	r2, #1
 800375a:	701a      	strb	r2, [r3, #0]


		if(counter == 15)
 800375c:	4b0f      	ldr	r3, [pc, #60]	@ (800379c <HAL_TIM_PeriodElapsedCallback+0x78>)
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	2b0f      	cmp	r3, #15
 8003762:	d108      	bne.n	8003776 <HAL_TIM_PeriodElapsedCallback+0x52>
		{
			adc_flag=1;
 8003764:	4b0e      	ldr	r3, [pc, #56]	@ (80037a0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8003766:	2201      	movs	r2, #1
 8003768:	701a      	strb	r2, [r3, #0]
			counter =0;
 800376a:	4b0c      	ldr	r3, [pc, #48]	@ (800379c <HAL_TIM_PeriodElapsedCallback+0x78>)
 800376c:	2200      	movs	r2, #0
 800376e:	701a      	strb	r2, [r3, #0]
			HAL_ADC_Start_IT(&hadc1);
 8003770:	480c      	ldr	r0, [pc, #48]	@ (80037a4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003772:	f002 fca1 	bl	80060b8 <HAL_ADC_Start_IT>


	}


}
 8003776:	bf00      	nop
 8003778:	3708      	adds	r7, #8
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	20000430 	.word	0x20000430
 8003784:	20002296 	.word	0x20002296
 8003788:	200003e8 	.word	0x200003e8
 800378c:	20002297 	.word	0x20002297
 8003790:	20000358 	.word	0x20000358
 8003794:	2000063d 	.word	0x2000063d
 8003798:	20002298 	.word	0x20002298
 800379c:	200005b4 	.word	0x200005b4
 80037a0:	200005b5 	.word	0x200005b5
 80037a4:	2000021c 	.word	0x2000021c

080037a8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1 )
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a09      	ldr	r2, [pc, #36]	@ (80037dc <HAL_ADC_ConvCpltCallback+0x34>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d10c      	bne.n	80037d4 <HAL_ADC_ConvCpltCallback+0x2c>
	{
		adc= HAL_ADC_GetValue(&hadc1);
 80037ba:	4809      	ldr	r0, [pc, #36]	@ (80037e0 <HAL_ADC_ConvCpltCallback+0x38>)
 80037bc:	f002 fe6a 	bl	8006494 <HAL_ADC_GetValue>
 80037c0:	ee07 0a90 	vmov	s15, r0
 80037c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037c8:	4b06      	ldr	r3, [pc, #24]	@ (80037e4 <HAL_ADC_ConvCpltCallback+0x3c>)
 80037ca:	edc3 7a00 	vstr	s15, [r3]


		adc_flag = 1;
 80037ce:	4b06      	ldr	r3, [pc, #24]	@ (80037e8 <HAL_ADC_ConvCpltCallback+0x40>)
 80037d0:	2201      	movs	r2, #1
 80037d2:	701a      	strb	r2, [r3, #0]
	}
}
 80037d4:	bf00      	nop
 80037d6:	3708      	adds	r7, #8
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	40012000 	.word	0x40012000
 80037e0:	2000021c 	.word	0x2000021c
 80037e4:	200005b0 	.word	0x200005b0
 80037e8:	200005b5 	.word	0x200005b5
 80037ec:	00000000 	.word	0x00000000

080037f0 <main>:
  * @brief  The application entry point.
  * @retval int
  *
  */
int main(void)
{
 80037f0:	b5b0      	push	{r4, r5, r7, lr}
 80037f2:	ed2d 8b02 	vpush	{d8}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80037fa:	f002 fb83 	bl	8005f04 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80037fe:	f001 f865 	bl	80048cc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003802:	f001 fb2f 	bl	8004e64 <MX_GPIO_Init>
  MX_ADC1_Init();
 8003806:	f001 f8cd 	bl	80049a4 <MX_ADC1_Init>
  MX_I2C1_Init();
 800380a:	f001 f91d 	bl	8004a48 <MX_I2C1_Init>
  MX_SPI1_Init();
 800380e:	f001 f949 	bl	8004aa4 <MX_SPI1_Init>
  MX_UART4_Init();
 8003812:	f001 fa7f 	bl	8004d14 <MX_UART4_Init>
  MX_USART2_UART_Init();
 8003816:	f001 faa7 	bl	8004d68 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800381a:	f001 facf 	bl	8004dbc <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 800381e:	f001 faf7 	bl	8004e10 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8003822:	f007 fc49 	bl	800b0b8 <MX_FATFS_Init>
  MX_TIM11_Init();
 8003826:	f001 fa51 	bl	8004ccc <MX_TIM11_Init>
  MX_TIM10_Init();
 800382a:	f001 fa2b 	bl	8004c84 <MX_TIM10_Init>
  MX_TIM6_Init();
 800382e:	f001 f9bd 	bl	8004bac <MX_TIM6_Init>
  MX_TIM7_Init();
 8003832:	f001 f9f1 	bl	8004c18 <MX_TIM7_Init>
  MX_TIM2_Init();
 8003836:	f001 f96b 	bl	8004b10 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 800383a:	2201      	movs	r2, #1
 800383c:	2102      	movs	r1, #2
 800383e:	48c2      	ldr	r0, [pc, #776]	@ (8003b48 <main+0x358>)
 8003840:	f003 fbd2 	bl	8006fe8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8003844:	2201      	movs	r2, #1
 8003846:	2104      	movs	r1, #4
 8003848:	48c0      	ldr	r0, [pc, #768]	@ (8003b4c <main+0x35c>)
 800384a:	f003 fbcd 	bl	8006fe8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800384e:	2201      	movs	r2, #1
 8003850:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003854:	48bc      	ldr	r0, [pc, #752]	@ (8003b48 <main+0x358>)
 8003856:	f003 fbc7 	bl	8006fe8 <HAL_GPIO_WritePin>

  ///KURTARMA PORTLARI KAPALI EMIN OL
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);//A
 800385a:	2200      	movs	r2, #0
 800385c:	2110      	movs	r1, #16
 800385e:	48bb      	ldr	r0, [pc, #748]	@ (8003b4c <main+0x35c>)
 8003860:	f003 fbc2 	bl	8006fe8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);//B
 8003864:	2200      	movs	r2, #0
 8003866:	2108      	movs	r1, #8
 8003868:	48b8      	ldr	r0, [pc, #736]	@ (8003b4c <main+0x35c>)
 800386a:	f003 fbbd 	bl	8006fe8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);//C
 800386e:	2200      	movs	r2, #0
 8003870:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003874:	48b4      	ldr	r0, [pc, #720]	@ (8003b48 <main+0x358>)
 8003876:	f003 fbb7 	bl	8006fe8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);//D
 800387a:	2200      	movs	r2, #0
 800387c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003880:	48b1      	ldr	r0, [pc, #708]	@ (8003b48 <main+0x358>)
 8003882:	f003 fbb1 	bl	8006fe8 <HAL_GPIO_WritePin>

  HAL_UART_Receive_IT(&huart2,&rx_data,1);
 8003886:	2201      	movs	r2, #1
 8003888:	49b1      	ldr	r1, [pc, #708]	@ (8003b50 <main+0x360>)
 800388a:	48b2      	ldr	r0, [pc, #712]	@ (8003b54 <main+0x364>)
 800388c:	f006 fc7b 	bl	800a186 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, &rx_data_EGU, 1);
 8003890:	2201      	movs	r2, #1
 8003892:	49b1      	ldr	r1, [pc, #708]	@ (8003b58 <main+0x368>)
 8003894:	48b1      	ldr	r0, [pc, #708]	@ (8003b5c <main+0x36c>)
 8003896:	f006 fc76 	bl	800a186 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim11);
 800389a:	48b1      	ldr	r0, [pc, #708]	@ (8003b60 <main+0x370>)
 800389c:	f005 ff34 	bl	8009708 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim10);
 80038a0:	48b0      	ldr	r0, [pc, #704]	@ (8003b64 <main+0x374>)
 80038a2:	f005 ff31 	bl	8009708 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 80038a6:	48b0      	ldr	r0, [pc, #704]	@ (8003b68 <main+0x378>)
 80038a8:	f005 ff2e 	bl	8009708 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Stop_IT(&htim7);
 80038ac:	48af      	ldr	r0, [pc, #700]	@ (8003b6c <main+0x37c>)
 80038ae:	f005 ff9b 	bl	80097e8 <HAL_TIM_Base_Stop_IT>
  //HAL_TIM_Base_Start_IT(&htim2);

  MAFilter_Init(&accx);
 80038b2:	48af      	ldr	r0, [pc, #700]	@ (8003b70 <main+0x380>)
 80038b4:	f7fe ff16 	bl	80026e4 <MAFilter_Init>
  FIRFilter_Init(&IMU_GYROY);
 80038b8:	48ae      	ldr	r0, [pc, #696]	@ (8003b74 <main+0x384>)
 80038ba:	f7fe fef1 	bl	80026a0 <FIRFilter_Init>
  FIRFilter_Init(&IMU_GYROX);
 80038be:	48ae      	ldr	r0, [pc, #696]	@ (8003b78 <main+0x388>)
 80038c0:	f7fe feee 	bl	80026a0 <FIRFilter_Init>
  FIRFilter_Init(&IMU_GYROZ);
 80038c4:	48ad      	ldr	r0, [pc, #692]	@ (8003b7c <main+0x38c>)
 80038c6:	f7fe feeb 	bl	80026a0 <FIRFilter_Init>
  FIRFilter_Init(&Normal);
 80038ca:	48ad      	ldr	r0, [pc, #692]	@ (8003b80 <main+0x390>)
 80038cc:	f7fe fee8 	bl	80026a0 <FIRFilter_Init>


  lwgps_init(&gps);
 80038d0:	48ac      	ldr	r0, [pc, #688]	@ (8003b84 <main+0x394>)
 80038d2:	f7ff fdef 	bl	80034b4 <lwgps_init>
 // W25Q_Reset();
  LSM6DSLTR_Init();
 80038d6:	f7fe ff27 	bl	8002728 <LSM6DSLTR_Init>
  E220_CONFIG(0x6,0x4A,0X10,1);
 80038da:	2301      	movs	r3, #1
 80038dc:	2210      	movs	r2, #16
 80038de:	214a      	movs	r1, #74	@ 0x4a
 80038e0:	2006      	movs	r0, #6
 80038e2:	f001 fb6b 	bl	8004fbc <E220_CONFIG>
  HAL_ADC_Start_IT(&hadc1);
 80038e6:	48a8      	ldr	r0, [pc, #672]	@ (8003b88 <main+0x398>)
 80038e8:	f002 fbe6 	bl	80060b8 <HAL_ADC_Start_IT>

  dev.dev_id = BME280_I2C_ADDR_PRIM;
 80038ec:	4ba7      	ldr	r3, [pc, #668]	@ (8003b8c <main+0x39c>)
 80038ee:	2276      	movs	r2, #118	@ 0x76
 80038f0:	705a      	strb	r2, [r3, #1]
  dev.intf = BME280_I2C_INTF;
 80038f2:	4ba6      	ldr	r3, [pc, #664]	@ (8003b8c <main+0x39c>)
 80038f4:	2201      	movs	r2, #1
 80038f6:	709a      	strb	r2, [r3, #2]
  dev.read = user_i2c_read;
 80038f8:	4ba4      	ldr	r3, [pc, #656]	@ (8003b8c <main+0x39c>)
 80038fa:	4aa5      	ldr	r2, [pc, #660]	@ (8003b90 <main+0x3a0>)
 80038fc:	605a      	str	r2, [r3, #4]
  dev.write = user_i2c_write;
 80038fe:	4ba3      	ldr	r3, [pc, #652]	@ (8003b8c <main+0x39c>)
 8003900:	4aa4      	ldr	r2, [pc, #656]	@ (8003b94 <main+0x3a4>)
 8003902:	609a      	str	r2, [r3, #8]
  dev.delay_ms = user_delay_ms;
 8003904:	4ba1      	ldr	r3, [pc, #644]	@ (8003b8c <main+0x39c>)
 8003906:	4aa4      	ldr	r2, [pc, #656]	@ (8003b98 <main+0x3a8>)
 8003908:	60da      	str	r2, [r3, #12]

  rslt = bme280_init(&dev);
 800390a:	48a0      	ldr	r0, [pc, #640]	@ (8003b8c <main+0x39c>)
 800390c:	f7fd fbd2 	bl	80010b4 <bme280_init>
 8003910:	4603      	mov	r3, r0
 8003912:	461a      	mov	r2, r3
 8003914:	4ba1      	ldr	r3, [pc, #644]	@ (8003b9c <main+0x3ac>)
 8003916:	701a      	strb	r2, [r3, #0]

  dev.settings.osr_h = BME280_OVERSAMPLING_1X;
 8003918:	4b9c      	ldr	r3, [pc, #624]	@ (8003b8c <main+0x39c>)
 800391a:	2201      	movs	r2, #1
 800391c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
  dev.settings.osr_p = BME280_OVERSAMPLING_4X;
 8003920:	4b9a      	ldr	r3, [pc, #616]	@ (8003b8c <main+0x39c>)
 8003922:	2203      	movs	r2, #3
 8003924:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  dev.settings.osr_t = BME280_OVERSAMPLING_2X;
 8003928:	4b98      	ldr	r3, [pc, #608]	@ (8003b8c <main+0x39c>)
 800392a:	2202      	movs	r2, #2
 800392c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  dev.settings.filter = BME280_FILTER_COEFF_16;
 8003930:	4b96      	ldr	r3, [pc, #600]	@ (8003b8c <main+0x39c>)
 8003932:	2204      	movs	r2, #4
 8003934:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
  rslt = bme280_set_sensor_settings(BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL, &dev);
 8003938:	4994      	ldr	r1, [pc, #592]	@ (8003b8c <main+0x39c>)
 800393a:	200f      	movs	r0, #15
 800393c:	f7fd fcae 	bl	800129c <bme280_set_sensor_settings>
 8003940:	4603      	mov	r3, r0
 8003942:	461a      	mov	r2, r3
 8003944:	4b95      	ldr	r3, [pc, #596]	@ (8003b9c <main+0x3ac>)
 8003946:	701a      	strb	r2, [r3, #0]

  ////ALTITUDE OFFSET
   HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);
 8003948:	2110      	movs	r1, #16
 800394a:	487f      	ldr	r0, [pc, #508]	@ (8003b48 <main+0x358>)
 800394c:	f003 fb65 	bl	800701a <HAL_GPIO_TogglePin>
   Altitude_Offset();
 8003950:	f001 fe42 	bl	80055d8 <Altitude_Offset>
   HAL_Delay(1000);
 8003954:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003958:	f002 fb46 	bl	8005fe8 <HAL_Delay>
   HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);
 800395c:	2110      	movs	r1, #16
 800395e:	487a      	ldr	r0, [pc, #488]	@ (8003b48 <main+0x358>)
 8003960:	f003 fb5b 	bl	800701a <HAL_GPIO_TogglePin>
 //  W25Q_Read(1, 0,  256, test);



 //  W25Q_Read(1, 0, sizeof(flash_accX), flash_accX);
   buzzer_short = 0;
 8003964:	4b8e      	ldr	r3, [pc, #568]	@ (8003ba0 <main+0x3b0>)
 8003966:	2200      	movs	r2, #0
 8003968:	601a      	str	r2, [r3, #0]
  while (1)
  {

/********************* Sensor Ölçüm **************************************************/

	  if(sensor_flag == 1)
 800396a:	4b8e      	ldr	r3, [pc, #568]	@ (8003ba4 <main+0x3b4>)
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	2b01      	cmp	r3, #1
 8003970:	f040 8426 	bne.w	80041c0 <main+0x9d0>
	  {
	      sensor_flag = 0;
 8003974:	4b8b      	ldr	r3, [pc, #556]	@ (8003ba4 <main+0x3b4>)
 8003976:	2200      	movs	r2, #0
 8003978:	701a      	strb	r2, [r3, #0]
	      prev_alt = altitude;
 800397a:	4b8b      	ldr	r3, [pc, #556]	@ (8003ba8 <main+0x3b8>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a8b      	ldr	r2, [pc, #556]	@ (8003bac <main+0x3bc>)
 8003980:	6013      	str	r3, [r2, #0]
	      rslt = bme280_set_sensor_mode(BME280_FORCED_MODE, &dev);
 8003982:	4982      	ldr	r1, [pc, #520]	@ (8003b8c <main+0x39c>)
 8003984:	2001      	movs	r0, #1
 8003986:	f7fd fcde 	bl	8001346 <bme280_set_sensor_mode>
 800398a:	4603      	mov	r3, r0
 800398c:	461a      	mov	r2, r3
 800398e:	4b83      	ldr	r3, [pc, #524]	@ (8003b9c <main+0x3ac>)
 8003990:	701a      	strb	r2, [r3, #0]
	      rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 8003992:	4a7e      	ldr	r2, [pc, #504]	@ (8003b8c <main+0x39c>)
 8003994:	4986      	ldr	r1, [pc, #536]	@ (8003bb0 <main+0x3c0>)
 8003996:	2007      	movs	r0, #7
 8003998:	f7fd fd51 	bl	800143e <bme280_get_sensor_data>
 800399c:	4603      	mov	r3, r0
 800399e:	461a      	mov	r2, r3
 80039a0:	4b7e      	ldr	r3, [pc, #504]	@ (8003b9c <main+0x3ac>)
 80039a2:	701a      	strb	r2, [r3, #0]



	      LSM6DSLTR_Read_Accel_Data(&Lsm_Sensor);
 80039a4:	4883      	ldr	r0, [pc, #524]	@ (8003bb4 <main+0x3c4>)
 80039a6:	f7fe ff0f 	bl	80027c8 <LSM6DSLTR_Read_Accel_Data>
	      LSM6DSLTR_Read_Gyro_Data(&Lsm_Sensor);
 80039aa:	4882      	ldr	r0, [pc, #520]	@ (8003bb4 <main+0x3c4>)
 80039ac:	f7fe ffe6 	bl	800297c <LSM6DSLTR_Read_Gyro_Data>

	      toplam_pitch += (-Lsm_Sensor.Pitch);
 80039b0:	4b80      	ldr	r3, [pc, #512]	@ (8003bb4 <main+0x3c4>)
 80039b2:	edd3 7a07 	vldr	s15, [r3, #28]
 80039b6:	eeb1 7a67 	vneg.f32	s14, s15
 80039ba:	4b7f      	ldr	r3, [pc, #508]	@ (8003bb8 <main+0x3c8>)
 80039bc:	edd3 7a00 	vldr	s15, [r3]
 80039c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039c4:	4b7c      	ldr	r3, [pc, #496]	@ (8003bb8 <main+0x3c8>)
 80039c6:	edc3 7a00 	vstr	s15, [r3]
	      toplam_roll += Lsm_Sensor.Roll;
 80039ca:	4b7a      	ldr	r3, [pc, #488]	@ (8003bb4 <main+0x3c4>)
 80039cc:	ed93 7a06 	vldr	s14, [r3, #24]
 80039d0:	4b7a      	ldr	r3, [pc, #488]	@ (8003bbc <main+0x3cc>)
 80039d2:	edd3 7a00 	vldr	s15, [r3]
 80039d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039da:	4b78      	ldr	r3, [pc, #480]	@ (8003bbc <main+0x3cc>)
 80039dc:	edc3 7a00 	vstr	s15, [r3]
	      toplam_accX += Lsm_Sensor.Accel_X;
 80039e0:	4b74      	ldr	r3, [pc, #464]	@ (8003bb4 <main+0x3c4>)
 80039e2:	ed93 7a00 	vldr	s14, [r3]
 80039e6:	4b76      	ldr	r3, [pc, #472]	@ (8003bc0 <main+0x3d0>)
 80039e8:	edd3 7a00 	vldr	s15, [r3]
 80039ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039f0:	4b73      	ldr	r3, [pc, #460]	@ (8003bc0 <main+0x3d0>)
 80039f2:	edc3 7a00 	vstr	s15, [r3]
	      toplam_accY += Lsm_Sensor.Accel_Y;
 80039f6:	4b6f      	ldr	r3, [pc, #444]	@ (8003bb4 <main+0x3c4>)
 80039f8:	ed93 7a01 	vldr	s14, [r3, #4]
 80039fc:	4b71      	ldr	r3, [pc, #452]	@ (8003bc4 <main+0x3d4>)
 80039fe:	edd3 7a00 	vldr	s15, [r3]
 8003a02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a06:	4b6f      	ldr	r3, [pc, #444]	@ (8003bc4 <main+0x3d4>)
 8003a08:	edc3 7a00 	vstr	s15, [r3]
	      toplam_accZ += Lsm_Sensor.Accel_Z;
 8003a0c:	4b69      	ldr	r3, [pc, #420]	@ (8003bb4 <main+0x3c4>)
 8003a0e:	ed93 7a02 	vldr	s14, [r3, #8]
 8003a12:	4b6d      	ldr	r3, [pc, #436]	@ (8003bc8 <main+0x3d8>)
 8003a14:	edd3 7a00 	vldr	s15, [r3]
 8003a18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a1c:	4b6a      	ldr	r3, [pc, #424]	@ (8003bc8 <main+0x3d8>)
 8003a1e:	edc3 7a00 	vstr	s15, [r3]
	      toplam_gX += Lsm_Sensor.Gyro_X ;
 8003a22:	4b64      	ldr	r3, [pc, #400]	@ (8003bb4 <main+0x3c4>)
 8003a24:	ed93 7a03 	vldr	s14, [r3, #12]
 8003a28:	4b68      	ldr	r3, [pc, #416]	@ (8003bcc <main+0x3dc>)
 8003a2a:	edd3 7a00 	vldr	s15, [r3]
 8003a2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a32:	4b66      	ldr	r3, [pc, #408]	@ (8003bcc <main+0x3dc>)
 8003a34:	edc3 7a00 	vstr	s15, [r3]
	      toplam_gY += Lsm_Sensor.Gyro_Y ;
 8003a38:	4b5e      	ldr	r3, [pc, #376]	@ (8003bb4 <main+0x3c4>)
 8003a3a:	ed93 7a04 	vldr	s14, [r3, #16]
 8003a3e:	4b64      	ldr	r3, [pc, #400]	@ (8003bd0 <main+0x3e0>)
 8003a40:	edd3 7a00 	vldr	s15, [r3]
 8003a44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a48:	4b61      	ldr	r3, [pc, #388]	@ (8003bd0 <main+0x3e0>)
 8003a4a:	edc3 7a00 	vstr	s15, [r3]
	      toplam_gZ += Lsm_Sensor.Gyro_Z ;
 8003a4e:	4b59      	ldr	r3, [pc, #356]	@ (8003bb4 <main+0x3c4>)
 8003a50:	ed93 7a05 	vldr	s14, [r3, #20]
 8003a54:	4b5f      	ldr	r3, [pc, #380]	@ (8003bd4 <main+0x3e4>)
 8003a56:	edd3 7a00 	vldr	s15, [r3]
 8003a5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a5e:	4b5d      	ldr	r3, [pc, #372]	@ (8003bd4 <main+0x3e4>)
 8003a60:	edc3 7a00 	vstr	s15, [r3]


	      sensor_counter++;
 8003a64:	4b5c      	ldr	r3, [pc, #368]	@ (8003bd8 <main+0x3e8>)
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	3301      	adds	r3, #1
 8003a6a:	b2da      	uxtb	r2, r3
 8003a6c:	4b5a      	ldr	r3, [pc, #360]	@ (8003bd8 <main+0x3e8>)
 8003a6e:	701a      	strb	r2, [r3, #0]
	      if(sensor_counter == 10)
 8003a70:	4b59      	ldr	r3, [pc, #356]	@ (8003bd8 <main+0x3e8>)
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	2b0a      	cmp	r3, #10
 8003a76:	f040 8391 	bne.w	800419c <main+0x9ac>
	      {

		      if(rslt == BME280_OK )
 8003a7a:	4b48      	ldr	r3, [pc, #288]	@ (8003b9c <main+0x3ac>)
 8003a7c:	f993 3000 	ldrsb.w	r3, [r3]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d157      	bne.n	8003b34 <main+0x344>
		      {
		          temperature = comp_data.temperature / 100.00;
 8003a84:	4b4a      	ldr	r3, [pc, #296]	@ (8003bb0 <main+0x3c0>)
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7fc fd63 	bl	8000554 <__aeabi_i2d>
 8003a8e:	f04f 0200 	mov.w	r2, #0
 8003a92:	4b52      	ldr	r3, [pc, #328]	@ (8003bdc <main+0x3ec>)
 8003a94:	f7fc fef2 	bl	800087c <__aeabi_ddiv>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	4610      	mov	r0, r2
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	f7fd f8ba 	bl	8000c18 <__aeabi_d2f>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	4a4e      	ldr	r2, [pc, #312]	@ (8003be0 <main+0x3f0>)
 8003aa8:	6013      	str	r3, [r2, #0]
		          humidity = comp_data.humidity;
 8003aaa:	4b41      	ldr	r3, [pc, #260]	@ (8003bb0 <main+0x3c0>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	ee07 3a90 	vmov	s15, r3
 8003ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ab6:	4b4b      	ldr	r3, [pc, #300]	@ (8003be4 <main+0x3f4>)
 8003ab8:	edc3 7a00 	vstr	s15, [r3]
		          pressure = comp_data.pressure;
 8003abc:	4b3c      	ldr	r3, [pc, #240]	@ (8003bb0 <main+0x3c0>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	ee07 3a90 	vmov	s15, r3
 8003ac4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ac8:	4b47      	ldr	r3, [pc, #284]	@ (8003be8 <main+0x3f8>)
 8003aca:	edc3 7a00 	vstr	s15, [r3]
		          altitude = BME280_Get_Altitude() - offset_altitude;
 8003ace:	f001 fad3 	bl	8005078 <BME280_Get_Altitude>
 8003ad2:	eeb0 7a40 	vmov.f32	s14, s0
 8003ad6:	4b45      	ldr	r3, [pc, #276]	@ (8003bec <main+0x3fc>)
 8003ad8:	edd3 7a00 	vldr	s15, [r3]
 8003adc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ae0:	4b31      	ldr	r3, [pc, #196]	@ (8003ba8 <main+0x3b8>)
 8003ae2:	edc3 7a00 	vstr	s15, [r3]
		          altitude_kalman = KalmanFilter_Update(&kf, altitude);
 8003ae6:	4b30      	ldr	r3, [pc, #192]	@ (8003ba8 <main+0x3b8>)
 8003ae8:	edd3 7a00 	vldr	s15, [r3]
 8003aec:	eeb0 0a67 	vmov.f32	s0, s15
 8003af0:	483f      	ldr	r0, [pc, #252]	@ (8003bf0 <main+0x400>)
 8003af2:	f7fe ffdd 	bl	8002ab0 <KalmanFilter_Update>
 8003af6:	eef0 7a40 	vmov.f32	s15, s0
 8003afa:	4b3e      	ldr	r3, [pc, #248]	@ (8003bf4 <main+0x404>)
 8003afc:	edc3 7a00 	vstr	s15, [r3]
		          speed = (altitude - prev_alt) * 3.33;
 8003b00:	4b29      	ldr	r3, [pc, #164]	@ (8003ba8 <main+0x3b8>)
 8003b02:	ed93 7a00 	vldr	s14, [r3]
 8003b06:	4b29      	ldr	r3, [pc, #164]	@ (8003bac <main+0x3bc>)
 8003b08:	edd3 7a00 	vldr	s15, [r3]
 8003b0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b10:	ee17 0a90 	vmov	r0, s15
 8003b14:	f7fc fd30 	bl	8000578 <__aeabi_f2d>
 8003b18:	a309      	add	r3, pc, #36	@ (adr r3, 8003b40 <main+0x350>)
 8003b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b1e:	f7fc fd83 	bl	8000628 <__aeabi_dmul>
 8003b22:	4602      	mov	r2, r0
 8003b24:	460b      	mov	r3, r1
 8003b26:	4610      	mov	r0, r2
 8003b28:	4619      	mov	r1, r3
 8003b2a:	f7fd f875 	bl	8000c18 <__aeabi_d2f>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	4a31      	ldr	r2, [pc, #196]	@ (8003bf8 <main+0x408>)
 8003b32:	6013      	str	r3, [r2, #0]
				  // High pass filter for gyroscope data
//			  filtered_gyro_HP_X = HP_alpha * (gyroX_HP_prev + toplam_gX/10.0f - gyroX_HP_prev);
//			  filtered_gyro_HP_Y = HP_alpha * (gyroY_HP_prev + toplam_gY/10.0f - gyroY_HP_prev);
//			  filtered_gyro_HP_Z = HP_alpha * (gyroZ_HP_prev + toplam_gZ/10.0f - gyroZ_HP_prev);

			  filtered_gyro_LP[0] = LP_alpha * toplam_gX/10.0f + (1.0 - LP_alpha) * gyroX_LP_prev;
 8003b34:	4b25      	ldr	r3, [pc, #148]	@ (8003bcc <main+0x3dc>)
 8003b36:	edd3 7a00 	vldr	s15, [r3]
 8003b3a:	e061      	b.n	8003c00 <main+0x410>
 8003b3c:	f3af 8000 	nop.w
 8003b40:	0a3d70a4 	.word	0x0a3d70a4
 8003b44:	400aa3d7 	.word	0x400aa3d7
 8003b48:	40020800 	.word	0x40020800
 8003b4c:	40020400 	.word	0x40020400
 8003b50:	20000639 	.word	0x20000639
 8003b54:	200004bc 	.word	0x200004bc
 8003b58:	200005aa 	.word	0x200005aa
 8003b5c:	20000544 	.word	0x20000544
 8003b60:	20000430 	.word	0x20000430
 8003b64:	200003e8 	.word	0x200003e8
 8003b68:	20000358 	.word	0x20000358
 8003b6c:	200003a0 	.word	0x200003a0
 8003b70:	20002428 	.word	0x20002428
 8003b74:	200024b8 	.word	0x200024b8
 8003b78:	20002470 	.word	0x20002470
 8003b7c:	20002500 	.word	0x20002500
 8003b80:	20002548 	.word	0x20002548
 8003b84:	20002350 	.word	0x20002350
 8003b88:	2000021c 	.word	0x2000021c
 8003b8c:	20002590 	.word	0x20002590
 8003b90:	08005169 	.word	0x08005169
 8003b94:	080051f1 	.word	0x080051f1
 8003b98:	080051d9 	.word	0x080051d9
 8003b9c:	200025dc 	.word	0x200025dc
 8003ba0:	20000640 	.word	0x20000640
 8003ba4:	20002297 	.word	0x20002297
 8003ba8:	200022a4 	.word	0x200022a4
 8003bac:	200022b4 	.word	0x200022b4
 8003bb0:	200025d0 	.word	0x200025d0
 8003bb4:	20002400 	.word	0x20002400
 8003bb8:	200022cc 	.word	0x200022cc
 8003bbc:	200022d0 	.word	0x200022d0
 8003bc0:	200022d4 	.word	0x200022d4
 8003bc4:	200022d8 	.word	0x200022d8
 8003bc8:	200022dc 	.word	0x200022dc
 8003bcc:	200022e0 	.word	0x200022e0
 8003bd0:	200022e4 	.word	0x200022e4
 8003bd4:	200022e8 	.word	0x200022e8
 8003bd8:	20002334 	.word	0x20002334
 8003bdc:	40590000 	.word	0x40590000
 8003be0:	2000229c 	.word	0x2000229c
 8003be4:	200022a0 	.word	0x200022a0
 8003be8:	200022ac 	.word	0x200022ac
 8003bec:	200022a8 	.word	0x200022a8
 8003bf0:	20002338 	.word	0x20002338
 8003bf4:	200022c0 	.word	0x200022c0
 8003bf8:	200022b8 	.word	0x200022b8
 8003bfc:	3f0ccccd 	.word	0x3f0ccccd
 8003c00:	ed1f 7a02 	vldr	s14, [pc, #-8]	@ 8003bfc <main+0x40c>
 8003c04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c08:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8003c0c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003c10:	ee16 0a90 	vmov	r0, s13
 8003c14:	f7fc fcb0 	bl	8000578 <__aeabi_f2d>
 8003c18:	4604      	mov	r4, r0
 8003c1a:	460d      	mov	r5, r1
 8003c1c:	4bce      	ldr	r3, [pc, #824]	@ (8003f58 <main+0x768>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7fc fca9 	bl	8000578 <__aeabi_f2d>
 8003c26:	a3c6      	add	r3, pc, #792	@ (adr r3, 8003f40 <main+0x750>)
 8003c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c2c:	f7fc fcfc 	bl	8000628 <__aeabi_dmul>
 8003c30:	4602      	mov	r2, r0
 8003c32:	460b      	mov	r3, r1
 8003c34:	4620      	mov	r0, r4
 8003c36:	4629      	mov	r1, r5
 8003c38:	f7fc fb40 	bl	80002bc <__adddf3>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	460b      	mov	r3, r1
 8003c40:	4610      	mov	r0, r2
 8003c42:	4619      	mov	r1, r3
 8003c44:	f7fc ffe8 	bl	8000c18 <__aeabi_d2f>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	4ac4      	ldr	r2, [pc, #784]	@ (8003f5c <main+0x76c>)
 8003c4c:	6013      	str	r3, [r2, #0]
			  filtered_gyro_LP[1] = LP_alpha * toplam_gY/10.0f + (1.0 - LP_alpha) * gyroY_LP_prev ;
 8003c4e:	4bc4      	ldr	r3, [pc, #784]	@ (8003f60 <main+0x770>)
 8003c50:	edd3 7a00 	vldr	s15, [r3]
 8003c54:	ed9f 7ac3 	vldr	s14, [pc, #780]	@ 8003f64 <main+0x774>
 8003c58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c5c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8003c60:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003c64:	ee16 0a90 	vmov	r0, s13
 8003c68:	f7fc fc86 	bl	8000578 <__aeabi_f2d>
 8003c6c:	4604      	mov	r4, r0
 8003c6e:	460d      	mov	r5, r1
 8003c70:	4bbd      	ldr	r3, [pc, #756]	@ (8003f68 <main+0x778>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7fc fc7f 	bl	8000578 <__aeabi_f2d>
 8003c7a:	a3b1      	add	r3, pc, #708	@ (adr r3, 8003f40 <main+0x750>)
 8003c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c80:	f7fc fcd2 	bl	8000628 <__aeabi_dmul>
 8003c84:	4602      	mov	r2, r0
 8003c86:	460b      	mov	r3, r1
 8003c88:	4620      	mov	r0, r4
 8003c8a:	4629      	mov	r1, r5
 8003c8c:	f7fc fb16 	bl	80002bc <__adddf3>
 8003c90:	4602      	mov	r2, r0
 8003c92:	460b      	mov	r3, r1
 8003c94:	4610      	mov	r0, r2
 8003c96:	4619      	mov	r1, r3
 8003c98:	f7fc ffbe 	bl	8000c18 <__aeabi_d2f>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	4aaf      	ldr	r2, [pc, #700]	@ (8003f5c <main+0x76c>)
 8003ca0:	6053      	str	r3, [r2, #4]
			  filtered_gyro_LP[2] = LP_alpha * toplam_gZ/10.0f + (1.0 - LP_alpha) * gyroZ_LP_prev;
 8003ca2:	4bb2      	ldr	r3, [pc, #712]	@ (8003f6c <main+0x77c>)
 8003ca4:	edd3 7a00 	vldr	s15, [r3]
 8003ca8:	ed9f 7aae 	vldr	s14, [pc, #696]	@ 8003f64 <main+0x774>
 8003cac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003cb0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8003cb4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003cb8:	ee16 0a90 	vmov	r0, s13
 8003cbc:	f7fc fc5c 	bl	8000578 <__aeabi_f2d>
 8003cc0:	4604      	mov	r4, r0
 8003cc2:	460d      	mov	r5, r1
 8003cc4:	4baa      	ldr	r3, [pc, #680]	@ (8003f70 <main+0x780>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7fc fc55 	bl	8000578 <__aeabi_f2d>
 8003cce:	a39c      	add	r3, pc, #624	@ (adr r3, 8003f40 <main+0x750>)
 8003cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd4:	f7fc fca8 	bl	8000628 <__aeabi_dmul>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	460b      	mov	r3, r1
 8003cdc:	4620      	mov	r0, r4
 8003cde:	4629      	mov	r1, r5
 8003ce0:	f7fc faec 	bl	80002bc <__adddf3>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	4610      	mov	r0, r2
 8003cea:	4619      	mov	r1, r3
 8003cec:	f7fc ff94 	bl	8000c18 <__aeabi_d2f>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	4a9a      	ldr	r2, [pc, #616]	@ (8003f5c <main+0x76c>)
 8003cf4:	6093      	str	r3, [r2, #8]

			/***************************Silinebilir ********************************/
			  filtered_gyro_HP_X = beta * (gyroX_HP_prev +  filtered_gyro_LP[0] - gyroX_LP_prev);
 8003cf6:	4b99      	ldr	r3, [pc, #612]	@ (8003f5c <main+0x76c>)
 8003cf8:	ed93 7a00 	vldr	s14, [r3]
 8003cfc:	4b9d      	ldr	r3, [pc, #628]	@ (8003f74 <main+0x784>)
 8003cfe:	edd3 7a00 	vldr	s15, [r3]
 8003d02:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d06:	4b94      	ldr	r3, [pc, #592]	@ (8003f58 <main+0x768>)
 8003d08:	edd3 7a00 	vldr	s15, [r3]
 8003d0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d10:	ee17 0a90 	vmov	r0, s15
 8003d14:	f7fc fc30 	bl	8000578 <__aeabi_f2d>
 8003d18:	a38b      	add	r3, pc, #556	@ (adr r3, 8003f48 <main+0x758>)
 8003d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d1e:	f7fc fc83 	bl	8000628 <__aeabi_dmul>
 8003d22:	4602      	mov	r2, r0
 8003d24:	460b      	mov	r3, r1
 8003d26:	4610      	mov	r0, r2
 8003d28:	4619      	mov	r1, r3
 8003d2a:	f7fc ff75 	bl	8000c18 <__aeabi_d2f>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	4a91      	ldr	r2, [pc, #580]	@ (8003f78 <main+0x788>)
 8003d32:	6013      	str	r3, [r2, #0]
			  filtered_gyro_HP_Y = beta * (gyroY_HP_prev + filtered_gyro_LP[1] - gyroY_LP_prev);
 8003d34:	4b89      	ldr	r3, [pc, #548]	@ (8003f5c <main+0x76c>)
 8003d36:	ed93 7a01 	vldr	s14, [r3, #4]
 8003d3a:	4b90      	ldr	r3, [pc, #576]	@ (8003f7c <main+0x78c>)
 8003d3c:	edd3 7a00 	vldr	s15, [r3]
 8003d40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d44:	4b88      	ldr	r3, [pc, #544]	@ (8003f68 <main+0x778>)
 8003d46:	edd3 7a00 	vldr	s15, [r3]
 8003d4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d4e:	ee17 0a90 	vmov	r0, s15
 8003d52:	f7fc fc11 	bl	8000578 <__aeabi_f2d>
 8003d56:	a37c      	add	r3, pc, #496	@ (adr r3, 8003f48 <main+0x758>)
 8003d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d5c:	f7fc fc64 	bl	8000628 <__aeabi_dmul>
 8003d60:	4602      	mov	r2, r0
 8003d62:	460b      	mov	r3, r1
 8003d64:	4610      	mov	r0, r2
 8003d66:	4619      	mov	r1, r3
 8003d68:	f7fc ff56 	bl	8000c18 <__aeabi_d2f>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	4a84      	ldr	r2, [pc, #528]	@ (8003f80 <main+0x790>)
 8003d70:	6013      	str	r3, [r2, #0]
			  filtered_gyro_HP_Z = beta * (gyroZ_HP_prev +  filtered_gyro_LP[2] - gyroZ_LP_prev);
 8003d72:	4b7a      	ldr	r3, [pc, #488]	@ (8003f5c <main+0x76c>)
 8003d74:	ed93 7a02 	vldr	s14, [r3, #8]
 8003d78:	4b82      	ldr	r3, [pc, #520]	@ (8003f84 <main+0x794>)
 8003d7a:	edd3 7a00 	vldr	s15, [r3]
 8003d7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d82:	4b7b      	ldr	r3, [pc, #492]	@ (8003f70 <main+0x780>)
 8003d84:	edd3 7a00 	vldr	s15, [r3]
 8003d88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d8c:	ee17 0a90 	vmov	r0, s15
 8003d90:	f7fc fbf2 	bl	8000578 <__aeabi_f2d>
 8003d94:	a36c      	add	r3, pc, #432	@ (adr r3, 8003f48 <main+0x758>)
 8003d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d9a:	f7fc fc45 	bl	8000628 <__aeabi_dmul>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	460b      	mov	r3, r1
 8003da2:	4610      	mov	r0, r2
 8003da4:	4619      	mov	r1, r3
 8003da6:	f7fc ff37 	bl	8000c18 <__aeabi_d2f>
 8003daa:	4603      	mov	r3, r0
 8003dac:	4a76      	ldr	r2, [pc, #472]	@ (8003f88 <main+0x798>)
 8003dae:	6013      	str	r3, [r2, #0]


			  gyroX_LP_prev =  filtered_gyro_LP[0];
 8003db0:	4b6a      	ldr	r3, [pc, #424]	@ (8003f5c <main+0x76c>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a68      	ldr	r2, [pc, #416]	@ (8003f58 <main+0x768>)
 8003db6:	6013      	str	r3, [r2, #0]
			  gyroY_LP_prev =  filtered_gyro_LP[1];
 8003db8:	4b68      	ldr	r3, [pc, #416]	@ (8003f5c <main+0x76c>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	4a6a      	ldr	r2, [pc, #424]	@ (8003f68 <main+0x778>)
 8003dbe:	6013      	str	r3, [r2, #0]
			  gyroZ_LP_prev =  filtered_gyro_LP[2];
 8003dc0:	4b66      	ldr	r3, [pc, #408]	@ (8003f5c <main+0x76c>)
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	4a6a      	ldr	r2, [pc, #424]	@ (8003f70 <main+0x780>)
 8003dc6:	6013      	str	r3, [r2, #0]

			  // Low pass filter for accelerometer data
			  filtered_acc_LP[0] = LP_alpha * filtered_acc_LP[0] + (1 - LP_alpha) *  toplam_accX / 10.0;
 8003dc8:	4b70      	ldr	r3, [pc, #448]	@ (8003f8c <main+0x79c>)
 8003dca:	edd3 7a00 	vldr	s15, [r3]
 8003dce:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 8003f64 <main+0x774>
 8003dd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003dd6:	ee17 0a90 	vmov	r0, s15
 8003dda:	f7fc fbcd 	bl	8000578 <__aeabi_f2d>
 8003dde:	4604      	mov	r4, r0
 8003de0:	460d      	mov	r5, r1
 8003de2:	4b6b      	ldr	r3, [pc, #428]	@ (8003f90 <main+0x7a0>)
 8003de4:	edd3 7a00 	vldr	s15, [r3]
 8003de8:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 8003f94 <main+0x7a4>
 8003dec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003df0:	ee17 0a90 	vmov	r0, s15
 8003df4:	f7fc fbc0 	bl	8000578 <__aeabi_f2d>
 8003df8:	f04f 0200 	mov.w	r2, #0
 8003dfc:	4b66      	ldr	r3, [pc, #408]	@ (8003f98 <main+0x7a8>)
 8003dfe:	f7fc fd3d 	bl	800087c <__aeabi_ddiv>
 8003e02:	4602      	mov	r2, r0
 8003e04:	460b      	mov	r3, r1
 8003e06:	4620      	mov	r0, r4
 8003e08:	4629      	mov	r1, r5
 8003e0a:	f7fc fa57 	bl	80002bc <__adddf3>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	460b      	mov	r3, r1
 8003e12:	4610      	mov	r0, r2
 8003e14:	4619      	mov	r1, r3
 8003e16:	f7fc feff 	bl	8000c18 <__aeabi_d2f>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	4a5b      	ldr	r2, [pc, #364]	@ (8003f8c <main+0x79c>)
 8003e1e:	6013      	str	r3, [r2, #0]
			  filtered_acc_LP[1] = LP_alpha * filtered_acc_LP[1] + (1 - LP_alpha) *  toplam_accY / 10.0;
 8003e20:	4b5a      	ldr	r3, [pc, #360]	@ (8003f8c <main+0x79c>)
 8003e22:	edd3 7a01 	vldr	s15, [r3, #4]
 8003e26:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8003f64 <main+0x774>
 8003e2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e2e:	ee17 0a90 	vmov	r0, s15
 8003e32:	f7fc fba1 	bl	8000578 <__aeabi_f2d>
 8003e36:	4604      	mov	r4, r0
 8003e38:	460d      	mov	r5, r1
 8003e3a:	4b58      	ldr	r3, [pc, #352]	@ (8003f9c <main+0x7ac>)
 8003e3c:	edd3 7a00 	vldr	s15, [r3]
 8003e40:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8003f94 <main+0x7a4>
 8003e44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e48:	ee17 0a90 	vmov	r0, s15
 8003e4c:	f7fc fb94 	bl	8000578 <__aeabi_f2d>
 8003e50:	f04f 0200 	mov.w	r2, #0
 8003e54:	4b50      	ldr	r3, [pc, #320]	@ (8003f98 <main+0x7a8>)
 8003e56:	f7fc fd11 	bl	800087c <__aeabi_ddiv>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	4620      	mov	r0, r4
 8003e60:	4629      	mov	r1, r5
 8003e62:	f7fc fa2b 	bl	80002bc <__adddf3>
 8003e66:	4602      	mov	r2, r0
 8003e68:	460b      	mov	r3, r1
 8003e6a:	4610      	mov	r0, r2
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	f7fc fed3 	bl	8000c18 <__aeabi_d2f>
 8003e72:	4603      	mov	r3, r0
 8003e74:	4a45      	ldr	r2, [pc, #276]	@ (8003f8c <main+0x79c>)
 8003e76:	6053      	str	r3, [r2, #4]
			  filtered_acc_LP[2] = LP_alpha * filtered_acc_LP[2] + (1 - LP_alpha) *  toplam_accZ / 10.0;
 8003e78:	4b44      	ldr	r3, [pc, #272]	@ (8003f8c <main+0x79c>)
 8003e7a:	edd3 7a02 	vldr	s15, [r3, #8]
 8003e7e:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8003f64 <main+0x774>
 8003e82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e86:	ee17 0a90 	vmov	r0, s15
 8003e8a:	f7fc fb75 	bl	8000578 <__aeabi_f2d>
 8003e8e:	4604      	mov	r4, r0
 8003e90:	460d      	mov	r5, r1
 8003e92:	4b43      	ldr	r3, [pc, #268]	@ (8003fa0 <main+0x7b0>)
 8003e94:	edd3 7a00 	vldr	s15, [r3]
 8003e98:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8003f94 <main+0x7a4>
 8003e9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ea0:	ee17 0a90 	vmov	r0, s15
 8003ea4:	f7fc fb68 	bl	8000578 <__aeabi_f2d>
 8003ea8:	f04f 0200 	mov.w	r2, #0
 8003eac:	4b3a      	ldr	r3, [pc, #232]	@ (8003f98 <main+0x7a8>)
 8003eae:	f7fc fce5 	bl	800087c <__aeabi_ddiv>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	4620      	mov	r0, r4
 8003eb8:	4629      	mov	r1, r5
 8003eba:	f7fc f9ff 	bl	80002bc <__adddf3>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	4610      	mov	r0, r2
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	f7fc fea7 	bl	8000c18 <__aeabi_d2f>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	4a2f      	ldr	r2, [pc, #188]	@ (8003f8c <main+0x79c>)
 8003ece:	6093      	str	r3, [r2, #8]

			  gyroX_HP_prev = filtered_gyro_HP_X;
 8003ed0:	4b29      	ldr	r3, [pc, #164]	@ (8003f78 <main+0x788>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a27      	ldr	r2, [pc, #156]	@ (8003f74 <main+0x784>)
 8003ed6:	6013      	str	r3, [r2, #0]
			  gyroY_HP_prev = filtered_gyro_HP_Y;
 8003ed8:	4b29      	ldr	r3, [pc, #164]	@ (8003f80 <main+0x790>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a27      	ldr	r2, [pc, #156]	@ (8003f7c <main+0x78c>)
 8003ede:	6013      	str	r3, [r2, #0]
			  gyroZ_HP_prev = filtered_gyro_HP_Z;
 8003ee0:	4b29      	ldr	r3, [pc, #164]	@ (8003f88 <main+0x798>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a27      	ldr	r2, [pc, #156]	@ (8003f84 <main+0x794>)
 8003ee6:	6013      	str	r3, [r2, #0]


			  real_roll = atan2f(filtered_acc_LP[1], sqrtf(filtered_acc_LP[0] * filtered_acc_LP[0] + filtered_acc_LP[2] * filtered_acc_LP[2] +  1e-10)) * 180.0f / 3.14;
 8003ee8:	4b28      	ldr	r3, [pc, #160]	@ (8003f8c <main+0x79c>)
 8003eea:	ed93 8a01 	vldr	s16, [r3, #4]
 8003eee:	4b27      	ldr	r3, [pc, #156]	@ (8003f8c <main+0x79c>)
 8003ef0:	ed93 7a00 	vldr	s14, [r3]
 8003ef4:	4b25      	ldr	r3, [pc, #148]	@ (8003f8c <main+0x79c>)
 8003ef6:	edd3 7a00 	vldr	s15, [r3]
 8003efa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003efe:	4b23      	ldr	r3, [pc, #140]	@ (8003f8c <main+0x79c>)
 8003f00:	edd3 6a02 	vldr	s13, [r3, #8]
 8003f04:	4b21      	ldr	r3, [pc, #132]	@ (8003f8c <main+0x79c>)
 8003f06:	edd3 7a02 	vldr	s15, [r3, #8]
 8003f0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f12:	ee17 0a90 	vmov	r0, s15
 8003f16:	f7fc fb2f 	bl	8000578 <__aeabi_f2d>
 8003f1a:	a30d      	add	r3, pc, #52	@ (adr r3, 8003f50 <main+0x760>)
 8003f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f20:	f7fc f9cc 	bl	80002bc <__adddf3>
 8003f24:	4602      	mov	r2, r0
 8003f26:	460b      	mov	r3, r1
 8003f28:	4610      	mov	r0, r2
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	f7fc fe74 	bl	8000c18 <__aeabi_d2f>
 8003f30:	4603      	mov	r3, r0
 8003f32:	ee00 3a10 	vmov	s0, r3
 8003f36:	f009 fff9 	bl	800df2c <sqrtf>
 8003f3a:	eef0 7a40 	vmov.f32	s15, s0
 8003f3e:	e033      	b.n	8003fa8 <main+0x7b8>
 8003f40:	c0000000 	.word	0xc0000000
 8003f44:	3fdccccc 	.word	0x3fdccccc
 8003f48:	33333333 	.word	0x33333333
 8003f4c:	3feb3333 	.word	0x3feb3333
 8003f50:	d9d7bdbb 	.word	0xd9d7bdbb
 8003f54:	3ddb7cdf 	.word	0x3ddb7cdf
 8003f58:	20002318 	.word	0x20002318
 8003f5c:	20002324 	.word	0x20002324
 8003f60:	200022e4 	.word	0x200022e4
 8003f64:	3f0ccccd 	.word	0x3f0ccccd
 8003f68:	2000231c 	.word	0x2000231c
 8003f6c:	200022e8 	.word	0x200022e8
 8003f70:	20002320 	.word	0x20002320
 8003f74:	20002300 	.word	0x20002300
 8003f78:	2000230c 	.word	0x2000230c
 8003f7c:	20002304 	.word	0x20002304
 8003f80:	20002310 	.word	0x20002310
 8003f84:	20002308 	.word	0x20002308
 8003f88:	20002314 	.word	0x20002314
 8003f8c:	200022f0 	.word	0x200022f0
 8003f90:	200022d4 	.word	0x200022d4
 8003f94:	3ee66666 	.word	0x3ee66666
 8003f98:	40240000 	.word	0x40240000
 8003f9c:	200022d8 	.word	0x200022d8
 8003fa0:	200022dc 	.word	0x200022dc
 8003fa4:	43340000 	.word	0x43340000
 8003fa8:	eef0 0a67 	vmov.f32	s1, s15
 8003fac:	eeb0 0a48 	vmov.f32	s0, s16
 8003fb0:	f009 ffba 	bl	800df28 <atan2f>
 8003fb4:	eef0 7a40 	vmov.f32	s15, s0
 8003fb8:	ed1f 7a06 	vldr	s14, [pc, #-24]	@ 8003fa4 <main+0x7b4>
 8003fbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fc0:	ee17 0a90 	vmov	r0, s15
 8003fc4:	f7fc fad8 	bl	8000578 <__aeabi_f2d>
 8003fc8:	a3b7      	add	r3, pc, #732	@ (adr r3, 80042a8 <main+0xab8>)
 8003fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fce:	f7fc fc55 	bl	800087c <__aeabi_ddiv>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	4610      	mov	r0, r2
 8003fd8:	4619      	mov	r1, r3
 8003fda:	f7fc fe1d 	bl	8000c18 <__aeabi_d2f>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	4ab3      	ldr	r2, [pc, #716]	@ (80042b0 <main+0xac0>)
 8003fe2:	6013      	str	r3, [r2, #0]
			  real_pitch = atan2f(-filtered_acc_LP[0], sqrtf(filtered_acc_LP[1] * filtered_acc_LP[1] + filtered_acc_LP[2] * filtered_acc_LP[2]+ 1e-10)) * 180.0f / 3.14;
 8003fe4:	4bb3      	ldr	r3, [pc, #716]	@ (80042b4 <main+0xac4>)
 8003fe6:	edd3 7a00 	vldr	s15, [r3]
 8003fea:	eeb1 8a67 	vneg.f32	s16, s15
 8003fee:	4bb1      	ldr	r3, [pc, #708]	@ (80042b4 <main+0xac4>)
 8003ff0:	ed93 7a01 	vldr	s14, [r3, #4]
 8003ff4:	4baf      	ldr	r3, [pc, #700]	@ (80042b4 <main+0xac4>)
 8003ff6:	edd3 7a01 	vldr	s15, [r3, #4]
 8003ffa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ffe:	4bad      	ldr	r3, [pc, #692]	@ (80042b4 <main+0xac4>)
 8004000:	edd3 6a02 	vldr	s13, [r3, #8]
 8004004:	4bab      	ldr	r3, [pc, #684]	@ (80042b4 <main+0xac4>)
 8004006:	edd3 7a02 	vldr	s15, [r3, #8]
 800400a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800400e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004012:	ee17 0a90 	vmov	r0, s15
 8004016:	f7fc faaf 	bl	8000578 <__aeabi_f2d>
 800401a:	a3a1      	add	r3, pc, #644	@ (adr r3, 80042a0 <main+0xab0>)
 800401c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004020:	f7fc f94c 	bl	80002bc <__adddf3>
 8004024:	4602      	mov	r2, r0
 8004026:	460b      	mov	r3, r1
 8004028:	4610      	mov	r0, r2
 800402a:	4619      	mov	r1, r3
 800402c:	f7fc fdf4 	bl	8000c18 <__aeabi_d2f>
 8004030:	4603      	mov	r3, r0
 8004032:	ee00 3a10 	vmov	s0, r3
 8004036:	f009 ff79 	bl	800df2c <sqrtf>
 800403a:	eef0 7a40 	vmov.f32	s15, s0
 800403e:	eef0 0a67 	vmov.f32	s1, s15
 8004042:	eeb0 0a48 	vmov.f32	s0, s16
 8004046:	f009 ff6f 	bl	800df28 <atan2f>
 800404a:	eef0 7a40 	vmov.f32	s15, s0
 800404e:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 80042b8 <main+0xac8>
 8004052:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004056:	ee17 0a90 	vmov	r0, s15
 800405a:	f7fc fa8d 	bl	8000578 <__aeabi_f2d>
 800405e:	a392      	add	r3, pc, #584	@ (adr r3, 80042a8 <main+0xab8>)
 8004060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004064:	f7fc fc0a 	bl	800087c <__aeabi_ddiv>
 8004068:	4602      	mov	r2, r0
 800406a:	460b      	mov	r3, r1
 800406c:	4610      	mov	r0, r2
 800406e:	4619      	mov	r1, r3
 8004070:	f7fc fdd2 	bl	8000c18 <__aeabi_d2f>
 8004074:	4603      	mov	r3, r0
 8004076:	4a91      	ldr	r2, [pc, #580]	@ (80042bc <main+0xacc>)
 8004078:	6013      	str	r3, [r2, #0]

			  uint32_t current_time = HAL_GetTick(); // current time
 800407a:	f001 ffa9 	bl	8005fd0 <HAL_GetTick>
 800407e:	60f8      	str	r0, [r7, #12]
			  float dt = (current_time - prev_time1) / 1000.0f;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	ee07 3a90 	vmov	s15, r3
 8004086:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800408a:	4b8d      	ldr	r3, [pc, #564]	@ (80042c0 <main+0xad0>)
 800408c:	edd3 7a00 	vldr	s15, [r3]
 8004090:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004094:	eddf 6a8b 	vldr	s13, [pc, #556]	@ 80042c4 <main+0xad4>
 8004098:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800409c:	edc7 7a02 	vstr	s15, [r7, #8]

			  real_roll = ALPHA * (real_roll + filtered_gyro_HP_X * dt) + (1 - ALPHA) * real_roll;
 80040a0:	4b89      	ldr	r3, [pc, #548]	@ (80042c8 <main+0xad8>)
 80040a2:	ed93 7a00 	vldr	s14, [r3]
 80040a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80040aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040ae:	4b80      	ldr	r3, [pc, #512]	@ (80042b0 <main+0xac0>)
 80040b0:	edd3 7a00 	vldr	s15, [r3]
 80040b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040b8:	ed9f 7a84 	vldr	s14, [pc, #528]	@ 80042cc <main+0xadc>
 80040bc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80040c0:	4b7b      	ldr	r3, [pc, #492]	@ (80042b0 <main+0xac0>)
 80040c2:	edd3 7a00 	vldr	s15, [r3]
 80040c6:	eddf 6a82 	vldr	s13, [pc, #520]	@ 80042d0 <main+0xae0>
 80040ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80040ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040d2:	4b77      	ldr	r3, [pc, #476]	@ (80042b0 <main+0xac0>)
 80040d4:	edc3 7a00 	vstr	s15, [r3]
			  real_pitch = ALPHA * (real_pitch + filtered_gyro_HP_Y * dt) + (1 - ALPHA) * real_pitch;
 80040d8:	4b7e      	ldr	r3, [pc, #504]	@ (80042d4 <main+0xae4>)
 80040da:	ed93 7a00 	vldr	s14, [r3]
 80040de:	edd7 7a02 	vldr	s15, [r7, #8]
 80040e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040e6:	4b75      	ldr	r3, [pc, #468]	@ (80042bc <main+0xacc>)
 80040e8:	edd3 7a00 	vldr	s15, [r3]
 80040ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040f0:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 80042cc <main+0xadc>
 80040f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80040f8:	4b70      	ldr	r3, [pc, #448]	@ (80042bc <main+0xacc>)
 80040fa:	edd3 7a00 	vldr	s15, [r3]
 80040fe:	eddf 6a74 	vldr	s13, [pc, #464]	@ 80042d0 <main+0xae0>
 8004102:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004106:	ee77 7a27 	vadd.f32	s15, s14, s15
 800410a:	4b6c      	ldr	r3, [pc, #432]	@ (80042bc <main+0xacc>)
 800410c:	edc3 7a00 	vstr	s15, [r3]

			  prev_time1 = current_time;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	ee07 3a90 	vmov	s15, r3
 8004116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800411a:	4b69      	ldr	r3, [pc, #420]	@ (80042c0 <main+0xad0>)
 800411c:	edc3 7a00 	vstr	s15, [r3]
			  gravity_normal_angle = sqrtf(real_roll * real_roll + real_pitch * real_pitch);
 8004120:	4b63      	ldr	r3, [pc, #396]	@ (80042b0 <main+0xac0>)
 8004122:	ed93 7a00 	vldr	s14, [r3]
 8004126:	4b62      	ldr	r3, [pc, #392]	@ (80042b0 <main+0xac0>)
 8004128:	edd3 7a00 	vldr	s15, [r3]
 800412c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004130:	4b62      	ldr	r3, [pc, #392]	@ (80042bc <main+0xacc>)
 8004132:	edd3 6a00 	vldr	s13, [r3]
 8004136:	4b61      	ldr	r3, [pc, #388]	@ (80042bc <main+0xacc>)
 8004138:	edd3 7a00 	vldr	s15, [r3]
 800413c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004140:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004144:	eeb0 0a67 	vmov.f32	s0, s15
 8004148:	f009 fef0 	bl	800df2c <sqrtf>
 800414c:	eef0 7a40 	vmov.f32	s15, s0
 8004150:	4b61      	ldr	r3, [pc, #388]	@ (80042d8 <main+0xae8>)
 8004152:	edc3 7a00 	vstr	s15, [r3]

			  toplam_roll = 0;
 8004156:	4b61      	ldr	r3, [pc, #388]	@ (80042dc <main+0xaec>)
 8004158:	f04f 0200 	mov.w	r2, #0
 800415c:	601a      	str	r2, [r3, #0]
			  toplam_pitch = 0;
 800415e:	4b60      	ldr	r3, [pc, #384]	@ (80042e0 <main+0xaf0>)
 8004160:	f04f 0200 	mov.w	r2, #0
 8004164:	601a      	str	r2, [r3, #0]
			  toplam_accX = 0;
 8004166:	4b5f      	ldr	r3, [pc, #380]	@ (80042e4 <main+0xaf4>)
 8004168:	f04f 0200 	mov.w	r2, #0
 800416c:	601a      	str	r2, [r3, #0]
			  toplam_accY = 0;
 800416e:	4b5e      	ldr	r3, [pc, #376]	@ (80042e8 <main+0xaf8>)
 8004170:	f04f 0200 	mov.w	r2, #0
 8004174:	601a      	str	r2, [r3, #0]
			  toplam_accZ = 0;
 8004176:	4b5d      	ldr	r3, [pc, #372]	@ (80042ec <main+0xafc>)
 8004178:	f04f 0200 	mov.w	r2, #0
 800417c:	601a      	str	r2, [r3, #0]
			  toplam_gX = 0;
 800417e:	4b5c      	ldr	r3, [pc, #368]	@ (80042f0 <main+0xb00>)
 8004180:	f04f 0200 	mov.w	r2, #0
 8004184:	601a      	str	r2, [r3, #0]
			  toplam_gY = 0;
 8004186:	4b5b      	ldr	r3, [pc, #364]	@ (80042f4 <main+0xb04>)
 8004188:	f04f 0200 	mov.w	r2, #0
 800418c:	601a      	str	r2, [r3, #0]
			  toplam_gZ = 0;
 800418e:	4b5a      	ldr	r3, [pc, #360]	@ (80042f8 <main+0xb08>)
 8004190:	f04f 0200 	mov.w	r2, #0
 8004194:	601a      	str	r2, [r3, #0]
			  sensor_counter = 0;
 8004196:	4b59      	ldr	r3, [pc, #356]	@ (80042fc <main+0xb0c>)
 8004198:	2200      	movs	r2, #0
 800419a:	701a      	strb	r2, [r3, #0]
	      }

	      magnetic_switch = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14);
 800419c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80041a0:	4857      	ldr	r0, [pc, #348]	@ (8004300 <main+0xb10>)
 80041a2:	f002 ff09 	bl	8006fb8 <HAL_GPIO_ReadPin>
 80041a6:	4603      	mov	r3, r0
 80041a8:	461a      	mov	r2, r3
 80041aa:	4b56      	ldr	r3, [pc, #344]	@ (8004304 <main+0xb14>)
 80041ac:	701a      	strb	r2, [r3, #0]
	      BUTTON_STATE = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9);
 80041ae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80041b2:	4853      	ldr	r0, [pc, #332]	@ (8004300 <main+0xb10>)
 80041b4:	f002 ff00 	bl	8006fb8 <HAL_GPIO_ReadPin>
 80041b8:	4603      	mov	r3, r0
 80041ba:	461a      	mov	r2, r3
 80041bc:	4b52      	ldr	r3, [pc, #328]	@ (8004308 <main+0xb18>)
 80041be:	701a      	strb	r2, [r3, #0]
	  }



/********************Lora Ayar ve Gönderme*****************************************************/
	if(lora_flag==1)
 80041c0:	4b52      	ldr	r3, [pc, #328]	@ (800430c <main+0xb1c>)
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d12c      	bne.n	8004222 <main+0xa32>
	{
	    lora_flag=0;
 80041c8:	4b50      	ldr	r3, [pc, #320]	@ (800430c <main+0xb1c>)
 80041ca:	2200      	movs	r2, #0
 80041cc:	701a      	strb	r2, [r3, #0]

		loratx[0]=0x8;
 80041ce:	4b50      	ldr	r3, [pc, #320]	@ (8004310 <main+0xb20>)
 80041d0:	2208      	movs	r2, #8
 80041d2:	701a      	strb	r2, [r3, #0]
		loratx[1]=0x2A;
 80041d4:	4b4e      	ldr	r3, [pc, #312]	@ (8004310 <main+0xb20>)
 80041d6:	222a      	movs	r2, #42	@ 0x2a
 80041d8:	705a      	strb	r2, [r3, #1]
		loratx[2]=0x10;
 80041da:	4b4d      	ldr	r3, [pc, #308]	@ (8004310 <main+0xb20>)
 80041dc:	2210      	movs	r2, #16
 80041de:	709a      	strb	r2, [r3, #2]
		loratx[3]=DEVICE_ID;
 80041e0:	4b4b      	ldr	r3, [pc, #300]	@ (8004310 <main+0xb20>)
 80041e2:	2202      	movs	r2, #2
 80041e4:	70da      	strb	r2, [r3, #3]
		loratx[4]=gps.sats_in_view;
 80041e6:	4b4b      	ldr	r3, [pc, #300]	@ (8004314 <main+0xb24>)
 80041e8:	f893 204d 	ldrb.w	r2, [r3, #77]	@ 0x4d
 80041ec:	4b48      	ldr	r3, [pc, #288]	@ (8004310 <main+0xb20>)
 80041ee:	711a      	strb	r2, [r3, #4]

		union_converter();
 80041f0:	f001 f83a 	bl	8005268 <union_converter>

		loratx[49]=v4_battery;
 80041f4:	4b48      	ldr	r3, [pc, #288]	@ (8004318 <main+0xb28>)
 80041f6:	781a      	ldrb	r2, [r3, #0]
 80041f8:	4b45      	ldr	r3, [pc, #276]	@ (8004310 <main+0xb20>)
 80041fa:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
		loratx[50]=0x31;// v4mod
 80041fe:	4b44      	ldr	r3, [pc, #272]	@ (8004310 <main+0xb20>)
 8004200:	2231      	movs	r2, #49	@ 0x31
 8004202:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
		loratx[51]=magnetic_switch;
 8004206:	4b3f      	ldr	r3, [pc, #252]	@ (8004304 <main+0xb14>)
 8004208:	781a      	ldrb	r2, [r3, #0]
 800420a:	4b41      	ldr	r3, [pc, #260]	@ (8004310 <main+0xb20>)
 800420c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

		////////EGU PART
		EGU_Buff_Load();
 8004210:	f001 f97e 	bl	8005510 <EGU_Buff_Load>

		//HAL_UART_Transmit_IT(&huart3,loratx,sizeof(loratx));
		HAL_UART_Transmit(&huart3,loratx,sizeof(loratx), 1000);
 8004214:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004218:	2246      	movs	r2, #70	@ 0x46
 800421a:	493d      	ldr	r1, [pc, #244]	@ (8004310 <main+0xb20>)
 800421c:	483f      	ldr	r0, [pc, #252]	@ (800431c <main+0xb2c>)
 800421e:	f005 ff20 	bl	800a062 <HAL_UART_Transmit>

	}


/************ EGÜ durum sorgusu gönder **************************************************/
	if(egu_durum_flag==1)
 8004222:	4b3f      	ldr	r3, [pc, #252]	@ (8004320 <main+0xb30>)
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d109      	bne.n	800423e <main+0xa4e>
	{
		egu_durum_flag=0;
 800422a:	4b3d      	ldr	r3, [pc, #244]	@ (8004320 <main+0xb30>)
 800422c:	2200      	movs	r2, #0
 800422e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart6, EGU_durum_sorgusu, 5, 1000);
 8004230:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004234:	2205      	movs	r2, #5
 8004236:	493b      	ldr	r1, [pc, #236]	@ (8004324 <main+0xb34>)
 8004238:	483b      	ldr	r0, [pc, #236]	@ (8004328 <main+0xb38>)
 800423a:	f005 ff12 	bl	800a062 <HAL_UART_Transmit>
	}


/**************************Algoritma****************************************************/
		  switch(SUSTAINER){
 800423e:	4b3b      	ldr	r3, [pc, #236]	@ (800432c <main+0xb3c>)
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	2b06      	cmp	r3, #6
 8004244:	f200 8157 	bhi.w	80044f6 <main+0xd06>
 8004248:	a201      	add	r2, pc, #4	@ (adr r2, 8004250 <main+0xa60>)
 800424a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800424e:	bf00      	nop
 8004250:	0800426d 	.word	0x0800426d
 8004254:	08004291 	.word	0x08004291
 8004258:	08004339 	.word	0x08004339
 800425c:	08004385 	.word	0x08004385
 8004260:	080043d9 	.word	0x080043d9
 8004264:	0800443b 	.word	0x0800443b
 8004268:	080044a1 	.word	0x080044a1

		  case RAMPA:
				v4_mod=1;
 800426c:	4b30      	ldr	r3, [pc, #192]	@ (8004330 <main+0xb40>)
 800426e:	2201      	movs	r2, #1
 8004270:	701a      	strb	r2, [r3, #0]
			  //RAMPA MODU ROKET RAMPADA EGÜ SWİTCHLERİ VE ALT KADEME HABERLE�?ME KONTROL ET

				if(Lsm_Sensor.Accel_X > 5 )
 8004272:	4b30      	ldr	r3, [pc, #192]	@ (8004334 <main+0xb44>)
 8004274:	edd3 7a00 	vldr	s15, [r3]
 8004278:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800427c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004284:	dc00      	bgt.n	8004288 <main+0xa98>
				  {
					SUSTAINER=UCUS_BASLADI;
//					Buzzer(6, 300);
				  }

			  break;
 8004286:	e136      	b.n	80044f6 <main+0xd06>
					SUSTAINER=UCUS_BASLADI;
 8004288:	4b28      	ldr	r3, [pc, #160]	@ (800432c <main+0xb3c>)
 800428a:	2201      	movs	r2, #1
 800428c:	701a      	strb	r2, [r3, #0]
			  break;
 800428e:	e132      	b.n	80044f6 <main+0xd06>

		  case UCUS_BASLADI:
				v4_mod=2;
 8004290:	4b27      	ldr	r3, [pc, #156]	@ (8004330 <main+0xb40>)
 8004292:	2202      	movs	r2, #2
 8004294:	701a      	strb	r2, [r3, #0]
				// FLASH MEMORYE KAYDETMEYE BASLA

				SUSTAINER=KADEMEAYRILDIMI;
 8004296:	4b25      	ldr	r3, [pc, #148]	@ (800432c <main+0xb3c>)
 8004298:	2202      	movs	r2, #2
 800429a:	701a      	strb	r2, [r3, #0]

			 break;
 800429c:	e12b      	b.n	80044f6 <main+0xd06>
 800429e:	bf00      	nop
 80042a0:	d9d7bdbb 	.word	0xd9d7bdbb
 80042a4:	3ddb7cdf 	.word	0x3ddb7cdf
 80042a8:	51eb851f 	.word	0x51eb851f
 80042ac:	40091eb8 	.word	0x40091eb8
 80042b0:	200022c8 	.word	0x200022c8
 80042b4:	200022f0 	.word	0x200022f0
 80042b8:	43340000 	.word	0x43340000
 80042bc:	200022c4 	.word	0x200022c4
 80042c0:	20002330 	.word	0x20002330
 80042c4:	447a0000 	.word	0x447a0000
 80042c8:	2000230c 	.word	0x2000230c
 80042cc:	3f7d70a4 	.word	0x3f7d70a4
 80042d0:	3c23d700 	.word	0x3c23d700
 80042d4:	20002310 	.word	0x20002310
 80042d8:	200022fc 	.word	0x200022fc
 80042dc:	200022d0 	.word	0x200022d0
 80042e0:	200022cc 	.word	0x200022cc
 80042e4:	200022d4 	.word	0x200022d4
 80042e8:	200022d8 	.word	0x200022d8
 80042ec:	200022dc 	.word	0x200022dc
 80042f0:	200022e0 	.word	0x200022e0
 80042f4:	200022e4 	.word	0x200022e4
 80042f8:	200022e8 	.word	0x200022e8
 80042fc:	20002334 	.word	0x20002334
 8004300:	40020800 	.word	0x40020800
 8004304:	2000064a 	.word	0x2000064a
 8004308:	2000064b 	.word	0x2000064b
 800430c:	20002296 	.word	0x20002296
 8004310:	20002250 	.word	0x20002250
 8004314:	20002350 	.word	0x20002350
 8004318:	20000648 	.word	0x20000648
 800431c:	20000500 	.word	0x20000500
 8004320:	20002298 	.word	0x20002298
 8004324:	0800f098 	.word	0x0800f098
 8004328:	20000544 	.word	0x20000544
 800432c:	2000234c 	.word	0x2000234c
 8004330:	20000649 	.word	0x20000649
 8004334:	20002400 	.word	0x20002400

		  case KADEMEAYRILDIMI:
				v4_mod=3;
 8004338:	4b5c      	ldr	r3, [pc, #368]	@ (80044ac <main+0xcbc>)
 800433a:	2203      	movs	r2, #3
 800433c:	701a      	strb	r2, [r3, #0]
					  //ALT KADEMEDEN GELEN SİNYALE VE EGÜ SWİTCHLERİNE BAK
					  //BELLİ BİR SÜRE VE İRTİFA BOYUNCA AYRILMA OLMAZSA APOGEE YA GEÇ
				if(timer_start_flag == 0){
 800433e:	4b5c      	ldr	r3, [pc, #368]	@ (80044b0 <main+0xcc0>)
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d109      	bne.n	800435a <main+0xb6a>

					__HAL_TIM_SET_COUNTER(&htim7 , 0);
 8004346:	4b5b      	ldr	r3, [pc, #364]	@ (80044b4 <main+0xcc4>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2200      	movs	r2, #0
 800434c:	625a      	str	r2, [r3, #36]	@ 0x24
					HAL_TIM_Base_Start(&htim7);
 800434e:	4859      	ldr	r0, [pc, #356]	@ (80044b4 <main+0xcc4>)
 8004350:	f005 f972 	bl	8009638 <HAL_TIM_Base_Start>
					timer_start_flag =1;
 8004354:	4b56      	ldr	r3, [pc, #344]	@ (80044b0 <main+0xcc0>)
 8004356:	2201      	movs	r2, #1
 8004358:	701a      	strb	r2, [r3, #0]
				}
				/*manyetik switch
				 * */
				if((magnetic_switch==0) && TIM7->CNT >= 45000 && altitude_rampa_control == 1)
 800435a:	4b57      	ldr	r3, [pc, #348]	@ (80044b8 <main+0xcc8>)
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	f040 80a2 	bne.w	80044a8 <main+0xcb8>
 8004364:	4b55      	ldr	r3, [pc, #340]	@ (80044bc <main+0xccc>)
 8004366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004368:	f64a 72c7 	movw	r2, #44999	@ 0xafc7
 800436c:	4293      	cmp	r3, r2
 800436e:	f240 809b 	bls.w	80044a8 <main+0xcb8>
 8004372:	4b53      	ldr	r3, [pc, #332]	@ (80044c0 <main+0xcd0>)
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	2b01      	cmp	r3, #1
 8004378:	f040 8096 	bne.w	80044a8 <main+0xcb8>
				{
				  SUSTAINER=AYRILDI;
 800437c:	4b51      	ldr	r3, [pc, #324]	@ (80044c4 <main+0xcd4>)
 800437e:	2203      	movs	r2, #3
 8004380:	701a      	strb	r2, [r3, #0]

//				  Buzzer(10, 100);
				}

			 break;
 8004382:	e091      	b.n	80044a8 <main+0xcb8>

		  case AYRILDI:
				v4_mod=4;
 8004384:	4b49      	ldr	r3, [pc, #292]	@ (80044ac <main+0xcbc>)
 8004386:	2204      	movs	r2, #4
 8004388:	701a      	strb	r2, [r3, #0]
					  //MOTOR ATE�?LEME TALEBİ GÖNDER MEGU YE MESAJ AT

				HAL_UART_Transmit(&huart6, EGU_motor_atesleme, 5, 1000);
 800438a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800438e:	2205      	movs	r2, #5
 8004390:	494d      	ldr	r1, [pc, #308]	@ (80044c8 <main+0xcd8>)
 8004392:	484e      	ldr	r0, [pc, #312]	@ (80044cc <main+0xcdc>)
 8004394:	f005 fe65 	bl	800a062 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart6, EGU_motor_atesleme, 5, 1000);
 8004398:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800439c:	2205      	movs	r2, #5
 800439e:	494a      	ldr	r1, [pc, #296]	@ (80044c8 <main+0xcd8>)
 80043a0:	484a      	ldr	r0, [pc, #296]	@ (80044cc <main+0xcdc>)
 80043a2:	f005 fe5e 	bl	800a062 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart6, EGU_motor_atesleme, 5, 1000);
 80043a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80043aa:	2205      	movs	r2, #5
 80043ac:	4946      	ldr	r1, [pc, #280]	@ (80044c8 <main+0xcd8>)
 80043ae:	4847      	ldr	r0, [pc, #284]	@ (80044cc <main+0xcdc>)
 80043b0:	f005 fe57 	bl	800a062 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart6, EGU_motor_atesleme, 5, 1000);
 80043b4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80043b8:	2205      	movs	r2, #5
 80043ba:	4943      	ldr	r1, [pc, #268]	@ (80044c8 <main+0xcd8>)
 80043bc:	4843      	ldr	r0, [pc, #268]	@ (80044cc <main+0xcdc>)
 80043be:	f005 fe50 	bl	800a062 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart6, EGU_motor_atesleme, 5, 1000);
 80043c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80043c6:	2205      	movs	r2, #5
 80043c8:	493f      	ldr	r1, [pc, #252]	@ (80044c8 <main+0xcd8>)
 80043ca:	4840      	ldr	r0, [pc, #256]	@ (80044cc <main+0xcdc>)
 80043cc:	f005 fe49 	bl	800a062 <HAL_UART_Transmit>
				SUSTAINER=APOGEE;
 80043d0:	4b3c      	ldr	r3, [pc, #240]	@ (80044c4 <main+0xcd4>)
 80043d2:	2204      	movs	r2, #4
 80043d4:	701a      	strb	r2, [r3, #0]

			 break;
 80043d6:	e08e      	b.n	80044f6 <main+0xd06>

		  case APOGEE:
				v4_mod=5;
 80043d8:	4b34      	ldr	r3, [pc, #208]	@ (80044ac <main+0xcbc>)
 80043da:	2205      	movs	r2, #5
 80043dc:	701a      	strb	r2, [r3, #0]
					  //AYRILMA GERÇEKLE�?MESE BİLE APOGEE İLE ROKETİ KURTAR *ucus basladı kısmına timer kuracam ona göre ayrıldımıdan APOGEEya geçecek


				if((real_pitch <= 32) && speed <= 2 && altitude < altitude_max )
 80043de:	4b3c      	ldr	r3, [pc, #240]	@ (80044d0 <main+0xce0>)
 80043e0:	edd3 7a00 	vldr	s15, [r3]
 80043e4:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 80044d4 <main+0xce4>
 80043e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043f0:	d900      	bls.n	80043f4 <main+0xc04>
					SUSTAINER=SUSTAINER_ANA;
					altitude_rampa_control =0;
				}


			 break;
 80043f2:	e080      	b.n	80044f6 <main+0xd06>
				if((real_pitch <= 32) && speed <= 2 && altitude < altitude_max )
 80043f4:	4b38      	ldr	r3, [pc, #224]	@ (80044d8 <main+0xce8>)
 80043f6:	edd3 7a00 	vldr	s15, [r3]
 80043fa:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80043fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004406:	d900      	bls.n	800440a <main+0xc1a>
			 break;
 8004408:	e075      	b.n	80044f6 <main+0xd06>
				if((real_pitch <= 32) && speed <= 2 && altitude < altitude_max )
 800440a:	4b34      	ldr	r3, [pc, #208]	@ (80044dc <main+0xcec>)
 800440c:	ed93 7a00 	vldr	s14, [r3]
 8004410:	4b33      	ldr	r3, [pc, #204]	@ (80044e0 <main+0xcf0>)
 8004412:	edd3 7a00 	vldr	s15, [r3]
 8004416:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800441a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800441e:	d400      	bmi.n	8004422 <main+0xc32>
			 break;
 8004420:	e069      	b.n	80044f6 <main+0xd06>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 8004422:	2201      	movs	r2, #1
 8004424:	2108      	movs	r1, #8
 8004426:	482f      	ldr	r0, [pc, #188]	@ (80044e4 <main+0xcf4>)
 8004428:	f002 fdde 	bl	8006fe8 <HAL_GPIO_WritePin>
					SUSTAINER=SUSTAINER_ANA;
 800442c:	4b25      	ldr	r3, [pc, #148]	@ (80044c4 <main+0xcd4>)
 800442e:	2205      	movs	r2, #5
 8004430:	701a      	strb	r2, [r3, #0]
					altitude_rampa_control =0;
 8004432:	4b23      	ldr	r3, [pc, #140]	@ (80044c0 <main+0xcd0>)
 8004434:	2200      	movs	r2, #0
 8004436:	701a      	strb	r2, [r3, #0]
			 break;
 8004438:	e05d      	b.n	80044f6 <main+0xd06>

		  case SUSTAINER_ANA:
				v4_mod=6;
 800443a:	4b1c      	ldr	r3, [pc, #112]	@ (80044ac <main+0xcbc>)
 800443c:	2206      	movs	r2, #6
 800443e:	701a      	strb	r2, [r3, #0]
					  //AYRILDI VEYA APOGEEDAN GELEN APOGEE BİLGİSİNDEN SONRA İSTENEN İRTİFADA ANA PARA�?ÜT AÇ

				if(altitude <= 500 && speed < 0  && altitude_rampa_control == 0 )
 8004440:	4b26      	ldr	r3, [pc, #152]	@ (80044dc <main+0xcec>)
 8004442:	edd3 7a00 	vldr	s15, [r3]
 8004446:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 80044e8 <main+0xcf8>
 800444a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800444e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004452:	d900      	bls.n	8004456 <main+0xc66>

					SUSTAINER=FINISH;
					flash_flag=1;
				}

			  break;
 8004454:	e04e      	b.n	80044f4 <main+0xd04>
				if(altitude <= 500 && speed < 0  && altitude_rampa_control == 0 )
 8004456:	4b20      	ldr	r3, [pc, #128]	@ (80044d8 <main+0xce8>)
 8004458:	edd3 7a00 	vldr	s15, [r3]
 800445c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004464:	d400      	bmi.n	8004468 <main+0xc78>
			  break;
 8004466:	e045      	b.n	80044f4 <main+0xd04>
				if(altitude <= 500 && speed < 0  && altitude_rampa_control == 0 )
 8004468:	4b15      	ldr	r3, [pc, #84]	@ (80044c0 <main+0xcd0>)
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d141      	bne.n	80044f4 <main+0xd04>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 8004470:	2200      	movs	r2, #0
 8004472:	2108      	movs	r1, #8
 8004474:	481b      	ldr	r0, [pc, #108]	@ (80044e4 <main+0xcf4>)
 8004476:	f002 fdb7 	bl	8006fe8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, SET);
 800447a:	2201      	movs	r2, #1
 800447c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004480:	481a      	ldr	r0, [pc, #104]	@ (80044ec <main+0xcfc>)
 8004482:	f002 fdb1 	bl	8006fe8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, RESET);
 8004486:	2200      	movs	r2, #0
 8004488:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800448c:	4817      	ldr	r0, [pc, #92]	@ (80044ec <main+0xcfc>)
 800448e:	f002 fdab 	bl	8006fe8 <HAL_GPIO_WritePin>
					SUSTAINER=FINISH;
 8004492:	4b0c      	ldr	r3, [pc, #48]	@ (80044c4 <main+0xcd4>)
 8004494:	2206      	movs	r2, #6
 8004496:	701a      	strb	r2, [r3, #0]
					flash_flag=1;
 8004498:	4b15      	ldr	r3, [pc, #84]	@ (80044f0 <main+0xd00>)
 800449a:	2201      	movs	r2, #1
 800449c:	701a      	strb	r2, [r3, #0]
			  break;
 800449e:	e029      	b.n	80044f4 <main+0xd04>

		  case FINISH:
				v4_mod=7;
 80044a0:	4b02      	ldr	r3, [pc, #8]	@ (80044ac <main+0xcbc>)
 80044a2:	2207      	movs	r2, #7
 80044a4:	701a      	strb	r2, [r3, #0]
					  //KURTARMA GERÇEKLE�?Tİ VERİ KAYDETMEYİ BIRAK VE BUZZERI AÇ


			  break;
 80044a6:	e026      	b.n	80044f6 <main+0xd06>
			 break;
 80044a8:	bf00      	nop
 80044aa:	e024      	b.n	80044f6 <main+0xd06>
 80044ac:	20000649 	.word	0x20000649
 80044b0:	2000063a 	.word	0x2000063a
 80044b4:	200003a0 	.word	0x200003a0
 80044b8:	2000064a 	.word	0x2000064a
 80044bc:	40001400 	.word	0x40001400
 80044c0:	2000063b 	.word	0x2000063b
 80044c4:	2000234c 	.word	0x2000234c
 80044c8:	0800f0a0 	.word	0x0800f0a0
 80044cc:	20000544 	.word	0x20000544
 80044d0:	200022c4 	.word	0x200022c4
 80044d4:	42000000 	.word	0x42000000
 80044d8:	200022b8 	.word	0x200022b8
 80044dc:	200022a4 	.word	0x200022a4
 80044e0:	20000644 	.word	0x20000644
 80044e4:	40020400 	.word	0x40020400
 80044e8:	43fa0000 	.word	0x43fa0000
 80044ec:	40020800 	.word	0x40020800
 80044f0:	2000063c 	.word	0x2000063c
			  break;
 80044f4:	bf00      	nop
		  }


/**************************************************************************************/
		  if(altitude >30 && SUSTAINER <3)
 80044f6:	4ba4      	ldr	r3, [pc, #656]	@ (8004788 <main+0xf98>)
 80044f8:	edd3 7a00 	vldr	s15, [r3]
 80044fc:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8004500:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004508:	dd06      	ble.n	8004518 <main+0xd28>
 800450a:	4ba0      	ldr	r3, [pc, #640]	@ (800478c <main+0xf9c>)
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	2b02      	cmp	r3, #2
 8004510:	d802      	bhi.n	8004518 <main+0xd28>
		  {
			  altitude_rampa_control =1;
 8004512:	4b9f      	ldr	r3, [pc, #636]	@ (8004790 <main+0xfa0>)
 8004514:	2201      	movs	r2, #1
 8004516:	701a      	strb	r2, [r3, #0]
		  }
/*************************************************************************************/
		  if(altitude>altitude_max) altitude_max = altitude;
 8004518:	4b9b      	ldr	r3, [pc, #620]	@ (8004788 <main+0xf98>)
 800451a:	ed93 7a00 	vldr	s14, [r3]
 800451e:	4b9d      	ldr	r3, [pc, #628]	@ (8004794 <main+0xfa4>)
 8004520:	edd3 7a00 	vldr	s15, [r3]
 8004524:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800452c:	dd03      	ble.n	8004536 <main+0xd46>
 800452e:	4b96      	ldr	r3, [pc, #600]	@ (8004788 <main+0xf98>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a98      	ldr	r2, [pc, #608]	@ (8004794 <main+0xfa4>)
 8004534:	6013      	str	r3, [r2, #0]

		  if(speed>speed_max) speed_max = speed;
 8004536:	4b98      	ldr	r3, [pc, #608]	@ (8004798 <main+0xfa8>)
 8004538:	ed93 7a00 	vldr	s14, [r3]
 800453c:	4b97      	ldr	r3, [pc, #604]	@ (800479c <main+0xfac>)
 800453e:	edd3 7a00 	vldr	s15, [r3]
 8004542:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800454a:	dd03      	ble.n	8004554 <main+0xd64>
 800454c:	4b92      	ldr	r3, [pc, #584]	@ (8004798 <main+0xfa8>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a92      	ldr	r2, [pc, #584]	@ (800479c <main+0xfac>)
 8004552:	6013      	str	r3, [r2, #0]

		  if( Lsm_Sensor.Accel_X> x_max) x_max =  Lsm_Sensor.Accel_X;
 8004554:	4b92      	ldr	r3, [pc, #584]	@ (80047a0 <main+0xfb0>)
 8004556:	ed93 7a00 	vldr	s14, [r3]
 800455a:	4b92      	ldr	r3, [pc, #584]	@ (80047a4 <main+0xfb4>)
 800455c:	edd3 7a00 	vldr	s15, [r3]
 8004560:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004568:	dd03      	ble.n	8004572 <main+0xd82>
 800456a:	4b8d      	ldr	r3, [pc, #564]	@ (80047a0 <main+0xfb0>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a8d      	ldr	r2, [pc, #564]	@ (80047a4 <main+0xfb4>)
 8004570:	6013      	str	r3, [r2, #0]
/**************************************************************************************/
		  if(adc_flag ==1)
 8004572:	4b8d      	ldr	r3, [pc, #564]	@ (80047a8 <main+0xfb8>)
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d158      	bne.n	800462c <main+0xe3c>
		  {
			  if(adc > 2476) adc = 2234;
 800457a:	4b8c      	ldr	r3, [pc, #560]	@ (80047ac <main+0xfbc>)
 800457c:	edd3 7a00 	vldr	s15, [r3]
 8004580:	ed9f 7a8b 	vldr	s14, [pc, #556]	@ 80047b0 <main+0xfc0>
 8004584:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800458c:	dd02      	ble.n	8004594 <main+0xda4>
 800458e:	4b87      	ldr	r3, [pc, #540]	@ (80047ac <main+0xfbc>)
 8004590:	4a88      	ldr	r2, [pc, #544]	@ (80047b4 <main+0xfc4>)
 8004592:	601a      	str	r2, [r3, #0]
			  if(adc < 1755) adc = 1755;
 8004594:	4b85      	ldr	r3, [pc, #532]	@ (80047ac <main+0xfbc>)
 8004596:	edd3 7a00 	vldr	s15, [r3]
 800459a:	ed9f 7a87 	vldr	s14, [pc, #540]	@ 80047b8 <main+0xfc8>
 800459e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045a6:	d502      	bpl.n	80045ae <main+0xdbe>
 80045a8:	4b80      	ldr	r3, [pc, #512]	@ (80047ac <main+0xfbc>)
 80045aa:	4a84      	ldr	r2, [pc, #528]	@ (80047bc <main+0xfcc>)
 80045ac:	601a      	str	r2, [r3, #0]
			  // 6V = 1755 adc val 1,41V
			  // 8.4V = 2476 adc val 1,99V 0,58V
			 adc_pil_val=(float)( ( ( (adc/4095)*3.3)-1.41) / (1.99-1.41) ) *100 ; // pil conv
 80045ae:	4b7f      	ldr	r3, [pc, #508]	@ (80047ac <main+0xfbc>)
 80045b0:	edd3 7a00 	vldr	s15, [r3]
 80045b4:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 80047c0 <main+0xfd0>
 80045b8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80045bc:	ee16 0a90 	vmov	r0, s13
 80045c0:	f7fb ffda 	bl	8000578 <__aeabi_f2d>
 80045c4:	a36a      	add	r3, pc, #424	@ (adr r3, 8004770 <main+0xf80>)
 80045c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ca:	f7fc f82d 	bl	8000628 <__aeabi_dmul>
 80045ce:	4602      	mov	r2, r0
 80045d0:	460b      	mov	r3, r1
 80045d2:	4610      	mov	r0, r2
 80045d4:	4619      	mov	r1, r3
 80045d6:	a368      	add	r3, pc, #416	@ (adr r3, 8004778 <main+0xf88>)
 80045d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045dc:	f7fb fe6c 	bl	80002b8 <__aeabi_dsub>
 80045e0:	4602      	mov	r2, r0
 80045e2:	460b      	mov	r3, r1
 80045e4:	4610      	mov	r0, r2
 80045e6:	4619      	mov	r1, r3
 80045e8:	a365      	add	r3, pc, #404	@ (adr r3, 8004780 <main+0xf90>)
 80045ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ee:	f7fc f945 	bl	800087c <__aeabi_ddiv>
 80045f2:	4602      	mov	r2, r0
 80045f4:	460b      	mov	r3, r1
 80045f6:	4610      	mov	r0, r2
 80045f8:	4619      	mov	r1, r3
 80045fa:	f7fc fb0d 	bl	8000c18 <__aeabi_d2f>
 80045fe:	ee07 0a10 	vmov	s14, r0
 8004602:	eddf 7a70 	vldr	s15, [pc, #448]	@ 80047c4 <main+0xfd4>
 8004606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800460a:	4b6f      	ldr	r3, [pc, #444]	@ (80047c8 <main+0xfd8>)
 800460c:	edc3 7a00 	vstr	s15, [r3]
			 // adc_pil_val = (adc-1755)/(2746-1755)*100;
			  v4_battery=adc_pil_val;
 8004610:	4b6d      	ldr	r3, [pc, #436]	@ (80047c8 <main+0xfd8>)
 8004612:	edd3 7a00 	vldr	s15, [r3]
 8004616:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800461a:	edc7 7a01 	vstr	s15, [r7, #4]
 800461e:	793b      	ldrb	r3, [r7, #4]
 8004620:	b2da      	uxtb	r2, r3
 8004622:	4b6a      	ldr	r3, [pc, #424]	@ (80047cc <main+0xfdc>)
 8004624:	701a      	strb	r2, [r3, #0]
			  adc_flag=0;
 8004626:	4b60      	ldr	r3, [pc, #384]	@ (80047a8 <main+0xfb8>)
 8004628:	2200      	movs	r2, #0
 800462a:	701a      	strb	r2, [r3, #0]
//
//		flash_flag=0;
//		i_flag=0;
//	}
//
	if( timer_200ms_flag == 1 && i_flag ==0 /*&& SUSTAINER >=1*/)
 800462c:	4b68      	ldr	r3, [pc, #416]	@ (80047d0 <main+0xfe0>)
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	2b01      	cmp	r3, #1
 8004632:	f47f a99a 	bne.w	800396a <main+0x17a>
 8004636:	4b67      	ldr	r3, [pc, #412]	@ (80047d4 <main+0xfe4>)
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	2b00      	cmp	r3, #0
 800463c:	f47f a995 	bne.w	800396a <main+0x17a>
	{
		if(i >= 252) {
 8004640:	4b65      	ldr	r3, [pc, #404]	@ (80047d8 <main+0xfe8>)
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	2bfb      	cmp	r3, #251	@ 0xfb
 8004646:	d902      	bls.n	800464e <main+0xe5e>
			i_flag=1;
 8004648:	4b62      	ldr	r3, [pc, #392]	@ (80047d4 <main+0xfe4>)
 800464a:	2201      	movs	r2, #1
 800464c:	701a      	strb	r2, [r3, #0]
		}

		conv.fVal=Lsm_Sensor.Accel_X;
 800464e:	4b54      	ldr	r3, [pc, #336]	@ (80047a0 <main+0xfb0>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a62      	ldr	r2, [pc, #392]	@ (80047dc <main+0xfec>)
 8004654:	6013      	str	r3, [r2, #0]

		flash_accX[i] = conv.array[0];
 8004656:	4b60      	ldr	r3, [pc, #384]	@ (80047d8 <main+0xfe8>)
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	461a      	mov	r2, r3
 800465c:	4b5f      	ldr	r3, [pc, #380]	@ (80047dc <main+0xfec>)
 800465e:	7819      	ldrb	r1, [r3, #0]
 8004660:	4b5f      	ldr	r3, [pc, #380]	@ (80047e0 <main+0xff0>)
 8004662:	5499      	strb	r1, [r3, r2]
		flash_accX[i+1] = conv.array[1];
 8004664:	4b5c      	ldr	r3, [pc, #368]	@ (80047d8 <main+0xfe8>)
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	3301      	adds	r3, #1
 800466a:	4a5c      	ldr	r2, [pc, #368]	@ (80047dc <main+0xfec>)
 800466c:	7851      	ldrb	r1, [r2, #1]
 800466e:	4a5c      	ldr	r2, [pc, #368]	@ (80047e0 <main+0xff0>)
 8004670:	54d1      	strb	r1, [r2, r3]
		flash_accX[i+2] = conv.array[2];
 8004672:	4b59      	ldr	r3, [pc, #356]	@ (80047d8 <main+0xfe8>)
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	3302      	adds	r3, #2
 8004678:	4a58      	ldr	r2, [pc, #352]	@ (80047dc <main+0xfec>)
 800467a:	7891      	ldrb	r1, [r2, #2]
 800467c:	4a58      	ldr	r2, [pc, #352]	@ (80047e0 <main+0xff0>)
 800467e:	54d1      	strb	r1, [r2, r3]
		flash_accX[i+3] = conv.array[3];
 8004680:	4b55      	ldr	r3, [pc, #340]	@ (80047d8 <main+0xfe8>)
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	3303      	adds	r3, #3
 8004686:	4a55      	ldr	r2, [pc, #340]	@ (80047dc <main+0xfec>)
 8004688:	78d1      	ldrb	r1, [r2, #3]
 800468a:	4a55      	ldr	r2, [pc, #340]	@ (80047e0 <main+0xff0>)
 800468c:	54d1      	strb	r1, [r2, r3]

		conv.fVal=Lsm_Sensor.Accel_Y;
 800468e:	4b44      	ldr	r3, [pc, #272]	@ (80047a0 <main+0xfb0>)
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	4a52      	ldr	r2, [pc, #328]	@ (80047dc <main+0xfec>)
 8004694:	6013      	str	r3, [r2, #0]
		flash_accY[i] = conv.array[0];
 8004696:	4b50      	ldr	r3, [pc, #320]	@ (80047d8 <main+0xfe8>)
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	461a      	mov	r2, r3
 800469c:	4b4f      	ldr	r3, [pc, #316]	@ (80047dc <main+0xfec>)
 800469e:	7819      	ldrb	r1, [r3, #0]
 80046a0:	4b50      	ldr	r3, [pc, #320]	@ (80047e4 <main+0xff4>)
 80046a2:	5499      	strb	r1, [r3, r2]
		flash_accY[i+1] = conv.array[1];
 80046a4:	4b4c      	ldr	r3, [pc, #304]	@ (80047d8 <main+0xfe8>)
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	3301      	adds	r3, #1
 80046aa:	4a4c      	ldr	r2, [pc, #304]	@ (80047dc <main+0xfec>)
 80046ac:	7851      	ldrb	r1, [r2, #1]
 80046ae:	4a4d      	ldr	r2, [pc, #308]	@ (80047e4 <main+0xff4>)
 80046b0:	54d1      	strb	r1, [r2, r3]
		flash_accY[i+2] = conv.array[2];
 80046b2:	4b49      	ldr	r3, [pc, #292]	@ (80047d8 <main+0xfe8>)
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	3302      	adds	r3, #2
 80046b8:	4a48      	ldr	r2, [pc, #288]	@ (80047dc <main+0xfec>)
 80046ba:	7891      	ldrb	r1, [r2, #2]
 80046bc:	4a49      	ldr	r2, [pc, #292]	@ (80047e4 <main+0xff4>)
 80046be:	54d1      	strb	r1, [r2, r3]
		flash_accY[i+3] = conv.array[3];
 80046c0:	4b45      	ldr	r3, [pc, #276]	@ (80047d8 <main+0xfe8>)
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	3303      	adds	r3, #3
 80046c6:	4a45      	ldr	r2, [pc, #276]	@ (80047dc <main+0xfec>)
 80046c8:	78d1      	ldrb	r1, [r2, #3]
 80046ca:	4a46      	ldr	r2, [pc, #280]	@ (80047e4 <main+0xff4>)
 80046cc:	54d1      	strb	r1, [r2, r3]

		conv.fVal=Lsm_Sensor.Accel_Z;
 80046ce:	4b34      	ldr	r3, [pc, #208]	@ (80047a0 <main+0xfb0>)
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	4a42      	ldr	r2, [pc, #264]	@ (80047dc <main+0xfec>)
 80046d4:	6013      	str	r3, [r2, #0]
		flash_accZ[i] = conv.array[0];
 80046d6:	4b40      	ldr	r3, [pc, #256]	@ (80047d8 <main+0xfe8>)
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	461a      	mov	r2, r3
 80046dc:	4b3f      	ldr	r3, [pc, #252]	@ (80047dc <main+0xfec>)
 80046de:	7819      	ldrb	r1, [r3, #0]
 80046e0:	4b41      	ldr	r3, [pc, #260]	@ (80047e8 <main+0xff8>)
 80046e2:	5499      	strb	r1, [r3, r2]
		flash_accZ[i+1] = conv.array[1];
 80046e4:	4b3c      	ldr	r3, [pc, #240]	@ (80047d8 <main+0xfe8>)
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	3301      	adds	r3, #1
 80046ea:	4a3c      	ldr	r2, [pc, #240]	@ (80047dc <main+0xfec>)
 80046ec:	7851      	ldrb	r1, [r2, #1]
 80046ee:	4a3e      	ldr	r2, [pc, #248]	@ (80047e8 <main+0xff8>)
 80046f0:	54d1      	strb	r1, [r2, r3]
		flash_accZ[i+2] = conv.array[2];
 80046f2:	4b39      	ldr	r3, [pc, #228]	@ (80047d8 <main+0xfe8>)
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	3302      	adds	r3, #2
 80046f8:	4a38      	ldr	r2, [pc, #224]	@ (80047dc <main+0xfec>)
 80046fa:	7891      	ldrb	r1, [r2, #2]
 80046fc:	4a3a      	ldr	r2, [pc, #232]	@ (80047e8 <main+0xff8>)
 80046fe:	54d1      	strb	r1, [r2, r3]
		flash_accZ[i+3] = conv.array[3];
 8004700:	4b35      	ldr	r3, [pc, #212]	@ (80047d8 <main+0xfe8>)
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	3303      	adds	r3, #3
 8004706:	4a35      	ldr	r2, [pc, #212]	@ (80047dc <main+0xfec>)
 8004708:	78d1      	ldrb	r1, [r2, #3]
 800470a:	4a37      	ldr	r2, [pc, #220]	@ (80047e8 <main+0xff8>)
 800470c:	54d1      	strb	r1, [r2, r3]

		conv.fVal=Lsm_Sensor.Gyro_X;
 800470e:	4b24      	ldr	r3, [pc, #144]	@ (80047a0 <main+0xfb0>)
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	4a32      	ldr	r2, [pc, #200]	@ (80047dc <main+0xfec>)
 8004714:	6013      	str	r3, [r2, #0]
		flash_gyroX[i] = conv.array[0];
 8004716:	4b30      	ldr	r3, [pc, #192]	@ (80047d8 <main+0xfe8>)
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	461a      	mov	r2, r3
 800471c:	4b2f      	ldr	r3, [pc, #188]	@ (80047dc <main+0xfec>)
 800471e:	7819      	ldrb	r1, [r3, #0]
 8004720:	4b32      	ldr	r3, [pc, #200]	@ (80047ec <main+0xffc>)
 8004722:	5499      	strb	r1, [r3, r2]
		flash_gyroX[i+1] = conv.array[1];
 8004724:	4b2c      	ldr	r3, [pc, #176]	@ (80047d8 <main+0xfe8>)
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	3301      	adds	r3, #1
 800472a:	4a2c      	ldr	r2, [pc, #176]	@ (80047dc <main+0xfec>)
 800472c:	7851      	ldrb	r1, [r2, #1]
 800472e:	4a2f      	ldr	r2, [pc, #188]	@ (80047ec <main+0xffc>)
 8004730:	54d1      	strb	r1, [r2, r3]
		flash_gyroX[i+2] = conv.array[2];
 8004732:	4b29      	ldr	r3, [pc, #164]	@ (80047d8 <main+0xfe8>)
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	3302      	adds	r3, #2
 8004738:	4a28      	ldr	r2, [pc, #160]	@ (80047dc <main+0xfec>)
 800473a:	7891      	ldrb	r1, [r2, #2]
 800473c:	4a2b      	ldr	r2, [pc, #172]	@ (80047ec <main+0xffc>)
 800473e:	54d1      	strb	r1, [r2, r3]
		flash_gyroX[i+3] = conv.array[3];
 8004740:	4b25      	ldr	r3, [pc, #148]	@ (80047d8 <main+0xfe8>)
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	3303      	adds	r3, #3
 8004746:	4a25      	ldr	r2, [pc, #148]	@ (80047dc <main+0xfec>)
 8004748:	78d1      	ldrb	r1, [r2, #3]
 800474a:	4a28      	ldr	r2, [pc, #160]	@ (80047ec <main+0xffc>)
 800474c:	54d1      	strb	r1, [r2, r3]

		conv.fVal=Lsm_Sensor.Gyro_Y;
 800474e:	4b14      	ldr	r3, [pc, #80]	@ (80047a0 <main+0xfb0>)
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	4a22      	ldr	r2, [pc, #136]	@ (80047dc <main+0xfec>)
 8004754:	6013      	str	r3, [r2, #0]
		flash_gyroY[i] = conv.array[0];
 8004756:	4b20      	ldr	r3, [pc, #128]	@ (80047d8 <main+0xfe8>)
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	461a      	mov	r2, r3
 800475c:	4b1f      	ldr	r3, [pc, #124]	@ (80047dc <main+0xfec>)
 800475e:	7819      	ldrb	r1, [r3, #0]
 8004760:	4b23      	ldr	r3, [pc, #140]	@ (80047f0 <main+0x1000>)
 8004762:	5499      	strb	r1, [r3, r2]
		flash_gyroY[i+1] = conv.array[1];
 8004764:	4b1c      	ldr	r3, [pc, #112]	@ (80047d8 <main+0xfe8>)
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	3301      	adds	r3, #1
 800476a:	4a1c      	ldr	r2, [pc, #112]	@ (80047dc <main+0xfec>)
 800476c:	7851      	ldrb	r1, [r2, #1]
 800476e:	e041      	b.n	80047f4 <main+0x1004>
 8004770:	66666666 	.word	0x66666666
 8004774:	400a6666 	.word	0x400a6666
 8004778:	28f5c28f 	.word	0x28f5c28f
 800477c:	3ff68f5c 	.word	0x3ff68f5c
 8004780:	28f5c290 	.word	0x28f5c290
 8004784:	3fe28f5c 	.word	0x3fe28f5c
 8004788:	200022a4 	.word	0x200022a4
 800478c:	2000234c 	.word	0x2000234c
 8004790:	2000063b 	.word	0x2000063b
 8004794:	20000644 	.word	0x20000644
 8004798:	200022b8 	.word	0x200022b8
 800479c:	200022bc 	.word	0x200022bc
 80047a0:	20002400 	.word	0x20002400
 80047a4:	200022ec 	.word	0x200022ec
 80047a8:	200005b5 	.word	0x200005b5
 80047ac:	200005b0 	.word	0x200005b0
 80047b0:	451ac000 	.word	0x451ac000
 80047b4:	450ba000 	.word	0x450ba000
 80047b8:	44db6000 	.word	0x44db6000
 80047bc:	44db6000 	.word	0x44db6000
 80047c0:	457ff000 	.word	0x457ff000
 80047c4:	42c80000 	.word	0x42c80000
 80047c8:	200005ac 	.word	0x200005ac
 80047cc:	20000648 	.word	0x20000648
 80047d0:	2000063d 	.word	0x2000063d
 80047d4:	2000064d 	.word	0x2000064d
 80047d8:	2000064c 	.word	0x2000064c
 80047dc:	200025e0 	.word	0x200025e0
 80047e0:	20000a50 	.word	0x20000a50
 80047e4:	20001250 	.word	0x20001250
 80047e8:	20000e50 	.word	0x20000e50
 80047ec:	20001650 	.word	0x20001650
 80047f0:	20001a50 	.word	0x20001a50
 80047f4:	4a2d      	ldr	r2, [pc, #180]	@ (80048ac <main+0x10bc>)
 80047f6:	54d1      	strb	r1, [r2, r3]
		flash_gyroY[i+2] = conv.array[2];
 80047f8:	4b2d      	ldr	r3, [pc, #180]	@ (80048b0 <main+0x10c0>)
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	3302      	adds	r3, #2
 80047fe:	4a2d      	ldr	r2, [pc, #180]	@ (80048b4 <main+0x10c4>)
 8004800:	7891      	ldrb	r1, [r2, #2]
 8004802:	4a2a      	ldr	r2, [pc, #168]	@ (80048ac <main+0x10bc>)
 8004804:	54d1      	strb	r1, [r2, r3]
		flash_gyroY[i+3] = conv.array[3];
 8004806:	4b2a      	ldr	r3, [pc, #168]	@ (80048b0 <main+0x10c0>)
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	3303      	adds	r3, #3
 800480c:	4a29      	ldr	r2, [pc, #164]	@ (80048b4 <main+0x10c4>)
 800480e:	78d1      	ldrb	r1, [r2, #3]
 8004810:	4a26      	ldr	r2, [pc, #152]	@ (80048ac <main+0x10bc>)
 8004812:	54d1      	strb	r1, [r2, r3]

		conv.fVal=Lsm_Sensor.Gyro_Z;
 8004814:	4b28      	ldr	r3, [pc, #160]	@ (80048b8 <main+0x10c8>)
 8004816:	695b      	ldr	r3, [r3, #20]
 8004818:	4a26      	ldr	r2, [pc, #152]	@ (80048b4 <main+0x10c4>)
 800481a:	6013      	str	r3, [r2, #0]
		flash_gyroZ[i] = conv.array[0];
 800481c:	4b24      	ldr	r3, [pc, #144]	@ (80048b0 <main+0x10c0>)
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	461a      	mov	r2, r3
 8004822:	4b24      	ldr	r3, [pc, #144]	@ (80048b4 <main+0x10c4>)
 8004824:	7819      	ldrb	r1, [r3, #0]
 8004826:	4b25      	ldr	r3, [pc, #148]	@ (80048bc <main+0x10cc>)
 8004828:	5499      	strb	r1, [r3, r2]
		flash_gyroZ[i+1] = conv.array[1];
 800482a:	4b21      	ldr	r3, [pc, #132]	@ (80048b0 <main+0x10c0>)
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	3301      	adds	r3, #1
 8004830:	4a20      	ldr	r2, [pc, #128]	@ (80048b4 <main+0x10c4>)
 8004832:	7851      	ldrb	r1, [r2, #1]
 8004834:	4a21      	ldr	r2, [pc, #132]	@ (80048bc <main+0x10cc>)
 8004836:	54d1      	strb	r1, [r2, r3]
		flash_gyroZ[i+2] = conv.array[2];
 8004838:	4b1d      	ldr	r3, [pc, #116]	@ (80048b0 <main+0x10c0>)
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	3302      	adds	r3, #2
 800483e:	4a1d      	ldr	r2, [pc, #116]	@ (80048b4 <main+0x10c4>)
 8004840:	7891      	ldrb	r1, [r2, #2]
 8004842:	4a1e      	ldr	r2, [pc, #120]	@ (80048bc <main+0x10cc>)
 8004844:	54d1      	strb	r1, [r2, r3]
		flash_gyroZ[i+3] = conv.array[3];
 8004846:	4b1a      	ldr	r3, [pc, #104]	@ (80048b0 <main+0x10c0>)
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	3303      	adds	r3, #3
 800484c:	4a19      	ldr	r2, [pc, #100]	@ (80048b4 <main+0x10c4>)
 800484e:	78d1      	ldrb	r1, [r2, #3]
 8004850:	4a1a      	ldr	r2, [pc, #104]	@ (80048bc <main+0x10cc>)
 8004852:	54d1      	strb	r1, [r2, r3]

		conv.fVal=altitude_kalman;
 8004854:	4b1a      	ldr	r3, [pc, #104]	@ (80048c0 <main+0x10d0>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a16      	ldr	r2, [pc, #88]	@ (80048b4 <main+0x10c4>)
 800485a:	6013      	str	r3, [r2, #0]
		flash_altitude[i] = conv.array[0];
 800485c:	4b14      	ldr	r3, [pc, #80]	@ (80048b0 <main+0x10c0>)
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	461a      	mov	r2, r3
 8004862:	4b14      	ldr	r3, [pc, #80]	@ (80048b4 <main+0x10c4>)
 8004864:	7819      	ldrb	r1, [r3, #0]
 8004866:	4b17      	ldr	r3, [pc, #92]	@ (80048c4 <main+0x10d4>)
 8004868:	5499      	strb	r1, [r3, r2]
		flash_altitude[i+1] = conv.array[1];
 800486a:	4b11      	ldr	r3, [pc, #68]	@ (80048b0 <main+0x10c0>)
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	3301      	adds	r3, #1
 8004870:	4a10      	ldr	r2, [pc, #64]	@ (80048b4 <main+0x10c4>)
 8004872:	7851      	ldrb	r1, [r2, #1]
 8004874:	4a13      	ldr	r2, [pc, #76]	@ (80048c4 <main+0x10d4>)
 8004876:	54d1      	strb	r1, [r2, r3]
		flash_altitude[i+2] = conv.array[2];
 8004878:	4b0d      	ldr	r3, [pc, #52]	@ (80048b0 <main+0x10c0>)
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	3302      	adds	r3, #2
 800487e:	4a0d      	ldr	r2, [pc, #52]	@ (80048b4 <main+0x10c4>)
 8004880:	7891      	ldrb	r1, [r2, #2]
 8004882:	4a10      	ldr	r2, [pc, #64]	@ (80048c4 <main+0x10d4>)
 8004884:	54d1      	strb	r1, [r2, r3]
		flash_altitude[i+3] = conv.array[3];
 8004886:	4b0a      	ldr	r3, [pc, #40]	@ (80048b0 <main+0x10c0>)
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	3303      	adds	r3, #3
 800488c:	4a09      	ldr	r2, [pc, #36]	@ (80048b4 <main+0x10c4>)
 800488e:	78d1      	ldrb	r1, [r2, #3]
 8004890:	4a0c      	ldr	r2, [pc, #48]	@ (80048c4 <main+0x10d4>)
 8004892:	54d1      	strb	r1, [r2, r3]



		timer_200ms_flag =0;
 8004894:	4b0c      	ldr	r3, [pc, #48]	@ (80048c8 <main+0x10d8>)
 8004896:	2200      	movs	r2, #0
 8004898:	701a      	strb	r2, [r3, #0]

		i=i+4;
 800489a:	4b05      	ldr	r3, [pc, #20]	@ (80048b0 <main+0x10c0>)
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	3304      	adds	r3, #4
 80048a0:	b2da      	uxtb	r2, r3
 80048a2:	4b03      	ldr	r3, [pc, #12]	@ (80048b0 <main+0x10c0>)
 80048a4:	701a      	strb	r2, [r3, #0]
	  if(sensor_flag == 1)
 80048a6:	f7ff b860 	b.w	800396a <main+0x17a>
 80048aa:	bf00      	nop
 80048ac:	20001a50 	.word	0x20001a50
 80048b0:	2000064c 	.word	0x2000064c
 80048b4:	200025e0 	.word	0x200025e0
 80048b8:	20002400 	.word	0x20002400
 80048bc:	20001e50 	.word	0x20001e50
 80048c0:	200022c0 	.word	0x200022c0
 80048c4:	20000650 	.word	0x20000650
 80048c8:	2000063d 	.word	0x2000063d

080048cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b094      	sub	sp, #80	@ 0x50
 80048d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80048d2:	f107 031c 	add.w	r3, r7, #28
 80048d6:	2234      	movs	r2, #52	@ 0x34
 80048d8:	2100      	movs	r1, #0
 80048da:	4618      	mov	r0, r3
 80048dc:	f007 fc85 	bl	800c1ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80048e0:	f107 0308 	add.w	r3, r7, #8
 80048e4:	2200      	movs	r2, #0
 80048e6:	601a      	str	r2, [r3, #0]
 80048e8:	605a      	str	r2, [r3, #4]
 80048ea:	609a      	str	r2, [r3, #8]
 80048ec:	60da      	str	r2, [r3, #12]
 80048ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80048f0:	2300      	movs	r3, #0
 80048f2:	607b      	str	r3, [r7, #4]
 80048f4:	4b29      	ldr	r3, [pc, #164]	@ (800499c <SystemClock_Config+0xd0>)
 80048f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048f8:	4a28      	ldr	r2, [pc, #160]	@ (800499c <SystemClock_Config+0xd0>)
 80048fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8004900:	4b26      	ldr	r3, [pc, #152]	@ (800499c <SystemClock_Config+0xd0>)
 8004902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004904:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004908:	607b      	str	r3, [r7, #4]
 800490a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800490c:	2300      	movs	r3, #0
 800490e:	603b      	str	r3, [r7, #0]
 8004910:	4b23      	ldr	r3, [pc, #140]	@ (80049a0 <SystemClock_Config+0xd4>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a22      	ldr	r2, [pc, #136]	@ (80049a0 <SystemClock_Config+0xd4>)
 8004916:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800491a:	6013      	str	r3, [r2, #0]
 800491c:	4b20      	ldr	r3, [pc, #128]	@ (80049a0 <SystemClock_Config+0xd4>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004924:	603b      	str	r3, [r7, #0]
 8004926:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004928:	2301      	movs	r3, #1
 800492a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800492c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004930:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004932:	2302      	movs	r3, #2
 8004934:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004936:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800493a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800493c:	2304      	movs	r3, #4
 800493e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004940:	23a8      	movs	r3, #168	@ 0xa8
 8004942:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004944:	2302      	movs	r3, #2
 8004946:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8004948:	2307      	movs	r3, #7
 800494a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800494c:	2302      	movs	r3, #2
 800494e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004950:	f107 031c 	add.w	r3, r7, #28
 8004954:	4618      	mov	r0, r3
 8004956:	f004 faf9 	bl	8008f4c <HAL_RCC_OscConfig>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d001      	beq.n	8004964 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8004960:	f000 fe7e 	bl	8005660 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004964:	230f      	movs	r3, #15
 8004966:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 8004968:	2303      	movs	r3, #3
 800496a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800496c:	2300      	movs	r3, #0
 800496e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004970:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004974:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004976:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800497a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800497c:	f107 0308 	add.w	r3, r7, #8
 8004980:	2105      	movs	r1, #5
 8004982:	4618      	mov	r0, r3
 8004984:	f003 ff98 	bl	80088b8 <HAL_RCC_ClockConfig>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d001      	beq.n	8004992 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800498e:	f000 fe67 	bl	8005660 <Error_Handler>
  }
}
 8004992:	bf00      	nop
 8004994:	3750      	adds	r7, #80	@ 0x50
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	40023800 	.word	0x40023800
 80049a0:	40007000 	.word	0x40007000

080049a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80049aa:	463b      	mov	r3, r7
 80049ac:	2200      	movs	r2, #0
 80049ae:	601a      	str	r2, [r3, #0]
 80049b0:	605a      	str	r2, [r3, #4]
 80049b2:	609a      	str	r2, [r3, #8]
 80049b4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80049b6:	4b21      	ldr	r3, [pc, #132]	@ (8004a3c <MX_ADC1_Init+0x98>)
 80049b8:	4a21      	ldr	r2, [pc, #132]	@ (8004a40 <MX_ADC1_Init+0x9c>)
 80049ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80049bc:	4b1f      	ldr	r3, [pc, #124]	@ (8004a3c <MX_ADC1_Init+0x98>)
 80049be:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80049c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80049c4:	4b1d      	ldr	r3, [pc, #116]	@ (8004a3c <MX_ADC1_Init+0x98>)
 80049c6:	2200      	movs	r2, #0
 80049c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80049ca:	4b1c      	ldr	r3, [pc, #112]	@ (8004a3c <MX_ADC1_Init+0x98>)
 80049cc:	2200      	movs	r2, #0
 80049ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80049d0:	4b1a      	ldr	r3, [pc, #104]	@ (8004a3c <MX_ADC1_Init+0x98>)
 80049d2:	2201      	movs	r2, #1
 80049d4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80049d6:	4b19      	ldr	r3, [pc, #100]	@ (8004a3c <MX_ADC1_Init+0x98>)
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80049de:	4b17      	ldr	r3, [pc, #92]	@ (8004a3c <MX_ADC1_Init+0x98>)
 80049e0:	2200      	movs	r2, #0
 80049e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80049e4:	4b15      	ldr	r3, [pc, #84]	@ (8004a3c <MX_ADC1_Init+0x98>)
 80049e6:	4a17      	ldr	r2, [pc, #92]	@ (8004a44 <MX_ADC1_Init+0xa0>)
 80049e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80049ea:	4b14      	ldr	r3, [pc, #80]	@ (8004a3c <MX_ADC1_Init+0x98>)
 80049ec:	2200      	movs	r2, #0
 80049ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80049f0:	4b12      	ldr	r3, [pc, #72]	@ (8004a3c <MX_ADC1_Init+0x98>)
 80049f2:	2201      	movs	r2, #1
 80049f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80049f6:	4b11      	ldr	r3, [pc, #68]	@ (8004a3c <MX_ADC1_Init+0x98>)
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80049fe:	4b0f      	ldr	r3, [pc, #60]	@ (8004a3c <MX_ADC1_Init+0x98>)
 8004a00:	2201      	movs	r2, #1
 8004a02:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004a04:	480d      	ldr	r0, [pc, #52]	@ (8004a3c <MX_ADC1_Init+0x98>)
 8004a06:	f001 fb13 	bl	8006030 <HAL_ADC_Init>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d001      	beq.n	8004a14 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8004a10:	f000 fe26 	bl	8005660 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8004a14:	230c      	movs	r3, #12
 8004a16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004a20:	463b      	mov	r3, r7
 8004a22:	4619      	mov	r1, r3
 8004a24:	4805      	ldr	r0, [pc, #20]	@ (8004a3c <MX_ADC1_Init+0x98>)
 8004a26:	f001 fd57 	bl	80064d8 <HAL_ADC_ConfigChannel>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d001      	beq.n	8004a34 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8004a30:	f000 fe16 	bl	8005660 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004a34:	bf00      	nop
 8004a36:	3710      	adds	r7, #16
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	2000021c 	.word	0x2000021c
 8004a40:	40012000 	.word	0x40012000
 8004a44:	0f000001 	.word	0x0f000001

08004a48 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004a4c:	4b12      	ldr	r3, [pc, #72]	@ (8004a98 <MX_I2C1_Init+0x50>)
 8004a4e:	4a13      	ldr	r2, [pc, #76]	@ (8004a9c <MX_I2C1_Init+0x54>)
 8004a50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8004a52:	4b11      	ldr	r3, [pc, #68]	@ (8004a98 <MX_I2C1_Init+0x50>)
 8004a54:	4a12      	ldr	r2, [pc, #72]	@ (8004aa0 <MX_I2C1_Init+0x58>)
 8004a56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004a58:	4b0f      	ldr	r3, [pc, #60]	@ (8004a98 <MX_I2C1_Init+0x50>)
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8004a98 <MX_I2C1_Init+0x50>)
 8004a60:	2200      	movs	r2, #0
 8004a62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004a64:	4b0c      	ldr	r3, [pc, #48]	@ (8004a98 <MX_I2C1_Init+0x50>)
 8004a66:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004a6a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8004a98 <MX_I2C1_Init+0x50>)
 8004a6e:	2200      	movs	r2, #0
 8004a70:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004a72:	4b09      	ldr	r3, [pc, #36]	@ (8004a98 <MX_I2C1_Init+0x50>)
 8004a74:	2200      	movs	r2, #0
 8004a76:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004a78:	4b07      	ldr	r3, [pc, #28]	@ (8004a98 <MX_I2C1_Init+0x50>)
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004a7e:	4b06      	ldr	r3, [pc, #24]	@ (8004a98 <MX_I2C1_Init+0x50>)
 8004a80:	2200      	movs	r2, #0
 8004a82:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004a84:	4804      	ldr	r0, [pc, #16]	@ (8004a98 <MX_I2C1_Init+0x50>)
 8004a86:	f002 fae3 	bl	8007050 <HAL_I2C_Init>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d001      	beq.n	8004a94 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004a90:	f000 fde6 	bl	8005660 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004a94:	bf00      	nop
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	20000264 	.word	0x20000264
 8004a9c:	40005400 	.word	0x40005400
 8004aa0:	00061a80 	.word	0x00061a80

08004aa4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004aa8:	4b17      	ldr	r3, [pc, #92]	@ (8004b08 <MX_SPI1_Init+0x64>)
 8004aaa:	4a18      	ldr	r2, [pc, #96]	@ (8004b0c <MX_SPI1_Init+0x68>)
 8004aac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004aae:	4b16      	ldr	r3, [pc, #88]	@ (8004b08 <MX_SPI1_Init+0x64>)
 8004ab0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004ab4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004ab6:	4b14      	ldr	r3, [pc, #80]	@ (8004b08 <MX_SPI1_Init+0x64>)
 8004ab8:	2200      	movs	r2, #0
 8004aba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004abc:	4b12      	ldr	r3, [pc, #72]	@ (8004b08 <MX_SPI1_Init+0x64>)
 8004abe:	2200      	movs	r2, #0
 8004ac0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ac2:	4b11      	ldr	r3, [pc, #68]	@ (8004b08 <MX_SPI1_Init+0x64>)
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004ac8:	4b0f      	ldr	r3, [pc, #60]	@ (8004b08 <MX_SPI1_Init+0x64>)
 8004aca:	2200      	movs	r2, #0
 8004acc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004ace:	4b0e      	ldr	r3, [pc, #56]	@ (8004b08 <MX_SPI1_Init+0x64>)
 8004ad0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ad4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8004ad6:	4b0c      	ldr	r3, [pc, #48]	@ (8004b08 <MX_SPI1_Init+0x64>)
 8004ad8:	2220      	movs	r2, #32
 8004ada:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004adc:	4b0a      	ldr	r3, [pc, #40]	@ (8004b08 <MX_SPI1_Init+0x64>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004ae2:	4b09      	ldr	r3, [pc, #36]	@ (8004b08 <MX_SPI1_Init+0x64>)
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ae8:	4b07      	ldr	r3, [pc, #28]	@ (8004b08 <MX_SPI1_Init+0x64>)
 8004aea:	2200      	movs	r2, #0
 8004aec:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004aee:	4b06      	ldr	r3, [pc, #24]	@ (8004b08 <MX_SPI1_Init+0x64>)
 8004af0:	220a      	movs	r2, #10
 8004af2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004af4:	4804      	ldr	r0, [pc, #16]	@ (8004b08 <MX_SPI1_Init+0x64>)
 8004af6:	f004 fcc7 	bl	8009488 <HAL_SPI_Init>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d001      	beq.n	8004b04 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004b00:	f000 fdae 	bl	8005660 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004b04:	bf00      	nop
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	200002b8 	.word	0x200002b8
 8004b0c:	40013000 	.word	0x40013000

08004b10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b086      	sub	sp, #24
 8004b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004b16:	f107 0308 	add.w	r3, r7, #8
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	601a      	str	r2, [r3, #0]
 8004b1e:	605a      	str	r2, [r3, #4]
 8004b20:	609a      	str	r2, [r3, #8]
 8004b22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b24:	463b      	mov	r3, r7
 8004b26:	2200      	movs	r2, #0
 8004b28:	601a      	str	r2, [r3, #0]
 8004b2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004b2c:	4b1e      	ldr	r3, [pc, #120]	@ (8004ba8 <MX_TIM2_Init+0x98>)
 8004b2e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004b32:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 8004b34:	4b1c      	ldr	r3, [pc, #112]	@ (8004ba8 <MX_TIM2_Init+0x98>)
 8004b36:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8004b3a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b3c:	4b1a      	ldr	r3, [pc, #104]	@ (8004ba8 <MX_TIM2_Init+0x98>)
 8004b3e:	2200      	movs	r2, #0
 8004b40:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 12000-1;
 8004b42:	4b19      	ldr	r3, [pc, #100]	@ (8004ba8 <MX_TIM2_Init+0x98>)
 8004b44:	f642 62df 	movw	r2, #11999	@ 0x2edf
 8004b48:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b4a:	4b17      	ldr	r3, [pc, #92]	@ (8004ba8 <MX_TIM2_Init+0x98>)
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b50:	4b15      	ldr	r3, [pc, #84]	@ (8004ba8 <MX_TIM2_Init+0x98>)
 8004b52:	2200      	movs	r2, #0
 8004b54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004b56:	4814      	ldr	r0, [pc, #80]	@ (8004ba8 <MX_TIM2_Init+0x98>)
 8004b58:	f004 fd1f 	bl	800959a <HAL_TIM_Base_Init>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d001      	beq.n	8004b66 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8004b62:	f000 fd7d 	bl	8005660 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004b66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004b6a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004b6c:	f107 0308 	add.w	r3, r7, #8
 8004b70:	4619      	mov	r1, r3
 8004b72:	480d      	ldr	r0, [pc, #52]	@ (8004ba8 <MX_TIM2_Init+0x98>)
 8004b74:	f004 ff6f 	bl	8009a56 <HAL_TIM_ConfigClockSource>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d001      	beq.n	8004b82 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8004b7e:	f000 fd6f 	bl	8005660 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b82:	2300      	movs	r3, #0
 8004b84:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b86:	2300      	movs	r3, #0
 8004b88:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004b8a:	463b      	mov	r3, r7
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	4806      	ldr	r0, [pc, #24]	@ (8004ba8 <MX_TIM2_Init+0x98>)
 8004b90:	f005 f98a 	bl	8009ea8 <HAL_TIMEx_MasterConfigSynchronization>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d001      	beq.n	8004b9e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8004b9a:	f000 fd61 	bl	8005660 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004b9e:	bf00      	nop
 8004ba0:	3718      	adds	r7, #24
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	20000310 	.word	0x20000310

08004bac <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004bb2:	463b      	mov	r3, r7
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	601a      	str	r2, [r3, #0]
 8004bb8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004bba:	4b15      	ldr	r3, [pc, #84]	@ (8004c10 <MX_TIM6_Init+0x64>)
 8004bbc:	4a15      	ldr	r2, [pc, #84]	@ (8004c14 <MX_TIM6_Init+0x68>)
 8004bbe:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 840;
 8004bc0:	4b13      	ldr	r3, [pc, #76]	@ (8004c10 <MX_TIM6_Init+0x64>)
 8004bc2:	f44f 7252 	mov.w	r2, #840	@ 0x348
 8004bc6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004bc8:	4b11      	ldr	r3, [pc, #68]	@ (8004c10 <MX_TIM6_Init+0x64>)
 8004bca:	2200      	movs	r2, #0
 8004bcc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 19999;
 8004bce:	4b10      	ldr	r3, [pc, #64]	@ (8004c10 <MX_TIM6_Init+0x64>)
 8004bd0:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8004bd4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004bd6:	4b0e      	ldr	r3, [pc, #56]	@ (8004c10 <MX_TIM6_Init+0x64>)
 8004bd8:	2200      	movs	r2, #0
 8004bda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004bdc:	480c      	ldr	r0, [pc, #48]	@ (8004c10 <MX_TIM6_Init+0x64>)
 8004bde:	f004 fcdc 	bl	800959a <HAL_TIM_Base_Init>
 8004be2:	4603      	mov	r3, r0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d001      	beq.n	8004bec <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8004be8:	f000 fd3a 	bl	8005660 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004bec:	2300      	movs	r3, #0
 8004bee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004bf4:	463b      	mov	r3, r7
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	4805      	ldr	r0, [pc, #20]	@ (8004c10 <MX_TIM6_Init+0x64>)
 8004bfa:	f005 f955 	bl	8009ea8 <HAL_TIMEx_MasterConfigSynchronization>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d001      	beq.n	8004c08 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8004c04:	f000 fd2c 	bl	8005660 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004c08:	bf00      	nop
 8004c0a:	3708      	adds	r7, #8
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	20000358 	.word	0x20000358
 8004c14:	40001000 	.word	0x40001000

08004c18 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c1e:	463b      	mov	r3, r7
 8004c20:	2200      	movs	r2, #0
 8004c22:	601a      	str	r2, [r3, #0]
 8004c24:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004c26:	4b15      	ldr	r3, [pc, #84]	@ (8004c7c <MX_TIM7_Init+0x64>)
 8004c28:	4a15      	ldr	r2, [pc, #84]	@ (8004c80 <MX_TIM7_Init+0x68>)
 8004c2a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8400-1;
 8004c2c:	4b13      	ldr	r3, [pc, #76]	@ (8004c7c <MX_TIM7_Init+0x64>)
 8004c2e:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8004c32:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c34:	4b11      	ldr	r3, [pc, #68]	@ (8004c7c <MX_TIM7_Init+0x64>)
 8004c36:	2200      	movs	r2, #0
 8004c38:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 59999;
 8004c3a:	4b10      	ldr	r3, [pc, #64]	@ (8004c7c <MX_TIM7_Init+0x64>)
 8004c3c:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8004c40:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c42:	4b0e      	ldr	r3, [pc, #56]	@ (8004c7c <MX_TIM7_Init+0x64>)
 8004c44:	2200      	movs	r2, #0
 8004c46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004c48:	480c      	ldr	r0, [pc, #48]	@ (8004c7c <MX_TIM7_Init+0x64>)
 8004c4a:	f004 fca6 	bl	800959a <HAL_TIM_Base_Init>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d001      	beq.n	8004c58 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8004c54:	f000 fd04 	bl	8005660 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004c60:	463b      	mov	r3, r7
 8004c62:	4619      	mov	r1, r3
 8004c64:	4805      	ldr	r0, [pc, #20]	@ (8004c7c <MX_TIM7_Init+0x64>)
 8004c66:	f005 f91f 	bl	8009ea8 <HAL_TIMEx_MasterConfigSynchronization>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d001      	beq.n	8004c74 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8004c70:	f000 fcf6 	bl	8005660 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004c74:	bf00      	nop
 8004c76:	3708      	adds	r7, #8
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	200003a0 	.word	0x200003a0
 8004c80:	40001400 	.word	0x40001400

08004c84 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8004c88:	4b0e      	ldr	r3, [pc, #56]	@ (8004cc4 <MX_TIM10_Init+0x40>)
 8004c8a:	4a0f      	ldr	r2, [pc, #60]	@ (8004cc8 <MX_TIM10_Init+0x44>)
 8004c8c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1680;
 8004c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8004cc4 <MX_TIM10_Init+0x40>)
 8004c90:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 8004c94:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c96:	4b0b      	ldr	r3, [pc, #44]	@ (8004cc4 <MX_TIM10_Init+0x40>)
 8004c98:	2200      	movs	r2, #0
 8004c9a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 3000-1;
 8004c9c:	4b09      	ldr	r3, [pc, #36]	@ (8004cc4 <MX_TIM10_Init+0x40>)
 8004c9e:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8004ca2:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ca4:	4b07      	ldr	r3, [pc, #28]	@ (8004cc4 <MX_TIM10_Init+0x40>)
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004caa:	4b06      	ldr	r3, [pc, #24]	@ (8004cc4 <MX_TIM10_Init+0x40>)
 8004cac:	2200      	movs	r2, #0
 8004cae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8004cb0:	4804      	ldr	r0, [pc, #16]	@ (8004cc4 <MX_TIM10_Init+0x40>)
 8004cb2:	f004 fc72 	bl	800959a <HAL_TIM_Base_Init>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d001      	beq.n	8004cc0 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8004cbc:	f000 fcd0 	bl	8005660 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8004cc0:	bf00      	nop
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	200003e8 	.word	0x200003e8
 8004cc8:	40014400 	.word	0x40014400

08004ccc <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8004cd0:	4b0e      	ldr	r3, [pc, #56]	@ (8004d0c <MX_TIM11_Init+0x40>)
 8004cd2:	4a0f      	ldr	r2, [pc, #60]	@ (8004d10 <MX_TIM11_Init+0x44>)
 8004cd4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 16800;
 8004cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8004d0c <MX_TIM11_Init+0x40>)
 8004cd8:	f244 12a0 	movw	r2, #16800	@ 0x41a0
 8004cdc:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004cde:	4b0b      	ldr	r3, [pc, #44]	@ (8004d0c <MX_TIM11_Init+0x40>)
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 7000-1;
 8004ce4:	4b09      	ldr	r3, [pc, #36]	@ (8004d0c <MX_TIM11_Init+0x40>)
 8004ce6:	f641 3257 	movw	r2, #6999	@ 0x1b57
 8004cea:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004cec:	4b07      	ldr	r3, [pc, #28]	@ (8004d0c <MX_TIM11_Init+0x40>)
 8004cee:	2200      	movs	r2, #0
 8004cf0:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004cf2:	4b06      	ldr	r3, [pc, #24]	@ (8004d0c <MX_TIM11_Init+0x40>)
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8004cf8:	4804      	ldr	r0, [pc, #16]	@ (8004d0c <MX_TIM11_Init+0x40>)
 8004cfa:	f004 fc4e 	bl	800959a <HAL_TIM_Base_Init>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d001      	beq.n	8004d08 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8004d04:	f000 fcac 	bl	8005660 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8004d08:	bf00      	nop
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	20000430 	.word	0x20000430
 8004d10:	40014800 	.word	0x40014800

08004d14 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8004d18:	4b11      	ldr	r3, [pc, #68]	@ (8004d60 <MX_UART4_Init+0x4c>)
 8004d1a:	4a12      	ldr	r2, [pc, #72]	@ (8004d64 <MX_UART4_Init+0x50>)
 8004d1c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8004d1e:	4b10      	ldr	r3, [pc, #64]	@ (8004d60 <MX_UART4_Init+0x4c>)
 8004d20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004d24:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004d26:	4b0e      	ldr	r3, [pc, #56]	@ (8004d60 <MX_UART4_Init+0x4c>)
 8004d28:	2200      	movs	r2, #0
 8004d2a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8004d60 <MX_UART4_Init+0x4c>)
 8004d2e:	2200      	movs	r2, #0
 8004d30:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8004d32:	4b0b      	ldr	r3, [pc, #44]	@ (8004d60 <MX_UART4_Init+0x4c>)
 8004d34:	2200      	movs	r2, #0
 8004d36:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004d38:	4b09      	ldr	r3, [pc, #36]	@ (8004d60 <MX_UART4_Init+0x4c>)
 8004d3a:	220c      	movs	r2, #12
 8004d3c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004d3e:	4b08      	ldr	r3, [pc, #32]	@ (8004d60 <MX_UART4_Init+0x4c>)
 8004d40:	2200      	movs	r2, #0
 8004d42:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d44:	4b06      	ldr	r3, [pc, #24]	@ (8004d60 <MX_UART4_Init+0x4c>)
 8004d46:	2200      	movs	r2, #0
 8004d48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8004d4a:	4805      	ldr	r0, [pc, #20]	@ (8004d60 <MX_UART4_Init+0x4c>)
 8004d4c:	f005 f93c 	bl	8009fc8 <HAL_UART_Init>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d001      	beq.n	8004d5a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8004d56:	f000 fc83 	bl	8005660 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8004d5a:	bf00      	nop
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	20000478 	.word	0x20000478
 8004d64:	40004c00 	.word	0x40004c00

08004d68 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004d6c:	4b11      	ldr	r3, [pc, #68]	@ (8004db4 <MX_USART2_UART_Init+0x4c>)
 8004d6e:	4a12      	ldr	r2, [pc, #72]	@ (8004db8 <MX_USART2_UART_Init+0x50>)
 8004d70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8004d72:	4b10      	ldr	r3, [pc, #64]	@ (8004db4 <MX_USART2_UART_Init+0x4c>)
 8004d74:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8004d78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004d7a:	4b0e      	ldr	r3, [pc, #56]	@ (8004db4 <MX_USART2_UART_Init+0x4c>)
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004d80:	4b0c      	ldr	r3, [pc, #48]	@ (8004db4 <MX_USART2_UART_Init+0x4c>)
 8004d82:	2200      	movs	r2, #0
 8004d84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004d86:	4b0b      	ldr	r3, [pc, #44]	@ (8004db4 <MX_USART2_UART_Init+0x4c>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004d8c:	4b09      	ldr	r3, [pc, #36]	@ (8004db4 <MX_USART2_UART_Init+0x4c>)
 8004d8e:	220c      	movs	r2, #12
 8004d90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004d92:	4b08      	ldr	r3, [pc, #32]	@ (8004db4 <MX_USART2_UART_Init+0x4c>)
 8004d94:	2200      	movs	r2, #0
 8004d96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d98:	4b06      	ldr	r3, [pc, #24]	@ (8004db4 <MX_USART2_UART_Init+0x4c>)
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004d9e:	4805      	ldr	r0, [pc, #20]	@ (8004db4 <MX_USART2_UART_Init+0x4c>)
 8004da0:	f005 f912 	bl	8009fc8 <HAL_UART_Init>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d001      	beq.n	8004dae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004daa:	f000 fc59 	bl	8005660 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004dae:	bf00      	nop
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	200004bc 	.word	0x200004bc
 8004db8:	40004400 	.word	0x40004400

08004dbc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004dc0:	4b11      	ldr	r3, [pc, #68]	@ (8004e08 <MX_USART3_UART_Init+0x4c>)
 8004dc2:	4a12      	ldr	r2, [pc, #72]	@ (8004e0c <MX_USART3_UART_Init+0x50>)
 8004dc4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8004dc6:	4b10      	ldr	r3, [pc, #64]	@ (8004e08 <MX_USART3_UART_Init+0x4c>)
 8004dc8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8004dcc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004dce:	4b0e      	ldr	r3, [pc, #56]	@ (8004e08 <MX_USART3_UART_Init+0x4c>)
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8004e08 <MX_USART3_UART_Init+0x4c>)
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004dda:	4b0b      	ldr	r3, [pc, #44]	@ (8004e08 <MX_USART3_UART_Init+0x4c>)
 8004ddc:	2200      	movs	r2, #0
 8004dde:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004de0:	4b09      	ldr	r3, [pc, #36]	@ (8004e08 <MX_USART3_UART_Init+0x4c>)
 8004de2:	220c      	movs	r2, #12
 8004de4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004de6:	4b08      	ldr	r3, [pc, #32]	@ (8004e08 <MX_USART3_UART_Init+0x4c>)
 8004de8:	2200      	movs	r2, #0
 8004dea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004dec:	4b06      	ldr	r3, [pc, #24]	@ (8004e08 <MX_USART3_UART_Init+0x4c>)
 8004dee:	2200      	movs	r2, #0
 8004df0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004df2:	4805      	ldr	r0, [pc, #20]	@ (8004e08 <MX_USART3_UART_Init+0x4c>)
 8004df4:	f005 f8e8 	bl	8009fc8 <HAL_UART_Init>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d001      	beq.n	8004e02 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004dfe:	f000 fc2f 	bl	8005660 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004e02:	bf00      	nop
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	20000500 	.word	0x20000500
 8004e0c:	40004800 	.word	0x40004800

08004e10 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004e14:	4b11      	ldr	r3, [pc, #68]	@ (8004e5c <MX_USART6_UART_Init+0x4c>)
 8004e16:	4a12      	ldr	r2, [pc, #72]	@ (8004e60 <MX_USART6_UART_Init+0x50>)
 8004e18:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 19200;
 8004e1a:	4b10      	ldr	r3, [pc, #64]	@ (8004e5c <MX_USART6_UART_Init+0x4c>)
 8004e1c:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8004e20:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004e22:	4b0e      	ldr	r3, [pc, #56]	@ (8004e5c <MX_USART6_UART_Init+0x4c>)
 8004e24:	2200      	movs	r2, #0
 8004e26:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004e28:	4b0c      	ldr	r3, [pc, #48]	@ (8004e5c <MX_USART6_UART_Init+0x4c>)
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004e2e:	4b0b      	ldr	r3, [pc, #44]	@ (8004e5c <MX_USART6_UART_Init+0x4c>)
 8004e30:	2200      	movs	r2, #0
 8004e32:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004e34:	4b09      	ldr	r3, [pc, #36]	@ (8004e5c <MX_USART6_UART_Init+0x4c>)
 8004e36:	220c      	movs	r2, #12
 8004e38:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004e3a:	4b08      	ldr	r3, [pc, #32]	@ (8004e5c <MX_USART6_UART_Init+0x4c>)
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004e40:	4b06      	ldr	r3, [pc, #24]	@ (8004e5c <MX_USART6_UART_Init+0x4c>)
 8004e42:	2200      	movs	r2, #0
 8004e44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004e46:	4805      	ldr	r0, [pc, #20]	@ (8004e5c <MX_USART6_UART_Init+0x4c>)
 8004e48:	f005 f8be 	bl	8009fc8 <HAL_UART_Init>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d001      	beq.n	8004e56 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8004e52:	f000 fc05 	bl	8005660 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004e56:	bf00      	nop
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	20000544 	.word	0x20000544
 8004e60:	40011400 	.word	0x40011400

08004e64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b08a      	sub	sp, #40	@ 0x28
 8004e68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e6a:	f107 0314 	add.w	r3, r7, #20
 8004e6e:	2200      	movs	r2, #0
 8004e70:	601a      	str	r2, [r3, #0]
 8004e72:	605a      	str	r2, [r3, #4]
 8004e74:	609a      	str	r2, [r3, #8]
 8004e76:	60da      	str	r2, [r3, #12]
 8004e78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	613b      	str	r3, [r7, #16]
 8004e7e:	4b4c      	ldr	r3, [pc, #304]	@ (8004fb0 <MX_GPIO_Init+0x14c>)
 8004e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e82:	4a4b      	ldr	r2, [pc, #300]	@ (8004fb0 <MX_GPIO_Init+0x14c>)
 8004e84:	f043 0304 	orr.w	r3, r3, #4
 8004e88:	6313      	str	r3, [r2, #48]	@ 0x30
 8004e8a:	4b49      	ldr	r3, [pc, #292]	@ (8004fb0 <MX_GPIO_Init+0x14c>)
 8004e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e8e:	f003 0304 	and.w	r3, r3, #4
 8004e92:	613b      	str	r3, [r7, #16]
 8004e94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004e96:	2300      	movs	r3, #0
 8004e98:	60fb      	str	r3, [r7, #12]
 8004e9a:	4b45      	ldr	r3, [pc, #276]	@ (8004fb0 <MX_GPIO_Init+0x14c>)
 8004e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e9e:	4a44      	ldr	r2, [pc, #272]	@ (8004fb0 <MX_GPIO_Init+0x14c>)
 8004ea0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ea4:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ea6:	4b42      	ldr	r3, [pc, #264]	@ (8004fb0 <MX_GPIO_Init+0x14c>)
 8004ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eae:	60fb      	str	r3, [r7, #12]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	60bb      	str	r3, [r7, #8]
 8004eb6:	4b3e      	ldr	r3, [pc, #248]	@ (8004fb0 <MX_GPIO_Init+0x14c>)
 8004eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eba:	4a3d      	ldr	r2, [pc, #244]	@ (8004fb0 <MX_GPIO_Init+0x14c>)
 8004ebc:	f043 0301 	orr.w	r3, r3, #1
 8004ec0:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ec2:	4b3b      	ldr	r3, [pc, #236]	@ (8004fb0 <MX_GPIO_Init+0x14c>)
 8004ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ec6:	f003 0301 	and.w	r3, r3, #1
 8004eca:	60bb      	str	r3, [r7, #8]
 8004ecc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ece:	2300      	movs	r3, #0
 8004ed0:	607b      	str	r3, [r7, #4]
 8004ed2:	4b37      	ldr	r3, [pc, #220]	@ (8004fb0 <MX_GPIO_Init+0x14c>)
 8004ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ed6:	4a36      	ldr	r2, [pc, #216]	@ (8004fb0 <MX_GPIO_Init+0x14c>)
 8004ed8:	f043 0302 	orr.w	r3, r3, #2
 8004edc:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ede:	4b34      	ldr	r3, [pc, #208]	@ (8004fb0 <MX_GPIO_Init+0x14c>)
 8004ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ee2:	f003 0302 	and.w	r3, r3, #2
 8004ee6:	607b      	str	r3, [r7, #4]
 8004ee8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|CS_Pin|Buzzer_Pin|GATE_D_Pin
 8004eea:	2200      	movs	r2, #0
 8004eec:	f642 4112 	movw	r1, #11282	@ 0x2c12
 8004ef0:	4830      	ldr	r0, [pc, #192]	@ (8004fb4 <MX_GPIO_Init+0x150>)
 8004ef2:	f002 f879 	bl	8006fe8 <HAL_GPIO_WritePin>
                          |GATE_C_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M0_Pin|M1_Pin|FN_Pin|LED2_Pin
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f246 011f 	movw	r1, #24607	@ 0x601f
 8004efc:	482e      	ldr	r0, [pc, #184]	@ (8004fb8 <MX_GPIO_Init+0x154>)
 8004efe:	f002 f873 	bl	8006fe8 <HAL_GPIO_WritePin>
                          |LED1_Pin|GATE_B_Pin|GATE_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 CS_Pin Buzzer_Pin GATE_D_Pin
                           GATE_C_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|CS_Pin|Buzzer_Pin|GATE_D_Pin
 8004f02:	f642 4312 	movw	r3, #11282	@ 0x2c12
 8004f06:	617b      	str	r3, [r7, #20]
                          |GATE_C_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f10:	2300      	movs	r3, #0
 8004f12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f14:	f107 0314 	add.w	r3, r7, #20
 8004f18:	4619      	mov	r1, r3
 8004f1a:	4826      	ldr	r0, [pc, #152]	@ (8004fb4 <MX_GPIO_Init+0x150>)
 8004f1c:	f001 feb8 	bl	8006c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004f20:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004f24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004f26:	2300      	movs	r3, #0
 8004f28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004f2a:	2302      	movs	r3, #2
 8004f2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f2e:	f107 0314 	add.w	r3, r7, #20
 8004f32:	4619      	mov	r1, r3
 8004f34:	481f      	ldr	r0, [pc, #124]	@ (8004fb4 <MX_GPIO_Init+0x150>)
 8004f36:	f001 feab 	bl	8006c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : M0_Pin M1_Pin FN_Pin LED2_Pin
                           LED1_Pin GATE_B_Pin GATE_A_Pin */
  GPIO_InitStruct.Pin = M0_Pin|M1_Pin|FN_Pin|LED2_Pin
 8004f3a:	f246 031f 	movw	r3, #24607	@ 0x601f
 8004f3e:	617b      	str	r3, [r7, #20]
                          |LED1_Pin|GATE_B_Pin|GATE_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f40:	2301      	movs	r3, #1
 8004f42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f44:	2300      	movs	r3, #0
 8004f46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f4c:	f107 0314 	add.w	r3, r7, #20
 8004f50:	4619      	mov	r1, r3
 8004f52:	4819      	ldr	r0, [pc, #100]	@ (8004fb8 <MX_GPIO_Init+0x154>)
 8004f54:	f001 fe9c 	bl	8006c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : SECINP_Pin */
  GPIO_InitStruct.Pin = SECINP_Pin;
 8004f58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004f5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f62:	2301      	movs	r3, #1
 8004f64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SECINP_GPIO_Port, &GPIO_InitStruct);
 8004f66:	f107 0314 	add.w	r3, r7, #20
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	4812      	ldr	r0, [pc, #72]	@ (8004fb8 <MX_GPIO_Init+0x154>)
 8004f6e:	f001 fe8f 	bl	8006c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8004f72:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004f76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8004f80:	f107 0314 	add.w	r3, r7, #20
 8004f84:	4619      	mov	r1, r3
 8004f86:	480b      	ldr	r0, [pc, #44]	@ (8004fb4 <MX_GPIO_Init+0x150>)
 8004f88:	f001 fe82 	bl	8006c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|INT2_Pin;
 8004f8c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004f90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004f92:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004f96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f9c:	f107 0314 	add.w	r3, r7, #20
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	4805      	ldr	r0, [pc, #20]	@ (8004fb8 <MX_GPIO_Init+0x154>)
 8004fa4:	f001 fe74 	bl	8006c90 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004fa8:	bf00      	nop
 8004faa:	3728      	adds	r7, #40	@ 0x28
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	40023800 	.word	0x40023800
 8004fb4:	40020800 	.word	0x40020800
 8004fb8:	40020400 	.word	0x40020400

08004fbc <E220_CONFIG>:
		}


}
void E220_CONFIG(uint8_t ADDH, uint8_t ADDL, uint8_t CHN, uint8_t MODE)
{
 8004fbc:	b590      	push	{r4, r7, lr}
 8004fbe:	b087      	sub	sp, #28
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	4604      	mov	r4, r0
 8004fc4:	4608      	mov	r0, r1
 8004fc6:	4611      	mov	r1, r2
 8004fc8:	461a      	mov	r2, r3
 8004fca:	4623      	mov	r3, r4
 8004fcc:	71fb      	strb	r3, [r7, #7]
 8004fce:	4603      	mov	r3, r0
 8004fd0:	71bb      	strb	r3, [r7, #6]
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	717b      	strb	r3, [r7, #5]
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	713b      	strb	r3, [r7, #4]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, SET);
 8004fda:	2201      	movs	r2, #1
 8004fdc:	2104      	movs	r1, #4
 8004fde:	4824      	ldr	r0, [pc, #144]	@ (8005070 <E220_CONFIG+0xb4>)
 8004fe0:	f002 f802 	bl	8006fe8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET);
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	2102      	movs	r1, #2
 8004fe8:	4821      	ldr	r0, [pc, #132]	@ (8005070 <E220_CONFIG+0xb4>)
 8004fea:	f001 fffd 	bl	8006fe8 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8004fee:	2032      	movs	r0, #50	@ 0x32
 8004ff0:	f000 fffa 	bl	8005fe8 <HAL_Delay>

    char cfg_buff[8] = {0}; // E220 için 8 elemanlı bir dizi kullanıyoruz
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	60fb      	str	r3, [r7, #12]
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	613b      	str	r3, [r7, #16]
    enum {Transparent, Fixed} mode;
    mode = MODE;
 8004ffc:	793b      	ldrb	r3, [r7, #4]
 8004ffe:	75fb      	strb	r3, [r7, #23]

    cfg_buff[0] = ADDH;
 8005000:	79fb      	ldrb	r3, [r7, #7]
 8005002:	733b      	strb	r3, [r7, #12]
    cfg_buff[1] = ADDL;
 8005004:	79bb      	ldrb	r3, [r7, #6]
 8005006:	737b      	strb	r3, [r7, #13]
    cfg_buff[2] = 0x62;  // 62 2.4kbps 63 4.8 kpbs
 8005008:	2362      	movs	r3, #98	@ 0x62
 800500a:	73bb      	strb	r3, [r7, #14]
    cfg_buff[3] = 0x00;
 800500c:	2300      	movs	r3, #0
 800500e:	73fb      	strb	r3, [r7, #15]
    cfg_buff[4] = CHN;
 8005010:	797b      	ldrb	r3, [r7, #5]
 8005012:	743b      	strb	r3, [r7, #16]

    switch(mode){
 8005014:	7dfb      	ldrb	r3, [r7, #23]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d002      	beq.n	8005020 <E220_CONFIG+0x64>
 800501a:	2b01      	cmp	r3, #1
 800501c:	d003      	beq.n	8005026 <E220_CONFIG+0x6a>
 800501e:	e005      	b.n	800502c <E220_CONFIG+0x70>
        case Transparent:
            cfg_buff[5] = 0x00;  // opsiyon
 8005020:	2300      	movs	r3, #0
 8005022:	747b      	strb	r3, [r7, #17]
            break;
 8005024:	e004      	b.n	8005030 <E220_CONFIG+0x74>
        case Fixed:
            cfg_buff[5] = 0x11;
 8005026:	2311      	movs	r3, #17
 8005028:	747b      	strb	r3, [r7, #17]
            break;
 800502a:	e001      	b.n	8005030 <E220_CONFIG+0x74>
        default:
            cfg_buff[5] = 0x11;
 800502c:	2311      	movs	r3, #17
 800502e:	747b      	strb	r3, [r7, #17]
     }

     cfg_buff[6] = 0x00;
 8005030:	2300      	movs	r3, #0
 8005032:	74bb      	strb	r3, [r7, #18]
     cfg_buff[7] = 0x00;
 8005034:	2300      	movs	r3, #0
 8005036:	74fb      	strb	r3, [r7, #19]


    HAL_UART_Transmit(&huart3, (uint8_t*) cfg_buff, 8, 1000);
 8005038:	f107 010c 	add.w	r1, r7, #12
 800503c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005040:	2208      	movs	r2, #8
 8005042:	480c      	ldr	r0, [pc, #48]	@ (8005074 <E220_CONFIG+0xb8>)
 8005044:	f005 f80d 	bl	800a062 <HAL_UART_Transmit>

    HAL_Delay(25);
 8005048:	2019      	movs	r0, #25
 800504a:	f000 ffcd 	bl	8005fe8 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET);
 800504e:	2200      	movs	r2, #0
 8005050:	2104      	movs	r1, #4
 8005052:	4807      	ldr	r0, [pc, #28]	@ (8005070 <E220_CONFIG+0xb4>)
 8005054:	f001 ffc8 	bl	8006fe8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 8005058:	2200      	movs	r2, #0
 800505a:	2102      	movs	r1, #2
 800505c:	4804      	ldr	r0, [pc, #16]	@ (8005070 <E220_CONFIG+0xb4>)
 800505e:	f001 ffc3 	bl	8006fe8 <HAL_GPIO_WritePin>
    HAL_Delay(25);
 8005062:	2019      	movs	r0, #25
 8005064:	f000 ffc0 	bl	8005fe8 <HAL_Delay>
}
 8005068:	bf00      	nop
 800506a:	371c      	adds	r7, #28
 800506c:	46bd      	mov	sp, r7
 800506e:	bd90      	pop	{r4, r7, pc}
 8005070:	40020400 	.word	0x40020400
 8005074:	20000500 	.word	0x20000500

08005078 <BME280_Get_Altitude>:

float BME280_Get_Altitude(void)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
	float press = comp_data.pressure / 10000.0;
 800507e:	4b36      	ldr	r3, [pc, #216]	@ (8005158 <BME280_Get_Altitude+0xe0>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4618      	mov	r0, r3
 8005084:	f7fb fa56 	bl	8000534 <__aeabi_ui2d>
 8005088:	a32b      	add	r3, pc, #172	@ (adr r3, 8005138 <BME280_Get_Altitude+0xc0>)
 800508a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800508e:	f7fb fbf5 	bl	800087c <__aeabi_ddiv>
 8005092:	4602      	mov	r2, r0
 8005094:	460b      	mov	r3, r1
 8005096:	4610      	mov	r0, r2
 8005098:	4619      	mov	r1, r3
 800509a:	f7fb fdbd 	bl	8000c18 <__aeabi_d2f>
 800509e:	4603      	mov	r3, r0
 80050a0:	607b      	str	r3, [r7, #4]
	float temp = comp_data.temperature / 100.0;
 80050a2:	4b2d      	ldr	r3, [pc, #180]	@ (8005158 <BME280_Get_Altitude+0xe0>)
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	4618      	mov	r0, r3
 80050a8:	f7fb fa54 	bl	8000554 <__aeabi_i2d>
 80050ac:	f04f 0200 	mov.w	r2, #0
 80050b0:	4b2a      	ldr	r3, [pc, #168]	@ (800515c <BME280_Get_Altitude+0xe4>)
 80050b2:	f7fb fbe3 	bl	800087c <__aeabi_ddiv>
 80050b6:	4602      	mov	r2, r0
 80050b8:	460b      	mov	r3, r1
 80050ba:	4610      	mov	r0, r2
 80050bc:	4619      	mov	r1, r3
 80050be:	f7fb fdab 	bl	8000c18 <__aeabi_d2f>
 80050c2:	4603      	mov	r3, r0
 80050c4:	603b      	str	r3, [r7, #0]
	alt = 44330 * (1 - pow((press / 1013.25),(1/5.255)));
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f7fb fa56 	bl	8000578 <__aeabi_f2d>
 80050cc:	a31c      	add	r3, pc, #112	@ (adr r3, 8005140 <BME280_Get_Altitude+0xc8>)
 80050ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d2:	f7fb fbd3 	bl	800087c <__aeabi_ddiv>
 80050d6:	4602      	mov	r2, r0
 80050d8:	460b      	mov	r3, r1
 80050da:	ec43 2b17 	vmov	d7, r2, r3
 80050de:	ed9f 1b1a 	vldr	d1, [pc, #104]	@ 8005148 <BME280_Get_Altitude+0xd0>
 80050e2:	eeb0 0a47 	vmov.f32	s0, s14
 80050e6:	eef0 0a67 	vmov.f32	s1, s15
 80050ea:	f008 fead 	bl	800de48 <pow>
 80050ee:	ec53 2b10 	vmov	r2, r3, d0
 80050f2:	f04f 0000 	mov.w	r0, #0
 80050f6:	491a      	ldr	r1, [pc, #104]	@ (8005160 <BME280_Get_Altitude+0xe8>)
 80050f8:	f7fb f8de 	bl	80002b8 <__aeabi_dsub>
 80050fc:	4602      	mov	r2, r0
 80050fe:	460b      	mov	r3, r1
 8005100:	4610      	mov	r0, r2
 8005102:	4619      	mov	r1, r3
 8005104:	a312      	add	r3, pc, #72	@ (adr r3, 8005150 <BME280_Get_Altitude+0xd8>)
 8005106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800510a:	f7fb fa8d 	bl	8000628 <__aeabi_dmul>
 800510e:	4602      	mov	r2, r0
 8005110:	460b      	mov	r3, r1
 8005112:	4610      	mov	r0, r2
 8005114:	4619      	mov	r1, r3
 8005116:	f7fb fd7f 	bl	8000c18 <__aeabi_d2f>
 800511a:	4603      	mov	r3, r0
 800511c:	4a11      	ldr	r2, [pc, #68]	@ (8005164 <BME280_Get_Altitude+0xec>)
 800511e:	6013      	str	r3, [r2, #0]
	//alt = ((pow((P0/press), (1/5.257))-1) * (temp + 273.15)) / 0.0065;

	return (alt);
 8005120:	4b10      	ldr	r3, [pc, #64]	@ (8005164 <BME280_Get_Altitude+0xec>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	ee07 3a90 	vmov	s15, r3
}
 8005128:	eeb0 0a67 	vmov.f32	s0, s15
 800512c:	3708      	adds	r7, #8
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	f3af 8000 	nop.w
 8005138:	00000000 	.word	0x00000000
 800513c:	40c38800 	.word	0x40c38800
 8005140:	00000000 	.word	0x00000000
 8005144:	408faa00 	.word	0x408faa00
 8005148:	ccd9456c 	.word	0xccd9456c
 800514c:	3fc85b95 	.word	0x3fc85b95
 8005150:	00000000 	.word	0x00000000
 8005154:	40e5a540 	.word	0x40e5a540
 8005158:	200025d0 	.word	0x200025d0
 800515c:	40590000 	.word	0x40590000
 8005160:	3ff00000 	.word	0x3ff00000
 8005164:	200022b0 	.word	0x200022b0

08005168 <user_i2c_read>:
int8_t user_i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af02      	add	r7, sp, #8
 800516e:	603a      	str	r2, [r7, #0]
 8005170:	461a      	mov	r2, r3
 8005172:	4603      	mov	r3, r0
 8005174:	71fb      	strb	r3, [r7, #7]
 8005176:	460b      	mov	r3, r1
 8005178:	71bb      	strb	r3, [r7, #6]
 800517a:	4613      	mov	r3, r2
 800517c:	80bb      	strh	r3, [r7, #4]
  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 800517e:	79fb      	ldrb	r3, [r7, #7]
 8005180:	b29b      	uxth	r3, r3
 8005182:	005b      	lsls	r3, r3, #1
 8005184:	b299      	uxth	r1, r3
 8005186:	1dba      	adds	r2, r7, #6
 8005188:	230a      	movs	r3, #10
 800518a:	9300      	str	r3, [sp, #0]
 800518c:	2301      	movs	r3, #1
 800518e:	4811      	ldr	r0, [pc, #68]	@ (80051d4 <user_i2c_read+0x6c>)
 8005190:	f002 f8a2 	bl	80072d8 <HAL_I2C_Master_Transmit>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d002      	beq.n	80051a0 <user_i2c_read+0x38>
 800519a:	f04f 33ff 	mov.w	r3, #4294967295
 800519e:	e014      	b.n	80051ca <user_i2c_read+0x62>
  if(HAL_I2C_Master_Receive(&hi2c1, (id << 1) | 0x01, data, len, 10) != HAL_OK) return -1;
 80051a0:	79fb      	ldrb	r3, [r7, #7]
 80051a2:	005b      	lsls	r3, r3, #1
 80051a4:	b21b      	sxth	r3, r3
 80051a6:	f043 0301 	orr.w	r3, r3, #1
 80051aa:	b21b      	sxth	r3, r3
 80051ac:	b299      	uxth	r1, r3
 80051ae:	88bb      	ldrh	r3, [r7, #4]
 80051b0:	220a      	movs	r2, #10
 80051b2:	9200      	str	r2, [sp, #0]
 80051b4:	683a      	ldr	r2, [r7, #0]
 80051b6:	4807      	ldr	r0, [pc, #28]	@ (80051d4 <user_i2c_read+0x6c>)
 80051b8:	f002 f98c 	bl	80074d4 <HAL_I2C_Master_Receive>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d002      	beq.n	80051c8 <user_i2c_read+0x60>
 80051c2:	f04f 33ff 	mov.w	r3, #4294967295
 80051c6:	e000      	b.n	80051ca <user_i2c_read+0x62>

  return 0;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3708      	adds	r7, #8
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	20000264 	.word	0x20000264

080051d8 <user_delay_ms>:

void user_delay_ms(uint32_t period)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  HAL_Delay(period);
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 ff01 	bl	8005fe8 <HAL_Delay>
}
 80051e6:	bf00      	nop
 80051e8:	3708      	adds	r7, #8
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
	...

080051f0 <user_i2c_write>:
int8_t user_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b086      	sub	sp, #24
 80051f4:	af02      	add	r7, sp, #8
 80051f6:	603a      	str	r2, [r7, #0]
 80051f8:	461a      	mov	r2, r3
 80051fa:	4603      	mov	r3, r0
 80051fc:	71fb      	strb	r3, [r7, #7]
 80051fe:	460b      	mov	r3, r1
 8005200:	71bb      	strb	r3, [r7, #6]
 8005202:	4613      	mov	r3, r2
 8005204:	80bb      	strh	r3, [r7, #4]
  int8_t *buf;
  buf = malloc(len +1);
 8005206:	88bb      	ldrh	r3, [r7, #4]
 8005208:	3301      	adds	r3, #1
 800520a:	4618      	mov	r0, r3
 800520c:	f006 f81a 	bl	800b244 <malloc>
 8005210:	4603      	mov	r3, r0
 8005212:	60fb      	str	r3, [r7, #12]
  buf[0] = reg_addr;
 8005214:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	701a      	strb	r2, [r3, #0]
  memcpy(buf +1, data, len);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	3301      	adds	r3, #1
 8005220:	88ba      	ldrh	r2, [r7, #4]
 8005222:	6839      	ldr	r1, [r7, #0]
 8005224:	4618      	mov	r0, r3
 8005226:	f007 f87e 	bl	800c326 <memcpy>

  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 800522a:	79fb      	ldrb	r3, [r7, #7]
 800522c:	b29b      	uxth	r3, r3
 800522e:	005b      	lsls	r3, r3, #1
 8005230:	b299      	uxth	r1, r3
 8005232:	88bb      	ldrh	r3, [r7, #4]
 8005234:	3301      	adds	r3, #1
 8005236:	b29b      	uxth	r3, r3
 8005238:	f04f 32ff 	mov.w	r2, #4294967295
 800523c:	9200      	str	r2, [sp, #0]
 800523e:	68fa      	ldr	r2, [r7, #12]
 8005240:	4808      	ldr	r0, [pc, #32]	@ (8005264 <user_i2c_write+0x74>)
 8005242:	f002 f849 	bl	80072d8 <HAL_I2C_Master_Transmit>
 8005246:	4603      	mov	r3, r0
 8005248:	2b00      	cmp	r3, #0
 800524a:	d002      	beq.n	8005252 <user_i2c_write+0x62>
 800524c:	f04f 33ff 	mov.w	r3, #4294967295
 8005250:	e003      	b.n	800525a <user_i2c_write+0x6a>

  free(buf);
 8005252:	68f8      	ldr	r0, [r7, #12]
 8005254:	f005 fffe 	bl	800b254 <free>
  return 0;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3710      	adds	r7, #16
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	20000264 	.word	0x20000264

08005268 <union_converter>:

void union_converter(void)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b08e      	sub	sp, #56	@ 0x38
 800526c:	af00      	add	r7, sp, #0
	 float2unit8 f2u8_gpsalt;
    f2u8_gpsalt.fVal=gps.altitude;
 800526e:	4ba0      	ldr	r3, [pc, #640]	@ (80054f0 <union_converter+0x288>)
 8005270:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005274:	4610      	mov	r0, r2
 8005276:	4619      	mov	r1, r3
 8005278:	f7fb fcce 	bl	8000c18 <__aeabi_d2f>
 800527c:	4603      	mov	r3, r0
 800527e:	62bb      	str	r3, [r7, #40]	@ 0x28
		 for(uint8_t i=0;i<4;i++)
 8005280:	2300      	movs	r3, #0
 8005282:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8005286:	e00f      	b.n	80052a8 <union_converter+0x40>
		 {
			loratx[i+5]=f2u8_gpsalt.array[i];
 8005288:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800528c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005290:	3305      	adds	r3, #5
 8005292:	3238      	adds	r2, #56	@ 0x38
 8005294:	443a      	add	r2, r7
 8005296:	f812 1c10 	ldrb.w	r1, [r2, #-16]
 800529a:	4a96      	ldr	r2, [pc, #600]	@ (80054f4 <union_converter+0x28c>)
 800529c:	54d1      	strb	r1, [r2, r3]
		 for(uint8_t i=0;i<4;i++)
 800529e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80052a2:	3301      	adds	r3, #1
 80052a4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80052a8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80052ac:	2b03      	cmp	r3, #3
 80052ae:	d9eb      	bls.n	8005288 <union_converter+0x20>
		 }

	 float2unit8 f2u8_latitude;
	 f2u8_latitude.fVal=gps.latitude;
 80052b0:	4b8f      	ldr	r3, [pc, #572]	@ (80054f0 <union_converter+0x288>)
 80052b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b6:	4610      	mov	r0, r2
 80052b8:	4619      	mov	r1, r3
 80052ba:	f7fb fcad 	bl	8000c18 <__aeabi_d2f>
 80052be:	4603      	mov	r3, r0
 80052c0:	627b      	str	r3, [r7, #36]	@ 0x24
		 for(uint8_t i=0;i<4;i++)
 80052c2:	2300      	movs	r3, #0
 80052c4:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 80052c8:	e00f      	b.n	80052ea <union_converter+0x82>
		 {
			loratx[i+9]=f2u8_latitude.array[i];
 80052ca:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 80052ce:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80052d2:	3309      	adds	r3, #9
 80052d4:	3238      	adds	r2, #56	@ 0x38
 80052d6:	443a      	add	r2, r7
 80052d8:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 80052dc:	4a85      	ldr	r2, [pc, #532]	@ (80054f4 <union_converter+0x28c>)
 80052de:	54d1      	strb	r1, [r2, r3]
		 for(uint8_t i=0;i<4;i++)
 80052e0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80052e4:	3301      	adds	r3, #1
 80052e6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 80052ea:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80052ee:	2b03      	cmp	r3, #3
 80052f0:	d9eb      	bls.n	80052ca <union_converter+0x62>
		 }

	 float2unit8 f2u8_longitude;
	 f2u8_longitude.fVal=gps.longitude;
 80052f2:	4b7f      	ldr	r3, [pc, #508]	@ (80054f0 <union_converter+0x288>)
 80052f4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80052f8:	4610      	mov	r0, r2
 80052fa:	4619      	mov	r1, r3
 80052fc:	f7fb fc8c 	bl	8000c18 <__aeabi_d2f>
 8005300:	4603      	mov	r3, r0
 8005302:	623b      	str	r3, [r7, #32]
		 for(uint8_t i=0;i<4;i++)
 8005304:	2300      	movs	r3, #0
 8005306:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 800530a:	e00f      	b.n	800532c <union_converter+0xc4>
		 {
			loratx[i+13]=f2u8_longitude.array[i];
 800530c:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 8005310:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8005314:	330d      	adds	r3, #13
 8005316:	3238      	adds	r2, #56	@ 0x38
 8005318:	443a      	add	r2, r7
 800531a:	f812 1c18 	ldrb.w	r1, [r2, #-24]
 800531e:	4a75      	ldr	r2, [pc, #468]	@ (80054f4 <union_converter+0x28c>)
 8005320:	54d1      	strb	r1, [r2, r3]
		 for(uint8_t i=0;i<4;i++)
 8005322:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8005326:	3301      	adds	r3, #1
 8005328:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 800532c:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8005330:	2b03      	cmp	r3, #3
 8005332:	d9eb      	bls.n	800530c <union_converter+0xa4>
		 }

	 float2unit8 f2u8_altitude;
	 f2u8_altitude.fVal=altitude;
 8005334:	4b70      	ldr	r3, [pc, #448]	@ (80054f8 <union_converter+0x290>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	61fb      	str	r3, [r7, #28]
		 for(uint8_t i=0;i<4;i++)
 800533a:	2300      	movs	r3, #0
 800533c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 8005340:	e00f      	b.n	8005362 <union_converter+0xfa>
		 {
			loratx[i+17]=f2u8_altitude.array[i];
 8005342:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 8005346:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800534a:	3311      	adds	r3, #17
 800534c:	3238      	adds	r2, #56	@ 0x38
 800534e:	443a      	add	r2, r7
 8005350:	f812 1c1c 	ldrb.w	r1, [r2, #-28]
 8005354:	4a67      	ldr	r2, [pc, #412]	@ (80054f4 <union_converter+0x28c>)
 8005356:	54d1      	strb	r1, [r2, r3]
		 for(uint8_t i=0;i<4;i++)
 8005358:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800535c:	3301      	adds	r3, #1
 800535e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 8005362:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8005366:	2b03      	cmp	r3, #3
 8005368:	d9eb      	bls.n	8005342 <union_converter+0xda>
		 }
	 float2unit8 f2u8_speed;
	 f2u8_speed.fVal=speed;
 800536a:	4b64      	ldr	r3, [pc, #400]	@ (80054fc <union_converter+0x294>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	61bb      	str	r3, [r7, #24]
		 for(uint8_t i=0;i<4;i++)
 8005370:	2300      	movs	r3, #0
 8005372:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8005376:	e00f      	b.n	8005398 <union_converter+0x130>
		 {
			loratx[i+21]=f2u8_speed.array[i];
 8005378:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800537c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005380:	3315      	adds	r3, #21
 8005382:	3238      	adds	r2, #56	@ 0x38
 8005384:	443a      	add	r2, r7
 8005386:	f812 1c20 	ldrb.w	r1, [r2, #-32]
 800538a:	4a5a      	ldr	r2, [pc, #360]	@ (80054f4 <union_converter+0x28c>)
 800538c:	54d1      	strb	r1, [r2, r3]
		 for(uint8_t i=0;i<4;i++)
 800538e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005392:	3301      	adds	r3, #1
 8005394:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8005398:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800539c:	2b03      	cmp	r3, #3
 800539e:	d9eb      	bls.n	8005378 <union_converter+0x110>
		 }

	 float2unit8 f2u8_temp;
	 f2u8_temp.fVal=temperature;
 80053a0:	4b57      	ldr	r3, [pc, #348]	@ (8005500 <union_converter+0x298>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	617b      	str	r3, [r7, #20]
		 for(uint8_t i=0;i<4;i++)
 80053a6:	2300      	movs	r3, #0
 80053a8:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 80053ac:	e00f      	b.n	80053ce <union_converter+0x166>
		 {
			loratx[i+25]=f2u8_temp.array[i];
 80053ae:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 80053b2:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80053b6:	3319      	adds	r3, #25
 80053b8:	3238      	adds	r2, #56	@ 0x38
 80053ba:	443a      	add	r2, r7
 80053bc:	f812 1c24 	ldrb.w	r1, [r2, #-36]
 80053c0:	4a4c      	ldr	r2, [pc, #304]	@ (80054f4 <union_converter+0x28c>)
 80053c2:	54d1      	strb	r1, [r2, r3]
		 for(uint8_t i=0;i<4;i++)
 80053c4:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80053c8:	3301      	adds	r3, #1
 80053ca:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 80053ce:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80053d2:	2b03      	cmp	r3, #3
 80053d4:	d9eb      	bls.n	80053ae <union_converter+0x146>
		 }

	 float2unit8 f2u8_accx;
	 f2u8_accx.fVal=Lsm_Sensor.Accel_X;
 80053d6:	4b4b      	ldr	r3, [pc, #300]	@ (8005504 <union_converter+0x29c>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	613b      	str	r3, [r7, #16]
		 for(uint8_t i=0;i<4;i++)
 80053dc:	2300      	movs	r3, #0
 80053de:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 80053e2:	e00f      	b.n	8005404 <union_converter+0x19c>
		 {
			loratx[i+29]=f2u8_accx.array[i];
 80053e4:	f897 2031 	ldrb.w	r2, [r7, #49]	@ 0x31
 80053e8:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80053ec:	331d      	adds	r3, #29
 80053ee:	3238      	adds	r2, #56	@ 0x38
 80053f0:	443a      	add	r2, r7
 80053f2:	f812 1c28 	ldrb.w	r1, [r2, #-40]
 80053f6:	4a3f      	ldr	r2, [pc, #252]	@ (80054f4 <union_converter+0x28c>)
 80053f8:	54d1      	strb	r1, [r2, r3]
		 for(uint8_t i=0;i<4;i++)
 80053fa:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80053fe:	3301      	adds	r3, #1
 8005400:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 8005404:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8005408:	2b03      	cmp	r3, #3
 800540a:	d9eb      	bls.n	80053e4 <union_converter+0x17c>
		 }

	 float2unit8 f2u8_accy;
	 f2u8_accy.fVal=Lsm_Sensor.Accel_Y;
 800540c:	4b3d      	ldr	r3, [pc, #244]	@ (8005504 <union_converter+0x29c>)
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	60fb      	str	r3, [r7, #12]
	 	 for(uint8_t i=0;i<4;i++)
 8005412:	2300      	movs	r3, #0
 8005414:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 8005418:	e00f      	b.n	800543a <union_converter+0x1d2>
		 {
			loratx[i+33]=f2u8_accy.array[i];
 800541a:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800541e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8005422:	3321      	adds	r3, #33	@ 0x21
 8005424:	3238      	adds	r2, #56	@ 0x38
 8005426:	443a      	add	r2, r7
 8005428:	f812 1c2c 	ldrb.w	r1, [r2, #-44]
 800542c:	4a31      	ldr	r2, [pc, #196]	@ (80054f4 <union_converter+0x28c>)
 800542e:	54d1      	strb	r1, [r2, r3]
	 	 for(uint8_t i=0;i<4;i++)
 8005430:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8005434:	3301      	adds	r3, #1
 8005436:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 800543a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800543e:	2b03      	cmp	r3, #3
 8005440:	d9eb      	bls.n	800541a <union_converter+0x1b2>
		 }

	 float2unit8 f2u8_accz;
	 f2u8_accz.fVal=Lsm_Sensor.Accel_Z;
 8005442:	4b30      	ldr	r3, [pc, #192]	@ (8005504 <union_converter+0x29c>)
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	60bb      	str	r3, [r7, #8]
	 	 for(uint8_t i=0;i<4;i++)
 8005448:	2300      	movs	r3, #0
 800544a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800544e:	e00f      	b.n	8005470 <union_converter+0x208>
		 {
		    loratx[i+37]=f2u8_accz.array[i];
 8005450:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8005454:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005458:	3325      	adds	r3, #37	@ 0x25
 800545a:	3238      	adds	r2, #56	@ 0x38
 800545c:	443a      	add	r2, r7
 800545e:	f812 1c30 	ldrb.w	r1, [r2, #-48]
 8005462:	4a24      	ldr	r2, [pc, #144]	@ (80054f4 <union_converter+0x28c>)
 8005464:	54d1      	strb	r1, [r2, r3]
	 	 for(uint8_t i=0;i<4;i++)
 8005466:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800546a:	3301      	adds	r3, #1
 800546c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8005470:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005474:	2b03      	cmp	r3, #3
 8005476:	d9eb      	bls.n	8005450 <union_converter+0x1e8>
		 }

	 float2unit8 f2u8_roll;
	 f2u8_roll.fVal=gravity_normal_angle;// real roll
 8005478:	4b23      	ldr	r3, [pc, #140]	@ (8005508 <union_converter+0x2a0>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	607b      	str	r3, [r7, #4]
		 for(uint8_t i=0;i<4;i++)
 800547e:	2300      	movs	r3, #0
 8005480:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8005484:	e00f      	b.n	80054a6 <union_converter+0x23e>
		 {
			loratx[i+41]=f2u8_roll.array[i];
 8005486:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 800548a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800548e:	3329      	adds	r3, #41	@ 0x29
 8005490:	3238      	adds	r2, #56	@ 0x38
 8005492:	443a      	add	r2, r7
 8005494:	f812 1c34 	ldrb.w	r1, [r2, #-52]
 8005498:	4a16      	ldr	r2, [pc, #88]	@ (80054f4 <union_converter+0x28c>)
 800549a:	54d1      	strb	r1, [r2, r3]
		 for(uint8_t i=0;i<4;i++)
 800549c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80054a0:	3301      	adds	r3, #1
 80054a2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80054a6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80054aa:	2b03      	cmp	r3, #3
 80054ac:	d9eb      	bls.n	8005486 <union_converter+0x21e>
		 }
	 float2unit8 f2u8_pitch;
	 f2u8_pitch.fVal=real_pitch;
 80054ae:	4b17      	ldr	r3, [pc, #92]	@ (800550c <union_converter+0x2a4>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	603b      	str	r3, [r7, #0]
		 for(uint8_t i=0;i<4;i++)
 80054b4:	2300      	movs	r3, #0
 80054b6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80054ba:	e00f      	b.n	80054dc <union_converter+0x274>
		 {
			loratx[i+45]=f2u8_pitch.array[i];
 80054bc:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 80054c0:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80054c4:	332d      	adds	r3, #45	@ 0x2d
 80054c6:	3238      	adds	r2, #56	@ 0x38
 80054c8:	443a      	add	r2, r7
 80054ca:	f812 1c38 	ldrb.w	r1, [r2, #-56]
 80054ce:	4a09      	ldr	r2, [pc, #36]	@ (80054f4 <union_converter+0x28c>)
 80054d0:	54d1      	strb	r1, [r2, r3]
		 for(uint8_t i=0;i<4;i++)
 80054d2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80054d6:	3301      	adds	r3, #1
 80054d8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80054dc:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80054e0:	2b03      	cmp	r3, #3
 80054e2:	d9eb      	bls.n	80054bc <union_converter+0x254>
		 }
}
 80054e4:	bf00      	nop
 80054e6:	bf00      	nop
 80054e8:	3738      	adds	r7, #56	@ 0x38
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	20002350 	.word	0x20002350
 80054f4:	20002250 	.word	0x20002250
 80054f8:	200022a4 	.word	0x200022a4
 80054fc:	200022b8 	.word	0x200022b8
 8005500:	2000229c 	.word	0x2000229c
 8005504:	20002400 	.word	0x20002400
 8005508:	200022fc 	.word	0x200022fc
 800550c:	200022c4 	.word	0x200022c4

08005510 <EGU_Buff_Load>:

void EGU_Buff_Load(void)
{
 8005510:	b480      	push	{r7}
 8005512:	af00      	add	r7, sp, #0
	loratx[52]=EGU_RX_BUFFER[29];//EGU HATA
 8005514:	4b2e      	ldr	r3, [pc, #184]	@ (80055d0 <EGU_Buff_Load+0xc0>)
 8005516:	7f5a      	ldrb	r2, [r3, #29]
 8005518:	4b2e      	ldr	r3, [pc, #184]	@ (80055d4 <EGU_Buff_Load+0xc4>)
 800551a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	loratx[53]=EGU_RX_BUFFER[30];//Fitil kontrol 0 ise fitil bağlı değil 1 ise fitil bağlı
 800551e:	4b2c      	ldr	r3, [pc, #176]	@ (80055d0 <EGU_Buff_Load+0xc0>)
 8005520:	7f9a      	ldrb	r2, [r3, #30]
 8005522:	4b2c      	ldr	r3, [pc, #176]	@ (80055d4 <EGU_Buff_Load+0xc4>)
 8005524:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	loratx[54]=EGU_RX_BUFFER[6];//EGU BATARYA-F
 8005528:	4b29      	ldr	r3, [pc, #164]	@ (80055d0 <EGU_Buff_Load+0xc0>)
 800552a:	799a      	ldrb	r2, [r3, #6]
 800552c:	4b29      	ldr	r3, [pc, #164]	@ (80055d4 <EGU_Buff_Load+0xc4>)
 800552e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	loratx[55]=EGU_RX_BUFFER[7];
 8005532:	4b27      	ldr	r3, [pc, #156]	@ (80055d0 <EGU_Buff_Load+0xc0>)
 8005534:	79da      	ldrb	r2, [r3, #7]
 8005536:	4b27      	ldr	r3, [pc, #156]	@ (80055d4 <EGU_Buff_Load+0xc4>)
 8005538:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
	loratx[56]=EGU_RX_BUFFER[8];
 800553c:	4b24      	ldr	r3, [pc, #144]	@ (80055d0 <EGU_Buff_Load+0xc0>)
 800553e:	7a1a      	ldrb	r2, [r3, #8]
 8005540:	4b24      	ldr	r3, [pc, #144]	@ (80055d4 <EGU_Buff_Load+0xc4>)
 8005542:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	loratx[57]=EGU_RX_BUFFER[9];
 8005546:	4b22      	ldr	r3, [pc, #136]	@ (80055d0 <EGU_Buff_Load+0xc0>)
 8005548:	7a5a      	ldrb	r2, [r3, #9]
 800554a:	4b22      	ldr	r3, [pc, #136]	@ (80055d4 <EGU_Buff_Load+0xc4>)
 800554c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
	loratx[58]=EGU_RX_BUFFER[22];//EGU ANGLE-F
 8005550:	4b1f      	ldr	r3, [pc, #124]	@ (80055d0 <EGU_Buff_Load+0xc0>)
 8005552:	7d9a      	ldrb	r2, [r3, #22]
 8005554:	4b1f      	ldr	r3, [pc, #124]	@ (80055d4 <EGU_Buff_Load+0xc4>)
 8005556:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
	loratx[59]=EGU_RX_BUFFER[23];
 800555a:	4b1d      	ldr	r3, [pc, #116]	@ (80055d0 <EGU_Buff_Load+0xc0>)
 800555c:	7dda      	ldrb	r2, [r3, #23]
 800555e:	4b1d      	ldr	r3, [pc, #116]	@ (80055d4 <EGU_Buff_Load+0xc4>)
 8005560:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
	loratx[60]=EGU_RX_BUFFER[24];
 8005564:	4b1a      	ldr	r3, [pc, #104]	@ (80055d0 <EGU_Buff_Load+0xc0>)
 8005566:	7e1a      	ldrb	r2, [r3, #24]
 8005568:	4b1a      	ldr	r3, [pc, #104]	@ (80055d4 <EGU_Buff_Load+0xc4>)
 800556a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	loratx[61]=EGU_RX_BUFFER[25];
 800556e:	4b18      	ldr	r3, [pc, #96]	@ (80055d0 <EGU_Buff_Load+0xc0>)
 8005570:	7e5a      	ldrb	r2, [r3, #25]
 8005572:	4b18      	ldr	r3, [pc, #96]	@ (80055d4 <EGU_Buff_Load+0xc4>)
 8005574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
	loratx[62]=EGU_RX_BUFFER[10];//EGU IRTIFA-F
 8005578:	4b15      	ldr	r3, [pc, #84]	@ (80055d0 <EGU_Buff_Load+0xc0>)
 800557a:	7a9a      	ldrb	r2, [r3, #10]
 800557c:	4b15      	ldr	r3, [pc, #84]	@ (80055d4 <EGU_Buff_Load+0xc4>)
 800557e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
	loratx[63]=EGU_RX_BUFFER[11];
 8005582:	4b13      	ldr	r3, [pc, #76]	@ (80055d0 <EGU_Buff_Load+0xc0>)
 8005584:	7ada      	ldrb	r2, [r3, #11]
 8005586:	4b13      	ldr	r3, [pc, #76]	@ (80055d4 <EGU_Buff_Load+0xc4>)
 8005588:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
	loratx[64]=EGU_RX_BUFFER[12];
 800558c:	4b10      	ldr	r3, [pc, #64]	@ (80055d0 <EGU_Buff_Load+0xc0>)
 800558e:	7b1a      	ldrb	r2, [r3, #12]
 8005590:	4b10      	ldr	r3, [pc, #64]	@ (80055d4 <EGU_Buff_Load+0xc4>)
 8005592:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	loratx[65]=EGU_RX_BUFFER[13];
 8005596:	4b0e      	ldr	r3, [pc, #56]	@ (80055d0 <EGU_Buff_Load+0xc0>)
 8005598:	7b5a      	ldrb	r2, [r3, #13]
 800559a:	4b0e      	ldr	r3, [pc, #56]	@ (80055d4 <EGU_Buff_Load+0xc4>)
 800559c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
	loratx[66]=EGU_RX_BUFFER[26];//EGU UCUS BASLADIMI?
 80055a0:	4b0b      	ldr	r3, [pc, #44]	@ (80055d0 <EGU_Buff_Load+0xc0>)
 80055a2:	7e9a      	ldrb	r2, [r3, #26]
 80055a4:	4b0b      	ldr	r3, [pc, #44]	@ (80055d4 <EGU_Buff_Load+0xc4>)
 80055a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
	loratx[67]=EGU_RX_BUFFER[28];//manyetik switch 1 ise kopmadı 0 ise koptu
 80055aa:	4b09      	ldr	r3, [pc, #36]	@ (80055d0 <EGU_Buff_Load+0xc0>)
 80055ac:	7f1a      	ldrb	r2, [r3, #28]
 80055ae:	4b09      	ldr	r3, [pc, #36]	@ (80055d4 <EGU_Buff_Load+0xc4>)
 80055b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
	loratx[68]=EGU_RX_BUFFER[27];//MOTOR ATESLEME TALEBİ GELDİ Mİ?
 80055b4:	4b06      	ldr	r3, [pc, #24]	@ (80055d0 <EGU_Buff_Load+0xc0>)
 80055b6:	7eda      	ldrb	r2, [r3, #27]
 80055b8:	4b06      	ldr	r3, [pc, #24]	@ (80055d4 <EGU_Buff_Load+0xc4>)
 80055ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	loratx[69]='\n';
 80055be:	4b05      	ldr	r3, [pc, #20]	@ (80055d4 <EGU_Buff_Load+0xc4>)
 80055c0:	220a      	movs	r2, #10
 80055c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

}
 80055c6:	bf00      	nop
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr
 80055d0:	20000588 	.word	0x20000588
 80055d4:	20002250 	.word	0x20002250

080055d8 <Altitude_Offset>:

	  }
}

void Altitude_Offset()
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
	for(uint8_t i=0;i<10;i++)
 80055de:	2300      	movs	r3, #0
 80055e0:	71fb      	strb	r3, [r7, #7]
 80055e2:	e02b      	b.n	800563c <Altitude_Offset+0x64>
	{
		HAL_Delay(40);
 80055e4:	2028      	movs	r0, #40	@ 0x28
 80055e6:	f000 fcff 	bl	8005fe8 <HAL_Delay>
	  rslt = bme280_set_sensor_mode(BME280_FORCED_MODE, &dev);
 80055ea:	4918      	ldr	r1, [pc, #96]	@ (800564c <Altitude_Offset+0x74>)
 80055ec:	2001      	movs	r0, #1
 80055ee:	f7fb feaa 	bl	8001346 <bme280_set_sensor_mode>
 80055f2:	4603      	mov	r3, r0
 80055f4:	461a      	mov	r2, r3
 80055f6:	4b16      	ldr	r3, [pc, #88]	@ (8005650 <Altitude_Offset+0x78>)
 80055f8:	701a      	strb	r2, [r3, #0]
	  rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 80055fa:	4a14      	ldr	r2, [pc, #80]	@ (800564c <Altitude_Offset+0x74>)
 80055fc:	4915      	ldr	r1, [pc, #84]	@ (8005654 <Altitude_Offset+0x7c>)
 80055fe:	2007      	movs	r0, #7
 8005600:	f7fb ff1d 	bl	800143e <bme280_get_sensor_data>
 8005604:	4603      	mov	r3, r0
 8005606:	461a      	mov	r2, r3
 8005608:	4b11      	ldr	r3, [pc, #68]	@ (8005650 <Altitude_Offset+0x78>)
 800560a:	701a      	strb	r2, [r3, #0]
	  if(rslt == BME280_OK)
 800560c:	4b10      	ldr	r3, [pc, #64]	@ (8005650 <Altitude_Offset+0x78>)
 800560e:	f993 3000 	ldrsb.w	r3, [r3]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d10f      	bne.n	8005636 <Altitude_Offset+0x5e>
	  { pressure = comp_data.pressure;
 8005616:	4b0f      	ldr	r3, [pc, #60]	@ (8005654 <Altitude_Offset+0x7c>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	ee07 3a90 	vmov	s15, r3
 800561e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005622:	4b0d      	ldr	r3, [pc, #52]	@ (8005658 <Altitude_Offset+0x80>)
 8005624:	edc3 7a00 	vstr	s15, [r3]
	    offset_altitude=BME280_Get_Altitude();
 8005628:	f7ff fd26 	bl	8005078 <BME280_Get_Altitude>
 800562c:	eef0 7a40 	vmov.f32	s15, s0
 8005630:	4b0a      	ldr	r3, [pc, #40]	@ (800565c <Altitude_Offset+0x84>)
 8005632:	edc3 7a00 	vstr	s15, [r3]
	for(uint8_t i=0;i<10;i++)
 8005636:	79fb      	ldrb	r3, [r7, #7]
 8005638:	3301      	adds	r3, #1
 800563a:	71fb      	strb	r3, [r7, #7]
 800563c:	79fb      	ldrb	r3, [r7, #7]
 800563e:	2b09      	cmp	r3, #9
 8005640:	d9d0      	bls.n	80055e4 <Altitude_Offset+0xc>
	  }
	}
}
 8005642:	bf00      	nop
 8005644:	bf00      	nop
 8005646:	3708      	adds	r7, #8
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	20002590 	.word	0x20002590
 8005650:	200025dc 	.word	0x200025dc
 8005654:	200025d0 	.word	0x200025d0
 8005658:	200022ac 	.word	0x200022ac
 800565c:	200022a8 	.word	0x200022a8

08005660 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005660:	b480      	push	{r7}
 8005662:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005664:	b672      	cpsid	i
}
 8005666:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005668:	bf00      	nop
 800566a:	e7fd      	b.n	8005668 <Error_Handler+0x8>

0800566c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005672:	2300      	movs	r3, #0
 8005674:	607b      	str	r3, [r7, #4]
 8005676:	4b10      	ldr	r3, [pc, #64]	@ (80056b8 <HAL_MspInit+0x4c>)
 8005678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800567a:	4a0f      	ldr	r2, [pc, #60]	@ (80056b8 <HAL_MspInit+0x4c>)
 800567c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005680:	6453      	str	r3, [r2, #68]	@ 0x44
 8005682:	4b0d      	ldr	r3, [pc, #52]	@ (80056b8 <HAL_MspInit+0x4c>)
 8005684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005686:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800568a:	607b      	str	r3, [r7, #4]
 800568c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800568e:	2300      	movs	r3, #0
 8005690:	603b      	str	r3, [r7, #0]
 8005692:	4b09      	ldr	r3, [pc, #36]	@ (80056b8 <HAL_MspInit+0x4c>)
 8005694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005696:	4a08      	ldr	r2, [pc, #32]	@ (80056b8 <HAL_MspInit+0x4c>)
 8005698:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800569c:	6413      	str	r3, [r2, #64]	@ 0x40
 800569e:	4b06      	ldr	r3, [pc, #24]	@ (80056b8 <HAL_MspInit+0x4c>)
 80056a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056a6:	603b      	str	r3, [r7, #0]
 80056a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80056aa:	bf00      	nop
 80056ac:	370c      	adds	r7, #12
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr
 80056b6:	bf00      	nop
 80056b8:	40023800 	.word	0x40023800

080056bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b08a      	sub	sp, #40	@ 0x28
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056c4:	f107 0314 	add.w	r3, r7, #20
 80056c8:	2200      	movs	r2, #0
 80056ca:	601a      	str	r2, [r3, #0]
 80056cc:	605a      	str	r2, [r3, #4]
 80056ce:	609a      	str	r2, [r3, #8]
 80056d0:	60da      	str	r2, [r3, #12]
 80056d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a1b      	ldr	r2, [pc, #108]	@ (8005748 <HAL_ADC_MspInit+0x8c>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d12f      	bne.n	800573e <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80056de:	2300      	movs	r3, #0
 80056e0:	613b      	str	r3, [r7, #16]
 80056e2:	4b1a      	ldr	r3, [pc, #104]	@ (800574c <HAL_ADC_MspInit+0x90>)
 80056e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056e6:	4a19      	ldr	r2, [pc, #100]	@ (800574c <HAL_ADC_MspInit+0x90>)
 80056e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80056ee:	4b17      	ldr	r3, [pc, #92]	@ (800574c <HAL_ADC_MspInit+0x90>)
 80056f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056f6:	613b      	str	r3, [r7, #16]
 80056f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80056fa:	2300      	movs	r3, #0
 80056fc:	60fb      	str	r3, [r7, #12]
 80056fe:	4b13      	ldr	r3, [pc, #76]	@ (800574c <HAL_ADC_MspInit+0x90>)
 8005700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005702:	4a12      	ldr	r2, [pc, #72]	@ (800574c <HAL_ADC_MspInit+0x90>)
 8005704:	f043 0304 	orr.w	r3, r3, #4
 8005708:	6313      	str	r3, [r2, #48]	@ 0x30
 800570a:	4b10      	ldr	r3, [pc, #64]	@ (800574c <HAL_ADC_MspInit+0x90>)
 800570c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800570e:	f003 0304 	and.w	r3, r3, #4
 8005712:	60fb      	str	r3, [r7, #12]
 8005714:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = ADC_VCC_Pin;
 8005716:	2304      	movs	r3, #4
 8005718:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800571a:	2303      	movs	r3, #3
 800571c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800571e:	2300      	movs	r3, #0
 8005720:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_VCC_GPIO_Port, &GPIO_InitStruct);
 8005722:	f107 0314 	add.w	r3, r7, #20
 8005726:	4619      	mov	r1, r3
 8005728:	4809      	ldr	r0, [pc, #36]	@ (8005750 <HAL_ADC_MspInit+0x94>)
 800572a:	f001 fab1 	bl	8006c90 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800572e:	2200      	movs	r2, #0
 8005730:	2100      	movs	r1, #0
 8005732:	2012      	movs	r0, #18
 8005734:	f001 f9e3 	bl	8006afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8005738:	2012      	movs	r0, #18
 800573a:	f001 f9fc 	bl	8006b36 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800573e:	bf00      	nop
 8005740:	3728      	adds	r7, #40	@ 0x28
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	40012000 	.word	0x40012000
 800574c:	40023800 	.word	0x40023800
 8005750:	40020800 	.word	0x40020800

08005754 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b08a      	sub	sp, #40	@ 0x28
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800575c:	f107 0314 	add.w	r3, r7, #20
 8005760:	2200      	movs	r2, #0
 8005762:	601a      	str	r2, [r3, #0]
 8005764:	605a      	str	r2, [r3, #4]
 8005766:	609a      	str	r2, [r3, #8]
 8005768:	60da      	str	r2, [r3, #12]
 800576a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a19      	ldr	r2, [pc, #100]	@ (80057d8 <HAL_I2C_MspInit+0x84>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d12b      	bne.n	80057ce <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005776:	2300      	movs	r3, #0
 8005778:	613b      	str	r3, [r7, #16]
 800577a:	4b18      	ldr	r3, [pc, #96]	@ (80057dc <HAL_I2C_MspInit+0x88>)
 800577c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800577e:	4a17      	ldr	r2, [pc, #92]	@ (80057dc <HAL_I2C_MspInit+0x88>)
 8005780:	f043 0302 	orr.w	r3, r3, #2
 8005784:	6313      	str	r3, [r2, #48]	@ 0x30
 8005786:	4b15      	ldr	r3, [pc, #84]	@ (80057dc <HAL_I2C_MspInit+0x88>)
 8005788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800578a:	f003 0302 	and.w	r3, r3, #2
 800578e:	613b      	str	r3, [r7, #16]
 8005790:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005792:	23c0      	movs	r3, #192	@ 0xc0
 8005794:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005796:	2312      	movs	r3, #18
 8005798:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800579a:	2300      	movs	r3, #0
 800579c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800579e:	2303      	movs	r3, #3
 80057a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80057a2:	2304      	movs	r3, #4
 80057a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057a6:	f107 0314 	add.w	r3, r7, #20
 80057aa:	4619      	mov	r1, r3
 80057ac:	480c      	ldr	r0, [pc, #48]	@ (80057e0 <HAL_I2C_MspInit+0x8c>)
 80057ae:	f001 fa6f 	bl	8006c90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80057b2:	2300      	movs	r3, #0
 80057b4:	60fb      	str	r3, [r7, #12]
 80057b6:	4b09      	ldr	r3, [pc, #36]	@ (80057dc <HAL_I2C_MspInit+0x88>)
 80057b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ba:	4a08      	ldr	r2, [pc, #32]	@ (80057dc <HAL_I2C_MspInit+0x88>)
 80057bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80057c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80057c2:	4b06      	ldr	r3, [pc, #24]	@ (80057dc <HAL_I2C_MspInit+0x88>)
 80057c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80057ca:	60fb      	str	r3, [r7, #12]
 80057cc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80057ce:	bf00      	nop
 80057d0:	3728      	adds	r7, #40	@ 0x28
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	40005400 	.word	0x40005400
 80057dc:	40023800 	.word	0x40023800
 80057e0:	40020400 	.word	0x40020400

080057e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b08a      	sub	sp, #40	@ 0x28
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057ec:	f107 0314 	add.w	r3, r7, #20
 80057f0:	2200      	movs	r2, #0
 80057f2:	601a      	str	r2, [r3, #0]
 80057f4:	605a      	str	r2, [r3, #4]
 80057f6:	609a      	str	r2, [r3, #8]
 80057f8:	60da      	str	r2, [r3, #12]
 80057fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a19      	ldr	r2, [pc, #100]	@ (8005868 <HAL_SPI_MspInit+0x84>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d12b      	bne.n	800585e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005806:	2300      	movs	r3, #0
 8005808:	613b      	str	r3, [r7, #16]
 800580a:	4b18      	ldr	r3, [pc, #96]	@ (800586c <HAL_SPI_MspInit+0x88>)
 800580c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800580e:	4a17      	ldr	r2, [pc, #92]	@ (800586c <HAL_SPI_MspInit+0x88>)
 8005810:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005814:	6453      	str	r3, [r2, #68]	@ 0x44
 8005816:	4b15      	ldr	r3, [pc, #84]	@ (800586c <HAL_SPI_MspInit+0x88>)
 8005818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800581a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800581e:	613b      	str	r3, [r7, #16]
 8005820:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005822:	2300      	movs	r3, #0
 8005824:	60fb      	str	r3, [r7, #12]
 8005826:	4b11      	ldr	r3, [pc, #68]	@ (800586c <HAL_SPI_MspInit+0x88>)
 8005828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800582a:	4a10      	ldr	r2, [pc, #64]	@ (800586c <HAL_SPI_MspInit+0x88>)
 800582c:	f043 0301 	orr.w	r3, r3, #1
 8005830:	6313      	str	r3, [r2, #48]	@ 0x30
 8005832:	4b0e      	ldr	r3, [pc, #56]	@ (800586c <HAL_SPI_MspInit+0x88>)
 8005834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005836:	f003 0301 	and.w	r3, r3, #1
 800583a:	60fb      	str	r3, [r7, #12]
 800583c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800583e:	23e0      	movs	r3, #224	@ 0xe0
 8005840:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005842:	2302      	movs	r3, #2
 8005844:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005846:	2300      	movs	r3, #0
 8005848:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800584a:	2303      	movs	r3, #3
 800584c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800584e:	2305      	movs	r3, #5
 8005850:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005852:	f107 0314 	add.w	r3, r7, #20
 8005856:	4619      	mov	r1, r3
 8005858:	4805      	ldr	r0, [pc, #20]	@ (8005870 <HAL_SPI_MspInit+0x8c>)
 800585a:	f001 fa19 	bl	8006c90 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800585e:	bf00      	nop
 8005860:	3728      	adds	r7, #40	@ 0x28
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop
 8005868:	40013000 	.word	0x40013000
 800586c:	40023800 	.word	0x40023800
 8005870:	40020000 	.word	0x40020000

08005874 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b088      	sub	sp, #32
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005884:	d116      	bne.n	80058b4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005886:	2300      	movs	r3, #0
 8005888:	61fb      	str	r3, [r7, #28]
 800588a:	4b44      	ldr	r3, [pc, #272]	@ (800599c <HAL_TIM_Base_MspInit+0x128>)
 800588c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800588e:	4a43      	ldr	r2, [pc, #268]	@ (800599c <HAL_TIM_Base_MspInit+0x128>)
 8005890:	f043 0301 	orr.w	r3, r3, #1
 8005894:	6413      	str	r3, [r2, #64]	@ 0x40
 8005896:	4b41      	ldr	r3, [pc, #260]	@ (800599c <HAL_TIM_Base_MspInit+0x128>)
 8005898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800589a:	f003 0301 	and.w	r3, r3, #1
 800589e:	61fb      	str	r3, [r7, #28]
 80058a0:	69fb      	ldr	r3, [r7, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80058a2:	2200      	movs	r2, #0
 80058a4:	2100      	movs	r1, #0
 80058a6:	201c      	movs	r0, #28
 80058a8:	f001 f929 	bl	8006afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80058ac:	201c      	movs	r0, #28
 80058ae:	f001 f942 	bl	8006b36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80058b2:	e06e      	b.n	8005992 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM6)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a39      	ldr	r2, [pc, #228]	@ (80059a0 <HAL_TIM_Base_MspInit+0x12c>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d116      	bne.n	80058ec <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80058be:	2300      	movs	r3, #0
 80058c0:	61bb      	str	r3, [r7, #24]
 80058c2:	4b36      	ldr	r3, [pc, #216]	@ (800599c <HAL_TIM_Base_MspInit+0x128>)
 80058c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058c6:	4a35      	ldr	r2, [pc, #212]	@ (800599c <HAL_TIM_Base_MspInit+0x128>)
 80058c8:	f043 0310 	orr.w	r3, r3, #16
 80058cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80058ce:	4b33      	ldr	r3, [pc, #204]	@ (800599c <HAL_TIM_Base_MspInit+0x128>)
 80058d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058d2:	f003 0310 	and.w	r3, r3, #16
 80058d6:	61bb      	str	r3, [r7, #24]
 80058d8:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80058da:	2200      	movs	r2, #0
 80058dc:	2100      	movs	r1, #0
 80058de:	2036      	movs	r0, #54	@ 0x36
 80058e0:	f001 f90d 	bl	8006afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80058e4:	2036      	movs	r0, #54	@ 0x36
 80058e6:	f001 f926 	bl	8006b36 <HAL_NVIC_EnableIRQ>
}
 80058ea:	e052      	b.n	8005992 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM7)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a2c      	ldr	r2, [pc, #176]	@ (80059a4 <HAL_TIM_Base_MspInit+0x130>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d116      	bne.n	8005924 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80058f6:	2300      	movs	r3, #0
 80058f8:	617b      	str	r3, [r7, #20]
 80058fa:	4b28      	ldr	r3, [pc, #160]	@ (800599c <HAL_TIM_Base_MspInit+0x128>)
 80058fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058fe:	4a27      	ldr	r2, [pc, #156]	@ (800599c <HAL_TIM_Base_MspInit+0x128>)
 8005900:	f043 0320 	orr.w	r3, r3, #32
 8005904:	6413      	str	r3, [r2, #64]	@ 0x40
 8005906:	4b25      	ldr	r3, [pc, #148]	@ (800599c <HAL_TIM_Base_MspInit+0x128>)
 8005908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800590a:	f003 0320 	and.w	r3, r3, #32
 800590e:	617b      	str	r3, [r7, #20]
 8005910:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8005912:	2200      	movs	r2, #0
 8005914:	2100      	movs	r1, #0
 8005916:	2037      	movs	r0, #55	@ 0x37
 8005918:	f001 f8f1 	bl	8006afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800591c:	2037      	movs	r0, #55	@ 0x37
 800591e:	f001 f90a 	bl	8006b36 <HAL_NVIC_EnableIRQ>
}
 8005922:	e036      	b.n	8005992 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM10)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a1f      	ldr	r2, [pc, #124]	@ (80059a8 <HAL_TIM_Base_MspInit+0x134>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d116      	bne.n	800595c <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800592e:	2300      	movs	r3, #0
 8005930:	613b      	str	r3, [r7, #16]
 8005932:	4b1a      	ldr	r3, [pc, #104]	@ (800599c <HAL_TIM_Base_MspInit+0x128>)
 8005934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005936:	4a19      	ldr	r2, [pc, #100]	@ (800599c <HAL_TIM_Base_MspInit+0x128>)
 8005938:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800593c:	6453      	str	r3, [r2, #68]	@ 0x44
 800593e:	4b17      	ldr	r3, [pc, #92]	@ (800599c <HAL_TIM_Base_MspInit+0x128>)
 8005940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005942:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005946:	613b      	str	r3, [r7, #16]
 8005948:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800594a:	2200      	movs	r2, #0
 800594c:	2100      	movs	r1, #0
 800594e:	2019      	movs	r0, #25
 8005950:	f001 f8d5 	bl	8006afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005954:	2019      	movs	r0, #25
 8005956:	f001 f8ee 	bl	8006b36 <HAL_NVIC_EnableIRQ>
}
 800595a:	e01a      	b.n	8005992 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM11)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a12      	ldr	r2, [pc, #72]	@ (80059ac <HAL_TIM_Base_MspInit+0x138>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d115      	bne.n	8005992 <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8005966:	2300      	movs	r3, #0
 8005968:	60fb      	str	r3, [r7, #12]
 800596a:	4b0c      	ldr	r3, [pc, #48]	@ (800599c <HAL_TIM_Base_MspInit+0x128>)
 800596c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800596e:	4a0b      	ldr	r2, [pc, #44]	@ (800599c <HAL_TIM_Base_MspInit+0x128>)
 8005970:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005974:	6453      	str	r3, [r2, #68]	@ 0x44
 8005976:	4b09      	ldr	r3, [pc, #36]	@ (800599c <HAL_TIM_Base_MspInit+0x128>)
 8005978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800597a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800597e:	60fb      	str	r3, [r7, #12]
 8005980:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8005982:	2200      	movs	r2, #0
 8005984:	2100      	movs	r1, #0
 8005986:	201a      	movs	r0, #26
 8005988:	f001 f8b9 	bl	8006afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800598c:	201a      	movs	r0, #26
 800598e:	f001 f8d2 	bl	8006b36 <HAL_NVIC_EnableIRQ>
}
 8005992:	bf00      	nop
 8005994:	3720      	adds	r7, #32
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	40023800 	.word	0x40023800
 80059a0:	40001000 	.word	0x40001000
 80059a4:	40001400 	.word	0x40001400
 80059a8:	40014400 	.word	0x40014400
 80059ac:	40014800 	.word	0x40014800

080059b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b090      	sub	sp, #64	@ 0x40
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80059bc:	2200      	movs	r2, #0
 80059be:	601a      	str	r2, [r3, #0]
 80059c0:	605a      	str	r2, [r3, #4]
 80059c2:	609a      	str	r2, [r3, #8]
 80059c4:	60da      	str	r2, [r3, #12]
 80059c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a7f      	ldr	r2, [pc, #508]	@ (8005bcc <HAL_UART_MspInit+0x21c>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d12c      	bne.n	8005a2c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80059d2:	2300      	movs	r3, #0
 80059d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059d6:	4b7e      	ldr	r3, [pc, #504]	@ (8005bd0 <HAL_UART_MspInit+0x220>)
 80059d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059da:	4a7d      	ldr	r2, [pc, #500]	@ (8005bd0 <HAL_UART_MspInit+0x220>)
 80059dc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80059e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80059e2:	4b7b      	ldr	r3, [pc, #492]	@ (8005bd0 <HAL_UART_MspInit+0x220>)
 80059e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80059ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80059ee:	2300      	movs	r3, #0
 80059f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80059f2:	4b77      	ldr	r3, [pc, #476]	@ (8005bd0 <HAL_UART_MspInit+0x220>)
 80059f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059f6:	4a76      	ldr	r2, [pc, #472]	@ (8005bd0 <HAL_UART_MspInit+0x220>)
 80059f8:	f043 0301 	orr.w	r3, r3, #1
 80059fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80059fe:	4b74      	ldr	r3, [pc, #464]	@ (8005bd0 <HAL_UART_MspInit+0x220>)
 8005a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a02:	f003 0301 	and.w	r3, r3, #1
 8005a06:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a0e:	2302      	movs	r3, #2
 8005a10:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a12:	2300      	movs	r3, #0
 8005a14:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a16:	2303      	movs	r3, #3
 8005a18:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005a1a:	2308      	movs	r3, #8
 8005a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a1e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005a22:	4619      	mov	r1, r3
 8005a24:	486b      	ldr	r0, [pc, #428]	@ (8005bd4 <HAL_UART_MspInit+0x224>)
 8005a26:	f001 f933 	bl	8006c90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8005a2a:	e0cb      	b.n	8005bc4 <HAL_UART_MspInit+0x214>
  else if(huart->Instance==USART2)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a69      	ldr	r2, [pc, #420]	@ (8005bd8 <HAL_UART_MspInit+0x228>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d134      	bne.n	8005aa0 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005a36:	2300      	movs	r3, #0
 8005a38:	623b      	str	r3, [r7, #32]
 8005a3a:	4b65      	ldr	r3, [pc, #404]	@ (8005bd0 <HAL_UART_MspInit+0x220>)
 8005a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a3e:	4a64      	ldr	r2, [pc, #400]	@ (8005bd0 <HAL_UART_MspInit+0x220>)
 8005a40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a44:	6413      	str	r3, [r2, #64]	@ 0x40
 8005a46:	4b62      	ldr	r3, [pc, #392]	@ (8005bd0 <HAL_UART_MspInit+0x220>)
 8005a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a4e:	623b      	str	r3, [r7, #32]
 8005a50:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a52:	2300      	movs	r3, #0
 8005a54:	61fb      	str	r3, [r7, #28]
 8005a56:	4b5e      	ldr	r3, [pc, #376]	@ (8005bd0 <HAL_UART_MspInit+0x220>)
 8005a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a5a:	4a5d      	ldr	r2, [pc, #372]	@ (8005bd0 <HAL_UART_MspInit+0x220>)
 8005a5c:	f043 0301 	orr.w	r3, r3, #1
 8005a60:	6313      	str	r3, [r2, #48]	@ 0x30
 8005a62:	4b5b      	ldr	r3, [pc, #364]	@ (8005bd0 <HAL_UART_MspInit+0x220>)
 8005a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a66:	f003 0301 	and.w	r3, r3, #1
 8005a6a:	61fb      	str	r3, [r7, #28]
 8005a6c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = TX2_GPS_Pin|RX2_GPS_Pin;
 8005a6e:	230c      	movs	r3, #12
 8005a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a72:	2302      	movs	r3, #2
 8005a74:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a76:	2300      	movs	r3, #0
 8005a78:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005a7e:	2307      	movs	r3, #7
 8005a80:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a82:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005a86:	4619      	mov	r1, r3
 8005a88:	4852      	ldr	r0, [pc, #328]	@ (8005bd4 <HAL_UART_MspInit+0x224>)
 8005a8a:	f001 f901 	bl	8006c90 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005a8e:	2200      	movs	r2, #0
 8005a90:	2100      	movs	r1, #0
 8005a92:	2026      	movs	r0, #38	@ 0x26
 8005a94:	f001 f833 	bl	8006afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005a98:	2026      	movs	r0, #38	@ 0x26
 8005a9a:	f001 f84c 	bl	8006b36 <HAL_NVIC_EnableIRQ>
}
 8005a9e:	e091      	b.n	8005bc4 <HAL_UART_MspInit+0x214>
  else if(huart->Instance==USART3)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a4d      	ldr	r2, [pc, #308]	@ (8005bdc <HAL_UART_MspInit+0x22c>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d153      	bne.n	8005b52 <HAL_UART_MspInit+0x1a2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005aaa:	2300      	movs	r3, #0
 8005aac:	61bb      	str	r3, [r7, #24]
 8005aae:	4b48      	ldr	r3, [pc, #288]	@ (8005bd0 <HAL_UART_MspInit+0x220>)
 8005ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ab2:	4a47      	ldr	r2, [pc, #284]	@ (8005bd0 <HAL_UART_MspInit+0x220>)
 8005ab4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005ab8:	6413      	str	r3, [r2, #64]	@ 0x40
 8005aba:	4b45      	ldr	r3, [pc, #276]	@ (8005bd0 <HAL_UART_MspInit+0x220>)
 8005abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005abe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ac2:	61bb      	str	r3, [r7, #24]
 8005ac4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	617b      	str	r3, [r7, #20]
 8005aca:	4b41      	ldr	r3, [pc, #260]	@ (8005bd0 <HAL_UART_MspInit+0x220>)
 8005acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ace:	4a40      	ldr	r2, [pc, #256]	@ (8005bd0 <HAL_UART_MspInit+0x220>)
 8005ad0:	f043 0304 	orr.w	r3, r3, #4
 8005ad4:	6313      	str	r3, [r2, #48]	@ 0x30
 8005ad6:	4b3e      	ldr	r3, [pc, #248]	@ (8005bd0 <HAL_UART_MspInit+0x220>)
 8005ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ada:	f003 0304 	and.w	r3, r3, #4
 8005ade:	617b      	str	r3, [r7, #20]
 8005ae0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	613b      	str	r3, [r7, #16]
 8005ae6:	4b3a      	ldr	r3, [pc, #232]	@ (8005bd0 <HAL_UART_MspInit+0x220>)
 8005ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aea:	4a39      	ldr	r2, [pc, #228]	@ (8005bd0 <HAL_UART_MspInit+0x220>)
 8005aec:	f043 0302 	orr.w	r3, r3, #2
 8005af0:	6313      	str	r3, [r2, #48]	@ 0x30
 8005af2:	4b37      	ldr	r3, [pc, #220]	@ (8005bd0 <HAL_UART_MspInit+0x220>)
 8005af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005af6:	f003 0302 	and.w	r3, r3, #2
 8005afa:	613b      	str	r3, [r7, #16]
 8005afc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = RX3_LORA_Pin;
 8005afe:	2320      	movs	r3, #32
 8005b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b02:	2302      	movs	r3, #2
 8005b04:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b06:	2300      	movs	r3, #0
 8005b08:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005b0e:	2307      	movs	r3, #7
 8005b10:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(RX3_LORA_GPIO_Port, &GPIO_InitStruct);
 8005b12:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005b16:	4619      	mov	r1, r3
 8005b18:	4831      	ldr	r0, [pc, #196]	@ (8005be0 <HAL_UART_MspInit+0x230>)
 8005b1a:	f001 f8b9 	bl	8006c90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TX3_LORA_Pin;
 8005b1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b24:	2302      	movs	r3, #2
 8005b26:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b2c:	2303      	movs	r3, #3
 8005b2e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005b30:	2307      	movs	r3, #7
 8005b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(TX3_LORA_GPIO_Port, &GPIO_InitStruct);
 8005b34:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005b38:	4619      	mov	r1, r3
 8005b3a:	482a      	ldr	r0, [pc, #168]	@ (8005be4 <HAL_UART_MspInit+0x234>)
 8005b3c:	f001 f8a8 	bl	8006c90 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8005b40:	2200      	movs	r2, #0
 8005b42:	2100      	movs	r1, #0
 8005b44:	2027      	movs	r0, #39	@ 0x27
 8005b46:	f000 ffda 	bl	8006afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005b4a:	2027      	movs	r0, #39	@ 0x27
 8005b4c:	f000 fff3 	bl	8006b36 <HAL_NVIC_EnableIRQ>
}
 8005b50:	e038      	b.n	8005bc4 <HAL_UART_MspInit+0x214>
  else if(huart->Instance==USART6)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a24      	ldr	r2, [pc, #144]	@ (8005be8 <HAL_UART_MspInit+0x238>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d133      	bne.n	8005bc4 <HAL_UART_MspInit+0x214>
    __HAL_RCC_USART6_CLK_ENABLE();
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	60fb      	str	r3, [r7, #12]
 8005b60:	4b1b      	ldr	r3, [pc, #108]	@ (8005bd0 <HAL_UART_MspInit+0x220>)
 8005b62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b64:	4a1a      	ldr	r2, [pc, #104]	@ (8005bd0 <HAL_UART_MspInit+0x220>)
 8005b66:	f043 0320 	orr.w	r3, r3, #32
 8005b6a:	6453      	str	r3, [r2, #68]	@ 0x44
 8005b6c:	4b18      	ldr	r3, [pc, #96]	@ (8005bd0 <HAL_UART_MspInit+0x220>)
 8005b6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b70:	f003 0320 	and.w	r3, r3, #32
 8005b74:	60fb      	str	r3, [r7, #12]
 8005b76:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b78:	2300      	movs	r3, #0
 8005b7a:	60bb      	str	r3, [r7, #8]
 8005b7c:	4b14      	ldr	r3, [pc, #80]	@ (8005bd0 <HAL_UART_MspInit+0x220>)
 8005b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b80:	4a13      	ldr	r2, [pc, #76]	@ (8005bd0 <HAL_UART_MspInit+0x220>)
 8005b82:	f043 0304 	orr.w	r3, r3, #4
 8005b86:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b88:	4b11      	ldr	r3, [pc, #68]	@ (8005bd0 <HAL_UART_MspInit+0x220>)
 8005b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b8c:	f003 0304 	and.w	r3, r3, #4
 8005b90:	60bb      	str	r3, [r7, #8]
 8005b92:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TX6_RS_Pin|RX6_RS_Pin;
 8005b94:	23c0      	movs	r3, #192	@ 0xc0
 8005b96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b98:	2302      	movs	r3, #2
 8005b9a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ba0:	2303      	movs	r3, #3
 8005ba2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005ba4:	2308      	movs	r3, #8
 8005ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005ba8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005bac:	4619      	mov	r1, r3
 8005bae:	480c      	ldr	r0, [pc, #48]	@ (8005be0 <HAL_UART_MspInit+0x230>)
 8005bb0:	f001 f86e 	bl	8006c90 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	2100      	movs	r1, #0
 8005bb8:	2047      	movs	r0, #71	@ 0x47
 8005bba:	f000 ffa0 	bl	8006afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8005bbe:	2047      	movs	r0, #71	@ 0x47
 8005bc0:	f000 ffb9 	bl	8006b36 <HAL_NVIC_EnableIRQ>
}
 8005bc4:	bf00      	nop
 8005bc6:	3740      	adds	r7, #64	@ 0x40
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}
 8005bcc:	40004c00 	.word	0x40004c00
 8005bd0:	40023800 	.word	0x40023800
 8005bd4:	40020000 	.word	0x40020000
 8005bd8:	40004400 	.word	0x40004400
 8005bdc:	40004800 	.word	0x40004800
 8005be0:	40020800 	.word	0x40020800
 8005be4:	40020400 	.word	0x40020400
 8005be8:	40011400 	.word	0x40011400

08005bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005bec:	b480      	push	{r7}
 8005bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005bf0:	bf00      	nop
 8005bf2:	e7fd      	b.n	8005bf0 <NMI_Handler+0x4>

08005bf4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005bf8:	bf00      	nop
 8005bfa:	e7fd      	b.n	8005bf8 <HardFault_Handler+0x4>

08005bfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005c00:	bf00      	nop
 8005c02:	e7fd      	b.n	8005c00 <MemManage_Handler+0x4>

08005c04 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005c04:	b480      	push	{r7}
 8005c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005c08:	bf00      	nop
 8005c0a:	e7fd      	b.n	8005c08 <BusFault_Handler+0x4>

08005c0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005c10:	bf00      	nop
 8005c12:	e7fd      	b.n	8005c10 <UsageFault_Handler+0x4>

08005c14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005c14:	b480      	push	{r7}
 8005c16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005c18:	bf00      	nop
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr

08005c22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005c22:	b480      	push	{r7}
 8005c24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005c26:	bf00      	nop
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr

08005c30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005c30:	b480      	push	{r7}
 8005c32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005c34:	bf00      	nop
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr

08005c3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005c3e:	b580      	push	{r7, lr}
 8005c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005c42:	f000 f9b1 	bl	8005fa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005c46:	bf00      	nop
 8005c48:	bd80      	pop	{r7, pc}
	...

08005c4c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005c50:	4802      	ldr	r0, [pc, #8]	@ (8005c5c <ADC_IRQHandler+0x10>)
 8005c52:	f000 fb0f 	bl	8006274 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8005c56:	bf00      	nop
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	bf00      	nop
 8005c5c:	2000021c 	.word	0x2000021c

08005c60 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8005c64:	4802      	ldr	r0, [pc, #8]	@ (8005c70 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8005c66:	f003 fdee 	bl	8009846 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8005c6a:	bf00      	nop
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	200003e8 	.word	0x200003e8

08005c74 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8005c78:	4802      	ldr	r0, [pc, #8]	@ (8005c84 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8005c7a:	f003 fde4 	bl	8009846 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8005c7e:	bf00      	nop
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	20000430 	.word	0x20000430

08005c88 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005c8c:	4802      	ldr	r0, [pc, #8]	@ (8005c98 <TIM2_IRQHandler+0x10>)
 8005c8e:	f003 fdda 	bl	8009846 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005c92:	bf00      	nop
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	20000310 	.word	0x20000310

08005c9c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005ca0:	4802      	ldr	r0, [pc, #8]	@ (8005cac <USART2_IRQHandler+0x10>)
 8005ca2:	f004 faa1 	bl	800a1e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005ca6:	bf00      	nop
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	200004bc 	.word	0x200004bc

08005cb0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005cb4:	4802      	ldr	r0, [pc, #8]	@ (8005cc0 <USART3_IRQHandler+0x10>)
 8005cb6:	f004 fa97 	bl	800a1e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005cba:	bf00      	nop
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	20000500 	.word	0x20000500

08005cc4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005cc8:	4802      	ldr	r0, [pc, #8]	@ (8005cd4 <TIM6_DAC_IRQHandler+0x10>)
 8005cca:	f003 fdbc 	bl	8009846 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005cce:	bf00      	nop
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	20000358 	.word	0x20000358

08005cd8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005cdc:	4802      	ldr	r0, [pc, #8]	@ (8005ce8 <TIM7_IRQHandler+0x10>)
 8005cde:	f003 fdb2 	bl	8009846 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8005ce2:	bf00      	nop
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	200003a0 	.word	0x200003a0

08005cec <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8005cf0:	4802      	ldr	r0, [pc, #8]	@ (8005cfc <USART6_IRQHandler+0x10>)
 8005cf2:	f004 fa79 	bl	800a1e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8005cf6:	bf00      	nop
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	20000544 	.word	0x20000544

08005d00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005d00:	b480      	push	{r7}
 8005d02:	af00      	add	r7, sp, #0
  return 1;
 8005d04:	2301      	movs	r3, #1
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <_kill>:

int _kill(int pid, int sig)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b082      	sub	sp, #8
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005d1a:	f006 fad7 	bl	800c2cc <__errno>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2216      	movs	r2, #22
 8005d22:	601a      	str	r2, [r3, #0]
  return -1;
 8005d24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3708      	adds	r7, #8
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <_exit>:

void _exit (int status)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b082      	sub	sp, #8
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005d38:	f04f 31ff 	mov.w	r1, #4294967295
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f7ff ffe7 	bl	8005d10 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005d42:	bf00      	nop
 8005d44:	e7fd      	b.n	8005d42 <_exit+0x12>

08005d46 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005d46:	b580      	push	{r7, lr}
 8005d48:	b086      	sub	sp, #24
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	60f8      	str	r0, [r7, #12]
 8005d4e:	60b9      	str	r1, [r7, #8]
 8005d50:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d52:	2300      	movs	r3, #0
 8005d54:	617b      	str	r3, [r7, #20]
 8005d56:	e00a      	b.n	8005d6e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005d58:	f3af 8000 	nop.w
 8005d5c:	4601      	mov	r1, r0
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	1c5a      	adds	r2, r3, #1
 8005d62:	60ba      	str	r2, [r7, #8]
 8005d64:	b2ca      	uxtb	r2, r1
 8005d66:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	617b      	str	r3, [r7, #20]
 8005d6e:	697a      	ldr	r2, [r7, #20]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	dbf0      	blt.n	8005d58 <_read+0x12>
  }

  return len;
 8005d76:	687b      	ldr	r3, [r7, #4]
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3718      	adds	r7, #24
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b086      	sub	sp, #24
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	617b      	str	r3, [r7, #20]
 8005d90:	e009      	b.n	8005da6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	1c5a      	adds	r2, r3, #1
 8005d96:	60ba      	str	r2, [r7, #8]
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	3301      	adds	r3, #1
 8005da4:	617b      	str	r3, [r7, #20]
 8005da6:	697a      	ldr	r2, [r7, #20]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	dbf1      	blt.n	8005d92 <_write+0x12>
  }
  return len;
 8005dae:	687b      	ldr	r3, [r7, #4]
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3718      	adds	r7, #24
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <_close>:

int _close(int file)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005dc0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005de0:	605a      	str	r2, [r3, #4]
  return 0;
 8005de2:	2300      	movs	r3, #0
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <_isatty>:

int _isatty(int file)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005df8:	2301      	movs	r3, #1
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	370c      	adds	r7, #12
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr

08005e06 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005e06:	b480      	push	{r7}
 8005e08:	b085      	sub	sp, #20
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	60f8      	str	r0, [r7, #12]
 8005e0e:	60b9      	str	r1, [r7, #8]
 8005e10:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005e12:	2300      	movs	r3, #0
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3714      	adds	r7, #20
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b086      	sub	sp, #24
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005e28:	4a14      	ldr	r2, [pc, #80]	@ (8005e7c <_sbrk+0x5c>)
 8005e2a:	4b15      	ldr	r3, [pc, #84]	@ (8005e80 <_sbrk+0x60>)
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005e34:	4b13      	ldr	r3, [pc, #76]	@ (8005e84 <_sbrk+0x64>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d102      	bne.n	8005e42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005e3c:	4b11      	ldr	r3, [pc, #68]	@ (8005e84 <_sbrk+0x64>)
 8005e3e:	4a12      	ldr	r2, [pc, #72]	@ (8005e88 <_sbrk+0x68>)
 8005e40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005e42:	4b10      	ldr	r3, [pc, #64]	@ (8005e84 <_sbrk+0x64>)
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4413      	add	r3, r2
 8005e4a:	693a      	ldr	r2, [r7, #16]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d207      	bcs.n	8005e60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005e50:	f006 fa3c 	bl	800c2cc <__errno>
 8005e54:	4603      	mov	r3, r0
 8005e56:	220c      	movs	r2, #12
 8005e58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8005e5e:	e009      	b.n	8005e74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005e60:	4b08      	ldr	r3, [pc, #32]	@ (8005e84 <_sbrk+0x64>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005e66:	4b07      	ldr	r3, [pc, #28]	@ (8005e84 <_sbrk+0x64>)
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	4a05      	ldr	r2, [pc, #20]	@ (8005e84 <_sbrk+0x64>)
 8005e70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005e72:	68fb      	ldr	r3, [r7, #12]
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3718      	adds	r7, #24
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}
 8005e7c:	20020000 	.word	0x20020000
 8005e80:	00000400 	.word	0x00000400
 8005e84:	200025e4 	.word	0x200025e4
 8005e88:	20002750 	.word	0x20002750

08005e8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005e90:	4b06      	ldr	r3, [pc, #24]	@ (8005eac <SystemInit+0x20>)
 8005e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e96:	4a05      	ldr	r2, [pc, #20]	@ (8005eac <SystemInit+0x20>)
 8005e98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005e9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005ea0:	bf00      	nop
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	e000ed00 	.word	0xe000ed00

08005eb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005eb0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005ee8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005eb4:	480d      	ldr	r0, [pc, #52]	@ (8005eec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005eb6:	490e      	ldr	r1, [pc, #56]	@ (8005ef0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005eb8:	4a0e      	ldr	r2, [pc, #56]	@ (8005ef4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005eba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005ebc:	e002      	b.n	8005ec4 <LoopCopyDataInit>

08005ebe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005ebe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005ec0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005ec2:	3304      	adds	r3, #4

08005ec4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005ec4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005ec6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005ec8:	d3f9      	bcc.n	8005ebe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005eca:	4a0b      	ldr	r2, [pc, #44]	@ (8005ef8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005ecc:	4c0b      	ldr	r4, [pc, #44]	@ (8005efc <LoopFillZerobss+0x26>)
  movs r3, #0
 8005ece:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005ed0:	e001      	b.n	8005ed6 <LoopFillZerobss>

08005ed2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005ed2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005ed4:	3204      	adds	r2, #4

08005ed6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005ed6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005ed8:	d3fb      	bcc.n	8005ed2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005eda:	f7ff ffd7 	bl	8005e8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005ede:	f006 f9fb 	bl	800c2d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005ee2:	f7fd fc85 	bl	80037f0 <main>
  bx  lr    
 8005ee6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005ee8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005eec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005ef0:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8005ef4:	0800f4f0 	.word	0x0800f4f0
  ldr r2, =_sbss
 8005ef8:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8005efc:	2000274c 	.word	0x2000274c

08005f00 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005f00:	e7fe      	b.n	8005f00 <CAN1_RX0_IRQHandler>
	...

08005f04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005f08:	4b0e      	ldr	r3, [pc, #56]	@ (8005f44 <HAL_Init+0x40>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a0d      	ldr	r2, [pc, #52]	@ (8005f44 <HAL_Init+0x40>)
 8005f0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005f12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005f14:	4b0b      	ldr	r3, [pc, #44]	@ (8005f44 <HAL_Init+0x40>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a0a      	ldr	r2, [pc, #40]	@ (8005f44 <HAL_Init+0x40>)
 8005f1a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005f1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005f20:	4b08      	ldr	r3, [pc, #32]	@ (8005f44 <HAL_Init+0x40>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a07      	ldr	r2, [pc, #28]	@ (8005f44 <HAL_Init+0x40>)
 8005f26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005f2c:	2003      	movs	r0, #3
 8005f2e:	f000 fddb 	bl	8006ae8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005f32:	200f      	movs	r0, #15
 8005f34:	f000 f808 	bl	8005f48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005f38:	f7ff fb98 	bl	800566c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	40023c00 	.word	0x40023c00

08005f48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005f50:	4b12      	ldr	r3, [pc, #72]	@ (8005f9c <HAL_InitTick+0x54>)
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	4b12      	ldr	r3, [pc, #72]	@ (8005fa0 <HAL_InitTick+0x58>)
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	4619      	mov	r1, r3
 8005f5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005f5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f66:	4618      	mov	r0, r3
 8005f68:	f000 fdf3 	bl	8006b52 <HAL_SYSTICK_Config>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d001      	beq.n	8005f76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e00e      	b.n	8005f94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2b0f      	cmp	r3, #15
 8005f7a:	d80a      	bhi.n	8005f92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	6879      	ldr	r1, [r7, #4]
 8005f80:	f04f 30ff 	mov.w	r0, #4294967295
 8005f84:	f000 fdbb 	bl	8006afe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005f88:	4a06      	ldr	r2, [pc, #24]	@ (8005fa4 <HAL_InitTick+0x5c>)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	e000      	b.n	8005f94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3708      	adds	r7, #8
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}
 8005f9c:	20000004 	.word	0x20000004
 8005fa0:	2000000c 	.word	0x2000000c
 8005fa4:	20000008 	.word	0x20000008

08005fa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005fac:	4b06      	ldr	r3, [pc, #24]	@ (8005fc8 <HAL_IncTick+0x20>)
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	4b06      	ldr	r3, [pc, #24]	@ (8005fcc <HAL_IncTick+0x24>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	4a04      	ldr	r2, [pc, #16]	@ (8005fcc <HAL_IncTick+0x24>)
 8005fba:	6013      	str	r3, [r2, #0]
}
 8005fbc:	bf00      	nop
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr
 8005fc6:	bf00      	nop
 8005fc8:	2000000c 	.word	0x2000000c
 8005fcc:	200025e8 	.word	0x200025e8

08005fd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	af00      	add	r7, sp, #0
  return uwTick;
 8005fd4:	4b03      	ldr	r3, [pc, #12]	@ (8005fe4 <HAL_GetTick+0x14>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr
 8005fe2:	bf00      	nop
 8005fe4:	200025e8 	.word	0x200025e8

08005fe8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005ff0:	f7ff ffee 	bl	8005fd0 <HAL_GetTick>
 8005ff4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006000:	d005      	beq.n	800600e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006002:	4b0a      	ldr	r3, [pc, #40]	@ (800602c <HAL_Delay+0x44>)
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	461a      	mov	r2, r3
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	4413      	add	r3, r2
 800600c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800600e:	bf00      	nop
 8006010:	f7ff ffde 	bl	8005fd0 <HAL_GetTick>
 8006014:	4602      	mov	r2, r0
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	1ad3      	subs	r3, r2, r3
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	429a      	cmp	r2, r3
 800601e:	d8f7      	bhi.n	8006010 <HAL_Delay+0x28>
  {
  }
}
 8006020:	bf00      	nop
 8006022:	bf00      	nop
 8006024:	3710      	adds	r7, #16
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop
 800602c:	2000000c 	.word	0x2000000c

08006030 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006038:	2300      	movs	r3, #0
 800603a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d101      	bne.n	8006046 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e033      	b.n	80060ae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800604a:	2b00      	cmp	r3, #0
 800604c:	d109      	bne.n	8006062 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f7ff fb34 	bl	80056bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006066:	f003 0310 	and.w	r3, r3, #16
 800606a:	2b00      	cmp	r3, #0
 800606c:	d118      	bne.n	80060a0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006072:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006076:	f023 0302 	bic.w	r3, r3, #2
 800607a:	f043 0202 	orr.w	r2, r3, #2
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 fb5a 	bl	800673c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006092:	f023 0303 	bic.w	r3, r3, #3
 8006096:	f043 0201 	orr.w	r2, r3, #1
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	641a      	str	r2, [r3, #64]	@ 0x40
 800609e:	e001      	b.n	80060a4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80060ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3710      	adds	r7, #16
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
	...

080060b8 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b085      	sub	sp, #20
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80060c0:	2300      	movs	r3, #0
 80060c2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d101      	bne.n	80060d2 <HAL_ADC_Start_IT+0x1a>
 80060ce:	2302      	movs	r3, #2
 80060d0:	e0bd      	b.n	800624e <HAL_ADC_Start_IT+0x196>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2201      	movs	r2, #1
 80060d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	f003 0301 	and.w	r3, r3, #1
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d018      	beq.n	800611a <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	689a      	ldr	r2, [r3, #8]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f042 0201 	orr.w	r2, r2, #1
 80060f6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80060f8:	4b58      	ldr	r3, [pc, #352]	@ (800625c <HAL_ADC_Start_IT+0x1a4>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a58      	ldr	r2, [pc, #352]	@ (8006260 <HAL_ADC_Start_IT+0x1a8>)
 80060fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006102:	0c9a      	lsrs	r2, r3, #18
 8006104:	4613      	mov	r3, r2
 8006106:	005b      	lsls	r3, r3, #1
 8006108:	4413      	add	r3, r2
 800610a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800610c:	e002      	b.n	8006114 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	3b01      	subs	r3, #1
 8006112:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d1f9      	bne.n	800610e <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	f003 0301 	and.w	r3, r3, #1
 8006124:	2b01      	cmp	r3, #1
 8006126:	f040 8085 	bne.w	8006234 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800612e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8006132:	f023 0301 	bic.w	r3, r3, #1
 8006136:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006148:	2b00      	cmp	r3, #0
 800614a:	d007      	beq.n	800615c <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006150:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006154:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006160:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006164:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006168:	d106      	bne.n	8006178 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800616e:	f023 0206 	bic.w	r2, r3, #6
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	645a      	str	r2, [r3, #68]	@ 0x44
 8006176:	e002      	b.n	800617e <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006186:	4b37      	ldr	r3, [pc, #220]	@ (8006264 <HAL_ADC_Start_IT+0x1ac>)
 8006188:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8006192:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	6812      	ldr	r2, [r2, #0]
 800619e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80061a2:	f043 0320 	orr.w	r3, r3, #32
 80061a6:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	f003 031f 	and.w	r3, r3, #31
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d12a      	bne.n	800620a <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a2b      	ldr	r2, [pc, #172]	@ (8006268 <HAL_ADC_Start_IT+0x1b0>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d015      	beq.n	80061ea <HAL_ADC_Start_IT+0x132>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a2a      	ldr	r2, [pc, #168]	@ (800626c <HAL_ADC_Start_IT+0x1b4>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d105      	bne.n	80061d4 <HAL_ADC_Start_IT+0x11c>
 80061c8:	4b26      	ldr	r3, [pc, #152]	@ (8006264 <HAL_ADC_Start_IT+0x1ac>)
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	f003 031f 	and.w	r3, r3, #31
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d00a      	beq.n	80061ea <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a25      	ldr	r2, [pc, #148]	@ (8006270 <HAL_ADC_Start_IT+0x1b8>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d136      	bne.n	800624c <HAL_ADC_Start_IT+0x194>
 80061de:	4b21      	ldr	r3, [pc, #132]	@ (8006264 <HAL_ADC_Start_IT+0x1ac>)
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	f003 0310 	and.w	r3, r3, #16
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d130      	bne.n	800624c <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d129      	bne.n	800624c <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	689a      	ldr	r2, [r3, #8]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8006206:	609a      	str	r2, [r3, #8]
 8006208:	e020      	b.n	800624c <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a16      	ldr	r2, [pc, #88]	@ (8006268 <HAL_ADC_Start_IT+0x1b0>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d11b      	bne.n	800624c <HAL_ADC_Start_IT+0x194>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800621e:	2b00      	cmp	r3, #0
 8006220:	d114      	bne.n	800624c <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	689a      	ldr	r2, [r3, #8]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8006230:	609a      	str	r2, [r3, #8]
 8006232:	e00b      	b.n	800624c <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006238:	f043 0210 	orr.w	r2, r3, #16
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006244:	f043 0201 	orr.w	r2, r3, #1
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800624c:	2300      	movs	r3, #0
}
 800624e:	4618      	mov	r0, r3
 8006250:	3714      	adds	r7, #20
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr
 800625a:	bf00      	nop
 800625c:	20000004 	.word	0x20000004
 8006260:	431bde83 	.word	0x431bde83
 8006264:	40012300 	.word	0x40012300
 8006268:	40012000 	.word	0x40012000
 800626c:	40012100 	.word	0x40012100
 8006270:	40012200 	.word	0x40012200

08006274 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b086      	sub	sp, #24
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800627c:	2300      	movs	r3, #0
 800627e:	617b      	str	r3, [r7, #20]
 8006280:	2300      	movs	r3, #0
 8006282:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f003 0302 	and.w	r3, r3, #2
 800629a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	f003 0320 	and.w	r3, r3, #32
 80062a2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d049      	beq.n	800633e <HAL_ADC_IRQHandler+0xca>
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d046      	beq.n	800633e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062b4:	f003 0310 	and.w	r3, r3, #16
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d105      	bne.n	80062c8 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062c0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d12b      	bne.n	800632e <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d127      	bne.n	800632e <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062e4:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d006      	beq.n	80062fa <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d119      	bne.n	800632e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	685a      	ldr	r2, [r3, #4]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f022 0220 	bic.w	r2, r2, #32
 8006308:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800630e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800631a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800631e:	2b00      	cmp	r3, #0
 8006320:	d105      	bne.n	800632e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006326:	f043 0201 	orr.w	r2, r3, #1
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f7fd fa3a 	bl	80037a8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f06f 0212 	mvn.w	r2, #18
 800633c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f003 0304 	and.w	r3, r3, #4
 8006344:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800634c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d057      	beq.n	8006404 <HAL_ADC_IRQHandler+0x190>
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d054      	beq.n	8006404 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800635e:	f003 0310 	and.w	r3, r3, #16
 8006362:	2b00      	cmp	r3, #0
 8006364:	d105      	bne.n	8006372 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800636a:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800637c:	2b00      	cmp	r3, #0
 800637e:	d139      	bne.n	80063f4 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006386:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800638a:	2b00      	cmp	r3, #0
 800638c:	d006      	beq.n	800639c <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8006398:	2b00      	cmp	r3, #0
 800639a:	d12b      	bne.n	80063f4 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d124      	bne.n	80063f4 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d11d      	bne.n	80063f4 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d119      	bne.n	80063f4 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	685a      	ldr	r2, [r3, #4]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80063ce:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063d4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d105      	bne.n	80063f4 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ec:	f043 0201 	orr.w	r2, r3, #1
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 fa9d 	bl	8006934 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f06f 020c 	mvn.w	r2, #12
 8006402:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f003 0301 	and.w	r3, r3, #1
 800640a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006412:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d017      	beq.n	800644a <HAL_ADC_IRQHandler+0x1d6>
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d014      	beq.n	800644a <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 0301 	and.w	r3, r3, #1
 800642a:	2b01      	cmp	r3, #1
 800642c:	d10d      	bne.n	800644a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006432:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 f837 	bl	80064ae <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f06f 0201 	mvn.w	r2, #1
 8006448:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f003 0320 	and.w	r3, r3, #32
 8006450:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006458:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d015      	beq.n	800648c <HAL_ADC_IRQHandler+0x218>
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d012      	beq.n	800648c <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800646a:	f043 0202 	orr.w	r2, r3, #2
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f06f 0220 	mvn.w	r2, #32
 800647a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 f820 	bl	80064c2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f06f 0220 	mvn.w	r2, #32
 800648a:	601a      	str	r2, [r3, #0]
  }
}
 800648c:	bf00      	nop
 800648e:	3718      	adds	r7, #24
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	370c      	adds	r7, #12
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr

080064ae <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80064ae:	b480      	push	{r7}
 80064b0:	b083      	sub	sp, #12
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80064b6:	bf00      	nop
 80064b8:	370c      	adds	r7, #12
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr

080064c2 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80064c2:	b480      	push	{r7}
 80064c4:	b083      	sub	sp, #12
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80064ca:	bf00      	nop
 80064cc:	370c      	adds	r7, #12
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr
	...

080064d8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80064d8:	b480      	push	{r7}
 80064da:	b085      	sub	sp, #20
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80064e2:	2300      	movs	r3, #0
 80064e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d101      	bne.n	80064f4 <HAL_ADC_ConfigChannel+0x1c>
 80064f0:	2302      	movs	r3, #2
 80064f2:	e113      	b.n	800671c <HAL_ADC_ConfigChannel+0x244>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2b09      	cmp	r3, #9
 8006502:	d925      	bls.n	8006550 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	68d9      	ldr	r1, [r3, #12]
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	b29b      	uxth	r3, r3
 8006510:	461a      	mov	r2, r3
 8006512:	4613      	mov	r3, r2
 8006514:	005b      	lsls	r3, r3, #1
 8006516:	4413      	add	r3, r2
 8006518:	3b1e      	subs	r3, #30
 800651a:	2207      	movs	r2, #7
 800651c:	fa02 f303 	lsl.w	r3, r2, r3
 8006520:	43da      	mvns	r2, r3
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	400a      	ands	r2, r1
 8006528:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68d9      	ldr	r1, [r3, #12]
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	689a      	ldr	r2, [r3, #8]
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	b29b      	uxth	r3, r3
 800653a:	4618      	mov	r0, r3
 800653c:	4603      	mov	r3, r0
 800653e:	005b      	lsls	r3, r3, #1
 8006540:	4403      	add	r3, r0
 8006542:	3b1e      	subs	r3, #30
 8006544:	409a      	lsls	r2, r3
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	430a      	orrs	r2, r1
 800654c:	60da      	str	r2, [r3, #12]
 800654e:	e022      	b.n	8006596 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	6919      	ldr	r1, [r3, #16]
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	b29b      	uxth	r3, r3
 800655c:	461a      	mov	r2, r3
 800655e:	4613      	mov	r3, r2
 8006560:	005b      	lsls	r3, r3, #1
 8006562:	4413      	add	r3, r2
 8006564:	2207      	movs	r2, #7
 8006566:	fa02 f303 	lsl.w	r3, r2, r3
 800656a:	43da      	mvns	r2, r3
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	400a      	ands	r2, r1
 8006572:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	6919      	ldr	r1, [r3, #16]
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	689a      	ldr	r2, [r3, #8]
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	b29b      	uxth	r3, r3
 8006584:	4618      	mov	r0, r3
 8006586:	4603      	mov	r3, r0
 8006588:	005b      	lsls	r3, r3, #1
 800658a:	4403      	add	r3, r0
 800658c:	409a      	lsls	r2, r3
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	430a      	orrs	r2, r1
 8006594:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	2b06      	cmp	r3, #6
 800659c:	d824      	bhi.n	80065e8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	685a      	ldr	r2, [r3, #4]
 80065a8:	4613      	mov	r3, r2
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	4413      	add	r3, r2
 80065ae:	3b05      	subs	r3, #5
 80065b0:	221f      	movs	r2, #31
 80065b2:	fa02 f303 	lsl.w	r3, r2, r3
 80065b6:	43da      	mvns	r2, r3
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	400a      	ands	r2, r1
 80065be:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	4618      	mov	r0, r3
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	685a      	ldr	r2, [r3, #4]
 80065d2:	4613      	mov	r3, r2
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	4413      	add	r3, r2
 80065d8:	3b05      	subs	r3, #5
 80065da:	fa00 f203 	lsl.w	r2, r0, r3
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	430a      	orrs	r2, r1
 80065e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80065e6:	e04c      	b.n	8006682 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	2b0c      	cmp	r3, #12
 80065ee:	d824      	bhi.n	800663a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	685a      	ldr	r2, [r3, #4]
 80065fa:	4613      	mov	r3, r2
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	4413      	add	r3, r2
 8006600:	3b23      	subs	r3, #35	@ 0x23
 8006602:	221f      	movs	r2, #31
 8006604:	fa02 f303 	lsl.w	r3, r2, r3
 8006608:	43da      	mvns	r2, r3
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	400a      	ands	r2, r1
 8006610:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	b29b      	uxth	r3, r3
 800661e:	4618      	mov	r0, r3
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	685a      	ldr	r2, [r3, #4]
 8006624:	4613      	mov	r3, r2
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	4413      	add	r3, r2
 800662a:	3b23      	subs	r3, #35	@ 0x23
 800662c:	fa00 f203 	lsl.w	r2, r0, r3
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	430a      	orrs	r2, r1
 8006636:	631a      	str	r2, [r3, #48]	@ 0x30
 8006638:	e023      	b.n	8006682 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	685a      	ldr	r2, [r3, #4]
 8006644:	4613      	mov	r3, r2
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	4413      	add	r3, r2
 800664a:	3b41      	subs	r3, #65	@ 0x41
 800664c:	221f      	movs	r2, #31
 800664e:	fa02 f303 	lsl.w	r3, r2, r3
 8006652:	43da      	mvns	r2, r3
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	400a      	ands	r2, r1
 800665a:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	b29b      	uxth	r3, r3
 8006668:	4618      	mov	r0, r3
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	685a      	ldr	r2, [r3, #4]
 800666e:	4613      	mov	r3, r2
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	4413      	add	r3, r2
 8006674:	3b41      	subs	r3, #65	@ 0x41
 8006676:	fa00 f203 	lsl.w	r2, r0, r3
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	430a      	orrs	r2, r1
 8006680:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006682:	4b29      	ldr	r3, [pc, #164]	@ (8006728 <HAL_ADC_ConfigChannel+0x250>)
 8006684:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a28      	ldr	r2, [pc, #160]	@ (800672c <HAL_ADC_ConfigChannel+0x254>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d10f      	bne.n	80066b0 <HAL_ADC_ConfigChannel+0x1d8>
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	2b12      	cmp	r3, #18
 8006696:	d10b      	bne.n	80066b0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a1d      	ldr	r2, [pc, #116]	@ (800672c <HAL_ADC_ConfigChannel+0x254>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d12b      	bne.n	8006712 <HAL_ADC_ConfigChannel+0x23a>
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a1c      	ldr	r2, [pc, #112]	@ (8006730 <HAL_ADC_ConfigChannel+0x258>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d003      	beq.n	80066cc <HAL_ADC_ConfigChannel+0x1f4>
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	2b11      	cmp	r3, #17
 80066ca:	d122      	bne.n	8006712 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a11      	ldr	r2, [pc, #68]	@ (8006730 <HAL_ADC_ConfigChannel+0x258>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d111      	bne.n	8006712 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80066ee:	4b11      	ldr	r3, [pc, #68]	@ (8006734 <HAL_ADC_ConfigChannel+0x25c>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a11      	ldr	r2, [pc, #68]	@ (8006738 <HAL_ADC_ConfigChannel+0x260>)
 80066f4:	fba2 2303 	umull	r2, r3, r2, r3
 80066f8:	0c9a      	lsrs	r2, r3, #18
 80066fa:	4613      	mov	r3, r2
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	4413      	add	r3, r2
 8006700:	005b      	lsls	r3, r3, #1
 8006702:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006704:	e002      	b.n	800670c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	3b01      	subs	r3, #1
 800670a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d1f9      	bne.n	8006706 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800671a:	2300      	movs	r3, #0
}
 800671c:	4618      	mov	r0, r3
 800671e:	3714      	adds	r7, #20
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr
 8006728:	40012300 	.word	0x40012300
 800672c:	40012000 	.word	0x40012000
 8006730:	10000012 	.word	0x10000012
 8006734:	20000004 	.word	0x20000004
 8006738:	431bde83 	.word	0x431bde83

0800673c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800673c:	b480      	push	{r7}
 800673e:	b085      	sub	sp, #20
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006744:	4b79      	ldr	r3, [pc, #484]	@ (800692c <ADC_Init+0x1f0>)
 8006746:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	685a      	ldr	r2, [r3, #4]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	431a      	orrs	r2, r3
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	685a      	ldr	r2, [r3, #4]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006770:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	6859      	ldr	r1, [r3, #4]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	691b      	ldr	r3, [r3, #16]
 800677c:	021a      	lsls	r2, r3, #8
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	430a      	orrs	r2, r1
 8006784:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	685a      	ldr	r2, [r3, #4]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8006794:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	6859      	ldr	r1, [r3, #4]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	689a      	ldr	r2, [r3, #8]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	430a      	orrs	r2, r1
 80067a6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	689a      	ldr	r2, [r3, #8]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80067b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	6899      	ldr	r1, [r3, #8]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	68da      	ldr	r2, [r3, #12]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	430a      	orrs	r2, r1
 80067c8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067ce:	4a58      	ldr	r2, [pc, #352]	@ (8006930 <ADC_Init+0x1f4>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d022      	beq.n	800681a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	689a      	ldr	r2, [r3, #8]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80067e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	6899      	ldr	r1, [r3, #8]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	430a      	orrs	r2, r1
 80067f4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	689a      	ldr	r2, [r3, #8]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006804:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	6899      	ldr	r1, [r3, #8]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	430a      	orrs	r2, r1
 8006816:	609a      	str	r2, [r3, #8]
 8006818:	e00f      	b.n	800683a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	689a      	ldr	r2, [r3, #8]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006828:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	689a      	ldr	r2, [r3, #8]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006838:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	689a      	ldr	r2, [r3, #8]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f022 0202 	bic.w	r2, r2, #2
 8006848:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	6899      	ldr	r1, [r3, #8]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	7e1b      	ldrb	r3, [r3, #24]
 8006854:	005a      	lsls	r2, r3, #1
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	430a      	orrs	r2, r1
 800685c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d01b      	beq.n	80068a0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	685a      	ldr	r2, [r3, #4]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006876:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	685a      	ldr	r2, [r3, #4]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8006886:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	6859      	ldr	r1, [r3, #4]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006892:	3b01      	subs	r3, #1
 8006894:	035a      	lsls	r2, r3, #13
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	430a      	orrs	r2, r1
 800689c:	605a      	str	r2, [r3, #4]
 800689e:	e007      	b.n	80068b0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	685a      	ldr	r2, [r3, #4]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80068ae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80068be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	69db      	ldr	r3, [r3, #28]
 80068ca:	3b01      	subs	r3, #1
 80068cc:	051a      	lsls	r2, r3, #20
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	430a      	orrs	r2, r1
 80068d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	689a      	ldr	r2, [r3, #8]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80068e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	6899      	ldr	r1, [r3, #8]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80068f2:	025a      	lsls	r2, r3, #9
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	430a      	orrs	r2, r1
 80068fa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	689a      	ldr	r2, [r3, #8]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800690a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	6899      	ldr	r1, [r3, #8]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	695b      	ldr	r3, [r3, #20]
 8006916:	029a      	lsls	r2, r3, #10
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	430a      	orrs	r2, r1
 800691e:	609a      	str	r2, [r3, #8]
}
 8006920:	bf00      	nop
 8006922:	3714      	adds	r7, #20
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr
 800692c:	40012300 	.word	0x40012300
 8006930:	0f000001 	.word	0x0f000001

08006934 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800693c:	bf00      	nop
 800693e:	370c      	adds	r7, #12
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr

08006948 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006948:	b480      	push	{r7}
 800694a:	b085      	sub	sp, #20
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f003 0307 	and.w	r3, r3, #7
 8006956:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006958:	4b0c      	ldr	r3, [pc, #48]	@ (800698c <__NVIC_SetPriorityGrouping+0x44>)
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800695e:	68ba      	ldr	r2, [r7, #8]
 8006960:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006964:	4013      	ands	r3, r2
 8006966:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006970:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006974:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006978:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800697a:	4a04      	ldr	r2, [pc, #16]	@ (800698c <__NVIC_SetPriorityGrouping+0x44>)
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	60d3      	str	r3, [r2, #12]
}
 8006980:	bf00      	nop
 8006982:	3714      	adds	r7, #20
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr
 800698c:	e000ed00 	.word	0xe000ed00

08006990 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006990:	b480      	push	{r7}
 8006992:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006994:	4b04      	ldr	r3, [pc, #16]	@ (80069a8 <__NVIC_GetPriorityGrouping+0x18>)
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	0a1b      	lsrs	r3, r3, #8
 800699a:	f003 0307 	and.w	r3, r3, #7
}
 800699e:	4618      	mov	r0, r3
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr
 80069a8:	e000ed00 	.word	0xe000ed00

080069ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b083      	sub	sp, #12
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	4603      	mov	r3, r0
 80069b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80069b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	db0b      	blt.n	80069d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80069be:	79fb      	ldrb	r3, [r7, #7]
 80069c0:	f003 021f 	and.w	r2, r3, #31
 80069c4:	4907      	ldr	r1, [pc, #28]	@ (80069e4 <__NVIC_EnableIRQ+0x38>)
 80069c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069ca:	095b      	lsrs	r3, r3, #5
 80069cc:	2001      	movs	r0, #1
 80069ce:	fa00 f202 	lsl.w	r2, r0, r2
 80069d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80069d6:	bf00      	nop
 80069d8:	370c      	adds	r7, #12
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop
 80069e4:	e000e100 	.word	0xe000e100

080069e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	4603      	mov	r3, r0
 80069f0:	6039      	str	r1, [r7, #0]
 80069f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80069f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	db0a      	blt.n	8006a12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	b2da      	uxtb	r2, r3
 8006a00:	490c      	ldr	r1, [pc, #48]	@ (8006a34 <__NVIC_SetPriority+0x4c>)
 8006a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a06:	0112      	lsls	r2, r2, #4
 8006a08:	b2d2      	uxtb	r2, r2
 8006a0a:	440b      	add	r3, r1
 8006a0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006a10:	e00a      	b.n	8006a28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	b2da      	uxtb	r2, r3
 8006a16:	4908      	ldr	r1, [pc, #32]	@ (8006a38 <__NVIC_SetPriority+0x50>)
 8006a18:	79fb      	ldrb	r3, [r7, #7]
 8006a1a:	f003 030f 	and.w	r3, r3, #15
 8006a1e:	3b04      	subs	r3, #4
 8006a20:	0112      	lsls	r2, r2, #4
 8006a22:	b2d2      	uxtb	r2, r2
 8006a24:	440b      	add	r3, r1
 8006a26:	761a      	strb	r2, [r3, #24]
}
 8006a28:	bf00      	nop
 8006a2a:	370c      	adds	r7, #12
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr
 8006a34:	e000e100 	.word	0xe000e100
 8006a38:	e000ed00 	.word	0xe000ed00

08006a3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b089      	sub	sp, #36	@ 0x24
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f003 0307 	and.w	r3, r3, #7
 8006a4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	f1c3 0307 	rsb	r3, r3, #7
 8006a56:	2b04      	cmp	r3, #4
 8006a58:	bf28      	it	cs
 8006a5a:	2304      	movcs	r3, #4
 8006a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	3304      	adds	r3, #4
 8006a62:	2b06      	cmp	r3, #6
 8006a64:	d902      	bls.n	8006a6c <NVIC_EncodePriority+0x30>
 8006a66:	69fb      	ldr	r3, [r7, #28]
 8006a68:	3b03      	subs	r3, #3
 8006a6a:	e000      	b.n	8006a6e <NVIC_EncodePriority+0x32>
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a70:	f04f 32ff 	mov.w	r2, #4294967295
 8006a74:	69bb      	ldr	r3, [r7, #24]
 8006a76:	fa02 f303 	lsl.w	r3, r2, r3
 8006a7a:	43da      	mvns	r2, r3
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	401a      	ands	r2, r3
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006a84:	f04f 31ff 	mov.w	r1, #4294967295
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8006a8e:	43d9      	mvns	r1, r3
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a94:	4313      	orrs	r3, r2
         );
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3724      	adds	r7, #36	@ 0x24
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr
	...

08006aa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b082      	sub	sp, #8
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	3b01      	subs	r3, #1
 8006ab0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006ab4:	d301      	bcc.n	8006aba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e00f      	b.n	8006ada <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006aba:	4a0a      	ldr	r2, [pc, #40]	@ (8006ae4 <SysTick_Config+0x40>)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	3b01      	subs	r3, #1
 8006ac0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006ac2:	210f      	movs	r1, #15
 8006ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ac8:	f7ff ff8e 	bl	80069e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006acc:	4b05      	ldr	r3, [pc, #20]	@ (8006ae4 <SysTick_Config+0x40>)
 8006ace:	2200      	movs	r2, #0
 8006ad0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006ad2:	4b04      	ldr	r3, [pc, #16]	@ (8006ae4 <SysTick_Config+0x40>)
 8006ad4:	2207      	movs	r2, #7
 8006ad6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3708      	adds	r7, #8
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	e000e010 	.word	0xe000e010

08006ae8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b082      	sub	sp, #8
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f7ff ff29 	bl	8006948 <__NVIC_SetPriorityGrouping>
}
 8006af6:	bf00      	nop
 8006af8:	3708      	adds	r7, #8
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}

08006afe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006afe:	b580      	push	{r7, lr}
 8006b00:	b086      	sub	sp, #24
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	4603      	mov	r3, r0
 8006b06:	60b9      	str	r1, [r7, #8]
 8006b08:	607a      	str	r2, [r7, #4]
 8006b0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006b10:	f7ff ff3e 	bl	8006990 <__NVIC_GetPriorityGrouping>
 8006b14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	68b9      	ldr	r1, [r7, #8]
 8006b1a:	6978      	ldr	r0, [r7, #20]
 8006b1c:	f7ff ff8e 	bl	8006a3c <NVIC_EncodePriority>
 8006b20:	4602      	mov	r2, r0
 8006b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b26:	4611      	mov	r1, r2
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f7ff ff5d 	bl	80069e8 <__NVIC_SetPriority>
}
 8006b2e:	bf00      	nop
 8006b30:	3718      	adds	r7, #24
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}

08006b36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006b36:	b580      	push	{r7, lr}
 8006b38:	b082      	sub	sp, #8
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b44:	4618      	mov	r0, r3
 8006b46:	f7ff ff31 	bl	80069ac <__NVIC_EnableIRQ>
}
 8006b4a:	bf00      	nop
 8006b4c:	3708      	adds	r7, #8
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}

08006b52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006b52:	b580      	push	{r7, lr}
 8006b54:	b082      	sub	sp, #8
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f7ff ffa2 	bl	8006aa4 <SysTick_Config>
 8006b60:	4603      	mov	r3, r0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3708      	adds	r7, #8
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}

08006b6a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b084      	sub	sp, #16
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b76:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006b78:	f7ff fa2a 	bl	8005fd0 <HAL_GetTick>
 8006b7c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	2b02      	cmp	r3, #2
 8006b88:	d008      	beq.n	8006b9c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2280      	movs	r2, #128	@ 0x80
 8006b8e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e052      	b.n	8006c42 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f022 0216 	bic.w	r2, r2, #22
 8006baa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	695a      	ldr	r2, [r3, #20]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006bba:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d103      	bne.n	8006bcc <HAL_DMA_Abort+0x62>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d007      	beq.n	8006bdc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f022 0208 	bic.w	r2, r2, #8
 8006bda:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f022 0201 	bic.w	r2, r2, #1
 8006bea:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006bec:	e013      	b.n	8006c16 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006bee:	f7ff f9ef 	bl	8005fd0 <HAL_GetTick>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	1ad3      	subs	r3, r2, r3
 8006bf8:	2b05      	cmp	r3, #5
 8006bfa:	d90c      	bls.n	8006c16 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2220      	movs	r2, #32
 8006c00:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2203      	movs	r2, #3
 8006c06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8006c12:	2303      	movs	r3, #3
 8006c14:	e015      	b.n	8006c42 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f003 0301 	and.w	r3, r3, #1
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d1e4      	bne.n	8006bee <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c28:	223f      	movs	r2, #63	@ 0x3f
 8006c2a:	409a      	lsls	r2, r3
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8006c40:	2300      	movs	r3, #0
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3710      	adds	r7, #16
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}

08006c4a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006c4a:	b480      	push	{r7}
 8006c4c:	b083      	sub	sp, #12
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	d004      	beq.n	8006c68 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2280      	movs	r2, #128	@ 0x80
 8006c62:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	e00c      	b.n	8006c82 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2205      	movs	r2, #5
 8006c6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f022 0201 	bic.w	r2, r2, #1
 8006c7e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006c80:	2300      	movs	r3, #0
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	370c      	adds	r7, #12
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr
	...

08006c90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b089      	sub	sp, #36	@ 0x24
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	61fb      	str	r3, [r7, #28]
 8006caa:	e165      	b.n	8006f78 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006cac:	2201      	movs	r2, #1
 8006cae:	69fb      	ldr	r3, [r7, #28]
 8006cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8006cb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	697a      	ldr	r2, [r7, #20]
 8006cbc:	4013      	ands	r3, r2
 8006cbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006cc0:	693a      	ldr	r2, [r7, #16]
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	f040 8154 	bne.w	8006f72 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	f003 0303 	and.w	r3, r3, #3
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d005      	beq.n	8006ce2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006cde:	2b02      	cmp	r3, #2
 8006ce0:	d130      	bne.n	8006d44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	005b      	lsls	r3, r3, #1
 8006cec:	2203      	movs	r2, #3
 8006cee:	fa02 f303 	lsl.w	r3, r2, r3
 8006cf2:	43db      	mvns	r3, r3
 8006cf4:	69ba      	ldr	r2, [r7, #24]
 8006cf6:	4013      	ands	r3, r2
 8006cf8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	68da      	ldr	r2, [r3, #12]
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	005b      	lsls	r3, r3, #1
 8006d02:	fa02 f303 	lsl.w	r3, r2, r3
 8006d06:	69ba      	ldr	r2, [r7, #24]
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	69ba      	ldr	r2, [r7, #24]
 8006d10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006d18:	2201      	movs	r2, #1
 8006d1a:	69fb      	ldr	r3, [r7, #28]
 8006d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d20:	43db      	mvns	r3, r3
 8006d22:	69ba      	ldr	r2, [r7, #24]
 8006d24:	4013      	ands	r3, r2
 8006d26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	091b      	lsrs	r3, r3, #4
 8006d2e:	f003 0201 	and.w	r2, r3, #1
 8006d32:	69fb      	ldr	r3, [r7, #28]
 8006d34:	fa02 f303 	lsl.w	r3, r2, r3
 8006d38:	69ba      	ldr	r2, [r7, #24]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	69ba      	ldr	r2, [r7, #24]
 8006d42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	f003 0303 	and.w	r3, r3, #3
 8006d4c:	2b03      	cmp	r3, #3
 8006d4e:	d017      	beq.n	8006d80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	68db      	ldr	r3, [r3, #12]
 8006d54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006d56:	69fb      	ldr	r3, [r7, #28]
 8006d58:	005b      	lsls	r3, r3, #1
 8006d5a:	2203      	movs	r2, #3
 8006d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d60:	43db      	mvns	r3, r3
 8006d62:	69ba      	ldr	r2, [r7, #24]
 8006d64:	4013      	ands	r3, r2
 8006d66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	689a      	ldr	r2, [r3, #8]
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	005b      	lsls	r3, r3, #1
 8006d70:	fa02 f303 	lsl.w	r3, r2, r3
 8006d74:	69ba      	ldr	r2, [r7, #24]
 8006d76:	4313      	orrs	r3, r2
 8006d78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	69ba      	ldr	r2, [r7, #24]
 8006d7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	f003 0303 	and.w	r3, r3, #3
 8006d88:	2b02      	cmp	r3, #2
 8006d8a:	d123      	bne.n	8006dd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006d8c:	69fb      	ldr	r3, [r7, #28]
 8006d8e:	08da      	lsrs	r2, r3, #3
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	3208      	adds	r2, #8
 8006d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	f003 0307 	and.w	r3, r3, #7
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	220f      	movs	r2, #15
 8006da4:	fa02 f303 	lsl.w	r3, r2, r3
 8006da8:	43db      	mvns	r3, r3
 8006daa:	69ba      	ldr	r2, [r7, #24]
 8006dac:	4013      	ands	r3, r2
 8006dae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	691a      	ldr	r2, [r3, #16]
 8006db4:	69fb      	ldr	r3, [r7, #28]
 8006db6:	f003 0307 	and.w	r3, r3, #7
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8006dc0:	69ba      	ldr	r2, [r7, #24]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006dc6:	69fb      	ldr	r3, [r7, #28]
 8006dc8:	08da      	lsrs	r2, r3, #3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	3208      	adds	r2, #8
 8006dce:	69b9      	ldr	r1, [r7, #24]
 8006dd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006dda:	69fb      	ldr	r3, [r7, #28]
 8006ddc:	005b      	lsls	r3, r3, #1
 8006dde:	2203      	movs	r2, #3
 8006de0:	fa02 f303 	lsl.w	r3, r2, r3
 8006de4:	43db      	mvns	r3, r3
 8006de6:	69ba      	ldr	r2, [r7, #24]
 8006de8:	4013      	ands	r3, r2
 8006dea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	f003 0203 	and.w	r2, r3, #3
 8006df4:	69fb      	ldr	r3, [r7, #28]
 8006df6:	005b      	lsls	r3, r3, #1
 8006df8:	fa02 f303 	lsl.w	r3, r2, r3
 8006dfc:	69ba      	ldr	r2, [r7, #24]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	69ba      	ldr	r2, [r7, #24]
 8006e06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	f000 80ae 	beq.w	8006f72 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006e16:	2300      	movs	r3, #0
 8006e18:	60fb      	str	r3, [r7, #12]
 8006e1a:	4b5d      	ldr	r3, [pc, #372]	@ (8006f90 <HAL_GPIO_Init+0x300>)
 8006e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e1e:	4a5c      	ldr	r2, [pc, #368]	@ (8006f90 <HAL_GPIO_Init+0x300>)
 8006e20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006e24:	6453      	str	r3, [r2, #68]	@ 0x44
 8006e26:	4b5a      	ldr	r3, [pc, #360]	@ (8006f90 <HAL_GPIO_Init+0x300>)
 8006e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e2e:	60fb      	str	r3, [r7, #12]
 8006e30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006e32:	4a58      	ldr	r2, [pc, #352]	@ (8006f94 <HAL_GPIO_Init+0x304>)
 8006e34:	69fb      	ldr	r3, [r7, #28]
 8006e36:	089b      	lsrs	r3, r3, #2
 8006e38:	3302      	adds	r3, #2
 8006e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	f003 0303 	and.w	r3, r3, #3
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	220f      	movs	r2, #15
 8006e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e4e:	43db      	mvns	r3, r3
 8006e50:	69ba      	ldr	r2, [r7, #24]
 8006e52:	4013      	ands	r3, r2
 8006e54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	4a4f      	ldr	r2, [pc, #316]	@ (8006f98 <HAL_GPIO_Init+0x308>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d025      	beq.n	8006eaa <HAL_GPIO_Init+0x21a>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	4a4e      	ldr	r2, [pc, #312]	@ (8006f9c <HAL_GPIO_Init+0x30c>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d01f      	beq.n	8006ea6 <HAL_GPIO_Init+0x216>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	4a4d      	ldr	r2, [pc, #308]	@ (8006fa0 <HAL_GPIO_Init+0x310>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d019      	beq.n	8006ea2 <HAL_GPIO_Init+0x212>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	4a4c      	ldr	r2, [pc, #304]	@ (8006fa4 <HAL_GPIO_Init+0x314>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d013      	beq.n	8006e9e <HAL_GPIO_Init+0x20e>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	4a4b      	ldr	r2, [pc, #300]	@ (8006fa8 <HAL_GPIO_Init+0x318>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d00d      	beq.n	8006e9a <HAL_GPIO_Init+0x20a>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	4a4a      	ldr	r2, [pc, #296]	@ (8006fac <HAL_GPIO_Init+0x31c>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d007      	beq.n	8006e96 <HAL_GPIO_Init+0x206>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	4a49      	ldr	r2, [pc, #292]	@ (8006fb0 <HAL_GPIO_Init+0x320>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d101      	bne.n	8006e92 <HAL_GPIO_Init+0x202>
 8006e8e:	2306      	movs	r3, #6
 8006e90:	e00c      	b.n	8006eac <HAL_GPIO_Init+0x21c>
 8006e92:	2307      	movs	r3, #7
 8006e94:	e00a      	b.n	8006eac <HAL_GPIO_Init+0x21c>
 8006e96:	2305      	movs	r3, #5
 8006e98:	e008      	b.n	8006eac <HAL_GPIO_Init+0x21c>
 8006e9a:	2304      	movs	r3, #4
 8006e9c:	e006      	b.n	8006eac <HAL_GPIO_Init+0x21c>
 8006e9e:	2303      	movs	r3, #3
 8006ea0:	e004      	b.n	8006eac <HAL_GPIO_Init+0x21c>
 8006ea2:	2302      	movs	r3, #2
 8006ea4:	e002      	b.n	8006eac <HAL_GPIO_Init+0x21c>
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	e000      	b.n	8006eac <HAL_GPIO_Init+0x21c>
 8006eaa:	2300      	movs	r3, #0
 8006eac:	69fa      	ldr	r2, [r7, #28]
 8006eae:	f002 0203 	and.w	r2, r2, #3
 8006eb2:	0092      	lsls	r2, r2, #2
 8006eb4:	4093      	lsls	r3, r2
 8006eb6:	69ba      	ldr	r2, [r7, #24]
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006ebc:	4935      	ldr	r1, [pc, #212]	@ (8006f94 <HAL_GPIO_Init+0x304>)
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	089b      	lsrs	r3, r3, #2
 8006ec2:	3302      	adds	r3, #2
 8006ec4:	69ba      	ldr	r2, [r7, #24]
 8006ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006eca:	4b3a      	ldr	r3, [pc, #232]	@ (8006fb4 <HAL_GPIO_Init+0x324>)
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	43db      	mvns	r3, r3
 8006ed4:	69ba      	ldr	r2, [r7, #24]
 8006ed6:	4013      	ands	r3, r2
 8006ed8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d003      	beq.n	8006eee <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8006ee6:	69ba      	ldr	r2, [r7, #24]
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	4313      	orrs	r3, r2
 8006eec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006eee:	4a31      	ldr	r2, [pc, #196]	@ (8006fb4 <HAL_GPIO_Init+0x324>)
 8006ef0:	69bb      	ldr	r3, [r7, #24]
 8006ef2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006ef4:	4b2f      	ldr	r3, [pc, #188]	@ (8006fb4 <HAL_GPIO_Init+0x324>)
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	43db      	mvns	r3, r3
 8006efe:	69ba      	ldr	r2, [r7, #24]
 8006f00:	4013      	ands	r3, r2
 8006f02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d003      	beq.n	8006f18 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8006f10:	69ba      	ldr	r2, [r7, #24]
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	4313      	orrs	r3, r2
 8006f16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006f18:	4a26      	ldr	r2, [pc, #152]	@ (8006fb4 <HAL_GPIO_Init+0x324>)
 8006f1a:	69bb      	ldr	r3, [r7, #24]
 8006f1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006f1e:	4b25      	ldr	r3, [pc, #148]	@ (8006fb4 <HAL_GPIO_Init+0x324>)
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	43db      	mvns	r3, r3
 8006f28:	69ba      	ldr	r2, [r7, #24]
 8006f2a:	4013      	ands	r3, r2
 8006f2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d003      	beq.n	8006f42 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8006f3a:	69ba      	ldr	r2, [r7, #24]
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006f42:	4a1c      	ldr	r2, [pc, #112]	@ (8006fb4 <HAL_GPIO_Init+0x324>)
 8006f44:	69bb      	ldr	r3, [r7, #24]
 8006f46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006f48:	4b1a      	ldr	r3, [pc, #104]	@ (8006fb4 <HAL_GPIO_Init+0x324>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	43db      	mvns	r3, r3
 8006f52:	69ba      	ldr	r2, [r7, #24]
 8006f54:	4013      	ands	r3, r2
 8006f56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d003      	beq.n	8006f6c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006f64:	69ba      	ldr	r2, [r7, #24]
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006f6c:	4a11      	ldr	r2, [pc, #68]	@ (8006fb4 <HAL_GPIO_Init+0x324>)
 8006f6e:	69bb      	ldr	r3, [r7, #24]
 8006f70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006f72:	69fb      	ldr	r3, [r7, #28]
 8006f74:	3301      	adds	r3, #1
 8006f76:	61fb      	str	r3, [r7, #28]
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	2b0f      	cmp	r3, #15
 8006f7c:	f67f ae96 	bls.w	8006cac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006f80:	bf00      	nop
 8006f82:	bf00      	nop
 8006f84:	3724      	adds	r7, #36	@ 0x24
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr
 8006f8e:	bf00      	nop
 8006f90:	40023800 	.word	0x40023800
 8006f94:	40013800 	.word	0x40013800
 8006f98:	40020000 	.word	0x40020000
 8006f9c:	40020400 	.word	0x40020400
 8006fa0:	40020800 	.word	0x40020800
 8006fa4:	40020c00 	.word	0x40020c00
 8006fa8:	40021000 	.word	0x40021000
 8006fac:	40021400 	.word	0x40021400
 8006fb0:	40021800 	.word	0x40021800
 8006fb4:	40013c00 	.word	0x40013c00

08006fb8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b085      	sub	sp, #20
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	691a      	ldr	r2, [r3, #16]
 8006fc8:	887b      	ldrh	r3, [r7, #2]
 8006fca:	4013      	ands	r3, r2
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d002      	beq.n	8006fd6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	73fb      	strb	r3, [r7, #15]
 8006fd4:	e001      	b.n	8006fda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3714      	adds	r7, #20
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr

08006fe8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	460b      	mov	r3, r1
 8006ff2:	807b      	strh	r3, [r7, #2]
 8006ff4:	4613      	mov	r3, r2
 8006ff6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006ff8:	787b      	ldrb	r3, [r7, #1]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d003      	beq.n	8007006 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006ffe:	887a      	ldrh	r2, [r7, #2]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007004:	e003      	b.n	800700e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007006:	887b      	ldrh	r3, [r7, #2]
 8007008:	041a      	lsls	r2, r3, #16
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	619a      	str	r2, [r3, #24]
}
 800700e:	bf00      	nop
 8007010:	370c      	adds	r7, #12
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr

0800701a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800701a:	b480      	push	{r7}
 800701c:	b085      	sub	sp, #20
 800701e:	af00      	add	r7, sp, #0
 8007020:	6078      	str	r0, [r7, #4]
 8007022:	460b      	mov	r3, r1
 8007024:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	695b      	ldr	r3, [r3, #20]
 800702a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800702c:	887a      	ldrh	r2, [r7, #2]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	4013      	ands	r3, r2
 8007032:	041a      	lsls	r2, r3, #16
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	43d9      	mvns	r1, r3
 8007038:	887b      	ldrh	r3, [r7, #2]
 800703a:	400b      	ands	r3, r1
 800703c:	431a      	orrs	r2, r3
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	619a      	str	r2, [r3, #24]
}
 8007042:	bf00      	nop
 8007044:	3714      	adds	r7, #20
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr
	...

08007050 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b084      	sub	sp, #16
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d101      	bne.n	8007062 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	e12b      	b.n	80072ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007068:	b2db      	uxtb	r3, r3
 800706a:	2b00      	cmp	r3, #0
 800706c:	d106      	bne.n	800707c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2200      	movs	r2, #0
 8007072:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f7fe fb6c 	bl	8005754 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2224      	movs	r2, #36	@ 0x24
 8007080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f022 0201 	bic.w	r2, r2, #1
 8007092:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80070a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80070b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80070b4:	f001 fcf2 	bl	8008a9c <HAL_RCC_GetPCLK1Freq>
 80070b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	4a81      	ldr	r2, [pc, #516]	@ (80072c4 <HAL_I2C_Init+0x274>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d807      	bhi.n	80070d4 <HAL_I2C_Init+0x84>
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	4a80      	ldr	r2, [pc, #512]	@ (80072c8 <HAL_I2C_Init+0x278>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	bf94      	ite	ls
 80070cc:	2301      	movls	r3, #1
 80070ce:	2300      	movhi	r3, #0
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	e006      	b.n	80070e2 <HAL_I2C_Init+0x92>
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	4a7d      	ldr	r2, [pc, #500]	@ (80072cc <HAL_I2C_Init+0x27c>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	bf94      	ite	ls
 80070dc:	2301      	movls	r3, #1
 80070de:	2300      	movhi	r3, #0
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d001      	beq.n	80070ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	e0e7      	b.n	80072ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	4a78      	ldr	r2, [pc, #480]	@ (80072d0 <HAL_I2C_Init+0x280>)
 80070ee:	fba2 2303 	umull	r2, r3, r2, r3
 80070f2:	0c9b      	lsrs	r3, r3, #18
 80070f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	68ba      	ldr	r2, [r7, #8]
 8007106:	430a      	orrs	r2, r1
 8007108:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	6a1b      	ldr	r3, [r3, #32]
 8007110:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	4a6a      	ldr	r2, [pc, #424]	@ (80072c4 <HAL_I2C_Init+0x274>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d802      	bhi.n	8007124 <HAL_I2C_Init+0xd4>
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	3301      	adds	r3, #1
 8007122:	e009      	b.n	8007138 <HAL_I2C_Init+0xe8>
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800712a:	fb02 f303 	mul.w	r3, r2, r3
 800712e:	4a69      	ldr	r2, [pc, #420]	@ (80072d4 <HAL_I2C_Init+0x284>)
 8007130:	fba2 2303 	umull	r2, r3, r2, r3
 8007134:	099b      	lsrs	r3, r3, #6
 8007136:	3301      	adds	r3, #1
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	6812      	ldr	r2, [r2, #0]
 800713c:	430b      	orrs	r3, r1
 800713e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	69db      	ldr	r3, [r3, #28]
 8007146:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800714a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	495c      	ldr	r1, [pc, #368]	@ (80072c4 <HAL_I2C_Init+0x274>)
 8007154:	428b      	cmp	r3, r1
 8007156:	d819      	bhi.n	800718c <HAL_I2C_Init+0x13c>
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	1e59      	subs	r1, r3, #1
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	005b      	lsls	r3, r3, #1
 8007162:	fbb1 f3f3 	udiv	r3, r1, r3
 8007166:	1c59      	adds	r1, r3, #1
 8007168:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800716c:	400b      	ands	r3, r1
 800716e:	2b00      	cmp	r3, #0
 8007170:	d00a      	beq.n	8007188 <HAL_I2C_Init+0x138>
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	1e59      	subs	r1, r3, #1
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	005b      	lsls	r3, r3, #1
 800717c:	fbb1 f3f3 	udiv	r3, r1, r3
 8007180:	3301      	adds	r3, #1
 8007182:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007186:	e051      	b.n	800722c <HAL_I2C_Init+0x1dc>
 8007188:	2304      	movs	r3, #4
 800718a:	e04f      	b.n	800722c <HAL_I2C_Init+0x1dc>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d111      	bne.n	80071b8 <HAL_I2C_Init+0x168>
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	1e58      	subs	r0, r3, #1
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6859      	ldr	r1, [r3, #4]
 800719c:	460b      	mov	r3, r1
 800719e:	005b      	lsls	r3, r3, #1
 80071a0:	440b      	add	r3, r1
 80071a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80071a6:	3301      	adds	r3, #1
 80071a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	bf0c      	ite	eq
 80071b0:	2301      	moveq	r3, #1
 80071b2:	2300      	movne	r3, #0
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	e012      	b.n	80071de <HAL_I2C_Init+0x18e>
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	1e58      	subs	r0, r3, #1
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6859      	ldr	r1, [r3, #4]
 80071c0:	460b      	mov	r3, r1
 80071c2:	009b      	lsls	r3, r3, #2
 80071c4:	440b      	add	r3, r1
 80071c6:	0099      	lsls	r1, r3, #2
 80071c8:	440b      	add	r3, r1
 80071ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80071ce:	3301      	adds	r3, #1
 80071d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	bf0c      	ite	eq
 80071d8:	2301      	moveq	r3, #1
 80071da:	2300      	movne	r3, #0
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d001      	beq.n	80071e6 <HAL_I2C_Init+0x196>
 80071e2:	2301      	movs	r3, #1
 80071e4:	e022      	b.n	800722c <HAL_I2C_Init+0x1dc>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d10e      	bne.n	800720c <HAL_I2C_Init+0x1bc>
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	1e58      	subs	r0, r3, #1
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6859      	ldr	r1, [r3, #4]
 80071f6:	460b      	mov	r3, r1
 80071f8:	005b      	lsls	r3, r3, #1
 80071fa:	440b      	add	r3, r1
 80071fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8007200:	3301      	adds	r3, #1
 8007202:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007206:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800720a:	e00f      	b.n	800722c <HAL_I2C_Init+0x1dc>
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	1e58      	subs	r0, r3, #1
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6859      	ldr	r1, [r3, #4]
 8007214:	460b      	mov	r3, r1
 8007216:	009b      	lsls	r3, r3, #2
 8007218:	440b      	add	r3, r1
 800721a:	0099      	lsls	r1, r3, #2
 800721c:	440b      	add	r3, r1
 800721e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007222:	3301      	adds	r3, #1
 8007224:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007228:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800722c:	6879      	ldr	r1, [r7, #4]
 800722e:	6809      	ldr	r1, [r1, #0]
 8007230:	4313      	orrs	r3, r2
 8007232:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	69da      	ldr	r2, [r3, #28]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6a1b      	ldr	r3, [r3, #32]
 8007246:	431a      	orrs	r2, r3
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	430a      	orrs	r2, r1
 800724e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800725a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	6911      	ldr	r1, [r2, #16]
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	68d2      	ldr	r2, [r2, #12]
 8007266:	4311      	orrs	r1, r2
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	6812      	ldr	r2, [r2, #0]
 800726c:	430b      	orrs	r3, r1
 800726e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	68db      	ldr	r3, [r3, #12]
 8007276:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	695a      	ldr	r2, [r3, #20]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	699b      	ldr	r3, [r3, #24]
 8007282:	431a      	orrs	r2, r3
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	430a      	orrs	r2, r1
 800728a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f042 0201 	orr.w	r2, r2, #1
 800729a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2200      	movs	r2, #0
 80072a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2220      	movs	r2, #32
 80072a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2200      	movs	r2, #0
 80072ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2200      	movs	r2, #0
 80072b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80072b8:	2300      	movs	r3, #0
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3710      	adds	r7, #16
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
 80072c2:	bf00      	nop
 80072c4:	000186a0 	.word	0x000186a0
 80072c8:	001e847f 	.word	0x001e847f
 80072cc:	003d08ff 	.word	0x003d08ff
 80072d0:	431bde83 	.word	0x431bde83
 80072d4:	10624dd3 	.word	0x10624dd3

080072d8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b088      	sub	sp, #32
 80072dc:	af02      	add	r7, sp, #8
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	607a      	str	r2, [r7, #4]
 80072e2:	461a      	mov	r2, r3
 80072e4:	460b      	mov	r3, r1
 80072e6:	817b      	strh	r3, [r7, #10]
 80072e8:	4613      	mov	r3, r2
 80072ea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80072ec:	f7fe fe70 	bl	8005fd0 <HAL_GetTick>
 80072f0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	2b20      	cmp	r3, #32
 80072fc:	f040 80e0 	bne.w	80074c0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	9300      	str	r3, [sp, #0]
 8007304:	2319      	movs	r3, #25
 8007306:	2201      	movs	r2, #1
 8007308:	4970      	ldr	r1, [pc, #448]	@ (80074cc <HAL_I2C_Master_Transmit+0x1f4>)
 800730a:	68f8      	ldr	r0, [r7, #12]
 800730c:	f001 f8f6 	bl	80084fc <I2C_WaitOnFlagUntilTimeout>
 8007310:	4603      	mov	r3, r0
 8007312:	2b00      	cmp	r3, #0
 8007314:	d001      	beq.n	800731a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007316:	2302      	movs	r3, #2
 8007318:	e0d3      	b.n	80074c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007320:	2b01      	cmp	r3, #1
 8007322:	d101      	bne.n	8007328 <HAL_I2C_Master_Transmit+0x50>
 8007324:	2302      	movs	r3, #2
 8007326:	e0cc      	b.n	80074c2 <HAL_I2C_Master_Transmit+0x1ea>
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2201      	movs	r2, #1
 800732c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f003 0301 	and.w	r3, r3, #1
 800733a:	2b01      	cmp	r3, #1
 800733c:	d007      	beq.n	800734e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f042 0201 	orr.w	r2, r2, #1
 800734c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800735c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2221      	movs	r2, #33	@ 0x21
 8007362:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2210      	movs	r2, #16
 800736a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2200      	movs	r2, #0
 8007372:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	687a      	ldr	r2, [r7, #4]
 8007378:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	893a      	ldrh	r2, [r7, #8]
 800737e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007384:	b29a      	uxth	r2, r3
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	4a50      	ldr	r2, [pc, #320]	@ (80074d0 <HAL_I2C_Master_Transmit+0x1f8>)
 800738e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007390:	8979      	ldrh	r1, [r7, #10]
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	6a3a      	ldr	r2, [r7, #32]
 8007396:	68f8      	ldr	r0, [r7, #12]
 8007398:	f000 fde2 	bl	8007f60 <I2C_MasterRequestWrite>
 800739c:	4603      	mov	r3, r0
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d001      	beq.n	80073a6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80073a2:	2301      	movs	r3, #1
 80073a4:	e08d      	b.n	80074c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073a6:	2300      	movs	r3, #0
 80073a8:	613b      	str	r3, [r7, #16]
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	695b      	ldr	r3, [r3, #20]
 80073b0:	613b      	str	r3, [r7, #16]
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	699b      	ldr	r3, [r3, #24]
 80073b8:	613b      	str	r3, [r7, #16]
 80073ba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80073bc:	e066      	b.n	800748c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80073be:	697a      	ldr	r2, [r7, #20]
 80073c0:	6a39      	ldr	r1, [r7, #32]
 80073c2:	68f8      	ldr	r0, [r7, #12]
 80073c4:	f001 f970 	bl	80086a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80073c8:	4603      	mov	r3, r0
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d00d      	beq.n	80073ea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073d2:	2b04      	cmp	r3, #4
 80073d4:	d107      	bne.n	80073e6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80073e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	e06b      	b.n	80074c2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073ee:	781a      	ldrb	r2, [r3, #0]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073fa:	1c5a      	adds	r2, r3, #1
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007404:	b29b      	uxth	r3, r3
 8007406:	3b01      	subs	r3, #1
 8007408:	b29a      	uxth	r2, r3
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007412:	3b01      	subs	r3, #1
 8007414:	b29a      	uxth	r2, r3
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	695b      	ldr	r3, [r3, #20]
 8007420:	f003 0304 	and.w	r3, r3, #4
 8007424:	2b04      	cmp	r3, #4
 8007426:	d11b      	bne.n	8007460 <HAL_I2C_Master_Transmit+0x188>
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800742c:	2b00      	cmp	r3, #0
 800742e:	d017      	beq.n	8007460 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007434:	781a      	ldrb	r2, [r3, #0]
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007440:	1c5a      	adds	r2, r3, #1
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800744a:	b29b      	uxth	r3, r3
 800744c:	3b01      	subs	r3, #1
 800744e:	b29a      	uxth	r2, r3
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007458:	3b01      	subs	r3, #1
 800745a:	b29a      	uxth	r2, r3
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007460:	697a      	ldr	r2, [r7, #20]
 8007462:	6a39      	ldr	r1, [r7, #32]
 8007464:	68f8      	ldr	r0, [r7, #12]
 8007466:	f001 f960 	bl	800872a <I2C_WaitOnBTFFlagUntilTimeout>
 800746a:	4603      	mov	r3, r0
 800746c:	2b00      	cmp	r3, #0
 800746e:	d00d      	beq.n	800748c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007474:	2b04      	cmp	r3, #4
 8007476:	d107      	bne.n	8007488 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	681a      	ldr	r2, [r3, #0]
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007486:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007488:	2301      	movs	r3, #1
 800748a:	e01a      	b.n	80074c2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007490:	2b00      	cmp	r3, #0
 8007492:	d194      	bne.n	80073be <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80074a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2220      	movs	r2, #32
 80074a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2200      	movs	r2, #0
 80074b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80074bc:	2300      	movs	r3, #0
 80074be:	e000      	b.n	80074c2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80074c0:	2302      	movs	r3, #2
  }
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3718      	adds	r7, #24
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	bf00      	nop
 80074cc:	00100002 	.word	0x00100002
 80074d0:	ffff0000 	.word	0xffff0000

080074d4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b08c      	sub	sp, #48	@ 0x30
 80074d8:	af02      	add	r7, sp, #8
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	607a      	str	r2, [r7, #4]
 80074de:	461a      	mov	r2, r3
 80074e0:	460b      	mov	r3, r1
 80074e2:	817b      	strh	r3, [r7, #10]
 80074e4:	4613      	mov	r3, r2
 80074e6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80074e8:	f7fe fd72 	bl	8005fd0 <HAL_GetTick>
 80074ec:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	2b20      	cmp	r3, #32
 80074f8:	f040 820b 	bne.w	8007912 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80074fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074fe:	9300      	str	r3, [sp, #0]
 8007500:	2319      	movs	r3, #25
 8007502:	2201      	movs	r2, #1
 8007504:	497c      	ldr	r1, [pc, #496]	@ (80076f8 <HAL_I2C_Master_Receive+0x224>)
 8007506:	68f8      	ldr	r0, [r7, #12]
 8007508:	f000 fff8 	bl	80084fc <I2C_WaitOnFlagUntilTimeout>
 800750c:	4603      	mov	r3, r0
 800750e:	2b00      	cmp	r3, #0
 8007510:	d001      	beq.n	8007516 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8007512:	2302      	movs	r3, #2
 8007514:	e1fe      	b.n	8007914 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800751c:	2b01      	cmp	r3, #1
 800751e:	d101      	bne.n	8007524 <HAL_I2C_Master_Receive+0x50>
 8007520:	2302      	movs	r3, #2
 8007522:	e1f7      	b.n	8007914 <HAL_I2C_Master_Receive+0x440>
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2201      	movs	r2, #1
 8007528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f003 0301 	and.w	r3, r3, #1
 8007536:	2b01      	cmp	r3, #1
 8007538:	d007      	beq.n	800754a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f042 0201 	orr.w	r2, r2, #1
 8007548:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007558:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2222      	movs	r2, #34	@ 0x22
 800755e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2210      	movs	r2, #16
 8007566:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2200      	movs	r2, #0
 800756e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	687a      	ldr	r2, [r7, #4]
 8007574:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	893a      	ldrh	r2, [r7, #8]
 800757a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007580:	b29a      	uxth	r2, r3
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	4a5c      	ldr	r2, [pc, #368]	@ (80076fc <HAL_I2C_Master_Receive+0x228>)
 800758a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800758c:	8979      	ldrh	r1, [r7, #10]
 800758e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007590:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007592:	68f8      	ldr	r0, [r7, #12]
 8007594:	f000 fd66 	bl	8008064 <I2C_MasterRequestRead>
 8007598:	4603      	mov	r3, r0
 800759a:	2b00      	cmp	r3, #0
 800759c:	d001      	beq.n	80075a2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800759e:	2301      	movs	r3, #1
 80075a0:	e1b8      	b.n	8007914 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d113      	bne.n	80075d2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075aa:	2300      	movs	r3, #0
 80075ac:	623b      	str	r3, [r7, #32]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	695b      	ldr	r3, [r3, #20]
 80075b4:	623b      	str	r3, [r7, #32]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	699b      	ldr	r3, [r3, #24]
 80075bc:	623b      	str	r3, [r7, #32]
 80075be:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80075ce:	601a      	str	r2, [r3, #0]
 80075d0:	e18c      	b.n	80078ec <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d11b      	bne.n	8007612 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80075e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075ea:	2300      	movs	r3, #0
 80075ec:	61fb      	str	r3, [r7, #28]
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	695b      	ldr	r3, [r3, #20]
 80075f4:	61fb      	str	r3, [r7, #28]
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	699b      	ldr	r3, [r3, #24]
 80075fc:	61fb      	str	r3, [r7, #28]
 80075fe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800760e:	601a      	str	r2, [r3, #0]
 8007610:	e16c      	b.n	80078ec <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007616:	2b02      	cmp	r3, #2
 8007618:	d11b      	bne.n	8007652 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007628:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007638:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800763a:	2300      	movs	r3, #0
 800763c:	61bb      	str	r3, [r7, #24]
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	695b      	ldr	r3, [r3, #20]
 8007644:	61bb      	str	r3, [r7, #24]
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	699b      	ldr	r3, [r3, #24]
 800764c:	61bb      	str	r3, [r7, #24]
 800764e:	69bb      	ldr	r3, [r7, #24]
 8007650:	e14c      	b.n	80078ec <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	681a      	ldr	r2, [r3, #0]
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007660:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007662:	2300      	movs	r3, #0
 8007664:	617b      	str	r3, [r7, #20]
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	695b      	ldr	r3, [r3, #20]
 800766c:	617b      	str	r3, [r7, #20]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	699b      	ldr	r3, [r3, #24]
 8007674:	617b      	str	r3, [r7, #20]
 8007676:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007678:	e138      	b.n	80078ec <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800767e:	2b03      	cmp	r3, #3
 8007680:	f200 80f1 	bhi.w	8007866 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007688:	2b01      	cmp	r3, #1
 800768a:	d123      	bne.n	80076d4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800768c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800768e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007690:	68f8      	ldr	r0, [r7, #12]
 8007692:	f001 f88b 	bl	80087ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8007696:	4603      	mov	r3, r0
 8007698:	2b00      	cmp	r3, #0
 800769a:	d001      	beq.n	80076a0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	e139      	b.n	8007914 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	691a      	ldr	r2, [r3, #16]
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076aa:	b2d2      	uxtb	r2, r2
 80076ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076b2:	1c5a      	adds	r2, r3, #1
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076bc:	3b01      	subs	r3, #1
 80076be:	b29a      	uxth	r2, r3
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	3b01      	subs	r3, #1
 80076cc:	b29a      	uxth	r2, r3
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80076d2:	e10b      	b.n	80078ec <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076d8:	2b02      	cmp	r3, #2
 80076da:	d14e      	bne.n	800777a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80076dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076de:	9300      	str	r3, [sp, #0]
 80076e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076e2:	2200      	movs	r2, #0
 80076e4:	4906      	ldr	r1, [pc, #24]	@ (8007700 <HAL_I2C_Master_Receive+0x22c>)
 80076e6:	68f8      	ldr	r0, [r7, #12]
 80076e8:	f000 ff08 	bl	80084fc <I2C_WaitOnFlagUntilTimeout>
 80076ec:	4603      	mov	r3, r0
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d008      	beq.n	8007704 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
 80076f4:	e10e      	b.n	8007914 <HAL_I2C_Master_Receive+0x440>
 80076f6:	bf00      	nop
 80076f8:	00100002 	.word	0x00100002
 80076fc:	ffff0000 	.word	0xffff0000
 8007700:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007712:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	691a      	ldr	r2, [r3, #16]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800771e:	b2d2      	uxtb	r2, r2
 8007720:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007726:	1c5a      	adds	r2, r3, #1
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007730:	3b01      	subs	r3, #1
 8007732:	b29a      	uxth	r2, r3
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800773c:	b29b      	uxth	r3, r3
 800773e:	3b01      	subs	r3, #1
 8007740:	b29a      	uxth	r2, r3
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	691a      	ldr	r2, [r3, #16]
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007750:	b2d2      	uxtb	r2, r2
 8007752:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007758:	1c5a      	adds	r2, r3, #1
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007762:	3b01      	subs	r3, #1
 8007764:	b29a      	uxth	r2, r3
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800776e:	b29b      	uxth	r3, r3
 8007770:	3b01      	subs	r3, #1
 8007772:	b29a      	uxth	r2, r3
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007778:	e0b8      	b.n	80078ec <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800777a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800777c:	9300      	str	r3, [sp, #0]
 800777e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007780:	2200      	movs	r2, #0
 8007782:	4966      	ldr	r1, [pc, #408]	@ (800791c <HAL_I2C_Master_Receive+0x448>)
 8007784:	68f8      	ldr	r0, [r7, #12]
 8007786:	f000 feb9 	bl	80084fc <I2C_WaitOnFlagUntilTimeout>
 800778a:	4603      	mov	r3, r0
 800778c:	2b00      	cmp	r3, #0
 800778e:	d001      	beq.n	8007794 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8007790:	2301      	movs	r3, #1
 8007792:	e0bf      	b.n	8007914 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80077a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	691a      	ldr	r2, [r3, #16]
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077ae:	b2d2      	uxtb	r2, r2
 80077b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077b6:	1c5a      	adds	r2, r3, #1
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077c0:	3b01      	subs	r3, #1
 80077c2:	b29a      	uxth	r2, r3
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	3b01      	subs	r3, #1
 80077d0:	b29a      	uxth	r2, r3
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80077d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077d8:	9300      	str	r3, [sp, #0]
 80077da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077dc:	2200      	movs	r2, #0
 80077de:	494f      	ldr	r1, [pc, #316]	@ (800791c <HAL_I2C_Master_Receive+0x448>)
 80077e0:	68f8      	ldr	r0, [r7, #12]
 80077e2:	f000 fe8b 	bl	80084fc <I2C_WaitOnFlagUntilTimeout>
 80077e6:	4603      	mov	r3, r0
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d001      	beq.n	80077f0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80077ec:	2301      	movs	r3, #1
 80077ee:	e091      	b.n	8007914 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	681a      	ldr	r2, [r3, #0]
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80077fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	691a      	ldr	r2, [r3, #16]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800780a:	b2d2      	uxtb	r2, r2
 800780c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007812:	1c5a      	adds	r2, r3, #1
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800781c:	3b01      	subs	r3, #1
 800781e:	b29a      	uxth	r2, r3
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007828:	b29b      	uxth	r3, r3
 800782a:	3b01      	subs	r3, #1
 800782c:	b29a      	uxth	r2, r3
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	691a      	ldr	r2, [r3, #16]
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800783c:	b2d2      	uxtb	r2, r2
 800783e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007844:	1c5a      	adds	r2, r3, #1
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800784e:	3b01      	subs	r3, #1
 8007850:	b29a      	uxth	r2, r3
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800785a:	b29b      	uxth	r3, r3
 800785c:	3b01      	subs	r3, #1
 800785e:	b29a      	uxth	r2, r3
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007864:	e042      	b.n	80078ec <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007866:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007868:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800786a:	68f8      	ldr	r0, [r7, #12]
 800786c:	f000 ff9e 	bl	80087ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8007870:	4603      	mov	r3, r0
 8007872:	2b00      	cmp	r3, #0
 8007874:	d001      	beq.n	800787a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8007876:	2301      	movs	r3, #1
 8007878:	e04c      	b.n	8007914 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	691a      	ldr	r2, [r3, #16]
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007884:	b2d2      	uxtb	r2, r2
 8007886:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800788c:	1c5a      	adds	r2, r3, #1
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007896:	3b01      	subs	r3, #1
 8007898:	b29a      	uxth	r2, r3
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	3b01      	subs	r3, #1
 80078a6:	b29a      	uxth	r2, r3
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	695b      	ldr	r3, [r3, #20]
 80078b2:	f003 0304 	and.w	r3, r3, #4
 80078b6:	2b04      	cmp	r3, #4
 80078b8:	d118      	bne.n	80078ec <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	691a      	ldr	r2, [r3, #16]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078c4:	b2d2      	uxtb	r2, r2
 80078c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078cc:	1c5a      	adds	r2, r3, #1
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078d6:	3b01      	subs	r3, #1
 80078d8:	b29a      	uxth	r2, r3
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078e2:	b29b      	uxth	r3, r3
 80078e4:	3b01      	subs	r3, #1
 80078e6:	b29a      	uxth	r2, r3
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	f47f aec2 	bne.w	800767a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2220      	movs	r2, #32
 80078fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2200      	movs	r2, #0
 8007902:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2200      	movs	r2, #0
 800790a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800790e:	2300      	movs	r3, #0
 8007910:	e000      	b.n	8007914 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007912:	2302      	movs	r3, #2
  }
}
 8007914:	4618      	mov	r0, r3
 8007916:	3728      	adds	r7, #40	@ 0x28
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}
 800791c:	00010004 	.word	0x00010004

08007920 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b088      	sub	sp, #32
 8007924:	af02      	add	r7, sp, #8
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	4608      	mov	r0, r1
 800792a:	4611      	mov	r1, r2
 800792c:	461a      	mov	r2, r3
 800792e:	4603      	mov	r3, r0
 8007930:	817b      	strh	r3, [r7, #10]
 8007932:	460b      	mov	r3, r1
 8007934:	813b      	strh	r3, [r7, #8]
 8007936:	4613      	mov	r3, r2
 8007938:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800793a:	f7fe fb49 	bl	8005fd0 <HAL_GetTick>
 800793e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007946:	b2db      	uxtb	r3, r3
 8007948:	2b20      	cmp	r3, #32
 800794a:	f040 80d9 	bne.w	8007b00 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	9300      	str	r3, [sp, #0]
 8007952:	2319      	movs	r3, #25
 8007954:	2201      	movs	r2, #1
 8007956:	496d      	ldr	r1, [pc, #436]	@ (8007b0c <HAL_I2C_Mem_Write+0x1ec>)
 8007958:	68f8      	ldr	r0, [r7, #12]
 800795a:	f000 fdcf 	bl	80084fc <I2C_WaitOnFlagUntilTimeout>
 800795e:	4603      	mov	r3, r0
 8007960:	2b00      	cmp	r3, #0
 8007962:	d001      	beq.n	8007968 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007964:	2302      	movs	r3, #2
 8007966:	e0cc      	b.n	8007b02 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800796e:	2b01      	cmp	r3, #1
 8007970:	d101      	bne.n	8007976 <HAL_I2C_Mem_Write+0x56>
 8007972:	2302      	movs	r3, #2
 8007974:	e0c5      	b.n	8007b02 <HAL_I2C_Mem_Write+0x1e2>
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2201      	movs	r2, #1
 800797a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f003 0301 	and.w	r3, r3, #1
 8007988:	2b01      	cmp	r3, #1
 800798a:	d007      	beq.n	800799c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f042 0201 	orr.w	r2, r2, #1
 800799a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80079aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2221      	movs	r2, #33	@ 0x21
 80079b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2240      	movs	r2, #64	@ 0x40
 80079b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2200      	movs	r2, #0
 80079c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	6a3a      	ldr	r2, [r7, #32]
 80079c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80079cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079d2:	b29a      	uxth	r2, r3
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	4a4d      	ldr	r2, [pc, #308]	@ (8007b10 <HAL_I2C_Mem_Write+0x1f0>)
 80079dc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80079de:	88f8      	ldrh	r0, [r7, #6]
 80079e0:	893a      	ldrh	r2, [r7, #8]
 80079e2:	8979      	ldrh	r1, [r7, #10]
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	9301      	str	r3, [sp, #4]
 80079e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079ea:	9300      	str	r3, [sp, #0]
 80079ec:	4603      	mov	r3, r0
 80079ee:	68f8      	ldr	r0, [r7, #12]
 80079f0:	f000 fc06 	bl	8008200 <I2C_RequestMemoryWrite>
 80079f4:	4603      	mov	r3, r0
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d052      	beq.n	8007aa0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80079fa:	2301      	movs	r3, #1
 80079fc:	e081      	b.n	8007b02 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80079fe:	697a      	ldr	r2, [r7, #20]
 8007a00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a02:	68f8      	ldr	r0, [r7, #12]
 8007a04:	f000 fe50 	bl	80086a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d00d      	beq.n	8007a2a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a12:	2b04      	cmp	r3, #4
 8007a14:	d107      	bne.n	8007a26 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	681a      	ldr	r2, [r3, #0]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a24:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007a26:	2301      	movs	r3, #1
 8007a28:	e06b      	b.n	8007b02 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a2e:	781a      	ldrb	r2, [r3, #0]
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a3a:	1c5a      	adds	r2, r3, #1
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a44:	3b01      	subs	r3, #1
 8007a46:	b29a      	uxth	r2, r3
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	3b01      	subs	r3, #1
 8007a54:	b29a      	uxth	r2, r3
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	695b      	ldr	r3, [r3, #20]
 8007a60:	f003 0304 	and.w	r3, r3, #4
 8007a64:	2b04      	cmp	r3, #4
 8007a66:	d11b      	bne.n	8007aa0 <HAL_I2C_Mem_Write+0x180>
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d017      	beq.n	8007aa0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a74:	781a      	ldrb	r2, [r3, #0]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a80:	1c5a      	adds	r2, r3, #1
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a8a:	3b01      	subs	r3, #1
 8007a8c:	b29a      	uxth	r2, r3
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	3b01      	subs	r3, #1
 8007a9a:	b29a      	uxth	r2, r3
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d1aa      	bne.n	80079fe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007aa8:	697a      	ldr	r2, [r7, #20]
 8007aaa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007aac:	68f8      	ldr	r0, [r7, #12]
 8007aae:	f000 fe3c 	bl	800872a <I2C_WaitOnBTFFlagUntilTimeout>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d00d      	beq.n	8007ad4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007abc:	2b04      	cmp	r3, #4
 8007abe:	d107      	bne.n	8007ad0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007ace:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	e016      	b.n	8007b02 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007ae2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2220      	movs	r2, #32
 8007ae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2200      	movs	r2, #0
 8007af0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2200      	movs	r2, #0
 8007af8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007afc:	2300      	movs	r3, #0
 8007afe:	e000      	b.n	8007b02 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007b00:	2302      	movs	r3, #2
  }
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3718      	adds	r7, #24
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}
 8007b0a:	bf00      	nop
 8007b0c:	00100002 	.word	0x00100002
 8007b10:	ffff0000 	.word	0xffff0000

08007b14 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b08c      	sub	sp, #48	@ 0x30
 8007b18:	af02      	add	r7, sp, #8
 8007b1a:	60f8      	str	r0, [r7, #12]
 8007b1c:	4608      	mov	r0, r1
 8007b1e:	4611      	mov	r1, r2
 8007b20:	461a      	mov	r2, r3
 8007b22:	4603      	mov	r3, r0
 8007b24:	817b      	strh	r3, [r7, #10]
 8007b26:	460b      	mov	r3, r1
 8007b28:	813b      	strh	r3, [r7, #8]
 8007b2a:	4613      	mov	r3, r2
 8007b2c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007b2e:	f7fe fa4f 	bl	8005fd0 <HAL_GetTick>
 8007b32:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b3a:	b2db      	uxtb	r3, r3
 8007b3c:	2b20      	cmp	r3, #32
 8007b3e:	f040 8208 	bne.w	8007f52 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b44:	9300      	str	r3, [sp, #0]
 8007b46:	2319      	movs	r3, #25
 8007b48:	2201      	movs	r2, #1
 8007b4a:	497b      	ldr	r1, [pc, #492]	@ (8007d38 <HAL_I2C_Mem_Read+0x224>)
 8007b4c:	68f8      	ldr	r0, [r7, #12]
 8007b4e:	f000 fcd5 	bl	80084fc <I2C_WaitOnFlagUntilTimeout>
 8007b52:	4603      	mov	r3, r0
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d001      	beq.n	8007b5c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007b58:	2302      	movs	r3, #2
 8007b5a:	e1fb      	b.n	8007f54 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d101      	bne.n	8007b6a <HAL_I2C_Mem_Read+0x56>
 8007b66:	2302      	movs	r3, #2
 8007b68:	e1f4      	b.n	8007f54 <HAL_I2C_Mem_Read+0x440>
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2201      	movs	r2, #1
 8007b6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f003 0301 	and.w	r3, r3, #1
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d007      	beq.n	8007b90 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f042 0201 	orr.w	r2, r2, #1
 8007b8e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	681a      	ldr	r2, [r3, #0]
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007b9e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2222      	movs	r2, #34	@ 0x22
 8007ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2240      	movs	r2, #64	@ 0x40
 8007bac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8007bc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bc6:	b29a      	uxth	r2, r3
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	4a5b      	ldr	r2, [pc, #364]	@ (8007d3c <HAL_I2C_Mem_Read+0x228>)
 8007bd0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007bd2:	88f8      	ldrh	r0, [r7, #6]
 8007bd4:	893a      	ldrh	r2, [r7, #8]
 8007bd6:	8979      	ldrh	r1, [r7, #10]
 8007bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bda:	9301      	str	r3, [sp, #4]
 8007bdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bde:	9300      	str	r3, [sp, #0]
 8007be0:	4603      	mov	r3, r0
 8007be2:	68f8      	ldr	r0, [r7, #12]
 8007be4:	f000 fba2 	bl	800832c <I2C_RequestMemoryRead>
 8007be8:	4603      	mov	r3, r0
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d001      	beq.n	8007bf2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e1b0      	b.n	8007f54 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d113      	bne.n	8007c22 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	623b      	str	r3, [r7, #32]
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	695b      	ldr	r3, [r3, #20]
 8007c04:	623b      	str	r3, [r7, #32]
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	699b      	ldr	r3, [r3, #24]
 8007c0c:	623b      	str	r3, [r7, #32]
 8007c0e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	681a      	ldr	r2, [r3, #0]
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007c1e:	601a      	str	r2, [r3, #0]
 8007c20:	e184      	b.n	8007f2c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c26:	2b01      	cmp	r3, #1
 8007c28:	d11b      	bne.n	8007c62 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007c38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	61fb      	str	r3, [r7, #28]
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	695b      	ldr	r3, [r3, #20]
 8007c44:	61fb      	str	r3, [r7, #28]
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	699b      	ldr	r3, [r3, #24]
 8007c4c:	61fb      	str	r3, [r7, #28]
 8007c4e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	681a      	ldr	r2, [r3, #0]
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007c5e:	601a      	str	r2, [r3, #0]
 8007c60:	e164      	b.n	8007f2c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c66:	2b02      	cmp	r3, #2
 8007c68:	d11b      	bne.n	8007ca2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007c78:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007c88:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	61bb      	str	r3, [r7, #24]
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	695b      	ldr	r3, [r3, #20]
 8007c94:	61bb      	str	r3, [r7, #24]
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	699b      	ldr	r3, [r3, #24]
 8007c9c:	61bb      	str	r3, [r7, #24]
 8007c9e:	69bb      	ldr	r3, [r7, #24]
 8007ca0:	e144      	b.n	8007f2c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	617b      	str	r3, [r7, #20]
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	695b      	ldr	r3, [r3, #20]
 8007cac:	617b      	str	r3, [r7, #20]
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	699b      	ldr	r3, [r3, #24]
 8007cb4:	617b      	str	r3, [r7, #20]
 8007cb6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007cb8:	e138      	b.n	8007f2c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007cbe:	2b03      	cmp	r3, #3
 8007cc0:	f200 80f1 	bhi.w	8007ea6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	d123      	bne.n	8007d14 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ccc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cce:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007cd0:	68f8      	ldr	r0, [r7, #12]
 8007cd2:	f000 fd6b 	bl	80087ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d001      	beq.n	8007ce0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	e139      	b.n	8007f54 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	691a      	ldr	r2, [r3, #16]
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cea:	b2d2      	uxtb	r2, r2
 8007cec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cf2:	1c5a      	adds	r2, r3, #1
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007cfc:	3b01      	subs	r3, #1
 8007cfe:	b29a      	uxth	r2, r3
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	3b01      	subs	r3, #1
 8007d0c:	b29a      	uxth	r2, r3
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007d12:	e10b      	b.n	8007f2c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d18:	2b02      	cmp	r3, #2
 8007d1a:	d14e      	bne.n	8007dba <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d1e:	9300      	str	r3, [sp, #0]
 8007d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d22:	2200      	movs	r2, #0
 8007d24:	4906      	ldr	r1, [pc, #24]	@ (8007d40 <HAL_I2C_Mem_Read+0x22c>)
 8007d26:	68f8      	ldr	r0, [r7, #12]
 8007d28:	f000 fbe8 	bl	80084fc <I2C_WaitOnFlagUntilTimeout>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d008      	beq.n	8007d44 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007d32:	2301      	movs	r3, #1
 8007d34:	e10e      	b.n	8007f54 <HAL_I2C_Mem_Read+0x440>
 8007d36:	bf00      	nop
 8007d38:	00100002 	.word	0x00100002
 8007d3c:	ffff0000 	.word	0xffff0000
 8007d40:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	681a      	ldr	r2, [r3, #0]
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007d52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	691a      	ldr	r2, [r3, #16]
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d5e:	b2d2      	uxtb	r2, r2
 8007d60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d66:	1c5a      	adds	r2, r3, #1
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d70:	3b01      	subs	r3, #1
 8007d72:	b29a      	uxth	r2, r3
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	3b01      	subs	r3, #1
 8007d80:	b29a      	uxth	r2, r3
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	691a      	ldr	r2, [r3, #16]
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d90:	b2d2      	uxtb	r2, r2
 8007d92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d98:	1c5a      	adds	r2, r3, #1
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007da2:	3b01      	subs	r3, #1
 8007da4:	b29a      	uxth	r2, r3
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	3b01      	subs	r3, #1
 8007db2:	b29a      	uxth	r2, r3
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007db8:	e0b8      	b.n	8007f2c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dbc:	9300      	str	r3, [sp, #0]
 8007dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	4966      	ldr	r1, [pc, #408]	@ (8007f5c <HAL_I2C_Mem_Read+0x448>)
 8007dc4:	68f8      	ldr	r0, [r7, #12]
 8007dc6:	f000 fb99 	bl	80084fc <I2C_WaitOnFlagUntilTimeout>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d001      	beq.n	8007dd4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	e0bf      	b.n	8007f54 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	681a      	ldr	r2, [r3, #0]
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007de2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	691a      	ldr	r2, [r3, #16]
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dee:	b2d2      	uxtb	r2, r2
 8007df0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007df6:	1c5a      	adds	r2, r3, #1
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e00:	3b01      	subs	r3, #1
 8007e02:	b29a      	uxth	r2, r3
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e0c:	b29b      	uxth	r3, r3
 8007e0e:	3b01      	subs	r3, #1
 8007e10:	b29a      	uxth	r2, r3
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e18:	9300      	str	r3, [sp, #0]
 8007e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	494f      	ldr	r1, [pc, #316]	@ (8007f5c <HAL_I2C_Mem_Read+0x448>)
 8007e20:	68f8      	ldr	r0, [r7, #12]
 8007e22:	f000 fb6b 	bl	80084fc <I2C_WaitOnFlagUntilTimeout>
 8007e26:	4603      	mov	r3, r0
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d001      	beq.n	8007e30 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	e091      	b.n	8007f54 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	681a      	ldr	r2, [r3, #0]
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007e3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	691a      	ldr	r2, [r3, #16]
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e4a:	b2d2      	uxtb	r2, r2
 8007e4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e52:	1c5a      	adds	r2, r3, #1
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e5c:	3b01      	subs	r3, #1
 8007e5e:	b29a      	uxth	r2, r3
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e68:	b29b      	uxth	r3, r3
 8007e6a:	3b01      	subs	r3, #1
 8007e6c:	b29a      	uxth	r2, r3
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	691a      	ldr	r2, [r3, #16]
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e7c:	b2d2      	uxtb	r2, r2
 8007e7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e84:	1c5a      	adds	r2, r3, #1
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e8e:	3b01      	subs	r3, #1
 8007e90:	b29a      	uxth	r2, r3
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	3b01      	subs	r3, #1
 8007e9e:	b29a      	uxth	r2, r3
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007ea4:	e042      	b.n	8007f2c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ea6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ea8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007eaa:	68f8      	ldr	r0, [r7, #12]
 8007eac:	f000 fc7e 	bl	80087ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d001      	beq.n	8007eba <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	e04c      	b.n	8007f54 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	691a      	ldr	r2, [r3, #16]
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ec4:	b2d2      	uxtb	r2, r2
 8007ec6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ecc:	1c5a      	adds	r2, r3, #1
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ed6:	3b01      	subs	r3, #1
 8007ed8:	b29a      	uxth	r2, r3
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	3b01      	subs	r3, #1
 8007ee6:	b29a      	uxth	r2, r3
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	695b      	ldr	r3, [r3, #20]
 8007ef2:	f003 0304 	and.w	r3, r3, #4
 8007ef6:	2b04      	cmp	r3, #4
 8007ef8:	d118      	bne.n	8007f2c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	691a      	ldr	r2, [r3, #16]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f04:	b2d2      	uxtb	r2, r2
 8007f06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f0c:	1c5a      	adds	r2, r3, #1
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f16:	3b01      	subs	r3, #1
 8007f18:	b29a      	uxth	r2, r3
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f22:	b29b      	uxth	r3, r3
 8007f24:	3b01      	subs	r3, #1
 8007f26:	b29a      	uxth	r2, r3
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	f47f aec2 	bne.w	8007cba <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2220      	movs	r2, #32
 8007f3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2200      	movs	r2, #0
 8007f42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	e000      	b.n	8007f54 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007f52:	2302      	movs	r3, #2
  }
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3728      	adds	r7, #40	@ 0x28
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}
 8007f5c:	00010004 	.word	0x00010004

08007f60 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b088      	sub	sp, #32
 8007f64:	af02      	add	r7, sp, #8
 8007f66:	60f8      	str	r0, [r7, #12]
 8007f68:	607a      	str	r2, [r7, #4]
 8007f6a:	603b      	str	r3, [r7, #0]
 8007f6c:	460b      	mov	r3, r1
 8007f6e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f74:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	2b08      	cmp	r3, #8
 8007f7a:	d006      	beq.n	8007f8a <I2C_MasterRequestWrite+0x2a>
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d003      	beq.n	8007f8a <I2C_MasterRequestWrite+0x2a>
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007f88:	d108      	bne.n	8007f9c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	681a      	ldr	r2, [r3, #0]
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007f98:	601a      	str	r2, [r3, #0]
 8007f9a:	e00b      	b.n	8007fb4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fa0:	2b12      	cmp	r3, #18
 8007fa2:	d107      	bne.n	8007fb4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007fb2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	9300      	str	r3, [sp, #0]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007fc0:	68f8      	ldr	r0, [r7, #12]
 8007fc2:	f000 fa9b 	bl	80084fc <I2C_WaitOnFlagUntilTimeout>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d00d      	beq.n	8007fe8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007fda:	d103      	bne.n	8007fe4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007fe2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007fe4:	2303      	movs	r3, #3
 8007fe6:	e035      	b.n	8008054 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	691b      	ldr	r3, [r3, #16]
 8007fec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007ff0:	d108      	bne.n	8008004 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007ff2:	897b      	ldrh	r3, [r7, #10]
 8007ff4:	b2db      	uxtb	r3, r3
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008000:	611a      	str	r2, [r3, #16]
 8008002:	e01b      	b.n	800803c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008004:	897b      	ldrh	r3, [r7, #10]
 8008006:	11db      	asrs	r3, r3, #7
 8008008:	b2db      	uxtb	r3, r3
 800800a:	f003 0306 	and.w	r3, r3, #6
 800800e:	b2db      	uxtb	r3, r3
 8008010:	f063 030f 	orn	r3, r3, #15
 8008014:	b2da      	uxtb	r2, r3
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	687a      	ldr	r2, [r7, #4]
 8008020:	490e      	ldr	r1, [pc, #56]	@ (800805c <I2C_MasterRequestWrite+0xfc>)
 8008022:	68f8      	ldr	r0, [r7, #12]
 8008024:	f000 fac1 	bl	80085aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008028:	4603      	mov	r3, r0
 800802a:	2b00      	cmp	r3, #0
 800802c:	d001      	beq.n	8008032 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800802e:	2301      	movs	r3, #1
 8008030:	e010      	b.n	8008054 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008032:	897b      	ldrh	r3, [r7, #10]
 8008034:	b2da      	uxtb	r2, r3
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	687a      	ldr	r2, [r7, #4]
 8008040:	4907      	ldr	r1, [pc, #28]	@ (8008060 <I2C_MasterRequestWrite+0x100>)
 8008042:	68f8      	ldr	r0, [r7, #12]
 8008044:	f000 fab1 	bl	80085aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008048:	4603      	mov	r3, r0
 800804a:	2b00      	cmp	r3, #0
 800804c:	d001      	beq.n	8008052 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800804e:	2301      	movs	r3, #1
 8008050:	e000      	b.n	8008054 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8008052:	2300      	movs	r3, #0
}
 8008054:	4618      	mov	r0, r3
 8008056:	3718      	adds	r7, #24
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}
 800805c:	00010008 	.word	0x00010008
 8008060:	00010002 	.word	0x00010002

08008064 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b088      	sub	sp, #32
 8008068:	af02      	add	r7, sp, #8
 800806a:	60f8      	str	r0, [r7, #12]
 800806c:	607a      	str	r2, [r7, #4]
 800806e:	603b      	str	r3, [r7, #0]
 8008070:	460b      	mov	r3, r1
 8008072:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008078:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	681a      	ldr	r2, [r3, #0]
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008088:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	2b08      	cmp	r3, #8
 800808e:	d006      	beq.n	800809e <I2C_MasterRequestRead+0x3a>
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	2b01      	cmp	r3, #1
 8008094:	d003      	beq.n	800809e <I2C_MasterRequestRead+0x3a>
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800809c:	d108      	bne.n	80080b0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80080ac:	601a      	str	r2, [r3, #0]
 80080ae:	e00b      	b.n	80080c8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080b4:	2b11      	cmp	r3, #17
 80080b6:	d107      	bne.n	80080c8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	681a      	ldr	r2, [r3, #0]
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80080c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	9300      	str	r3, [sp, #0]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80080d4:	68f8      	ldr	r0, [r7, #12]
 80080d6:	f000 fa11 	bl	80084fc <I2C_WaitOnFlagUntilTimeout>
 80080da:	4603      	mov	r3, r0
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d00d      	beq.n	80080fc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080ee:	d103      	bne.n	80080f8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80080f6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80080f8:	2303      	movs	r3, #3
 80080fa:	e079      	b.n	80081f0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	691b      	ldr	r3, [r3, #16]
 8008100:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008104:	d108      	bne.n	8008118 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008106:	897b      	ldrh	r3, [r7, #10]
 8008108:	b2db      	uxtb	r3, r3
 800810a:	f043 0301 	orr.w	r3, r3, #1
 800810e:	b2da      	uxtb	r2, r3
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	611a      	str	r2, [r3, #16]
 8008116:	e05f      	b.n	80081d8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008118:	897b      	ldrh	r3, [r7, #10]
 800811a:	11db      	asrs	r3, r3, #7
 800811c:	b2db      	uxtb	r3, r3
 800811e:	f003 0306 	and.w	r3, r3, #6
 8008122:	b2db      	uxtb	r3, r3
 8008124:	f063 030f 	orn	r3, r3, #15
 8008128:	b2da      	uxtb	r2, r3
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	4930      	ldr	r1, [pc, #192]	@ (80081f8 <I2C_MasterRequestRead+0x194>)
 8008136:	68f8      	ldr	r0, [r7, #12]
 8008138:	f000 fa37 	bl	80085aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800813c:	4603      	mov	r3, r0
 800813e:	2b00      	cmp	r3, #0
 8008140:	d001      	beq.n	8008146 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8008142:	2301      	movs	r3, #1
 8008144:	e054      	b.n	80081f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008146:	897b      	ldrh	r3, [r7, #10]
 8008148:	b2da      	uxtb	r2, r3
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	4929      	ldr	r1, [pc, #164]	@ (80081fc <I2C_MasterRequestRead+0x198>)
 8008156:	68f8      	ldr	r0, [r7, #12]
 8008158:	f000 fa27 	bl	80085aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800815c:	4603      	mov	r3, r0
 800815e:	2b00      	cmp	r3, #0
 8008160:	d001      	beq.n	8008166 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8008162:	2301      	movs	r3, #1
 8008164:	e044      	b.n	80081f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008166:	2300      	movs	r3, #0
 8008168:	613b      	str	r3, [r7, #16]
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	695b      	ldr	r3, [r3, #20]
 8008170:	613b      	str	r3, [r7, #16]
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	699b      	ldr	r3, [r3, #24]
 8008178:	613b      	str	r3, [r7, #16]
 800817a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	681a      	ldr	r2, [r3, #0]
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800818a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	9300      	str	r3, [sp, #0]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2200      	movs	r2, #0
 8008194:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008198:	68f8      	ldr	r0, [r7, #12]
 800819a:	f000 f9af 	bl	80084fc <I2C_WaitOnFlagUntilTimeout>
 800819e:	4603      	mov	r3, r0
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d00d      	beq.n	80081c0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80081b2:	d103      	bne.n	80081bc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80081ba:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80081bc:	2303      	movs	r3, #3
 80081be:	e017      	b.n	80081f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80081c0:	897b      	ldrh	r3, [r7, #10]
 80081c2:	11db      	asrs	r3, r3, #7
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	f003 0306 	and.w	r3, r3, #6
 80081ca:	b2db      	uxtb	r3, r3
 80081cc:	f063 030e 	orn	r3, r3, #14
 80081d0:	b2da      	uxtb	r2, r3
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	687a      	ldr	r2, [r7, #4]
 80081dc:	4907      	ldr	r1, [pc, #28]	@ (80081fc <I2C_MasterRequestRead+0x198>)
 80081de:	68f8      	ldr	r0, [r7, #12]
 80081e0:	f000 f9e3 	bl	80085aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80081e4:	4603      	mov	r3, r0
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d001      	beq.n	80081ee <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80081ea:	2301      	movs	r3, #1
 80081ec:	e000      	b.n	80081f0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80081ee:	2300      	movs	r3, #0
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3718      	adds	r7, #24
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}
 80081f8:	00010008 	.word	0x00010008
 80081fc:	00010002 	.word	0x00010002

08008200 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b088      	sub	sp, #32
 8008204:	af02      	add	r7, sp, #8
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	4608      	mov	r0, r1
 800820a:	4611      	mov	r1, r2
 800820c:	461a      	mov	r2, r3
 800820e:	4603      	mov	r3, r0
 8008210:	817b      	strh	r3, [r7, #10]
 8008212:	460b      	mov	r3, r1
 8008214:	813b      	strh	r3, [r7, #8]
 8008216:	4613      	mov	r3, r2
 8008218:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	681a      	ldr	r2, [r3, #0]
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008228:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800822a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800822c:	9300      	str	r3, [sp, #0]
 800822e:	6a3b      	ldr	r3, [r7, #32]
 8008230:	2200      	movs	r2, #0
 8008232:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008236:	68f8      	ldr	r0, [r7, #12]
 8008238:	f000 f960 	bl	80084fc <I2C_WaitOnFlagUntilTimeout>
 800823c:	4603      	mov	r3, r0
 800823e:	2b00      	cmp	r3, #0
 8008240:	d00d      	beq.n	800825e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800824c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008250:	d103      	bne.n	800825a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008258:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800825a:	2303      	movs	r3, #3
 800825c:	e05f      	b.n	800831e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800825e:	897b      	ldrh	r3, [r7, #10]
 8008260:	b2db      	uxtb	r3, r3
 8008262:	461a      	mov	r2, r3
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800826c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800826e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008270:	6a3a      	ldr	r2, [r7, #32]
 8008272:	492d      	ldr	r1, [pc, #180]	@ (8008328 <I2C_RequestMemoryWrite+0x128>)
 8008274:	68f8      	ldr	r0, [r7, #12]
 8008276:	f000 f998 	bl	80085aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800827a:	4603      	mov	r3, r0
 800827c:	2b00      	cmp	r3, #0
 800827e:	d001      	beq.n	8008284 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008280:	2301      	movs	r3, #1
 8008282:	e04c      	b.n	800831e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008284:	2300      	movs	r3, #0
 8008286:	617b      	str	r3, [r7, #20]
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	695b      	ldr	r3, [r3, #20]
 800828e:	617b      	str	r3, [r7, #20]
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	699b      	ldr	r3, [r3, #24]
 8008296:	617b      	str	r3, [r7, #20]
 8008298:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800829a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800829c:	6a39      	ldr	r1, [r7, #32]
 800829e:	68f8      	ldr	r0, [r7, #12]
 80082a0:	f000 fa02 	bl	80086a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80082a4:	4603      	mov	r3, r0
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d00d      	beq.n	80082c6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082ae:	2b04      	cmp	r3, #4
 80082b0:	d107      	bne.n	80082c2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80082c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80082c2:	2301      	movs	r3, #1
 80082c4:	e02b      	b.n	800831e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80082c6:	88fb      	ldrh	r3, [r7, #6]
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d105      	bne.n	80082d8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80082cc:	893b      	ldrh	r3, [r7, #8]
 80082ce:	b2da      	uxtb	r2, r3
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	611a      	str	r2, [r3, #16]
 80082d6:	e021      	b.n	800831c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80082d8:	893b      	ldrh	r3, [r7, #8]
 80082da:	0a1b      	lsrs	r3, r3, #8
 80082dc:	b29b      	uxth	r3, r3
 80082de:	b2da      	uxtb	r2, r3
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80082e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082e8:	6a39      	ldr	r1, [r7, #32]
 80082ea:	68f8      	ldr	r0, [r7, #12]
 80082ec:	f000 f9dc 	bl	80086a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80082f0:	4603      	mov	r3, r0
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d00d      	beq.n	8008312 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082fa:	2b04      	cmp	r3, #4
 80082fc:	d107      	bne.n	800830e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	681a      	ldr	r2, [r3, #0]
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800830c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800830e:	2301      	movs	r3, #1
 8008310:	e005      	b.n	800831e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008312:	893b      	ldrh	r3, [r7, #8]
 8008314:	b2da      	uxtb	r2, r3
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800831c:	2300      	movs	r3, #0
}
 800831e:	4618      	mov	r0, r3
 8008320:	3718      	adds	r7, #24
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
 8008326:	bf00      	nop
 8008328:	00010002 	.word	0x00010002

0800832c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b088      	sub	sp, #32
 8008330:	af02      	add	r7, sp, #8
 8008332:	60f8      	str	r0, [r7, #12]
 8008334:	4608      	mov	r0, r1
 8008336:	4611      	mov	r1, r2
 8008338:	461a      	mov	r2, r3
 800833a:	4603      	mov	r3, r0
 800833c:	817b      	strh	r3, [r7, #10]
 800833e:	460b      	mov	r3, r1
 8008340:	813b      	strh	r3, [r7, #8]
 8008342:	4613      	mov	r3, r2
 8008344:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	681a      	ldr	r2, [r3, #0]
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008354:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	681a      	ldr	r2, [r3, #0]
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008364:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008368:	9300      	str	r3, [sp, #0]
 800836a:	6a3b      	ldr	r3, [r7, #32]
 800836c:	2200      	movs	r2, #0
 800836e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008372:	68f8      	ldr	r0, [r7, #12]
 8008374:	f000 f8c2 	bl	80084fc <I2C_WaitOnFlagUntilTimeout>
 8008378:	4603      	mov	r3, r0
 800837a:	2b00      	cmp	r3, #0
 800837c:	d00d      	beq.n	800839a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008388:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800838c:	d103      	bne.n	8008396 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008394:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008396:	2303      	movs	r3, #3
 8008398:	e0aa      	b.n	80084f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800839a:	897b      	ldrh	r3, [r7, #10]
 800839c:	b2db      	uxtb	r3, r3
 800839e:	461a      	mov	r2, r3
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80083a8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80083aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ac:	6a3a      	ldr	r2, [r7, #32]
 80083ae:	4952      	ldr	r1, [pc, #328]	@ (80084f8 <I2C_RequestMemoryRead+0x1cc>)
 80083b0:	68f8      	ldr	r0, [r7, #12]
 80083b2:	f000 f8fa 	bl	80085aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80083b6:	4603      	mov	r3, r0
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d001      	beq.n	80083c0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80083bc:	2301      	movs	r3, #1
 80083be:	e097      	b.n	80084f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80083c0:	2300      	movs	r3, #0
 80083c2:	617b      	str	r3, [r7, #20]
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	695b      	ldr	r3, [r3, #20]
 80083ca:	617b      	str	r3, [r7, #20]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	699b      	ldr	r3, [r3, #24]
 80083d2:	617b      	str	r3, [r7, #20]
 80083d4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80083d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083d8:	6a39      	ldr	r1, [r7, #32]
 80083da:	68f8      	ldr	r0, [r7, #12]
 80083dc:	f000 f964 	bl	80086a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80083e0:	4603      	mov	r3, r0
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d00d      	beq.n	8008402 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083ea:	2b04      	cmp	r3, #4
 80083ec:	d107      	bne.n	80083fe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	681a      	ldr	r2, [r3, #0]
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80083fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80083fe:	2301      	movs	r3, #1
 8008400:	e076      	b.n	80084f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008402:	88fb      	ldrh	r3, [r7, #6]
 8008404:	2b01      	cmp	r3, #1
 8008406:	d105      	bne.n	8008414 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008408:	893b      	ldrh	r3, [r7, #8]
 800840a:	b2da      	uxtb	r2, r3
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	611a      	str	r2, [r3, #16]
 8008412:	e021      	b.n	8008458 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008414:	893b      	ldrh	r3, [r7, #8]
 8008416:	0a1b      	lsrs	r3, r3, #8
 8008418:	b29b      	uxth	r3, r3
 800841a:	b2da      	uxtb	r2, r3
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008422:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008424:	6a39      	ldr	r1, [r7, #32]
 8008426:	68f8      	ldr	r0, [r7, #12]
 8008428:	f000 f93e 	bl	80086a8 <I2C_WaitOnTXEFlagUntilTimeout>
 800842c:	4603      	mov	r3, r0
 800842e:	2b00      	cmp	r3, #0
 8008430:	d00d      	beq.n	800844e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008436:	2b04      	cmp	r3, #4
 8008438:	d107      	bne.n	800844a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	681a      	ldr	r2, [r3, #0]
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008448:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800844a:	2301      	movs	r3, #1
 800844c:	e050      	b.n	80084f0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800844e:	893b      	ldrh	r3, [r7, #8]
 8008450:	b2da      	uxtb	r2, r3
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008458:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800845a:	6a39      	ldr	r1, [r7, #32]
 800845c:	68f8      	ldr	r0, [r7, #12]
 800845e:	f000 f923 	bl	80086a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8008462:	4603      	mov	r3, r0
 8008464:	2b00      	cmp	r3, #0
 8008466:	d00d      	beq.n	8008484 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800846c:	2b04      	cmp	r3, #4
 800846e:	d107      	bne.n	8008480 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	681a      	ldr	r2, [r3, #0]
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800847e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008480:	2301      	movs	r3, #1
 8008482:	e035      	b.n	80084f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	681a      	ldr	r2, [r3, #0]
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008492:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008496:	9300      	str	r3, [sp, #0]
 8008498:	6a3b      	ldr	r3, [r7, #32]
 800849a:	2200      	movs	r2, #0
 800849c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80084a0:	68f8      	ldr	r0, [r7, #12]
 80084a2:	f000 f82b 	bl	80084fc <I2C_WaitOnFlagUntilTimeout>
 80084a6:	4603      	mov	r3, r0
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d00d      	beq.n	80084c8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084ba:	d103      	bne.n	80084c4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80084c2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80084c4:	2303      	movs	r3, #3
 80084c6:	e013      	b.n	80084f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80084c8:	897b      	ldrh	r3, [r7, #10]
 80084ca:	b2db      	uxtb	r3, r3
 80084cc:	f043 0301 	orr.w	r3, r3, #1
 80084d0:	b2da      	uxtb	r2, r3
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80084d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084da:	6a3a      	ldr	r2, [r7, #32]
 80084dc:	4906      	ldr	r1, [pc, #24]	@ (80084f8 <I2C_RequestMemoryRead+0x1cc>)
 80084de:	68f8      	ldr	r0, [r7, #12]
 80084e0:	f000 f863 	bl	80085aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80084e4:	4603      	mov	r3, r0
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d001      	beq.n	80084ee <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80084ea:	2301      	movs	r3, #1
 80084ec:	e000      	b.n	80084f0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80084ee:	2300      	movs	r3, #0
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	3718      	adds	r7, #24
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}
 80084f8:	00010002 	.word	0x00010002

080084fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b084      	sub	sp, #16
 8008500:	af00      	add	r7, sp, #0
 8008502:	60f8      	str	r0, [r7, #12]
 8008504:	60b9      	str	r1, [r7, #8]
 8008506:	603b      	str	r3, [r7, #0]
 8008508:	4613      	mov	r3, r2
 800850a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800850c:	e025      	b.n	800855a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008514:	d021      	beq.n	800855a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008516:	f7fd fd5b 	bl	8005fd0 <HAL_GetTick>
 800851a:	4602      	mov	r2, r0
 800851c:	69bb      	ldr	r3, [r7, #24]
 800851e:	1ad3      	subs	r3, r2, r3
 8008520:	683a      	ldr	r2, [r7, #0]
 8008522:	429a      	cmp	r2, r3
 8008524:	d302      	bcc.n	800852c <I2C_WaitOnFlagUntilTimeout+0x30>
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d116      	bne.n	800855a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2200      	movs	r2, #0
 8008530:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2220      	movs	r2, #32
 8008536:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2200      	movs	r2, #0
 800853e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008546:	f043 0220 	orr.w	r2, r3, #32
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2200      	movs	r2, #0
 8008552:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8008556:	2301      	movs	r3, #1
 8008558:	e023      	b.n	80085a2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	0c1b      	lsrs	r3, r3, #16
 800855e:	b2db      	uxtb	r3, r3
 8008560:	2b01      	cmp	r3, #1
 8008562:	d10d      	bne.n	8008580 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	695b      	ldr	r3, [r3, #20]
 800856a:	43da      	mvns	r2, r3
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	4013      	ands	r3, r2
 8008570:	b29b      	uxth	r3, r3
 8008572:	2b00      	cmp	r3, #0
 8008574:	bf0c      	ite	eq
 8008576:	2301      	moveq	r3, #1
 8008578:	2300      	movne	r3, #0
 800857a:	b2db      	uxtb	r3, r3
 800857c:	461a      	mov	r2, r3
 800857e:	e00c      	b.n	800859a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	699b      	ldr	r3, [r3, #24]
 8008586:	43da      	mvns	r2, r3
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	4013      	ands	r3, r2
 800858c:	b29b      	uxth	r3, r3
 800858e:	2b00      	cmp	r3, #0
 8008590:	bf0c      	ite	eq
 8008592:	2301      	moveq	r3, #1
 8008594:	2300      	movne	r3, #0
 8008596:	b2db      	uxtb	r3, r3
 8008598:	461a      	mov	r2, r3
 800859a:	79fb      	ldrb	r3, [r7, #7]
 800859c:	429a      	cmp	r2, r3
 800859e:	d0b6      	beq.n	800850e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80085a0:	2300      	movs	r3, #0
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3710      	adds	r7, #16
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}

080085aa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80085aa:	b580      	push	{r7, lr}
 80085ac:	b084      	sub	sp, #16
 80085ae:	af00      	add	r7, sp, #0
 80085b0:	60f8      	str	r0, [r7, #12]
 80085b2:	60b9      	str	r1, [r7, #8]
 80085b4:	607a      	str	r2, [r7, #4]
 80085b6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80085b8:	e051      	b.n	800865e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	695b      	ldr	r3, [r3, #20]
 80085c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80085c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80085c8:	d123      	bne.n	8008612 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80085d8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80085e2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2200      	movs	r2, #0
 80085e8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	2220      	movs	r2, #32
 80085ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	2200      	movs	r2, #0
 80085f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085fe:	f043 0204 	orr.w	r2, r3, #4
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2200      	movs	r2, #0
 800860a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800860e:	2301      	movs	r3, #1
 8008610:	e046      	b.n	80086a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008618:	d021      	beq.n	800865e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800861a:	f7fd fcd9 	bl	8005fd0 <HAL_GetTick>
 800861e:	4602      	mov	r2, r0
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	1ad3      	subs	r3, r2, r3
 8008624:	687a      	ldr	r2, [r7, #4]
 8008626:	429a      	cmp	r2, r3
 8008628:	d302      	bcc.n	8008630 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d116      	bne.n	800865e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2200      	movs	r2, #0
 8008634:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	2220      	movs	r2, #32
 800863a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2200      	movs	r2, #0
 8008642:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800864a:	f043 0220 	orr.w	r2, r3, #32
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2200      	movs	r2, #0
 8008656:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800865a:	2301      	movs	r3, #1
 800865c:	e020      	b.n	80086a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	0c1b      	lsrs	r3, r3, #16
 8008662:	b2db      	uxtb	r3, r3
 8008664:	2b01      	cmp	r3, #1
 8008666:	d10c      	bne.n	8008682 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	695b      	ldr	r3, [r3, #20]
 800866e:	43da      	mvns	r2, r3
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	4013      	ands	r3, r2
 8008674:	b29b      	uxth	r3, r3
 8008676:	2b00      	cmp	r3, #0
 8008678:	bf14      	ite	ne
 800867a:	2301      	movne	r3, #1
 800867c:	2300      	moveq	r3, #0
 800867e:	b2db      	uxtb	r3, r3
 8008680:	e00b      	b.n	800869a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	699b      	ldr	r3, [r3, #24]
 8008688:	43da      	mvns	r2, r3
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	4013      	ands	r3, r2
 800868e:	b29b      	uxth	r3, r3
 8008690:	2b00      	cmp	r3, #0
 8008692:	bf14      	ite	ne
 8008694:	2301      	movne	r3, #1
 8008696:	2300      	moveq	r3, #0
 8008698:	b2db      	uxtb	r3, r3
 800869a:	2b00      	cmp	r3, #0
 800869c:	d18d      	bne.n	80085ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800869e:	2300      	movs	r3, #0
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3710      	adds	r7, #16
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b084      	sub	sp, #16
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	60f8      	str	r0, [r7, #12]
 80086b0:	60b9      	str	r1, [r7, #8]
 80086b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80086b4:	e02d      	b.n	8008712 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80086b6:	68f8      	ldr	r0, [r7, #12]
 80086b8:	f000 f8ce 	bl	8008858 <I2C_IsAcknowledgeFailed>
 80086bc:	4603      	mov	r3, r0
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d001      	beq.n	80086c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80086c2:	2301      	movs	r3, #1
 80086c4:	e02d      	b.n	8008722 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086cc:	d021      	beq.n	8008712 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086ce:	f7fd fc7f 	bl	8005fd0 <HAL_GetTick>
 80086d2:	4602      	mov	r2, r0
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	1ad3      	subs	r3, r2, r3
 80086d8:	68ba      	ldr	r2, [r7, #8]
 80086da:	429a      	cmp	r2, r3
 80086dc:	d302      	bcc.n	80086e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d116      	bne.n	8008712 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2200      	movs	r2, #0
 80086e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2220      	movs	r2, #32
 80086ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2200      	movs	r2, #0
 80086f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086fe:	f043 0220 	orr.w	r2, r3, #32
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2200      	movs	r2, #0
 800870a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800870e:	2301      	movs	r3, #1
 8008710:	e007      	b.n	8008722 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	695b      	ldr	r3, [r3, #20]
 8008718:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800871c:	2b80      	cmp	r3, #128	@ 0x80
 800871e:	d1ca      	bne.n	80086b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008720:	2300      	movs	r3, #0
}
 8008722:	4618      	mov	r0, r3
 8008724:	3710      	adds	r7, #16
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}

0800872a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800872a:	b580      	push	{r7, lr}
 800872c:	b084      	sub	sp, #16
 800872e:	af00      	add	r7, sp, #0
 8008730:	60f8      	str	r0, [r7, #12]
 8008732:	60b9      	str	r1, [r7, #8]
 8008734:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008736:	e02d      	b.n	8008794 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008738:	68f8      	ldr	r0, [r7, #12]
 800873a:	f000 f88d 	bl	8008858 <I2C_IsAcknowledgeFailed>
 800873e:	4603      	mov	r3, r0
 8008740:	2b00      	cmp	r3, #0
 8008742:	d001      	beq.n	8008748 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008744:	2301      	movs	r3, #1
 8008746:	e02d      	b.n	80087a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800874e:	d021      	beq.n	8008794 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008750:	f7fd fc3e 	bl	8005fd0 <HAL_GetTick>
 8008754:	4602      	mov	r2, r0
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	1ad3      	subs	r3, r2, r3
 800875a:	68ba      	ldr	r2, [r7, #8]
 800875c:	429a      	cmp	r2, r3
 800875e:	d302      	bcc.n	8008766 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d116      	bne.n	8008794 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	2200      	movs	r2, #0
 800876a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	2220      	movs	r2, #32
 8008770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	2200      	movs	r2, #0
 8008778:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008780:	f043 0220 	orr.w	r2, r3, #32
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2200      	movs	r2, #0
 800878c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8008790:	2301      	movs	r3, #1
 8008792:	e007      	b.n	80087a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	695b      	ldr	r3, [r3, #20]
 800879a:	f003 0304 	and.w	r3, r3, #4
 800879e:	2b04      	cmp	r3, #4
 80087a0:	d1ca      	bne.n	8008738 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80087a2:	2300      	movs	r3, #0
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	3710      	adds	r7, #16
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}

080087ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b084      	sub	sp, #16
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	60f8      	str	r0, [r7, #12]
 80087b4:	60b9      	str	r1, [r7, #8]
 80087b6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80087b8:	e042      	b.n	8008840 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	695b      	ldr	r3, [r3, #20]
 80087c0:	f003 0310 	and.w	r3, r3, #16
 80087c4:	2b10      	cmp	r3, #16
 80087c6:	d119      	bne.n	80087fc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f06f 0210 	mvn.w	r2, #16
 80087d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2200      	movs	r2, #0
 80087d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2220      	movs	r2, #32
 80087dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	2200      	movs	r2, #0
 80087e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2200      	movs	r2, #0
 80087f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80087f8:	2301      	movs	r3, #1
 80087fa:	e029      	b.n	8008850 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087fc:	f7fd fbe8 	bl	8005fd0 <HAL_GetTick>
 8008800:	4602      	mov	r2, r0
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	1ad3      	subs	r3, r2, r3
 8008806:	68ba      	ldr	r2, [r7, #8]
 8008808:	429a      	cmp	r2, r3
 800880a:	d302      	bcc.n	8008812 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d116      	bne.n	8008840 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2200      	movs	r2, #0
 8008816:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2220      	movs	r2, #32
 800881c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2200      	movs	r2, #0
 8008824:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800882c:	f043 0220 	orr.w	r2, r3, #32
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2200      	movs	r2, #0
 8008838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800883c:	2301      	movs	r3, #1
 800883e:	e007      	b.n	8008850 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	695b      	ldr	r3, [r3, #20]
 8008846:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800884a:	2b40      	cmp	r3, #64	@ 0x40
 800884c:	d1b5      	bne.n	80087ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800884e:	2300      	movs	r3, #0
}
 8008850:	4618      	mov	r0, r3
 8008852:	3710      	adds	r7, #16
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008858:	b480      	push	{r7}
 800885a:	b083      	sub	sp, #12
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	695b      	ldr	r3, [r3, #20]
 8008866:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800886a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800886e:	d11b      	bne.n	80088a8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008878:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2200      	movs	r2, #0
 800887e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2220      	movs	r2, #32
 8008884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2200      	movs	r2, #0
 800888c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008894:	f043 0204 	orr.w	r2, r3, #4
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2200      	movs	r2, #0
 80088a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80088a4:	2301      	movs	r3, #1
 80088a6:	e000      	b.n	80088aa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80088a8:	2300      	movs	r3, #0
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	370c      	adds	r7, #12
 80088ae:	46bd      	mov	sp, r7
 80088b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b4:	4770      	bx	lr
	...

080088b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b084      	sub	sp, #16
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d101      	bne.n	80088cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80088c8:	2301      	movs	r3, #1
 80088ca:	e0cc      	b.n	8008a66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80088cc:	4b68      	ldr	r3, [pc, #416]	@ (8008a70 <HAL_RCC_ClockConfig+0x1b8>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f003 030f 	and.w	r3, r3, #15
 80088d4:	683a      	ldr	r2, [r7, #0]
 80088d6:	429a      	cmp	r2, r3
 80088d8:	d90c      	bls.n	80088f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088da:	4b65      	ldr	r3, [pc, #404]	@ (8008a70 <HAL_RCC_ClockConfig+0x1b8>)
 80088dc:	683a      	ldr	r2, [r7, #0]
 80088de:	b2d2      	uxtb	r2, r2
 80088e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80088e2:	4b63      	ldr	r3, [pc, #396]	@ (8008a70 <HAL_RCC_ClockConfig+0x1b8>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f003 030f 	and.w	r3, r3, #15
 80088ea:	683a      	ldr	r2, [r7, #0]
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d001      	beq.n	80088f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80088f0:	2301      	movs	r3, #1
 80088f2:	e0b8      	b.n	8008a66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f003 0302 	and.w	r3, r3, #2
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d020      	beq.n	8008942 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f003 0304 	and.w	r3, r3, #4
 8008908:	2b00      	cmp	r3, #0
 800890a:	d005      	beq.n	8008918 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800890c:	4b59      	ldr	r3, [pc, #356]	@ (8008a74 <HAL_RCC_ClockConfig+0x1bc>)
 800890e:	689b      	ldr	r3, [r3, #8]
 8008910:	4a58      	ldr	r2, [pc, #352]	@ (8008a74 <HAL_RCC_ClockConfig+0x1bc>)
 8008912:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008916:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f003 0308 	and.w	r3, r3, #8
 8008920:	2b00      	cmp	r3, #0
 8008922:	d005      	beq.n	8008930 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008924:	4b53      	ldr	r3, [pc, #332]	@ (8008a74 <HAL_RCC_ClockConfig+0x1bc>)
 8008926:	689b      	ldr	r3, [r3, #8]
 8008928:	4a52      	ldr	r2, [pc, #328]	@ (8008a74 <HAL_RCC_ClockConfig+0x1bc>)
 800892a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800892e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008930:	4b50      	ldr	r3, [pc, #320]	@ (8008a74 <HAL_RCC_ClockConfig+0x1bc>)
 8008932:	689b      	ldr	r3, [r3, #8]
 8008934:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	689b      	ldr	r3, [r3, #8]
 800893c:	494d      	ldr	r1, [pc, #308]	@ (8008a74 <HAL_RCC_ClockConfig+0x1bc>)
 800893e:	4313      	orrs	r3, r2
 8008940:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f003 0301 	and.w	r3, r3, #1
 800894a:	2b00      	cmp	r3, #0
 800894c:	d044      	beq.n	80089d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	2b01      	cmp	r3, #1
 8008954:	d107      	bne.n	8008966 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008956:	4b47      	ldr	r3, [pc, #284]	@ (8008a74 <HAL_RCC_ClockConfig+0x1bc>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800895e:	2b00      	cmp	r3, #0
 8008960:	d119      	bne.n	8008996 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008962:	2301      	movs	r3, #1
 8008964:	e07f      	b.n	8008a66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	685b      	ldr	r3, [r3, #4]
 800896a:	2b02      	cmp	r3, #2
 800896c:	d003      	beq.n	8008976 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008972:	2b03      	cmp	r3, #3
 8008974:	d107      	bne.n	8008986 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008976:	4b3f      	ldr	r3, [pc, #252]	@ (8008a74 <HAL_RCC_ClockConfig+0x1bc>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800897e:	2b00      	cmp	r3, #0
 8008980:	d109      	bne.n	8008996 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008982:	2301      	movs	r3, #1
 8008984:	e06f      	b.n	8008a66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008986:	4b3b      	ldr	r3, [pc, #236]	@ (8008a74 <HAL_RCC_ClockConfig+0x1bc>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f003 0302 	and.w	r3, r3, #2
 800898e:	2b00      	cmp	r3, #0
 8008990:	d101      	bne.n	8008996 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008992:	2301      	movs	r3, #1
 8008994:	e067      	b.n	8008a66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008996:	4b37      	ldr	r3, [pc, #220]	@ (8008a74 <HAL_RCC_ClockConfig+0x1bc>)
 8008998:	689b      	ldr	r3, [r3, #8]
 800899a:	f023 0203 	bic.w	r2, r3, #3
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	685b      	ldr	r3, [r3, #4]
 80089a2:	4934      	ldr	r1, [pc, #208]	@ (8008a74 <HAL_RCC_ClockConfig+0x1bc>)
 80089a4:	4313      	orrs	r3, r2
 80089a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80089a8:	f7fd fb12 	bl	8005fd0 <HAL_GetTick>
 80089ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089ae:	e00a      	b.n	80089c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80089b0:	f7fd fb0e 	bl	8005fd0 <HAL_GetTick>
 80089b4:	4602      	mov	r2, r0
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	1ad3      	subs	r3, r2, r3
 80089ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80089be:	4293      	cmp	r3, r2
 80089c0:	d901      	bls.n	80089c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80089c2:	2303      	movs	r3, #3
 80089c4:	e04f      	b.n	8008a66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089c6:	4b2b      	ldr	r3, [pc, #172]	@ (8008a74 <HAL_RCC_ClockConfig+0x1bc>)
 80089c8:	689b      	ldr	r3, [r3, #8]
 80089ca:	f003 020c 	and.w	r2, r3, #12
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	009b      	lsls	r3, r3, #2
 80089d4:	429a      	cmp	r2, r3
 80089d6:	d1eb      	bne.n	80089b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80089d8:	4b25      	ldr	r3, [pc, #148]	@ (8008a70 <HAL_RCC_ClockConfig+0x1b8>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f003 030f 	and.w	r3, r3, #15
 80089e0:	683a      	ldr	r2, [r7, #0]
 80089e2:	429a      	cmp	r2, r3
 80089e4:	d20c      	bcs.n	8008a00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089e6:	4b22      	ldr	r3, [pc, #136]	@ (8008a70 <HAL_RCC_ClockConfig+0x1b8>)
 80089e8:	683a      	ldr	r2, [r7, #0]
 80089ea:	b2d2      	uxtb	r2, r2
 80089ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80089ee:	4b20      	ldr	r3, [pc, #128]	@ (8008a70 <HAL_RCC_ClockConfig+0x1b8>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f003 030f 	and.w	r3, r3, #15
 80089f6:	683a      	ldr	r2, [r7, #0]
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d001      	beq.n	8008a00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80089fc:	2301      	movs	r3, #1
 80089fe:	e032      	b.n	8008a66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f003 0304 	and.w	r3, r3, #4
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d008      	beq.n	8008a1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008a0c:	4b19      	ldr	r3, [pc, #100]	@ (8008a74 <HAL_RCC_ClockConfig+0x1bc>)
 8008a0e:	689b      	ldr	r3, [r3, #8]
 8008a10:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	68db      	ldr	r3, [r3, #12]
 8008a18:	4916      	ldr	r1, [pc, #88]	@ (8008a74 <HAL_RCC_ClockConfig+0x1bc>)
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f003 0308 	and.w	r3, r3, #8
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d009      	beq.n	8008a3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008a2a:	4b12      	ldr	r3, [pc, #72]	@ (8008a74 <HAL_RCC_ClockConfig+0x1bc>)
 8008a2c:	689b      	ldr	r3, [r3, #8]
 8008a2e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	691b      	ldr	r3, [r3, #16]
 8008a36:	00db      	lsls	r3, r3, #3
 8008a38:	490e      	ldr	r1, [pc, #56]	@ (8008a74 <HAL_RCC_ClockConfig+0x1bc>)
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008a3e:	f000 f855 	bl	8008aec <HAL_RCC_GetSysClockFreq>
 8008a42:	4602      	mov	r2, r0
 8008a44:	4b0b      	ldr	r3, [pc, #44]	@ (8008a74 <HAL_RCC_ClockConfig+0x1bc>)
 8008a46:	689b      	ldr	r3, [r3, #8]
 8008a48:	091b      	lsrs	r3, r3, #4
 8008a4a:	f003 030f 	and.w	r3, r3, #15
 8008a4e:	490a      	ldr	r1, [pc, #40]	@ (8008a78 <HAL_RCC_ClockConfig+0x1c0>)
 8008a50:	5ccb      	ldrb	r3, [r1, r3]
 8008a52:	fa22 f303 	lsr.w	r3, r2, r3
 8008a56:	4a09      	ldr	r2, [pc, #36]	@ (8008a7c <HAL_RCC_ClockConfig+0x1c4>)
 8008a58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008a5a:	4b09      	ldr	r3, [pc, #36]	@ (8008a80 <HAL_RCC_ClockConfig+0x1c8>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f7fd fa72 	bl	8005f48 <HAL_InitTick>

  return HAL_OK;
 8008a64:	2300      	movs	r3, #0
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3710      	adds	r7, #16
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}
 8008a6e:	bf00      	nop
 8008a70:	40023c00 	.word	0x40023c00
 8008a74:	40023800 	.word	0x40023800
 8008a78:	0800f0a8 	.word	0x0800f0a8
 8008a7c:	20000004 	.word	0x20000004
 8008a80:	20000008 	.word	0x20000008

08008a84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008a84:	b480      	push	{r7}
 8008a86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008a88:	4b03      	ldr	r3, [pc, #12]	@ (8008a98 <HAL_RCC_GetHCLKFreq+0x14>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a94:	4770      	bx	lr
 8008a96:	bf00      	nop
 8008a98:	20000004 	.word	0x20000004

08008a9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008aa0:	f7ff fff0 	bl	8008a84 <HAL_RCC_GetHCLKFreq>
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	4b05      	ldr	r3, [pc, #20]	@ (8008abc <HAL_RCC_GetPCLK1Freq+0x20>)
 8008aa8:	689b      	ldr	r3, [r3, #8]
 8008aaa:	0a9b      	lsrs	r3, r3, #10
 8008aac:	f003 0307 	and.w	r3, r3, #7
 8008ab0:	4903      	ldr	r1, [pc, #12]	@ (8008ac0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008ab2:	5ccb      	ldrb	r3, [r1, r3]
 8008ab4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	bd80      	pop	{r7, pc}
 8008abc:	40023800 	.word	0x40023800
 8008ac0:	0800f0b8 	.word	0x0800f0b8

08008ac4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008ac8:	f7ff ffdc 	bl	8008a84 <HAL_RCC_GetHCLKFreq>
 8008acc:	4602      	mov	r2, r0
 8008ace:	4b05      	ldr	r3, [pc, #20]	@ (8008ae4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008ad0:	689b      	ldr	r3, [r3, #8]
 8008ad2:	0b5b      	lsrs	r3, r3, #13
 8008ad4:	f003 0307 	and.w	r3, r3, #7
 8008ad8:	4903      	ldr	r1, [pc, #12]	@ (8008ae8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008ada:	5ccb      	ldrb	r3, [r1, r3]
 8008adc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	bd80      	pop	{r7, pc}
 8008ae4:	40023800 	.word	0x40023800
 8008ae8:	0800f0b8 	.word	0x0800f0b8

08008aec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008aec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008af0:	b0ae      	sub	sp, #184	@ 0xb8
 8008af2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008af4:	2300      	movs	r3, #0
 8008af6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8008afa:	2300      	movs	r3, #0
 8008afc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8008b00:	2300      	movs	r3, #0
 8008b02:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8008b06:	2300      	movs	r3, #0
 8008b08:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008b12:	4bcb      	ldr	r3, [pc, #812]	@ (8008e40 <HAL_RCC_GetSysClockFreq+0x354>)
 8008b14:	689b      	ldr	r3, [r3, #8]
 8008b16:	f003 030c 	and.w	r3, r3, #12
 8008b1a:	2b0c      	cmp	r3, #12
 8008b1c:	f200 8206 	bhi.w	8008f2c <HAL_RCC_GetSysClockFreq+0x440>
 8008b20:	a201      	add	r2, pc, #4	@ (adr r2, 8008b28 <HAL_RCC_GetSysClockFreq+0x3c>)
 8008b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b26:	bf00      	nop
 8008b28:	08008b5d 	.word	0x08008b5d
 8008b2c:	08008f2d 	.word	0x08008f2d
 8008b30:	08008f2d 	.word	0x08008f2d
 8008b34:	08008f2d 	.word	0x08008f2d
 8008b38:	08008b65 	.word	0x08008b65
 8008b3c:	08008f2d 	.word	0x08008f2d
 8008b40:	08008f2d 	.word	0x08008f2d
 8008b44:	08008f2d 	.word	0x08008f2d
 8008b48:	08008b6d 	.word	0x08008b6d
 8008b4c:	08008f2d 	.word	0x08008f2d
 8008b50:	08008f2d 	.word	0x08008f2d
 8008b54:	08008f2d 	.word	0x08008f2d
 8008b58:	08008d5d 	.word	0x08008d5d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008b5c:	4bb9      	ldr	r3, [pc, #740]	@ (8008e44 <HAL_RCC_GetSysClockFreq+0x358>)
 8008b5e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8008b62:	e1e7      	b.n	8008f34 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008b64:	4bb8      	ldr	r3, [pc, #736]	@ (8008e48 <HAL_RCC_GetSysClockFreq+0x35c>)
 8008b66:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8008b6a:	e1e3      	b.n	8008f34 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008b6c:	4bb4      	ldr	r3, [pc, #720]	@ (8008e40 <HAL_RCC_GetSysClockFreq+0x354>)
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008b74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008b78:	4bb1      	ldr	r3, [pc, #708]	@ (8008e40 <HAL_RCC_GetSysClockFreq+0x354>)
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d071      	beq.n	8008c68 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008b84:	4bae      	ldr	r3, [pc, #696]	@ (8008e40 <HAL_RCC_GetSysClockFreq+0x354>)
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	099b      	lsrs	r3, r3, #6
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008b90:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8008b94:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008b98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b9c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008ba6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008baa:	4622      	mov	r2, r4
 8008bac:	462b      	mov	r3, r5
 8008bae:	f04f 0000 	mov.w	r0, #0
 8008bb2:	f04f 0100 	mov.w	r1, #0
 8008bb6:	0159      	lsls	r1, r3, #5
 8008bb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008bbc:	0150      	lsls	r0, r2, #5
 8008bbe:	4602      	mov	r2, r0
 8008bc0:	460b      	mov	r3, r1
 8008bc2:	4621      	mov	r1, r4
 8008bc4:	1a51      	subs	r1, r2, r1
 8008bc6:	6439      	str	r1, [r7, #64]	@ 0x40
 8008bc8:	4629      	mov	r1, r5
 8008bca:	eb63 0301 	sbc.w	r3, r3, r1
 8008bce:	647b      	str	r3, [r7, #68]	@ 0x44
 8008bd0:	f04f 0200 	mov.w	r2, #0
 8008bd4:	f04f 0300 	mov.w	r3, #0
 8008bd8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8008bdc:	4649      	mov	r1, r9
 8008bde:	018b      	lsls	r3, r1, #6
 8008be0:	4641      	mov	r1, r8
 8008be2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008be6:	4641      	mov	r1, r8
 8008be8:	018a      	lsls	r2, r1, #6
 8008bea:	4641      	mov	r1, r8
 8008bec:	1a51      	subs	r1, r2, r1
 8008bee:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008bf0:	4649      	mov	r1, r9
 8008bf2:	eb63 0301 	sbc.w	r3, r3, r1
 8008bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008bf8:	f04f 0200 	mov.w	r2, #0
 8008bfc:	f04f 0300 	mov.w	r3, #0
 8008c00:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8008c04:	4649      	mov	r1, r9
 8008c06:	00cb      	lsls	r3, r1, #3
 8008c08:	4641      	mov	r1, r8
 8008c0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008c0e:	4641      	mov	r1, r8
 8008c10:	00ca      	lsls	r2, r1, #3
 8008c12:	4610      	mov	r0, r2
 8008c14:	4619      	mov	r1, r3
 8008c16:	4603      	mov	r3, r0
 8008c18:	4622      	mov	r2, r4
 8008c1a:	189b      	adds	r3, r3, r2
 8008c1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8008c1e:	462b      	mov	r3, r5
 8008c20:	460a      	mov	r2, r1
 8008c22:	eb42 0303 	adc.w	r3, r2, r3
 8008c26:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c28:	f04f 0200 	mov.w	r2, #0
 8008c2c:	f04f 0300 	mov.w	r3, #0
 8008c30:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8008c34:	4629      	mov	r1, r5
 8008c36:	024b      	lsls	r3, r1, #9
 8008c38:	4621      	mov	r1, r4
 8008c3a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008c3e:	4621      	mov	r1, r4
 8008c40:	024a      	lsls	r2, r1, #9
 8008c42:	4610      	mov	r0, r2
 8008c44:	4619      	mov	r1, r3
 8008c46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008c50:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008c54:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8008c58:	f7f8 f87e 	bl	8000d58 <__aeabi_uldivmod>
 8008c5c:	4602      	mov	r2, r0
 8008c5e:	460b      	mov	r3, r1
 8008c60:	4613      	mov	r3, r2
 8008c62:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008c66:	e067      	b.n	8008d38 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c68:	4b75      	ldr	r3, [pc, #468]	@ (8008e40 <HAL_RCC_GetSysClockFreq+0x354>)
 8008c6a:	685b      	ldr	r3, [r3, #4]
 8008c6c:	099b      	lsrs	r3, r3, #6
 8008c6e:	2200      	movs	r2, #0
 8008c70:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008c74:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8008c78:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008c7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c80:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008c82:	2300      	movs	r3, #0
 8008c84:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008c86:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8008c8a:	4622      	mov	r2, r4
 8008c8c:	462b      	mov	r3, r5
 8008c8e:	f04f 0000 	mov.w	r0, #0
 8008c92:	f04f 0100 	mov.w	r1, #0
 8008c96:	0159      	lsls	r1, r3, #5
 8008c98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008c9c:	0150      	lsls	r0, r2, #5
 8008c9e:	4602      	mov	r2, r0
 8008ca0:	460b      	mov	r3, r1
 8008ca2:	4621      	mov	r1, r4
 8008ca4:	1a51      	subs	r1, r2, r1
 8008ca6:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008ca8:	4629      	mov	r1, r5
 8008caa:	eb63 0301 	sbc.w	r3, r3, r1
 8008cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008cb0:	f04f 0200 	mov.w	r2, #0
 8008cb4:	f04f 0300 	mov.w	r3, #0
 8008cb8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8008cbc:	4649      	mov	r1, r9
 8008cbe:	018b      	lsls	r3, r1, #6
 8008cc0:	4641      	mov	r1, r8
 8008cc2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008cc6:	4641      	mov	r1, r8
 8008cc8:	018a      	lsls	r2, r1, #6
 8008cca:	4641      	mov	r1, r8
 8008ccc:	ebb2 0a01 	subs.w	sl, r2, r1
 8008cd0:	4649      	mov	r1, r9
 8008cd2:	eb63 0b01 	sbc.w	fp, r3, r1
 8008cd6:	f04f 0200 	mov.w	r2, #0
 8008cda:	f04f 0300 	mov.w	r3, #0
 8008cde:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008ce2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008ce6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008cea:	4692      	mov	sl, r2
 8008cec:	469b      	mov	fp, r3
 8008cee:	4623      	mov	r3, r4
 8008cf0:	eb1a 0303 	adds.w	r3, sl, r3
 8008cf4:	623b      	str	r3, [r7, #32]
 8008cf6:	462b      	mov	r3, r5
 8008cf8:	eb4b 0303 	adc.w	r3, fp, r3
 8008cfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8008cfe:	f04f 0200 	mov.w	r2, #0
 8008d02:	f04f 0300 	mov.w	r3, #0
 8008d06:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8008d0a:	4629      	mov	r1, r5
 8008d0c:	028b      	lsls	r3, r1, #10
 8008d0e:	4621      	mov	r1, r4
 8008d10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008d14:	4621      	mov	r1, r4
 8008d16:	028a      	lsls	r2, r1, #10
 8008d18:	4610      	mov	r0, r2
 8008d1a:	4619      	mov	r1, r3
 8008d1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008d20:	2200      	movs	r2, #0
 8008d22:	673b      	str	r3, [r7, #112]	@ 0x70
 8008d24:	677a      	str	r2, [r7, #116]	@ 0x74
 8008d26:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8008d2a:	f7f8 f815 	bl	8000d58 <__aeabi_uldivmod>
 8008d2e:	4602      	mov	r2, r0
 8008d30:	460b      	mov	r3, r1
 8008d32:	4613      	mov	r3, r2
 8008d34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008d38:	4b41      	ldr	r3, [pc, #260]	@ (8008e40 <HAL_RCC_GetSysClockFreq+0x354>)
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	0c1b      	lsrs	r3, r3, #16
 8008d3e:	f003 0303 	and.w	r3, r3, #3
 8008d42:	3301      	adds	r3, #1
 8008d44:	005b      	lsls	r3, r3, #1
 8008d46:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8008d4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008d4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d56:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8008d5a:	e0eb      	b.n	8008f34 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008d5c:	4b38      	ldr	r3, [pc, #224]	@ (8008e40 <HAL_RCC_GetSysClockFreq+0x354>)
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008d64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008d68:	4b35      	ldr	r3, [pc, #212]	@ (8008e40 <HAL_RCC_GetSysClockFreq+0x354>)
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d06b      	beq.n	8008e4c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008d74:	4b32      	ldr	r3, [pc, #200]	@ (8008e40 <HAL_RCC_GetSysClockFreq+0x354>)
 8008d76:	685b      	ldr	r3, [r3, #4]
 8008d78:	099b      	lsrs	r3, r3, #6
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008d7e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008d80:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008d82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d86:	663b      	str	r3, [r7, #96]	@ 0x60
 8008d88:	2300      	movs	r3, #0
 8008d8a:	667b      	str	r3, [r7, #100]	@ 0x64
 8008d8c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8008d90:	4622      	mov	r2, r4
 8008d92:	462b      	mov	r3, r5
 8008d94:	f04f 0000 	mov.w	r0, #0
 8008d98:	f04f 0100 	mov.w	r1, #0
 8008d9c:	0159      	lsls	r1, r3, #5
 8008d9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008da2:	0150      	lsls	r0, r2, #5
 8008da4:	4602      	mov	r2, r0
 8008da6:	460b      	mov	r3, r1
 8008da8:	4621      	mov	r1, r4
 8008daa:	1a51      	subs	r1, r2, r1
 8008dac:	61b9      	str	r1, [r7, #24]
 8008dae:	4629      	mov	r1, r5
 8008db0:	eb63 0301 	sbc.w	r3, r3, r1
 8008db4:	61fb      	str	r3, [r7, #28]
 8008db6:	f04f 0200 	mov.w	r2, #0
 8008dba:	f04f 0300 	mov.w	r3, #0
 8008dbe:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8008dc2:	4659      	mov	r1, fp
 8008dc4:	018b      	lsls	r3, r1, #6
 8008dc6:	4651      	mov	r1, sl
 8008dc8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008dcc:	4651      	mov	r1, sl
 8008dce:	018a      	lsls	r2, r1, #6
 8008dd0:	4651      	mov	r1, sl
 8008dd2:	ebb2 0801 	subs.w	r8, r2, r1
 8008dd6:	4659      	mov	r1, fp
 8008dd8:	eb63 0901 	sbc.w	r9, r3, r1
 8008ddc:	f04f 0200 	mov.w	r2, #0
 8008de0:	f04f 0300 	mov.w	r3, #0
 8008de4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008de8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008dec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008df0:	4690      	mov	r8, r2
 8008df2:	4699      	mov	r9, r3
 8008df4:	4623      	mov	r3, r4
 8008df6:	eb18 0303 	adds.w	r3, r8, r3
 8008dfa:	613b      	str	r3, [r7, #16]
 8008dfc:	462b      	mov	r3, r5
 8008dfe:	eb49 0303 	adc.w	r3, r9, r3
 8008e02:	617b      	str	r3, [r7, #20]
 8008e04:	f04f 0200 	mov.w	r2, #0
 8008e08:	f04f 0300 	mov.w	r3, #0
 8008e0c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8008e10:	4629      	mov	r1, r5
 8008e12:	024b      	lsls	r3, r1, #9
 8008e14:	4621      	mov	r1, r4
 8008e16:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008e1a:	4621      	mov	r1, r4
 8008e1c:	024a      	lsls	r2, r1, #9
 8008e1e:	4610      	mov	r0, r2
 8008e20:	4619      	mov	r1, r3
 8008e22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e26:	2200      	movs	r2, #0
 8008e28:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008e2a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8008e2c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008e30:	f7f7 ff92 	bl	8000d58 <__aeabi_uldivmod>
 8008e34:	4602      	mov	r2, r0
 8008e36:	460b      	mov	r3, r1
 8008e38:	4613      	mov	r3, r2
 8008e3a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008e3e:	e065      	b.n	8008f0c <HAL_RCC_GetSysClockFreq+0x420>
 8008e40:	40023800 	.word	0x40023800
 8008e44:	00f42400 	.word	0x00f42400
 8008e48:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008e4c:	4b3d      	ldr	r3, [pc, #244]	@ (8008f44 <HAL_RCC_GetSysClockFreq+0x458>)
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	099b      	lsrs	r3, r3, #6
 8008e52:	2200      	movs	r2, #0
 8008e54:	4618      	mov	r0, r3
 8008e56:	4611      	mov	r1, r2
 8008e58:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008e5c:	653b      	str	r3, [r7, #80]	@ 0x50
 8008e5e:	2300      	movs	r3, #0
 8008e60:	657b      	str	r3, [r7, #84]	@ 0x54
 8008e62:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8008e66:	4642      	mov	r2, r8
 8008e68:	464b      	mov	r3, r9
 8008e6a:	f04f 0000 	mov.w	r0, #0
 8008e6e:	f04f 0100 	mov.w	r1, #0
 8008e72:	0159      	lsls	r1, r3, #5
 8008e74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008e78:	0150      	lsls	r0, r2, #5
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	460b      	mov	r3, r1
 8008e7e:	4641      	mov	r1, r8
 8008e80:	1a51      	subs	r1, r2, r1
 8008e82:	60b9      	str	r1, [r7, #8]
 8008e84:	4649      	mov	r1, r9
 8008e86:	eb63 0301 	sbc.w	r3, r3, r1
 8008e8a:	60fb      	str	r3, [r7, #12]
 8008e8c:	f04f 0200 	mov.w	r2, #0
 8008e90:	f04f 0300 	mov.w	r3, #0
 8008e94:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8008e98:	4659      	mov	r1, fp
 8008e9a:	018b      	lsls	r3, r1, #6
 8008e9c:	4651      	mov	r1, sl
 8008e9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008ea2:	4651      	mov	r1, sl
 8008ea4:	018a      	lsls	r2, r1, #6
 8008ea6:	4651      	mov	r1, sl
 8008ea8:	1a54      	subs	r4, r2, r1
 8008eaa:	4659      	mov	r1, fp
 8008eac:	eb63 0501 	sbc.w	r5, r3, r1
 8008eb0:	f04f 0200 	mov.w	r2, #0
 8008eb4:	f04f 0300 	mov.w	r3, #0
 8008eb8:	00eb      	lsls	r3, r5, #3
 8008eba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008ebe:	00e2      	lsls	r2, r4, #3
 8008ec0:	4614      	mov	r4, r2
 8008ec2:	461d      	mov	r5, r3
 8008ec4:	4643      	mov	r3, r8
 8008ec6:	18e3      	adds	r3, r4, r3
 8008ec8:	603b      	str	r3, [r7, #0]
 8008eca:	464b      	mov	r3, r9
 8008ecc:	eb45 0303 	adc.w	r3, r5, r3
 8008ed0:	607b      	str	r3, [r7, #4]
 8008ed2:	f04f 0200 	mov.w	r2, #0
 8008ed6:	f04f 0300 	mov.w	r3, #0
 8008eda:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008ede:	4629      	mov	r1, r5
 8008ee0:	028b      	lsls	r3, r1, #10
 8008ee2:	4621      	mov	r1, r4
 8008ee4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008ee8:	4621      	mov	r1, r4
 8008eea:	028a      	lsls	r2, r1, #10
 8008eec:	4610      	mov	r0, r2
 8008eee:	4619      	mov	r1, r3
 8008ef0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ef8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8008efa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008efe:	f7f7 ff2b 	bl	8000d58 <__aeabi_uldivmod>
 8008f02:	4602      	mov	r2, r0
 8008f04:	460b      	mov	r3, r1
 8008f06:	4613      	mov	r3, r2
 8008f08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8008f0c:	4b0d      	ldr	r3, [pc, #52]	@ (8008f44 <HAL_RCC_GetSysClockFreq+0x458>)
 8008f0e:	685b      	ldr	r3, [r3, #4]
 8008f10:	0f1b      	lsrs	r3, r3, #28
 8008f12:	f003 0307 	and.w	r3, r3, #7
 8008f16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8008f1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008f1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f26:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8008f2a:	e003      	b.n	8008f34 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008f2c:	4b06      	ldr	r3, [pc, #24]	@ (8008f48 <HAL_RCC_GetSysClockFreq+0x45c>)
 8008f2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8008f32:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008f34:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	37b8      	adds	r7, #184	@ 0xb8
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f42:	bf00      	nop
 8008f44:	40023800 	.word	0x40023800
 8008f48:	00f42400 	.word	0x00f42400

08008f4c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b086      	sub	sp, #24
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d101      	bne.n	8008f5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	e28d      	b.n	800947a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f003 0301 	and.w	r3, r3, #1
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	f000 8083 	beq.w	8009072 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008f6c:	4b94      	ldr	r3, [pc, #592]	@ (80091c0 <HAL_RCC_OscConfig+0x274>)
 8008f6e:	689b      	ldr	r3, [r3, #8]
 8008f70:	f003 030c 	and.w	r3, r3, #12
 8008f74:	2b04      	cmp	r3, #4
 8008f76:	d019      	beq.n	8008fac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008f78:	4b91      	ldr	r3, [pc, #580]	@ (80091c0 <HAL_RCC_OscConfig+0x274>)
 8008f7a:	689b      	ldr	r3, [r3, #8]
 8008f7c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008f80:	2b08      	cmp	r3, #8
 8008f82:	d106      	bne.n	8008f92 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008f84:	4b8e      	ldr	r3, [pc, #568]	@ (80091c0 <HAL_RCC_OscConfig+0x274>)
 8008f86:	685b      	ldr	r3, [r3, #4]
 8008f88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008f8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008f90:	d00c      	beq.n	8008fac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008f92:	4b8b      	ldr	r3, [pc, #556]	@ (80091c0 <HAL_RCC_OscConfig+0x274>)
 8008f94:	689b      	ldr	r3, [r3, #8]
 8008f96:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008f9a:	2b0c      	cmp	r3, #12
 8008f9c:	d112      	bne.n	8008fc4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008f9e:	4b88      	ldr	r3, [pc, #544]	@ (80091c0 <HAL_RCC_OscConfig+0x274>)
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008fa6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008faa:	d10b      	bne.n	8008fc4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008fac:	4b84      	ldr	r3, [pc, #528]	@ (80091c0 <HAL_RCC_OscConfig+0x274>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d05b      	beq.n	8009070 <HAL_RCC_OscConfig+0x124>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d157      	bne.n	8009070 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	e25a      	b.n	800947a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008fcc:	d106      	bne.n	8008fdc <HAL_RCC_OscConfig+0x90>
 8008fce:	4b7c      	ldr	r3, [pc, #496]	@ (80091c0 <HAL_RCC_OscConfig+0x274>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	4a7b      	ldr	r2, [pc, #492]	@ (80091c0 <HAL_RCC_OscConfig+0x274>)
 8008fd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008fd8:	6013      	str	r3, [r2, #0]
 8008fda:	e01d      	b.n	8009018 <HAL_RCC_OscConfig+0xcc>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	685b      	ldr	r3, [r3, #4]
 8008fe0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008fe4:	d10c      	bne.n	8009000 <HAL_RCC_OscConfig+0xb4>
 8008fe6:	4b76      	ldr	r3, [pc, #472]	@ (80091c0 <HAL_RCC_OscConfig+0x274>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	4a75      	ldr	r2, [pc, #468]	@ (80091c0 <HAL_RCC_OscConfig+0x274>)
 8008fec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008ff0:	6013      	str	r3, [r2, #0]
 8008ff2:	4b73      	ldr	r3, [pc, #460]	@ (80091c0 <HAL_RCC_OscConfig+0x274>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4a72      	ldr	r2, [pc, #456]	@ (80091c0 <HAL_RCC_OscConfig+0x274>)
 8008ff8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008ffc:	6013      	str	r3, [r2, #0]
 8008ffe:	e00b      	b.n	8009018 <HAL_RCC_OscConfig+0xcc>
 8009000:	4b6f      	ldr	r3, [pc, #444]	@ (80091c0 <HAL_RCC_OscConfig+0x274>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4a6e      	ldr	r2, [pc, #440]	@ (80091c0 <HAL_RCC_OscConfig+0x274>)
 8009006:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800900a:	6013      	str	r3, [r2, #0]
 800900c:	4b6c      	ldr	r3, [pc, #432]	@ (80091c0 <HAL_RCC_OscConfig+0x274>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4a6b      	ldr	r2, [pc, #428]	@ (80091c0 <HAL_RCC_OscConfig+0x274>)
 8009012:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009016:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d013      	beq.n	8009048 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009020:	f7fc ffd6 	bl	8005fd0 <HAL_GetTick>
 8009024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009026:	e008      	b.n	800903a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009028:	f7fc ffd2 	bl	8005fd0 <HAL_GetTick>
 800902c:	4602      	mov	r2, r0
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	1ad3      	subs	r3, r2, r3
 8009032:	2b64      	cmp	r3, #100	@ 0x64
 8009034:	d901      	bls.n	800903a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8009036:	2303      	movs	r3, #3
 8009038:	e21f      	b.n	800947a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800903a:	4b61      	ldr	r3, [pc, #388]	@ (80091c0 <HAL_RCC_OscConfig+0x274>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009042:	2b00      	cmp	r3, #0
 8009044:	d0f0      	beq.n	8009028 <HAL_RCC_OscConfig+0xdc>
 8009046:	e014      	b.n	8009072 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009048:	f7fc ffc2 	bl	8005fd0 <HAL_GetTick>
 800904c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800904e:	e008      	b.n	8009062 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009050:	f7fc ffbe 	bl	8005fd0 <HAL_GetTick>
 8009054:	4602      	mov	r2, r0
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	1ad3      	subs	r3, r2, r3
 800905a:	2b64      	cmp	r3, #100	@ 0x64
 800905c:	d901      	bls.n	8009062 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800905e:	2303      	movs	r3, #3
 8009060:	e20b      	b.n	800947a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009062:	4b57      	ldr	r3, [pc, #348]	@ (80091c0 <HAL_RCC_OscConfig+0x274>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800906a:	2b00      	cmp	r3, #0
 800906c:	d1f0      	bne.n	8009050 <HAL_RCC_OscConfig+0x104>
 800906e:	e000      	b.n	8009072 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009070:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f003 0302 	and.w	r3, r3, #2
 800907a:	2b00      	cmp	r3, #0
 800907c:	d06f      	beq.n	800915e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800907e:	4b50      	ldr	r3, [pc, #320]	@ (80091c0 <HAL_RCC_OscConfig+0x274>)
 8009080:	689b      	ldr	r3, [r3, #8]
 8009082:	f003 030c 	and.w	r3, r3, #12
 8009086:	2b00      	cmp	r3, #0
 8009088:	d017      	beq.n	80090ba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800908a:	4b4d      	ldr	r3, [pc, #308]	@ (80091c0 <HAL_RCC_OscConfig+0x274>)
 800908c:	689b      	ldr	r3, [r3, #8]
 800908e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009092:	2b08      	cmp	r3, #8
 8009094:	d105      	bne.n	80090a2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009096:	4b4a      	ldr	r3, [pc, #296]	@ (80091c0 <HAL_RCC_OscConfig+0x274>)
 8009098:	685b      	ldr	r3, [r3, #4]
 800909a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d00b      	beq.n	80090ba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80090a2:	4b47      	ldr	r3, [pc, #284]	@ (80091c0 <HAL_RCC_OscConfig+0x274>)
 80090a4:	689b      	ldr	r3, [r3, #8]
 80090a6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80090aa:	2b0c      	cmp	r3, #12
 80090ac:	d11c      	bne.n	80090e8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80090ae:	4b44      	ldr	r3, [pc, #272]	@ (80091c0 <HAL_RCC_OscConfig+0x274>)
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d116      	bne.n	80090e8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80090ba:	4b41      	ldr	r3, [pc, #260]	@ (80091c0 <HAL_RCC_OscConfig+0x274>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f003 0302 	and.w	r3, r3, #2
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d005      	beq.n	80090d2 <HAL_RCC_OscConfig+0x186>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	68db      	ldr	r3, [r3, #12]
 80090ca:	2b01      	cmp	r3, #1
 80090cc:	d001      	beq.n	80090d2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80090ce:	2301      	movs	r3, #1
 80090d0:	e1d3      	b.n	800947a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80090d2:	4b3b      	ldr	r3, [pc, #236]	@ (80091c0 <HAL_RCC_OscConfig+0x274>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	691b      	ldr	r3, [r3, #16]
 80090de:	00db      	lsls	r3, r3, #3
 80090e0:	4937      	ldr	r1, [pc, #220]	@ (80091c0 <HAL_RCC_OscConfig+0x274>)
 80090e2:	4313      	orrs	r3, r2
 80090e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80090e6:	e03a      	b.n	800915e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	68db      	ldr	r3, [r3, #12]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d020      	beq.n	8009132 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80090f0:	4b34      	ldr	r3, [pc, #208]	@ (80091c4 <HAL_RCC_OscConfig+0x278>)
 80090f2:	2201      	movs	r2, #1
 80090f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090f6:	f7fc ff6b 	bl	8005fd0 <HAL_GetTick>
 80090fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80090fc:	e008      	b.n	8009110 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80090fe:	f7fc ff67 	bl	8005fd0 <HAL_GetTick>
 8009102:	4602      	mov	r2, r0
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	1ad3      	subs	r3, r2, r3
 8009108:	2b02      	cmp	r3, #2
 800910a:	d901      	bls.n	8009110 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800910c:	2303      	movs	r3, #3
 800910e:	e1b4      	b.n	800947a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009110:	4b2b      	ldr	r3, [pc, #172]	@ (80091c0 <HAL_RCC_OscConfig+0x274>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f003 0302 	and.w	r3, r3, #2
 8009118:	2b00      	cmp	r3, #0
 800911a:	d0f0      	beq.n	80090fe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800911c:	4b28      	ldr	r3, [pc, #160]	@ (80091c0 <HAL_RCC_OscConfig+0x274>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	691b      	ldr	r3, [r3, #16]
 8009128:	00db      	lsls	r3, r3, #3
 800912a:	4925      	ldr	r1, [pc, #148]	@ (80091c0 <HAL_RCC_OscConfig+0x274>)
 800912c:	4313      	orrs	r3, r2
 800912e:	600b      	str	r3, [r1, #0]
 8009130:	e015      	b.n	800915e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009132:	4b24      	ldr	r3, [pc, #144]	@ (80091c4 <HAL_RCC_OscConfig+0x278>)
 8009134:	2200      	movs	r2, #0
 8009136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009138:	f7fc ff4a 	bl	8005fd0 <HAL_GetTick>
 800913c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800913e:	e008      	b.n	8009152 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009140:	f7fc ff46 	bl	8005fd0 <HAL_GetTick>
 8009144:	4602      	mov	r2, r0
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	1ad3      	subs	r3, r2, r3
 800914a:	2b02      	cmp	r3, #2
 800914c:	d901      	bls.n	8009152 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800914e:	2303      	movs	r3, #3
 8009150:	e193      	b.n	800947a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009152:	4b1b      	ldr	r3, [pc, #108]	@ (80091c0 <HAL_RCC_OscConfig+0x274>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f003 0302 	and.w	r3, r3, #2
 800915a:	2b00      	cmp	r3, #0
 800915c:	d1f0      	bne.n	8009140 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f003 0308 	and.w	r3, r3, #8
 8009166:	2b00      	cmp	r3, #0
 8009168:	d036      	beq.n	80091d8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	695b      	ldr	r3, [r3, #20]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d016      	beq.n	80091a0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009172:	4b15      	ldr	r3, [pc, #84]	@ (80091c8 <HAL_RCC_OscConfig+0x27c>)
 8009174:	2201      	movs	r2, #1
 8009176:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009178:	f7fc ff2a 	bl	8005fd0 <HAL_GetTick>
 800917c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800917e:	e008      	b.n	8009192 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009180:	f7fc ff26 	bl	8005fd0 <HAL_GetTick>
 8009184:	4602      	mov	r2, r0
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	1ad3      	subs	r3, r2, r3
 800918a:	2b02      	cmp	r3, #2
 800918c:	d901      	bls.n	8009192 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800918e:	2303      	movs	r3, #3
 8009190:	e173      	b.n	800947a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009192:	4b0b      	ldr	r3, [pc, #44]	@ (80091c0 <HAL_RCC_OscConfig+0x274>)
 8009194:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009196:	f003 0302 	and.w	r3, r3, #2
 800919a:	2b00      	cmp	r3, #0
 800919c:	d0f0      	beq.n	8009180 <HAL_RCC_OscConfig+0x234>
 800919e:	e01b      	b.n	80091d8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80091a0:	4b09      	ldr	r3, [pc, #36]	@ (80091c8 <HAL_RCC_OscConfig+0x27c>)
 80091a2:	2200      	movs	r2, #0
 80091a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091a6:	f7fc ff13 	bl	8005fd0 <HAL_GetTick>
 80091aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80091ac:	e00e      	b.n	80091cc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80091ae:	f7fc ff0f 	bl	8005fd0 <HAL_GetTick>
 80091b2:	4602      	mov	r2, r0
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	1ad3      	subs	r3, r2, r3
 80091b8:	2b02      	cmp	r3, #2
 80091ba:	d907      	bls.n	80091cc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80091bc:	2303      	movs	r3, #3
 80091be:	e15c      	b.n	800947a <HAL_RCC_OscConfig+0x52e>
 80091c0:	40023800 	.word	0x40023800
 80091c4:	42470000 	.word	0x42470000
 80091c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80091cc:	4b8a      	ldr	r3, [pc, #552]	@ (80093f8 <HAL_RCC_OscConfig+0x4ac>)
 80091ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80091d0:	f003 0302 	and.w	r3, r3, #2
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d1ea      	bne.n	80091ae <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f003 0304 	and.w	r3, r3, #4
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	f000 8097 	beq.w	8009314 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80091e6:	2300      	movs	r3, #0
 80091e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80091ea:	4b83      	ldr	r3, [pc, #524]	@ (80093f8 <HAL_RCC_OscConfig+0x4ac>)
 80091ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d10f      	bne.n	8009216 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80091f6:	2300      	movs	r3, #0
 80091f8:	60bb      	str	r3, [r7, #8]
 80091fa:	4b7f      	ldr	r3, [pc, #508]	@ (80093f8 <HAL_RCC_OscConfig+0x4ac>)
 80091fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091fe:	4a7e      	ldr	r2, [pc, #504]	@ (80093f8 <HAL_RCC_OscConfig+0x4ac>)
 8009200:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009204:	6413      	str	r3, [r2, #64]	@ 0x40
 8009206:	4b7c      	ldr	r3, [pc, #496]	@ (80093f8 <HAL_RCC_OscConfig+0x4ac>)
 8009208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800920a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800920e:	60bb      	str	r3, [r7, #8]
 8009210:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009212:	2301      	movs	r3, #1
 8009214:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009216:	4b79      	ldr	r3, [pc, #484]	@ (80093fc <HAL_RCC_OscConfig+0x4b0>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800921e:	2b00      	cmp	r3, #0
 8009220:	d118      	bne.n	8009254 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009222:	4b76      	ldr	r3, [pc, #472]	@ (80093fc <HAL_RCC_OscConfig+0x4b0>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	4a75      	ldr	r2, [pc, #468]	@ (80093fc <HAL_RCC_OscConfig+0x4b0>)
 8009228:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800922c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800922e:	f7fc fecf 	bl	8005fd0 <HAL_GetTick>
 8009232:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009234:	e008      	b.n	8009248 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009236:	f7fc fecb 	bl	8005fd0 <HAL_GetTick>
 800923a:	4602      	mov	r2, r0
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	1ad3      	subs	r3, r2, r3
 8009240:	2b02      	cmp	r3, #2
 8009242:	d901      	bls.n	8009248 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8009244:	2303      	movs	r3, #3
 8009246:	e118      	b.n	800947a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009248:	4b6c      	ldr	r3, [pc, #432]	@ (80093fc <HAL_RCC_OscConfig+0x4b0>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009250:	2b00      	cmp	r3, #0
 8009252:	d0f0      	beq.n	8009236 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	689b      	ldr	r3, [r3, #8]
 8009258:	2b01      	cmp	r3, #1
 800925a:	d106      	bne.n	800926a <HAL_RCC_OscConfig+0x31e>
 800925c:	4b66      	ldr	r3, [pc, #408]	@ (80093f8 <HAL_RCC_OscConfig+0x4ac>)
 800925e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009260:	4a65      	ldr	r2, [pc, #404]	@ (80093f8 <HAL_RCC_OscConfig+0x4ac>)
 8009262:	f043 0301 	orr.w	r3, r3, #1
 8009266:	6713      	str	r3, [r2, #112]	@ 0x70
 8009268:	e01c      	b.n	80092a4 <HAL_RCC_OscConfig+0x358>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	689b      	ldr	r3, [r3, #8]
 800926e:	2b05      	cmp	r3, #5
 8009270:	d10c      	bne.n	800928c <HAL_RCC_OscConfig+0x340>
 8009272:	4b61      	ldr	r3, [pc, #388]	@ (80093f8 <HAL_RCC_OscConfig+0x4ac>)
 8009274:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009276:	4a60      	ldr	r2, [pc, #384]	@ (80093f8 <HAL_RCC_OscConfig+0x4ac>)
 8009278:	f043 0304 	orr.w	r3, r3, #4
 800927c:	6713      	str	r3, [r2, #112]	@ 0x70
 800927e:	4b5e      	ldr	r3, [pc, #376]	@ (80093f8 <HAL_RCC_OscConfig+0x4ac>)
 8009280:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009282:	4a5d      	ldr	r2, [pc, #372]	@ (80093f8 <HAL_RCC_OscConfig+0x4ac>)
 8009284:	f043 0301 	orr.w	r3, r3, #1
 8009288:	6713      	str	r3, [r2, #112]	@ 0x70
 800928a:	e00b      	b.n	80092a4 <HAL_RCC_OscConfig+0x358>
 800928c:	4b5a      	ldr	r3, [pc, #360]	@ (80093f8 <HAL_RCC_OscConfig+0x4ac>)
 800928e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009290:	4a59      	ldr	r2, [pc, #356]	@ (80093f8 <HAL_RCC_OscConfig+0x4ac>)
 8009292:	f023 0301 	bic.w	r3, r3, #1
 8009296:	6713      	str	r3, [r2, #112]	@ 0x70
 8009298:	4b57      	ldr	r3, [pc, #348]	@ (80093f8 <HAL_RCC_OscConfig+0x4ac>)
 800929a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800929c:	4a56      	ldr	r2, [pc, #344]	@ (80093f8 <HAL_RCC_OscConfig+0x4ac>)
 800929e:	f023 0304 	bic.w	r3, r3, #4
 80092a2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	689b      	ldr	r3, [r3, #8]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d015      	beq.n	80092d8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092ac:	f7fc fe90 	bl	8005fd0 <HAL_GetTick>
 80092b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80092b2:	e00a      	b.n	80092ca <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80092b4:	f7fc fe8c 	bl	8005fd0 <HAL_GetTick>
 80092b8:	4602      	mov	r2, r0
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	1ad3      	subs	r3, r2, r3
 80092be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d901      	bls.n	80092ca <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80092c6:	2303      	movs	r3, #3
 80092c8:	e0d7      	b.n	800947a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80092ca:	4b4b      	ldr	r3, [pc, #300]	@ (80093f8 <HAL_RCC_OscConfig+0x4ac>)
 80092cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092ce:	f003 0302 	and.w	r3, r3, #2
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d0ee      	beq.n	80092b4 <HAL_RCC_OscConfig+0x368>
 80092d6:	e014      	b.n	8009302 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092d8:	f7fc fe7a 	bl	8005fd0 <HAL_GetTick>
 80092dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80092de:	e00a      	b.n	80092f6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80092e0:	f7fc fe76 	bl	8005fd0 <HAL_GetTick>
 80092e4:	4602      	mov	r2, r0
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	1ad3      	subs	r3, r2, r3
 80092ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d901      	bls.n	80092f6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80092f2:	2303      	movs	r3, #3
 80092f4:	e0c1      	b.n	800947a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80092f6:	4b40      	ldr	r3, [pc, #256]	@ (80093f8 <HAL_RCC_OscConfig+0x4ac>)
 80092f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092fa:	f003 0302 	and.w	r3, r3, #2
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d1ee      	bne.n	80092e0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009302:	7dfb      	ldrb	r3, [r7, #23]
 8009304:	2b01      	cmp	r3, #1
 8009306:	d105      	bne.n	8009314 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009308:	4b3b      	ldr	r3, [pc, #236]	@ (80093f8 <HAL_RCC_OscConfig+0x4ac>)
 800930a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800930c:	4a3a      	ldr	r2, [pc, #232]	@ (80093f8 <HAL_RCC_OscConfig+0x4ac>)
 800930e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009312:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	699b      	ldr	r3, [r3, #24]
 8009318:	2b00      	cmp	r3, #0
 800931a:	f000 80ad 	beq.w	8009478 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800931e:	4b36      	ldr	r3, [pc, #216]	@ (80093f8 <HAL_RCC_OscConfig+0x4ac>)
 8009320:	689b      	ldr	r3, [r3, #8]
 8009322:	f003 030c 	and.w	r3, r3, #12
 8009326:	2b08      	cmp	r3, #8
 8009328:	d060      	beq.n	80093ec <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	699b      	ldr	r3, [r3, #24]
 800932e:	2b02      	cmp	r3, #2
 8009330:	d145      	bne.n	80093be <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009332:	4b33      	ldr	r3, [pc, #204]	@ (8009400 <HAL_RCC_OscConfig+0x4b4>)
 8009334:	2200      	movs	r2, #0
 8009336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009338:	f7fc fe4a 	bl	8005fd0 <HAL_GetTick>
 800933c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800933e:	e008      	b.n	8009352 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009340:	f7fc fe46 	bl	8005fd0 <HAL_GetTick>
 8009344:	4602      	mov	r2, r0
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	1ad3      	subs	r3, r2, r3
 800934a:	2b02      	cmp	r3, #2
 800934c:	d901      	bls.n	8009352 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800934e:	2303      	movs	r3, #3
 8009350:	e093      	b.n	800947a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009352:	4b29      	ldr	r3, [pc, #164]	@ (80093f8 <HAL_RCC_OscConfig+0x4ac>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800935a:	2b00      	cmp	r3, #0
 800935c:	d1f0      	bne.n	8009340 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	69da      	ldr	r2, [r3, #28]
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6a1b      	ldr	r3, [r3, #32]
 8009366:	431a      	orrs	r2, r3
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800936c:	019b      	lsls	r3, r3, #6
 800936e:	431a      	orrs	r2, r3
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009374:	085b      	lsrs	r3, r3, #1
 8009376:	3b01      	subs	r3, #1
 8009378:	041b      	lsls	r3, r3, #16
 800937a:	431a      	orrs	r2, r3
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009380:	061b      	lsls	r3, r3, #24
 8009382:	431a      	orrs	r2, r3
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009388:	071b      	lsls	r3, r3, #28
 800938a:	491b      	ldr	r1, [pc, #108]	@ (80093f8 <HAL_RCC_OscConfig+0x4ac>)
 800938c:	4313      	orrs	r3, r2
 800938e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009390:	4b1b      	ldr	r3, [pc, #108]	@ (8009400 <HAL_RCC_OscConfig+0x4b4>)
 8009392:	2201      	movs	r2, #1
 8009394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009396:	f7fc fe1b 	bl	8005fd0 <HAL_GetTick>
 800939a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800939c:	e008      	b.n	80093b0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800939e:	f7fc fe17 	bl	8005fd0 <HAL_GetTick>
 80093a2:	4602      	mov	r2, r0
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	1ad3      	subs	r3, r2, r3
 80093a8:	2b02      	cmp	r3, #2
 80093aa:	d901      	bls.n	80093b0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80093ac:	2303      	movs	r3, #3
 80093ae:	e064      	b.n	800947a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80093b0:	4b11      	ldr	r3, [pc, #68]	@ (80093f8 <HAL_RCC_OscConfig+0x4ac>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d0f0      	beq.n	800939e <HAL_RCC_OscConfig+0x452>
 80093bc:	e05c      	b.n	8009478 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80093be:	4b10      	ldr	r3, [pc, #64]	@ (8009400 <HAL_RCC_OscConfig+0x4b4>)
 80093c0:	2200      	movs	r2, #0
 80093c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093c4:	f7fc fe04 	bl	8005fd0 <HAL_GetTick>
 80093c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80093ca:	e008      	b.n	80093de <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80093cc:	f7fc fe00 	bl	8005fd0 <HAL_GetTick>
 80093d0:	4602      	mov	r2, r0
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	1ad3      	subs	r3, r2, r3
 80093d6:	2b02      	cmp	r3, #2
 80093d8:	d901      	bls.n	80093de <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80093da:	2303      	movs	r3, #3
 80093dc:	e04d      	b.n	800947a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80093de:	4b06      	ldr	r3, [pc, #24]	@ (80093f8 <HAL_RCC_OscConfig+0x4ac>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d1f0      	bne.n	80093cc <HAL_RCC_OscConfig+0x480>
 80093ea:	e045      	b.n	8009478 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	699b      	ldr	r3, [r3, #24]
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	d107      	bne.n	8009404 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80093f4:	2301      	movs	r3, #1
 80093f6:	e040      	b.n	800947a <HAL_RCC_OscConfig+0x52e>
 80093f8:	40023800 	.word	0x40023800
 80093fc:	40007000 	.word	0x40007000
 8009400:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009404:	4b1f      	ldr	r3, [pc, #124]	@ (8009484 <HAL_RCC_OscConfig+0x538>)
 8009406:	685b      	ldr	r3, [r3, #4]
 8009408:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	699b      	ldr	r3, [r3, #24]
 800940e:	2b01      	cmp	r3, #1
 8009410:	d030      	beq.n	8009474 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800941c:	429a      	cmp	r2, r3
 800941e:	d129      	bne.n	8009474 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800942a:	429a      	cmp	r2, r3
 800942c:	d122      	bne.n	8009474 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800942e:	68fa      	ldr	r2, [r7, #12]
 8009430:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8009434:	4013      	ands	r3, r2
 8009436:	687a      	ldr	r2, [r7, #4]
 8009438:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800943a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800943c:	4293      	cmp	r3, r2
 800943e:	d119      	bne.n	8009474 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800944a:	085b      	lsrs	r3, r3, #1
 800944c:	3b01      	subs	r3, #1
 800944e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009450:	429a      	cmp	r2, r3
 8009452:	d10f      	bne.n	8009474 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800945e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009460:	429a      	cmp	r2, r3
 8009462:	d107      	bne.n	8009474 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800946e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009470:	429a      	cmp	r2, r3
 8009472:	d001      	beq.n	8009478 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8009474:	2301      	movs	r3, #1
 8009476:	e000      	b.n	800947a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8009478:	2300      	movs	r3, #0
}
 800947a:	4618      	mov	r0, r3
 800947c:	3718      	adds	r7, #24
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}
 8009482:	bf00      	nop
 8009484:	40023800 	.word	0x40023800

08009488 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b082      	sub	sp, #8
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d101      	bne.n	800949a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009496:	2301      	movs	r3, #1
 8009498:	e07b      	b.n	8009592 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d108      	bne.n	80094b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	685b      	ldr	r3, [r3, #4]
 80094a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80094aa:	d009      	beq.n	80094c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2200      	movs	r2, #0
 80094b0:	61da      	str	r2, [r3, #28]
 80094b2:	e005      	b.n	80094c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2200      	movs	r2, #0
 80094b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2200      	movs	r2, #0
 80094be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2200      	movs	r2, #0
 80094c4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80094cc:	b2db      	uxtb	r3, r3
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d106      	bne.n	80094e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2200      	movs	r2, #0
 80094d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f7fc f982 	bl	80057e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2202      	movs	r2, #2
 80094e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	681a      	ldr	r2, [r3, #0]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80094f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	685b      	ldr	r3, [r3, #4]
 80094fc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	689b      	ldr	r3, [r3, #8]
 8009504:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009508:	431a      	orrs	r2, r3
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	68db      	ldr	r3, [r3, #12]
 800950e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009512:	431a      	orrs	r2, r3
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	691b      	ldr	r3, [r3, #16]
 8009518:	f003 0302 	and.w	r3, r3, #2
 800951c:	431a      	orrs	r2, r3
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	695b      	ldr	r3, [r3, #20]
 8009522:	f003 0301 	and.w	r3, r3, #1
 8009526:	431a      	orrs	r2, r3
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	699b      	ldr	r3, [r3, #24]
 800952c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009530:	431a      	orrs	r2, r3
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	69db      	ldr	r3, [r3, #28]
 8009536:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800953a:	431a      	orrs	r2, r3
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6a1b      	ldr	r3, [r3, #32]
 8009540:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009544:	ea42 0103 	orr.w	r1, r2, r3
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800954c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	430a      	orrs	r2, r1
 8009556:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	699b      	ldr	r3, [r3, #24]
 800955c:	0c1b      	lsrs	r3, r3, #16
 800955e:	f003 0104 	and.w	r1, r3, #4
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009566:	f003 0210 	and.w	r2, r3, #16
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	430a      	orrs	r2, r1
 8009570:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	69da      	ldr	r2, [r3, #28]
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009580:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2200      	movs	r2, #0
 8009586:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2201      	movs	r2, #1
 800958c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8009590:	2300      	movs	r3, #0
}
 8009592:	4618      	mov	r0, r3
 8009594:	3708      	adds	r7, #8
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}

0800959a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800959a:	b580      	push	{r7, lr}
 800959c:	b082      	sub	sp, #8
 800959e:	af00      	add	r7, sp, #0
 80095a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d101      	bne.n	80095ac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80095a8:	2301      	movs	r3, #1
 80095aa:	e041      	b.n	8009630 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80095b2:	b2db      	uxtb	r3, r3
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d106      	bne.n	80095c6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2200      	movs	r2, #0
 80095bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f7fc f957 	bl	8005874 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2202      	movs	r2, #2
 80095ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681a      	ldr	r2, [r3, #0]
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	3304      	adds	r3, #4
 80095d6:	4619      	mov	r1, r3
 80095d8:	4610      	mov	r0, r2
 80095da:	f000 fb2b 	bl	8009c34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2201      	movs	r2, #1
 80095e2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2201      	movs	r2, #1
 80095ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2201      	movs	r2, #1
 80095f2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2201      	movs	r2, #1
 80095fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2201      	movs	r2, #1
 8009602:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2201      	movs	r2, #1
 800960a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2201      	movs	r2, #1
 8009612:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2201      	movs	r2, #1
 800961a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2201      	movs	r2, #1
 8009622:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2201      	movs	r2, #1
 800962a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800962e:	2300      	movs	r3, #0
}
 8009630:	4618      	mov	r0, r3
 8009632:	3708      	adds	r7, #8
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}

08009638 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009638:	b480      	push	{r7}
 800963a:	b085      	sub	sp, #20
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009646:	b2db      	uxtb	r3, r3
 8009648:	2b01      	cmp	r3, #1
 800964a:	d001      	beq.n	8009650 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800964c:	2301      	movs	r3, #1
 800964e:	e046      	b.n	80096de <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2202      	movs	r2, #2
 8009654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4a23      	ldr	r2, [pc, #140]	@ (80096ec <HAL_TIM_Base_Start+0xb4>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d022      	beq.n	80096a8 <HAL_TIM_Base_Start+0x70>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800966a:	d01d      	beq.n	80096a8 <HAL_TIM_Base_Start+0x70>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	4a1f      	ldr	r2, [pc, #124]	@ (80096f0 <HAL_TIM_Base_Start+0xb8>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d018      	beq.n	80096a8 <HAL_TIM_Base_Start+0x70>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	4a1e      	ldr	r2, [pc, #120]	@ (80096f4 <HAL_TIM_Base_Start+0xbc>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d013      	beq.n	80096a8 <HAL_TIM_Base_Start+0x70>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	4a1c      	ldr	r2, [pc, #112]	@ (80096f8 <HAL_TIM_Base_Start+0xc0>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d00e      	beq.n	80096a8 <HAL_TIM_Base_Start+0x70>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	4a1b      	ldr	r2, [pc, #108]	@ (80096fc <HAL_TIM_Base_Start+0xc4>)
 8009690:	4293      	cmp	r3, r2
 8009692:	d009      	beq.n	80096a8 <HAL_TIM_Base_Start+0x70>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	4a19      	ldr	r2, [pc, #100]	@ (8009700 <HAL_TIM_Base_Start+0xc8>)
 800969a:	4293      	cmp	r3, r2
 800969c:	d004      	beq.n	80096a8 <HAL_TIM_Base_Start+0x70>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	4a18      	ldr	r2, [pc, #96]	@ (8009704 <HAL_TIM_Base_Start+0xcc>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d111      	bne.n	80096cc <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	689b      	ldr	r3, [r3, #8]
 80096ae:	f003 0307 	and.w	r3, r3, #7
 80096b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	2b06      	cmp	r3, #6
 80096b8:	d010      	beq.n	80096dc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	681a      	ldr	r2, [r3, #0]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f042 0201 	orr.w	r2, r2, #1
 80096c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096ca:	e007      	b.n	80096dc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	681a      	ldr	r2, [r3, #0]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f042 0201 	orr.w	r2, r2, #1
 80096da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80096dc:	2300      	movs	r3, #0
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3714      	adds	r7, #20
 80096e2:	46bd      	mov	sp, r7
 80096e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e8:	4770      	bx	lr
 80096ea:	bf00      	nop
 80096ec:	40010000 	.word	0x40010000
 80096f0:	40000400 	.word	0x40000400
 80096f4:	40000800 	.word	0x40000800
 80096f8:	40000c00 	.word	0x40000c00
 80096fc:	40010400 	.word	0x40010400
 8009700:	40014000 	.word	0x40014000
 8009704:	40001800 	.word	0x40001800

08009708 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009708:	b480      	push	{r7}
 800970a:	b085      	sub	sp, #20
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009716:	b2db      	uxtb	r3, r3
 8009718:	2b01      	cmp	r3, #1
 800971a:	d001      	beq.n	8009720 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800971c:	2301      	movs	r3, #1
 800971e:	e04e      	b.n	80097be <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2202      	movs	r2, #2
 8009724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	68da      	ldr	r2, [r3, #12]
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f042 0201 	orr.w	r2, r2, #1
 8009736:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	4a23      	ldr	r2, [pc, #140]	@ (80097cc <HAL_TIM_Base_Start_IT+0xc4>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d022      	beq.n	8009788 <HAL_TIM_Base_Start_IT+0x80>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800974a:	d01d      	beq.n	8009788 <HAL_TIM_Base_Start_IT+0x80>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4a1f      	ldr	r2, [pc, #124]	@ (80097d0 <HAL_TIM_Base_Start_IT+0xc8>)
 8009752:	4293      	cmp	r3, r2
 8009754:	d018      	beq.n	8009788 <HAL_TIM_Base_Start_IT+0x80>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	4a1e      	ldr	r2, [pc, #120]	@ (80097d4 <HAL_TIM_Base_Start_IT+0xcc>)
 800975c:	4293      	cmp	r3, r2
 800975e:	d013      	beq.n	8009788 <HAL_TIM_Base_Start_IT+0x80>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	4a1c      	ldr	r2, [pc, #112]	@ (80097d8 <HAL_TIM_Base_Start_IT+0xd0>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d00e      	beq.n	8009788 <HAL_TIM_Base_Start_IT+0x80>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	4a1b      	ldr	r2, [pc, #108]	@ (80097dc <HAL_TIM_Base_Start_IT+0xd4>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d009      	beq.n	8009788 <HAL_TIM_Base_Start_IT+0x80>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	4a19      	ldr	r2, [pc, #100]	@ (80097e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d004      	beq.n	8009788 <HAL_TIM_Base_Start_IT+0x80>
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	4a18      	ldr	r2, [pc, #96]	@ (80097e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8009784:	4293      	cmp	r3, r2
 8009786:	d111      	bne.n	80097ac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	689b      	ldr	r3, [r3, #8]
 800978e:	f003 0307 	and.w	r3, r3, #7
 8009792:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	2b06      	cmp	r3, #6
 8009798:	d010      	beq.n	80097bc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	681a      	ldr	r2, [r3, #0]
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f042 0201 	orr.w	r2, r2, #1
 80097a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097aa:	e007      	b.n	80097bc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	681a      	ldr	r2, [r3, #0]
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f042 0201 	orr.w	r2, r2, #1
 80097ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80097bc:	2300      	movs	r3, #0
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3714      	adds	r7, #20
 80097c2:	46bd      	mov	sp, r7
 80097c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c8:	4770      	bx	lr
 80097ca:	bf00      	nop
 80097cc:	40010000 	.word	0x40010000
 80097d0:	40000400 	.word	0x40000400
 80097d4:	40000800 	.word	0x40000800
 80097d8:	40000c00 	.word	0x40000c00
 80097dc:	40010400 	.word	0x40010400
 80097e0:	40014000 	.word	0x40014000
 80097e4:	40001800 	.word	0x40001800

080097e8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80097e8:	b480      	push	{r7}
 80097ea:	b083      	sub	sp, #12
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	68da      	ldr	r2, [r3, #12]
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f022 0201 	bic.w	r2, r2, #1
 80097fe:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	6a1a      	ldr	r2, [r3, #32]
 8009806:	f241 1311 	movw	r3, #4369	@ 0x1111
 800980a:	4013      	ands	r3, r2
 800980c:	2b00      	cmp	r3, #0
 800980e:	d10f      	bne.n	8009830 <HAL_TIM_Base_Stop_IT+0x48>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	6a1a      	ldr	r2, [r3, #32]
 8009816:	f240 4344 	movw	r3, #1092	@ 0x444
 800981a:	4013      	ands	r3, r2
 800981c:	2b00      	cmp	r3, #0
 800981e:	d107      	bne.n	8009830 <HAL_TIM_Base_Stop_IT+0x48>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	681a      	ldr	r2, [r3, #0]
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f022 0201 	bic.w	r2, r2, #1
 800982e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2201      	movs	r2, #1
 8009834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8009838:	2300      	movs	r3, #0
}
 800983a:	4618      	mov	r0, r3
 800983c:	370c      	adds	r7, #12
 800983e:	46bd      	mov	sp, r7
 8009840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009844:	4770      	bx	lr

08009846 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009846:	b580      	push	{r7, lr}
 8009848:	b082      	sub	sp, #8
 800984a:	af00      	add	r7, sp, #0
 800984c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	691b      	ldr	r3, [r3, #16]
 8009854:	f003 0302 	and.w	r3, r3, #2
 8009858:	2b02      	cmp	r3, #2
 800985a:	d122      	bne.n	80098a2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	68db      	ldr	r3, [r3, #12]
 8009862:	f003 0302 	and.w	r3, r3, #2
 8009866:	2b02      	cmp	r3, #2
 8009868:	d11b      	bne.n	80098a2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f06f 0202 	mvn.w	r2, #2
 8009872:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2201      	movs	r2, #1
 8009878:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	699b      	ldr	r3, [r3, #24]
 8009880:	f003 0303 	and.w	r3, r3, #3
 8009884:	2b00      	cmp	r3, #0
 8009886:	d003      	beq.n	8009890 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f000 f9b5 	bl	8009bf8 <HAL_TIM_IC_CaptureCallback>
 800988e:	e005      	b.n	800989c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f000 f9a7 	bl	8009be4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f000 f9b8 	bl	8009c0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2200      	movs	r2, #0
 80098a0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	691b      	ldr	r3, [r3, #16]
 80098a8:	f003 0304 	and.w	r3, r3, #4
 80098ac:	2b04      	cmp	r3, #4
 80098ae:	d122      	bne.n	80098f6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	68db      	ldr	r3, [r3, #12]
 80098b6:	f003 0304 	and.w	r3, r3, #4
 80098ba:	2b04      	cmp	r3, #4
 80098bc:	d11b      	bne.n	80098f6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f06f 0204 	mvn.w	r2, #4
 80098c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2202      	movs	r2, #2
 80098cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	699b      	ldr	r3, [r3, #24]
 80098d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d003      	beq.n	80098e4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f000 f98b 	bl	8009bf8 <HAL_TIM_IC_CaptureCallback>
 80098e2:	e005      	b.n	80098f0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f000 f97d 	bl	8009be4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f000 f98e 	bl	8009c0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2200      	movs	r2, #0
 80098f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	691b      	ldr	r3, [r3, #16]
 80098fc:	f003 0308 	and.w	r3, r3, #8
 8009900:	2b08      	cmp	r3, #8
 8009902:	d122      	bne.n	800994a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	68db      	ldr	r3, [r3, #12]
 800990a:	f003 0308 	and.w	r3, r3, #8
 800990e:	2b08      	cmp	r3, #8
 8009910:	d11b      	bne.n	800994a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f06f 0208 	mvn.w	r2, #8
 800991a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2204      	movs	r2, #4
 8009920:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	69db      	ldr	r3, [r3, #28]
 8009928:	f003 0303 	and.w	r3, r3, #3
 800992c:	2b00      	cmp	r3, #0
 800992e:	d003      	beq.n	8009938 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f000 f961 	bl	8009bf8 <HAL_TIM_IC_CaptureCallback>
 8009936:	e005      	b.n	8009944 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f000 f953 	bl	8009be4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f000 f964 	bl	8009c0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2200      	movs	r2, #0
 8009948:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	691b      	ldr	r3, [r3, #16]
 8009950:	f003 0310 	and.w	r3, r3, #16
 8009954:	2b10      	cmp	r3, #16
 8009956:	d122      	bne.n	800999e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	68db      	ldr	r3, [r3, #12]
 800995e:	f003 0310 	and.w	r3, r3, #16
 8009962:	2b10      	cmp	r3, #16
 8009964:	d11b      	bne.n	800999e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f06f 0210 	mvn.w	r2, #16
 800996e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2208      	movs	r2, #8
 8009974:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	69db      	ldr	r3, [r3, #28]
 800997c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009980:	2b00      	cmp	r3, #0
 8009982:	d003      	beq.n	800998c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f000 f937 	bl	8009bf8 <HAL_TIM_IC_CaptureCallback>
 800998a:	e005      	b.n	8009998 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f000 f929 	bl	8009be4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 f93a 	bl	8009c0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2200      	movs	r2, #0
 800999c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	691b      	ldr	r3, [r3, #16]
 80099a4:	f003 0301 	and.w	r3, r3, #1
 80099a8:	2b01      	cmp	r3, #1
 80099aa:	d10e      	bne.n	80099ca <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	68db      	ldr	r3, [r3, #12]
 80099b2:	f003 0301 	and.w	r3, r3, #1
 80099b6:	2b01      	cmp	r3, #1
 80099b8:	d107      	bne.n	80099ca <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f06f 0201 	mvn.w	r2, #1
 80099c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f7f9 fead 	bl	8003724 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	691b      	ldr	r3, [r3, #16]
 80099d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099d4:	2b80      	cmp	r3, #128	@ 0x80
 80099d6:	d10e      	bne.n	80099f6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	68db      	ldr	r3, [r3, #12]
 80099de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099e2:	2b80      	cmp	r3, #128	@ 0x80
 80099e4:	d107      	bne.n	80099f6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80099ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f000 fadf 	bl	8009fb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	691b      	ldr	r3, [r3, #16]
 80099fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a00:	2b40      	cmp	r3, #64	@ 0x40
 8009a02:	d10e      	bne.n	8009a22 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	68db      	ldr	r3, [r3, #12]
 8009a0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a0e:	2b40      	cmp	r3, #64	@ 0x40
 8009a10:	d107      	bne.n	8009a22 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009a1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f000 f8ff 	bl	8009c20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	691b      	ldr	r3, [r3, #16]
 8009a28:	f003 0320 	and.w	r3, r3, #32
 8009a2c:	2b20      	cmp	r3, #32
 8009a2e:	d10e      	bne.n	8009a4e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	68db      	ldr	r3, [r3, #12]
 8009a36:	f003 0320 	and.w	r3, r3, #32
 8009a3a:	2b20      	cmp	r3, #32
 8009a3c:	d107      	bne.n	8009a4e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f06f 0220 	mvn.w	r2, #32
 8009a46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f000 faa9 	bl	8009fa0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009a4e:	bf00      	nop
 8009a50:	3708      	adds	r7, #8
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}

08009a56 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009a56:	b580      	push	{r7, lr}
 8009a58:	b084      	sub	sp, #16
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	6078      	str	r0, [r7, #4]
 8009a5e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009a60:	2300      	movs	r3, #0
 8009a62:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009a6a:	2b01      	cmp	r3, #1
 8009a6c:	d101      	bne.n	8009a72 <HAL_TIM_ConfigClockSource+0x1c>
 8009a6e:	2302      	movs	r3, #2
 8009a70:	e0b4      	b.n	8009bdc <HAL_TIM_ConfigClockSource+0x186>
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2201      	movs	r2, #1
 8009a76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2202      	movs	r2, #2
 8009a7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	689b      	ldr	r3, [r3, #8]
 8009a88:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009a90:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009a98:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	68ba      	ldr	r2, [r7, #8]
 8009aa0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009aaa:	d03e      	beq.n	8009b2a <HAL_TIM_ConfigClockSource+0xd4>
 8009aac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ab0:	f200 8087 	bhi.w	8009bc2 <HAL_TIM_ConfigClockSource+0x16c>
 8009ab4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ab8:	f000 8086 	beq.w	8009bc8 <HAL_TIM_ConfigClockSource+0x172>
 8009abc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ac0:	d87f      	bhi.n	8009bc2 <HAL_TIM_ConfigClockSource+0x16c>
 8009ac2:	2b70      	cmp	r3, #112	@ 0x70
 8009ac4:	d01a      	beq.n	8009afc <HAL_TIM_ConfigClockSource+0xa6>
 8009ac6:	2b70      	cmp	r3, #112	@ 0x70
 8009ac8:	d87b      	bhi.n	8009bc2 <HAL_TIM_ConfigClockSource+0x16c>
 8009aca:	2b60      	cmp	r3, #96	@ 0x60
 8009acc:	d050      	beq.n	8009b70 <HAL_TIM_ConfigClockSource+0x11a>
 8009ace:	2b60      	cmp	r3, #96	@ 0x60
 8009ad0:	d877      	bhi.n	8009bc2 <HAL_TIM_ConfigClockSource+0x16c>
 8009ad2:	2b50      	cmp	r3, #80	@ 0x50
 8009ad4:	d03c      	beq.n	8009b50 <HAL_TIM_ConfigClockSource+0xfa>
 8009ad6:	2b50      	cmp	r3, #80	@ 0x50
 8009ad8:	d873      	bhi.n	8009bc2 <HAL_TIM_ConfigClockSource+0x16c>
 8009ada:	2b40      	cmp	r3, #64	@ 0x40
 8009adc:	d058      	beq.n	8009b90 <HAL_TIM_ConfigClockSource+0x13a>
 8009ade:	2b40      	cmp	r3, #64	@ 0x40
 8009ae0:	d86f      	bhi.n	8009bc2 <HAL_TIM_ConfigClockSource+0x16c>
 8009ae2:	2b30      	cmp	r3, #48	@ 0x30
 8009ae4:	d064      	beq.n	8009bb0 <HAL_TIM_ConfigClockSource+0x15a>
 8009ae6:	2b30      	cmp	r3, #48	@ 0x30
 8009ae8:	d86b      	bhi.n	8009bc2 <HAL_TIM_ConfigClockSource+0x16c>
 8009aea:	2b20      	cmp	r3, #32
 8009aec:	d060      	beq.n	8009bb0 <HAL_TIM_ConfigClockSource+0x15a>
 8009aee:	2b20      	cmp	r3, #32
 8009af0:	d867      	bhi.n	8009bc2 <HAL_TIM_ConfigClockSource+0x16c>
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d05c      	beq.n	8009bb0 <HAL_TIM_ConfigClockSource+0x15a>
 8009af6:	2b10      	cmp	r3, #16
 8009af8:	d05a      	beq.n	8009bb0 <HAL_TIM_ConfigClockSource+0x15a>
 8009afa:	e062      	b.n	8009bc2 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6818      	ldr	r0, [r3, #0]
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	6899      	ldr	r1, [r3, #8]
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	685a      	ldr	r2, [r3, #4]
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	68db      	ldr	r3, [r3, #12]
 8009b0c:	f000 f9ac 	bl	8009e68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	689b      	ldr	r3, [r3, #8]
 8009b16:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009b1e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	68ba      	ldr	r2, [r7, #8]
 8009b26:	609a      	str	r2, [r3, #8]
      break;
 8009b28:	e04f      	b.n	8009bca <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6818      	ldr	r0, [r3, #0]
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	6899      	ldr	r1, [r3, #8]
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	685a      	ldr	r2, [r3, #4]
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	68db      	ldr	r3, [r3, #12]
 8009b3a:	f000 f995 	bl	8009e68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	689a      	ldr	r2, [r3, #8]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009b4c:	609a      	str	r2, [r3, #8]
      break;
 8009b4e:	e03c      	b.n	8009bca <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6818      	ldr	r0, [r3, #0]
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	6859      	ldr	r1, [r3, #4]
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	68db      	ldr	r3, [r3, #12]
 8009b5c:	461a      	mov	r2, r3
 8009b5e:	f000 f909 	bl	8009d74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	2150      	movs	r1, #80	@ 0x50
 8009b68:	4618      	mov	r0, r3
 8009b6a:	f000 f962 	bl	8009e32 <TIM_ITRx_SetConfig>
      break;
 8009b6e:	e02c      	b.n	8009bca <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6818      	ldr	r0, [r3, #0]
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	6859      	ldr	r1, [r3, #4]
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	68db      	ldr	r3, [r3, #12]
 8009b7c:	461a      	mov	r2, r3
 8009b7e:	f000 f928 	bl	8009dd2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	2160      	movs	r1, #96	@ 0x60
 8009b88:	4618      	mov	r0, r3
 8009b8a:	f000 f952 	bl	8009e32 <TIM_ITRx_SetConfig>
      break;
 8009b8e:	e01c      	b.n	8009bca <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6818      	ldr	r0, [r3, #0]
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	6859      	ldr	r1, [r3, #4]
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	68db      	ldr	r3, [r3, #12]
 8009b9c:	461a      	mov	r2, r3
 8009b9e:	f000 f8e9 	bl	8009d74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	2140      	movs	r1, #64	@ 0x40
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f000 f942 	bl	8009e32 <TIM_ITRx_SetConfig>
      break;
 8009bae:	e00c      	b.n	8009bca <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681a      	ldr	r2, [r3, #0]
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	4619      	mov	r1, r3
 8009bba:	4610      	mov	r0, r2
 8009bbc:	f000 f939 	bl	8009e32 <TIM_ITRx_SetConfig>
      break;
 8009bc0:	e003      	b.n	8009bca <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	73fb      	strb	r3, [r7, #15]
      break;
 8009bc6:	e000      	b.n	8009bca <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009bc8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2201      	movs	r2, #1
 8009bce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	3710      	adds	r7, #16
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}

08009be4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009be4:	b480      	push	{r7}
 8009be6:	b083      	sub	sp, #12
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009bec:	bf00      	nop
 8009bee:	370c      	adds	r7, #12
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf6:	4770      	bx	lr

08009bf8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b083      	sub	sp, #12
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009c00:	bf00      	nop
 8009c02:	370c      	adds	r7, #12
 8009c04:	46bd      	mov	sp, r7
 8009c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0a:	4770      	bx	lr

08009c0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b083      	sub	sp, #12
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009c14:	bf00      	nop
 8009c16:	370c      	adds	r7, #12
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	4770      	bx	lr

08009c20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009c20:	b480      	push	{r7}
 8009c22:	b083      	sub	sp, #12
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009c28:	bf00      	nop
 8009c2a:	370c      	adds	r7, #12
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c32:	4770      	bx	lr

08009c34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009c34:	b480      	push	{r7}
 8009c36:	b085      	sub	sp, #20
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
 8009c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	4a40      	ldr	r2, [pc, #256]	@ (8009d48 <TIM_Base_SetConfig+0x114>)
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	d013      	beq.n	8009c74 <TIM_Base_SetConfig+0x40>
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c52:	d00f      	beq.n	8009c74 <TIM_Base_SetConfig+0x40>
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	4a3d      	ldr	r2, [pc, #244]	@ (8009d4c <TIM_Base_SetConfig+0x118>)
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	d00b      	beq.n	8009c74 <TIM_Base_SetConfig+0x40>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	4a3c      	ldr	r2, [pc, #240]	@ (8009d50 <TIM_Base_SetConfig+0x11c>)
 8009c60:	4293      	cmp	r3, r2
 8009c62:	d007      	beq.n	8009c74 <TIM_Base_SetConfig+0x40>
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	4a3b      	ldr	r2, [pc, #236]	@ (8009d54 <TIM_Base_SetConfig+0x120>)
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d003      	beq.n	8009c74 <TIM_Base_SetConfig+0x40>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	4a3a      	ldr	r2, [pc, #232]	@ (8009d58 <TIM_Base_SetConfig+0x124>)
 8009c70:	4293      	cmp	r3, r2
 8009c72:	d108      	bne.n	8009c86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	685b      	ldr	r3, [r3, #4]
 8009c80:	68fa      	ldr	r2, [r7, #12]
 8009c82:	4313      	orrs	r3, r2
 8009c84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	4a2f      	ldr	r2, [pc, #188]	@ (8009d48 <TIM_Base_SetConfig+0x114>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d02b      	beq.n	8009ce6 <TIM_Base_SetConfig+0xb2>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c94:	d027      	beq.n	8009ce6 <TIM_Base_SetConfig+0xb2>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	4a2c      	ldr	r2, [pc, #176]	@ (8009d4c <TIM_Base_SetConfig+0x118>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d023      	beq.n	8009ce6 <TIM_Base_SetConfig+0xb2>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	4a2b      	ldr	r2, [pc, #172]	@ (8009d50 <TIM_Base_SetConfig+0x11c>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d01f      	beq.n	8009ce6 <TIM_Base_SetConfig+0xb2>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	4a2a      	ldr	r2, [pc, #168]	@ (8009d54 <TIM_Base_SetConfig+0x120>)
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d01b      	beq.n	8009ce6 <TIM_Base_SetConfig+0xb2>
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	4a29      	ldr	r2, [pc, #164]	@ (8009d58 <TIM_Base_SetConfig+0x124>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d017      	beq.n	8009ce6 <TIM_Base_SetConfig+0xb2>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	4a28      	ldr	r2, [pc, #160]	@ (8009d5c <TIM_Base_SetConfig+0x128>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d013      	beq.n	8009ce6 <TIM_Base_SetConfig+0xb2>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	4a27      	ldr	r2, [pc, #156]	@ (8009d60 <TIM_Base_SetConfig+0x12c>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d00f      	beq.n	8009ce6 <TIM_Base_SetConfig+0xb2>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	4a26      	ldr	r2, [pc, #152]	@ (8009d64 <TIM_Base_SetConfig+0x130>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d00b      	beq.n	8009ce6 <TIM_Base_SetConfig+0xb2>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	4a25      	ldr	r2, [pc, #148]	@ (8009d68 <TIM_Base_SetConfig+0x134>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d007      	beq.n	8009ce6 <TIM_Base_SetConfig+0xb2>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	4a24      	ldr	r2, [pc, #144]	@ (8009d6c <TIM_Base_SetConfig+0x138>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d003      	beq.n	8009ce6 <TIM_Base_SetConfig+0xb2>
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	4a23      	ldr	r2, [pc, #140]	@ (8009d70 <TIM_Base_SetConfig+0x13c>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d108      	bne.n	8009cf8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009cec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	68db      	ldr	r3, [r3, #12]
 8009cf2:	68fa      	ldr	r2, [r7, #12]
 8009cf4:	4313      	orrs	r3, r2
 8009cf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	695b      	ldr	r3, [r3, #20]
 8009d02:	4313      	orrs	r3, r2
 8009d04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	68fa      	ldr	r2, [r7, #12]
 8009d0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	689a      	ldr	r2, [r3, #8]
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	681a      	ldr	r2, [r3, #0]
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	4a0a      	ldr	r2, [pc, #40]	@ (8009d48 <TIM_Base_SetConfig+0x114>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d003      	beq.n	8009d2c <TIM_Base_SetConfig+0xf8>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	4a0c      	ldr	r2, [pc, #48]	@ (8009d58 <TIM_Base_SetConfig+0x124>)
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d103      	bne.n	8009d34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	691a      	ldr	r2, [r3, #16]
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2201      	movs	r2, #1
 8009d38:	615a      	str	r2, [r3, #20]
}
 8009d3a:	bf00      	nop
 8009d3c:	3714      	adds	r7, #20
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d44:	4770      	bx	lr
 8009d46:	bf00      	nop
 8009d48:	40010000 	.word	0x40010000
 8009d4c:	40000400 	.word	0x40000400
 8009d50:	40000800 	.word	0x40000800
 8009d54:	40000c00 	.word	0x40000c00
 8009d58:	40010400 	.word	0x40010400
 8009d5c:	40014000 	.word	0x40014000
 8009d60:	40014400 	.word	0x40014400
 8009d64:	40014800 	.word	0x40014800
 8009d68:	40001800 	.word	0x40001800
 8009d6c:	40001c00 	.word	0x40001c00
 8009d70:	40002000 	.word	0x40002000

08009d74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009d74:	b480      	push	{r7}
 8009d76:	b087      	sub	sp, #28
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	60f8      	str	r0, [r7, #12]
 8009d7c:	60b9      	str	r1, [r7, #8]
 8009d7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	6a1b      	ldr	r3, [r3, #32]
 8009d84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	6a1b      	ldr	r3, [r3, #32]
 8009d8a:	f023 0201 	bic.w	r2, r3, #1
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	699b      	ldr	r3, [r3, #24]
 8009d96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009d98:	693b      	ldr	r3, [r7, #16]
 8009d9a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009d9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	011b      	lsls	r3, r3, #4
 8009da4:	693a      	ldr	r2, [r7, #16]
 8009da6:	4313      	orrs	r3, r2
 8009da8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	f023 030a 	bic.w	r3, r3, #10
 8009db0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009db2:	697a      	ldr	r2, [r7, #20]
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	4313      	orrs	r3, r2
 8009db8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	693a      	ldr	r2, [r7, #16]
 8009dbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	697a      	ldr	r2, [r7, #20]
 8009dc4:	621a      	str	r2, [r3, #32]
}
 8009dc6:	bf00      	nop
 8009dc8:	371c      	adds	r7, #28
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd0:	4770      	bx	lr

08009dd2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009dd2:	b480      	push	{r7}
 8009dd4:	b087      	sub	sp, #28
 8009dd6:	af00      	add	r7, sp, #0
 8009dd8:	60f8      	str	r0, [r7, #12]
 8009dda:	60b9      	str	r1, [r7, #8]
 8009ddc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	6a1b      	ldr	r3, [r3, #32]
 8009de2:	f023 0210 	bic.w	r2, r3, #16
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	699b      	ldr	r3, [r3, #24]
 8009dee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	6a1b      	ldr	r3, [r3, #32]
 8009df4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009dfc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	031b      	lsls	r3, r3, #12
 8009e02:	697a      	ldr	r2, [r7, #20]
 8009e04:	4313      	orrs	r3, r2
 8009e06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009e08:	693b      	ldr	r3, [r7, #16]
 8009e0a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009e0e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	011b      	lsls	r3, r3, #4
 8009e14:	693a      	ldr	r2, [r7, #16]
 8009e16:	4313      	orrs	r3, r2
 8009e18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	697a      	ldr	r2, [r7, #20]
 8009e1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	693a      	ldr	r2, [r7, #16]
 8009e24:	621a      	str	r2, [r3, #32]
}
 8009e26:	bf00      	nop
 8009e28:	371c      	adds	r7, #28
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e30:	4770      	bx	lr

08009e32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009e32:	b480      	push	{r7}
 8009e34:	b085      	sub	sp, #20
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	6078      	str	r0, [r7, #4]
 8009e3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	689b      	ldr	r3, [r3, #8]
 8009e40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009e4a:	683a      	ldr	r2, [r7, #0]
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	f043 0307 	orr.w	r3, r3, #7
 8009e54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	68fa      	ldr	r2, [r7, #12]
 8009e5a:	609a      	str	r2, [r3, #8]
}
 8009e5c:	bf00      	nop
 8009e5e:	3714      	adds	r7, #20
 8009e60:	46bd      	mov	sp, r7
 8009e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e66:	4770      	bx	lr

08009e68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009e68:	b480      	push	{r7}
 8009e6a:	b087      	sub	sp, #28
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	60f8      	str	r0, [r7, #12]
 8009e70:	60b9      	str	r1, [r7, #8]
 8009e72:	607a      	str	r2, [r7, #4]
 8009e74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	689b      	ldr	r3, [r3, #8]
 8009e7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009e7c:	697b      	ldr	r3, [r7, #20]
 8009e7e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009e82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	021a      	lsls	r2, r3, #8
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	431a      	orrs	r2, r3
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	4313      	orrs	r3, r2
 8009e90:	697a      	ldr	r2, [r7, #20]
 8009e92:	4313      	orrs	r3, r2
 8009e94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	697a      	ldr	r2, [r7, #20]
 8009e9a:	609a      	str	r2, [r3, #8]
}
 8009e9c:	bf00      	nop
 8009e9e:	371c      	adds	r7, #28
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea6:	4770      	bx	lr

08009ea8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b085      	sub	sp, #20
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
 8009eb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009eb8:	2b01      	cmp	r3, #1
 8009eba:	d101      	bne.n	8009ec0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009ebc:	2302      	movs	r3, #2
 8009ebe:	e05a      	b.n	8009f76 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2201      	movs	r2, #1
 8009ec4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2202      	movs	r2, #2
 8009ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	685b      	ldr	r3, [r3, #4]
 8009ed6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	689b      	ldr	r3, [r3, #8]
 8009ede:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ee6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	68fa      	ldr	r2, [r7, #12]
 8009eee:	4313      	orrs	r3, r2
 8009ef0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	68fa      	ldr	r2, [r7, #12]
 8009ef8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	4a21      	ldr	r2, [pc, #132]	@ (8009f84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d022      	beq.n	8009f4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f0c:	d01d      	beq.n	8009f4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	4a1d      	ldr	r2, [pc, #116]	@ (8009f88 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d018      	beq.n	8009f4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	4a1b      	ldr	r2, [pc, #108]	@ (8009f8c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d013      	beq.n	8009f4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	4a1a      	ldr	r2, [pc, #104]	@ (8009f90 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	d00e      	beq.n	8009f4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4a18      	ldr	r2, [pc, #96]	@ (8009f94 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009f32:	4293      	cmp	r3, r2
 8009f34:	d009      	beq.n	8009f4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4a17      	ldr	r2, [pc, #92]	@ (8009f98 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d004      	beq.n	8009f4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	4a15      	ldr	r2, [pc, #84]	@ (8009f9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d10c      	bne.n	8009f64 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009f50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	685b      	ldr	r3, [r3, #4]
 8009f56:	68ba      	ldr	r2, [r7, #8]
 8009f58:	4313      	orrs	r3, r2
 8009f5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	68ba      	ldr	r2, [r7, #8]
 8009f62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2201      	movs	r2, #1
 8009f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009f74:	2300      	movs	r3, #0
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	3714      	adds	r7, #20
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f80:	4770      	bx	lr
 8009f82:	bf00      	nop
 8009f84:	40010000 	.word	0x40010000
 8009f88:	40000400 	.word	0x40000400
 8009f8c:	40000800 	.word	0x40000800
 8009f90:	40000c00 	.word	0x40000c00
 8009f94:	40010400 	.word	0x40010400
 8009f98:	40014000 	.word	0x40014000
 8009f9c:	40001800 	.word	0x40001800

08009fa0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b083      	sub	sp, #12
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009fa8:	bf00      	nop
 8009faa:	370c      	adds	r7, #12
 8009fac:	46bd      	mov	sp, r7
 8009fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb2:	4770      	bx	lr

08009fb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b083      	sub	sp, #12
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009fbc:	bf00      	nop
 8009fbe:	370c      	adds	r7, #12
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr

08009fc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b082      	sub	sp, #8
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d101      	bne.n	8009fda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	e03f      	b.n	800a05a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009fe0:	b2db      	uxtb	r3, r3
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d106      	bne.n	8009ff4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2200      	movs	r2, #0
 8009fea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	f7fb fcde 	bl	80059b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2224      	movs	r2, #36	@ 0x24
 8009ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	68da      	ldr	r2, [r3, #12]
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a00a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f000 fddf 	bl	800abd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	691a      	ldr	r2, [r3, #16]
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a020:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	695a      	ldr	r2, [r3, #20]
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a030:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	68da      	ldr	r2, [r3, #12]
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a040:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2200      	movs	r2, #0
 800a046:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2220      	movs	r2, #32
 800a04c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2220      	movs	r2, #32
 800a054:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800a058:	2300      	movs	r3, #0
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	3708      	adds	r7, #8
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}

0800a062 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a062:	b580      	push	{r7, lr}
 800a064:	b08a      	sub	sp, #40	@ 0x28
 800a066:	af02      	add	r7, sp, #8
 800a068:	60f8      	str	r0, [r7, #12]
 800a06a:	60b9      	str	r1, [r7, #8]
 800a06c:	603b      	str	r3, [r7, #0]
 800a06e:	4613      	mov	r3, r2
 800a070:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a072:	2300      	movs	r3, #0
 800a074:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a07c:	b2db      	uxtb	r3, r3
 800a07e:	2b20      	cmp	r3, #32
 800a080:	d17c      	bne.n	800a17c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d002      	beq.n	800a08e <HAL_UART_Transmit+0x2c>
 800a088:	88fb      	ldrh	r3, [r7, #6]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d101      	bne.n	800a092 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a08e:	2301      	movs	r3, #1
 800a090:	e075      	b.n	800a17e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a098:	2b01      	cmp	r3, #1
 800a09a:	d101      	bne.n	800a0a0 <HAL_UART_Transmit+0x3e>
 800a09c:	2302      	movs	r3, #2
 800a09e:	e06e      	b.n	800a17e <HAL_UART_Transmit+0x11c>
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	2201      	movs	r2, #1
 800a0a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	2221      	movs	r2, #33	@ 0x21
 800a0b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a0b6:	f7fb ff8b 	bl	8005fd0 <HAL_GetTick>
 800a0ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	88fa      	ldrh	r2, [r7, #6]
 800a0c0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	88fa      	ldrh	r2, [r7, #6]
 800a0c6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	689b      	ldr	r3, [r3, #8]
 800a0cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a0d0:	d108      	bne.n	800a0e4 <HAL_UART_Transmit+0x82>
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	691b      	ldr	r3, [r3, #16]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d104      	bne.n	800a0e4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	61bb      	str	r3, [r7, #24]
 800a0e2:	e003      	b.n	800a0ec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 800a0f4:	e02a      	b.n	800a14c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	9300      	str	r3, [sp, #0]
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	2180      	movs	r1, #128	@ 0x80
 800a100:	68f8      	ldr	r0, [r7, #12]
 800a102:	f000 fb1f 	bl	800a744 <UART_WaitOnFlagUntilTimeout>
 800a106:	4603      	mov	r3, r0
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d001      	beq.n	800a110 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a10c:	2303      	movs	r3, #3
 800a10e:	e036      	b.n	800a17e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a110:	69fb      	ldr	r3, [r7, #28]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d10b      	bne.n	800a12e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a116:	69bb      	ldr	r3, [r7, #24]
 800a118:	881b      	ldrh	r3, [r3, #0]
 800a11a:	461a      	mov	r2, r3
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a124:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a126:	69bb      	ldr	r3, [r7, #24]
 800a128:	3302      	adds	r3, #2
 800a12a:	61bb      	str	r3, [r7, #24]
 800a12c:	e007      	b.n	800a13e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a12e:	69fb      	ldr	r3, [r7, #28]
 800a130:	781a      	ldrb	r2, [r3, #0]
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a138:	69fb      	ldr	r3, [r7, #28]
 800a13a:	3301      	adds	r3, #1
 800a13c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a142:	b29b      	uxth	r3, r3
 800a144:	3b01      	subs	r3, #1
 800a146:	b29a      	uxth	r2, r3
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a150:	b29b      	uxth	r3, r3
 800a152:	2b00      	cmp	r3, #0
 800a154:	d1cf      	bne.n	800a0f6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	9300      	str	r3, [sp, #0]
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	2200      	movs	r2, #0
 800a15e:	2140      	movs	r1, #64	@ 0x40
 800a160:	68f8      	ldr	r0, [r7, #12]
 800a162:	f000 faef 	bl	800a744 <UART_WaitOnFlagUntilTimeout>
 800a166:	4603      	mov	r3, r0
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d001      	beq.n	800a170 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a16c:	2303      	movs	r3, #3
 800a16e:	e006      	b.n	800a17e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	2220      	movs	r2, #32
 800a174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800a178:	2300      	movs	r3, #0
 800a17a:	e000      	b.n	800a17e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a17c:	2302      	movs	r3, #2
  }
}
 800a17e:	4618      	mov	r0, r3
 800a180:	3720      	adds	r7, #32
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}

0800a186 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a186:	b580      	push	{r7, lr}
 800a188:	b084      	sub	sp, #16
 800a18a:	af00      	add	r7, sp, #0
 800a18c:	60f8      	str	r0, [r7, #12]
 800a18e:	60b9      	str	r1, [r7, #8]
 800a190:	4613      	mov	r3, r2
 800a192:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a19a:	b2db      	uxtb	r3, r3
 800a19c:	2b20      	cmp	r3, #32
 800a19e:	d11d      	bne.n	800a1dc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d002      	beq.n	800a1ac <HAL_UART_Receive_IT+0x26>
 800a1a6:	88fb      	ldrh	r3, [r7, #6]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d101      	bne.n	800a1b0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a1ac:	2301      	movs	r3, #1
 800a1ae:	e016      	b.n	800a1de <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a1b6:	2b01      	cmp	r3, #1
 800a1b8:	d101      	bne.n	800a1be <HAL_UART_Receive_IT+0x38>
 800a1ba:	2302      	movs	r3, #2
 800a1bc:	e00f      	b.n	800a1de <HAL_UART_Receive_IT+0x58>
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	2201      	movs	r2, #1
 800a1c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a1cc:	88fb      	ldrh	r3, [r7, #6]
 800a1ce:	461a      	mov	r2, r3
 800a1d0:	68b9      	ldr	r1, [r7, #8]
 800a1d2:	68f8      	ldr	r0, [r7, #12]
 800a1d4:	f000 fb24 	bl	800a820 <UART_Start_Receive_IT>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	e000      	b.n	800a1de <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a1dc:	2302      	movs	r3, #2
  }
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	3710      	adds	r7, #16
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}
	...

0800a1e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b0ba      	sub	sp, #232	@ 0xe8
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	68db      	ldr	r3, [r3, #12]
 800a200:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	695b      	ldr	r3, [r3, #20]
 800a20a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800a20e:	2300      	movs	r3, #0
 800a210:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800a214:	2300      	movs	r3, #0
 800a216:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a21a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a21e:	f003 030f 	and.w	r3, r3, #15
 800a222:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800a226:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d10f      	bne.n	800a24e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a22e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a232:	f003 0320 	and.w	r3, r3, #32
 800a236:	2b00      	cmp	r3, #0
 800a238:	d009      	beq.n	800a24e <HAL_UART_IRQHandler+0x66>
 800a23a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a23e:	f003 0320 	and.w	r3, r3, #32
 800a242:	2b00      	cmp	r3, #0
 800a244:	d003      	beq.n	800a24e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f000 fc07 	bl	800aa5a <UART_Receive_IT>
      return;
 800a24c:	e256      	b.n	800a6fc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a24e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a252:	2b00      	cmp	r3, #0
 800a254:	f000 80de 	beq.w	800a414 <HAL_UART_IRQHandler+0x22c>
 800a258:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a25c:	f003 0301 	and.w	r3, r3, #1
 800a260:	2b00      	cmp	r3, #0
 800a262:	d106      	bne.n	800a272 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a264:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a268:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	f000 80d1 	beq.w	800a414 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a276:	f003 0301 	and.w	r3, r3, #1
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d00b      	beq.n	800a296 <HAL_UART_IRQHandler+0xae>
 800a27e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a282:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a286:	2b00      	cmp	r3, #0
 800a288:	d005      	beq.n	800a296 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a28e:	f043 0201 	orr.w	r2, r3, #1
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a29a:	f003 0304 	and.w	r3, r3, #4
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d00b      	beq.n	800a2ba <HAL_UART_IRQHandler+0xd2>
 800a2a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a2a6:	f003 0301 	and.w	r3, r3, #1
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d005      	beq.n	800a2ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2b2:	f043 0202 	orr.w	r2, r3, #2
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a2ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a2be:	f003 0302 	and.w	r3, r3, #2
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d00b      	beq.n	800a2de <HAL_UART_IRQHandler+0xf6>
 800a2c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a2ca:	f003 0301 	and.w	r3, r3, #1
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d005      	beq.n	800a2de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2d6:	f043 0204 	orr.w	r2, r3, #4
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a2de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a2e2:	f003 0308 	and.w	r3, r3, #8
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d011      	beq.n	800a30e <HAL_UART_IRQHandler+0x126>
 800a2ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a2ee:	f003 0320 	and.w	r3, r3, #32
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d105      	bne.n	800a302 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a2f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a2fa:	f003 0301 	and.w	r3, r3, #1
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d005      	beq.n	800a30e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a306:	f043 0208 	orr.w	r2, r3, #8
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a312:	2b00      	cmp	r3, #0
 800a314:	f000 81ed 	beq.w	800a6f2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a31c:	f003 0320 	and.w	r3, r3, #32
 800a320:	2b00      	cmp	r3, #0
 800a322:	d008      	beq.n	800a336 <HAL_UART_IRQHandler+0x14e>
 800a324:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a328:	f003 0320 	and.w	r3, r3, #32
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d002      	beq.n	800a336 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	f000 fb92 	bl	800aa5a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	695b      	ldr	r3, [r3, #20]
 800a33c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a340:	2b40      	cmp	r3, #64	@ 0x40
 800a342:	bf0c      	ite	eq
 800a344:	2301      	moveq	r3, #1
 800a346:	2300      	movne	r3, #0
 800a348:	b2db      	uxtb	r3, r3
 800a34a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a352:	f003 0308 	and.w	r3, r3, #8
 800a356:	2b00      	cmp	r3, #0
 800a358:	d103      	bne.n	800a362 <HAL_UART_IRQHandler+0x17a>
 800a35a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d04f      	beq.n	800a402 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	f000 fa9a 	bl	800a89c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	695b      	ldr	r3, [r3, #20]
 800a36e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a372:	2b40      	cmp	r3, #64	@ 0x40
 800a374:	d141      	bne.n	800a3fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	3314      	adds	r3, #20
 800a37c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a380:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a384:	e853 3f00 	ldrex	r3, [r3]
 800a388:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a38c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a390:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a394:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	3314      	adds	r3, #20
 800a39e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a3a2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a3a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a3ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a3b2:	e841 2300 	strex	r3, r2, [r1]
 800a3b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a3ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d1d9      	bne.n	800a376 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d013      	beq.n	800a3f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3ce:	4a7d      	ldr	r2, [pc, #500]	@ (800a5c4 <HAL_UART_IRQHandler+0x3dc>)
 800a3d0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f7fc fc37 	bl	8006c4a <HAL_DMA_Abort_IT>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d016      	beq.n	800a410 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3e8:	687a      	ldr	r2, [r7, #4]
 800a3ea:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800a3ec:	4610      	mov	r0, r2
 800a3ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3f0:	e00e      	b.n	800a410 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f000 f990 	bl	800a718 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3f8:	e00a      	b.n	800a410 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f000 f98c 	bl	800a718 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a400:	e006      	b.n	800a410 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	f000 f988 	bl	800a718 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2200      	movs	r2, #0
 800a40c:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 800a40e:	e170      	b.n	800a6f2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a410:	bf00      	nop
    return;
 800a412:	e16e      	b.n	800a6f2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a418:	2b01      	cmp	r3, #1
 800a41a:	f040 814a 	bne.w	800a6b2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a41e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a422:	f003 0310 	and.w	r3, r3, #16
 800a426:	2b00      	cmp	r3, #0
 800a428:	f000 8143 	beq.w	800a6b2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a42c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a430:	f003 0310 	and.w	r3, r3, #16
 800a434:	2b00      	cmp	r3, #0
 800a436:	f000 813c 	beq.w	800a6b2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a43a:	2300      	movs	r3, #0
 800a43c:	60bb      	str	r3, [r7, #8]
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	60bb      	str	r3, [r7, #8]
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	685b      	ldr	r3, [r3, #4]
 800a44c:	60bb      	str	r3, [r7, #8]
 800a44e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	695b      	ldr	r3, [r3, #20]
 800a456:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a45a:	2b40      	cmp	r3, #64	@ 0x40
 800a45c:	f040 80b4 	bne.w	800a5c8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	685b      	ldr	r3, [r3, #4]
 800a468:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a46c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a470:	2b00      	cmp	r3, #0
 800a472:	f000 8140 	beq.w	800a6f6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a47a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a47e:	429a      	cmp	r2, r3
 800a480:	f080 8139 	bcs.w	800a6f6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a48a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a490:	69db      	ldr	r3, [r3, #28]
 800a492:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a496:	f000 8088 	beq.w	800a5aa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	330c      	adds	r3, #12
 800a4a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a4a8:	e853 3f00 	ldrex	r3, [r3]
 800a4ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a4b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a4b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a4b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	330c      	adds	r3, #12
 800a4c2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800a4c6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a4ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a4d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a4d6:	e841 2300 	strex	r3, r2, [r1]
 800a4da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a4de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d1d9      	bne.n	800a49a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	3314      	adds	r3, #20
 800a4ec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a4f0:	e853 3f00 	ldrex	r3, [r3]
 800a4f4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a4f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a4f8:	f023 0301 	bic.w	r3, r3, #1
 800a4fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	3314      	adds	r3, #20
 800a506:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a50a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a50e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a510:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a512:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a516:	e841 2300 	strex	r3, r2, [r1]
 800a51a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a51c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d1e1      	bne.n	800a4e6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	3314      	adds	r3, #20
 800a528:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a52a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a52c:	e853 3f00 	ldrex	r3, [r3]
 800a530:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a532:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a534:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a538:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	3314      	adds	r3, #20
 800a542:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a546:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a548:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a54a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a54c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a54e:	e841 2300 	strex	r3, r2, [r1]
 800a552:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a554:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a556:	2b00      	cmp	r3, #0
 800a558:	d1e3      	bne.n	800a522 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2220      	movs	r2, #32
 800a55e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2200      	movs	r2, #0
 800a566:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	330c      	adds	r3, #12
 800a56e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a570:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a572:	e853 3f00 	ldrex	r3, [r3]
 800a576:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a578:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a57a:	f023 0310 	bic.w	r3, r3, #16
 800a57e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	330c      	adds	r3, #12
 800a588:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800a58c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a58e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a590:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a592:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a594:	e841 2300 	strex	r3, r2, [r1]
 800a598:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a59a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d1e3      	bne.n	800a568 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	f7fc fae0 	bl	8006b6a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a5b2:	b29b      	uxth	r3, r3
 800a5b4:	1ad3      	subs	r3, r2, r3
 800a5b6:	b29b      	uxth	r3, r3
 800a5b8:	4619      	mov	r1, r3
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f000 f8b6 	bl	800a72c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a5c0:	e099      	b.n	800a6f6 <HAL_UART_IRQHandler+0x50e>
 800a5c2:	bf00      	nop
 800a5c4:	0800a963 	.word	0x0800a963
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a5d0:	b29b      	uxth	r3, r3
 800a5d2:	1ad3      	subs	r3, r2, r3
 800a5d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a5dc:	b29b      	uxth	r3, r3
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	f000 808b 	beq.w	800a6fa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a5e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	f000 8086 	beq.w	800a6fa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	330c      	adds	r3, #12
 800a5f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5f8:	e853 3f00 	ldrex	r3, [r3]
 800a5fc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a5fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a600:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a604:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	330c      	adds	r3, #12
 800a60e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800a612:	647a      	str	r2, [r7, #68]	@ 0x44
 800a614:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a616:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a618:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a61a:	e841 2300 	strex	r3, r2, [r1]
 800a61e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a620:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a622:	2b00      	cmp	r3, #0
 800a624:	d1e3      	bne.n	800a5ee <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	3314      	adds	r3, #20
 800a62c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a62e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a630:	e853 3f00 	ldrex	r3, [r3]
 800a634:	623b      	str	r3, [r7, #32]
   return(result);
 800a636:	6a3b      	ldr	r3, [r7, #32]
 800a638:	f023 0301 	bic.w	r3, r3, #1
 800a63c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	3314      	adds	r3, #20
 800a646:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a64a:	633a      	str	r2, [r7, #48]	@ 0x30
 800a64c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a64e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a650:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a652:	e841 2300 	strex	r3, r2, [r1]
 800a656:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d1e3      	bne.n	800a626 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2220      	movs	r2, #32
 800a662:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2200      	movs	r2, #0
 800a66a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	330c      	adds	r3, #12
 800a672:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a674:	693b      	ldr	r3, [r7, #16]
 800a676:	e853 3f00 	ldrex	r3, [r3]
 800a67a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	f023 0310 	bic.w	r3, r3, #16
 800a682:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	330c      	adds	r3, #12
 800a68c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800a690:	61fa      	str	r2, [r7, #28]
 800a692:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a694:	69b9      	ldr	r1, [r7, #24]
 800a696:	69fa      	ldr	r2, [r7, #28]
 800a698:	e841 2300 	strex	r3, r2, [r1]
 800a69c:	617b      	str	r3, [r7, #20]
   return(result);
 800a69e:	697b      	ldr	r3, [r7, #20]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d1e3      	bne.n	800a66c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a6a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a6a8:	4619      	mov	r1, r3
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f000 f83e 	bl	800a72c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a6b0:	e023      	b.n	800a6fa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a6b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d009      	beq.n	800a6d2 <HAL_UART_IRQHandler+0x4ea>
 800a6be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a6c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d003      	beq.n	800a6d2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f000 f95d 	bl	800a98a <UART_Transmit_IT>
    return;
 800a6d0:	e014      	b.n	800a6fc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a6d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d00e      	beq.n	800a6fc <HAL_UART_IRQHandler+0x514>
 800a6de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a6e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d008      	beq.n	800a6fc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f000 f99d 	bl	800aa2a <UART_EndTransmit_IT>
    return;
 800a6f0:	e004      	b.n	800a6fc <HAL_UART_IRQHandler+0x514>
    return;
 800a6f2:	bf00      	nop
 800a6f4:	e002      	b.n	800a6fc <HAL_UART_IRQHandler+0x514>
      return;
 800a6f6:	bf00      	nop
 800a6f8:	e000      	b.n	800a6fc <HAL_UART_IRQHandler+0x514>
      return;
 800a6fa:	bf00      	nop
  }
}
 800a6fc:	37e8      	adds	r7, #232	@ 0xe8
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}
 800a702:	bf00      	nop

0800a704 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a704:	b480      	push	{r7}
 800a706:	b083      	sub	sp, #12
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a70c:	bf00      	nop
 800a70e:	370c      	adds	r7, #12
 800a710:	46bd      	mov	sp, r7
 800a712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a716:	4770      	bx	lr

0800a718 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a718:	b480      	push	{r7}
 800a71a:	b083      	sub	sp, #12
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a720:	bf00      	nop
 800a722:	370c      	adds	r7, #12
 800a724:	46bd      	mov	sp, r7
 800a726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72a:	4770      	bx	lr

0800a72c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a72c:	b480      	push	{r7}
 800a72e:	b083      	sub	sp, #12
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
 800a734:	460b      	mov	r3, r1
 800a736:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a738:	bf00      	nop
 800a73a:	370c      	adds	r7, #12
 800a73c:	46bd      	mov	sp, r7
 800a73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a742:	4770      	bx	lr

0800a744 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b090      	sub	sp, #64	@ 0x40
 800a748:	af00      	add	r7, sp, #0
 800a74a:	60f8      	str	r0, [r7, #12]
 800a74c:	60b9      	str	r1, [r7, #8]
 800a74e:	603b      	str	r3, [r7, #0]
 800a750:	4613      	mov	r3, r2
 800a752:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a754:	e050      	b.n	800a7f8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a756:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a75c:	d04c      	beq.n	800a7f8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a75e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a760:	2b00      	cmp	r3, #0
 800a762:	d007      	beq.n	800a774 <UART_WaitOnFlagUntilTimeout+0x30>
 800a764:	f7fb fc34 	bl	8005fd0 <HAL_GetTick>
 800a768:	4602      	mov	r2, r0
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	1ad3      	subs	r3, r2, r3
 800a76e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a770:	429a      	cmp	r2, r3
 800a772:	d241      	bcs.n	800a7f8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	330c      	adds	r3, #12
 800a77a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a77c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a77e:	e853 3f00 	ldrex	r3, [r3]
 800a782:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a786:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800a78a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	330c      	adds	r3, #12
 800a792:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a794:	637a      	str	r2, [r7, #52]	@ 0x34
 800a796:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a798:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a79a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a79c:	e841 2300 	strex	r3, r2, [r1]
 800a7a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a7a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d1e5      	bne.n	800a774 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	3314      	adds	r3, #20
 800a7ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7b0:	697b      	ldr	r3, [r7, #20]
 800a7b2:	e853 3f00 	ldrex	r3, [r3]
 800a7b6:	613b      	str	r3, [r7, #16]
   return(result);
 800a7b8:	693b      	ldr	r3, [r7, #16]
 800a7ba:	f023 0301 	bic.w	r3, r3, #1
 800a7be:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	3314      	adds	r3, #20
 800a7c6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a7c8:	623a      	str	r2, [r7, #32]
 800a7ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7cc:	69f9      	ldr	r1, [r7, #28]
 800a7ce:	6a3a      	ldr	r2, [r7, #32]
 800a7d0:	e841 2300 	strex	r3, r2, [r1]
 800a7d4:	61bb      	str	r3, [r7, #24]
   return(result);
 800a7d6:	69bb      	ldr	r3, [r7, #24]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d1e5      	bne.n	800a7a8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	2220      	movs	r2, #32
 800a7e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	2220      	movs	r2, #32
 800a7e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 800a7f4:	2303      	movs	r3, #3
 800a7f6:	e00f      	b.n	800a818 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	681a      	ldr	r2, [r3, #0]
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	4013      	ands	r3, r2
 800a802:	68ba      	ldr	r2, [r7, #8]
 800a804:	429a      	cmp	r2, r3
 800a806:	bf0c      	ite	eq
 800a808:	2301      	moveq	r3, #1
 800a80a:	2300      	movne	r3, #0
 800a80c:	b2db      	uxtb	r3, r3
 800a80e:	461a      	mov	r2, r3
 800a810:	79fb      	ldrb	r3, [r7, #7]
 800a812:	429a      	cmp	r2, r3
 800a814:	d09f      	beq.n	800a756 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a816:	2300      	movs	r3, #0
}
 800a818:	4618      	mov	r0, r3
 800a81a:	3740      	adds	r7, #64	@ 0x40
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bd80      	pop	{r7, pc}

0800a820 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a820:	b480      	push	{r7}
 800a822:	b085      	sub	sp, #20
 800a824:	af00      	add	r7, sp, #0
 800a826:	60f8      	str	r0, [r7, #12]
 800a828:	60b9      	str	r1, [r7, #8]
 800a82a:	4613      	mov	r3, r2
 800a82c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	68ba      	ldr	r2, [r7, #8]
 800a832:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	88fa      	ldrh	r2, [r7, #6]
 800a838:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	88fa      	ldrh	r2, [r7, #6]
 800a83e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	2200      	movs	r2, #0
 800a844:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	2222      	movs	r2, #34	@ 0x22
 800a84a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	2200      	movs	r2, #0
 800a852:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	691b      	ldr	r3, [r3, #16]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d007      	beq.n	800a86e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	68da      	ldr	r2, [r3, #12]
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a86c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	695a      	ldr	r2, [r3, #20]
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f042 0201 	orr.w	r2, r2, #1
 800a87c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	68da      	ldr	r2, [r3, #12]
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f042 0220 	orr.w	r2, r2, #32
 800a88c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a88e:	2300      	movs	r3, #0
}
 800a890:	4618      	mov	r0, r3
 800a892:	3714      	adds	r7, #20
 800a894:	46bd      	mov	sp, r7
 800a896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89a:	4770      	bx	lr

0800a89c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a89c:	b480      	push	{r7}
 800a89e:	b095      	sub	sp, #84	@ 0x54
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	330c      	adds	r3, #12
 800a8aa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8ae:	e853 3f00 	ldrex	r3, [r3]
 800a8b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a8b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a8ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	330c      	adds	r3, #12
 800a8c2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a8c4:	643a      	str	r2, [r7, #64]	@ 0x40
 800a8c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a8ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a8cc:	e841 2300 	strex	r3, r2, [r1]
 800a8d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a8d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d1e5      	bne.n	800a8a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	3314      	adds	r3, #20
 800a8de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8e0:	6a3b      	ldr	r3, [r7, #32]
 800a8e2:	e853 3f00 	ldrex	r3, [r3]
 800a8e6:	61fb      	str	r3, [r7, #28]
   return(result);
 800a8e8:	69fb      	ldr	r3, [r7, #28]
 800a8ea:	f023 0301 	bic.w	r3, r3, #1
 800a8ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	3314      	adds	r3, #20
 800a8f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a8f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a8fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a8fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a900:	e841 2300 	strex	r3, r2, [r1]
 800a904:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d1e5      	bne.n	800a8d8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a910:	2b01      	cmp	r3, #1
 800a912:	d119      	bne.n	800a948 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	330c      	adds	r3, #12
 800a91a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	e853 3f00 	ldrex	r3, [r3]
 800a922:	60bb      	str	r3, [r7, #8]
   return(result);
 800a924:	68bb      	ldr	r3, [r7, #8]
 800a926:	f023 0310 	bic.w	r3, r3, #16
 800a92a:	647b      	str	r3, [r7, #68]	@ 0x44
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	330c      	adds	r3, #12
 800a932:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a934:	61ba      	str	r2, [r7, #24]
 800a936:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a938:	6979      	ldr	r1, [r7, #20]
 800a93a:	69ba      	ldr	r2, [r7, #24]
 800a93c:	e841 2300 	strex	r3, r2, [r1]
 800a940:	613b      	str	r3, [r7, #16]
   return(result);
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d1e5      	bne.n	800a914 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2220      	movs	r2, #32
 800a94c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2200      	movs	r2, #0
 800a954:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a956:	bf00      	nop
 800a958:	3754      	adds	r7, #84	@ 0x54
 800a95a:	46bd      	mov	sp, r7
 800a95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a960:	4770      	bx	lr

0800a962 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a962:	b580      	push	{r7, lr}
 800a964:	b084      	sub	sp, #16
 800a966:	af00      	add	r7, sp, #0
 800a968:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a96e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	2200      	movs	r2, #0
 800a974:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	2200      	movs	r2, #0
 800a97a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a97c:	68f8      	ldr	r0, [r7, #12]
 800a97e:	f7ff fecb 	bl	800a718 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a982:	bf00      	nop
 800a984:	3710      	adds	r7, #16
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}

0800a98a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a98a:	b480      	push	{r7}
 800a98c:	b085      	sub	sp, #20
 800a98e:	af00      	add	r7, sp, #0
 800a990:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a998:	b2db      	uxtb	r3, r3
 800a99a:	2b21      	cmp	r3, #33	@ 0x21
 800a99c:	d13e      	bne.n	800aa1c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	689b      	ldr	r3, [r3, #8]
 800a9a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a9a6:	d114      	bne.n	800a9d2 <UART_Transmit_IT+0x48>
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	691b      	ldr	r3, [r3, #16]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d110      	bne.n	800a9d2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6a1b      	ldr	r3, [r3, #32]
 800a9b4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	881b      	ldrh	r3, [r3, #0]
 800a9ba:	461a      	mov	r2, r3
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a9c4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6a1b      	ldr	r3, [r3, #32]
 800a9ca:	1c9a      	adds	r2, r3, #2
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	621a      	str	r2, [r3, #32]
 800a9d0:	e008      	b.n	800a9e4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6a1b      	ldr	r3, [r3, #32]
 800a9d6:	1c59      	adds	r1, r3, #1
 800a9d8:	687a      	ldr	r2, [r7, #4]
 800a9da:	6211      	str	r1, [r2, #32]
 800a9dc:	781a      	ldrb	r2, [r3, #0]
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a9e8:	b29b      	uxth	r3, r3
 800a9ea:	3b01      	subs	r3, #1
 800a9ec:	b29b      	uxth	r3, r3
 800a9ee:	687a      	ldr	r2, [r7, #4]
 800a9f0:	4619      	mov	r1, r3
 800a9f2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d10f      	bne.n	800aa18 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	68da      	ldr	r2, [r3, #12]
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800aa06:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	68da      	ldr	r2, [r3, #12]
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800aa16:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800aa18:	2300      	movs	r3, #0
 800aa1a:	e000      	b.n	800aa1e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800aa1c:	2302      	movs	r3, #2
  }
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	3714      	adds	r7, #20
 800aa22:	46bd      	mov	sp, r7
 800aa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa28:	4770      	bx	lr

0800aa2a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aa2a:	b580      	push	{r7, lr}
 800aa2c:	b082      	sub	sp, #8
 800aa2e:	af00      	add	r7, sp, #0
 800aa30:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	68da      	ldr	r2, [r3, #12]
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800aa40:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2220      	movs	r2, #32
 800aa46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f7ff fe5a 	bl	800a704 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800aa50:	2300      	movs	r3, #0
}
 800aa52:	4618      	mov	r0, r3
 800aa54:	3708      	adds	r7, #8
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bd80      	pop	{r7, pc}

0800aa5a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800aa5a:	b580      	push	{r7, lr}
 800aa5c:	b08c      	sub	sp, #48	@ 0x30
 800aa5e:	af00      	add	r7, sp, #0
 800aa60:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800aa68:	b2db      	uxtb	r3, r3
 800aa6a:	2b22      	cmp	r3, #34	@ 0x22
 800aa6c:	f040 80ab 	bne.w	800abc6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	689b      	ldr	r3, [r3, #8]
 800aa74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa78:	d117      	bne.n	800aaaa <UART_Receive_IT+0x50>
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	691b      	ldr	r3, [r3, #16]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d113      	bne.n	800aaaa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800aa82:	2300      	movs	r3, #0
 800aa84:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa8a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	685b      	ldr	r3, [r3, #4]
 800aa92:	b29b      	uxth	r3, r3
 800aa94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa98:	b29a      	uxth	r2, r3
 800aa9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa9c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aaa2:	1c9a      	adds	r2, r3, #2
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	629a      	str	r2, [r3, #40]	@ 0x28
 800aaa8:	e026      	b.n	800aaf8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aaae:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800aab0:	2300      	movs	r3, #0
 800aab2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	689b      	ldr	r3, [r3, #8]
 800aab8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aabc:	d007      	beq.n	800aace <UART_Receive_IT+0x74>
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	689b      	ldr	r3, [r3, #8]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d10a      	bne.n	800aadc <UART_Receive_IT+0x82>
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	691b      	ldr	r3, [r3, #16]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d106      	bne.n	800aadc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	685b      	ldr	r3, [r3, #4]
 800aad4:	b2da      	uxtb	r2, r3
 800aad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aad8:	701a      	strb	r2, [r3, #0]
 800aada:	e008      	b.n	800aaee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	685b      	ldr	r3, [r3, #4]
 800aae2:	b2db      	uxtb	r3, r3
 800aae4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aae8:	b2da      	uxtb	r2, r3
 800aaea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aaf2:	1c5a      	adds	r2, r3, #1
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800aafc:	b29b      	uxth	r3, r3
 800aafe:	3b01      	subs	r3, #1
 800ab00:	b29b      	uxth	r3, r3
 800ab02:	687a      	ldr	r2, [r7, #4]
 800ab04:	4619      	mov	r1, r3
 800ab06:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d15a      	bne.n	800abc2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	68da      	ldr	r2, [r3, #12]
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f022 0220 	bic.w	r2, r2, #32
 800ab1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	68da      	ldr	r2, [r3, #12]
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ab2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	695a      	ldr	r2, [r3, #20]
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f022 0201 	bic.w	r2, r2, #1
 800ab3a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2220      	movs	r2, #32
 800ab40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab48:	2b01      	cmp	r3, #1
 800ab4a:	d135      	bne.n	800abb8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	330c      	adds	r3, #12
 800ab58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab5a:	697b      	ldr	r3, [r7, #20]
 800ab5c:	e853 3f00 	ldrex	r3, [r3]
 800ab60:	613b      	str	r3, [r7, #16]
   return(result);
 800ab62:	693b      	ldr	r3, [r7, #16]
 800ab64:	f023 0310 	bic.w	r3, r3, #16
 800ab68:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	330c      	adds	r3, #12
 800ab70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab72:	623a      	str	r2, [r7, #32]
 800ab74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab76:	69f9      	ldr	r1, [r7, #28]
 800ab78:	6a3a      	ldr	r2, [r7, #32]
 800ab7a:	e841 2300 	strex	r3, r2, [r1]
 800ab7e:	61bb      	str	r3, [r7, #24]
   return(result);
 800ab80:	69bb      	ldr	r3, [r7, #24]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d1e5      	bne.n	800ab52 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	f003 0310 	and.w	r3, r3, #16
 800ab90:	2b10      	cmp	r3, #16
 800ab92:	d10a      	bne.n	800abaa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ab94:	2300      	movs	r3, #0
 800ab96:	60fb      	str	r3, [r7, #12]
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	60fb      	str	r3, [r7, #12]
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	685b      	ldr	r3, [r3, #4]
 800aba6:	60fb      	str	r3, [r7, #12]
 800aba8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800abae:	4619      	mov	r1, r3
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	f7ff fdbb 	bl	800a72c <HAL_UARTEx_RxEventCallback>
 800abb6:	e002      	b.n	800abbe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f7f8 fd49 	bl	8003650 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800abbe:	2300      	movs	r3, #0
 800abc0:	e002      	b.n	800abc8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800abc2:	2300      	movs	r3, #0
 800abc4:	e000      	b.n	800abc8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800abc6:	2302      	movs	r3, #2
  }
}
 800abc8:	4618      	mov	r0, r3
 800abca:	3730      	adds	r7, #48	@ 0x30
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}

0800abd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800abd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800abd4:	b0c0      	sub	sp, #256	@ 0x100
 800abd6:	af00      	add	r7, sp, #0
 800abd8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800abdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	691b      	ldr	r3, [r3, #16]
 800abe4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800abe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800abec:	68d9      	ldr	r1, [r3, #12]
 800abee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800abf2:	681a      	ldr	r2, [r3, #0]
 800abf4:	ea40 0301 	orr.w	r3, r0, r1
 800abf8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800abfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800abfe:	689a      	ldr	r2, [r3, #8]
 800ac00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac04:	691b      	ldr	r3, [r3, #16]
 800ac06:	431a      	orrs	r2, r3
 800ac08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac0c:	695b      	ldr	r3, [r3, #20]
 800ac0e:	431a      	orrs	r2, r3
 800ac10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac14:	69db      	ldr	r3, [r3, #28]
 800ac16:	4313      	orrs	r3, r2
 800ac18:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ac1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	68db      	ldr	r3, [r3, #12]
 800ac24:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800ac28:	f021 010c 	bic.w	r1, r1, #12
 800ac2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac30:	681a      	ldr	r2, [r3, #0]
 800ac32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800ac36:	430b      	orrs	r3, r1
 800ac38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ac3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	695b      	ldr	r3, [r3, #20]
 800ac42:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800ac46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac4a:	6999      	ldr	r1, [r3, #24]
 800ac4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac50:	681a      	ldr	r2, [r3, #0]
 800ac52:	ea40 0301 	orr.w	r3, r0, r1
 800ac56:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ac58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac5c:	681a      	ldr	r2, [r3, #0]
 800ac5e:	4b8f      	ldr	r3, [pc, #572]	@ (800ae9c <UART_SetConfig+0x2cc>)
 800ac60:	429a      	cmp	r2, r3
 800ac62:	d005      	beq.n	800ac70 <UART_SetConfig+0xa0>
 800ac64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac68:	681a      	ldr	r2, [r3, #0]
 800ac6a:	4b8d      	ldr	r3, [pc, #564]	@ (800aea0 <UART_SetConfig+0x2d0>)
 800ac6c:	429a      	cmp	r2, r3
 800ac6e:	d104      	bne.n	800ac7a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ac70:	f7fd ff28 	bl	8008ac4 <HAL_RCC_GetPCLK2Freq>
 800ac74:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800ac78:	e003      	b.n	800ac82 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ac7a:	f7fd ff0f 	bl	8008a9c <HAL_RCC_GetPCLK1Freq>
 800ac7e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ac82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac86:	69db      	ldr	r3, [r3, #28]
 800ac88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ac8c:	f040 810c 	bne.w	800aea8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ac90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ac94:	2200      	movs	r2, #0
 800ac96:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ac9a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800ac9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800aca2:	4622      	mov	r2, r4
 800aca4:	462b      	mov	r3, r5
 800aca6:	1891      	adds	r1, r2, r2
 800aca8:	65b9      	str	r1, [r7, #88]	@ 0x58
 800acaa:	415b      	adcs	r3, r3
 800acac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800acae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800acb2:	4621      	mov	r1, r4
 800acb4:	eb12 0801 	adds.w	r8, r2, r1
 800acb8:	4629      	mov	r1, r5
 800acba:	eb43 0901 	adc.w	r9, r3, r1
 800acbe:	f04f 0200 	mov.w	r2, #0
 800acc2:	f04f 0300 	mov.w	r3, #0
 800acc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800acca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800acce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800acd2:	4690      	mov	r8, r2
 800acd4:	4699      	mov	r9, r3
 800acd6:	4623      	mov	r3, r4
 800acd8:	eb18 0303 	adds.w	r3, r8, r3
 800acdc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ace0:	462b      	mov	r3, r5
 800ace2:	eb49 0303 	adc.w	r3, r9, r3
 800ace6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800acea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800acee:	685b      	ldr	r3, [r3, #4]
 800acf0:	2200      	movs	r2, #0
 800acf2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800acf6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800acfa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800acfe:	460b      	mov	r3, r1
 800ad00:	18db      	adds	r3, r3, r3
 800ad02:	653b      	str	r3, [r7, #80]	@ 0x50
 800ad04:	4613      	mov	r3, r2
 800ad06:	eb42 0303 	adc.w	r3, r2, r3
 800ad0a:	657b      	str	r3, [r7, #84]	@ 0x54
 800ad0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800ad10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800ad14:	f7f6 f820 	bl	8000d58 <__aeabi_uldivmod>
 800ad18:	4602      	mov	r2, r0
 800ad1a:	460b      	mov	r3, r1
 800ad1c:	4b61      	ldr	r3, [pc, #388]	@ (800aea4 <UART_SetConfig+0x2d4>)
 800ad1e:	fba3 2302 	umull	r2, r3, r3, r2
 800ad22:	095b      	lsrs	r3, r3, #5
 800ad24:	011c      	lsls	r4, r3, #4
 800ad26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ad30:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800ad34:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800ad38:	4642      	mov	r2, r8
 800ad3a:	464b      	mov	r3, r9
 800ad3c:	1891      	adds	r1, r2, r2
 800ad3e:	64b9      	str	r1, [r7, #72]	@ 0x48
 800ad40:	415b      	adcs	r3, r3
 800ad42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ad44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800ad48:	4641      	mov	r1, r8
 800ad4a:	eb12 0a01 	adds.w	sl, r2, r1
 800ad4e:	4649      	mov	r1, r9
 800ad50:	eb43 0b01 	adc.w	fp, r3, r1
 800ad54:	f04f 0200 	mov.w	r2, #0
 800ad58:	f04f 0300 	mov.w	r3, #0
 800ad5c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ad60:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ad64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ad68:	4692      	mov	sl, r2
 800ad6a:	469b      	mov	fp, r3
 800ad6c:	4643      	mov	r3, r8
 800ad6e:	eb1a 0303 	adds.w	r3, sl, r3
 800ad72:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ad76:	464b      	mov	r3, r9
 800ad78:	eb4b 0303 	adc.w	r3, fp, r3
 800ad7c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800ad80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad84:	685b      	ldr	r3, [r3, #4]
 800ad86:	2200      	movs	r2, #0
 800ad88:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ad8c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800ad90:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800ad94:	460b      	mov	r3, r1
 800ad96:	18db      	adds	r3, r3, r3
 800ad98:	643b      	str	r3, [r7, #64]	@ 0x40
 800ad9a:	4613      	mov	r3, r2
 800ad9c:	eb42 0303 	adc.w	r3, r2, r3
 800ada0:	647b      	str	r3, [r7, #68]	@ 0x44
 800ada2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800ada6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800adaa:	f7f5 ffd5 	bl	8000d58 <__aeabi_uldivmod>
 800adae:	4602      	mov	r2, r0
 800adb0:	460b      	mov	r3, r1
 800adb2:	4611      	mov	r1, r2
 800adb4:	4b3b      	ldr	r3, [pc, #236]	@ (800aea4 <UART_SetConfig+0x2d4>)
 800adb6:	fba3 2301 	umull	r2, r3, r3, r1
 800adba:	095b      	lsrs	r3, r3, #5
 800adbc:	2264      	movs	r2, #100	@ 0x64
 800adbe:	fb02 f303 	mul.w	r3, r2, r3
 800adc2:	1acb      	subs	r3, r1, r3
 800adc4:	00db      	lsls	r3, r3, #3
 800adc6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800adca:	4b36      	ldr	r3, [pc, #216]	@ (800aea4 <UART_SetConfig+0x2d4>)
 800adcc:	fba3 2302 	umull	r2, r3, r3, r2
 800add0:	095b      	lsrs	r3, r3, #5
 800add2:	005b      	lsls	r3, r3, #1
 800add4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800add8:	441c      	add	r4, r3
 800adda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800adde:	2200      	movs	r2, #0
 800ade0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ade4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800ade8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800adec:	4642      	mov	r2, r8
 800adee:	464b      	mov	r3, r9
 800adf0:	1891      	adds	r1, r2, r2
 800adf2:	63b9      	str	r1, [r7, #56]	@ 0x38
 800adf4:	415b      	adcs	r3, r3
 800adf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800adf8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800adfc:	4641      	mov	r1, r8
 800adfe:	1851      	adds	r1, r2, r1
 800ae00:	6339      	str	r1, [r7, #48]	@ 0x30
 800ae02:	4649      	mov	r1, r9
 800ae04:	414b      	adcs	r3, r1
 800ae06:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae08:	f04f 0200 	mov.w	r2, #0
 800ae0c:	f04f 0300 	mov.w	r3, #0
 800ae10:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800ae14:	4659      	mov	r1, fp
 800ae16:	00cb      	lsls	r3, r1, #3
 800ae18:	4651      	mov	r1, sl
 800ae1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ae1e:	4651      	mov	r1, sl
 800ae20:	00ca      	lsls	r2, r1, #3
 800ae22:	4610      	mov	r0, r2
 800ae24:	4619      	mov	r1, r3
 800ae26:	4603      	mov	r3, r0
 800ae28:	4642      	mov	r2, r8
 800ae2a:	189b      	adds	r3, r3, r2
 800ae2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ae30:	464b      	mov	r3, r9
 800ae32:	460a      	mov	r2, r1
 800ae34:	eb42 0303 	adc.w	r3, r2, r3
 800ae38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ae3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae40:	685b      	ldr	r3, [r3, #4]
 800ae42:	2200      	movs	r2, #0
 800ae44:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ae48:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800ae4c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800ae50:	460b      	mov	r3, r1
 800ae52:	18db      	adds	r3, r3, r3
 800ae54:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ae56:	4613      	mov	r3, r2
 800ae58:	eb42 0303 	adc.w	r3, r2, r3
 800ae5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ae5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800ae62:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800ae66:	f7f5 ff77 	bl	8000d58 <__aeabi_uldivmod>
 800ae6a:	4602      	mov	r2, r0
 800ae6c:	460b      	mov	r3, r1
 800ae6e:	4b0d      	ldr	r3, [pc, #52]	@ (800aea4 <UART_SetConfig+0x2d4>)
 800ae70:	fba3 1302 	umull	r1, r3, r3, r2
 800ae74:	095b      	lsrs	r3, r3, #5
 800ae76:	2164      	movs	r1, #100	@ 0x64
 800ae78:	fb01 f303 	mul.w	r3, r1, r3
 800ae7c:	1ad3      	subs	r3, r2, r3
 800ae7e:	00db      	lsls	r3, r3, #3
 800ae80:	3332      	adds	r3, #50	@ 0x32
 800ae82:	4a08      	ldr	r2, [pc, #32]	@ (800aea4 <UART_SetConfig+0x2d4>)
 800ae84:	fba2 2303 	umull	r2, r3, r2, r3
 800ae88:	095b      	lsrs	r3, r3, #5
 800ae8a:	f003 0207 	and.w	r2, r3, #7
 800ae8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	4422      	add	r2, r4
 800ae96:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ae98:	e106      	b.n	800b0a8 <UART_SetConfig+0x4d8>
 800ae9a:	bf00      	nop
 800ae9c:	40011000 	.word	0x40011000
 800aea0:	40011400 	.word	0x40011400
 800aea4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800aea8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800aeac:	2200      	movs	r2, #0
 800aeae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800aeb2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800aeb6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800aeba:	4642      	mov	r2, r8
 800aebc:	464b      	mov	r3, r9
 800aebe:	1891      	adds	r1, r2, r2
 800aec0:	6239      	str	r1, [r7, #32]
 800aec2:	415b      	adcs	r3, r3
 800aec4:	627b      	str	r3, [r7, #36]	@ 0x24
 800aec6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800aeca:	4641      	mov	r1, r8
 800aecc:	1854      	adds	r4, r2, r1
 800aece:	4649      	mov	r1, r9
 800aed0:	eb43 0501 	adc.w	r5, r3, r1
 800aed4:	f04f 0200 	mov.w	r2, #0
 800aed8:	f04f 0300 	mov.w	r3, #0
 800aedc:	00eb      	lsls	r3, r5, #3
 800aede:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800aee2:	00e2      	lsls	r2, r4, #3
 800aee4:	4614      	mov	r4, r2
 800aee6:	461d      	mov	r5, r3
 800aee8:	4643      	mov	r3, r8
 800aeea:	18e3      	adds	r3, r4, r3
 800aeec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800aef0:	464b      	mov	r3, r9
 800aef2:	eb45 0303 	adc.w	r3, r5, r3
 800aef6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800aefa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aefe:	685b      	ldr	r3, [r3, #4]
 800af00:	2200      	movs	r2, #0
 800af02:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800af06:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800af0a:	f04f 0200 	mov.w	r2, #0
 800af0e:	f04f 0300 	mov.w	r3, #0
 800af12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800af16:	4629      	mov	r1, r5
 800af18:	008b      	lsls	r3, r1, #2
 800af1a:	4621      	mov	r1, r4
 800af1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800af20:	4621      	mov	r1, r4
 800af22:	008a      	lsls	r2, r1, #2
 800af24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800af28:	f7f5 ff16 	bl	8000d58 <__aeabi_uldivmod>
 800af2c:	4602      	mov	r2, r0
 800af2e:	460b      	mov	r3, r1
 800af30:	4b60      	ldr	r3, [pc, #384]	@ (800b0b4 <UART_SetConfig+0x4e4>)
 800af32:	fba3 2302 	umull	r2, r3, r3, r2
 800af36:	095b      	lsrs	r3, r3, #5
 800af38:	011c      	lsls	r4, r3, #4
 800af3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800af3e:	2200      	movs	r2, #0
 800af40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800af44:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800af48:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800af4c:	4642      	mov	r2, r8
 800af4e:	464b      	mov	r3, r9
 800af50:	1891      	adds	r1, r2, r2
 800af52:	61b9      	str	r1, [r7, #24]
 800af54:	415b      	adcs	r3, r3
 800af56:	61fb      	str	r3, [r7, #28]
 800af58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800af5c:	4641      	mov	r1, r8
 800af5e:	1851      	adds	r1, r2, r1
 800af60:	6139      	str	r1, [r7, #16]
 800af62:	4649      	mov	r1, r9
 800af64:	414b      	adcs	r3, r1
 800af66:	617b      	str	r3, [r7, #20]
 800af68:	f04f 0200 	mov.w	r2, #0
 800af6c:	f04f 0300 	mov.w	r3, #0
 800af70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800af74:	4659      	mov	r1, fp
 800af76:	00cb      	lsls	r3, r1, #3
 800af78:	4651      	mov	r1, sl
 800af7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800af7e:	4651      	mov	r1, sl
 800af80:	00ca      	lsls	r2, r1, #3
 800af82:	4610      	mov	r0, r2
 800af84:	4619      	mov	r1, r3
 800af86:	4603      	mov	r3, r0
 800af88:	4642      	mov	r2, r8
 800af8a:	189b      	adds	r3, r3, r2
 800af8c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800af90:	464b      	mov	r3, r9
 800af92:	460a      	mov	r2, r1
 800af94:	eb42 0303 	adc.w	r3, r2, r3
 800af98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800af9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800afa0:	685b      	ldr	r3, [r3, #4]
 800afa2:	2200      	movs	r2, #0
 800afa4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800afa6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800afa8:	f04f 0200 	mov.w	r2, #0
 800afac:	f04f 0300 	mov.w	r3, #0
 800afb0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800afb4:	4649      	mov	r1, r9
 800afb6:	008b      	lsls	r3, r1, #2
 800afb8:	4641      	mov	r1, r8
 800afba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800afbe:	4641      	mov	r1, r8
 800afc0:	008a      	lsls	r2, r1, #2
 800afc2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800afc6:	f7f5 fec7 	bl	8000d58 <__aeabi_uldivmod>
 800afca:	4602      	mov	r2, r0
 800afcc:	460b      	mov	r3, r1
 800afce:	4611      	mov	r1, r2
 800afd0:	4b38      	ldr	r3, [pc, #224]	@ (800b0b4 <UART_SetConfig+0x4e4>)
 800afd2:	fba3 2301 	umull	r2, r3, r3, r1
 800afd6:	095b      	lsrs	r3, r3, #5
 800afd8:	2264      	movs	r2, #100	@ 0x64
 800afda:	fb02 f303 	mul.w	r3, r2, r3
 800afde:	1acb      	subs	r3, r1, r3
 800afe0:	011b      	lsls	r3, r3, #4
 800afe2:	3332      	adds	r3, #50	@ 0x32
 800afe4:	4a33      	ldr	r2, [pc, #204]	@ (800b0b4 <UART_SetConfig+0x4e4>)
 800afe6:	fba2 2303 	umull	r2, r3, r2, r3
 800afea:	095b      	lsrs	r3, r3, #5
 800afec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800aff0:	441c      	add	r4, r3
 800aff2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800aff6:	2200      	movs	r2, #0
 800aff8:	673b      	str	r3, [r7, #112]	@ 0x70
 800affa:	677a      	str	r2, [r7, #116]	@ 0x74
 800affc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800b000:	4642      	mov	r2, r8
 800b002:	464b      	mov	r3, r9
 800b004:	1891      	adds	r1, r2, r2
 800b006:	60b9      	str	r1, [r7, #8]
 800b008:	415b      	adcs	r3, r3
 800b00a:	60fb      	str	r3, [r7, #12]
 800b00c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b010:	4641      	mov	r1, r8
 800b012:	1851      	adds	r1, r2, r1
 800b014:	6039      	str	r1, [r7, #0]
 800b016:	4649      	mov	r1, r9
 800b018:	414b      	adcs	r3, r1
 800b01a:	607b      	str	r3, [r7, #4]
 800b01c:	f04f 0200 	mov.w	r2, #0
 800b020:	f04f 0300 	mov.w	r3, #0
 800b024:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b028:	4659      	mov	r1, fp
 800b02a:	00cb      	lsls	r3, r1, #3
 800b02c:	4651      	mov	r1, sl
 800b02e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b032:	4651      	mov	r1, sl
 800b034:	00ca      	lsls	r2, r1, #3
 800b036:	4610      	mov	r0, r2
 800b038:	4619      	mov	r1, r3
 800b03a:	4603      	mov	r3, r0
 800b03c:	4642      	mov	r2, r8
 800b03e:	189b      	adds	r3, r3, r2
 800b040:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b042:	464b      	mov	r3, r9
 800b044:	460a      	mov	r2, r1
 800b046:	eb42 0303 	adc.w	r3, r2, r3
 800b04a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b04c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b050:	685b      	ldr	r3, [r3, #4]
 800b052:	2200      	movs	r2, #0
 800b054:	663b      	str	r3, [r7, #96]	@ 0x60
 800b056:	667a      	str	r2, [r7, #100]	@ 0x64
 800b058:	f04f 0200 	mov.w	r2, #0
 800b05c:	f04f 0300 	mov.w	r3, #0
 800b060:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800b064:	4649      	mov	r1, r9
 800b066:	008b      	lsls	r3, r1, #2
 800b068:	4641      	mov	r1, r8
 800b06a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b06e:	4641      	mov	r1, r8
 800b070:	008a      	lsls	r2, r1, #2
 800b072:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800b076:	f7f5 fe6f 	bl	8000d58 <__aeabi_uldivmod>
 800b07a:	4602      	mov	r2, r0
 800b07c:	460b      	mov	r3, r1
 800b07e:	4b0d      	ldr	r3, [pc, #52]	@ (800b0b4 <UART_SetConfig+0x4e4>)
 800b080:	fba3 1302 	umull	r1, r3, r3, r2
 800b084:	095b      	lsrs	r3, r3, #5
 800b086:	2164      	movs	r1, #100	@ 0x64
 800b088:	fb01 f303 	mul.w	r3, r1, r3
 800b08c:	1ad3      	subs	r3, r2, r3
 800b08e:	011b      	lsls	r3, r3, #4
 800b090:	3332      	adds	r3, #50	@ 0x32
 800b092:	4a08      	ldr	r2, [pc, #32]	@ (800b0b4 <UART_SetConfig+0x4e4>)
 800b094:	fba2 2303 	umull	r2, r3, r2, r3
 800b098:	095b      	lsrs	r3, r3, #5
 800b09a:	f003 020f 	and.w	r2, r3, #15
 800b09e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	4422      	add	r2, r4
 800b0a6:	609a      	str	r2, [r3, #8]
}
 800b0a8:	bf00      	nop
 800b0aa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b0b4:	51eb851f 	.word	0x51eb851f

0800b0b8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800b0bc:	4904      	ldr	r1, [pc, #16]	@ (800b0d0 <MX_FATFS_Init+0x18>)
 800b0be:	4805      	ldr	r0, [pc, #20]	@ (800b0d4 <MX_FATFS_Init+0x1c>)
 800b0c0:	f000 f8b0 	bl	800b224 <FATFS_LinkDriver>
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	461a      	mov	r2, r3
 800b0c8:	4b03      	ldr	r3, [pc, #12]	@ (800b0d8 <MX_FATFS_Init+0x20>)
 800b0ca:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b0cc:	bf00      	nop
 800b0ce:	bd80      	pop	{r7, pc}
 800b0d0:	200025f0 	.word	0x200025f0
 800b0d4:	20000010 	.word	0x20000010
 800b0d8:	200025ec 	.word	0x200025ec

0800b0dc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800b0dc:	b480      	push	{r7}
 800b0de:	b083      	sub	sp, #12
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800b0e6:	4b06      	ldr	r3, [pc, #24]	@ (800b100 <USER_initialize+0x24>)
 800b0e8:	2201      	movs	r2, #1
 800b0ea:	701a      	strb	r2, [r3, #0]
    return Stat;
 800b0ec:	4b04      	ldr	r3, [pc, #16]	@ (800b100 <USER_initialize+0x24>)
 800b0ee:	781b      	ldrb	r3, [r3, #0]
 800b0f0:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	370c      	adds	r7, #12
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fc:	4770      	bx	lr
 800b0fe:	bf00      	nop
 800b100:	2000000d 	.word	0x2000000d

0800b104 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800b104:	b480      	push	{r7}
 800b106:	b083      	sub	sp, #12
 800b108:	af00      	add	r7, sp, #0
 800b10a:	4603      	mov	r3, r0
 800b10c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800b10e:	4b06      	ldr	r3, [pc, #24]	@ (800b128 <USER_status+0x24>)
 800b110:	2201      	movs	r2, #1
 800b112:	701a      	strb	r2, [r3, #0]
    return Stat;
 800b114:	4b04      	ldr	r3, [pc, #16]	@ (800b128 <USER_status+0x24>)
 800b116:	781b      	ldrb	r3, [r3, #0]
 800b118:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	370c      	adds	r7, #12
 800b11e:	46bd      	mov	sp, r7
 800b120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b124:	4770      	bx	lr
 800b126:	bf00      	nop
 800b128:	2000000d 	.word	0x2000000d

0800b12c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800b12c:	b480      	push	{r7}
 800b12e:	b085      	sub	sp, #20
 800b130:	af00      	add	r7, sp, #0
 800b132:	60b9      	str	r1, [r7, #8]
 800b134:	607a      	str	r2, [r7, #4]
 800b136:	603b      	str	r3, [r7, #0]
 800b138:	4603      	mov	r3, r0
 800b13a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800b13c:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800b13e:	4618      	mov	r0, r3
 800b140:	3714      	adds	r7, #20
 800b142:	46bd      	mov	sp, r7
 800b144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b148:	4770      	bx	lr

0800b14a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800b14a:	b480      	push	{r7}
 800b14c:	b085      	sub	sp, #20
 800b14e:	af00      	add	r7, sp, #0
 800b150:	60b9      	str	r1, [r7, #8]
 800b152:	607a      	str	r2, [r7, #4]
 800b154:	603b      	str	r3, [r7, #0]
 800b156:	4603      	mov	r3, r0
 800b158:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800b15a:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800b15c:	4618      	mov	r0, r3
 800b15e:	3714      	adds	r7, #20
 800b160:	46bd      	mov	sp, r7
 800b162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b166:	4770      	bx	lr

0800b168 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800b168:	b480      	push	{r7}
 800b16a:	b085      	sub	sp, #20
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	4603      	mov	r3, r0
 800b170:	603a      	str	r2, [r7, #0]
 800b172:	71fb      	strb	r3, [r7, #7]
 800b174:	460b      	mov	r3, r1
 800b176:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800b178:	2301      	movs	r3, #1
 800b17a:	73fb      	strb	r3, [r7, #15]
    return res;
 800b17c:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800b17e:	4618      	mov	r0, r3
 800b180:	3714      	adds	r7, #20
 800b182:	46bd      	mov	sp, r7
 800b184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b188:	4770      	bx	lr
	...

0800b18c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b18c:	b480      	push	{r7}
 800b18e:	b087      	sub	sp, #28
 800b190:	af00      	add	r7, sp, #0
 800b192:	60f8      	str	r0, [r7, #12]
 800b194:	60b9      	str	r1, [r7, #8]
 800b196:	4613      	mov	r3, r2
 800b198:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b19a:	2301      	movs	r3, #1
 800b19c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b19e:	2300      	movs	r3, #0
 800b1a0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b1a2:	4b1f      	ldr	r3, [pc, #124]	@ (800b220 <FATFS_LinkDriverEx+0x94>)
 800b1a4:	7a5b      	ldrb	r3, [r3, #9]
 800b1a6:	b2db      	uxtb	r3, r3
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d131      	bne.n	800b210 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b1ac:	4b1c      	ldr	r3, [pc, #112]	@ (800b220 <FATFS_LinkDriverEx+0x94>)
 800b1ae:	7a5b      	ldrb	r3, [r3, #9]
 800b1b0:	b2db      	uxtb	r3, r3
 800b1b2:	461a      	mov	r2, r3
 800b1b4:	4b1a      	ldr	r3, [pc, #104]	@ (800b220 <FATFS_LinkDriverEx+0x94>)
 800b1b6:	2100      	movs	r1, #0
 800b1b8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b1ba:	4b19      	ldr	r3, [pc, #100]	@ (800b220 <FATFS_LinkDriverEx+0x94>)
 800b1bc:	7a5b      	ldrb	r3, [r3, #9]
 800b1be:	b2db      	uxtb	r3, r3
 800b1c0:	4a17      	ldr	r2, [pc, #92]	@ (800b220 <FATFS_LinkDriverEx+0x94>)
 800b1c2:	009b      	lsls	r3, r3, #2
 800b1c4:	4413      	add	r3, r2
 800b1c6:	68fa      	ldr	r2, [r7, #12]
 800b1c8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b1ca:	4b15      	ldr	r3, [pc, #84]	@ (800b220 <FATFS_LinkDriverEx+0x94>)
 800b1cc:	7a5b      	ldrb	r3, [r3, #9]
 800b1ce:	b2db      	uxtb	r3, r3
 800b1d0:	461a      	mov	r2, r3
 800b1d2:	4b13      	ldr	r3, [pc, #76]	@ (800b220 <FATFS_LinkDriverEx+0x94>)
 800b1d4:	4413      	add	r3, r2
 800b1d6:	79fa      	ldrb	r2, [r7, #7]
 800b1d8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b1da:	4b11      	ldr	r3, [pc, #68]	@ (800b220 <FATFS_LinkDriverEx+0x94>)
 800b1dc:	7a5b      	ldrb	r3, [r3, #9]
 800b1de:	b2db      	uxtb	r3, r3
 800b1e0:	1c5a      	adds	r2, r3, #1
 800b1e2:	b2d1      	uxtb	r1, r2
 800b1e4:	4a0e      	ldr	r2, [pc, #56]	@ (800b220 <FATFS_LinkDriverEx+0x94>)
 800b1e6:	7251      	strb	r1, [r2, #9]
 800b1e8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b1ea:	7dbb      	ldrb	r3, [r7, #22]
 800b1ec:	3330      	adds	r3, #48	@ 0x30
 800b1ee:	b2da      	uxtb	r2, r3
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	3301      	adds	r3, #1
 800b1f8:	223a      	movs	r2, #58	@ 0x3a
 800b1fa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b1fc:	68bb      	ldr	r3, [r7, #8]
 800b1fe:	3302      	adds	r3, #2
 800b200:	222f      	movs	r2, #47	@ 0x2f
 800b202:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b204:	68bb      	ldr	r3, [r7, #8]
 800b206:	3303      	adds	r3, #3
 800b208:	2200      	movs	r2, #0
 800b20a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b20c:	2300      	movs	r3, #0
 800b20e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b210:	7dfb      	ldrb	r3, [r7, #23]
}
 800b212:	4618      	mov	r0, r3
 800b214:	371c      	adds	r7, #28
 800b216:	46bd      	mov	sp, r7
 800b218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21c:	4770      	bx	lr
 800b21e:	bf00      	nop
 800b220:	200025f4 	.word	0x200025f4

0800b224 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b082      	sub	sp, #8
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
 800b22c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b22e:	2200      	movs	r2, #0
 800b230:	6839      	ldr	r1, [r7, #0]
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f7ff ffaa 	bl	800b18c <FATFS_LinkDriverEx>
 800b238:	4603      	mov	r3, r0
}
 800b23a:	4618      	mov	r0, r3
 800b23c:	3708      	adds	r7, #8
 800b23e:	46bd      	mov	sp, r7
 800b240:	bd80      	pop	{r7, pc}
	...

0800b244 <malloc>:
 800b244:	4b02      	ldr	r3, [pc, #8]	@ (800b250 <malloc+0xc>)
 800b246:	4601      	mov	r1, r0
 800b248:	6818      	ldr	r0, [r3, #0]
 800b24a:	f000 b82d 	b.w	800b2a8 <_malloc_r>
 800b24e:	bf00      	nop
 800b250:	2000019c 	.word	0x2000019c

0800b254 <free>:
 800b254:	4b02      	ldr	r3, [pc, #8]	@ (800b260 <free+0xc>)
 800b256:	4601      	mov	r1, r0
 800b258:	6818      	ldr	r0, [r3, #0]
 800b25a:	f001 b87d 	b.w	800c358 <_free_r>
 800b25e:	bf00      	nop
 800b260:	2000019c 	.word	0x2000019c

0800b264 <sbrk_aligned>:
 800b264:	b570      	push	{r4, r5, r6, lr}
 800b266:	4e0f      	ldr	r6, [pc, #60]	@ (800b2a4 <sbrk_aligned+0x40>)
 800b268:	460c      	mov	r4, r1
 800b26a:	6831      	ldr	r1, [r6, #0]
 800b26c:	4605      	mov	r5, r0
 800b26e:	b911      	cbnz	r1, 800b276 <sbrk_aligned+0x12>
 800b270:	f001 f80a 	bl	800c288 <_sbrk_r>
 800b274:	6030      	str	r0, [r6, #0]
 800b276:	4621      	mov	r1, r4
 800b278:	4628      	mov	r0, r5
 800b27a:	f001 f805 	bl	800c288 <_sbrk_r>
 800b27e:	1c43      	adds	r3, r0, #1
 800b280:	d103      	bne.n	800b28a <sbrk_aligned+0x26>
 800b282:	f04f 34ff 	mov.w	r4, #4294967295
 800b286:	4620      	mov	r0, r4
 800b288:	bd70      	pop	{r4, r5, r6, pc}
 800b28a:	1cc4      	adds	r4, r0, #3
 800b28c:	f024 0403 	bic.w	r4, r4, #3
 800b290:	42a0      	cmp	r0, r4
 800b292:	d0f8      	beq.n	800b286 <sbrk_aligned+0x22>
 800b294:	1a21      	subs	r1, r4, r0
 800b296:	4628      	mov	r0, r5
 800b298:	f000 fff6 	bl	800c288 <_sbrk_r>
 800b29c:	3001      	adds	r0, #1
 800b29e:	d1f2      	bne.n	800b286 <sbrk_aligned+0x22>
 800b2a0:	e7ef      	b.n	800b282 <sbrk_aligned+0x1e>
 800b2a2:	bf00      	nop
 800b2a4:	20002600 	.word	0x20002600

0800b2a8 <_malloc_r>:
 800b2a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2ac:	1ccd      	adds	r5, r1, #3
 800b2ae:	f025 0503 	bic.w	r5, r5, #3
 800b2b2:	3508      	adds	r5, #8
 800b2b4:	2d0c      	cmp	r5, #12
 800b2b6:	bf38      	it	cc
 800b2b8:	250c      	movcc	r5, #12
 800b2ba:	2d00      	cmp	r5, #0
 800b2bc:	4606      	mov	r6, r0
 800b2be:	db01      	blt.n	800b2c4 <_malloc_r+0x1c>
 800b2c0:	42a9      	cmp	r1, r5
 800b2c2:	d904      	bls.n	800b2ce <_malloc_r+0x26>
 800b2c4:	230c      	movs	r3, #12
 800b2c6:	6033      	str	r3, [r6, #0]
 800b2c8:	2000      	movs	r0, #0
 800b2ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b3a4 <_malloc_r+0xfc>
 800b2d2:	f000 f869 	bl	800b3a8 <__malloc_lock>
 800b2d6:	f8d8 3000 	ldr.w	r3, [r8]
 800b2da:	461c      	mov	r4, r3
 800b2dc:	bb44      	cbnz	r4, 800b330 <_malloc_r+0x88>
 800b2de:	4629      	mov	r1, r5
 800b2e0:	4630      	mov	r0, r6
 800b2e2:	f7ff ffbf 	bl	800b264 <sbrk_aligned>
 800b2e6:	1c43      	adds	r3, r0, #1
 800b2e8:	4604      	mov	r4, r0
 800b2ea:	d158      	bne.n	800b39e <_malloc_r+0xf6>
 800b2ec:	f8d8 4000 	ldr.w	r4, [r8]
 800b2f0:	4627      	mov	r7, r4
 800b2f2:	2f00      	cmp	r7, #0
 800b2f4:	d143      	bne.n	800b37e <_malloc_r+0xd6>
 800b2f6:	2c00      	cmp	r4, #0
 800b2f8:	d04b      	beq.n	800b392 <_malloc_r+0xea>
 800b2fa:	6823      	ldr	r3, [r4, #0]
 800b2fc:	4639      	mov	r1, r7
 800b2fe:	4630      	mov	r0, r6
 800b300:	eb04 0903 	add.w	r9, r4, r3
 800b304:	f000 ffc0 	bl	800c288 <_sbrk_r>
 800b308:	4581      	cmp	r9, r0
 800b30a:	d142      	bne.n	800b392 <_malloc_r+0xea>
 800b30c:	6821      	ldr	r1, [r4, #0]
 800b30e:	1a6d      	subs	r5, r5, r1
 800b310:	4629      	mov	r1, r5
 800b312:	4630      	mov	r0, r6
 800b314:	f7ff ffa6 	bl	800b264 <sbrk_aligned>
 800b318:	3001      	adds	r0, #1
 800b31a:	d03a      	beq.n	800b392 <_malloc_r+0xea>
 800b31c:	6823      	ldr	r3, [r4, #0]
 800b31e:	442b      	add	r3, r5
 800b320:	6023      	str	r3, [r4, #0]
 800b322:	f8d8 3000 	ldr.w	r3, [r8]
 800b326:	685a      	ldr	r2, [r3, #4]
 800b328:	bb62      	cbnz	r2, 800b384 <_malloc_r+0xdc>
 800b32a:	f8c8 7000 	str.w	r7, [r8]
 800b32e:	e00f      	b.n	800b350 <_malloc_r+0xa8>
 800b330:	6822      	ldr	r2, [r4, #0]
 800b332:	1b52      	subs	r2, r2, r5
 800b334:	d420      	bmi.n	800b378 <_malloc_r+0xd0>
 800b336:	2a0b      	cmp	r2, #11
 800b338:	d917      	bls.n	800b36a <_malloc_r+0xc2>
 800b33a:	1961      	adds	r1, r4, r5
 800b33c:	42a3      	cmp	r3, r4
 800b33e:	6025      	str	r5, [r4, #0]
 800b340:	bf18      	it	ne
 800b342:	6059      	strne	r1, [r3, #4]
 800b344:	6863      	ldr	r3, [r4, #4]
 800b346:	bf08      	it	eq
 800b348:	f8c8 1000 	streq.w	r1, [r8]
 800b34c:	5162      	str	r2, [r4, r5]
 800b34e:	604b      	str	r3, [r1, #4]
 800b350:	4630      	mov	r0, r6
 800b352:	f000 f82f 	bl	800b3b4 <__malloc_unlock>
 800b356:	f104 000b 	add.w	r0, r4, #11
 800b35a:	1d23      	adds	r3, r4, #4
 800b35c:	f020 0007 	bic.w	r0, r0, #7
 800b360:	1ac2      	subs	r2, r0, r3
 800b362:	bf1c      	itt	ne
 800b364:	1a1b      	subne	r3, r3, r0
 800b366:	50a3      	strne	r3, [r4, r2]
 800b368:	e7af      	b.n	800b2ca <_malloc_r+0x22>
 800b36a:	6862      	ldr	r2, [r4, #4]
 800b36c:	42a3      	cmp	r3, r4
 800b36e:	bf0c      	ite	eq
 800b370:	f8c8 2000 	streq.w	r2, [r8]
 800b374:	605a      	strne	r2, [r3, #4]
 800b376:	e7eb      	b.n	800b350 <_malloc_r+0xa8>
 800b378:	4623      	mov	r3, r4
 800b37a:	6864      	ldr	r4, [r4, #4]
 800b37c:	e7ae      	b.n	800b2dc <_malloc_r+0x34>
 800b37e:	463c      	mov	r4, r7
 800b380:	687f      	ldr	r7, [r7, #4]
 800b382:	e7b6      	b.n	800b2f2 <_malloc_r+0x4a>
 800b384:	461a      	mov	r2, r3
 800b386:	685b      	ldr	r3, [r3, #4]
 800b388:	42a3      	cmp	r3, r4
 800b38a:	d1fb      	bne.n	800b384 <_malloc_r+0xdc>
 800b38c:	2300      	movs	r3, #0
 800b38e:	6053      	str	r3, [r2, #4]
 800b390:	e7de      	b.n	800b350 <_malloc_r+0xa8>
 800b392:	230c      	movs	r3, #12
 800b394:	6033      	str	r3, [r6, #0]
 800b396:	4630      	mov	r0, r6
 800b398:	f000 f80c 	bl	800b3b4 <__malloc_unlock>
 800b39c:	e794      	b.n	800b2c8 <_malloc_r+0x20>
 800b39e:	6005      	str	r5, [r0, #0]
 800b3a0:	e7d6      	b.n	800b350 <_malloc_r+0xa8>
 800b3a2:	bf00      	nop
 800b3a4:	20002604 	.word	0x20002604

0800b3a8 <__malloc_lock>:
 800b3a8:	4801      	ldr	r0, [pc, #4]	@ (800b3b0 <__malloc_lock+0x8>)
 800b3aa:	f000 bfba 	b.w	800c322 <__retarget_lock_acquire_recursive>
 800b3ae:	bf00      	nop
 800b3b0:	20002748 	.word	0x20002748

0800b3b4 <__malloc_unlock>:
 800b3b4:	4801      	ldr	r0, [pc, #4]	@ (800b3bc <__malloc_unlock+0x8>)
 800b3b6:	f000 bfb5 	b.w	800c324 <__retarget_lock_release_recursive>
 800b3ba:	bf00      	nop
 800b3bc:	20002748 	.word	0x20002748

0800b3c0 <sulp>:
 800b3c0:	b570      	push	{r4, r5, r6, lr}
 800b3c2:	4604      	mov	r4, r0
 800b3c4:	460d      	mov	r5, r1
 800b3c6:	ec45 4b10 	vmov	d0, r4, r5
 800b3ca:	4616      	mov	r6, r2
 800b3cc:	f001 fece 	bl	800d16c <__ulp>
 800b3d0:	ec51 0b10 	vmov	r0, r1, d0
 800b3d4:	b17e      	cbz	r6, 800b3f6 <sulp+0x36>
 800b3d6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b3da:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	dd09      	ble.n	800b3f6 <sulp+0x36>
 800b3e2:	051b      	lsls	r3, r3, #20
 800b3e4:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b3e8:	2400      	movs	r4, #0
 800b3ea:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b3ee:	4622      	mov	r2, r4
 800b3f0:	462b      	mov	r3, r5
 800b3f2:	f7f5 f919 	bl	8000628 <__aeabi_dmul>
 800b3f6:	ec41 0b10 	vmov	d0, r0, r1
 800b3fa:	bd70      	pop	{r4, r5, r6, pc}
 800b3fc:	0000      	movs	r0, r0
	...

0800b400 <_strtod_l>:
 800b400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b404:	b09f      	sub	sp, #124	@ 0x7c
 800b406:	460c      	mov	r4, r1
 800b408:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b40a:	2200      	movs	r2, #0
 800b40c:	921a      	str	r2, [sp, #104]	@ 0x68
 800b40e:	9005      	str	r0, [sp, #20]
 800b410:	f04f 0a00 	mov.w	sl, #0
 800b414:	f04f 0b00 	mov.w	fp, #0
 800b418:	460a      	mov	r2, r1
 800b41a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b41c:	7811      	ldrb	r1, [r2, #0]
 800b41e:	292b      	cmp	r1, #43	@ 0x2b
 800b420:	d04a      	beq.n	800b4b8 <_strtod_l+0xb8>
 800b422:	d838      	bhi.n	800b496 <_strtod_l+0x96>
 800b424:	290d      	cmp	r1, #13
 800b426:	d832      	bhi.n	800b48e <_strtod_l+0x8e>
 800b428:	2908      	cmp	r1, #8
 800b42a:	d832      	bhi.n	800b492 <_strtod_l+0x92>
 800b42c:	2900      	cmp	r1, #0
 800b42e:	d03b      	beq.n	800b4a8 <_strtod_l+0xa8>
 800b430:	2200      	movs	r2, #0
 800b432:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b434:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b436:	782a      	ldrb	r2, [r5, #0]
 800b438:	2a30      	cmp	r2, #48	@ 0x30
 800b43a:	f040 80b3 	bne.w	800b5a4 <_strtod_l+0x1a4>
 800b43e:	786a      	ldrb	r2, [r5, #1]
 800b440:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b444:	2a58      	cmp	r2, #88	@ 0x58
 800b446:	d16e      	bne.n	800b526 <_strtod_l+0x126>
 800b448:	9302      	str	r3, [sp, #8]
 800b44a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b44c:	9301      	str	r3, [sp, #4]
 800b44e:	ab1a      	add	r3, sp, #104	@ 0x68
 800b450:	9300      	str	r3, [sp, #0]
 800b452:	4a8e      	ldr	r2, [pc, #568]	@ (800b68c <_strtod_l+0x28c>)
 800b454:	9805      	ldr	r0, [sp, #20]
 800b456:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b458:	a919      	add	r1, sp, #100	@ 0x64
 800b45a:	f001 f82f 	bl	800c4bc <__gethex>
 800b45e:	f010 060f 	ands.w	r6, r0, #15
 800b462:	4604      	mov	r4, r0
 800b464:	d005      	beq.n	800b472 <_strtod_l+0x72>
 800b466:	2e06      	cmp	r6, #6
 800b468:	d128      	bne.n	800b4bc <_strtod_l+0xbc>
 800b46a:	3501      	adds	r5, #1
 800b46c:	2300      	movs	r3, #0
 800b46e:	9519      	str	r5, [sp, #100]	@ 0x64
 800b470:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b472:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b474:	2b00      	cmp	r3, #0
 800b476:	f040 858e 	bne.w	800bf96 <_strtod_l+0xb96>
 800b47a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b47c:	b1cb      	cbz	r3, 800b4b2 <_strtod_l+0xb2>
 800b47e:	4652      	mov	r2, sl
 800b480:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800b484:	ec43 2b10 	vmov	d0, r2, r3
 800b488:	b01f      	add	sp, #124	@ 0x7c
 800b48a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b48e:	2920      	cmp	r1, #32
 800b490:	d1ce      	bne.n	800b430 <_strtod_l+0x30>
 800b492:	3201      	adds	r2, #1
 800b494:	e7c1      	b.n	800b41a <_strtod_l+0x1a>
 800b496:	292d      	cmp	r1, #45	@ 0x2d
 800b498:	d1ca      	bne.n	800b430 <_strtod_l+0x30>
 800b49a:	2101      	movs	r1, #1
 800b49c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b49e:	1c51      	adds	r1, r2, #1
 800b4a0:	9119      	str	r1, [sp, #100]	@ 0x64
 800b4a2:	7852      	ldrb	r2, [r2, #1]
 800b4a4:	2a00      	cmp	r2, #0
 800b4a6:	d1c5      	bne.n	800b434 <_strtod_l+0x34>
 800b4a8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b4aa:	9419      	str	r4, [sp, #100]	@ 0x64
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	f040 8570 	bne.w	800bf92 <_strtod_l+0xb92>
 800b4b2:	4652      	mov	r2, sl
 800b4b4:	465b      	mov	r3, fp
 800b4b6:	e7e5      	b.n	800b484 <_strtod_l+0x84>
 800b4b8:	2100      	movs	r1, #0
 800b4ba:	e7ef      	b.n	800b49c <_strtod_l+0x9c>
 800b4bc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b4be:	b13a      	cbz	r2, 800b4d0 <_strtod_l+0xd0>
 800b4c0:	2135      	movs	r1, #53	@ 0x35
 800b4c2:	a81c      	add	r0, sp, #112	@ 0x70
 800b4c4:	f001 ff4c 	bl	800d360 <__copybits>
 800b4c8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b4ca:	9805      	ldr	r0, [sp, #20]
 800b4cc:	f001 fb1a 	bl	800cb04 <_Bfree>
 800b4d0:	3e01      	subs	r6, #1
 800b4d2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b4d4:	2e04      	cmp	r6, #4
 800b4d6:	d806      	bhi.n	800b4e6 <_strtod_l+0xe6>
 800b4d8:	e8df f006 	tbb	[pc, r6]
 800b4dc:	201d0314 	.word	0x201d0314
 800b4e0:	14          	.byte	0x14
 800b4e1:	00          	.byte	0x00
 800b4e2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b4e6:	05e1      	lsls	r1, r4, #23
 800b4e8:	bf48      	it	mi
 800b4ea:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b4ee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b4f2:	0d1b      	lsrs	r3, r3, #20
 800b4f4:	051b      	lsls	r3, r3, #20
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d1bb      	bne.n	800b472 <_strtod_l+0x72>
 800b4fa:	f000 fee7 	bl	800c2cc <__errno>
 800b4fe:	2322      	movs	r3, #34	@ 0x22
 800b500:	6003      	str	r3, [r0, #0]
 800b502:	e7b6      	b.n	800b472 <_strtod_l+0x72>
 800b504:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b508:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b50c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b510:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b514:	e7e7      	b.n	800b4e6 <_strtod_l+0xe6>
 800b516:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800b694 <_strtod_l+0x294>
 800b51a:	e7e4      	b.n	800b4e6 <_strtod_l+0xe6>
 800b51c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b520:	f04f 3aff 	mov.w	sl, #4294967295
 800b524:	e7df      	b.n	800b4e6 <_strtod_l+0xe6>
 800b526:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b528:	1c5a      	adds	r2, r3, #1
 800b52a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b52c:	785b      	ldrb	r3, [r3, #1]
 800b52e:	2b30      	cmp	r3, #48	@ 0x30
 800b530:	d0f9      	beq.n	800b526 <_strtod_l+0x126>
 800b532:	2b00      	cmp	r3, #0
 800b534:	d09d      	beq.n	800b472 <_strtod_l+0x72>
 800b536:	2301      	movs	r3, #1
 800b538:	9309      	str	r3, [sp, #36]	@ 0x24
 800b53a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b53c:	930c      	str	r3, [sp, #48]	@ 0x30
 800b53e:	2300      	movs	r3, #0
 800b540:	9308      	str	r3, [sp, #32]
 800b542:	930a      	str	r3, [sp, #40]	@ 0x28
 800b544:	461f      	mov	r7, r3
 800b546:	220a      	movs	r2, #10
 800b548:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b54a:	7805      	ldrb	r5, [r0, #0]
 800b54c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b550:	b2d9      	uxtb	r1, r3
 800b552:	2909      	cmp	r1, #9
 800b554:	d928      	bls.n	800b5a8 <_strtod_l+0x1a8>
 800b556:	494e      	ldr	r1, [pc, #312]	@ (800b690 <_strtod_l+0x290>)
 800b558:	2201      	movs	r2, #1
 800b55a:	f000 fe4e 	bl	800c1fa <strncmp>
 800b55e:	2800      	cmp	r0, #0
 800b560:	d032      	beq.n	800b5c8 <_strtod_l+0x1c8>
 800b562:	2000      	movs	r0, #0
 800b564:	462a      	mov	r2, r5
 800b566:	4681      	mov	r9, r0
 800b568:	463d      	mov	r5, r7
 800b56a:	4603      	mov	r3, r0
 800b56c:	2a65      	cmp	r2, #101	@ 0x65
 800b56e:	d001      	beq.n	800b574 <_strtod_l+0x174>
 800b570:	2a45      	cmp	r2, #69	@ 0x45
 800b572:	d114      	bne.n	800b59e <_strtod_l+0x19e>
 800b574:	b91d      	cbnz	r5, 800b57e <_strtod_l+0x17e>
 800b576:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b578:	4302      	orrs	r2, r0
 800b57a:	d095      	beq.n	800b4a8 <_strtod_l+0xa8>
 800b57c:	2500      	movs	r5, #0
 800b57e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b580:	1c62      	adds	r2, r4, #1
 800b582:	9219      	str	r2, [sp, #100]	@ 0x64
 800b584:	7862      	ldrb	r2, [r4, #1]
 800b586:	2a2b      	cmp	r2, #43	@ 0x2b
 800b588:	d077      	beq.n	800b67a <_strtod_l+0x27a>
 800b58a:	2a2d      	cmp	r2, #45	@ 0x2d
 800b58c:	d07b      	beq.n	800b686 <_strtod_l+0x286>
 800b58e:	f04f 0c00 	mov.w	ip, #0
 800b592:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b596:	2909      	cmp	r1, #9
 800b598:	f240 8082 	bls.w	800b6a0 <_strtod_l+0x2a0>
 800b59c:	9419      	str	r4, [sp, #100]	@ 0x64
 800b59e:	f04f 0800 	mov.w	r8, #0
 800b5a2:	e0a2      	b.n	800b6ea <_strtod_l+0x2ea>
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	e7c7      	b.n	800b538 <_strtod_l+0x138>
 800b5a8:	2f08      	cmp	r7, #8
 800b5aa:	bfd5      	itete	le
 800b5ac:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800b5ae:	9908      	ldrgt	r1, [sp, #32]
 800b5b0:	fb02 3301 	mlale	r3, r2, r1, r3
 800b5b4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800b5b8:	f100 0001 	add.w	r0, r0, #1
 800b5bc:	bfd4      	ite	le
 800b5be:	930a      	strle	r3, [sp, #40]	@ 0x28
 800b5c0:	9308      	strgt	r3, [sp, #32]
 800b5c2:	3701      	adds	r7, #1
 800b5c4:	9019      	str	r0, [sp, #100]	@ 0x64
 800b5c6:	e7bf      	b.n	800b548 <_strtod_l+0x148>
 800b5c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b5ca:	1c5a      	adds	r2, r3, #1
 800b5cc:	9219      	str	r2, [sp, #100]	@ 0x64
 800b5ce:	785a      	ldrb	r2, [r3, #1]
 800b5d0:	b37f      	cbz	r7, 800b632 <_strtod_l+0x232>
 800b5d2:	4681      	mov	r9, r0
 800b5d4:	463d      	mov	r5, r7
 800b5d6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b5da:	2b09      	cmp	r3, #9
 800b5dc:	d912      	bls.n	800b604 <_strtod_l+0x204>
 800b5de:	2301      	movs	r3, #1
 800b5e0:	e7c4      	b.n	800b56c <_strtod_l+0x16c>
 800b5e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b5e4:	1c5a      	adds	r2, r3, #1
 800b5e6:	9219      	str	r2, [sp, #100]	@ 0x64
 800b5e8:	785a      	ldrb	r2, [r3, #1]
 800b5ea:	3001      	adds	r0, #1
 800b5ec:	2a30      	cmp	r2, #48	@ 0x30
 800b5ee:	d0f8      	beq.n	800b5e2 <_strtod_l+0x1e2>
 800b5f0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b5f4:	2b08      	cmp	r3, #8
 800b5f6:	f200 84d3 	bhi.w	800bfa0 <_strtod_l+0xba0>
 800b5fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b5fc:	930c      	str	r3, [sp, #48]	@ 0x30
 800b5fe:	4681      	mov	r9, r0
 800b600:	2000      	movs	r0, #0
 800b602:	4605      	mov	r5, r0
 800b604:	3a30      	subs	r2, #48	@ 0x30
 800b606:	f100 0301 	add.w	r3, r0, #1
 800b60a:	d02a      	beq.n	800b662 <_strtod_l+0x262>
 800b60c:	4499      	add	r9, r3
 800b60e:	eb00 0c05 	add.w	ip, r0, r5
 800b612:	462b      	mov	r3, r5
 800b614:	210a      	movs	r1, #10
 800b616:	4563      	cmp	r3, ip
 800b618:	d10d      	bne.n	800b636 <_strtod_l+0x236>
 800b61a:	1c69      	adds	r1, r5, #1
 800b61c:	4401      	add	r1, r0
 800b61e:	4428      	add	r0, r5
 800b620:	2808      	cmp	r0, #8
 800b622:	dc16      	bgt.n	800b652 <_strtod_l+0x252>
 800b624:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b626:	230a      	movs	r3, #10
 800b628:	fb03 2300 	mla	r3, r3, r0, r2
 800b62c:	930a      	str	r3, [sp, #40]	@ 0x28
 800b62e:	2300      	movs	r3, #0
 800b630:	e018      	b.n	800b664 <_strtod_l+0x264>
 800b632:	4638      	mov	r0, r7
 800b634:	e7da      	b.n	800b5ec <_strtod_l+0x1ec>
 800b636:	2b08      	cmp	r3, #8
 800b638:	f103 0301 	add.w	r3, r3, #1
 800b63c:	dc03      	bgt.n	800b646 <_strtod_l+0x246>
 800b63e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b640:	434e      	muls	r6, r1
 800b642:	960a      	str	r6, [sp, #40]	@ 0x28
 800b644:	e7e7      	b.n	800b616 <_strtod_l+0x216>
 800b646:	2b10      	cmp	r3, #16
 800b648:	bfde      	ittt	le
 800b64a:	9e08      	ldrle	r6, [sp, #32]
 800b64c:	434e      	mulle	r6, r1
 800b64e:	9608      	strle	r6, [sp, #32]
 800b650:	e7e1      	b.n	800b616 <_strtod_l+0x216>
 800b652:	280f      	cmp	r0, #15
 800b654:	dceb      	bgt.n	800b62e <_strtod_l+0x22e>
 800b656:	9808      	ldr	r0, [sp, #32]
 800b658:	230a      	movs	r3, #10
 800b65a:	fb03 2300 	mla	r3, r3, r0, r2
 800b65e:	9308      	str	r3, [sp, #32]
 800b660:	e7e5      	b.n	800b62e <_strtod_l+0x22e>
 800b662:	4629      	mov	r1, r5
 800b664:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b666:	1c50      	adds	r0, r2, #1
 800b668:	9019      	str	r0, [sp, #100]	@ 0x64
 800b66a:	7852      	ldrb	r2, [r2, #1]
 800b66c:	4618      	mov	r0, r3
 800b66e:	460d      	mov	r5, r1
 800b670:	e7b1      	b.n	800b5d6 <_strtod_l+0x1d6>
 800b672:	f04f 0900 	mov.w	r9, #0
 800b676:	2301      	movs	r3, #1
 800b678:	e77d      	b.n	800b576 <_strtod_l+0x176>
 800b67a:	f04f 0c00 	mov.w	ip, #0
 800b67e:	1ca2      	adds	r2, r4, #2
 800b680:	9219      	str	r2, [sp, #100]	@ 0x64
 800b682:	78a2      	ldrb	r2, [r4, #2]
 800b684:	e785      	b.n	800b592 <_strtod_l+0x192>
 800b686:	f04f 0c01 	mov.w	ip, #1
 800b68a:	e7f8      	b.n	800b67e <_strtod_l+0x27e>
 800b68c:	0800f0e4 	.word	0x0800f0e4
 800b690:	0800f0c0 	.word	0x0800f0c0
 800b694:	7ff00000 	.word	0x7ff00000
 800b698:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b69a:	1c51      	adds	r1, r2, #1
 800b69c:	9119      	str	r1, [sp, #100]	@ 0x64
 800b69e:	7852      	ldrb	r2, [r2, #1]
 800b6a0:	2a30      	cmp	r2, #48	@ 0x30
 800b6a2:	d0f9      	beq.n	800b698 <_strtod_l+0x298>
 800b6a4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b6a8:	2908      	cmp	r1, #8
 800b6aa:	f63f af78 	bhi.w	800b59e <_strtod_l+0x19e>
 800b6ae:	3a30      	subs	r2, #48	@ 0x30
 800b6b0:	920e      	str	r2, [sp, #56]	@ 0x38
 800b6b2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b6b4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b6b6:	f04f 080a 	mov.w	r8, #10
 800b6ba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b6bc:	1c56      	adds	r6, r2, #1
 800b6be:	9619      	str	r6, [sp, #100]	@ 0x64
 800b6c0:	7852      	ldrb	r2, [r2, #1]
 800b6c2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b6c6:	f1be 0f09 	cmp.w	lr, #9
 800b6ca:	d939      	bls.n	800b740 <_strtod_l+0x340>
 800b6cc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b6ce:	1a76      	subs	r6, r6, r1
 800b6d0:	2e08      	cmp	r6, #8
 800b6d2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b6d6:	dc03      	bgt.n	800b6e0 <_strtod_l+0x2e0>
 800b6d8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b6da:	4588      	cmp	r8, r1
 800b6dc:	bfa8      	it	ge
 800b6de:	4688      	movge	r8, r1
 800b6e0:	f1bc 0f00 	cmp.w	ip, #0
 800b6e4:	d001      	beq.n	800b6ea <_strtod_l+0x2ea>
 800b6e6:	f1c8 0800 	rsb	r8, r8, #0
 800b6ea:	2d00      	cmp	r5, #0
 800b6ec:	d14e      	bne.n	800b78c <_strtod_l+0x38c>
 800b6ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b6f0:	4308      	orrs	r0, r1
 800b6f2:	f47f aebe 	bne.w	800b472 <_strtod_l+0x72>
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	f47f aed6 	bne.w	800b4a8 <_strtod_l+0xa8>
 800b6fc:	2a69      	cmp	r2, #105	@ 0x69
 800b6fe:	d028      	beq.n	800b752 <_strtod_l+0x352>
 800b700:	dc25      	bgt.n	800b74e <_strtod_l+0x34e>
 800b702:	2a49      	cmp	r2, #73	@ 0x49
 800b704:	d025      	beq.n	800b752 <_strtod_l+0x352>
 800b706:	2a4e      	cmp	r2, #78	@ 0x4e
 800b708:	f47f aece 	bne.w	800b4a8 <_strtod_l+0xa8>
 800b70c:	499b      	ldr	r1, [pc, #620]	@ (800b97c <_strtod_l+0x57c>)
 800b70e:	a819      	add	r0, sp, #100	@ 0x64
 800b710:	f001 f8f6 	bl	800c900 <__match>
 800b714:	2800      	cmp	r0, #0
 800b716:	f43f aec7 	beq.w	800b4a8 <_strtod_l+0xa8>
 800b71a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b71c:	781b      	ldrb	r3, [r3, #0]
 800b71e:	2b28      	cmp	r3, #40	@ 0x28
 800b720:	d12e      	bne.n	800b780 <_strtod_l+0x380>
 800b722:	4997      	ldr	r1, [pc, #604]	@ (800b980 <_strtod_l+0x580>)
 800b724:	aa1c      	add	r2, sp, #112	@ 0x70
 800b726:	a819      	add	r0, sp, #100	@ 0x64
 800b728:	f001 f8fe 	bl	800c928 <__hexnan>
 800b72c:	2805      	cmp	r0, #5
 800b72e:	d127      	bne.n	800b780 <_strtod_l+0x380>
 800b730:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b732:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b736:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b73a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b73e:	e698      	b.n	800b472 <_strtod_l+0x72>
 800b740:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b742:	fb08 2101 	mla	r1, r8, r1, r2
 800b746:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b74a:	920e      	str	r2, [sp, #56]	@ 0x38
 800b74c:	e7b5      	b.n	800b6ba <_strtod_l+0x2ba>
 800b74e:	2a6e      	cmp	r2, #110	@ 0x6e
 800b750:	e7da      	b.n	800b708 <_strtod_l+0x308>
 800b752:	498c      	ldr	r1, [pc, #560]	@ (800b984 <_strtod_l+0x584>)
 800b754:	a819      	add	r0, sp, #100	@ 0x64
 800b756:	f001 f8d3 	bl	800c900 <__match>
 800b75a:	2800      	cmp	r0, #0
 800b75c:	f43f aea4 	beq.w	800b4a8 <_strtod_l+0xa8>
 800b760:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b762:	4989      	ldr	r1, [pc, #548]	@ (800b988 <_strtod_l+0x588>)
 800b764:	3b01      	subs	r3, #1
 800b766:	a819      	add	r0, sp, #100	@ 0x64
 800b768:	9319      	str	r3, [sp, #100]	@ 0x64
 800b76a:	f001 f8c9 	bl	800c900 <__match>
 800b76e:	b910      	cbnz	r0, 800b776 <_strtod_l+0x376>
 800b770:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b772:	3301      	adds	r3, #1
 800b774:	9319      	str	r3, [sp, #100]	@ 0x64
 800b776:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800b998 <_strtod_l+0x598>
 800b77a:	f04f 0a00 	mov.w	sl, #0
 800b77e:	e678      	b.n	800b472 <_strtod_l+0x72>
 800b780:	4882      	ldr	r0, [pc, #520]	@ (800b98c <_strtod_l+0x58c>)
 800b782:	f000 fde1 	bl	800c348 <nan>
 800b786:	ec5b ab10 	vmov	sl, fp, d0
 800b78a:	e672      	b.n	800b472 <_strtod_l+0x72>
 800b78c:	eba8 0309 	sub.w	r3, r8, r9
 800b790:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b792:	9309      	str	r3, [sp, #36]	@ 0x24
 800b794:	2f00      	cmp	r7, #0
 800b796:	bf08      	it	eq
 800b798:	462f      	moveq	r7, r5
 800b79a:	2d10      	cmp	r5, #16
 800b79c:	462c      	mov	r4, r5
 800b79e:	bfa8      	it	ge
 800b7a0:	2410      	movge	r4, #16
 800b7a2:	f7f4 fec7 	bl	8000534 <__aeabi_ui2d>
 800b7a6:	2d09      	cmp	r5, #9
 800b7a8:	4682      	mov	sl, r0
 800b7aa:	468b      	mov	fp, r1
 800b7ac:	dc13      	bgt.n	800b7d6 <_strtod_l+0x3d6>
 800b7ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	f43f ae5e 	beq.w	800b472 <_strtod_l+0x72>
 800b7b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7b8:	dd78      	ble.n	800b8ac <_strtod_l+0x4ac>
 800b7ba:	2b16      	cmp	r3, #22
 800b7bc:	dc5f      	bgt.n	800b87e <_strtod_l+0x47e>
 800b7be:	4974      	ldr	r1, [pc, #464]	@ (800b990 <_strtod_l+0x590>)
 800b7c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b7c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b7c8:	4652      	mov	r2, sl
 800b7ca:	465b      	mov	r3, fp
 800b7cc:	f7f4 ff2c 	bl	8000628 <__aeabi_dmul>
 800b7d0:	4682      	mov	sl, r0
 800b7d2:	468b      	mov	fp, r1
 800b7d4:	e64d      	b.n	800b472 <_strtod_l+0x72>
 800b7d6:	4b6e      	ldr	r3, [pc, #440]	@ (800b990 <_strtod_l+0x590>)
 800b7d8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b7dc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b7e0:	f7f4 ff22 	bl	8000628 <__aeabi_dmul>
 800b7e4:	4682      	mov	sl, r0
 800b7e6:	9808      	ldr	r0, [sp, #32]
 800b7e8:	468b      	mov	fp, r1
 800b7ea:	f7f4 fea3 	bl	8000534 <__aeabi_ui2d>
 800b7ee:	4602      	mov	r2, r0
 800b7f0:	460b      	mov	r3, r1
 800b7f2:	4650      	mov	r0, sl
 800b7f4:	4659      	mov	r1, fp
 800b7f6:	f7f4 fd61 	bl	80002bc <__adddf3>
 800b7fa:	2d0f      	cmp	r5, #15
 800b7fc:	4682      	mov	sl, r0
 800b7fe:	468b      	mov	fp, r1
 800b800:	ddd5      	ble.n	800b7ae <_strtod_l+0x3ae>
 800b802:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b804:	1b2c      	subs	r4, r5, r4
 800b806:	441c      	add	r4, r3
 800b808:	2c00      	cmp	r4, #0
 800b80a:	f340 8096 	ble.w	800b93a <_strtod_l+0x53a>
 800b80e:	f014 030f 	ands.w	r3, r4, #15
 800b812:	d00a      	beq.n	800b82a <_strtod_l+0x42a>
 800b814:	495e      	ldr	r1, [pc, #376]	@ (800b990 <_strtod_l+0x590>)
 800b816:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b81a:	4652      	mov	r2, sl
 800b81c:	465b      	mov	r3, fp
 800b81e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b822:	f7f4 ff01 	bl	8000628 <__aeabi_dmul>
 800b826:	4682      	mov	sl, r0
 800b828:	468b      	mov	fp, r1
 800b82a:	f034 040f 	bics.w	r4, r4, #15
 800b82e:	d073      	beq.n	800b918 <_strtod_l+0x518>
 800b830:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b834:	dd48      	ble.n	800b8c8 <_strtod_l+0x4c8>
 800b836:	2400      	movs	r4, #0
 800b838:	46a0      	mov	r8, r4
 800b83a:	940a      	str	r4, [sp, #40]	@ 0x28
 800b83c:	46a1      	mov	r9, r4
 800b83e:	9a05      	ldr	r2, [sp, #20]
 800b840:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800b998 <_strtod_l+0x598>
 800b844:	2322      	movs	r3, #34	@ 0x22
 800b846:	6013      	str	r3, [r2, #0]
 800b848:	f04f 0a00 	mov.w	sl, #0
 800b84c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b84e:	2b00      	cmp	r3, #0
 800b850:	f43f ae0f 	beq.w	800b472 <_strtod_l+0x72>
 800b854:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b856:	9805      	ldr	r0, [sp, #20]
 800b858:	f001 f954 	bl	800cb04 <_Bfree>
 800b85c:	9805      	ldr	r0, [sp, #20]
 800b85e:	4649      	mov	r1, r9
 800b860:	f001 f950 	bl	800cb04 <_Bfree>
 800b864:	9805      	ldr	r0, [sp, #20]
 800b866:	4641      	mov	r1, r8
 800b868:	f001 f94c 	bl	800cb04 <_Bfree>
 800b86c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b86e:	9805      	ldr	r0, [sp, #20]
 800b870:	f001 f948 	bl	800cb04 <_Bfree>
 800b874:	9805      	ldr	r0, [sp, #20]
 800b876:	4621      	mov	r1, r4
 800b878:	f001 f944 	bl	800cb04 <_Bfree>
 800b87c:	e5f9      	b.n	800b472 <_strtod_l+0x72>
 800b87e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b880:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b884:	4293      	cmp	r3, r2
 800b886:	dbbc      	blt.n	800b802 <_strtod_l+0x402>
 800b888:	4c41      	ldr	r4, [pc, #260]	@ (800b990 <_strtod_l+0x590>)
 800b88a:	f1c5 050f 	rsb	r5, r5, #15
 800b88e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b892:	4652      	mov	r2, sl
 800b894:	465b      	mov	r3, fp
 800b896:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b89a:	f7f4 fec5 	bl	8000628 <__aeabi_dmul>
 800b89e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8a0:	1b5d      	subs	r5, r3, r5
 800b8a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b8a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b8aa:	e78f      	b.n	800b7cc <_strtod_l+0x3cc>
 800b8ac:	3316      	adds	r3, #22
 800b8ae:	dba8      	blt.n	800b802 <_strtod_l+0x402>
 800b8b0:	4b37      	ldr	r3, [pc, #220]	@ (800b990 <_strtod_l+0x590>)
 800b8b2:	eba9 0808 	sub.w	r8, r9, r8
 800b8b6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b8ba:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b8be:	4650      	mov	r0, sl
 800b8c0:	4659      	mov	r1, fp
 800b8c2:	f7f4 ffdb 	bl	800087c <__aeabi_ddiv>
 800b8c6:	e783      	b.n	800b7d0 <_strtod_l+0x3d0>
 800b8c8:	4b32      	ldr	r3, [pc, #200]	@ (800b994 <_strtod_l+0x594>)
 800b8ca:	9308      	str	r3, [sp, #32]
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	1124      	asrs	r4, r4, #4
 800b8d0:	4650      	mov	r0, sl
 800b8d2:	4659      	mov	r1, fp
 800b8d4:	461e      	mov	r6, r3
 800b8d6:	2c01      	cmp	r4, #1
 800b8d8:	dc21      	bgt.n	800b91e <_strtod_l+0x51e>
 800b8da:	b10b      	cbz	r3, 800b8e0 <_strtod_l+0x4e0>
 800b8dc:	4682      	mov	sl, r0
 800b8de:	468b      	mov	fp, r1
 800b8e0:	492c      	ldr	r1, [pc, #176]	@ (800b994 <_strtod_l+0x594>)
 800b8e2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b8e6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b8ea:	4652      	mov	r2, sl
 800b8ec:	465b      	mov	r3, fp
 800b8ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b8f2:	f7f4 fe99 	bl	8000628 <__aeabi_dmul>
 800b8f6:	4b28      	ldr	r3, [pc, #160]	@ (800b998 <_strtod_l+0x598>)
 800b8f8:	460a      	mov	r2, r1
 800b8fa:	400b      	ands	r3, r1
 800b8fc:	4927      	ldr	r1, [pc, #156]	@ (800b99c <_strtod_l+0x59c>)
 800b8fe:	428b      	cmp	r3, r1
 800b900:	4682      	mov	sl, r0
 800b902:	d898      	bhi.n	800b836 <_strtod_l+0x436>
 800b904:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b908:	428b      	cmp	r3, r1
 800b90a:	bf86      	itte	hi
 800b90c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800b9a0 <_strtod_l+0x5a0>
 800b910:	f04f 3aff 	movhi.w	sl, #4294967295
 800b914:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b918:	2300      	movs	r3, #0
 800b91a:	9308      	str	r3, [sp, #32]
 800b91c:	e07a      	b.n	800ba14 <_strtod_l+0x614>
 800b91e:	07e2      	lsls	r2, r4, #31
 800b920:	d505      	bpl.n	800b92e <_strtod_l+0x52e>
 800b922:	9b08      	ldr	r3, [sp, #32]
 800b924:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b928:	f7f4 fe7e 	bl	8000628 <__aeabi_dmul>
 800b92c:	2301      	movs	r3, #1
 800b92e:	9a08      	ldr	r2, [sp, #32]
 800b930:	3208      	adds	r2, #8
 800b932:	3601      	adds	r6, #1
 800b934:	1064      	asrs	r4, r4, #1
 800b936:	9208      	str	r2, [sp, #32]
 800b938:	e7cd      	b.n	800b8d6 <_strtod_l+0x4d6>
 800b93a:	d0ed      	beq.n	800b918 <_strtod_l+0x518>
 800b93c:	4264      	negs	r4, r4
 800b93e:	f014 020f 	ands.w	r2, r4, #15
 800b942:	d00a      	beq.n	800b95a <_strtod_l+0x55a>
 800b944:	4b12      	ldr	r3, [pc, #72]	@ (800b990 <_strtod_l+0x590>)
 800b946:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b94a:	4650      	mov	r0, sl
 800b94c:	4659      	mov	r1, fp
 800b94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b952:	f7f4 ff93 	bl	800087c <__aeabi_ddiv>
 800b956:	4682      	mov	sl, r0
 800b958:	468b      	mov	fp, r1
 800b95a:	1124      	asrs	r4, r4, #4
 800b95c:	d0dc      	beq.n	800b918 <_strtod_l+0x518>
 800b95e:	2c1f      	cmp	r4, #31
 800b960:	dd20      	ble.n	800b9a4 <_strtod_l+0x5a4>
 800b962:	2400      	movs	r4, #0
 800b964:	46a0      	mov	r8, r4
 800b966:	940a      	str	r4, [sp, #40]	@ 0x28
 800b968:	46a1      	mov	r9, r4
 800b96a:	9a05      	ldr	r2, [sp, #20]
 800b96c:	2322      	movs	r3, #34	@ 0x22
 800b96e:	f04f 0a00 	mov.w	sl, #0
 800b972:	f04f 0b00 	mov.w	fp, #0
 800b976:	6013      	str	r3, [r2, #0]
 800b978:	e768      	b.n	800b84c <_strtod_l+0x44c>
 800b97a:	bf00      	nop
 800b97c:	0800f0cb 	.word	0x0800f0cb
 800b980:	0800f0d0 	.word	0x0800f0d0
 800b984:	0800f0c2 	.word	0x0800f0c2
 800b988:	0800f0c5 	.word	0x0800f0c5
 800b98c:	0800f444 	.word	0x0800f444
 800b990:	0800f240 	.word	0x0800f240
 800b994:	0800f218 	.word	0x0800f218
 800b998:	7ff00000 	.word	0x7ff00000
 800b99c:	7ca00000 	.word	0x7ca00000
 800b9a0:	7fefffff 	.word	0x7fefffff
 800b9a4:	f014 0310 	ands.w	r3, r4, #16
 800b9a8:	bf18      	it	ne
 800b9aa:	236a      	movne	r3, #106	@ 0x6a
 800b9ac:	4ea9      	ldr	r6, [pc, #676]	@ (800bc54 <_strtod_l+0x854>)
 800b9ae:	9308      	str	r3, [sp, #32]
 800b9b0:	4650      	mov	r0, sl
 800b9b2:	4659      	mov	r1, fp
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	07e2      	lsls	r2, r4, #31
 800b9b8:	d504      	bpl.n	800b9c4 <_strtod_l+0x5c4>
 800b9ba:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b9be:	f7f4 fe33 	bl	8000628 <__aeabi_dmul>
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	1064      	asrs	r4, r4, #1
 800b9c6:	f106 0608 	add.w	r6, r6, #8
 800b9ca:	d1f4      	bne.n	800b9b6 <_strtod_l+0x5b6>
 800b9cc:	b10b      	cbz	r3, 800b9d2 <_strtod_l+0x5d2>
 800b9ce:	4682      	mov	sl, r0
 800b9d0:	468b      	mov	fp, r1
 800b9d2:	9b08      	ldr	r3, [sp, #32]
 800b9d4:	b1b3      	cbz	r3, 800ba04 <_strtod_l+0x604>
 800b9d6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b9da:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	4659      	mov	r1, fp
 800b9e2:	dd0f      	ble.n	800ba04 <_strtod_l+0x604>
 800b9e4:	2b1f      	cmp	r3, #31
 800b9e6:	dd55      	ble.n	800ba94 <_strtod_l+0x694>
 800b9e8:	2b34      	cmp	r3, #52	@ 0x34
 800b9ea:	bfde      	ittt	le
 800b9ec:	f04f 33ff 	movle.w	r3, #4294967295
 800b9f0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b9f4:	4093      	lslle	r3, r2
 800b9f6:	f04f 0a00 	mov.w	sl, #0
 800b9fa:	bfcc      	ite	gt
 800b9fc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ba00:	ea03 0b01 	andle.w	fp, r3, r1
 800ba04:	2200      	movs	r2, #0
 800ba06:	2300      	movs	r3, #0
 800ba08:	4650      	mov	r0, sl
 800ba0a:	4659      	mov	r1, fp
 800ba0c:	f7f5 f874 	bl	8000af8 <__aeabi_dcmpeq>
 800ba10:	2800      	cmp	r0, #0
 800ba12:	d1a6      	bne.n	800b962 <_strtod_l+0x562>
 800ba14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba16:	9300      	str	r3, [sp, #0]
 800ba18:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ba1a:	9805      	ldr	r0, [sp, #20]
 800ba1c:	462b      	mov	r3, r5
 800ba1e:	463a      	mov	r2, r7
 800ba20:	f001 f8d8 	bl	800cbd4 <__s2b>
 800ba24:	900a      	str	r0, [sp, #40]	@ 0x28
 800ba26:	2800      	cmp	r0, #0
 800ba28:	f43f af05 	beq.w	800b836 <_strtod_l+0x436>
 800ba2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ba2e:	2a00      	cmp	r2, #0
 800ba30:	eba9 0308 	sub.w	r3, r9, r8
 800ba34:	bfa8      	it	ge
 800ba36:	2300      	movge	r3, #0
 800ba38:	9312      	str	r3, [sp, #72]	@ 0x48
 800ba3a:	2400      	movs	r4, #0
 800ba3c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ba40:	9316      	str	r3, [sp, #88]	@ 0x58
 800ba42:	46a0      	mov	r8, r4
 800ba44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba46:	9805      	ldr	r0, [sp, #20]
 800ba48:	6859      	ldr	r1, [r3, #4]
 800ba4a:	f001 f81b 	bl	800ca84 <_Balloc>
 800ba4e:	4681      	mov	r9, r0
 800ba50:	2800      	cmp	r0, #0
 800ba52:	f43f aef4 	beq.w	800b83e <_strtod_l+0x43e>
 800ba56:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba58:	691a      	ldr	r2, [r3, #16]
 800ba5a:	3202      	adds	r2, #2
 800ba5c:	f103 010c 	add.w	r1, r3, #12
 800ba60:	0092      	lsls	r2, r2, #2
 800ba62:	300c      	adds	r0, #12
 800ba64:	f000 fc5f 	bl	800c326 <memcpy>
 800ba68:	ec4b ab10 	vmov	d0, sl, fp
 800ba6c:	9805      	ldr	r0, [sp, #20]
 800ba6e:	aa1c      	add	r2, sp, #112	@ 0x70
 800ba70:	a91b      	add	r1, sp, #108	@ 0x6c
 800ba72:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800ba76:	f001 fbe9 	bl	800d24c <__d2b>
 800ba7a:	901a      	str	r0, [sp, #104]	@ 0x68
 800ba7c:	2800      	cmp	r0, #0
 800ba7e:	f43f aede 	beq.w	800b83e <_strtod_l+0x43e>
 800ba82:	9805      	ldr	r0, [sp, #20]
 800ba84:	2101      	movs	r1, #1
 800ba86:	f001 f93b 	bl	800cd00 <__i2b>
 800ba8a:	4680      	mov	r8, r0
 800ba8c:	b948      	cbnz	r0, 800baa2 <_strtod_l+0x6a2>
 800ba8e:	f04f 0800 	mov.w	r8, #0
 800ba92:	e6d4      	b.n	800b83e <_strtod_l+0x43e>
 800ba94:	f04f 32ff 	mov.w	r2, #4294967295
 800ba98:	fa02 f303 	lsl.w	r3, r2, r3
 800ba9c:	ea03 0a0a 	and.w	sl, r3, sl
 800baa0:	e7b0      	b.n	800ba04 <_strtod_l+0x604>
 800baa2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800baa4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800baa6:	2d00      	cmp	r5, #0
 800baa8:	bfab      	itete	ge
 800baaa:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800baac:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800baae:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800bab0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800bab2:	bfac      	ite	ge
 800bab4:	18ef      	addge	r7, r5, r3
 800bab6:	1b5e      	sublt	r6, r3, r5
 800bab8:	9b08      	ldr	r3, [sp, #32]
 800baba:	1aed      	subs	r5, r5, r3
 800babc:	4415      	add	r5, r2
 800babe:	4b66      	ldr	r3, [pc, #408]	@ (800bc58 <_strtod_l+0x858>)
 800bac0:	3d01      	subs	r5, #1
 800bac2:	429d      	cmp	r5, r3
 800bac4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800bac8:	da50      	bge.n	800bb6c <_strtod_l+0x76c>
 800baca:	1b5b      	subs	r3, r3, r5
 800bacc:	2b1f      	cmp	r3, #31
 800bace:	eba2 0203 	sub.w	r2, r2, r3
 800bad2:	f04f 0101 	mov.w	r1, #1
 800bad6:	dc3d      	bgt.n	800bb54 <_strtod_l+0x754>
 800bad8:	fa01 f303 	lsl.w	r3, r1, r3
 800badc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bade:	2300      	movs	r3, #0
 800bae0:	9310      	str	r3, [sp, #64]	@ 0x40
 800bae2:	18bd      	adds	r5, r7, r2
 800bae4:	9b08      	ldr	r3, [sp, #32]
 800bae6:	42af      	cmp	r7, r5
 800bae8:	4416      	add	r6, r2
 800baea:	441e      	add	r6, r3
 800baec:	463b      	mov	r3, r7
 800baee:	bfa8      	it	ge
 800baf0:	462b      	movge	r3, r5
 800baf2:	42b3      	cmp	r3, r6
 800baf4:	bfa8      	it	ge
 800baf6:	4633      	movge	r3, r6
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	bfc2      	ittt	gt
 800bafc:	1aed      	subgt	r5, r5, r3
 800bafe:	1af6      	subgt	r6, r6, r3
 800bb00:	1aff      	subgt	r7, r7, r3
 800bb02:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	dd16      	ble.n	800bb36 <_strtod_l+0x736>
 800bb08:	4641      	mov	r1, r8
 800bb0a:	9805      	ldr	r0, [sp, #20]
 800bb0c:	461a      	mov	r2, r3
 800bb0e:	f001 f9b7 	bl	800ce80 <__pow5mult>
 800bb12:	4680      	mov	r8, r0
 800bb14:	2800      	cmp	r0, #0
 800bb16:	d0ba      	beq.n	800ba8e <_strtod_l+0x68e>
 800bb18:	4601      	mov	r1, r0
 800bb1a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800bb1c:	9805      	ldr	r0, [sp, #20]
 800bb1e:	f001 f905 	bl	800cd2c <__multiply>
 800bb22:	900e      	str	r0, [sp, #56]	@ 0x38
 800bb24:	2800      	cmp	r0, #0
 800bb26:	f43f ae8a 	beq.w	800b83e <_strtod_l+0x43e>
 800bb2a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bb2c:	9805      	ldr	r0, [sp, #20]
 800bb2e:	f000 ffe9 	bl	800cb04 <_Bfree>
 800bb32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bb34:	931a      	str	r3, [sp, #104]	@ 0x68
 800bb36:	2d00      	cmp	r5, #0
 800bb38:	dc1d      	bgt.n	800bb76 <_strtod_l+0x776>
 800bb3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	dd23      	ble.n	800bb88 <_strtod_l+0x788>
 800bb40:	4649      	mov	r1, r9
 800bb42:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800bb44:	9805      	ldr	r0, [sp, #20]
 800bb46:	f001 f99b 	bl	800ce80 <__pow5mult>
 800bb4a:	4681      	mov	r9, r0
 800bb4c:	b9e0      	cbnz	r0, 800bb88 <_strtod_l+0x788>
 800bb4e:	f04f 0900 	mov.w	r9, #0
 800bb52:	e674      	b.n	800b83e <_strtod_l+0x43e>
 800bb54:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800bb58:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800bb5c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800bb60:	35e2      	adds	r5, #226	@ 0xe2
 800bb62:	fa01 f305 	lsl.w	r3, r1, r5
 800bb66:	9310      	str	r3, [sp, #64]	@ 0x40
 800bb68:	9113      	str	r1, [sp, #76]	@ 0x4c
 800bb6a:	e7ba      	b.n	800bae2 <_strtod_l+0x6e2>
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	9310      	str	r3, [sp, #64]	@ 0x40
 800bb70:	2301      	movs	r3, #1
 800bb72:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bb74:	e7b5      	b.n	800bae2 <_strtod_l+0x6e2>
 800bb76:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bb78:	9805      	ldr	r0, [sp, #20]
 800bb7a:	462a      	mov	r2, r5
 800bb7c:	f001 f9da 	bl	800cf34 <__lshift>
 800bb80:	901a      	str	r0, [sp, #104]	@ 0x68
 800bb82:	2800      	cmp	r0, #0
 800bb84:	d1d9      	bne.n	800bb3a <_strtod_l+0x73a>
 800bb86:	e65a      	b.n	800b83e <_strtod_l+0x43e>
 800bb88:	2e00      	cmp	r6, #0
 800bb8a:	dd07      	ble.n	800bb9c <_strtod_l+0x79c>
 800bb8c:	4649      	mov	r1, r9
 800bb8e:	9805      	ldr	r0, [sp, #20]
 800bb90:	4632      	mov	r2, r6
 800bb92:	f001 f9cf 	bl	800cf34 <__lshift>
 800bb96:	4681      	mov	r9, r0
 800bb98:	2800      	cmp	r0, #0
 800bb9a:	d0d8      	beq.n	800bb4e <_strtod_l+0x74e>
 800bb9c:	2f00      	cmp	r7, #0
 800bb9e:	dd08      	ble.n	800bbb2 <_strtod_l+0x7b2>
 800bba0:	4641      	mov	r1, r8
 800bba2:	9805      	ldr	r0, [sp, #20]
 800bba4:	463a      	mov	r2, r7
 800bba6:	f001 f9c5 	bl	800cf34 <__lshift>
 800bbaa:	4680      	mov	r8, r0
 800bbac:	2800      	cmp	r0, #0
 800bbae:	f43f ae46 	beq.w	800b83e <_strtod_l+0x43e>
 800bbb2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bbb4:	9805      	ldr	r0, [sp, #20]
 800bbb6:	464a      	mov	r2, r9
 800bbb8:	f001 fa44 	bl	800d044 <__mdiff>
 800bbbc:	4604      	mov	r4, r0
 800bbbe:	2800      	cmp	r0, #0
 800bbc0:	f43f ae3d 	beq.w	800b83e <_strtod_l+0x43e>
 800bbc4:	68c3      	ldr	r3, [r0, #12]
 800bbc6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bbc8:	2300      	movs	r3, #0
 800bbca:	60c3      	str	r3, [r0, #12]
 800bbcc:	4641      	mov	r1, r8
 800bbce:	f001 fa1d 	bl	800d00c <__mcmp>
 800bbd2:	2800      	cmp	r0, #0
 800bbd4:	da46      	bge.n	800bc64 <_strtod_l+0x864>
 800bbd6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bbd8:	ea53 030a 	orrs.w	r3, r3, sl
 800bbdc:	d16c      	bne.n	800bcb8 <_strtod_l+0x8b8>
 800bbde:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d168      	bne.n	800bcb8 <_strtod_l+0x8b8>
 800bbe6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bbea:	0d1b      	lsrs	r3, r3, #20
 800bbec:	051b      	lsls	r3, r3, #20
 800bbee:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bbf2:	d961      	bls.n	800bcb8 <_strtod_l+0x8b8>
 800bbf4:	6963      	ldr	r3, [r4, #20]
 800bbf6:	b913      	cbnz	r3, 800bbfe <_strtod_l+0x7fe>
 800bbf8:	6923      	ldr	r3, [r4, #16]
 800bbfa:	2b01      	cmp	r3, #1
 800bbfc:	dd5c      	ble.n	800bcb8 <_strtod_l+0x8b8>
 800bbfe:	4621      	mov	r1, r4
 800bc00:	2201      	movs	r2, #1
 800bc02:	9805      	ldr	r0, [sp, #20]
 800bc04:	f001 f996 	bl	800cf34 <__lshift>
 800bc08:	4641      	mov	r1, r8
 800bc0a:	4604      	mov	r4, r0
 800bc0c:	f001 f9fe 	bl	800d00c <__mcmp>
 800bc10:	2800      	cmp	r0, #0
 800bc12:	dd51      	ble.n	800bcb8 <_strtod_l+0x8b8>
 800bc14:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bc18:	9a08      	ldr	r2, [sp, #32]
 800bc1a:	0d1b      	lsrs	r3, r3, #20
 800bc1c:	051b      	lsls	r3, r3, #20
 800bc1e:	2a00      	cmp	r2, #0
 800bc20:	d06b      	beq.n	800bcfa <_strtod_l+0x8fa>
 800bc22:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bc26:	d868      	bhi.n	800bcfa <_strtod_l+0x8fa>
 800bc28:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800bc2c:	f67f ae9d 	bls.w	800b96a <_strtod_l+0x56a>
 800bc30:	4b0a      	ldr	r3, [pc, #40]	@ (800bc5c <_strtod_l+0x85c>)
 800bc32:	4650      	mov	r0, sl
 800bc34:	4659      	mov	r1, fp
 800bc36:	2200      	movs	r2, #0
 800bc38:	f7f4 fcf6 	bl	8000628 <__aeabi_dmul>
 800bc3c:	4b08      	ldr	r3, [pc, #32]	@ (800bc60 <_strtod_l+0x860>)
 800bc3e:	400b      	ands	r3, r1
 800bc40:	4682      	mov	sl, r0
 800bc42:	468b      	mov	fp, r1
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	f47f ae05 	bne.w	800b854 <_strtod_l+0x454>
 800bc4a:	9a05      	ldr	r2, [sp, #20]
 800bc4c:	2322      	movs	r3, #34	@ 0x22
 800bc4e:	6013      	str	r3, [r2, #0]
 800bc50:	e600      	b.n	800b854 <_strtod_l+0x454>
 800bc52:	bf00      	nop
 800bc54:	0800f0f8 	.word	0x0800f0f8
 800bc58:	fffffc02 	.word	0xfffffc02
 800bc5c:	39500000 	.word	0x39500000
 800bc60:	7ff00000 	.word	0x7ff00000
 800bc64:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800bc68:	d165      	bne.n	800bd36 <_strtod_l+0x936>
 800bc6a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bc6c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bc70:	b35a      	cbz	r2, 800bcca <_strtod_l+0x8ca>
 800bc72:	4a9f      	ldr	r2, [pc, #636]	@ (800bef0 <_strtod_l+0xaf0>)
 800bc74:	4293      	cmp	r3, r2
 800bc76:	d12b      	bne.n	800bcd0 <_strtod_l+0x8d0>
 800bc78:	9b08      	ldr	r3, [sp, #32]
 800bc7a:	4651      	mov	r1, sl
 800bc7c:	b303      	cbz	r3, 800bcc0 <_strtod_l+0x8c0>
 800bc7e:	4b9d      	ldr	r3, [pc, #628]	@ (800bef4 <_strtod_l+0xaf4>)
 800bc80:	465a      	mov	r2, fp
 800bc82:	4013      	ands	r3, r2
 800bc84:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800bc88:	f04f 32ff 	mov.w	r2, #4294967295
 800bc8c:	d81b      	bhi.n	800bcc6 <_strtod_l+0x8c6>
 800bc8e:	0d1b      	lsrs	r3, r3, #20
 800bc90:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bc94:	fa02 f303 	lsl.w	r3, r2, r3
 800bc98:	4299      	cmp	r1, r3
 800bc9a:	d119      	bne.n	800bcd0 <_strtod_l+0x8d0>
 800bc9c:	4b96      	ldr	r3, [pc, #600]	@ (800bef8 <_strtod_l+0xaf8>)
 800bc9e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bca0:	429a      	cmp	r2, r3
 800bca2:	d102      	bne.n	800bcaa <_strtod_l+0x8aa>
 800bca4:	3101      	adds	r1, #1
 800bca6:	f43f adca 	beq.w	800b83e <_strtod_l+0x43e>
 800bcaa:	4b92      	ldr	r3, [pc, #584]	@ (800bef4 <_strtod_l+0xaf4>)
 800bcac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bcae:	401a      	ands	r2, r3
 800bcb0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800bcb4:	f04f 0a00 	mov.w	sl, #0
 800bcb8:	9b08      	ldr	r3, [sp, #32]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d1b8      	bne.n	800bc30 <_strtod_l+0x830>
 800bcbe:	e5c9      	b.n	800b854 <_strtod_l+0x454>
 800bcc0:	f04f 33ff 	mov.w	r3, #4294967295
 800bcc4:	e7e8      	b.n	800bc98 <_strtod_l+0x898>
 800bcc6:	4613      	mov	r3, r2
 800bcc8:	e7e6      	b.n	800bc98 <_strtod_l+0x898>
 800bcca:	ea53 030a 	orrs.w	r3, r3, sl
 800bcce:	d0a1      	beq.n	800bc14 <_strtod_l+0x814>
 800bcd0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bcd2:	b1db      	cbz	r3, 800bd0c <_strtod_l+0x90c>
 800bcd4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bcd6:	4213      	tst	r3, r2
 800bcd8:	d0ee      	beq.n	800bcb8 <_strtod_l+0x8b8>
 800bcda:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bcdc:	9a08      	ldr	r2, [sp, #32]
 800bcde:	4650      	mov	r0, sl
 800bce0:	4659      	mov	r1, fp
 800bce2:	b1bb      	cbz	r3, 800bd14 <_strtod_l+0x914>
 800bce4:	f7ff fb6c 	bl	800b3c0 <sulp>
 800bce8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bcec:	ec53 2b10 	vmov	r2, r3, d0
 800bcf0:	f7f4 fae4 	bl	80002bc <__adddf3>
 800bcf4:	4682      	mov	sl, r0
 800bcf6:	468b      	mov	fp, r1
 800bcf8:	e7de      	b.n	800bcb8 <_strtod_l+0x8b8>
 800bcfa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800bcfe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bd02:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bd06:	f04f 3aff 	mov.w	sl, #4294967295
 800bd0a:	e7d5      	b.n	800bcb8 <_strtod_l+0x8b8>
 800bd0c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bd0e:	ea13 0f0a 	tst.w	r3, sl
 800bd12:	e7e1      	b.n	800bcd8 <_strtod_l+0x8d8>
 800bd14:	f7ff fb54 	bl	800b3c0 <sulp>
 800bd18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bd1c:	ec53 2b10 	vmov	r2, r3, d0
 800bd20:	f7f4 faca 	bl	80002b8 <__aeabi_dsub>
 800bd24:	2200      	movs	r2, #0
 800bd26:	2300      	movs	r3, #0
 800bd28:	4682      	mov	sl, r0
 800bd2a:	468b      	mov	fp, r1
 800bd2c:	f7f4 fee4 	bl	8000af8 <__aeabi_dcmpeq>
 800bd30:	2800      	cmp	r0, #0
 800bd32:	d0c1      	beq.n	800bcb8 <_strtod_l+0x8b8>
 800bd34:	e619      	b.n	800b96a <_strtod_l+0x56a>
 800bd36:	4641      	mov	r1, r8
 800bd38:	4620      	mov	r0, r4
 800bd3a:	f001 fadf 	bl	800d2fc <__ratio>
 800bd3e:	ec57 6b10 	vmov	r6, r7, d0
 800bd42:	2200      	movs	r2, #0
 800bd44:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800bd48:	4630      	mov	r0, r6
 800bd4a:	4639      	mov	r1, r7
 800bd4c:	f7f4 fee8 	bl	8000b20 <__aeabi_dcmple>
 800bd50:	2800      	cmp	r0, #0
 800bd52:	d06f      	beq.n	800be34 <_strtod_l+0xa34>
 800bd54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d17a      	bne.n	800be50 <_strtod_l+0xa50>
 800bd5a:	f1ba 0f00 	cmp.w	sl, #0
 800bd5e:	d158      	bne.n	800be12 <_strtod_l+0xa12>
 800bd60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d15a      	bne.n	800be20 <_strtod_l+0xa20>
 800bd6a:	4b64      	ldr	r3, [pc, #400]	@ (800befc <_strtod_l+0xafc>)
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	4630      	mov	r0, r6
 800bd70:	4639      	mov	r1, r7
 800bd72:	f7f4 fecb 	bl	8000b0c <__aeabi_dcmplt>
 800bd76:	2800      	cmp	r0, #0
 800bd78:	d159      	bne.n	800be2e <_strtod_l+0xa2e>
 800bd7a:	4630      	mov	r0, r6
 800bd7c:	4639      	mov	r1, r7
 800bd7e:	4b60      	ldr	r3, [pc, #384]	@ (800bf00 <_strtod_l+0xb00>)
 800bd80:	2200      	movs	r2, #0
 800bd82:	f7f4 fc51 	bl	8000628 <__aeabi_dmul>
 800bd86:	4606      	mov	r6, r0
 800bd88:	460f      	mov	r7, r1
 800bd8a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800bd8e:	9606      	str	r6, [sp, #24]
 800bd90:	9307      	str	r3, [sp, #28]
 800bd92:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bd96:	4d57      	ldr	r5, [pc, #348]	@ (800bef4 <_strtod_l+0xaf4>)
 800bd98:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bd9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd9e:	401d      	ands	r5, r3
 800bda0:	4b58      	ldr	r3, [pc, #352]	@ (800bf04 <_strtod_l+0xb04>)
 800bda2:	429d      	cmp	r5, r3
 800bda4:	f040 80b2 	bne.w	800bf0c <_strtod_l+0xb0c>
 800bda8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bdaa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800bdae:	ec4b ab10 	vmov	d0, sl, fp
 800bdb2:	f001 f9db 	bl	800d16c <__ulp>
 800bdb6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bdba:	ec51 0b10 	vmov	r0, r1, d0
 800bdbe:	f7f4 fc33 	bl	8000628 <__aeabi_dmul>
 800bdc2:	4652      	mov	r2, sl
 800bdc4:	465b      	mov	r3, fp
 800bdc6:	f7f4 fa79 	bl	80002bc <__adddf3>
 800bdca:	460b      	mov	r3, r1
 800bdcc:	4949      	ldr	r1, [pc, #292]	@ (800bef4 <_strtod_l+0xaf4>)
 800bdce:	4a4e      	ldr	r2, [pc, #312]	@ (800bf08 <_strtod_l+0xb08>)
 800bdd0:	4019      	ands	r1, r3
 800bdd2:	4291      	cmp	r1, r2
 800bdd4:	4682      	mov	sl, r0
 800bdd6:	d942      	bls.n	800be5e <_strtod_l+0xa5e>
 800bdd8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bdda:	4b47      	ldr	r3, [pc, #284]	@ (800bef8 <_strtod_l+0xaf8>)
 800bddc:	429a      	cmp	r2, r3
 800bdde:	d103      	bne.n	800bde8 <_strtod_l+0x9e8>
 800bde0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bde2:	3301      	adds	r3, #1
 800bde4:	f43f ad2b 	beq.w	800b83e <_strtod_l+0x43e>
 800bde8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800bef8 <_strtod_l+0xaf8>
 800bdec:	f04f 3aff 	mov.w	sl, #4294967295
 800bdf0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bdf2:	9805      	ldr	r0, [sp, #20]
 800bdf4:	f000 fe86 	bl	800cb04 <_Bfree>
 800bdf8:	9805      	ldr	r0, [sp, #20]
 800bdfa:	4649      	mov	r1, r9
 800bdfc:	f000 fe82 	bl	800cb04 <_Bfree>
 800be00:	9805      	ldr	r0, [sp, #20]
 800be02:	4641      	mov	r1, r8
 800be04:	f000 fe7e 	bl	800cb04 <_Bfree>
 800be08:	9805      	ldr	r0, [sp, #20]
 800be0a:	4621      	mov	r1, r4
 800be0c:	f000 fe7a 	bl	800cb04 <_Bfree>
 800be10:	e618      	b.n	800ba44 <_strtod_l+0x644>
 800be12:	f1ba 0f01 	cmp.w	sl, #1
 800be16:	d103      	bne.n	800be20 <_strtod_l+0xa20>
 800be18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	f43f ada5 	beq.w	800b96a <_strtod_l+0x56a>
 800be20:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800bed0 <_strtod_l+0xad0>
 800be24:	4f35      	ldr	r7, [pc, #212]	@ (800befc <_strtod_l+0xafc>)
 800be26:	ed8d 7b06 	vstr	d7, [sp, #24]
 800be2a:	2600      	movs	r6, #0
 800be2c:	e7b1      	b.n	800bd92 <_strtod_l+0x992>
 800be2e:	4f34      	ldr	r7, [pc, #208]	@ (800bf00 <_strtod_l+0xb00>)
 800be30:	2600      	movs	r6, #0
 800be32:	e7aa      	b.n	800bd8a <_strtod_l+0x98a>
 800be34:	4b32      	ldr	r3, [pc, #200]	@ (800bf00 <_strtod_l+0xb00>)
 800be36:	4630      	mov	r0, r6
 800be38:	4639      	mov	r1, r7
 800be3a:	2200      	movs	r2, #0
 800be3c:	f7f4 fbf4 	bl	8000628 <__aeabi_dmul>
 800be40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be42:	4606      	mov	r6, r0
 800be44:	460f      	mov	r7, r1
 800be46:	2b00      	cmp	r3, #0
 800be48:	d09f      	beq.n	800bd8a <_strtod_l+0x98a>
 800be4a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800be4e:	e7a0      	b.n	800bd92 <_strtod_l+0x992>
 800be50:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800bed8 <_strtod_l+0xad8>
 800be54:	ed8d 7b06 	vstr	d7, [sp, #24]
 800be58:	ec57 6b17 	vmov	r6, r7, d7
 800be5c:	e799      	b.n	800bd92 <_strtod_l+0x992>
 800be5e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800be62:	9b08      	ldr	r3, [sp, #32]
 800be64:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d1c1      	bne.n	800bdf0 <_strtod_l+0x9f0>
 800be6c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800be70:	0d1b      	lsrs	r3, r3, #20
 800be72:	051b      	lsls	r3, r3, #20
 800be74:	429d      	cmp	r5, r3
 800be76:	d1bb      	bne.n	800bdf0 <_strtod_l+0x9f0>
 800be78:	4630      	mov	r0, r6
 800be7a:	4639      	mov	r1, r7
 800be7c:	f7f4 ff84 	bl	8000d88 <__aeabi_d2lz>
 800be80:	f7f4 fba4 	bl	80005cc <__aeabi_l2d>
 800be84:	4602      	mov	r2, r0
 800be86:	460b      	mov	r3, r1
 800be88:	4630      	mov	r0, r6
 800be8a:	4639      	mov	r1, r7
 800be8c:	f7f4 fa14 	bl	80002b8 <__aeabi_dsub>
 800be90:	460b      	mov	r3, r1
 800be92:	4602      	mov	r2, r0
 800be94:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800be98:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800be9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be9e:	ea46 060a 	orr.w	r6, r6, sl
 800bea2:	431e      	orrs	r6, r3
 800bea4:	d06f      	beq.n	800bf86 <_strtod_l+0xb86>
 800bea6:	a30e      	add	r3, pc, #56	@ (adr r3, 800bee0 <_strtod_l+0xae0>)
 800bea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beac:	f7f4 fe2e 	bl	8000b0c <__aeabi_dcmplt>
 800beb0:	2800      	cmp	r0, #0
 800beb2:	f47f accf 	bne.w	800b854 <_strtod_l+0x454>
 800beb6:	a30c      	add	r3, pc, #48	@ (adr r3, 800bee8 <_strtod_l+0xae8>)
 800beb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bebc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bec0:	f7f4 fe42 	bl	8000b48 <__aeabi_dcmpgt>
 800bec4:	2800      	cmp	r0, #0
 800bec6:	d093      	beq.n	800bdf0 <_strtod_l+0x9f0>
 800bec8:	e4c4      	b.n	800b854 <_strtod_l+0x454>
 800beca:	bf00      	nop
 800becc:	f3af 8000 	nop.w
 800bed0:	00000000 	.word	0x00000000
 800bed4:	bff00000 	.word	0xbff00000
 800bed8:	00000000 	.word	0x00000000
 800bedc:	3ff00000 	.word	0x3ff00000
 800bee0:	94a03595 	.word	0x94a03595
 800bee4:	3fdfffff 	.word	0x3fdfffff
 800bee8:	35afe535 	.word	0x35afe535
 800beec:	3fe00000 	.word	0x3fe00000
 800bef0:	000fffff 	.word	0x000fffff
 800bef4:	7ff00000 	.word	0x7ff00000
 800bef8:	7fefffff 	.word	0x7fefffff
 800befc:	3ff00000 	.word	0x3ff00000
 800bf00:	3fe00000 	.word	0x3fe00000
 800bf04:	7fe00000 	.word	0x7fe00000
 800bf08:	7c9fffff 	.word	0x7c9fffff
 800bf0c:	9b08      	ldr	r3, [sp, #32]
 800bf0e:	b323      	cbz	r3, 800bf5a <_strtod_l+0xb5a>
 800bf10:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800bf14:	d821      	bhi.n	800bf5a <_strtod_l+0xb5a>
 800bf16:	a328      	add	r3, pc, #160	@ (adr r3, 800bfb8 <_strtod_l+0xbb8>)
 800bf18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf1c:	4630      	mov	r0, r6
 800bf1e:	4639      	mov	r1, r7
 800bf20:	f7f4 fdfe 	bl	8000b20 <__aeabi_dcmple>
 800bf24:	b1a0      	cbz	r0, 800bf50 <_strtod_l+0xb50>
 800bf26:	4639      	mov	r1, r7
 800bf28:	4630      	mov	r0, r6
 800bf2a:	f7f4 fe55 	bl	8000bd8 <__aeabi_d2uiz>
 800bf2e:	2801      	cmp	r0, #1
 800bf30:	bf38      	it	cc
 800bf32:	2001      	movcc	r0, #1
 800bf34:	f7f4 fafe 	bl	8000534 <__aeabi_ui2d>
 800bf38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf3a:	4606      	mov	r6, r0
 800bf3c:	460f      	mov	r7, r1
 800bf3e:	b9fb      	cbnz	r3, 800bf80 <_strtod_l+0xb80>
 800bf40:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bf44:	9014      	str	r0, [sp, #80]	@ 0x50
 800bf46:	9315      	str	r3, [sp, #84]	@ 0x54
 800bf48:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800bf4c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bf50:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bf52:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800bf56:	1b5b      	subs	r3, r3, r5
 800bf58:	9311      	str	r3, [sp, #68]	@ 0x44
 800bf5a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800bf5e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800bf62:	f001 f903 	bl	800d16c <__ulp>
 800bf66:	4650      	mov	r0, sl
 800bf68:	ec53 2b10 	vmov	r2, r3, d0
 800bf6c:	4659      	mov	r1, fp
 800bf6e:	f7f4 fb5b 	bl	8000628 <__aeabi_dmul>
 800bf72:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800bf76:	f7f4 f9a1 	bl	80002bc <__adddf3>
 800bf7a:	4682      	mov	sl, r0
 800bf7c:	468b      	mov	fp, r1
 800bf7e:	e770      	b.n	800be62 <_strtod_l+0xa62>
 800bf80:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800bf84:	e7e0      	b.n	800bf48 <_strtod_l+0xb48>
 800bf86:	a30e      	add	r3, pc, #56	@ (adr r3, 800bfc0 <_strtod_l+0xbc0>)
 800bf88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf8c:	f7f4 fdbe 	bl	8000b0c <__aeabi_dcmplt>
 800bf90:	e798      	b.n	800bec4 <_strtod_l+0xac4>
 800bf92:	2300      	movs	r3, #0
 800bf94:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bf96:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800bf98:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bf9a:	6013      	str	r3, [r2, #0]
 800bf9c:	f7ff ba6d 	b.w	800b47a <_strtod_l+0x7a>
 800bfa0:	2a65      	cmp	r2, #101	@ 0x65
 800bfa2:	f43f ab66 	beq.w	800b672 <_strtod_l+0x272>
 800bfa6:	2a45      	cmp	r2, #69	@ 0x45
 800bfa8:	f43f ab63 	beq.w	800b672 <_strtod_l+0x272>
 800bfac:	2301      	movs	r3, #1
 800bfae:	f7ff bb9e 	b.w	800b6ee <_strtod_l+0x2ee>
 800bfb2:	bf00      	nop
 800bfb4:	f3af 8000 	nop.w
 800bfb8:	ffc00000 	.word	0xffc00000
 800bfbc:	41dfffff 	.word	0x41dfffff
 800bfc0:	94a03595 	.word	0x94a03595
 800bfc4:	3fcfffff 	.word	0x3fcfffff

0800bfc8 <strtod>:
 800bfc8:	460a      	mov	r2, r1
 800bfca:	4601      	mov	r1, r0
 800bfcc:	4802      	ldr	r0, [pc, #8]	@ (800bfd8 <strtod+0x10>)
 800bfce:	4b03      	ldr	r3, [pc, #12]	@ (800bfdc <strtod+0x14>)
 800bfd0:	6800      	ldr	r0, [r0, #0]
 800bfd2:	f7ff ba15 	b.w	800b400 <_strtod_l>
 800bfd6:	bf00      	nop
 800bfd8:	2000019c 	.word	0x2000019c
 800bfdc:	20000030 	.word	0x20000030

0800bfe0 <std>:
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	b510      	push	{r4, lr}
 800bfe4:	4604      	mov	r4, r0
 800bfe6:	e9c0 3300 	strd	r3, r3, [r0]
 800bfea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bfee:	6083      	str	r3, [r0, #8]
 800bff0:	8181      	strh	r1, [r0, #12]
 800bff2:	6643      	str	r3, [r0, #100]	@ 0x64
 800bff4:	81c2      	strh	r2, [r0, #14]
 800bff6:	6183      	str	r3, [r0, #24]
 800bff8:	4619      	mov	r1, r3
 800bffa:	2208      	movs	r2, #8
 800bffc:	305c      	adds	r0, #92	@ 0x5c
 800bffe:	f000 f8f4 	bl	800c1ea <memset>
 800c002:	4b0d      	ldr	r3, [pc, #52]	@ (800c038 <std+0x58>)
 800c004:	6263      	str	r3, [r4, #36]	@ 0x24
 800c006:	4b0d      	ldr	r3, [pc, #52]	@ (800c03c <std+0x5c>)
 800c008:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c00a:	4b0d      	ldr	r3, [pc, #52]	@ (800c040 <std+0x60>)
 800c00c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c00e:	4b0d      	ldr	r3, [pc, #52]	@ (800c044 <std+0x64>)
 800c010:	6323      	str	r3, [r4, #48]	@ 0x30
 800c012:	4b0d      	ldr	r3, [pc, #52]	@ (800c048 <std+0x68>)
 800c014:	6224      	str	r4, [r4, #32]
 800c016:	429c      	cmp	r4, r3
 800c018:	d006      	beq.n	800c028 <std+0x48>
 800c01a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c01e:	4294      	cmp	r4, r2
 800c020:	d002      	beq.n	800c028 <std+0x48>
 800c022:	33d0      	adds	r3, #208	@ 0xd0
 800c024:	429c      	cmp	r4, r3
 800c026:	d105      	bne.n	800c034 <std+0x54>
 800c028:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c02c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c030:	f000 b976 	b.w	800c320 <__retarget_lock_init_recursive>
 800c034:	bd10      	pop	{r4, pc}
 800c036:	bf00      	nop
 800c038:	0800c165 	.word	0x0800c165
 800c03c:	0800c187 	.word	0x0800c187
 800c040:	0800c1bf 	.word	0x0800c1bf
 800c044:	0800c1e3 	.word	0x0800c1e3
 800c048:	20002608 	.word	0x20002608

0800c04c <stdio_exit_handler>:
 800c04c:	4a02      	ldr	r2, [pc, #8]	@ (800c058 <stdio_exit_handler+0xc>)
 800c04e:	4903      	ldr	r1, [pc, #12]	@ (800c05c <stdio_exit_handler+0x10>)
 800c050:	4803      	ldr	r0, [pc, #12]	@ (800c060 <stdio_exit_handler+0x14>)
 800c052:	f000 b869 	b.w	800c128 <_fwalk_sglue>
 800c056:	bf00      	nop
 800c058:	20000024 	.word	0x20000024
 800c05c:	0800d50d 	.word	0x0800d50d
 800c060:	200001a0 	.word	0x200001a0

0800c064 <cleanup_stdio>:
 800c064:	6841      	ldr	r1, [r0, #4]
 800c066:	4b0c      	ldr	r3, [pc, #48]	@ (800c098 <cleanup_stdio+0x34>)
 800c068:	4299      	cmp	r1, r3
 800c06a:	b510      	push	{r4, lr}
 800c06c:	4604      	mov	r4, r0
 800c06e:	d001      	beq.n	800c074 <cleanup_stdio+0x10>
 800c070:	f001 fa4c 	bl	800d50c <_fflush_r>
 800c074:	68a1      	ldr	r1, [r4, #8]
 800c076:	4b09      	ldr	r3, [pc, #36]	@ (800c09c <cleanup_stdio+0x38>)
 800c078:	4299      	cmp	r1, r3
 800c07a:	d002      	beq.n	800c082 <cleanup_stdio+0x1e>
 800c07c:	4620      	mov	r0, r4
 800c07e:	f001 fa45 	bl	800d50c <_fflush_r>
 800c082:	68e1      	ldr	r1, [r4, #12]
 800c084:	4b06      	ldr	r3, [pc, #24]	@ (800c0a0 <cleanup_stdio+0x3c>)
 800c086:	4299      	cmp	r1, r3
 800c088:	d004      	beq.n	800c094 <cleanup_stdio+0x30>
 800c08a:	4620      	mov	r0, r4
 800c08c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c090:	f001 ba3c 	b.w	800d50c <_fflush_r>
 800c094:	bd10      	pop	{r4, pc}
 800c096:	bf00      	nop
 800c098:	20002608 	.word	0x20002608
 800c09c:	20002670 	.word	0x20002670
 800c0a0:	200026d8 	.word	0x200026d8

0800c0a4 <global_stdio_init.part.0>:
 800c0a4:	b510      	push	{r4, lr}
 800c0a6:	4b0b      	ldr	r3, [pc, #44]	@ (800c0d4 <global_stdio_init.part.0+0x30>)
 800c0a8:	4c0b      	ldr	r4, [pc, #44]	@ (800c0d8 <global_stdio_init.part.0+0x34>)
 800c0aa:	4a0c      	ldr	r2, [pc, #48]	@ (800c0dc <global_stdio_init.part.0+0x38>)
 800c0ac:	601a      	str	r2, [r3, #0]
 800c0ae:	4620      	mov	r0, r4
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	2104      	movs	r1, #4
 800c0b4:	f7ff ff94 	bl	800bfe0 <std>
 800c0b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c0bc:	2201      	movs	r2, #1
 800c0be:	2109      	movs	r1, #9
 800c0c0:	f7ff ff8e 	bl	800bfe0 <std>
 800c0c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c0c8:	2202      	movs	r2, #2
 800c0ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0ce:	2112      	movs	r1, #18
 800c0d0:	f7ff bf86 	b.w	800bfe0 <std>
 800c0d4:	20002740 	.word	0x20002740
 800c0d8:	20002608 	.word	0x20002608
 800c0dc:	0800c04d 	.word	0x0800c04d

0800c0e0 <__sfp_lock_acquire>:
 800c0e0:	4801      	ldr	r0, [pc, #4]	@ (800c0e8 <__sfp_lock_acquire+0x8>)
 800c0e2:	f000 b91e 	b.w	800c322 <__retarget_lock_acquire_recursive>
 800c0e6:	bf00      	nop
 800c0e8:	20002749 	.word	0x20002749

0800c0ec <__sfp_lock_release>:
 800c0ec:	4801      	ldr	r0, [pc, #4]	@ (800c0f4 <__sfp_lock_release+0x8>)
 800c0ee:	f000 b919 	b.w	800c324 <__retarget_lock_release_recursive>
 800c0f2:	bf00      	nop
 800c0f4:	20002749 	.word	0x20002749

0800c0f8 <__sinit>:
 800c0f8:	b510      	push	{r4, lr}
 800c0fa:	4604      	mov	r4, r0
 800c0fc:	f7ff fff0 	bl	800c0e0 <__sfp_lock_acquire>
 800c100:	6a23      	ldr	r3, [r4, #32]
 800c102:	b11b      	cbz	r3, 800c10c <__sinit+0x14>
 800c104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c108:	f7ff bff0 	b.w	800c0ec <__sfp_lock_release>
 800c10c:	4b04      	ldr	r3, [pc, #16]	@ (800c120 <__sinit+0x28>)
 800c10e:	6223      	str	r3, [r4, #32]
 800c110:	4b04      	ldr	r3, [pc, #16]	@ (800c124 <__sinit+0x2c>)
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d1f5      	bne.n	800c104 <__sinit+0xc>
 800c118:	f7ff ffc4 	bl	800c0a4 <global_stdio_init.part.0>
 800c11c:	e7f2      	b.n	800c104 <__sinit+0xc>
 800c11e:	bf00      	nop
 800c120:	0800c065 	.word	0x0800c065
 800c124:	20002740 	.word	0x20002740

0800c128 <_fwalk_sglue>:
 800c128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c12c:	4607      	mov	r7, r0
 800c12e:	4688      	mov	r8, r1
 800c130:	4614      	mov	r4, r2
 800c132:	2600      	movs	r6, #0
 800c134:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c138:	f1b9 0901 	subs.w	r9, r9, #1
 800c13c:	d505      	bpl.n	800c14a <_fwalk_sglue+0x22>
 800c13e:	6824      	ldr	r4, [r4, #0]
 800c140:	2c00      	cmp	r4, #0
 800c142:	d1f7      	bne.n	800c134 <_fwalk_sglue+0xc>
 800c144:	4630      	mov	r0, r6
 800c146:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c14a:	89ab      	ldrh	r3, [r5, #12]
 800c14c:	2b01      	cmp	r3, #1
 800c14e:	d907      	bls.n	800c160 <_fwalk_sglue+0x38>
 800c150:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c154:	3301      	adds	r3, #1
 800c156:	d003      	beq.n	800c160 <_fwalk_sglue+0x38>
 800c158:	4629      	mov	r1, r5
 800c15a:	4638      	mov	r0, r7
 800c15c:	47c0      	blx	r8
 800c15e:	4306      	orrs	r6, r0
 800c160:	3568      	adds	r5, #104	@ 0x68
 800c162:	e7e9      	b.n	800c138 <_fwalk_sglue+0x10>

0800c164 <__sread>:
 800c164:	b510      	push	{r4, lr}
 800c166:	460c      	mov	r4, r1
 800c168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c16c:	f000 f87a 	bl	800c264 <_read_r>
 800c170:	2800      	cmp	r0, #0
 800c172:	bfab      	itete	ge
 800c174:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c176:	89a3      	ldrhlt	r3, [r4, #12]
 800c178:	181b      	addge	r3, r3, r0
 800c17a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c17e:	bfac      	ite	ge
 800c180:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c182:	81a3      	strhlt	r3, [r4, #12]
 800c184:	bd10      	pop	{r4, pc}

0800c186 <__swrite>:
 800c186:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c18a:	461f      	mov	r7, r3
 800c18c:	898b      	ldrh	r3, [r1, #12]
 800c18e:	05db      	lsls	r3, r3, #23
 800c190:	4605      	mov	r5, r0
 800c192:	460c      	mov	r4, r1
 800c194:	4616      	mov	r6, r2
 800c196:	d505      	bpl.n	800c1a4 <__swrite+0x1e>
 800c198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c19c:	2302      	movs	r3, #2
 800c19e:	2200      	movs	r2, #0
 800c1a0:	f000 f84e 	bl	800c240 <_lseek_r>
 800c1a4:	89a3      	ldrh	r3, [r4, #12]
 800c1a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c1ae:	81a3      	strh	r3, [r4, #12]
 800c1b0:	4632      	mov	r2, r6
 800c1b2:	463b      	mov	r3, r7
 800c1b4:	4628      	mov	r0, r5
 800c1b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c1ba:	f000 b875 	b.w	800c2a8 <_write_r>

0800c1be <__sseek>:
 800c1be:	b510      	push	{r4, lr}
 800c1c0:	460c      	mov	r4, r1
 800c1c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1c6:	f000 f83b 	bl	800c240 <_lseek_r>
 800c1ca:	1c43      	adds	r3, r0, #1
 800c1cc:	89a3      	ldrh	r3, [r4, #12]
 800c1ce:	bf15      	itete	ne
 800c1d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c1d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c1d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c1da:	81a3      	strheq	r3, [r4, #12]
 800c1dc:	bf18      	it	ne
 800c1de:	81a3      	strhne	r3, [r4, #12]
 800c1e0:	bd10      	pop	{r4, pc}

0800c1e2 <__sclose>:
 800c1e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1e6:	f000 b81b 	b.w	800c220 <_close_r>

0800c1ea <memset>:
 800c1ea:	4402      	add	r2, r0
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	4293      	cmp	r3, r2
 800c1f0:	d100      	bne.n	800c1f4 <memset+0xa>
 800c1f2:	4770      	bx	lr
 800c1f4:	f803 1b01 	strb.w	r1, [r3], #1
 800c1f8:	e7f9      	b.n	800c1ee <memset+0x4>

0800c1fa <strncmp>:
 800c1fa:	b510      	push	{r4, lr}
 800c1fc:	b16a      	cbz	r2, 800c21a <strncmp+0x20>
 800c1fe:	3901      	subs	r1, #1
 800c200:	1884      	adds	r4, r0, r2
 800c202:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c206:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c20a:	429a      	cmp	r2, r3
 800c20c:	d103      	bne.n	800c216 <strncmp+0x1c>
 800c20e:	42a0      	cmp	r0, r4
 800c210:	d001      	beq.n	800c216 <strncmp+0x1c>
 800c212:	2a00      	cmp	r2, #0
 800c214:	d1f5      	bne.n	800c202 <strncmp+0x8>
 800c216:	1ad0      	subs	r0, r2, r3
 800c218:	bd10      	pop	{r4, pc}
 800c21a:	4610      	mov	r0, r2
 800c21c:	e7fc      	b.n	800c218 <strncmp+0x1e>
	...

0800c220 <_close_r>:
 800c220:	b538      	push	{r3, r4, r5, lr}
 800c222:	4d06      	ldr	r5, [pc, #24]	@ (800c23c <_close_r+0x1c>)
 800c224:	2300      	movs	r3, #0
 800c226:	4604      	mov	r4, r0
 800c228:	4608      	mov	r0, r1
 800c22a:	602b      	str	r3, [r5, #0]
 800c22c:	f7f9 fdc4 	bl	8005db8 <_close>
 800c230:	1c43      	adds	r3, r0, #1
 800c232:	d102      	bne.n	800c23a <_close_r+0x1a>
 800c234:	682b      	ldr	r3, [r5, #0]
 800c236:	b103      	cbz	r3, 800c23a <_close_r+0x1a>
 800c238:	6023      	str	r3, [r4, #0]
 800c23a:	bd38      	pop	{r3, r4, r5, pc}
 800c23c:	20002744 	.word	0x20002744

0800c240 <_lseek_r>:
 800c240:	b538      	push	{r3, r4, r5, lr}
 800c242:	4d07      	ldr	r5, [pc, #28]	@ (800c260 <_lseek_r+0x20>)
 800c244:	4604      	mov	r4, r0
 800c246:	4608      	mov	r0, r1
 800c248:	4611      	mov	r1, r2
 800c24a:	2200      	movs	r2, #0
 800c24c:	602a      	str	r2, [r5, #0]
 800c24e:	461a      	mov	r2, r3
 800c250:	f7f9 fdd9 	bl	8005e06 <_lseek>
 800c254:	1c43      	adds	r3, r0, #1
 800c256:	d102      	bne.n	800c25e <_lseek_r+0x1e>
 800c258:	682b      	ldr	r3, [r5, #0]
 800c25a:	b103      	cbz	r3, 800c25e <_lseek_r+0x1e>
 800c25c:	6023      	str	r3, [r4, #0]
 800c25e:	bd38      	pop	{r3, r4, r5, pc}
 800c260:	20002744 	.word	0x20002744

0800c264 <_read_r>:
 800c264:	b538      	push	{r3, r4, r5, lr}
 800c266:	4d07      	ldr	r5, [pc, #28]	@ (800c284 <_read_r+0x20>)
 800c268:	4604      	mov	r4, r0
 800c26a:	4608      	mov	r0, r1
 800c26c:	4611      	mov	r1, r2
 800c26e:	2200      	movs	r2, #0
 800c270:	602a      	str	r2, [r5, #0]
 800c272:	461a      	mov	r2, r3
 800c274:	f7f9 fd67 	bl	8005d46 <_read>
 800c278:	1c43      	adds	r3, r0, #1
 800c27a:	d102      	bne.n	800c282 <_read_r+0x1e>
 800c27c:	682b      	ldr	r3, [r5, #0]
 800c27e:	b103      	cbz	r3, 800c282 <_read_r+0x1e>
 800c280:	6023      	str	r3, [r4, #0]
 800c282:	bd38      	pop	{r3, r4, r5, pc}
 800c284:	20002744 	.word	0x20002744

0800c288 <_sbrk_r>:
 800c288:	b538      	push	{r3, r4, r5, lr}
 800c28a:	4d06      	ldr	r5, [pc, #24]	@ (800c2a4 <_sbrk_r+0x1c>)
 800c28c:	2300      	movs	r3, #0
 800c28e:	4604      	mov	r4, r0
 800c290:	4608      	mov	r0, r1
 800c292:	602b      	str	r3, [r5, #0]
 800c294:	f7f9 fdc4 	bl	8005e20 <_sbrk>
 800c298:	1c43      	adds	r3, r0, #1
 800c29a:	d102      	bne.n	800c2a2 <_sbrk_r+0x1a>
 800c29c:	682b      	ldr	r3, [r5, #0]
 800c29e:	b103      	cbz	r3, 800c2a2 <_sbrk_r+0x1a>
 800c2a0:	6023      	str	r3, [r4, #0]
 800c2a2:	bd38      	pop	{r3, r4, r5, pc}
 800c2a4:	20002744 	.word	0x20002744

0800c2a8 <_write_r>:
 800c2a8:	b538      	push	{r3, r4, r5, lr}
 800c2aa:	4d07      	ldr	r5, [pc, #28]	@ (800c2c8 <_write_r+0x20>)
 800c2ac:	4604      	mov	r4, r0
 800c2ae:	4608      	mov	r0, r1
 800c2b0:	4611      	mov	r1, r2
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	602a      	str	r2, [r5, #0]
 800c2b6:	461a      	mov	r2, r3
 800c2b8:	f7f9 fd62 	bl	8005d80 <_write>
 800c2bc:	1c43      	adds	r3, r0, #1
 800c2be:	d102      	bne.n	800c2c6 <_write_r+0x1e>
 800c2c0:	682b      	ldr	r3, [r5, #0]
 800c2c2:	b103      	cbz	r3, 800c2c6 <_write_r+0x1e>
 800c2c4:	6023      	str	r3, [r4, #0]
 800c2c6:	bd38      	pop	{r3, r4, r5, pc}
 800c2c8:	20002744 	.word	0x20002744

0800c2cc <__errno>:
 800c2cc:	4b01      	ldr	r3, [pc, #4]	@ (800c2d4 <__errno+0x8>)
 800c2ce:	6818      	ldr	r0, [r3, #0]
 800c2d0:	4770      	bx	lr
 800c2d2:	bf00      	nop
 800c2d4:	2000019c 	.word	0x2000019c

0800c2d8 <__libc_init_array>:
 800c2d8:	b570      	push	{r4, r5, r6, lr}
 800c2da:	4d0d      	ldr	r5, [pc, #52]	@ (800c310 <__libc_init_array+0x38>)
 800c2dc:	4c0d      	ldr	r4, [pc, #52]	@ (800c314 <__libc_init_array+0x3c>)
 800c2de:	1b64      	subs	r4, r4, r5
 800c2e0:	10a4      	asrs	r4, r4, #2
 800c2e2:	2600      	movs	r6, #0
 800c2e4:	42a6      	cmp	r6, r4
 800c2e6:	d109      	bne.n	800c2fc <__libc_init_array+0x24>
 800c2e8:	4d0b      	ldr	r5, [pc, #44]	@ (800c318 <__libc_init_array+0x40>)
 800c2ea:	4c0c      	ldr	r4, [pc, #48]	@ (800c31c <__libc_init_array+0x44>)
 800c2ec:	f002 fea8 	bl	800f040 <_init>
 800c2f0:	1b64      	subs	r4, r4, r5
 800c2f2:	10a4      	asrs	r4, r4, #2
 800c2f4:	2600      	movs	r6, #0
 800c2f6:	42a6      	cmp	r6, r4
 800c2f8:	d105      	bne.n	800c306 <__libc_init_array+0x2e>
 800c2fa:	bd70      	pop	{r4, r5, r6, pc}
 800c2fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800c300:	4798      	blx	r3
 800c302:	3601      	adds	r6, #1
 800c304:	e7ee      	b.n	800c2e4 <__libc_init_array+0xc>
 800c306:	f855 3b04 	ldr.w	r3, [r5], #4
 800c30a:	4798      	blx	r3
 800c30c:	3601      	adds	r6, #1
 800c30e:	e7f2      	b.n	800c2f6 <__libc_init_array+0x1e>
 800c310:	0800f4e8 	.word	0x0800f4e8
 800c314:	0800f4e8 	.word	0x0800f4e8
 800c318:	0800f4e8 	.word	0x0800f4e8
 800c31c:	0800f4ec 	.word	0x0800f4ec

0800c320 <__retarget_lock_init_recursive>:
 800c320:	4770      	bx	lr

0800c322 <__retarget_lock_acquire_recursive>:
 800c322:	4770      	bx	lr

0800c324 <__retarget_lock_release_recursive>:
 800c324:	4770      	bx	lr

0800c326 <memcpy>:
 800c326:	440a      	add	r2, r1
 800c328:	4291      	cmp	r1, r2
 800c32a:	f100 33ff 	add.w	r3, r0, #4294967295
 800c32e:	d100      	bne.n	800c332 <memcpy+0xc>
 800c330:	4770      	bx	lr
 800c332:	b510      	push	{r4, lr}
 800c334:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c338:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c33c:	4291      	cmp	r1, r2
 800c33e:	d1f9      	bne.n	800c334 <memcpy+0xe>
 800c340:	bd10      	pop	{r4, pc}
 800c342:	0000      	movs	r0, r0
 800c344:	0000      	movs	r0, r0
	...

0800c348 <nan>:
 800c348:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c350 <nan+0x8>
 800c34c:	4770      	bx	lr
 800c34e:	bf00      	nop
 800c350:	00000000 	.word	0x00000000
 800c354:	7ff80000 	.word	0x7ff80000

0800c358 <_free_r>:
 800c358:	b538      	push	{r3, r4, r5, lr}
 800c35a:	4605      	mov	r5, r0
 800c35c:	2900      	cmp	r1, #0
 800c35e:	d041      	beq.n	800c3e4 <_free_r+0x8c>
 800c360:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c364:	1f0c      	subs	r4, r1, #4
 800c366:	2b00      	cmp	r3, #0
 800c368:	bfb8      	it	lt
 800c36a:	18e4      	addlt	r4, r4, r3
 800c36c:	f7ff f81c 	bl	800b3a8 <__malloc_lock>
 800c370:	4a1d      	ldr	r2, [pc, #116]	@ (800c3e8 <_free_r+0x90>)
 800c372:	6813      	ldr	r3, [r2, #0]
 800c374:	b933      	cbnz	r3, 800c384 <_free_r+0x2c>
 800c376:	6063      	str	r3, [r4, #4]
 800c378:	6014      	str	r4, [r2, #0]
 800c37a:	4628      	mov	r0, r5
 800c37c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c380:	f7ff b818 	b.w	800b3b4 <__malloc_unlock>
 800c384:	42a3      	cmp	r3, r4
 800c386:	d908      	bls.n	800c39a <_free_r+0x42>
 800c388:	6820      	ldr	r0, [r4, #0]
 800c38a:	1821      	adds	r1, r4, r0
 800c38c:	428b      	cmp	r3, r1
 800c38e:	bf01      	itttt	eq
 800c390:	6819      	ldreq	r1, [r3, #0]
 800c392:	685b      	ldreq	r3, [r3, #4]
 800c394:	1809      	addeq	r1, r1, r0
 800c396:	6021      	streq	r1, [r4, #0]
 800c398:	e7ed      	b.n	800c376 <_free_r+0x1e>
 800c39a:	461a      	mov	r2, r3
 800c39c:	685b      	ldr	r3, [r3, #4]
 800c39e:	b10b      	cbz	r3, 800c3a4 <_free_r+0x4c>
 800c3a0:	42a3      	cmp	r3, r4
 800c3a2:	d9fa      	bls.n	800c39a <_free_r+0x42>
 800c3a4:	6811      	ldr	r1, [r2, #0]
 800c3a6:	1850      	adds	r0, r2, r1
 800c3a8:	42a0      	cmp	r0, r4
 800c3aa:	d10b      	bne.n	800c3c4 <_free_r+0x6c>
 800c3ac:	6820      	ldr	r0, [r4, #0]
 800c3ae:	4401      	add	r1, r0
 800c3b0:	1850      	adds	r0, r2, r1
 800c3b2:	4283      	cmp	r3, r0
 800c3b4:	6011      	str	r1, [r2, #0]
 800c3b6:	d1e0      	bne.n	800c37a <_free_r+0x22>
 800c3b8:	6818      	ldr	r0, [r3, #0]
 800c3ba:	685b      	ldr	r3, [r3, #4]
 800c3bc:	6053      	str	r3, [r2, #4]
 800c3be:	4408      	add	r0, r1
 800c3c0:	6010      	str	r0, [r2, #0]
 800c3c2:	e7da      	b.n	800c37a <_free_r+0x22>
 800c3c4:	d902      	bls.n	800c3cc <_free_r+0x74>
 800c3c6:	230c      	movs	r3, #12
 800c3c8:	602b      	str	r3, [r5, #0]
 800c3ca:	e7d6      	b.n	800c37a <_free_r+0x22>
 800c3cc:	6820      	ldr	r0, [r4, #0]
 800c3ce:	1821      	adds	r1, r4, r0
 800c3d0:	428b      	cmp	r3, r1
 800c3d2:	bf04      	itt	eq
 800c3d4:	6819      	ldreq	r1, [r3, #0]
 800c3d6:	685b      	ldreq	r3, [r3, #4]
 800c3d8:	6063      	str	r3, [r4, #4]
 800c3da:	bf04      	itt	eq
 800c3dc:	1809      	addeq	r1, r1, r0
 800c3de:	6021      	streq	r1, [r4, #0]
 800c3e0:	6054      	str	r4, [r2, #4]
 800c3e2:	e7ca      	b.n	800c37a <_free_r+0x22>
 800c3e4:	bd38      	pop	{r3, r4, r5, pc}
 800c3e6:	bf00      	nop
 800c3e8:	20002604 	.word	0x20002604

0800c3ec <rshift>:
 800c3ec:	6903      	ldr	r3, [r0, #16]
 800c3ee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c3f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c3f6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c3fa:	f100 0414 	add.w	r4, r0, #20
 800c3fe:	dd45      	ble.n	800c48c <rshift+0xa0>
 800c400:	f011 011f 	ands.w	r1, r1, #31
 800c404:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c408:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c40c:	d10c      	bne.n	800c428 <rshift+0x3c>
 800c40e:	f100 0710 	add.w	r7, r0, #16
 800c412:	4629      	mov	r1, r5
 800c414:	42b1      	cmp	r1, r6
 800c416:	d334      	bcc.n	800c482 <rshift+0x96>
 800c418:	1a9b      	subs	r3, r3, r2
 800c41a:	009b      	lsls	r3, r3, #2
 800c41c:	1eea      	subs	r2, r5, #3
 800c41e:	4296      	cmp	r6, r2
 800c420:	bf38      	it	cc
 800c422:	2300      	movcc	r3, #0
 800c424:	4423      	add	r3, r4
 800c426:	e015      	b.n	800c454 <rshift+0x68>
 800c428:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c42c:	f1c1 0820 	rsb	r8, r1, #32
 800c430:	40cf      	lsrs	r7, r1
 800c432:	f105 0e04 	add.w	lr, r5, #4
 800c436:	46a1      	mov	r9, r4
 800c438:	4576      	cmp	r6, lr
 800c43a:	46f4      	mov	ip, lr
 800c43c:	d815      	bhi.n	800c46a <rshift+0x7e>
 800c43e:	1a9a      	subs	r2, r3, r2
 800c440:	0092      	lsls	r2, r2, #2
 800c442:	3a04      	subs	r2, #4
 800c444:	3501      	adds	r5, #1
 800c446:	42ae      	cmp	r6, r5
 800c448:	bf38      	it	cc
 800c44a:	2200      	movcc	r2, #0
 800c44c:	18a3      	adds	r3, r4, r2
 800c44e:	50a7      	str	r7, [r4, r2]
 800c450:	b107      	cbz	r7, 800c454 <rshift+0x68>
 800c452:	3304      	adds	r3, #4
 800c454:	1b1a      	subs	r2, r3, r4
 800c456:	42a3      	cmp	r3, r4
 800c458:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c45c:	bf08      	it	eq
 800c45e:	2300      	moveq	r3, #0
 800c460:	6102      	str	r2, [r0, #16]
 800c462:	bf08      	it	eq
 800c464:	6143      	streq	r3, [r0, #20]
 800c466:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c46a:	f8dc c000 	ldr.w	ip, [ip]
 800c46e:	fa0c fc08 	lsl.w	ip, ip, r8
 800c472:	ea4c 0707 	orr.w	r7, ip, r7
 800c476:	f849 7b04 	str.w	r7, [r9], #4
 800c47a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c47e:	40cf      	lsrs	r7, r1
 800c480:	e7da      	b.n	800c438 <rshift+0x4c>
 800c482:	f851 cb04 	ldr.w	ip, [r1], #4
 800c486:	f847 cf04 	str.w	ip, [r7, #4]!
 800c48a:	e7c3      	b.n	800c414 <rshift+0x28>
 800c48c:	4623      	mov	r3, r4
 800c48e:	e7e1      	b.n	800c454 <rshift+0x68>

0800c490 <__hexdig_fun>:
 800c490:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c494:	2b09      	cmp	r3, #9
 800c496:	d802      	bhi.n	800c49e <__hexdig_fun+0xe>
 800c498:	3820      	subs	r0, #32
 800c49a:	b2c0      	uxtb	r0, r0
 800c49c:	4770      	bx	lr
 800c49e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c4a2:	2b05      	cmp	r3, #5
 800c4a4:	d801      	bhi.n	800c4aa <__hexdig_fun+0x1a>
 800c4a6:	3847      	subs	r0, #71	@ 0x47
 800c4a8:	e7f7      	b.n	800c49a <__hexdig_fun+0xa>
 800c4aa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c4ae:	2b05      	cmp	r3, #5
 800c4b0:	d801      	bhi.n	800c4b6 <__hexdig_fun+0x26>
 800c4b2:	3827      	subs	r0, #39	@ 0x27
 800c4b4:	e7f1      	b.n	800c49a <__hexdig_fun+0xa>
 800c4b6:	2000      	movs	r0, #0
 800c4b8:	4770      	bx	lr
	...

0800c4bc <__gethex>:
 800c4bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4c0:	b085      	sub	sp, #20
 800c4c2:	468a      	mov	sl, r1
 800c4c4:	9302      	str	r3, [sp, #8]
 800c4c6:	680b      	ldr	r3, [r1, #0]
 800c4c8:	9001      	str	r0, [sp, #4]
 800c4ca:	4690      	mov	r8, r2
 800c4cc:	1c9c      	adds	r4, r3, #2
 800c4ce:	46a1      	mov	r9, r4
 800c4d0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c4d4:	2830      	cmp	r0, #48	@ 0x30
 800c4d6:	d0fa      	beq.n	800c4ce <__gethex+0x12>
 800c4d8:	eba9 0303 	sub.w	r3, r9, r3
 800c4dc:	f1a3 0b02 	sub.w	fp, r3, #2
 800c4e0:	f7ff ffd6 	bl	800c490 <__hexdig_fun>
 800c4e4:	4605      	mov	r5, r0
 800c4e6:	2800      	cmp	r0, #0
 800c4e8:	d168      	bne.n	800c5bc <__gethex+0x100>
 800c4ea:	49a0      	ldr	r1, [pc, #640]	@ (800c76c <__gethex+0x2b0>)
 800c4ec:	2201      	movs	r2, #1
 800c4ee:	4648      	mov	r0, r9
 800c4f0:	f7ff fe83 	bl	800c1fa <strncmp>
 800c4f4:	4607      	mov	r7, r0
 800c4f6:	2800      	cmp	r0, #0
 800c4f8:	d167      	bne.n	800c5ca <__gethex+0x10e>
 800c4fa:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c4fe:	4626      	mov	r6, r4
 800c500:	f7ff ffc6 	bl	800c490 <__hexdig_fun>
 800c504:	2800      	cmp	r0, #0
 800c506:	d062      	beq.n	800c5ce <__gethex+0x112>
 800c508:	4623      	mov	r3, r4
 800c50a:	7818      	ldrb	r0, [r3, #0]
 800c50c:	2830      	cmp	r0, #48	@ 0x30
 800c50e:	4699      	mov	r9, r3
 800c510:	f103 0301 	add.w	r3, r3, #1
 800c514:	d0f9      	beq.n	800c50a <__gethex+0x4e>
 800c516:	f7ff ffbb 	bl	800c490 <__hexdig_fun>
 800c51a:	fab0 f580 	clz	r5, r0
 800c51e:	096d      	lsrs	r5, r5, #5
 800c520:	f04f 0b01 	mov.w	fp, #1
 800c524:	464a      	mov	r2, r9
 800c526:	4616      	mov	r6, r2
 800c528:	3201      	adds	r2, #1
 800c52a:	7830      	ldrb	r0, [r6, #0]
 800c52c:	f7ff ffb0 	bl	800c490 <__hexdig_fun>
 800c530:	2800      	cmp	r0, #0
 800c532:	d1f8      	bne.n	800c526 <__gethex+0x6a>
 800c534:	498d      	ldr	r1, [pc, #564]	@ (800c76c <__gethex+0x2b0>)
 800c536:	2201      	movs	r2, #1
 800c538:	4630      	mov	r0, r6
 800c53a:	f7ff fe5e 	bl	800c1fa <strncmp>
 800c53e:	2800      	cmp	r0, #0
 800c540:	d13f      	bne.n	800c5c2 <__gethex+0x106>
 800c542:	b944      	cbnz	r4, 800c556 <__gethex+0x9a>
 800c544:	1c74      	adds	r4, r6, #1
 800c546:	4622      	mov	r2, r4
 800c548:	4616      	mov	r6, r2
 800c54a:	3201      	adds	r2, #1
 800c54c:	7830      	ldrb	r0, [r6, #0]
 800c54e:	f7ff ff9f 	bl	800c490 <__hexdig_fun>
 800c552:	2800      	cmp	r0, #0
 800c554:	d1f8      	bne.n	800c548 <__gethex+0x8c>
 800c556:	1ba4      	subs	r4, r4, r6
 800c558:	00a7      	lsls	r7, r4, #2
 800c55a:	7833      	ldrb	r3, [r6, #0]
 800c55c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c560:	2b50      	cmp	r3, #80	@ 0x50
 800c562:	d13e      	bne.n	800c5e2 <__gethex+0x126>
 800c564:	7873      	ldrb	r3, [r6, #1]
 800c566:	2b2b      	cmp	r3, #43	@ 0x2b
 800c568:	d033      	beq.n	800c5d2 <__gethex+0x116>
 800c56a:	2b2d      	cmp	r3, #45	@ 0x2d
 800c56c:	d034      	beq.n	800c5d8 <__gethex+0x11c>
 800c56e:	1c71      	adds	r1, r6, #1
 800c570:	2400      	movs	r4, #0
 800c572:	7808      	ldrb	r0, [r1, #0]
 800c574:	f7ff ff8c 	bl	800c490 <__hexdig_fun>
 800c578:	1e43      	subs	r3, r0, #1
 800c57a:	b2db      	uxtb	r3, r3
 800c57c:	2b18      	cmp	r3, #24
 800c57e:	d830      	bhi.n	800c5e2 <__gethex+0x126>
 800c580:	f1a0 0210 	sub.w	r2, r0, #16
 800c584:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c588:	f7ff ff82 	bl	800c490 <__hexdig_fun>
 800c58c:	f100 3cff 	add.w	ip, r0, #4294967295
 800c590:	fa5f fc8c 	uxtb.w	ip, ip
 800c594:	f1bc 0f18 	cmp.w	ip, #24
 800c598:	f04f 030a 	mov.w	r3, #10
 800c59c:	d91e      	bls.n	800c5dc <__gethex+0x120>
 800c59e:	b104      	cbz	r4, 800c5a2 <__gethex+0xe6>
 800c5a0:	4252      	negs	r2, r2
 800c5a2:	4417      	add	r7, r2
 800c5a4:	f8ca 1000 	str.w	r1, [sl]
 800c5a8:	b1ed      	cbz	r5, 800c5e6 <__gethex+0x12a>
 800c5aa:	f1bb 0f00 	cmp.w	fp, #0
 800c5ae:	bf0c      	ite	eq
 800c5b0:	2506      	moveq	r5, #6
 800c5b2:	2500      	movne	r5, #0
 800c5b4:	4628      	mov	r0, r5
 800c5b6:	b005      	add	sp, #20
 800c5b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5bc:	2500      	movs	r5, #0
 800c5be:	462c      	mov	r4, r5
 800c5c0:	e7b0      	b.n	800c524 <__gethex+0x68>
 800c5c2:	2c00      	cmp	r4, #0
 800c5c4:	d1c7      	bne.n	800c556 <__gethex+0x9a>
 800c5c6:	4627      	mov	r7, r4
 800c5c8:	e7c7      	b.n	800c55a <__gethex+0x9e>
 800c5ca:	464e      	mov	r6, r9
 800c5cc:	462f      	mov	r7, r5
 800c5ce:	2501      	movs	r5, #1
 800c5d0:	e7c3      	b.n	800c55a <__gethex+0x9e>
 800c5d2:	2400      	movs	r4, #0
 800c5d4:	1cb1      	adds	r1, r6, #2
 800c5d6:	e7cc      	b.n	800c572 <__gethex+0xb6>
 800c5d8:	2401      	movs	r4, #1
 800c5da:	e7fb      	b.n	800c5d4 <__gethex+0x118>
 800c5dc:	fb03 0002 	mla	r0, r3, r2, r0
 800c5e0:	e7ce      	b.n	800c580 <__gethex+0xc4>
 800c5e2:	4631      	mov	r1, r6
 800c5e4:	e7de      	b.n	800c5a4 <__gethex+0xe8>
 800c5e6:	eba6 0309 	sub.w	r3, r6, r9
 800c5ea:	3b01      	subs	r3, #1
 800c5ec:	4629      	mov	r1, r5
 800c5ee:	2b07      	cmp	r3, #7
 800c5f0:	dc0a      	bgt.n	800c608 <__gethex+0x14c>
 800c5f2:	9801      	ldr	r0, [sp, #4]
 800c5f4:	f000 fa46 	bl	800ca84 <_Balloc>
 800c5f8:	4604      	mov	r4, r0
 800c5fa:	b940      	cbnz	r0, 800c60e <__gethex+0x152>
 800c5fc:	4b5c      	ldr	r3, [pc, #368]	@ (800c770 <__gethex+0x2b4>)
 800c5fe:	4602      	mov	r2, r0
 800c600:	21e4      	movs	r1, #228	@ 0xe4
 800c602:	485c      	ldr	r0, [pc, #368]	@ (800c774 <__gethex+0x2b8>)
 800c604:	f000 ffaa 	bl	800d55c <__assert_func>
 800c608:	3101      	adds	r1, #1
 800c60a:	105b      	asrs	r3, r3, #1
 800c60c:	e7ef      	b.n	800c5ee <__gethex+0x132>
 800c60e:	f100 0a14 	add.w	sl, r0, #20
 800c612:	2300      	movs	r3, #0
 800c614:	4655      	mov	r5, sl
 800c616:	469b      	mov	fp, r3
 800c618:	45b1      	cmp	r9, r6
 800c61a:	d337      	bcc.n	800c68c <__gethex+0x1d0>
 800c61c:	f845 bb04 	str.w	fp, [r5], #4
 800c620:	eba5 050a 	sub.w	r5, r5, sl
 800c624:	10ad      	asrs	r5, r5, #2
 800c626:	6125      	str	r5, [r4, #16]
 800c628:	4658      	mov	r0, fp
 800c62a:	f000 fb1d 	bl	800cc68 <__hi0bits>
 800c62e:	016d      	lsls	r5, r5, #5
 800c630:	f8d8 6000 	ldr.w	r6, [r8]
 800c634:	1a2d      	subs	r5, r5, r0
 800c636:	42b5      	cmp	r5, r6
 800c638:	dd54      	ble.n	800c6e4 <__gethex+0x228>
 800c63a:	1bad      	subs	r5, r5, r6
 800c63c:	4629      	mov	r1, r5
 800c63e:	4620      	mov	r0, r4
 800c640:	f000 feb1 	bl	800d3a6 <__any_on>
 800c644:	4681      	mov	r9, r0
 800c646:	b178      	cbz	r0, 800c668 <__gethex+0x1ac>
 800c648:	1e6b      	subs	r3, r5, #1
 800c64a:	1159      	asrs	r1, r3, #5
 800c64c:	f003 021f 	and.w	r2, r3, #31
 800c650:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c654:	f04f 0901 	mov.w	r9, #1
 800c658:	fa09 f202 	lsl.w	r2, r9, r2
 800c65c:	420a      	tst	r2, r1
 800c65e:	d003      	beq.n	800c668 <__gethex+0x1ac>
 800c660:	454b      	cmp	r3, r9
 800c662:	dc36      	bgt.n	800c6d2 <__gethex+0x216>
 800c664:	f04f 0902 	mov.w	r9, #2
 800c668:	4629      	mov	r1, r5
 800c66a:	4620      	mov	r0, r4
 800c66c:	f7ff febe 	bl	800c3ec <rshift>
 800c670:	442f      	add	r7, r5
 800c672:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c676:	42bb      	cmp	r3, r7
 800c678:	da42      	bge.n	800c700 <__gethex+0x244>
 800c67a:	9801      	ldr	r0, [sp, #4]
 800c67c:	4621      	mov	r1, r4
 800c67e:	f000 fa41 	bl	800cb04 <_Bfree>
 800c682:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c684:	2300      	movs	r3, #0
 800c686:	6013      	str	r3, [r2, #0]
 800c688:	25a3      	movs	r5, #163	@ 0xa3
 800c68a:	e793      	b.n	800c5b4 <__gethex+0xf8>
 800c68c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c690:	2a2e      	cmp	r2, #46	@ 0x2e
 800c692:	d012      	beq.n	800c6ba <__gethex+0x1fe>
 800c694:	2b20      	cmp	r3, #32
 800c696:	d104      	bne.n	800c6a2 <__gethex+0x1e6>
 800c698:	f845 bb04 	str.w	fp, [r5], #4
 800c69c:	f04f 0b00 	mov.w	fp, #0
 800c6a0:	465b      	mov	r3, fp
 800c6a2:	7830      	ldrb	r0, [r6, #0]
 800c6a4:	9303      	str	r3, [sp, #12]
 800c6a6:	f7ff fef3 	bl	800c490 <__hexdig_fun>
 800c6aa:	9b03      	ldr	r3, [sp, #12]
 800c6ac:	f000 000f 	and.w	r0, r0, #15
 800c6b0:	4098      	lsls	r0, r3
 800c6b2:	ea4b 0b00 	orr.w	fp, fp, r0
 800c6b6:	3304      	adds	r3, #4
 800c6b8:	e7ae      	b.n	800c618 <__gethex+0x15c>
 800c6ba:	45b1      	cmp	r9, r6
 800c6bc:	d8ea      	bhi.n	800c694 <__gethex+0x1d8>
 800c6be:	492b      	ldr	r1, [pc, #172]	@ (800c76c <__gethex+0x2b0>)
 800c6c0:	9303      	str	r3, [sp, #12]
 800c6c2:	2201      	movs	r2, #1
 800c6c4:	4630      	mov	r0, r6
 800c6c6:	f7ff fd98 	bl	800c1fa <strncmp>
 800c6ca:	9b03      	ldr	r3, [sp, #12]
 800c6cc:	2800      	cmp	r0, #0
 800c6ce:	d1e1      	bne.n	800c694 <__gethex+0x1d8>
 800c6d0:	e7a2      	b.n	800c618 <__gethex+0x15c>
 800c6d2:	1ea9      	subs	r1, r5, #2
 800c6d4:	4620      	mov	r0, r4
 800c6d6:	f000 fe66 	bl	800d3a6 <__any_on>
 800c6da:	2800      	cmp	r0, #0
 800c6dc:	d0c2      	beq.n	800c664 <__gethex+0x1a8>
 800c6de:	f04f 0903 	mov.w	r9, #3
 800c6e2:	e7c1      	b.n	800c668 <__gethex+0x1ac>
 800c6e4:	da09      	bge.n	800c6fa <__gethex+0x23e>
 800c6e6:	1b75      	subs	r5, r6, r5
 800c6e8:	4621      	mov	r1, r4
 800c6ea:	9801      	ldr	r0, [sp, #4]
 800c6ec:	462a      	mov	r2, r5
 800c6ee:	f000 fc21 	bl	800cf34 <__lshift>
 800c6f2:	1b7f      	subs	r7, r7, r5
 800c6f4:	4604      	mov	r4, r0
 800c6f6:	f100 0a14 	add.w	sl, r0, #20
 800c6fa:	f04f 0900 	mov.w	r9, #0
 800c6fe:	e7b8      	b.n	800c672 <__gethex+0x1b6>
 800c700:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c704:	42bd      	cmp	r5, r7
 800c706:	dd6f      	ble.n	800c7e8 <__gethex+0x32c>
 800c708:	1bed      	subs	r5, r5, r7
 800c70a:	42ae      	cmp	r6, r5
 800c70c:	dc34      	bgt.n	800c778 <__gethex+0x2bc>
 800c70e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c712:	2b02      	cmp	r3, #2
 800c714:	d022      	beq.n	800c75c <__gethex+0x2a0>
 800c716:	2b03      	cmp	r3, #3
 800c718:	d024      	beq.n	800c764 <__gethex+0x2a8>
 800c71a:	2b01      	cmp	r3, #1
 800c71c:	d115      	bne.n	800c74a <__gethex+0x28e>
 800c71e:	42ae      	cmp	r6, r5
 800c720:	d113      	bne.n	800c74a <__gethex+0x28e>
 800c722:	2e01      	cmp	r6, #1
 800c724:	d10b      	bne.n	800c73e <__gethex+0x282>
 800c726:	9a02      	ldr	r2, [sp, #8]
 800c728:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c72c:	6013      	str	r3, [r2, #0]
 800c72e:	2301      	movs	r3, #1
 800c730:	6123      	str	r3, [r4, #16]
 800c732:	f8ca 3000 	str.w	r3, [sl]
 800c736:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c738:	2562      	movs	r5, #98	@ 0x62
 800c73a:	601c      	str	r4, [r3, #0]
 800c73c:	e73a      	b.n	800c5b4 <__gethex+0xf8>
 800c73e:	1e71      	subs	r1, r6, #1
 800c740:	4620      	mov	r0, r4
 800c742:	f000 fe30 	bl	800d3a6 <__any_on>
 800c746:	2800      	cmp	r0, #0
 800c748:	d1ed      	bne.n	800c726 <__gethex+0x26a>
 800c74a:	9801      	ldr	r0, [sp, #4]
 800c74c:	4621      	mov	r1, r4
 800c74e:	f000 f9d9 	bl	800cb04 <_Bfree>
 800c752:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c754:	2300      	movs	r3, #0
 800c756:	6013      	str	r3, [r2, #0]
 800c758:	2550      	movs	r5, #80	@ 0x50
 800c75a:	e72b      	b.n	800c5b4 <__gethex+0xf8>
 800c75c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d1f3      	bne.n	800c74a <__gethex+0x28e>
 800c762:	e7e0      	b.n	800c726 <__gethex+0x26a>
 800c764:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c766:	2b00      	cmp	r3, #0
 800c768:	d1dd      	bne.n	800c726 <__gethex+0x26a>
 800c76a:	e7ee      	b.n	800c74a <__gethex+0x28e>
 800c76c:	0800f0c0 	.word	0x0800f0c0
 800c770:	0800f128 	.word	0x0800f128
 800c774:	0800f139 	.word	0x0800f139
 800c778:	1e6f      	subs	r7, r5, #1
 800c77a:	f1b9 0f00 	cmp.w	r9, #0
 800c77e:	d130      	bne.n	800c7e2 <__gethex+0x326>
 800c780:	b127      	cbz	r7, 800c78c <__gethex+0x2d0>
 800c782:	4639      	mov	r1, r7
 800c784:	4620      	mov	r0, r4
 800c786:	f000 fe0e 	bl	800d3a6 <__any_on>
 800c78a:	4681      	mov	r9, r0
 800c78c:	117a      	asrs	r2, r7, #5
 800c78e:	2301      	movs	r3, #1
 800c790:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c794:	f007 071f 	and.w	r7, r7, #31
 800c798:	40bb      	lsls	r3, r7
 800c79a:	4213      	tst	r3, r2
 800c79c:	4629      	mov	r1, r5
 800c79e:	4620      	mov	r0, r4
 800c7a0:	bf18      	it	ne
 800c7a2:	f049 0902 	orrne.w	r9, r9, #2
 800c7a6:	f7ff fe21 	bl	800c3ec <rshift>
 800c7aa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c7ae:	1b76      	subs	r6, r6, r5
 800c7b0:	2502      	movs	r5, #2
 800c7b2:	f1b9 0f00 	cmp.w	r9, #0
 800c7b6:	d047      	beq.n	800c848 <__gethex+0x38c>
 800c7b8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c7bc:	2b02      	cmp	r3, #2
 800c7be:	d015      	beq.n	800c7ec <__gethex+0x330>
 800c7c0:	2b03      	cmp	r3, #3
 800c7c2:	d017      	beq.n	800c7f4 <__gethex+0x338>
 800c7c4:	2b01      	cmp	r3, #1
 800c7c6:	d109      	bne.n	800c7dc <__gethex+0x320>
 800c7c8:	f019 0f02 	tst.w	r9, #2
 800c7cc:	d006      	beq.n	800c7dc <__gethex+0x320>
 800c7ce:	f8da 3000 	ldr.w	r3, [sl]
 800c7d2:	ea49 0903 	orr.w	r9, r9, r3
 800c7d6:	f019 0f01 	tst.w	r9, #1
 800c7da:	d10e      	bne.n	800c7fa <__gethex+0x33e>
 800c7dc:	f045 0510 	orr.w	r5, r5, #16
 800c7e0:	e032      	b.n	800c848 <__gethex+0x38c>
 800c7e2:	f04f 0901 	mov.w	r9, #1
 800c7e6:	e7d1      	b.n	800c78c <__gethex+0x2d0>
 800c7e8:	2501      	movs	r5, #1
 800c7ea:	e7e2      	b.n	800c7b2 <__gethex+0x2f6>
 800c7ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c7ee:	f1c3 0301 	rsb	r3, r3, #1
 800c7f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c7f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d0f0      	beq.n	800c7dc <__gethex+0x320>
 800c7fa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c7fe:	f104 0314 	add.w	r3, r4, #20
 800c802:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c806:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c80a:	f04f 0c00 	mov.w	ip, #0
 800c80e:	4618      	mov	r0, r3
 800c810:	f853 2b04 	ldr.w	r2, [r3], #4
 800c814:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c818:	d01b      	beq.n	800c852 <__gethex+0x396>
 800c81a:	3201      	adds	r2, #1
 800c81c:	6002      	str	r2, [r0, #0]
 800c81e:	2d02      	cmp	r5, #2
 800c820:	f104 0314 	add.w	r3, r4, #20
 800c824:	d13c      	bne.n	800c8a0 <__gethex+0x3e4>
 800c826:	f8d8 2000 	ldr.w	r2, [r8]
 800c82a:	3a01      	subs	r2, #1
 800c82c:	42b2      	cmp	r2, r6
 800c82e:	d109      	bne.n	800c844 <__gethex+0x388>
 800c830:	1171      	asrs	r1, r6, #5
 800c832:	2201      	movs	r2, #1
 800c834:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c838:	f006 061f 	and.w	r6, r6, #31
 800c83c:	fa02 f606 	lsl.w	r6, r2, r6
 800c840:	421e      	tst	r6, r3
 800c842:	d13a      	bne.n	800c8ba <__gethex+0x3fe>
 800c844:	f045 0520 	orr.w	r5, r5, #32
 800c848:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c84a:	601c      	str	r4, [r3, #0]
 800c84c:	9b02      	ldr	r3, [sp, #8]
 800c84e:	601f      	str	r7, [r3, #0]
 800c850:	e6b0      	b.n	800c5b4 <__gethex+0xf8>
 800c852:	4299      	cmp	r1, r3
 800c854:	f843 cc04 	str.w	ip, [r3, #-4]
 800c858:	d8d9      	bhi.n	800c80e <__gethex+0x352>
 800c85a:	68a3      	ldr	r3, [r4, #8]
 800c85c:	459b      	cmp	fp, r3
 800c85e:	db17      	blt.n	800c890 <__gethex+0x3d4>
 800c860:	6861      	ldr	r1, [r4, #4]
 800c862:	9801      	ldr	r0, [sp, #4]
 800c864:	3101      	adds	r1, #1
 800c866:	f000 f90d 	bl	800ca84 <_Balloc>
 800c86a:	4681      	mov	r9, r0
 800c86c:	b918      	cbnz	r0, 800c876 <__gethex+0x3ba>
 800c86e:	4b1a      	ldr	r3, [pc, #104]	@ (800c8d8 <__gethex+0x41c>)
 800c870:	4602      	mov	r2, r0
 800c872:	2184      	movs	r1, #132	@ 0x84
 800c874:	e6c5      	b.n	800c602 <__gethex+0x146>
 800c876:	6922      	ldr	r2, [r4, #16]
 800c878:	3202      	adds	r2, #2
 800c87a:	f104 010c 	add.w	r1, r4, #12
 800c87e:	0092      	lsls	r2, r2, #2
 800c880:	300c      	adds	r0, #12
 800c882:	f7ff fd50 	bl	800c326 <memcpy>
 800c886:	4621      	mov	r1, r4
 800c888:	9801      	ldr	r0, [sp, #4]
 800c88a:	f000 f93b 	bl	800cb04 <_Bfree>
 800c88e:	464c      	mov	r4, r9
 800c890:	6923      	ldr	r3, [r4, #16]
 800c892:	1c5a      	adds	r2, r3, #1
 800c894:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c898:	6122      	str	r2, [r4, #16]
 800c89a:	2201      	movs	r2, #1
 800c89c:	615a      	str	r2, [r3, #20]
 800c89e:	e7be      	b.n	800c81e <__gethex+0x362>
 800c8a0:	6922      	ldr	r2, [r4, #16]
 800c8a2:	455a      	cmp	r2, fp
 800c8a4:	dd0b      	ble.n	800c8be <__gethex+0x402>
 800c8a6:	2101      	movs	r1, #1
 800c8a8:	4620      	mov	r0, r4
 800c8aa:	f7ff fd9f 	bl	800c3ec <rshift>
 800c8ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c8b2:	3701      	adds	r7, #1
 800c8b4:	42bb      	cmp	r3, r7
 800c8b6:	f6ff aee0 	blt.w	800c67a <__gethex+0x1be>
 800c8ba:	2501      	movs	r5, #1
 800c8bc:	e7c2      	b.n	800c844 <__gethex+0x388>
 800c8be:	f016 061f 	ands.w	r6, r6, #31
 800c8c2:	d0fa      	beq.n	800c8ba <__gethex+0x3fe>
 800c8c4:	4453      	add	r3, sl
 800c8c6:	f1c6 0620 	rsb	r6, r6, #32
 800c8ca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c8ce:	f000 f9cb 	bl	800cc68 <__hi0bits>
 800c8d2:	42b0      	cmp	r0, r6
 800c8d4:	dbe7      	blt.n	800c8a6 <__gethex+0x3ea>
 800c8d6:	e7f0      	b.n	800c8ba <__gethex+0x3fe>
 800c8d8:	0800f128 	.word	0x0800f128

0800c8dc <L_shift>:
 800c8dc:	f1c2 0208 	rsb	r2, r2, #8
 800c8e0:	0092      	lsls	r2, r2, #2
 800c8e2:	b570      	push	{r4, r5, r6, lr}
 800c8e4:	f1c2 0620 	rsb	r6, r2, #32
 800c8e8:	6843      	ldr	r3, [r0, #4]
 800c8ea:	6804      	ldr	r4, [r0, #0]
 800c8ec:	fa03 f506 	lsl.w	r5, r3, r6
 800c8f0:	432c      	orrs	r4, r5
 800c8f2:	40d3      	lsrs	r3, r2
 800c8f4:	6004      	str	r4, [r0, #0]
 800c8f6:	f840 3f04 	str.w	r3, [r0, #4]!
 800c8fa:	4288      	cmp	r0, r1
 800c8fc:	d3f4      	bcc.n	800c8e8 <L_shift+0xc>
 800c8fe:	bd70      	pop	{r4, r5, r6, pc}

0800c900 <__match>:
 800c900:	b530      	push	{r4, r5, lr}
 800c902:	6803      	ldr	r3, [r0, #0]
 800c904:	3301      	adds	r3, #1
 800c906:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c90a:	b914      	cbnz	r4, 800c912 <__match+0x12>
 800c90c:	6003      	str	r3, [r0, #0]
 800c90e:	2001      	movs	r0, #1
 800c910:	bd30      	pop	{r4, r5, pc}
 800c912:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c916:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c91a:	2d19      	cmp	r5, #25
 800c91c:	bf98      	it	ls
 800c91e:	3220      	addls	r2, #32
 800c920:	42a2      	cmp	r2, r4
 800c922:	d0f0      	beq.n	800c906 <__match+0x6>
 800c924:	2000      	movs	r0, #0
 800c926:	e7f3      	b.n	800c910 <__match+0x10>

0800c928 <__hexnan>:
 800c928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c92c:	680b      	ldr	r3, [r1, #0]
 800c92e:	6801      	ldr	r1, [r0, #0]
 800c930:	115e      	asrs	r6, r3, #5
 800c932:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c936:	f013 031f 	ands.w	r3, r3, #31
 800c93a:	b087      	sub	sp, #28
 800c93c:	bf18      	it	ne
 800c93e:	3604      	addne	r6, #4
 800c940:	2500      	movs	r5, #0
 800c942:	1f37      	subs	r7, r6, #4
 800c944:	4682      	mov	sl, r0
 800c946:	4690      	mov	r8, r2
 800c948:	9301      	str	r3, [sp, #4]
 800c94a:	f846 5c04 	str.w	r5, [r6, #-4]
 800c94e:	46b9      	mov	r9, r7
 800c950:	463c      	mov	r4, r7
 800c952:	9502      	str	r5, [sp, #8]
 800c954:	46ab      	mov	fp, r5
 800c956:	784a      	ldrb	r2, [r1, #1]
 800c958:	1c4b      	adds	r3, r1, #1
 800c95a:	9303      	str	r3, [sp, #12]
 800c95c:	b342      	cbz	r2, 800c9b0 <__hexnan+0x88>
 800c95e:	4610      	mov	r0, r2
 800c960:	9105      	str	r1, [sp, #20]
 800c962:	9204      	str	r2, [sp, #16]
 800c964:	f7ff fd94 	bl	800c490 <__hexdig_fun>
 800c968:	2800      	cmp	r0, #0
 800c96a:	d151      	bne.n	800ca10 <__hexnan+0xe8>
 800c96c:	9a04      	ldr	r2, [sp, #16]
 800c96e:	9905      	ldr	r1, [sp, #20]
 800c970:	2a20      	cmp	r2, #32
 800c972:	d818      	bhi.n	800c9a6 <__hexnan+0x7e>
 800c974:	9b02      	ldr	r3, [sp, #8]
 800c976:	459b      	cmp	fp, r3
 800c978:	dd13      	ble.n	800c9a2 <__hexnan+0x7a>
 800c97a:	454c      	cmp	r4, r9
 800c97c:	d206      	bcs.n	800c98c <__hexnan+0x64>
 800c97e:	2d07      	cmp	r5, #7
 800c980:	dc04      	bgt.n	800c98c <__hexnan+0x64>
 800c982:	462a      	mov	r2, r5
 800c984:	4649      	mov	r1, r9
 800c986:	4620      	mov	r0, r4
 800c988:	f7ff ffa8 	bl	800c8dc <L_shift>
 800c98c:	4544      	cmp	r4, r8
 800c98e:	d952      	bls.n	800ca36 <__hexnan+0x10e>
 800c990:	2300      	movs	r3, #0
 800c992:	f1a4 0904 	sub.w	r9, r4, #4
 800c996:	f844 3c04 	str.w	r3, [r4, #-4]
 800c99a:	f8cd b008 	str.w	fp, [sp, #8]
 800c99e:	464c      	mov	r4, r9
 800c9a0:	461d      	mov	r5, r3
 800c9a2:	9903      	ldr	r1, [sp, #12]
 800c9a4:	e7d7      	b.n	800c956 <__hexnan+0x2e>
 800c9a6:	2a29      	cmp	r2, #41	@ 0x29
 800c9a8:	d157      	bne.n	800ca5a <__hexnan+0x132>
 800c9aa:	3102      	adds	r1, #2
 800c9ac:	f8ca 1000 	str.w	r1, [sl]
 800c9b0:	f1bb 0f00 	cmp.w	fp, #0
 800c9b4:	d051      	beq.n	800ca5a <__hexnan+0x132>
 800c9b6:	454c      	cmp	r4, r9
 800c9b8:	d206      	bcs.n	800c9c8 <__hexnan+0xa0>
 800c9ba:	2d07      	cmp	r5, #7
 800c9bc:	dc04      	bgt.n	800c9c8 <__hexnan+0xa0>
 800c9be:	462a      	mov	r2, r5
 800c9c0:	4649      	mov	r1, r9
 800c9c2:	4620      	mov	r0, r4
 800c9c4:	f7ff ff8a 	bl	800c8dc <L_shift>
 800c9c8:	4544      	cmp	r4, r8
 800c9ca:	d936      	bls.n	800ca3a <__hexnan+0x112>
 800c9cc:	f1a8 0204 	sub.w	r2, r8, #4
 800c9d0:	4623      	mov	r3, r4
 800c9d2:	f853 1b04 	ldr.w	r1, [r3], #4
 800c9d6:	f842 1f04 	str.w	r1, [r2, #4]!
 800c9da:	429f      	cmp	r7, r3
 800c9dc:	d2f9      	bcs.n	800c9d2 <__hexnan+0xaa>
 800c9de:	1b3b      	subs	r3, r7, r4
 800c9e0:	f023 0303 	bic.w	r3, r3, #3
 800c9e4:	3304      	adds	r3, #4
 800c9e6:	3401      	adds	r4, #1
 800c9e8:	3e03      	subs	r6, #3
 800c9ea:	42b4      	cmp	r4, r6
 800c9ec:	bf88      	it	hi
 800c9ee:	2304      	movhi	r3, #4
 800c9f0:	4443      	add	r3, r8
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	f843 2b04 	str.w	r2, [r3], #4
 800c9f8:	429f      	cmp	r7, r3
 800c9fa:	d2fb      	bcs.n	800c9f4 <__hexnan+0xcc>
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	b91b      	cbnz	r3, 800ca08 <__hexnan+0xe0>
 800ca00:	4547      	cmp	r7, r8
 800ca02:	d128      	bne.n	800ca56 <__hexnan+0x12e>
 800ca04:	2301      	movs	r3, #1
 800ca06:	603b      	str	r3, [r7, #0]
 800ca08:	2005      	movs	r0, #5
 800ca0a:	b007      	add	sp, #28
 800ca0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca10:	3501      	adds	r5, #1
 800ca12:	2d08      	cmp	r5, #8
 800ca14:	f10b 0b01 	add.w	fp, fp, #1
 800ca18:	dd06      	ble.n	800ca28 <__hexnan+0x100>
 800ca1a:	4544      	cmp	r4, r8
 800ca1c:	d9c1      	bls.n	800c9a2 <__hexnan+0x7a>
 800ca1e:	2300      	movs	r3, #0
 800ca20:	f844 3c04 	str.w	r3, [r4, #-4]
 800ca24:	2501      	movs	r5, #1
 800ca26:	3c04      	subs	r4, #4
 800ca28:	6822      	ldr	r2, [r4, #0]
 800ca2a:	f000 000f 	and.w	r0, r0, #15
 800ca2e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ca32:	6020      	str	r0, [r4, #0]
 800ca34:	e7b5      	b.n	800c9a2 <__hexnan+0x7a>
 800ca36:	2508      	movs	r5, #8
 800ca38:	e7b3      	b.n	800c9a2 <__hexnan+0x7a>
 800ca3a:	9b01      	ldr	r3, [sp, #4]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d0dd      	beq.n	800c9fc <__hexnan+0xd4>
 800ca40:	f1c3 0320 	rsb	r3, r3, #32
 800ca44:	f04f 32ff 	mov.w	r2, #4294967295
 800ca48:	40da      	lsrs	r2, r3
 800ca4a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ca4e:	4013      	ands	r3, r2
 800ca50:	f846 3c04 	str.w	r3, [r6, #-4]
 800ca54:	e7d2      	b.n	800c9fc <__hexnan+0xd4>
 800ca56:	3f04      	subs	r7, #4
 800ca58:	e7d0      	b.n	800c9fc <__hexnan+0xd4>
 800ca5a:	2004      	movs	r0, #4
 800ca5c:	e7d5      	b.n	800ca0a <__hexnan+0xe2>

0800ca5e <__ascii_mbtowc>:
 800ca5e:	b082      	sub	sp, #8
 800ca60:	b901      	cbnz	r1, 800ca64 <__ascii_mbtowc+0x6>
 800ca62:	a901      	add	r1, sp, #4
 800ca64:	b142      	cbz	r2, 800ca78 <__ascii_mbtowc+0x1a>
 800ca66:	b14b      	cbz	r3, 800ca7c <__ascii_mbtowc+0x1e>
 800ca68:	7813      	ldrb	r3, [r2, #0]
 800ca6a:	600b      	str	r3, [r1, #0]
 800ca6c:	7812      	ldrb	r2, [r2, #0]
 800ca6e:	1e10      	subs	r0, r2, #0
 800ca70:	bf18      	it	ne
 800ca72:	2001      	movne	r0, #1
 800ca74:	b002      	add	sp, #8
 800ca76:	4770      	bx	lr
 800ca78:	4610      	mov	r0, r2
 800ca7a:	e7fb      	b.n	800ca74 <__ascii_mbtowc+0x16>
 800ca7c:	f06f 0001 	mvn.w	r0, #1
 800ca80:	e7f8      	b.n	800ca74 <__ascii_mbtowc+0x16>
	...

0800ca84 <_Balloc>:
 800ca84:	b570      	push	{r4, r5, r6, lr}
 800ca86:	69c6      	ldr	r6, [r0, #28]
 800ca88:	4604      	mov	r4, r0
 800ca8a:	460d      	mov	r5, r1
 800ca8c:	b976      	cbnz	r6, 800caac <_Balloc+0x28>
 800ca8e:	2010      	movs	r0, #16
 800ca90:	f7fe fbd8 	bl	800b244 <malloc>
 800ca94:	4602      	mov	r2, r0
 800ca96:	61e0      	str	r0, [r4, #28]
 800ca98:	b920      	cbnz	r0, 800caa4 <_Balloc+0x20>
 800ca9a:	4b18      	ldr	r3, [pc, #96]	@ (800cafc <_Balloc+0x78>)
 800ca9c:	4818      	ldr	r0, [pc, #96]	@ (800cb00 <_Balloc+0x7c>)
 800ca9e:	216b      	movs	r1, #107	@ 0x6b
 800caa0:	f000 fd5c 	bl	800d55c <__assert_func>
 800caa4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800caa8:	6006      	str	r6, [r0, #0]
 800caaa:	60c6      	str	r6, [r0, #12]
 800caac:	69e6      	ldr	r6, [r4, #28]
 800caae:	68f3      	ldr	r3, [r6, #12]
 800cab0:	b183      	cbz	r3, 800cad4 <_Balloc+0x50>
 800cab2:	69e3      	ldr	r3, [r4, #28]
 800cab4:	68db      	ldr	r3, [r3, #12]
 800cab6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800caba:	b9b8      	cbnz	r0, 800caec <_Balloc+0x68>
 800cabc:	2101      	movs	r1, #1
 800cabe:	fa01 f605 	lsl.w	r6, r1, r5
 800cac2:	1d72      	adds	r2, r6, #5
 800cac4:	0092      	lsls	r2, r2, #2
 800cac6:	4620      	mov	r0, r4
 800cac8:	f000 fd66 	bl	800d598 <_calloc_r>
 800cacc:	b160      	cbz	r0, 800cae8 <_Balloc+0x64>
 800cace:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cad2:	e00e      	b.n	800caf2 <_Balloc+0x6e>
 800cad4:	2221      	movs	r2, #33	@ 0x21
 800cad6:	2104      	movs	r1, #4
 800cad8:	4620      	mov	r0, r4
 800cada:	f000 fd5d 	bl	800d598 <_calloc_r>
 800cade:	69e3      	ldr	r3, [r4, #28]
 800cae0:	60f0      	str	r0, [r6, #12]
 800cae2:	68db      	ldr	r3, [r3, #12]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d1e4      	bne.n	800cab2 <_Balloc+0x2e>
 800cae8:	2000      	movs	r0, #0
 800caea:	bd70      	pop	{r4, r5, r6, pc}
 800caec:	6802      	ldr	r2, [r0, #0]
 800caee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800caf2:	2300      	movs	r3, #0
 800caf4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800caf8:	e7f7      	b.n	800caea <_Balloc+0x66>
 800cafa:	bf00      	nop
 800cafc:	0800f199 	.word	0x0800f199
 800cb00:	0800f1b0 	.word	0x0800f1b0

0800cb04 <_Bfree>:
 800cb04:	b570      	push	{r4, r5, r6, lr}
 800cb06:	69c6      	ldr	r6, [r0, #28]
 800cb08:	4605      	mov	r5, r0
 800cb0a:	460c      	mov	r4, r1
 800cb0c:	b976      	cbnz	r6, 800cb2c <_Bfree+0x28>
 800cb0e:	2010      	movs	r0, #16
 800cb10:	f7fe fb98 	bl	800b244 <malloc>
 800cb14:	4602      	mov	r2, r0
 800cb16:	61e8      	str	r0, [r5, #28]
 800cb18:	b920      	cbnz	r0, 800cb24 <_Bfree+0x20>
 800cb1a:	4b09      	ldr	r3, [pc, #36]	@ (800cb40 <_Bfree+0x3c>)
 800cb1c:	4809      	ldr	r0, [pc, #36]	@ (800cb44 <_Bfree+0x40>)
 800cb1e:	218f      	movs	r1, #143	@ 0x8f
 800cb20:	f000 fd1c 	bl	800d55c <__assert_func>
 800cb24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb28:	6006      	str	r6, [r0, #0]
 800cb2a:	60c6      	str	r6, [r0, #12]
 800cb2c:	b13c      	cbz	r4, 800cb3e <_Bfree+0x3a>
 800cb2e:	69eb      	ldr	r3, [r5, #28]
 800cb30:	6862      	ldr	r2, [r4, #4]
 800cb32:	68db      	ldr	r3, [r3, #12]
 800cb34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cb38:	6021      	str	r1, [r4, #0]
 800cb3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cb3e:	bd70      	pop	{r4, r5, r6, pc}
 800cb40:	0800f199 	.word	0x0800f199
 800cb44:	0800f1b0 	.word	0x0800f1b0

0800cb48 <__multadd>:
 800cb48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb4c:	690d      	ldr	r5, [r1, #16]
 800cb4e:	4607      	mov	r7, r0
 800cb50:	460c      	mov	r4, r1
 800cb52:	461e      	mov	r6, r3
 800cb54:	f101 0c14 	add.w	ip, r1, #20
 800cb58:	2000      	movs	r0, #0
 800cb5a:	f8dc 3000 	ldr.w	r3, [ip]
 800cb5e:	b299      	uxth	r1, r3
 800cb60:	fb02 6101 	mla	r1, r2, r1, r6
 800cb64:	0c1e      	lsrs	r6, r3, #16
 800cb66:	0c0b      	lsrs	r3, r1, #16
 800cb68:	fb02 3306 	mla	r3, r2, r6, r3
 800cb6c:	b289      	uxth	r1, r1
 800cb6e:	3001      	adds	r0, #1
 800cb70:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cb74:	4285      	cmp	r5, r0
 800cb76:	f84c 1b04 	str.w	r1, [ip], #4
 800cb7a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cb7e:	dcec      	bgt.n	800cb5a <__multadd+0x12>
 800cb80:	b30e      	cbz	r6, 800cbc6 <__multadd+0x7e>
 800cb82:	68a3      	ldr	r3, [r4, #8]
 800cb84:	42ab      	cmp	r3, r5
 800cb86:	dc19      	bgt.n	800cbbc <__multadd+0x74>
 800cb88:	6861      	ldr	r1, [r4, #4]
 800cb8a:	4638      	mov	r0, r7
 800cb8c:	3101      	adds	r1, #1
 800cb8e:	f7ff ff79 	bl	800ca84 <_Balloc>
 800cb92:	4680      	mov	r8, r0
 800cb94:	b928      	cbnz	r0, 800cba2 <__multadd+0x5a>
 800cb96:	4602      	mov	r2, r0
 800cb98:	4b0c      	ldr	r3, [pc, #48]	@ (800cbcc <__multadd+0x84>)
 800cb9a:	480d      	ldr	r0, [pc, #52]	@ (800cbd0 <__multadd+0x88>)
 800cb9c:	21ba      	movs	r1, #186	@ 0xba
 800cb9e:	f000 fcdd 	bl	800d55c <__assert_func>
 800cba2:	6922      	ldr	r2, [r4, #16]
 800cba4:	3202      	adds	r2, #2
 800cba6:	f104 010c 	add.w	r1, r4, #12
 800cbaa:	0092      	lsls	r2, r2, #2
 800cbac:	300c      	adds	r0, #12
 800cbae:	f7ff fbba 	bl	800c326 <memcpy>
 800cbb2:	4621      	mov	r1, r4
 800cbb4:	4638      	mov	r0, r7
 800cbb6:	f7ff ffa5 	bl	800cb04 <_Bfree>
 800cbba:	4644      	mov	r4, r8
 800cbbc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cbc0:	3501      	adds	r5, #1
 800cbc2:	615e      	str	r6, [r3, #20]
 800cbc4:	6125      	str	r5, [r4, #16]
 800cbc6:	4620      	mov	r0, r4
 800cbc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbcc:	0800f128 	.word	0x0800f128
 800cbd0:	0800f1b0 	.word	0x0800f1b0

0800cbd4 <__s2b>:
 800cbd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbd8:	460c      	mov	r4, r1
 800cbda:	4615      	mov	r5, r2
 800cbdc:	461f      	mov	r7, r3
 800cbde:	2209      	movs	r2, #9
 800cbe0:	3308      	adds	r3, #8
 800cbe2:	4606      	mov	r6, r0
 800cbe4:	fb93 f3f2 	sdiv	r3, r3, r2
 800cbe8:	2100      	movs	r1, #0
 800cbea:	2201      	movs	r2, #1
 800cbec:	429a      	cmp	r2, r3
 800cbee:	db09      	blt.n	800cc04 <__s2b+0x30>
 800cbf0:	4630      	mov	r0, r6
 800cbf2:	f7ff ff47 	bl	800ca84 <_Balloc>
 800cbf6:	b940      	cbnz	r0, 800cc0a <__s2b+0x36>
 800cbf8:	4602      	mov	r2, r0
 800cbfa:	4b19      	ldr	r3, [pc, #100]	@ (800cc60 <__s2b+0x8c>)
 800cbfc:	4819      	ldr	r0, [pc, #100]	@ (800cc64 <__s2b+0x90>)
 800cbfe:	21d3      	movs	r1, #211	@ 0xd3
 800cc00:	f000 fcac 	bl	800d55c <__assert_func>
 800cc04:	0052      	lsls	r2, r2, #1
 800cc06:	3101      	adds	r1, #1
 800cc08:	e7f0      	b.n	800cbec <__s2b+0x18>
 800cc0a:	9b08      	ldr	r3, [sp, #32]
 800cc0c:	6143      	str	r3, [r0, #20]
 800cc0e:	2d09      	cmp	r5, #9
 800cc10:	f04f 0301 	mov.w	r3, #1
 800cc14:	6103      	str	r3, [r0, #16]
 800cc16:	dd16      	ble.n	800cc46 <__s2b+0x72>
 800cc18:	f104 0909 	add.w	r9, r4, #9
 800cc1c:	46c8      	mov	r8, r9
 800cc1e:	442c      	add	r4, r5
 800cc20:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cc24:	4601      	mov	r1, r0
 800cc26:	3b30      	subs	r3, #48	@ 0x30
 800cc28:	220a      	movs	r2, #10
 800cc2a:	4630      	mov	r0, r6
 800cc2c:	f7ff ff8c 	bl	800cb48 <__multadd>
 800cc30:	45a0      	cmp	r8, r4
 800cc32:	d1f5      	bne.n	800cc20 <__s2b+0x4c>
 800cc34:	f1a5 0408 	sub.w	r4, r5, #8
 800cc38:	444c      	add	r4, r9
 800cc3a:	1b2d      	subs	r5, r5, r4
 800cc3c:	1963      	adds	r3, r4, r5
 800cc3e:	42bb      	cmp	r3, r7
 800cc40:	db04      	blt.n	800cc4c <__s2b+0x78>
 800cc42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc46:	340a      	adds	r4, #10
 800cc48:	2509      	movs	r5, #9
 800cc4a:	e7f6      	b.n	800cc3a <__s2b+0x66>
 800cc4c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cc50:	4601      	mov	r1, r0
 800cc52:	3b30      	subs	r3, #48	@ 0x30
 800cc54:	220a      	movs	r2, #10
 800cc56:	4630      	mov	r0, r6
 800cc58:	f7ff ff76 	bl	800cb48 <__multadd>
 800cc5c:	e7ee      	b.n	800cc3c <__s2b+0x68>
 800cc5e:	bf00      	nop
 800cc60:	0800f128 	.word	0x0800f128
 800cc64:	0800f1b0 	.word	0x0800f1b0

0800cc68 <__hi0bits>:
 800cc68:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cc6c:	4603      	mov	r3, r0
 800cc6e:	bf36      	itet	cc
 800cc70:	0403      	lslcc	r3, r0, #16
 800cc72:	2000      	movcs	r0, #0
 800cc74:	2010      	movcc	r0, #16
 800cc76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cc7a:	bf3c      	itt	cc
 800cc7c:	021b      	lslcc	r3, r3, #8
 800cc7e:	3008      	addcc	r0, #8
 800cc80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cc84:	bf3c      	itt	cc
 800cc86:	011b      	lslcc	r3, r3, #4
 800cc88:	3004      	addcc	r0, #4
 800cc8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cc8e:	bf3c      	itt	cc
 800cc90:	009b      	lslcc	r3, r3, #2
 800cc92:	3002      	addcc	r0, #2
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	db05      	blt.n	800cca4 <__hi0bits+0x3c>
 800cc98:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cc9c:	f100 0001 	add.w	r0, r0, #1
 800cca0:	bf08      	it	eq
 800cca2:	2020      	moveq	r0, #32
 800cca4:	4770      	bx	lr

0800cca6 <__lo0bits>:
 800cca6:	6803      	ldr	r3, [r0, #0]
 800cca8:	4602      	mov	r2, r0
 800ccaa:	f013 0007 	ands.w	r0, r3, #7
 800ccae:	d00b      	beq.n	800ccc8 <__lo0bits+0x22>
 800ccb0:	07d9      	lsls	r1, r3, #31
 800ccb2:	d421      	bmi.n	800ccf8 <__lo0bits+0x52>
 800ccb4:	0798      	lsls	r0, r3, #30
 800ccb6:	bf49      	itett	mi
 800ccb8:	085b      	lsrmi	r3, r3, #1
 800ccba:	089b      	lsrpl	r3, r3, #2
 800ccbc:	2001      	movmi	r0, #1
 800ccbe:	6013      	strmi	r3, [r2, #0]
 800ccc0:	bf5c      	itt	pl
 800ccc2:	6013      	strpl	r3, [r2, #0]
 800ccc4:	2002      	movpl	r0, #2
 800ccc6:	4770      	bx	lr
 800ccc8:	b299      	uxth	r1, r3
 800ccca:	b909      	cbnz	r1, 800ccd0 <__lo0bits+0x2a>
 800cccc:	0c1b      	lsrs	r3, r3, #16
 800ccce:	2010      	movs	r0, #16
 800ccd0:	b2d9      	uxtb	r1, r3
 800ccd2:	b909      	cbnz	r1, 800ccd8 <__lo0bits+0x32>
 800ccd4:	3008      	adds	r0, #8
 800ccd6:	0a1b      	lsrs	r3, r3, #8
 800ccd8:	0719      	lsls	r1, r3, #28
 800ccda:	bf04      	itt	eq
 800ccdc:	091b      	lsreq	r3, r3, #4
 800ccde:	3004      	addeq	r0, #4
 800cce0:	0799      	lsls	r1, r3, #30
 800cce2:	bf04      	itt	eq
 800cce4:	089b      	lsreq	r3, r3, #2
 800cce6:	3002      	addeq	r0, #2
 800cce8:	07d9      	lsls	r1, r3, #31
 800ccea:	d403      	bmi.n	800ccf4 <__lo0bits+0x4e>
 800ccec:	085b      	lsrs	r3, r3, #1
 800ccee:	f100 0001 	add.w	r0, r0, #1
 800ccf2:	d003      	beq.n	800ccfc <__lo0bits+0x56>
 800ccf4:	6013      	str	r3, [r2, #0]
 800ccf6:	4770      	bx	lr
 800ccf8:	2000      	movs	r0, #0
 800ccfa:	4770      	bx	lr
 800ccfc:	2020      	movs	r0, #32
 800ccfe:	4770      	bx	lr

0800cd00 <__i2b>:
 800cd00:	b510      	push	{r4, lr}
 800cd02:	460c      	mov	r4, r1
 800cd04:	2101      	movs	r1, #1
 800cd06:	f7ff febd 	bl	800ca84 <_Balloc>
 800cd0a:	4602      	mov	r2, r0
 800cd0c:	b928      	cbnz	r0, 800cd1a <__i2b+0x1a>
 800cd0e:	4b05      	ldr	r3, [pc, #20]	@ (800cd24 <__i2b+0x24>)
 800cd10:	4805      	ldr	r0, [pc, #20]	@ (800cd28 <__i2b+0x28>)
 800cd12:	f240 1145 	movw	r1, #325	@ 0x145
 800cd16:	f000 fc21 	bl	800d55c <__assert_func>
 800cd1a:	2301      	movs	r3, #1
 800cd1c:	6144      	str	r4, [r0, #20]
 800cd1e:	6103      	str	r3, [r0, #16]
 800cd20:	bd10      	pop	{r4, pc}
 800cd22:	bf00      	nop
 800cd24:	0800f128 	.word	0x0800f128
 800cd28:	0800f1b0 	.word	0x0800f1b0

0800cd2c <__multiply>:
 800cd2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd30:	4614      	mov	r4, r2
 800cd32:	690a      	ldr	r2, [r1, #16]
 800cd34:	6923      	ldr	r3, [r4, #16]
 800cd36:	429a      	cmp	r2, r3
 800cd38:	bfa8      	it	ge
 800cd3a:	4623      	movge	r3, r4
 800cd3c:	460f      	mov	r7, r1
 800cd3e:	bfa4      	itt	ge
 800cd40:	460c      	movge	r4, r1
 800cd42:	461f      	movge	r7, r3
 800cd44:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800cd48:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800cd4c:	68a3      	ldr	r3, [r4, #8]
 800cd4e:	6861      	ldr	r1, [r4, #4]
 800cd50:	eb0a 0609 	add.w	r6, sl, r9
 800cd54:	42b3      	cmp	r3, r6
 800cd56:	b085      	sub	sp, #20
 800cd58:	bfb8      	it	lt
 800cd5a:	3101      	addlt	r1, #1
 800cd5c:	f7ff fe92 	bl	800ca84 <_Balloc>
 800cd60:	b930      	cbnz	r0, 800cd70 <__multiply+0x44>
 800cd62:	4602      	mov	r2, r0
 800cd64:	4b44      	ldr	r3, [pc, #272]	@ (800ce78 <__multiply+0x14c>)
 800cd66:	4845      	ldr	r0, [pc, #276]	@ (800ce7c <__multiply+0x150>)
 800cd68:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cd6c:	f000 fbf6 	bl	800d55c <__assert_func>
 800cd70:	f100 0514 	add.w	r5, r0, #20
 800cd74:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cd78:	462b      	mov	r3, r5
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	4543      	cmp	r3, r8
 800cd7e:	d321      	bcc.n	800cdc4 <__multiply+0x98>
 800cd80:	f107 0114 	add.w	r1, r7, #20
 800cd84:	f104 0214 	add.w	r2, r4, #20
 800cd88:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800cd8c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800cd90:	9302      	str	r3, [sp, #8]
 800cd92:	1b13      	subs	r3, r2, r4
 800cd94:	3b15      	subs	r3, #21
 800cd96:	f023 0303 	bic.w	r3, r3, #3
 800cd9a:	3304      	adds	r3, #4
 800cd9c:	f104 0715 	add.w	r7, r4, #21
 800cda0:	42ba      	cmp	r2, r7
 800cda2:	bf38      	it	cc
 800cda4:	2304      	movcc	r3, #4
 800cda6:	9301      	str	r3, [sp, #4]
 800cda8:	9b02      	ldr	r3, [sp, #8]
 800cdaa:	9103      	str	r1, [sp, #12]
 800cdac:	428b      	cmp	r3, r1
 800cdae:	d80c      	bhi.n	800cdca <__multiply+0x9e>
 800cdb0:	2e00      	cmp	r6, #0
 800cdb2:	dd03      	ble.n	800cdbc <__multiply+0x90>
 800cdb4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d05b      	beq.n	800ce74 <__multiply+0x148>
 800cdbc:	6106      	str	r6, [r0, #16]
 800cdbe:	b005      	add	sp, #20
 800cdc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdc4:	f843 2b04 	str.w	r2, [r3], #4
 800cdc8:	e7d8      	b.n	800cd7c <__multiply+0x50>
 800cdca:	f8b1 a000 	ldrh.w	sl, [r1]
 800cdce:	f1ba 0f00 	cmp.w	sl, #0
 800cdd2:	d024      	beq.n	800ce1e <__multiply+0xf2>
 800cdd4:	f104 0e14 	add.w	lr, r4, #20
 800cdd8:	46a9      	mov	r9, r5
 800cdda:	f04f 0c00 	mov.w	ip, #0
 800cdde:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cde2:	f8d9 3000 	ldr.w	r3, [r9]
 800cde6:	fa1f fb87 	uxth.w	fp, r7
 800cdea:	b29b      	uxth	r3, r3
 800cdec:	fb0a 330b 	mla	r3, sl, fp, r3
 800cdf0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800cdf4:	f8d9 7000 	ldr.w	r7, [r9]
 800cdf8:	4463      	add	r3, ip
 800cdfa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cdfe:	fb0a c70b 	mla	r7, sl, fp, ip
 800ce02:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ce06:	b29b      	uxth	r3, r3
 800ce08:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ce0c:	4572      	cmp	r2, lr
 800ce0e:	f849 3b04 	str.w	r3, [r9], #4
 800ce12:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ce16:	d8e2      	bhi.n	800cdde <__multiply+0xb2>
 800ce18:	9b01      	ldr	r3, [sp, #4]
 800ce1a:	f845 c003 	str.w	ip, [r5, r3]
 800ce1e:	9b03      	ldr	r3, [sp, #12]
 800ce20:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ce24:	3104      	adds	r1, #4
 800ce26:	f1b9 0f00 	cmp.w	r9, #0
 800ce2a:	d021      	beq.n	800ce70 <__multiply+0x144>
 800ce2c:	682b      	ldr	r3, [r5, #0]
 800ce2e:	f104 0c14 	add.w	ip, r4, #20
 800ce32:	46ae      	mov	lr, r5
 800ce34:	f04f 0a00 	mov.w	sl, #0
 800ce38:	f8bc b000 	ldrh.w	fp, [ip]
 800ce3c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ce40:	fb09 770b 	mla	r7, r9, fp, r7
 800ce44:	4457      	add	r7, sl
 800ce46:	b29b      	uxth	r3, r3
 800ce48:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ce4c:	f84e 3b04 	str.w	r3, [lr], #4
 800ce50:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ce54:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ce58:	f8be 3000 	ldrh.w	r3, [lr]
 800ce5c:	fb09 330a 	mla	r3, r9, sl, r3
 800ce60:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ce64:	4562      	cmp	r2, ip
 800ce66:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ce6a:	d8e5      	bhi.n	800ce38 <__multiply+0x10c>
 800ce6c:	9f01      	ldr	r7, [sp, #4]
 800ce6e:	51eb      	str	r3, [r5, r7]
 800ce70:	3504      	adds	r5, #4
 800ce72:	e799      	b.n	800cda8 <__multiply+0x7c>
 800ce74:	3e01      	subs	r6, #1
 800ce76:	e79b      	b.n	800cdb0 <__multiply+0x84>
 800ce78:	0800f128 	.word	0x0800f128
 800ce7c:	0800f1b0 	.word	0x0800f1b0

0800ce80 <__pow5mult>:
 800ce80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce84:	4615      	mov	r5, r2
 800ce86:	f012 0203 	ands.w	r2, r2, #3
 800ce8a:	4607      	mov	r7, r0
 800ce8c:	460e      	mov	r6, r1
 800ce8e:	d007      	beq.n	800cea0 <__pow5mult+0x20>
 800ce90:	4c25      	ldr	r4, [pc, #148]	@ (800cf28 <__pow5mult+0xa8>)
 800ce92:	3a01      	subs	r2, #1
 800ce94:	2300      	movs	r3, #0
 800ce96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ce9a:	f7ff fe55 	bl	800cb48 <__multadd>
 800ce9e:	4606      	mov	r6, r0
 800cea0:	10ad      	asrs	r5, r5, #2
 800cea2:	d03d      	beq.n	800cf20 <__pow5mult+0xa0>
 800cea4:	69fc      	ldr	r4, [r7, #28]
 800cea6:	b97c      	cbnz	r4, 800cec8 <__pow5mult+0x48>
 800cea8:	2010      	movs	r0, #16
 800ceaa:	f7fe f9cb 	bl	800b244 <malloc>
 800ceae:	4602      	mov	r2, r0
 800ceb0:	61f8      	str	r0, [r7, #28]
 800ceb2:	b928      	cbnz	r0, 800cec0 <__pow5mult+0x40>
 800ceb4:	4b1d      	ldr	r3, [pc, #116]	@ (800cf2c <__pow5mult+0xac>)
 800ceb6:	481e      	ldr	r0, [pc, #120]	@ (800cf30 <__pow5mult+0xb0>)
 800ceb8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cebc:	f000 fb4e 	bl	800d55c <__assert_func>
 800cec0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cec4:	6004      	str	r4, [r0, #0]
 800cec6:	60c4      	str	r4, [r0, #12]
 800cec8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cecc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ced0:	b94c      	cbnz	r4, 800cee6 <__pow5mult+0x66>
 800ced2:	f240 2171 	movw	r1, #625	@ 0x271
 800ced6:	4638      	mov	r0, r7
 800ced8:	f7ff ff12 	bl	800cd00 <__i2b>
 800cedc:	2300      	movs	r3, #0
 800cede:	f8c8 0008 	str.w	r0, [r8, #8]
 800cee2:	4604      	mov	r4, r0
 800cee4:	6003      	str	r3, [r0, #0]
 800cee6:	f04f 0900 	mov.w	r9, #0
 800ceea:	07eb      	lsls	r3, r5, #31
 800ceec:	d50a      	bpl.n	800cf04 <__pow5mult+0x84>
 800ceee:	4631      	mov	r1, r6
 800cef0:	4622      	mov	r2, r4
 800cef2:	4638      	mov	r0, r7
 800cef4:	f7ff ff1a 	bl	800cd2c <__multiply>
 800cef8:	4631      	mov	r1, r6
 800cefa:	4680      	mov	r8, r0
 800cefc:	4638      	mov	r0, r7
 800cefe:	f7ff fe01 	bl	800cb04 <_Bfree>
 800cf02:	4646      	mov	r6, r8
 800cf04:	106d      	asrs	r5, r5, #1
 800cf06:	d00b      	beq.n	800cf20 <__pow5mult+0xa0>
 800cf08:	6820      	ldr	r0, [r4, #0]
 800cf0a:	b938      	cbnz	r0, 800cf1c <__pow5mult+0x9c>
 800cf0c:	4622      	mov	r2, r4
 800cf0e:	4621      	mov	r1, r4
 800cf10:	4638      	mov	r0, r7
 800cf12:	f7ff ff0b 	bl	800cd2c <__multiply>
 800cf16:	6020      	str	r0, [r4, #0]
 800cf18:	f8c0 9000 	str.w	r9, [r0]
 800cf1c:	4604      	mov	r4, r0
 800cf1e:	e7e4      	b.n	800ceea <__pow5mult+0x6a>
 800cf20:	4630      	mov	r0, r6
 800cf22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf26:	bf00      	nop
 800cf28:	0800f20c 	.word	0x0800f20c
 800cf2c:	0800f199 	.word	0x0800f199
 800cf30:	0800f1b0 	.word	0x0800f1b0

0800cf34 <__lshift>:
 800cf34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf38:	460c      	mov	r4, r1
 800cf3a:	6849      	ldr	r1, [r1, #4]
 800cf3c:	6923      	ldr	r3, [r4, #16]
 800cf3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cf42:	68a3      	ldr	r3, [r4, #8]
 800cf44:	4607      	mov	r7, r0
 800cf46:	4691      	mov	r9, r2
 800cf48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cf4c:	f108 0601 	add.w	r6, r8, #1
 800cf50:	42b3      	cmp	r3, r6
 800cf52:	db0b      	blt.n	800cf6c <__lshift+0x38>
 800cf54:	4638      	mov	r0, r7
 800cf56:	f7ff fd95 	bl	800ca84 <_Balloc>
 800cf5a:	4605      	mov	r5, r0
 800cf5c:	b948      	cbnz	r0, 800cf72 <__lshift+0x3e>
 800cf5e:	4602      	mov	r2, r0
 800cf60:	4b28      	ldr	r3, [pc, #160]	@ (800d004 <__lshift+0xd0>)
 800cf62:	4829      	ldr	r0, [pc, #164]	@ (800d008 <__lshift+0xd4>)
 800cf64:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cf68:	f000 faf8 	bl	800d55c <__assert_func>
 800cf6c:	3101      	adds	r1, #1
 800cf6e:	005b      	lsls	r3, r3, #1
 800cf70:	e7ee      	b.n	800cf50 <__lshift+0x1c>
 800cf72:	2300      	movs	r3, #0
 800cf74:	f100 0114 	add.w	r1, r0, #20
 800cf78:	f100 0210 	add.w	r2, r0, #16
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	4553      	cmp	r3, sl
 800cf80:	db33      	blt.n	800cfea <__lshift+0xb6>
 800cf82:	6920      	ldr	r0, [r4, #16]
 800cf84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cf88:	f104 0314 	add.w	r3, r4, #20
 800cf8c:	f019 091f 	ands.w	r9, r9, #31
 800cf90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cf94:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cf98:	d02b      	beq.n	800cff2 <__lshift+0xbe>
 800cf9a:	f1c9 0e20 	rsb	lr, r9, #32
 800cf9e:	468a      	mov	sl, r1
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	6818      	ldr	r0, [r3, #0]
 800cfa4:	fa00 f009 	lsl.w	r0, r0, r9
 800cfa8:	4310      	orrs	r0, r2
 800cfaa:	f84a 0b04 	str.w	r0, [sl], #4
 800cfae:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfb2:	459c      	cmp	ip, r3
 800cfb4:	fa22 f20e 	lsr.w	r2, r2, lr
 800cfb8:	d8f3      	bhi.n	800cfa2 <__lshift+0x6e>
 800cfba:	ebac 0304 	sub.w	r3, ip, r4
 800cfbe:	3b15      	subs	r3, #21
 800cfc0:	f023 0303 	bic.w	r3, r3, #3
 800cfc4:	3304      	adds	r3, #4
 800cfc6:	f104 0015 	add.w	r0, r4, #21
 800cfca:	4584      	cmp	ip, r0
 800cfcc:	bf38      	it	cc
 800cfce:	2304      	movcc	r3, #4
 800cfd0:	50ca      	str	r2, [r1, r3]
 800cfd2:	b10a      	cbz	r2, 800cfd8 <__lshift+0xa4>
 800cfd4:	f108 0602 	add.w	r6, r8, #2
 800cfd8:	3e01      	subs	r6, #1
 800cfda:	4638      	mov	r0, r7
 800cfdc:	612e      	str	r6, [r5, #16]
 800cfde:	4621      	mov	r1, r4
 800cfe0:	f7ff fd90 	bl	800cb04 <_Bfree>
 800cfe4:	4628      	mov	r0, r5
 800cfe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfea:	f842 0f04 	str.w	r0, [r2, #4]!
 800cfee:	3301      	adds	r3, #1
 800cff0:	e7c5      	b.n	800cf7e <__lshift+0x4a>
 800cff2:	3904      	subs	r1, #4
 800cff4:	f853 2b04 	ldr.w	r2, [r3], #4
 800cff8:	f841 2f04 	str.w	r2, [r1, #4]!
 800cffc:	459c      	cmp	ip, r3
 800cffe:	d8f9      	bhi.n	800cff4 <__lshift+0xc0>
 800d000:	e7ea      	b.n	800cfd8 <__lshift+0xa4>
 800d002:	bf00      	nop
 800d004:	0800f128 	.word	0x0800f128
 800d008:	0800f1b0 	.word	0x0800f1b0

0800d00c <__mcmp>:
 800d00c:	690a      	ldr	r2, [r1, #16]
 800d00e:	4603      	mov	r3, r0
 800d010:	6900      	ldr	r0, [r0, #16]
 800d012:	1a80      	subs	r0, r0, r2
 800d014:	b530      	push	{r4, r5, lr}
 800d016:	d10e      	bne.n	800d036 <__mcmp+0x2a>
 800d018:	3314      	adds	r3, #20
 800d01a:	3114      	adds	r1, #20
 800d01c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d020:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d024:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d028:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d02c:	4295      	cmp	r5, r2
 800d02e:	d003      	beq.n	800d038 <__mcmp+0x2c>
 800d030:	d205      	bcs.n	800d03e <__mcmp+0x32>
 800d032:	f04f 30ff 	mov.w	r0, #4294967295
 800d036:	bd30      	pop	{r4, r5, pc}
 800d038:	42a3      	cmp	r3, r4
 800d03a:	d3f3      	bcc.n	800d024 <__mcmp+0x18>
 800d03c:	e7fb      	b.n	800d036 <__mcmp+0x2a>
 800d03e:	2001      	movs	r0, #1
 800d040:	e7f9      	b.n	800d036 <__mcmp+0x2a>
	...

0800d044 <__mdiff>:
 800d044:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d048:	4689      	mov	r9, r1
 800d04a:	4606      	mov	r6, r0
 800d04c:	4611      	mov	r1, r2
 800d04e:	4648      	mov	r0, r9
 800d050:	4614      	mov	r4, r2
 800d052:	f7ff ffdb 	bl	800d00c <__mcmp>
 800d056:	1e05      	subs	r5, r0, #0
 800d058:	d112      	bne.n	800d080 <__mdiff+0x3c>
 800d05a:	4629      	mov	r1, r5
 800d05c:	4630      	mov	r0, r6
 800d05e:	f7ff fd11 	bl	800ca84 <_Balloc>
 800d062:	4602      	mov	r2, r0
 800d064:	b928      	cbnz	r0, 800d072 <__mdiff+0x2e>
 800d066:	4b3f      	ldr	r3, [pc, #252]	@ (800d164 <__mdiff+0x120>)
 800d068:	f240 2137 	movw	r1, #567	@ 0x237
 800d06c:	483e      	ldr	r0, [pc, #248]	@ (800d168 <__mdiff+0x124>)
 800d06e:	f000 fa75 	bl	800d55c <__assert_func>
 800d072:	2301      	movs	r3, #1
 800d074:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d078:	4610      	mov	r0, r2
 800d07a:	b003      	add	sp, #12
 800d07c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d080:	bfbc      	itt	lt
 800d082:	464b      	movlt	r3, r9
 800d084:	46a1      	movlt	r9, r4
 800d086:	4630      	mov	r0, r6
 800d088:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d08c:	bfba      	itte	lt
 800d08e:	461c      	movlt	r4, r3
 800d090:	2501      	movlt	r5, #1
 800d092:	2500      	movge	r5, #0
 800d094:	f7ff fcf6 	bl	800ca84 <_Balloc>
 800d098:	4602      	mov	r2, r0
 800d09a:	b918      	cbnz	r0, 800d0a4 <__mdiff+0x60>
 800d09c:	4b31      	ldr	r3, [pc, #196]	@ (800d164 <__mdiff+0x120>)
 800d09e:	f240 2145 	movw	r1, #581	@ 0x245
 800d0a2:	e7e3      	b.n	800d06c <__mdiff+0x28>
 800d0a4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d0a8:	6926      	ldr	r6, [r4, #16]
 800d0aa:	60c5      	str	r5, [r0, #12]
 800d0ac:	f109 0310 	add.w	r3, r9, #16
 800d0b0:	f109 0514 	add.w	r5, r9, #20
 800d0b4:	f104 0e14 	add.w	lr, r4, #20
 800d0b8:	f100 0b14 	add.w	fp, r0, #20
 800d0bc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d0c0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d0c4:	9301      	str	r3, [sp, #4]
 800d0c6:	46d9      	mov	r9, fp
 800d0c8:	f04f 0c00 	mov.w	ip, #0
 800d0cc:	9b01      	ldr	r3, [sp, #4]
 800d0ce:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d0d2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d0d6:	9301      	str	r3, [sp, #4]
 800d0d8:	fa1f f38a 	uxth.w	r3, sl
 800d0dc:	4619      	mov	r1, r3
 800d0de:	b283      	uxth	r3, r0
 800d0e0:	1acb      	subs	r3, r1, r3
 800d0e2:	0c00      	lsrs	r0, r0, #16
 800d0e4:	4463      	add	r3, ip
 800d0e6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d0ea:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d0ee:	b29b      	uxth	r3, r3
 800d0f0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d0f4:	4576      	cmp	r6, lr
 800d0f6:	f849 3b04 	str.w	r3, [r9], #4
 800d0fa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d0fe:	d8e5      	bhi.n	800d0cc <__mdiff+0x88>
 800d100:	1b33      	subs	r3, r6, r4
 800d102:	3b15      	subs	r3, #21
 800d104:	f023 0303 	bic.w	r3, r3, #3
 800d108:	3415      	adds	r4, #21
 800d10a:	3304      	adds	r3, #4
 800d10c:	42a6      	cmp	r6, r4
 800d10e:	bf38      	it	cc
 800d110:	2304      	movcc	r3, #4
 800d112:	441d      	add	r5, r3
 800d114:	445b      	add	r3, fp
 800d116:	461e      	mov	r6, r3
 800d118:	462c      	mov	r4, r5
 800d11a:	4544      	cmp	r4, r8
 800d11c:	d30e      	bcc.n	800d13c <__mdiff+0xf8>
 800d11e:	f108 0103 	add.w	r1, r8, #3
 800d122:	1b49      	subs	r1, r1, r5
 800d124:	f021 0103 	bic.w	r1, r1, #3
 800d128:	3d03      	subs	r5, #3
 800d12a:	45a8      	cmp	r8, r5
 800d12c:	bf38      	it	cc
 800d12e:	2100      	movcc	r1, #0
 800d130:	440b      	add	r3, r1
 800d132:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d136:	b191      	cbz	r1, 800d15e <__mdiff+0x11a>
 800d138:	6117      	str	r7, [r2, #16]
 800d13a:	e79d      	b.n	800d078 <__mdiff+0x34>
 800d13c:	f854 1b04 	ldr.w	r1, [r4], #4
 800d140:	46e6      	mov	lr, ip
 800d142:	0c08      	lsrs	r0, r1, #16
 800d144:	fa1c fc81 	uxtah	ip, ip, r1
 800d148:	4471      	add	r1, lr
 800d14a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d14e:	b289      	uxth	r1, r1
 800d150:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d154:	f846 1b04 	str.w	r1, [r6], #4
 800d158:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d15c:	e7dd      	b.n	800d11a <__mdiff+0xd6>
 800d15e:	3f01      	subs	r7, #1
 800d160:	e7e7      	b.n	800d132 <__mdiff+0xee>
 800d162:	bf00      	nop
 800d164:	0800f128 	.word	0x0800f128
 800d168:	0800f1b0 	.word	0x0800f1b0

0800d16c <__ulp>:
 800d16c:	b082      	sub	sp, #8
 800d16e:	ed8d 0b00 	vstr	d0, [sp]
 800d172:	9a01      	ldr	r2, [sp, #4]
 800d174:	4b0f      	ldr	r3, [pc, #60]	@ (800d1b4 <__ulp+0x48>)
 800d176:	4013      	ands	r3, r2
 800d178:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	dc08      	bgt.n	800d192 <__ulp+0x26>
 800d180:	425b      	negs	r3, r3
 800d182:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d186:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d18a:	da04      	bge.n	800d196 <__ulp+0x2a>
 800d18c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d190:	4113      	asrs	r3, r2
 800d192:	2200      	movs	r2, #0
 800d194:	e008      	b.n	800d1a8 <__ulp+0x3c>
 800d196:	f1a2 0314 	sub.w	r3, r2, #20
 800d19a:	2b1e      	cmp	r3, #30
 800d19c:	bfda      	itte	le
 800d19e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d1a2:	40da      	lsrle	r2, r3
 800d1a4:	2201      	movgt	r2, #1
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	4619      	mov	r1, r3
 800d1aa:	4610      	mov	r0, r2
 800d1ac:	ec41 0b10 	vmov	d0, r0, r1
 800d1b0:	b002      	add	sp, #8
 800d1b2:	4770      	bx	lr
 800d1b4:	7ff00000 	.word	0x7ff00000

0800d1b8 <__b2d>:
 800d1b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1bc:	6906      	ldr	r6, [r0, #16]
 800d1be:	f100 0814 	add.w	r8, r0, #20
 800d1c2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d1c6:	1f37      	subs	r7, r6, #4
 800d1c8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d1cc:	4610      	mov	r0, r2
 800d1ce:	f7ff fd4b 	bl	800cc68 <__hi0bits>
 800d1d2:	f1c0 0320 	rsb	r3, r0, #32
 800d1d6:	280a      	cmp	r0, #10
 800d1d8:	600b      	str	r3, [r1, #0]
 800d1da:	491b      	ldr	r1, [pc, #108]	@ (800d248 <__b2d+0x90>)
 800d1dc:	dc15      	bgt.n	800d20a <__b2d+0x52>
 800d1de:	f1c0 0c0b 	rsb	ip, r0, #11
 800d1e2:	fa22 f30c 	lsr.w	r3, r2, ip
 800d1e6:	45b8      	cmp	r8, r7
 800d1e8:	ea43 0501 	orr.w	r5, r3, r1
 800d1ec:	bf34      	ite	cc
 800d1ee:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d1f2:	2300      	movcs	r3, #0
 800d1f4:	3015      	adds	r0, #21
 800d1f6:	fa02 f000 	lsl.w	r0, r2, r0
 800d1fa:	fa23 f30c 	lsr.w	r3, r3, ip
 800d1fe:	4303      	orrs	r3, r0
 800d200:	461c      	mov	r4, r3
 800d202:	ec45 4b10 	vmov	d0, r4, r5
 800d206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d20a:	45b8      	cmp	r8, r7
 800d20c:	bf3a      	itte	cc
 800d20e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d212:	f1a6 0708 	subcc.w	r7, r6, #8
 800d216:	2300      	movcs	r3, #0
 800d218:	380b      	subs	r0, #11
 800d21a:	d012      	beq.n	800d242 <__b2d+0x8a>
 800d21c:	f1c0 0120 	rsb	r1, r0, #32
 800d220:	fa23 f401 	lsr.w	r4, r3, r1
 800d224:	4082      	lsls	r2, r0
 800d226:	4322      	orrs	r2, r4
 800d228:	4547      	cmp	r7, r8
 800d22a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d22e:	bf8c      	ite	hi
 800d230:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d234:	2200      	movls	r2, #0
 800d236:	4083      	lsls	r3, r0
 800d238:	40ca      	lsrs	r2, r1
 800d23a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d23e:	4313      	orrs	r3, r2
 800d240:	e7de      	b.n	800d200 <__b2d+0x48>
 800d242:	ea42 0501 	orr.w	r5, r2, r1
 800d246:	e7db      	b.n	800d200 <__b2d+0x48>
 800d248:	3ff00000 	.word	0x3ff00000

0800d24c <__d2b>:
 800d24c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d250:	460f      	mov	r7, r1
 800d252:	2101      	movs	r1, #1
 800d254:	ec59 8b10 	vmov	r8, r9, d0
 800d258:	4616      	mov	r6, r2
 800d25a:	f7ff fc13 	bl	800ca84 <_Balloc>
 800d25e:	4604      	mov	r4, r0
 800d260:	b930      	cbnz	r0, 800d270 <__d2b+0x24>
 800d262:	4602      	mov	r2, r0
 800d264:	4b23      	ldr	r3, [pc, #140]	@ (800d2f4 <__d2b+0xa8>)
 800d266:	4824      	ldr	r0, [pc, #144]	@ (800d2f8 <__d2b+0xac>)
 800d268:	f240 310f 	movw	r1, #783	@ 0x30f
 800d26c:	f000 f976 	bl	800d55c <__assert_func>
 800d270:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d274:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d278:	b10d      	cbz	r5, 800d27e <__d2b+0x32>
 800d27a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d27e:	9301      	str	r3, [sp, #4]
 800d280:	f1b8 0300 	subs.w	r3, r8, #0
 800d284:	d023      	beq.n	800d2ce <__d2b+0x82>
 800d286:	4668      	mov	r0, sp
 800d288:	9300      	str	r3, [sp, #0]
 800d28a:	f7ff fd0c 	bl	800cca6 <__lo0bits>
 800d28e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d292:	b1d0      	cbz	r0, 800d2ca <__d2b+0x7e>
 800d294:	f1c0 0320 	rsb	r3, r0, #32
 800d298:	fa02 f303 	lsl.w	r3, r2, r3
 800d29c:	430b      	orrs	r3, r1
 800d29e:	40c2      	lsrs	r2, r0
 800d2a0:	6163      	str	r3, [r4, #20]
 800d2a2:	9201      	str	r2, [sp, #4]
 800d2a4:	9b01      	ldr	r3, [sp, #4]
 800d2a6:	61a3      	str	r3, [r4, #24]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	bf0c      	ite	eq
 800d2ac:	2201      	moveq	r2, #1
 800d2ae:	2202      	movne	r2, #2
 800d2b0:	6122      	str	r2, [r4, #16]
 800d2b2:	b1a5      	cbz	r5, 800d2de <__d2b+0x92>
 800d2b4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d2b8:	4405      	add	r5, r0
 800d2ba:	603d      	str	r5, [r7, #0]
 800d2bc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d2c0:	6030      	str	r0, [r6, #0]
 800d2c2:	4620      	mov	r0, r4
 800d2c4:	b003      	add	sp, #12
 800d2c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d2ca:	6161      	str	r1, [r4, #20]
 800d2cc:	e7ea      	b.n	800d2a4 <__d2b+0x58>
 800d2ce:	a801      	add	r0, sp, #4
 800d2d0:	f7ff fce9 	bl	800cca6 <__lo0bits>
 800d2d4:	9b01      	ldr	r3, [sp, #4]
 800d2d6:	6163      	str	r3, [r4, #20]
 800d2d8:	3020      	adds	r0, #32
 800d2da:	2201      	movs	r2, #1
 800d2dc:	e7e8      	b.n	800d2b0 <__d2b+0x64>
 800d2de:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d2e2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d2e6:	6038      	str	r0, [r7, #0]
 800d2e8:	6918      	ldr	r0, [r3, #16]
 800d2ea:	f7ff fcbd 	bl	800cc68 <__hi0bits>
 800d2ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d2f2:	e7e5      	b.n	800d2c0 <__d2b+0x74>
 800d2f4:	0800f128 	.word	0x0800f128
 800d2f8:	0800f1b0 	.word	0x0800f1b0

0800d2fc <__ratio>:
 800d2fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d300:	b085      	sub	sp, #20
 800d302:	e9cd 1000 	strd	r1, r0, [sp]
 800d306:	a902      	add	r1, sp, #8
 800d308:	f7ff ff56 	bl	800d1b8 <__b2d>
 800d30c:	9800      	ldr	r0, [sp, #0]
 800d30e:	a903      	add	r1, sp, #12
 800d310:	ec55 4b10 	vmov	r4, r5, d0
 800d314:	f7ff ff50 	bl	800d1b8 <__b2d>
 800d318:	9b01      	ldr	r3, [sp, #4]
 800d31a:	6919      	ldr	r1, [r3, #16]
 800d31c:	9b00      	ldr	r3, [sp, #0]
 800d31e:	691b      	ldr	r3, [r3, #16]
 800d320:	1ac9      	subs	r1, r1, r3
 800d322:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d326:	1a9b      	subs	r3, r3, r2
 800d328:	ec5b ab10 	vmov	sl, fp, d0
 800d32c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d330:	2b00      	cmp	r3, #0
 800d332:	bfce      	itee	gt
 800d334:	462a      	movgt	r2, r5
 800d336:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d33a:	465a      	movle	r2, fp
 800d33c:	462f      	mov	r7, r5
 800d33e:	46d9      	mov	r9, fp
 800d340:	bfcc      	ite	gt
 800d342:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d346:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d34a:	464b      	mov	r3, r9
 800d34c:	4652      	mov	r2, sl
 800d34e:	4620      	mov	r0, r4
 800d350:	4639      	mov	r1, r7
 800d352:	f7f3 fa93 	bl	800087c <__aeabi_ddiv>
 800d356:	ec41 0b10 	vmov	d0, r0, r1
 800d35a:	b005      	add	sp, #20
 800d35c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d360 <__copybits>:
 800d360:	3901      	subs	r1, #1
 800d362:	b570      	push	{r4, r5, r6, lr}
 800d364:	1149      	asrs	r1, r1, #5
 800d366:	6914      	ldr	r4, [r2, #16]
 800d368:	3101      	adds	r1, #1
 800d36a:	f102 0314 	add.w	r3, r2, #20
 800d36e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d372:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d376:	1f05      	subs	r5, r0, #4
 800d378:	42a3      	cmp	r3, r4
 800d37a:	d30c      	bcc.n	800d396 <__copybits+0x36>
 800d37c:	1aa3      	subs	r3, r4, r2
 800d37e:	3b11      	subs	r3, #17
 800d380:	f023 0303 	bic.w	r3, r3, #3
 800d384:	3211      	adds	r2, #17
 800d386:	42a2      	cmp	r2, r4
 800d388:	bf88      	it	hi
 800d38a:	2300      	movhi	r3, #0
 800d38c:	4418      	add	r0, r3
 800d38e:	2300      	movs	r3, #0
 800d390:	4288      	cmp	r0, r1
 800d392:	d305      	bcc.n	800d3a0 <__copybits+0x40>
 800d394:	bd70      	pop	{r4, r5, r6, pc}
 800d396:	f853 6b04 	ldr.w	r6, [r3], #4
 800d39a:	f845 6f04 	str.w	r6, [r5, #4]!
 800d39e:	e7eb      	b.n	800d378 <__copybits+0x18>
 800d3a0:	f840 3b04 	str.w	r3, [r0], #4
 800d3a4:	e7f4      	b.n	800d390 <__copybits+0x30>

0800d3a6 <__any_on>:
 800d3a6:	f100 0214 	add.w	r2, r0, #20
 800d3aa:	6900      	ldr	r0, [r0, #16]
 800d3ac:	114b      	asrs	r3, r1, #5
 800d3ae:	4298      	cmp	r0, r3
 800d3b0:	b510      	push	{r4, lr}
 800d3b2:	db11      	blt.n	800d3d8 <__any_on+0x32>
 800d3b4:	dd0a      	ble.n	800d3cc <__any_on+0x26>
 800d3b6:	f011 011f 	ands.w	r1, r1, #31
 800d3ba:	d007      	beq.n	800d3cc <__any_on+0x26>
 800d3bc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d3c0:	fa24 f001 	lsr.w	r0, r4, r1
 800d3c4:	fa00 f101 	lsl.w	r1, r0, r1
 800d3c8:	428c      	cmp	r4, r1
 800d3ca:	d10b      	bne.n	800d3e4 <__any_on+0x3e>
 800d3cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d3d0:	4293      	cmp	r3, r2
 800d3d2:	d803      	bhi.n	800d3dc <__any_on+0x36>
 800d3d4:	2000      	movs	r0, #0
 800d3d6:	bd10      	pop	{r4, pc}
 800d3d8:	4603      	mov	r3, r0
 800d3da:	e7f7      	b.n	800d3cc <__any_on+0x26>
 800d3dc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d3e0:	2900      	cmp	r1, #0
 800d3e2:	d0f5      	beq.n	800d3d0 <__any_on+0x2a>
 800d3e4:	2001      	movs	r0, #1
 800d3e6:	e7f6      	b.n	800d3d6 <__any_on+0x30>

0800d3e8 <__ascii_wctomb>:
 800d3e8:	4603      	mov	r3, r0
 800d3ea:	4608      	mov	r0, r1
 800d3ec:	b141      	cbz	r1, 800d400 <__ascii_wctomb+0x18>
 800d3ee:	2aff      	cmp	r2, #255	@ 0xff
 800d3f0:	d904      	bls.n	800d3fc <__ascii_wctomb+0x14>
 800d3f2:	228a      	movs	r2, #138	@ 0x8a
 800d3f4:	601a      	str	r2, [r3, #0]
 800d3f6:	f04f 30ff 	mov.w	r0, #4294967295
 800d3fa:	4770      	bx	lr
 800d3fc:	700a      	strb	r2, [r1, #0]
 800d3fe:	2001      	movs	r0, #1
 800d400:	4770      	bx	lr
	...

0800d404 <__sflush_r>:
 800d404:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d40c:	0716      	lsls	r6, r2, #28
 800d40e:	4605      	mov	r5, r0
 800d410:	460c      	mov	r4, r1
 800d412:	d454      	bmi.n	800d4be <__sflush_r+0xba>
 800d414:	684b      	ldr	r3, [r1, #4]
 800d416:	2b00      	cmp	r3, #0
 800d418:	dc02      	bgt.n	800d420 <__sflush_r+0x1c>
 800d41a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	dd48      	ble.n	800d4b2 <__sflush_r+0xae>
 800d420:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d422:	2e00      	cmp	r6, #0
 800d424:	d045      	beq.n	800d4b2 <__sflush_r+0xae>
 800d426:	2300      	movs	r3, #0
 800d428:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d42c:	682f      	ldr	r7, [r5, #0]
 800d42e:	6a21      	ldr	r1, [r4, #32]
 800d430:	602b      	str	r3, [r5, #0]
 800d432:	d030      	beq.n	800d496 <__sflush_r+0x92>
 800d434:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d436:	89a3      	ldrh	r3, [r4, #12]
 800d438:	0759      	lsls	r1, r3, #29
 800d43a:	d505      	bpl.n	800d448 <__sflush_r+0x44>
 800d43c:	6863      	ldr	r3, [r4, #4]
 800d43e:	1ad2      	subs	r2, r2, r3
 800d440:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d442:	b10b      	cbz	r3, 800d448 <__sflush_r+0x44>
 800d444:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d446:	1ad2      	subs	r2, r2, r3
 800d448:	2300      	movs	r3, #0
 800d44a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d44c:	6a21      	ldr	r1, [r4, #32]
 800d44e:	4628      	mov	r0, r5
 800d450:	47b0      	blx	r6
 800d452:	1c43      	adds	r3, r0, #1
 800d454:	89a3      	ldrh	r3, [r4, #12]
 800d456:	d106      	bne.n	800d466 <__sflush_r+0x62>
 800d458:	6829      	ldr	r1, [r5, #0]
 800d45a:	291d      	cmp	r1, #29
 800d45c:	d82b      	bhi.n	800d4b6 <__sflush_r+0xb2>
 800d45e:	4a2a      	ldr	r2, [pc, #168]	@ (800d508 <__sflush_r+0x104>)
 800d460:	410a      	asrs	r2, r1
 800d462:	07d6      	lsls	r6, r2, #31
 800d464:	d427      	bmi.n	800d4b6 <__sflush_r+0xb2>
 800d466:	2200      	movs	r2, #0
 800d468:	6062      	str	r2, [r4, #4]
 800d46a:	04d9      	lsls	r1, r3, #19
 800d46c:	6922      	ldr	r2, [r4, #16]
 800d46e:	6022      	str	r2, [r4, #0]
 800d470:	d504      	bpl.n	800d47c <__sflush_r+0x78>
 800d472:	1c42      	adds	r2, r0, #1
 800d474:	d101      	bne.n	800d47a <__sflush_r+0x76>
 800d476:	682b      	ldr	r3, [r5, #0]
 800d478:	b903      	cbnz	r3, 800d47c <__sflush_r+0x78>
 800d47a:	6560      	str	r0, [r4, #84]	@ 0x54
 800d47c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d47e:	602f      	str	r7, [r5, #0]
 800d480:	b1b9      	cbz	r1, 800d4b2 <__sflush_r+0xae>
 800d482:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d486:	4299      	cmp	r1, r3
 800d488:	d002      	beq.n	800d490 <__sflush_r+0x8c>
 800d48a:	4628      	mov	r0, r5
 800d48c:	f7fe ff64 	bl	800c358 <_free_r>
 800d490:	2300      	movs	r3, #0
 800d492:	6363      	str	r3, [r4, #52]	@ 0x34
 800d494:	e00d      	b.n	800d4b2 <__sflush_r+0xae>
 800d496:	2301      	movs	r3, #1
 800d498:	4628      	mov	r0, r5
 800d49a:	47b0      	blx	r6
 800d49c:	4602      	mov	r2, r0
 800d49e:	1c50      	adds	r0, r2, #1
 800d4a0:	d1c9      	bne.n	800d436 <__sflush_r+0x32>
 800d4a2:	682b      	ldr	r3, [r5, #0]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d0c6      	beq.n	800d436 <__sflush_r+0x32>
 800d4a8:	2b1d      	cmp	r3, #29
 800d4aa:	d001      	beq.n	800d4b0 <__sflush_r+0xac>
 800d4ac:	2b16      	cmp	r3, #22
 800d4ae:	d11e      	bne.n	800d4ee <__sflush_r+0xea>
 800d4b0:	602f      	str	r7, [r5, #0]
 800d4b2:	2000      	movs	r0, #0
 800d4b4:	e022      	b.n	800d4fc <__sflush_r+0xf8>
 800d4b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d4ba:	b21b      	sxth	r3, r3
 800d4bc:	e01b      	b.n	800d4f6 <__sflush_r+0xf2>
 800d4be:	690f      	ldr	r7, [r1, #16]
 800d4c0:	2f00      	cmp	r7, #0
 800d4c2:	d0f6      	beq.n	800d4b2 <__sflush_r+0xae>
 800d4c4:	0793      	lsls	r3, r2, #30
 800d4c6:	680e      	ldr	r6, [r1, #0]
 800d4c8:	bf08      	it	eq
 800d4ca:	694b      	ldreq	r3, [r1, #20]
 800d4cc:	600f      	str	r7, [r1, #0]
 800d4ce:	bf18      	it	ne
 800d4d0:	2300      	movne	r3, #0
 800d4d2:	eba6 0807 	sub.w	r8, r6, r7
 800d4d6:	608b      	str	r3, [r1, #8]
 800d4d8:	f1b8 0f00 	cmp.w	r8, #0
 800d4dc:	dde9      	ble.n	800d4b2 <__sflush_r+0xae>
 800d4de:	6a21      	ldr	r1, [r4, #32]
 800d4e0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d4e2:	4643      	mov	r3, r8
 800d4e4:	463a      	mov	r2, r7
 800d4e6:	4628      	mov	r0, r5
 800d4e8:	47b0      	blx	r6
 800d4ea:	2800      	cmp	r0, #0
 800d4ec:	dc08      	bgt.n	800d500 <__sflush_r+0xfc>
 800d4ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d4f6:	81a3      	strh	r3, [r4, #12]
 800d4f8:	f04f 30ff 	mov.w	r0, #4294967295
 800d4fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d500:	4407      	add	r7, r0
 800d502:	eba8 0800 	sub.w	r8, r8, r0
 800d506:	e7e7      	b.n	800d4d8 <__sflush_r+0xd4>
 800d508:	dfbffffe 	.word	0xdfbffffe

0800d50c <_fflush_r>:
 800d50c:	b538      	push	{r3, r4, r5, lr}
 800d50e:	690b      	ldr	r3, [r1, #16]
 800d510:	4605      	mov	r5, r0
 800d512:	460c      	mov	r4, r1
 800d514:	b913      	cbnz	r3, 800d51c <_fflush_r+0x10>
 800d516:	2500      	movs	r5, #0
 800d518:	4628      	mov	r0, r5
 800d51a:	bd38      	pop	{r3, r4, r5, pc}
 800d51c:	b118      	cbz	r0, 800d526 <_fflush_r+0x1a>
 800d51e:	6a03      	ldr	r3, [r0, #32]
 800d520:	b90b      	cbnz	r3, 800d526 <_fflush_r+0x1a>
 800d522:	f7fe fde9 	bl	800c0f8 <__sinit>
 800d526:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d0f3      	beq.n	800d516 <_fflush_r+0xa>
 800d52e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d530:	07d0      	lsls	r0, r2, #31
 800d532:	d404      	bmi.n	800d53e <_fflush_r+0x32>
 800d534:	0599      	lsls	r1, r3, #22
 800d536:	d402      	bmi.n	800d53e <_fflush_r+0x32>
 800d538:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d53a:	f7fe fef2 	bl	800c322 <__retarget_lock_acquire_recursive>
 800d53e:	4628      	mov	r0, r5
 800d540:	4621      	mov	r1, r4
 800d542:	f7ff ff5f 	bl	800d404 <__sflush_r>
 800d546:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d548:	07da      	lsls	r2, r3, #31
 800d54a:	4605      	mov	r5, r0
 800d54c:	d4e4      	bmi.n	800d518 <_fflush_r+0xc>
 800d54e:	89a3      	ldrh	r3, [r4, #12]
 800d550:	059b      	lsls	r3, r3, #22
 800d552:	d4e1      	bmi.n	800d518 <_fflush_r+0xc>
 800d554:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d556:	f7fe fee5 	bl	800c324 <__retarget_lock_release_recursive>
 800d55a:	e7dd      	b.n	800d518 <_fflush_r+0xc>

0800d55c <__assert_func>:
 800d55c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d55e:	4614      	mov	r4, r2
 800d560:	461a      	mov	r2, r3
 800d562:	4b09      	ldr	r3, [pc, #36]	@ (800d588 <__assert_func+0x2c>)
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	4605      	mov	r5, r0
 800d568:	68d8      	ldr	r0, [r3, #12]
 800d56a:	b954      	cbnz	r4, 800d582 <__assert_func+0x26>
 800d56c:	4b07      	ldr	r3, [pc, #28]	@ (800d58c <__assert_func+0x30>)
 800d56e:	461c      	mov	r4, r3
 800d570:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d574:	9100      	str	r1, [sp, #0]
 800d576:	462b      	mov	r3, r5
 800d578:	4905      	ldr	r1, [pc, #20]	@ (800d590 <__assert_func+0x34>)
 800d57a:	f000 f821 	bl	800d5c0 <fiprintf>
 800d57e:	f000 f831 	bl	800d5e4 <abort>
 800d582:	4b04      	ldr	r3, [pc, #16]	@ (800d594 <__assert_func+0x38>)
 800d584:	e7f4      	b.n	800d570 <__assert_func+0x14>
 800d586:	bf00      	nop
 800d588:	2000019c 	.word	0x2000019c
 800d58c:	0800f444 	.word	0x0800f444
 800d590:	0800f416 	.word	0x0800f416
 800d594:	0800f409 	.word	0x0800f409

0800d598 <_calloc_r>:
 800d598:	b570      	push	{r4, r5, r6, lr}
 800d59a:	fba1 5402 	umull	r5, r4, r1, r2
 800d59e:	b93c      	cbnz	r4, 800d5b0 <_calloc_r+0x18>
 800d5a0:	4629      	mov	r1, r5
 800d5a2:	f7fd fe81 	bl	800b2a8 <_malloc_r>
 800d5a6:	4606      	mov	r6, r0
 800d5a8:	b928      	cbnz	r0, 800d5b6 <_calloc_r+0x1e>
 800d5aa:	2600      	movs	r6, #0
 800d5ac:	4630      	mov	r0, r6
 800d5ae:	bd70      	pop	{r4, r5, r6, pc}
 800d5b0:	220c      	movs	r2, #12
 800d5b2:	6002      	str	r2, [r0, #0]
 800d5b4:	e7f9      	b.n	800d5aa <_calloc_r+0x12>
 800d5b6:	462a      	mov	r2, r5
 800d5b8:	4621      	mov	r1, r4
 800d5ba:	f7fe fe16 	bl	800c1ea <memset>
 800d5be:	e7f5      	b.n	800d5ac <_calloc_r+0x14>

0800d5c0 <fiprintf>:
 800d5c0:	b40e      	push	{r1, r2, r3}
 800d5c2:	b503      	push	{r0, r1, lr}
 800d5c4:	4601      	mov	r1, r0
 800d5c6:	ab03      	add	r3, sp, #12
 800d5c8:	4805      	ldr	r0, [pc, #20]	@ (800d5e0 <fiprintf+0x20>)
 800d5ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5ce:	6800      	ldr	r0, [r0, #0]
 800d5d0:	9301      	str	r3, [sp, #4]
 800d5d2:	f000 f837 	bl	800d644 <_vfiprintf_r>
 800d5d6:	b002      	add	sp, #8
 800d5d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d5dc:	b003      	add	sp, #12
 800d5de:	4770      	bx	lr
 800d5e0:	2000019c 	.word	0x2000019c

0800d5e4 <abort>:
 800d5e4:	b508      	push	{r3, lr}
 800d5e6:	2006      	movs	r0, #6
 800d5e8:	f000 fb8e 	bl	800dd08 <raise>
 800d5ec:	2001      	movs	r0, #1
 800d5ee:	f7f8 fb9f 	bl	8005d30 <_exit>

0800d5f2 <__sfputc_r>:
 800d5f2:	6893      	ldr	r3, [r2, #8]
 800d5f4:	3b01      	subs	r3, #1
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	b410      	push	{r4}
 800d5fa:	6093      	str	r3, [r2, #8]
 800d5fc:	da08      	bge.n	800d610 <__sfputc_r+0x1e>
 800d5fe:	6994      	ldr	r4, [r2, #24]
 800d600:	42a3      	cmp	r3, r4
 800d602:	db01      	blt.n	800d608 <__sfputc_r+0x16>
 800d604:	290a      	cmp	r1, #10
 800d606:	d103      	bne.n	800d610 <__sfputc_r+0x1e>
 800d608:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d60c:	f000 bac0 	b.w	800db90 <__swbuf_r>
 800d610:	6813      	ldr	r3, [r2, #0]
 800d612:	1c58      	adds	r0, r3, #1
 800d614:	6010      	str	r0, [r2, #0]
 800d616:	7019      	strb	r1, [r3, #0]
 800d618:	4608      	mov	r0, r1
 800d61a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d61e:	4770      	bx	lr

0800d620 <__sfputs_r>:
 800d620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d622:	4606      	mov	r6, r0
 800d624:	460f      	mov	r7, r1
 800d626:	4614      	mov	r4, r2
 800d628:	18d5      	adds	r5, r2, r3
 800d62a:	42ac      	cmp	r4, r5
 800d62c:	d101      	bne.n	800d632 <__sfputs_r+0x12>
 800d62e:	2000      	movs	r0, #0
 800d630:	e007      	b.n	800d642 <__sfputs_r+0x22>
 800d632:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d636:	463a      	mov	r2, r7
 800d638:	4630      	mov	r0, r6
 800d63a:	f7ff ffda 	bl	800d5f2 <__sfputc_r>
 800d63e:	1c43      	adds	r3, r0, #1
 800d640:	d1f3      	bne.n	800d62a <__sfputs_r+0xa>
 800d642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d644 <_vfiprintf_r>:
 800d644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d648:	460d      	mov	r5, r1
 800d64a:	b09d      	sub	sp, #116	@ 0x74
 800d64c:	4614      	mov	r4, r2
 800d64e:	4698      	mov	r8, r3
 800d650:	4606      	mov	r6, r0
 800d652:	b118      	cbz	r0, 800d65c <_vfiprintf_r+0x18>
 800d654:	6a03      	ldr	r3, [r0, #32]
 800d656:	b90b      	cbnz	r3, 800d65c <_vfiprintf_r+0x18>
 800d658:	f7fe fd4e 	bl	800c0f8 <__sinit>
 800d65c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d65e:	07d9      	lsls	r1, r3, #31
 800d660:	d405      	bmi.n	800d66e <_vfiprintf_r+0x2a>
 800d662:	89ab      	ldrh	r3, [r5, #12]
 800d664:	059a      	lsls	r2, r3, #22
 800d666:	d402      	bmi.n	800d66e <_vfiprintf_r+0x2a>
 800d668:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d66a:	f7fe fe5a 	bl	800c322 <__retarget_lock_acquire_recursive>
 800d66e:	89ab      	ldrh	r3, [r5, #12]
 800d670:	071b      	lsls	r3, r3, #28
 800d672:	d501      	bpl.n	800d678 <_vfiprintf_r+0x34>
 800d674:	692b      	ldr	r3, [r5, #16]
 800d676:	b99b      	cbnz	r3, 800d6a0 <_vfiprintf_r+0x5c>
 800d678:	4629      	mov	r1, r5
 800d67a:	4630      	mov	r0, r6
 800d67c:	f000 fac6 	bl	800dc0c <__swsetup_r>
 800d680:	b170      	cbz	r0, 800d6a0 <_vfiprintf_r+0x5c>
 800d682:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d684:	07dc      	lsls	r4, r3, #31
 800d686:	d504      	bpl.n	800d692 <_vfiprintf_r+0x4e>
 800d688:	f04f 30ff 	mov.w	r0, #4294967295
 800d68c:	b01d      	add	sp, #116	@ 0x74
 800d68e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d692:	89ab      	ldrh	r3, [r5, #12]
 800d694:	0598      	lsls	r0, r3, #22
 800d696:	d4f7      	bmi.n	800d688 <_vfiprintf_r+0x44>
 800d698:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d69a:	f7fe fe43 	bl	800c324 <__retarget_lock_release_recursive>
 800d69e:	e7f3      	b.n	800d688 <_vfiprintf_r+0x44>
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d6a4:	2320      	movs	r3, #32
 800d6a6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d6aa:	f8cd 800c 	str.w	r8, [sp, #12]
 800d6ae:	2330      	movs	r3, #48	@ 0x30
 800d6b0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d860 <_vfiprintf_r+0x21c>
 800d6b4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d6b8:	f04f 0901 	mov.w	r9, #1
 800d6bc:	4623      	mov	r3, r4
 800d6be:	469a      	mov	sl, r3
 800d6c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d6c4:	b10a      	cbz	r2, 800d6ca <_vfiprintf_r+0x86>
 800d6c6:	2a25      	cmp	r2, #37	@ 0x25
 800d6c8:	d1f9      	bne.n	800d6be <_vfiprintf_r+0x7a>
 800d6ca:	ebba 0b04 	subs.w	fp, sl, r4
 800d6ce:	d00b      	beq.n	800d6e8 <_vfiprintf_r+0xa4>
 800d6d0:	465b      	mov	r3, fp
 800d6d2:	4622      	mov	r2, r4
 800d6d4:	4629      	mov	r1, r5
 800d6d6:	4630      	mov	r0, r6
 800d6d8:	f7ff ffa2 	bl	800d620 <__sfputs_r>
 800d6dc:	3001      	adds	r0, #1
 800d6de:	f000 80a7 	beq.w	800d830 <_vfiprintf_r+0x1ec>
 800d6e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d6e4:	445a      	add	r2, fp
 800d6e6:	9209      	str	r2, [sp, #36]	@ 0x24
 800d6e8:	f89a 3000 	ldrb.w	r3, [sl]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	f000 809f 	beq.w	800d830 <_vfiprintf_r+0x1ec>
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	f04f 32ff 	mov.w	r2, #4294967295
 800d6f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d6fc:	f10a 0a01 	add.w	sl, sl, #1
 800d700:	9304      	str	r3, [sp, #16]
 800d702:	9307      	str	r3, [sp, #28]
 800d704:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d708:	931a      	str	r3, [sp, #104]	@ 0x68
 800d70a:	4654      	mov	r4, sl
 800d70c:	2205      	movs	r2, #5
 800d70e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d712:	4853      	ldr	r0, [pc, #332]	@ (800d860 <_vfiprintf_r+0x21c>)
 800d714:	f7f2 fd7c 	bl	8000210 <memchr>
 800d718:	9a04      	ldr	r2, [sp, #16]
 800d71a:	b9d8      	cbnz	r0, 800d754 <_vfiprintf_r+0x110>
 800d71c:	06d1      	lsls	r1, r2, #27
 800d71e:	bf44      	itt	mi
 800d720:	2320      	movmi	r3, #32
 800d722:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d726:	0713      	lsls	r3, r2, #28
 800d728:	bf44      	itt	mi
 800d72a:	232b      	movmi	r3, #43	@ 0x2b
 800d72c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d730:	f89a 3000 	ldrb.w	r3, [sl]
 800d734:	2b2a      	cmp	r3, #42	@ 0x2a
 800d736:	d015      	beq.n	800d764 <_vfiprintf_r+0x120>
 800d738:	9a07      	ldr	r2, [sp, #28]
 800d73a:	4654      	mov	r4, sl
 800d73c:	2000      	movs	r0, #0
 800d73e:	f04f 0c0a 	mov.w	ip, #10
 800d742:	4621      	mov	r1, r4
 800d744:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d748:	3b30      	subs	r3, #48	@ 0x30
 800d74a:	2b09      	cmp	r3, #9
 800d74c:	d94b      	bls.n	800d7e6 <_vfiprintf_r+0x1a2>
 800d74e:	b1b0      	cbz	r0, 800d77e <_vfiprintf_r+0x13a>
 800d750:	9207      	str	r2, [sp, #28]
 800d752:	e014      	b.n	800d77e <_vfiprintf_r+0x13a>
 800d754:	eba0 0308 	sub.w	r3, r0, r8
 800d758:	fa09 f303 	lsl.w	r3, r9, r3
 800d75c:	4313      	orrs	r3, r2
 800d75e:	9304      	str	r3, [sp, #16]
 800d760:	46a2      	mov	sl, r4
 800d762:	e7d2      	b.n	800d70a <_vfiprintf_r+0xc6>
 800d764:	9b03      	ldr	r3, [sp, #12]
 800d766:	1d19      	adds	r1, r3, #4
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	9103      	str	r1, [sp, #12]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	bfbb      	ittet	lt
 800d770:	425b      	neglt	r3, r3
 800d772:	f042 0202 	orrlt.w	r2, r2, #2
 800d776:	9307      	strge	r3, [sp, #28]
 800d778:	9307      	strlt	r3, [sp, #28]
 800d77a:	bfb8      	it	lt
 800d77c:	9204      	strlt	r2, [sp, #16]
 800d77e:	7823      	ldrb	r3, [r4, #0]
 800d780:	2b2e      	cmp	r3, #46	@ 0x2e
 800d782:	d10a      	bne.n	800d79a <_vfiprintf_r+0x156>
 800d784:	7863      	ldrb	r3, [r4, #1]
 800d786:	2b2a      	cmp	r3, #42	@ 0x2a
 800d788:	d132      	bne.n	800d7f0 <_vfiprintf_r+0x1ac>
 800d78a:	9b03      	ldr	r3, [sp, #12]
 800d78c:	1d1a      	adds	r2, r3, #4
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	9203      	str	r2, [sp, #12]
 800d792:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d796:	3402      	adds	r4, #2
 800d798:	9305      	str	r3, [sp, #20]
 800d79a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d870 <_vfiprintf_r+0x22c>
 800d79e:	7821      	ldrb	r1, [r4, #0]
 800d7a0:	2203      	movs	r2, #3
 800d7a2:	4650      	mov	r0, sl
 800d7a4:	f7f2 fd34 	bl	8000210 <memchr>
 800d7a8:	b138      	cbz	r0, 800d7ba <_vfiprintf_r+0x176>
 800d7aa:	9b04      	ldr	r3, [sp, #16]
 800d7ac:	eba0 000a 	sub.w	r0, r0, sl
 800d7b0:	2240      	movs	r2, #64	@ 0x40
 800d7b2:	4082      	lsls	r2, r0
 800d7b4:	4313      	orrs	r3, r2
 800d7b6:	3401      	adds	r4, #1
 800d7b8:	9304      	str	r3, [sp, #16]
 800d7ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7be:	4829      	ldr	r0, [pc, #164]	@ (800d864 <_vfiprintf_r+0x220>)
 800d7c0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d7c4:	2206      	movs	r2, #6
 800d7c6:	f7f2 fd23 	bl	8000210 <memchr>
 800d7ca:	2800      	cmp	r0, #0
 800d7cc:	d03f      	beq.n	800d84e <_vfiprintf_r+0x20a>
 800d7ce:	4b26      	ldr	r3, [pc, #152]	@ (800d868 <_vfiprintf_r+0x224>)
 800d7d0:	bb1b      	cbnz	r3, 800d81a <_vfiprintf_r+0x1d6>
 800d7d2:	9b03      	ldr	r3, [sp, #12]
 800d7d4:	3307      	adds	r3, #7
 800d7d6:	f023 0307 	bic.w	r3, r3, #7
 800d7da:	3308      	adds	r3, #8
 800d7dc:	9303      	str	r3, [sp, #12]
 800d7de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7e0:	443b      	add	r3, r7
 800d7e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d7e4:	e76a      	b.n	800d6bc <_vfiprintf_r+0x78>
 800d7e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800d7ea:	460c      	mov	r4, r1
 800d7ec:	2001      	movs	r0, #1
 800d7ee:	e7a8      	b.n	800d742 <_vfiprintf_r+0xfe>
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	3401      	adds	r4, #1
 800d7f4:	9305      	str	r3, [sp, #20]
 800d7f6:	4619      	mov	r1, r3
 800d7f8:	f04f 0c0a 	mov.w	ip, #10
 800d7fc:	4620      	mov	r0, r4
 800d7fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d802:	3a30      	subs	r2, #48	@ 0x30
 800d804:	2a09      	cmp	r2, #9
 800d806:	d903      	bls.n	800d810 <_vfiprintf_r+0x1cc>
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d0c6      	beq.n	800d79a <_vfiprintf_r+0x156>
 800d80c:	9105      	str	r1, [sp, #20]
 800d80e:	e7c4      	b.n	800d79a <_vfiprintf_r+0x156>
 800d810:	fb0c 2101 	mla	r1, ip, r1, r2
 800d814:	4604      	mov	r4, r0
 800d816:	2301      	movs	r3, #1
 800d818:	e7f0      	b.n	800d7fc <_vfiprintf_r+0x1b8>
 800d81a:	ab03      	add	r3, sp, #12
 800d81c:	9300      	str	r3, [sp, #0]
 800d81e:	462a      	mov	r2, r5
 800d820:	4b12      	ldr	r3, [pc, #72]	@ (800d86c <_vfiprintf_r+0x228>)
 800d822:	a904      	add	r1, sp, #16
 800d824:	4630      	mov	r0, r6
 800d826:	f3af 8000 	nop.w
 800d82a:	4607      	mov	r7, r0
 800d82c:	1c78      	adds	r0, r7, #1
 800d82e:	d1d6      	bne.n	800d7de <_vfiprintf_r+0x19a>
 800d830:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d832:	07d9      	lsls	r1, r3, #31
 800d834:	d405      	bmi.n	800d842 <_vfiprintf_r+0x1fe>
 800d836:	89ab      	ldrh	r3, [r5, #12]
 800d838:	059a      	lsls	r2, r3, #22
 800d83a:	d402      	bmi.n	800d842 <_vfiprintf_r+0x1fe>
 800d83c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d83e:	f7fe fd71 	bl	800c324 <__retarget_lock_release_recursive>
 800d842:	89ab      	ldrh	r3, [r5, #12]
 800d844:	065b      	lsls	r3, r3, #25
 800d846:	f53f af1f 	bmi.w	800d688 <_vfiprintf_r+0x44>
 800d84a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d84c:	e71e      	b.n	800d68c <_vfiprintf_r+0x48>
 800d84e:	ab03      	add	r3, sp, #12
 800d850:	9300      	str	r3, [sp, #0]
 800d852:	462a      	mov	r2, r5
 800d854:	4b05      	ldr	r3, [pc, #20]	@ (800d86c <_vfiprintf_r+0x228>)
 800d856:	a904      	add	r1, sp, #16
 800d858:	4630      	mov	r0, r6
 800d85a:	f000 f879 	bl	800d950 <_printf_i>
 800d85e:	e7e4      	b.n	800d82a <_vfiprintf_r+0x1e6>
 800d860:	0800f445 	.word	0x0800f445
 800d864:	0800f44f 	.word	0x0800f44f
 800d868:	00000000 	.word	0x00000000
 800d86c:	0800d621 	.word	0x0800d621
 800d870:	0800f44b 	.word	0x0800f44b

0800d874 <_printf_common>:
 800d874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d878:	4616      	mov	r6, r2
 800d87a:	4698      	mov	r8, r3
 800d87c:	688a      	ldr	r2, [r1, #8]
 800d87e:	690b      	ldr	r3, [r1, #16]
 800d880:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d884:	4293      	cmp	r3, r2
 800d886:	bfb8      	it	lt
 800d888:	4613      	movlt	r3, r2
 800d88a:	6033      	str	r3, [r6, #0]
 800d88c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d890:	4607      	mov	r7, r0
 800d892:	460c      	mov	r4, r1
 800d894:	b10a      	cbz	r2, 800d89a <_printf_common+0x26>
 800d896:	3301      	adds	r3, #1
 800d898:	6033      	str	r3, [r6, #0]
 800d89a:	6823      	ldr	r3, [r4, #0]
 800d89c:	0699      	lsls	r1, r3, #26
 800d89e:	bf42      	ittt	mi
 800d8a0:	6833      	ldrmi	r3, [r6, #0]
 800d8a2:	3302      	addmi	r3, #2
 800d8a4:	6033      	strmi	r3, [r6, #0]
 800d8a6:	6825      	ldr	r5, [r4, #0]
 800d8a8:	f015 0506 	ands.w	r5, r5, #6
 800d8ac:	d106      	bne.n	800d8bc <_printf_common+0x48>
 800d8ae:	f104 0a19 	add.w	sl, r4, #25
 800d8b2:	68e3      	ldr	r3, [r4, #12]
 800d8b4:	6832      	ldr	r2, [r6, #0]
 800d8b6:	1a9b      	subs	r3, r3, r2
 800d8b8:	42ab      	cmp	r3, r5
 800d8ba:	dc26      	bgt.n	800d90a <_printf_common+0x96>
 800d8bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d8c0:	6822      	ldr	r2, [r4, #0]
 800d8c2:	3b00      	subs	r3, #0
 800d8c4:	bf18      	it	ne
 800d8c6:	2301      	movne	r3, #1
 800d8c8:	0692      	lsls	r2, r2, #26
 800d8ca:	d42b      	bmi.n	800d924 <_printf_common+0xb0>
 800d8cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d8d0:	4641      	mov	r1, r8
 800d8d2:	4638      	mov	r0, r7
 800d8d4:	47c8      	blx	r9
 800d8d6:	3001      	adds	r0, #1
 800d8d8:	d01e      	beq.n	800d918 <_printf_common+0xa4>
 800d8da:	6823      	ldr	r3, [r4, #0]
 800d8dc:	6922      	ldr	r2, [r4, #16]
 800d8de:	f003 0306 	and.w	r3, r3, #6
 800d8e2:	2b04      	cmp	r3, #4
 800d8e4:	bf02      	ittt	eq
 800d8e6:	68e5      	ldreq	r5, [r4, #12]
 800d8e8:	6833      	ldreq	r3, [r6, #0]
 800d8ea:	1aed      	subeq	r5, r5, r3
 800d8ec:	68a3      	ldr	r3, [r4, #8]
 800d8ee:	bf0c      	ite	eq
 800d8f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d8f4:	2500      	movne	r5, #0
 800d8f6:	4293      	cmp	r3, r2
 800d8f8:	bfc4      	itt	gt
 800d8fa:	1a9b      	subgt	r3, r3, r2
 800d8fc:	18ed      	addgt	r5, r5, r3
 800d8fe:	2600      	movs	r6, #0
 800d900:	341a      	adds	r4, #26
 800d902:	42b5      	cmp	r5, r6
 800d904:	d11a      	bne.n	800d93c <_printf_common+0xc8>
 800d906:	2000      	movs	r0, #0
 800d908:	e008      	b.n	800d91c <_printf_common+0xa8>
 800d90a:	2301      	movs	r3, #1
 800d90c:	4652      	mov	r2, sl
 800d90e:	4641      	mov	r1, r8
 800d910:	4638      	mov	r0, r7
 800d912:	47c8      	blx	r9
 800d914:	3001      	adds	r0, #1
 800d916:	d103      	bne.n	800d920 <_printf_common+0xac>
 800d918:	f04f 30ff 	mov.w	r0, #4294967295
 800d91c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d920:	3501      	adds	r5, #1
 800d922:	e7c6      	b.n	800d8b2 <_printf_common+0x3e>
 800d924:	18e1      	adds	r1, r4, r3
 800d926:	1c5a      	adds	r2, r3, #1
 800d928:	2030      	movs	r0, #48	@ 0x30
 800d92a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d92e:	4422      	add	r2, r4
 800d930:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d934:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d938:	3302      	adds	r3, #2
 800d93a:	e7c7      	b.n	800d8cc <_printf_common+0x58>
 800d93c:	2301      	movs	r3, #1
 800d93e:	4622      	mov	r2, r4
 800d940:	4641      	mov	r1, r8
 800d942:	4638      	mov	r0, r7
 800d944:	47c8      	blx	r9
 800d946:	3001      	adds	r0, #1
 800d948:	d0e6      	beq.n	800d918 <_printf_common+0xa4>
 800d94a:	3601      	adds	r6, #1
 800d94c:	e7d9      	b.n	800d902 <_printf_common+0x8e>
	...

0800d950 <_printf_i>:
 800d950:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d954:	7e0f      	ldrb	r7, [r1, #24]
 800d956:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d958:	2f78      	cmp	r7, #120	@ 0x78
 800d95a:	4691      	mov	r9, r2
 800d95c:	4680      	mov	r8, r0
 800d95e:	460c      	mov	r4, r1
 800d960:	469a      	mov	sl, r3
 800d962:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d966:	d807      	bhi.n	800d978 <_printf_i+0x28>
 800d968:	2f62      	cmp	r7, #98	@ 0x62
 800d96a:	d80a      	bhi.n	800d982 <_printf_i+0x32>
 800d96c:	2f00      	cmp	r7, #0
 800d96e:	f000 80d2 	beq.w	800db16 <_printf_i+0x1c6>
 800d972:	2f58      	cmp	r7, #88	@ 0x58
 800d974:	f000 80b9 	beq.w	800daea <_printf_i+0x19a>
 800d978:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d97c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d980:	e03a      	b.n	800d9f8 <_printf_i+0xa8>
 800d982:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d986:	2b15      	cmp	r3, #21
 800d988:	d8f6      	bhi.n	800d978 <_printf_i+0x28>
 800d98a:	a101      	add	r1, pc, #4	@ (adr r1, 800d990 <_printf_i+0x40>)
 800d98c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d990:	0800d9e9 	.word	0x0800d9e9
 800d994:	0800d9fd 	.word	0x0800d9fd
 800d998:	0800d979 	.word	0x0800d979
 800d99c:	0800d979 	.word	0x0800d979
 800d9a0:	0800d979 	.word	0x0800d979
 800d9a4:	0800d979 	.word	0x0800d979
 800d9a8:	0800d9fd 	.word	0x0800d9fd
 800d9ac:	0800d979 	.word	0x0800d979
 800d9b0:	0800d979 	.word	0x0800d979
 800d9b4:	0800d979 	.word	0x0800d979
 800d9b8:	0800d979 	.word	0x0800d979
 800d9bc:	0800dafd 	.word	0x0800dafd
 800d9c0:	0800da27 	.word	0x0800da27
 800d9c4:	0800dab7 	.word	0x0800dab7
 800d9c8:	0800d979 	.word	0x0800d979
 800d9cc:	0800d979 	.word	0x0800d979
 800d9d0:	0800db1f 	.word	0x0800db1f
 800d9d4:	0800d979 	.word	0x0800d979
 800d9d8:	0800da27 	.word	0x0800da27
 800d9dc:	0800d979 	.word	0x0800d979
 800d9e0:	0800d979 	.word	0x0800d979
 800d9e4:	0800dabf 	.word	0x0800dabf
 800d9e8:	6833      	ldr	r3, [r6, #0]
 800d9ea:	1d1a      	adds	r2, r3, #4
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	6032      	str	r2, [r6, #0]
 800d9f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d9f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d9f8:	2301      	movs	r3, #1
 800d9fa:	e09d      	b.n	800db38 <_printf_i+0x1e8>
 800d9fc:	6833      	ldr	r3, [r6, #0]
 800d9fe:	6820      	ldr	r0, [r4, #0]
 800da00:	1d19      	adds	r1, r3, #4
 800da02:	6031      	str	r1, [r6, #0]
 800da04:	0606      	lsls	r6, r0, #24
 800da06:	d501      	bpl.n	800da0c <_printf_i+0xbc>
 800da08:	681d      	ldr	r5, [r3, #0]
 800da0a:	e003      	b.n	800da14 <_printf_i+0xc4>
 800da0c:	0645      	lsls	r5, r0, #25
 800da0e:	d5fb      	bpl.n	800da08 <_printf_i+0xb8>
 800da10:	f9b3 5000 	ldrsh.w	r5, [r3]
 800da14:	2d00      	cmp	r5, #0
 800da16:	da03      	bge.n	800da20 <_printf_i+0xd0>
 800da18:	232d      	movs	r3, #45	@ 0x2d
 800da1a:	426d      	negs	r5, r5
 800da1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800da20:	4859      	ldr	r0, [pc, #356]	@ (800db88 <_printf_i+0x238>)
 800da22:	230a      	movs	r3, #10
 800da24:	e011      	b.n	800da4a <_printf_i+0xfa>
 800da26:	6821      	ldr	r1, [r4, #0]
 800da28:	6833      	ldr	r3, [r6, #0]
 800da2a:	0608      	lsls	r0, r1, #24
 800da2c:	f853 5b04 	ldr.w	r5, [r3], #4
 800da30:	d402      	bmi.n	800da38 <_printf_i+0xe8>
 800da32:	0649      	lsls	r1, r1, #25
 800da34:	bf48      	it	mi
 800da36:	b2ad      	uxthmi	r5, r5
 800da38:	2f6f      	cmp	r7, #111	@ 0x6f
 800da3a:	4853      	ldr	r0, [pc, #332]	@ (800db88 <_printf_i+0x238>)
 800da3c:	6033      	str	r3, [r6, #0]
 800da3e:	bf14      	ite	ne
 800da40:	230a      	movne	r3, #10
 800da42:	2308      	moveq	r3, #8
 800da44:	2100      	movs	r1, #0
 800da46:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800da4a:	6866      	ldr	r6, [r4, #4]
 800da4c:	60a6      	str	r6, [r4, #8]
 800da4e:	2e00      	cmp	r6, #0
 800da50:	bfa2      	ittt	ge
 800da52:	6821      	ldrge	r1, [r4, #0]
 800da54:	f021 0104 	bicge.w	r1, r1, #4
 800da58:	6021      	strge	r1, [r4, #0]
 800da5a:	b90d      	cbnz	r5, 800da60 <_printf_i+0x110>
 800da5c:	2e00      	cmp	r6, #0
 800da5e:	d04b      	beq.n	800daf8 <_printf_i+0x1a8>
 800da60:	4616      	mov	r6, r2
 800da62:	fbb5 f1f3 	udiv	r1, r5, r3
 800da66:	fb03 5711 	mls	r7, r3, r1, r5
 800da6a:	5dc7      	ldrb	r7, [r0, r7]
 800da6c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800da70:	462f      	mov	r7, r5
 800da72:	42bb      	cmp	r3, r7
 800da74:	460d      	mov	r5, r1
 800da76:	d9f4      	bls.n	800da62 <_printf_i+0x112>
 800da78:	2b08      	cmp	r3, #8
 800da7a:	d10b      	bne.n	800da94 <_printf_i+0x144>
 800da7c:	6823      	ldr	r3, [r4, #0]
 800da7e:	07df      	lsls	r7, r3, #31
 800da80:	d508      	bpl.n	800da94 <_printf_i+0x144>
 800da82:	6923      	ldr	r3, [r4, #16]
 800da84:	6861      	ldr	r1, [r4, #4]
 800da86:	4299      	cmp	r1, r3
 800da88:	bfde      	ittt	le
 800da8a:	2330      	movle	r3, #48	@ 0x30
 800da8c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800da90:	f106 36ff 	addle.w	r6, r6, #4294967295
 800da94:	1b92      	subs	r2, r2, r6
 800da96:	6122      	str	r2, [r4, #16]
 800da98:	f8cd a000 	str.w	sl, [sp]
 800da9c:	464b      	mov	r3, r9
 800da9e:	aa03      	add	r2, sp, #12
 800daa0:	4621      	mov	r1, r4
 800daa2:	4640      	mov	r0, r8
 800daa4:	f7ff fee6 	bl	800d874 <_printf_common>
 800daa8:	3001      	adds	r0, #1
 800daaa:	d14a      	bne.n	800db42 <_printf_i+0x1f2>
 800daac:	f04f 30ff 	mov.w	r0, #4294967295
 800dab0:	b004      	add	sp, #16
 800dab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dab6:	6823      	ldr	r3, [r4, #0]
 800dab8:	f043 0320 	orr.w	r3, r3, #32
 800dabc:	6023      	str	r3, [r4, #0]
 800dabe:	4833      	ldr	r0, [pc, #204]	@ (800db8c <_printf_i+0x23c>)
 800dac0:	2778      	movs	r7, #120	@ 0x78
 800dac2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dac6:	6823      	ldr	r3, [r4, #0]
 800dac8:	6831      	ldr	r1, [r6, #0]
 800daca:	061f      	lsls	r7, r3, #24
 800dacc:	f851 5b04 	ldr.w	r5, [r1], #4
 800dad0:	d402      	bmi.n	800dad8 <_printf_i+0x188>
 800dad2:	065f      	lsls	r7, r3, #25
 800dad4:	bf48      	it	mi
 800dad6:	b2ad      	uxthmi	r5, r5
 800dad8:	6031      	str	r1, [r6, #0]
 800dada:	07d9      	lsls	r1, r3, #31
 800dadc:	bf44      	itt	mi
 800dade:	f043 0320 	orrmi.w	r3, r3, #32
 800dae2:	6023      	strmi	r3, [r4, #0]
 800dae4:	b11d      	cbz	r5, 800daee <_printf_i+0x19e>
 800dae6:	2310      	movs	r3, #16
 800dae8:	e7ac      	b.n	800da44 <_printf_i+0xf4>
 800daea:	4827      	ldr	r0, [pc, #156]	@ (800db88 <_printf_i+0x238>)
 800daec:	e7e9      	b.n	800dac2 <_printf_i+0x172>
 800daee:	6823      	ldr	r3, [r4, #0]
 800daf0:	f023 0320 	bic.w	r3, r3, #32
 800daf4:	6023      	str	r3, [r4, #0]
 800daf6:	e7f6      	b.n	800dae6 <_printf_i+0x196>
 800daf8:	4616      	mov	r6, r2
 800dafa:	e7bd      	b.n	800da78 <_printf_i+0x128>
 800dafc:	6833      	ldr	r3, [r6, #0]
 800dafe:	6825      	ldr	r5, [r4, #0]
 800db00:	6961      	ldr	r1, [r4, #20]
 800db02:	1d18      	adds	r0, r3, #4
 800db04:	6030      	str	r0, [r6, #0]
 800db06:	062e      	lsls	r6, r5, #24
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	d501      	bpl.n	800db10 <_printf_i+0x1c0>
 800db0c:	6019      	str	r1, [r3, #0]
 800db0e:	e002      	b.n	800db16 <_printf_i+0x1c6>
 800db10:	0668      	lsls	r0, r5, #25
 800db12:	d5fb      	bpl.n	800db0c <_printf_i+0x1bc>
 800db14:	8019      	strh	r1, [r3, #0]
 800db16:	2300      	movs	r3, #0
 800db18:	6123      	str	r3, [r4, #16]
 800db1a:	4616      	mov	r6, r2
 800db1c:	e7bc      	b.n	800da98 <_printf_i+0x148>
 800db1e:	6833      	ldr	r3, [r6, #0]
 800db20:	1d1a      	adds	r2, r3, #4
 800db22:	6032      	str	r2, [r6, #0]
 800db24:	681e      	ldr	r6, [r3, #0]
 800db26:	6862      	ldr	r2, [r4, #4]
 800db28:	2100      	movs	r1, #0
 800db2a:	4630      	mov	r0, r6
 800db2c:	f7f2 fb70 	bl	8000210 <memchr>
 800db30:	b108      	cbz	r0, 800db36 <_printf_i+0x1e6>
 800db32:	1b80      	subs	r0, r0, r6
 800db34:	6060      	str	r0, [r4, #4]
 800db36:	6863      	ldr	r3, [r4, #4]
 800db38:	6123      	str	r3, [r4, #16]
 800db3a:	2300      	movs	r3, #0
 800db3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800db40:	e7aa      	b.n	800da98 <_printf_i+0x148>
 800db42:	6923      	ldr	r3, [r4, #16]
 800db44:	4632      	mov	r2, r6
 800db46:	4649      	mov	r1, r9
 800db48:	4640      	mov	r0, r8
 800db4a:	47d0      	blx	sl
 800db4c:	3001      	adds	r0, #1
 800db4e:	d0ad      	beq.n	800daac <_printf_i+0x15c>
 800db50:	6823      	ldr	r3, [r4, #0]
 800db52:	079b      	lsls	r3, r3, #30
 800db54:	d413      	bmi.n	800db7e <_printf_i+0x22e>
 800db56:	68e0      	ldr	r0, [r4, #12]
 800db58:	9b03      	ldr	r3, [sp, #12]
 800db5a:	4298      	cmp	r0, r3
 800db5c:	bfb8      	it	lt
 800db5e:	4618      	movlt	r0, r3
 800db60:	e7a6      	b.n	800dab0 <_printf_i+0x160>
 800db62:	2301      	movs	r3, #1
 800db64:	4632      	mov	r2, r6
 800db66:	4649      	mov	r1, r9
 800db68:	4640      	mov	r0, r8
 800db6a:	47d0      	blx	sl
 800db6c:	3001      	adds	r0, #1
 800db6e:	d09d      	beq.n	800daac <_printf_i+0x15c>
 800db70:	3501      	adds	r5, #1
 800db72:	68e3      	ldr	r3, [r4, #12]
 800db74:	9903      	ldr	r1, [sp, #12]
 800db76:	1a5b      	subs	r3, r3, r1
 800db78:	42ab      	cmp	r3, r5
 800db7a:	dcf2      	bgt.n	800db62 <_printf_i+0x212>
 800db7c:	e7eb      	b.n	800db56 <_printf_i+0x206>
 800db7e:	2500      	movs	r5, #0
 800db80:	f104 0619 	add.w	r6, r4, #25
 800db84:	e7f5      	b.n	800db72 <_printf_i+0x222>
 800db86:	bf00      	nop
 800db88:	0800f456 	.word	0x0800f456
 800db8c:	0800f467 	.word	0x0800f467

0800db90 <__swbuf_r>:
 800db90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db92:	460e      	mov	r6, r1
 800db94:	4614      	mov	r4, r2
 800db96:	4605      	mov	r5, r0
 800db98:	b118      	cbz	r0, 800dba2 <__swbuf_r+0x12>
 800db9a:	6a03      	ldr	r3, [r0, #32]
 800db9c:	b90b      	cbnz	r3, 800dba2 <__swbuf_r+0x12>
 800db9e:	f7fe faab 	bl	800c0f8 <__sinit>
 800dba2:	69a3      	ldr	r3, [r4, #24]
 800dba4:	60a3      	str	r3, [r4, #8]
 800dba6:	89a3      	ldrh	r3, [r4, #12]
 800dba8:	071a      	lsls	r2, r3, #28
 800dbaa:	d501      	bpl.n	800dbb0 <__swbuf_r+0x20>
 800dbac:	6923      	ldr	r3, [r4, #16]
 800dbae:	b943      	cbnz	r3, 800dbc2 <__swbuf_r+0x32>
 800dbb0:	4621      	mov	r1, r4
 800dbb2:	4628      	mov	r0, r5
 800dbb4:	f000 f82a 	bl	800dc0c <__swsetup_r>
 800dbb8:	b118      	cbz	r0, 800dbc2 <__swbuf_r+0x32>
 800dbba:	f04f 37ff 	mov.w	r7, #4294967295
 800dbbe:	4638      	mov	r0, r7
 800dbc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dbc2:	6823      	ldr	r3, [r4, #0]
 800dbc4:	6922      	ldr	r2, [r4, #16]
 800dbc6:	1a98      	subs	r0, r3, r2
 800dbc8:	6963      	ldr	r3, [r4, #20]
 800dbca:	b2f6      	uxtb	r6, r6
 800dbcc:	4283      	cmp	r3, r0
 800dbce:	4637      	mov	r7, r6
 800dbd0:	dc05      	bgt.n	800dbde <__swbuf_r+0x4e>
 800dbd2:	4621      	mov	r1, r4
 800dbd4:	4628      	mov	r0, r5
 800dbd6:	f7ff fc99 	bl	800d50c <_fflush_r>
 800dbda:	2800      	cmp	r0, #0
 800dbdc:	d1ed      	bne.n	800dbba <__swbuf_r+0x2a>
 800dbde:	68a3      	ldr	r3, [r4, #8]
 800dbe0:	3b01      	subs	r3, #1
 800dbe2:	60a3      	str	r3, [r4, #8]
 800dbe4:	6823      	ldr	r3, [r4, #0]
 800dbe6:	1c5a      	adds	r2, r3, #1
 800dbe8:	6022      	str	r2, [r4, #0]
 800dbea:	701e      	strb	r6, [r3, #0]
 800dbec:	6962      	ldr	r2, [r4, #20]
 800dbee:	1c43      	adds	r3, r0, #1
 800dbf0:	429a      	cmp	r2, r3
 800dbf2:	d004      	beq.n	800dbfe <__swbuf_r+0x6e>
 800dbf4:	89a3      	ldrh	r3, [r4, #12]
 800dbf6:	07db      	lsls	r3, r3, #31
 800dbf8:	d5e1      	bpl.n	800dbbe <__swbuf_r+0x2e>
 800dbfa:	2e0a      	cmp	r6, #10
 800dbfc:	d1df      	bne.n	800dbbe <__swbuf_r+0x2e>
 800dbfe:	4621      	mov	r1, r4
 800dc00:	4628      	mov	r0, r5
 800dc02:	f7ff fc83 	bl	800d50c <_fflush_r>
 800dc06:	2800      	cmp	r0, #0
 800dc08:	d0d9      	beq.n	800dbbe <__swbuf_r+0x2e>
 800dc0a:	e7d6      	b.n	800dbba <__swbuf_r+0x2a>

0800dc0c <__swsetup_r>:
 800dc0c:	b538      	push	{r3, r4, r5, lr}
 800dc0e:	4b29      	ldr	r3, [pc, #164]	@ (800dcb4 <__swsetup_r+0xa8>)
 800dc10:	4605      	mov	r5, r0
 800dc12:	6818      	ldr	r0, [r3, #0]
 800dc14:	460c      	mov	r4, r1
 800dc16:	b118      	cbz	r0, 800dc20 <__swsetup_r+0x14>
 800dc18:	6a03      	ldr	r3, [r0, #32]
 800dc1a:	b90b      	cbnz	r3, 800dc20 <__swsetup_r+0x14>
 800dc1c:	f7fe fa6c 	bl	800c0f8 <__sinit>
 800dc20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc24:	0719      	lsls	r1, r3, #28
 800dc26:	d422      	bmi.n	800dc6e <__swsetup_r+0x62>
 800dc28:	06da      	lsls	r2, r3, #27
 800dc2a:	d407      	bmi.n	800dc3c <__swsetup_r+0x30>
 800dc2c:	2209      	movs	r2, #9
 800dc2e:	602a      	str	r2, [r5, #0]
 800dc30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dc34:	81a3      	strh	r3, [r4, #12]
 800dc36:	f04f 30ff 	mov.w	r0, #4294967295
 800dc3a:	e033      	b.n	800dca4 <__swsetup_r+0x98>
 800dc3c:	0758      	lsls	r0, r3, #29
 800dc3e:	d512      	bpl.n	800dc66 <__swsetup_r+0x5a>
 800dc40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dc42:	b141      	cbz	r1, 800dc56 <__swsetup_r+0x4a>
 800dc44:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dc48:	4299      	cmp	r1, r3
 800dc4a:	d002      	beq.n	800dc52 <__swsetup_r+0x46>
 800dc4c:	4628      	mov	r0, r5
 800dc4e:	f7fe fb83 	bl	800c358 <_free_r>
 800dc52:	2300      	movs	r3, #0
 800dc54:	6363      	str	r3, [r4, #52]	@ 0x34
 800dc56:	89a3      	ldrh	r3, [r4, #12]
 800dc58:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dc5c:	81a3      	strh	r3, [r4, #12]
 800dc5e:	2300      	movs	r3, #0
 800dc60:	6063      	str	r3, [r4, #4]
 800dc62:	6923      	ldr	r3, [r4, #16]
 800dc64:	6023      	str	r3, [r4, #0]
 800dc66:	89a3      	ldrh	r3, [r4, #12]
 800dc68:	f043 0308 	orr.w	r3, r3, #8
 800dc6c:	81a3      	strh	r3, [r4, #12]
 800dc6e:	6923      	ldr	r3, [r4, #16]
 800dc70:	b94b      	cbnz	r3, 800dc86 <__swsetup_r+0x7a>
 800dc72:	89a3      	ldrh	r3, [r4, #12]
 800dc74:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dc78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dc7c:	d003      	beq.n	800dc86 <__swsetup_r+0x7a>
 800dc7e:	4621      	mov	r1, r4
 800dc80:	4628      	mov	r0, r5
 800dc82:	f000 f883 	bl	800dd8c <__smakebuf_r>
 800dc86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc8a:	f013 0201 	ands.w	r2, r3, #1
 800dc8e:	d00a      	beq.n	800dca6 <__swsetup_r+0x9a>
 800dc90:	2200      	movs	r2, #0
 800dc92:	60a2      	str	r2, [r4, #8]
 800dc94:	6962      	ldr	r2, [r4, #20]
 800dc96:	4252      	negs	r2, r2
 800dc98:	61a2      	str	r2, [r4, #24]
 800dc9a:	6922      	ldr	r2, [r4, #16]
 800dc9c:	b942      	cbnz	r2, 800dcb0 <__swsetup_r+0xa4>
 800dc9e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800dca2:	d1c5      	bne.n	800dc30 <__swsetup_r+0x24>
 800dca4:	bd38      	pop	{r3, r4, r5, pc}
 800dca6:	0799      	lsls	r1, r3, #30
 800dca8:	bf58      	it	pl
 800dcaa:	6962      	ldrpl	r2, [r4, #20]
 800dcac:	60a2      	str	r2, [r4, #8]
 800dcae:	e7f4      	b.n	800dc9a <__swsetup_r+0x8e>
 800dcb0:	2000      	movs	r0, #0
 800dcb2:	e7f7      	b.n	800dca4 <__swsetup_r+0x98>
 800dcb4:	2000019c 	.word	0x2000019c

0800dcb8 <_raise_r>:
 800dcb8:	291f      	cmp	r1, #31
 800dcba:	b538      	push	{r3, r4, r5, lr}
 800dcbc:	4605      	mov	r5, r0
 800dcbe:	460c      	mov	r4, r1
 800dcc0:	d904      	bls.n	800dccc <_raise_r+0x14>
 800dcc2:	2316      	movs	r3, #22
 800dcc4:	6003      	str	r3, [r0, #0]
 800dcc6:	f04f 30ff 	mov.w	r0, #4294967295
 800dcca:	bd38      	pop	{r3, r4, r5, pc}
 800dccc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800dcce:	b112      	cbz	r2, 800dcd6 <_raise_r+0x1e>
 800dcd0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dcd4:	b94b      	cbnz	r3, 800dcea <_raise_r+0x32>
 800dcd6:	4628      	mov	r0, r5
 800dcd8:	f000 f830 	bl	800dd3c <_getpid_r>
 800dcdc:	4622      	mov	r2, r4
 800dcde:	4601      	mov	r1, r0
 800dce0:	4628      	mov	r0, r5
 800dce2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dce6:	f000 b817 	b.w	800dd18 <_kill_r>
 800dcea:	2b01      	cmp	r3, #1
 800dcec:	d00a      	beq.n	800dd04 <_raise_r+0x4c>
 800dcee:	1c59      	adds	r1, r3, #1
 800dcf0:	d103      	bne.n	800dcfa <_raise_r+0x42>
 800dcf2:	2316      	movs	r3, #22
 800dcf4:	6003      	str	r3, [r0, #0]
 800dcf6:	2001      	movs	r0, #1
 800dcf8:	e7e7      	b.n	800dcca <_raise_r+0x12>
 800dcfa:	2100      	movs	r1, #0
 800dcfc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800dd00:	4620      	mov	r0, r4
 800dd02:	4798      	blx	r3
 800dd04:	2000      	movs	r0, #0
 800dd06:	e7e0      	b.n	800dcca <_raise_r+0x12>

0800dd08 <raise>:
 800dd08:	4b02      	ldr	r3, [pc, #8]	@ (800dd14 <raise+0xc>)
 800dd0a:	4601      	mov	r1, r0
 800dd0c:	6818      	ldr	r0, [r3, #0]
 800dd0e:	f7ff bfd3 	b.w	800dcb8 <_raise_r>
 800dd12:	bf00      	nop
 800dd14:	2000019c 	.word	0x2000019c

0800dd18 <_kill_r>:
 800dd18:	b538      	push	{r3, r4, r5, lr}
 800dd1a:	4d07      	ldr	r5, [pc, #28]	@ (800dd38 <_kill_r+0x20>)
 800dd1c:	2300      	movs	r3, #0
 800dd1e:	4604      	mov	r4, r0
 800dd20:	4608      	mov	r0, r1
 800dd22:	4611      	mov	r1, r2
 800dd24:	602b      	str	r3, [r5, #0]
 800dd26:	f7f7 fff3 	bl	8005d10 <_kill>
 800dd2a:	1c43      	adds	r3, r0, #1
 800dd2c:	d102      	bne.n	800dd34 <_kill_r+0x1c>
 800dd2e:	682b      	ldr	r3, [r5, #0]
 800dd30:	b103      	cbz	r3, 800dd34 <_kill_r+0x1c>
 800dd32:	6023      	str	r3, [r4, #0]
 800dd34:	bd38      	pop	{r3, r4, r5, pc}
 800dd36:	bf00      	nop
 800dd38:	20002744 	.word	0x20002744

0800dd3c <_getpid_r>:
 800dd3c:	f7f7 bfe0 	b.w	8005d00 <_getpid>

0800dd40 <__swhatbuf_r>:
 800dd40:	b570      	push	{r4, r5, r6, lr}
 800dd42:	460c      	mov	r4, r1
 800dd44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd48:	2900      	cmp	r1, #0
 800dd4a:	b096      	sub	sp, #88	@ 0x58
 800dd4c:	4615      	mov	r5, r2
 800dd4e:	461e      	mov	r6, r3
 800dd50:	da0d      	bge.n	800dd6e <__swhatbuf_r+0x2e>
 800dd52:	89a3      	ldrh	r3, [r4, #12]
 800dd54:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800dd58:	f04f 0100 	mov.w	r1, #0
 800dd5c:	bf14      	ite	ne
 800dd5e:	2340      	movne	r3, #64	@ 0x40
 800dd60:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800dd64:	2000      	movs	r0, #0
 800dd66:	6031      	str	r1, [r6, #0]
 800dd68:	602b      	str	r3, [r5, #0]
 800dd6a:	b016      	add	sp, #88	@ 0x58
 800dd6c:	bd70      	pop	{r4, r5, r6, pc}
 800dd6e:	466a      	mov	r2, sp
 800dd70:	f000 f848 	bl	800de04 <_fstat_r>
 800dd74:	2800      	cmp	r0, #0
 800dd76:	dbec      	blt.n	800dd52 <__swhatbuf_r+0x12>
 800dd78:	9901      	ldr	r1, [sp, #4]
 800dd7a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800dd7e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800dd82:	4259      	negs	r1, r3
 800dd84:	4159      	adcs	r1, r3
 800dd86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dd8a:	e7eb      	b.n	800dd64 <__swhatbuf_r+0x24>

0800dd8c <__smakebuf_r>:
 800dd8c:	898b      	ldrh	r3, [r1, #12]
 800dd8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dd90:	079d      	lsls	r5, r3, #30
 800dd92:	4606      	mov	r6, r0
 800dd94:	460c      	mov	r4, r1
 800dd96:	d507      	bpl.n	800dda8 <__smakebuf_r+0x1c>
 800dd98:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800dd9c:	6023      	str	r3, [r4, #0]
 800dd9e:	6123      	str	r3, [r4, #16]
 800dda0:	2301      	movs	r3, #1
 800dda2:	6163      	str	r3, [r4, #20]
 800dda4:	b003      	add	sp, #12
 800dda6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dda8:	ab01      	add	r3, sp, #4
 800ddaa:	466a      	mov	r2, sp
 800ddac:	f7ff ffc8 	bl	800dd40 <__swhatbuf_r>
 800ddb0:	9f00      	ldr	r7, [sp, #0]
 800ddb2:	4605      	mov	r5, r0
 800ddb4:	4639      	mov	r1, r7
 800ddb6:	4630      	mov	r0, r6
 800ddb8:	f7fd fa76 	bl	800b2a8 <_malloc_r>
 800ddbc:	b948      	cbnz	r0, 800ddd2 <__smakebuf_r+0x46>
 800ddbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ddc2:	059a      	lsls	r2, r3, #22
 800ddc4:	d4ee      	bmi.n	800dda4 <__smakebuf_r+0x18>
 800ddc6:	f023 0303 	bic.w	r3, r3, #3
 800ddca:	f043 0302 	orr.w	r3, r3, #2
 800ddce:	81a3      	strh	r3, [r4, #12]
 800ddd0:	e7e2      	b.n	800dd98 <__smakebuf_r+0xc>
 800ddd2:	89a3      	ldrh	r3, [r4, #12]
 800ddd4:	6020      	str	r0, [r4, #0]
 800ddd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ddda:	81a3      	strh	r3, [r4, #12]
 800dddc:	9b01      	ldr	r3, [sp, #4]
 800ddde:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800dde2:	b15b      	cbz	r3, 800ddfc <__smakebuf_r+0x70>
 800dde4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dde8:	4630      	mov	r0, r6
 800ddea:	f000 f81d 	bl	800de28 <_isatty_r>
 800ddee:	b128      	cbz	r0, 800ddfc <__smakebuf_r+0x70>
 800ddf0:	89a3      	ldrh	r3, [r4, #12]
 800ddf2:	f023 0303 	bic.w	r3, r3, #3
 800ddf6:	f043 0301 	orr.w	r3, r3, #1
 800ddfa:	81a3      	strh	r3, [r4, #12]
 800ddfc:	89a3      	ldrh	r3, [r4, #12]
 800ddfe:	431d      	orrs	r5, r3
 800de00:	81a5      	strh	r5, [r4, #12]
 800de02:	e7cf      	b.n	800dda4 <__smakebuf_r+0x18>

0800de04 <_fstat_r>:
 800de04:	b538      	push	{r3, r4, r5, lr}
 800de06:	4d07      	ldr	r5, [pc, #28]	@ (800de24 <_fstat_r+0x20>)
 800de08:	2300      	movs	r3, #0
 800de0a:	4604      	mov	r4, r0
 800de0c:	4608      	mov	r0, r1
 800de0e:	4611      	mov	r1, r2
 800de10:	602b      	str	r3, [r5, #0]
 800de12:	f7f7 ffdd 	bl	8005dd0 <_fstat>
 800de16:	1c43      	adds	r3, r0, #1
 800de18:	d102      	bne.n	800de20 <_fstat_r+0x1c>
 800de1a:	682b      	ldr	r3, [r5, #0]
 800de1c:	b103      	cbz	r3, 800de20 <_fstat_r+0x1c>
 800de1e:	6023      	str	r3, [r4, #0]
 800de20:	bd38      	pop	{r3, r4, r5, pc}
 800de22:	bf00      	nop
 800de24:	20002744 	.word	0x20002744

0800de28 <_isatty_r>:
 800de28:	b538      	push	{r3, r4, r5, lr}
 800de2a:	4d06      	ldr	r5, [pc, #24]	@ (800de44 <_isatty_r+0x1c>)
 800de2c:	2300      	movs	r3, #0
 800de2e:	4604      	mov	r4, r0
 800de30:	4608      	mov	r0, r1
 800de32:	602b      	str	r3, [r5, #0]
 800de34:	f7f7 ffdc 	bl	8005df0 <_isatty>
 800de38:	1c43      	adds	r3, r0, #1
 800de3a:	d102      	bne.n	800de42 <_isatty_r+0x1a>
 800de3c:	682b      	ldr	r3, [r5, #0]
 800de3e:	b103      	cbz	r3, 800de42 <_isatty_r+0x1a>
 800de40:	6023      	str	r3, [r4, #0]
 800de42:	bd38      	pop	{r3, r4, r5, pc}
 800de44:	20002744 	.word	0x20002744

0800de48 <pow>:
 800de48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de4a:	ed2d 8b02 	vpush	{d8}
 800de4e:	eeb0 8a40 	vmov.f32	s16, s0
 800de52:	eef0 8a60 	vmov.f32	s17, s1
 800de56:	ec55 4b11 	vmov	r4, r5, d1
 800de5a:	f000 f975 	bl	800e148 <__ieee754_pow>
 800de5e:	4622      	mov	r2, r4
 800de60:	462b      	mov	r3, r5
 800de62:	4620      	mov	r0, r4
 800de64:	4629      	mov	r1, r5
 800de66:	ec57 6b10 	vmov	r6, r7, d0
 800de6a:	f7f2 fe77 	bl	8000b5c <__aeabi_dcmpun>
 800de6e:	2800      	cmp	r0, #0
 800de70:	d13b      	bne.n	800deea <pow+0xa2>
 800de72:	ec51 0b18 	vmov	r0, r1, d8
 800de76:	2200      	movs	r2, #0
 800de78:	2300      	movs	r3, #0
 800de7a:	f7f2 fe3d 	bl	8000af8 <__aeabi_dcmpeq>
 800de7e:	b1b8      	cbz	r0, 800deb0 <pow+0x68>
 800de80:	2200      	movs	r2, #0
 800de82:	2300      	movs	r3, #0
 800de84:	4620      	mov	r0, r4
 800de86:	4629      	mov	r1, r5
 800de88:	f7f2 fe36 	bl	8000af8 <__aeabi_dcmpeq>
 800de8c:	2800      	cmp	r0, #0
 800de8e:	d146      	bne.n	800df1e <pow+0xd6>
 800de90:	ec45 4b10 	vmov	d0, r4, r5
 800de94:	f000 f86f 	bl	800df76 <finite>
 800de98:	b338      	cbz	r0, 800deea <pow+0xa2>
 800de9a:	2200      	movs	r2, #0
 800de9c:	2300      	movs	r3, #0
 800de9e:	4620      	mov	r0, r4
 800dea0:	4629      	mov	r1, r5
 800dea2:	f7f2 fe33 	bl	8000b0c <__aeabi_dcmplt>
 800dea6:	b300      	cbz	r0, 800deea <pow+0xa2>
 800dea8:	f7fe fa10 	bl	800c2cc <__errno>
 800deac:	2322      	movs	r3, #34	@ 0x22
 800deae:	e01b      	b.n	800dee8 <pow+0xa0>
 800deb0:	ec47 6b10 	vmov	d0, r6, r7
 800deb4:	f000 f85f 	bl	800df76 <finite>
 800deb8:	b9e0      	cbnz	r0, 800def4 <pow+0xac>
 800deba:	eeb0 0a48 	vmov.f32	s0, s16
 800debe:	eef0 0a68 	vmov.f32	s1, s17
 800dec2:	f000 f858 	bl	800df76 <finite>
 800dec6:	b1a8      	cbz	r0, 800def4 <pow+0xac>
 800dec8:	ec45 4b10 	vmov	d0, r4, r5
 800decc:	f000 f853 	bl	800df76 <finite>
 800ded0:	b180      	cbz	r0, 800def4 <pow+0xac>
 800ded2:	4632      	mov	r2, r6
 800ded4:	463b      	mov	r3, r7
 800ded6:	4630      	mov	r0, r6
 800ded8:	4639      	mov	r1, r7
 800deda:	f7f2 fe3f 	bl	8000b5c <__aeabi_dcmpun>
 800dede:	2800      	cmp	r0, #0
 800dee0:	d0e2      	beq.n	800dea8 <pow+0x60>
 800dee2:	f7fe f9f3 	bl	800c2cc <__errno>
 800dee6:	2321      	movs	r3, #33	@ 0x21
 800dee8:	6003      	str	r3, [r0, #0]
 800deea:	ecbd 8b02 	vpop	{d8}
 800deee:	ec47 6b10 	vmov	d0, r6, r7
 800def2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800def4:	2200      	movs	r2, #0
 800def6:	2300      	movs	r3, #0
 800def8:	4630      	mov	r0, r6
 800defa:	4639      	mov	r1, r7
 800defc:	f7f2 fdfc 	bl	8000af8 <__aeabi_dcmpeq>
 800df00:	2800      	cmp	r0, #0
 800df02:	d0f2      	beq.n	800deea <pow+0xa2>
 800df04:	eeb0 0a48 	vmov.f32	s0, s16
 800df08:	eef0 0a68 	vmov.f32	s1, s17
 800df0c:	f000 f833 	bl	800df76 <finite>
 800df10:	2800      	cmp	r0, #0
 800df12:	d0ea      	beq.n	800deea <pow+0xa2>
 800df14:	ec45 4b10 	vmov	d0, r4, r5
 800df18:	f000 f82d 	bl	800df76 <finite>
 800df1c:	e7c3      	b.n	800dea6 <pow+0x5e>
 800df1e:	4f01      	ldr	r7, [pc, #4]	@ (800df24 <pow+0xdc>)
 800df20:	2600      	movs	r6, #0
 800df22:	e7e2      	b.n	800deea <pow+0xa2>
 800df24:	3ff00000 	.word	0x3ff00000

0800df28 <atan2f>:
 800df28:	f000 be5a 	b.w	800ebe0 <__ieee754_atan2f>

0800df2c <sqrtf>:
 800df2c:	b508      	push	{r3, lr}
 800df2e:	ed2d 8b02 	vpush	{d8}
 800df32:	eeb0 8a40 	vmov.f32	s16, s0
 800df36:	f000 f903 	bl	800e140 <__ieee754_sqrtf>
 800df3a:	eeb4 8a48 	vcmp.f32	s16, s16
 800df3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df42:	d60c      	bvs.n	800df5e <sqrtf+0x32>
 800df44:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800df64 <sqrtf+0x38>
 800df48:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800df4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df50:	d505      	bpl.n	800df5e <sqrtf+0x32>
 800df52:	f7fe f9bb 	bl	800c2cc <__errno>
 800df56:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800df5a:	2321      	movs	r3, #33	@ 0x21
 800df5c:	6003      	str	r3, [r0, #0]
 800df5e:	ecbd 8b02 	vpop	{d8}
 800df62:	bd08      	pop	{r3, pc}
 800df64:	00000000 	.word	0x00000000

0800df68 <fabsf>:
 800df68:	ee10 3a10 	vmov	r3, s0
 800df6c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800df70:	ee00 3a10 	vmov	s0, r3
 800df74:	4770      	bx	lr

0800df76 <finite>:
 800df76:	b082      	sub	sp, #8
 800df78:	ed8d 0b00 	vstr	d0, [sp]
 800df7c:	9801      	ldr	r0, [sp, #4]
 800df7e:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800df82:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800df86:	0fc0      	lsrs	r0, r0, #31
 800df88:	b002      	add	sp, #8
 800df8a:	4770      	bx	lr

0800df8c <__ieee754_sqrt>:
 800df8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df90:	4a68      	ldr	r2, [pc, #416]	@ (800e134 <__ieee754_sqrt+0x1a8>)
 800df92:	ec55 4b10 	vmov	r4, r5, d0
 800df96:	43aa      	bics	r2, r5
 800df98:	462b      	mov	r3, r5
 800df9a:	4621      	mov	r1, r4
 800df9c:	d110      	bne.n	800dfc0 <__ieee754_sqrt+0x34>
 800df9e:	4622      	mov	r2, r4
 800dfa0:	4620      	mov	r0, r4
 800dfa2:	4629      	mov	r1, r5
 800dfa4:	f7f2 fb40 	bl	8000628 <__aeabi_dmul>
 800dfa8:	4602      	mov	r2, r0
 800dfaa:	460b      	mov	r3, r1
 800dfac:	4620      	mov	r0, r4
 800dfae:	4629      	mov	r1, r5
 800dfb0:	f7f2 f984 	bl	80002bc <__adddf3>
 800dfb4:	4604      	mov	r4, r0
 800dfb6:	460d      	mov	r5, r1
 800dfb8:	ec45 4b10 	vmov	d0, r4, r5
 800dfbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfc0:	2d00      	cmp	r5, #0
 800dfc2:	dc0e      	bgt.n	800dfe2 <__ieee754_sqrt+0x56>
 800dfc4:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800dfc8:	4322      	orrs	r2, r4
 800dfca:	d0f5      	beq.n	800dfb8 <__ieee754_sqrt+0x2c>
 800dfcc:	b19d      	cbz	r5, 800dff6 <__ieee754_sqrt+0x6a>
 800dfce:	4622      	mov	r2, r4
 800dfd0:	4620      	mov	r0, r4
 800dfd2:	4629      	mov	r1, r5
 800dfd4:	f7f2 f970 	bl	80002b8 <__aeabi_dsub>
 800dfd8:	4602      	mov	r2, r0
 800dfda:	460b      	mov	r3, r1
 800dfdc:	f7f2 fc4e 	bl	800087c <__aeabi_ddiv>
 800dfe0:	e7e8      	b.n	800dfb4 <__ieee754_sqrt+0x28>
 800dfe2:	152a      	asrs	r2, r5, #20
 800dfe4:	d115      	bne.n	800e012 <__ieee754_sqrt+0x86>
 800dfe6:	2000      	movs	r0, #0
 800dfe8:	e009      	b.n	800dffe <__ieee754_sqrt+0x72>
 800dfea:	0acb      	lsrs	r3, r1, #11
 800dfec:	3a15      	subs	r2, #21
 800dfee:	0549      	lsls	r1, r1, #21
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d0fa      	beq.n	800dfea <__ieee754_sqrt+0x5e>
 800dff4:	e7f7      	b.n	800dfe6 <__ieee754_sqrt+0x5a>
 800dff6:	462a      	mov	r2, r5
 800dff8:	e7fa      	b.n	800dff0 <__ieee754_sqrt+0x64>
 800dffa:	005b      	lsls	r3, r3, #1
 800dffc:	3001      	adds	r0, #1
 800dffe:	02dc      	lsls	r4, r3, #11
 800e000:	d5fb      	bpl.n	800dffa <__ieee754_sqrt+0x6e>
 800e002:	1e44      	subs	r4, r0, #1
 800e004:	1b12      	subs	r2, r2, r4
 800e006:	f1c0 0420 	rsb	r4, r0, #32
 800e00a:	fa21 f404 	lsr.w	r4, r1, r4
 800e00e:	4323      	orrs	r3, r4
 800e010:	4081      	lsls	r1, r0
 800e012:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e016:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800e01a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e01e:	07d2      	lsls	r2, r2, #31
 800e020:	bf5c      	itt	pl
 800e022:	005b      	lslpl	r3, r3, #1
 800e024:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800e028:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e02c:	bf58      	it	pl
 800e02e:	0049      	lslpl	r1, r1, #1
 800e030:	2600      	movs	r6, #0
 800e032:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800e036:	106d      	asrs	r5, r5, #1
 800e038:	0049      	lsls	r1, r1, #1
 800e03a:	2016      	movs	r0, #22
 800e03c:	4632      	mov	r2, r6
 800e03e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800e042:	1917      	adds	r7, r2, r4
 800e044:	429f      	cmp	r7, r3
 800e046:	bfde      	ittt	le
 800e048:	193a      	addle	r2, r7, r4
 800e04a:	1bdb      	suble	r3, r3, r7
 800e04c:	1936      	addle	r6, r6, r4
 800e04e:	0fcf      	lsrs	r7, r1, #31
 800e050:	3801      	subs	r0, #1
 800e052:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800e056:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e05a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800e05e:	d1f0      	bne.n	800e042 <__ieee754_sqrt+0xb6>
 800e060:	4604      	mov	r4, r0
 800e062:	2720      	movs	r7, #32
 800e064:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800e068:	429a      	cmp	r2, r3
 800e06a:	eb00 0e0c 	add.w	lr, r0, ip
 800e06e:	db02      	blt.n	800e076 <__ieee754_sqrt+0xea>
 800e070:	d113      	bne.n	800e09a <__ieee754_sqrt+0x10e>
 800e072:	458e      	cmp	lr, r1
 800e074:	d811      	bhi.n	800e09a <__ieee754_sqrt+0x10e>
 800e076:	f1be 0f00 	cmp.w	lr, #0
 800e07a:	eb0e 000c 	add.w	r0, lr, ip
 800e07e:	da42      	bge.n	800e106 <__ieee754_sqrt+0x17a>
 800e080:	2800      	cmp	r0, #0
 800e082:	db40      	blt.n	800e106 <__ieee754_sqrt+0x17a>
 800e084:	f102 0801 	add.w	r8, r2, #1
 800e088:	1a9b      	subs	r3, r3, r2
 800e08a:	458e      	cmp	lr, r1
 800e08c:	bf88      	it	hi
 800e08e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800e092:	eba1 010e 	sub.w	r1, r1, lr
 800e096:	4464      	add	r4, ip
 800e098:	4642      	mov	r2, r8
 800e09a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800e09e:	3f01      	subs	r7, #1
 800e0a0:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800e0a4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e0a8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800e0ac:	d1dc      	bne.n	800e068 <__ieee754_sqrt+0xdc>
 800e0ae:	4319      	orrs	r1, r3
 800e0b0:	d01b      	beq.n	800e0ea <__ieee754_sqrt+0x15e>
 800e0b2:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800e138 <__ieee754_sqrt+0x1ac>
 800e0b6:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800e13c <__ieee754_sqrt+0x1b0>
 800e0ba:	e9da 0100 	ldrd	r0, r1, [sl]
 800e0be:	e9db 2300 	ldrd	r2, r3, [fp]
 800e0c2:	f7f2 f8f9 	bl	80002b8 <__aeabi_dsub>
 800e0c6:	e9da 8900 	ldrd	r8, r9, [sl]
 800e0ca:	4602      	mov	r2, r0
 800e0cc:	460b      	mov	r3, r1
 800e0ce:	4640      	mov	r0, r8
 800e0d0:	4649      	mov	r1, r9
 800e0d2:	f7f2 fd25 	bl	8000b20 <__aeabi_dcmple>
 800e0d6:	b140      	cbz	r0, 800e0ea <__ieee754_sqrt+0x15e>
 800e0d8:	f1b4 3fff 	cmp.w	r4, #4294967295
 800e0dc:	e9da 0100 	ldrd	r0, r1, [sl]
 800e0e0:	e9db 2300 	ldrd	r2, r3, [fp]
 800e0e4:	d111      	bne.n	800e10a <__ieee754_sqrt+0x17e>
 800e0e6:	3601      	adds	r6, #1
 800e0e8:	463c      	mov	r4, r7
 800e0ea:	1072      	asrs	r2, r6, #1
 800e0ec:	0863      	lsrs	r3, r4, #1
 800e0ee:	07f1      	lsls	r1, r6, #31
 800e0f0:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800e0f4:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800e0f8:	bf48      	it	mi
 800e0fa:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800e0fe:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800e102:	4618      	mov	r0, r3
 800e104:	e756      	b.n	800dfb4 <__ieee754_sqrt+0x28>
 800e106:	4690      	mov	r8, r2
 800e108:	e7be      	b.n	800e088 <__ieee754_sqrt+0xfc>
 800e10a:	f7f2 f8d7 	bl	80002bc <__adddf3>
 800e10e:	e9da 8900 	ldrd	r8, r9, [sl]
 800e112:	4602      	mov	r2, r0
 800e114:	460b      	mov	r3, r1
 800e116:	4640      	mov	r0, r8
 800e118:	4649      	mov	r1, r9
 800e11a:	f7f2 fcf7 	bl	8000b0c <__aeabi_dcmplt>
 800e11e:	b120      	cbz	r0, 800e12a <__ieee754_sqrt+0x19e>
 800e120:	1ca0      	adds	r0, r4, #2
 800e122:	bf08      	it	eq
 800e124:	3601      	addeq	r6, #1
 800e126:	3402      	adds	r4, #2
 800e128:	e7df      	b.n	800e0ea <__ieee754_sqrt+0x15e>
 800e12a:	1c63      	adds	r3, r4, #1
 800e12c:	f023 0401 	bic.w	r4, r3, #1
 800e130:	e7db      	b.n	800e0ea <__ieee754_sqrt+0x15e>
 800e132:	bf00      	nop
 800e134:	7ff00000 	.word	0x7ff00000
 800e138:	200001f8 	.word	0x200001f8
 800e13c:	200001f0 	.word	0x200001f0

0800e140 <__ieee754_sqrtf>:
 800e140:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800e144:	4770      	bx	lr
	...

0800e148 <__ieee754_pow>:
 800e148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e14c:	b091      	sub	sp, #68	@ 0x44
 800e14e:	ed8d 1b00 	vstr	d1, [sp]
 800e152:	e9dd 1900 	ldrd	r1, r9, [sp]
 800e156:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800e15a:	ea5a 0001 	orrs.w	r0, sl, r1
 800e15e:	ec57 6b10 	vmov	r6, r7, d0
 800e162:	d113      	bne.n	800e18c <__ieee754_pow+0x44>
 800e164:	19b3      	adds	r3, r6, r6
 800e166:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800e16a:	4152      	adcs	r2, r2
 800e16c:	4298      	cmp	r0, r3
 800e16e:	4b98      	ldr	r3, [pc, #608]	@ (800e3d0 <__ieee754_pow+0x288>)
 800e170:	4193      	sbcs	r3, r2
 800e172:	f080 84ea 	bcs.w	800eb4a <__ieee754_pow+0xa02>
 800e176:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e17a:	4630      	mov	r0, r6
 800e17c:	4639      	mov	r1, r7
 800e17e:	f7f2 f89d 	bl	80002bc <__adddf3>
 800e182:	ec41 0b10 	vmov	d0, r0, r1
 800e186:	b011      	add	sp, #68	@ 0x44
 800e188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e18c:	4a91      	ldr	r2, [pc, #580]	@ (800e3d4 <__ieee754_pow+0x28c>)
 800e18e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800e192:	4590      	cmp	r8, r2
 800e194:	463d      	mov	r5, r7
 800e196:	4633      	mov	r3, r6
 800e198:	d806      	bhi.n	800e1a8 <__ieee754_pow+0x60>
 800e19a:	d101      	bne.n	800e1a0 <__ieee754_pow+0x58>
 800e19c:	2e00      	cmp	r6, #0
 800e19e:	d1ea      	bne.n	800e176 <__ieee754_pow+0x2e>
 800e1a0:	4592      	cmp	sl, r2
 800e1a2:	d801      	bhi.n	800e1a8 <__ieee754_pow+0x60>
 800e1a4:	d10e      	bne.n	800e1c4 <__ieee754_pow+0x7c>
 800e1a6:	b169      	cbz	r1, 800e1c4 <__ieee754_pow+0x7c>
 800e1a8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800e1ac:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800e1b0:	431d      	orrs	r5, r3
 800e1b2:	d1e0      	bne.n	800e176 <__ieee754_pow+0x2e>
 800e1b4:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e1b8:	18db      	adds	r3, r3, r3
 800e1ba:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800e1be:	4152      	adcs	r2, r2
 800e1c0:	429d      	cmp	r5, r3
 800e1c2:	e7d4      	b.n	800e16e <__ieee754_pow+0x26>
 800e1c4:	2d00      	cmp	r5, #0
 800e1c6:	46c3      	mov	fp, r8
 800e1c8:	da3a      	bge.n	800e240 <__ieee754_pow+0xf8>
 800e1ca:	4a83      	ldr	r2, [pc, #524]	@ (800e3d8 <__ieee754_pow+0x290>)
 800e1cc:	4592      	cmp	sl, r2
 800e1ce:	d84d      	bhi.n	800e26c <__ieee754_pow+0x124>
 800e1d0:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800e1d4:	4592      	cmp	sl, r2
 800e1d6:	f240 84c7 	bls.w	800eb68 <__ieee754_pow+0xa20>
 800e1da:	ea4f 522a 	mov.w	r2, sl, asr #20
 800e1de:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800e1e2:	2a14      	cmp	r2, #20
 800e1e4:	dd0f      	ble.n	800e206 <__ieee754_pow+0xbe>
 800e1e6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800e1ea:	fa21 f402 	lsr.w	r4, r1, r2
 800e1ee:	fa04 f202 	lsl.w	r2, r4, r2
 800e1f2:	428a      	cmp	r2, r1
 800e1f4:	f040 84b8 	bne.w	800eb68 <__ieee754_pow+0xa20>
 800e1f8:	f004 0401 	and.w	r4, r4, #1
 800e1fc:	f1c4 0402 	rsb	r4, r4, #2
 800e200:	2900      	cmp	r1, #0
 800e202:	d158      	bne.n	800e2b6 <__ieee754_pow+0x16e>
 800e204:	e00e      	b.n	800e224 <__ieee754_pow+0xdc>
 800e206:	2900      	cmp	r1, #0
 800e208:	d154      	bne.n	800e2b4 <__ieee754_pow+0x16c>
 800e20a:	f1c2 0214 	rsb	r2, r2, #20
 800e20e:	fa4a f402 	asr.w	r4, sl, r2
 800e212:	fa04 f202 	lsl.w	r2, r4, r2
 800e216:	4552      	cmp	r2, sl
 800e218:	f040 84a3 	bne.w	800eb62 <__ieee754_pow+0xa1a>
 800e21c:	f004 0401 	and.w	r4, r4, #1
 800e220:	f1c4 0402 	rsb	r4, r4, #2
 800e224:	4a6d      	ldr	r2, [pc, #436]	@ (800e3dc <__ieee754_pow+0x294>)
 800e226:	4592      	cmp	sl, r2
 800e228:	d12e      	bne.n	800e288 <__ieee754_pow+0x140>
 800e22a:	f1b9 0f00 	cmp.w	r9, #0
 800e22e:	f280 8494 	bge.w	800eb5a <__ieee754_pow+0xa12>
 800e232:	496a      	ldr	r1, [pc, #424]	@ (800e3dc <__ieee754_pow+0x294>)
 800e234:	4632      	mov	r2, r6
 800e236:	463b      	mov	r3, r7
 800e238:	2000      	movs	r0, #0
 800e23a:	f7f2 fb1f 	bl	800087c <__aeabi_ddiv>
 800e23e:	e7a0      	b.n	800e182 <__ieee754_pow+0x3a>
 800e240:	2400      	movs	r4, #0
 800e242:	bbc1      	cbnz	r1, 800e2b6 <__ieee754_pow+0x16e>
 800e244:	4a63      	ldr	r2, [pc, #396]	@ (800e3d4 <__ieee754_pow+0x28c>)
 800e246:	4592      	cmp	sl, r2
 800e248:	d1ec      	bne.n	800e224 <__ieee754_pow+0xdc>
 800e24a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800e24e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800e252:	431a      	orrs	r2, r3
 800e254:	f000 8479 	beq.w	800eb4a <__ieee754_pow+0xa02>
 800e258:	4b61      	ldr	r3, [pc, #388]	@ (800e3e0 <__ieee754_pow+0x298>)
 800e25a:	4598      	cmp	r8, r3
 800e25c:	d908      	bls.n	800e270 <__ieee754_pow+0x128>
 800e25e:	f1b9 0f00 	cmp.w	r9, #0
 800e262:	f2c0 8476 	blt.w	800eb52 <__ieee754_pow+0xa0a>
 800e266:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e26a:	e78a      	b.n	800e182 <__ieee754_pow+0x3a>
 800e26c:	2402      	movs	r4, #2
 800e26e:	e7e8      	b.n	800e242 <__ieee754_pow+0xfa>
 800e270:	f1b9 0f00 	cmp.w	r9, #0
 800e274:	f04f 0000 	mov.w	r0, #0
 800e278:	f04f 0100 	mov.w	r1, #0
 800e27c:	da81      	bge.n	800e182 <__ieee754_pow+0x3a>
 800e27e:	e9dd 0300 	ldrd	r0, r3, [sp]
 800e282:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800e286:	e77c      	b.n	800e182 <__ieee754_pow+0x3a>
 800e288:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800e28c:	d106      	bne.n	800e29c <__ieee754_pow+0x154>
 800e28e:	4632      	mov	r2, r6
 800e290:	463b      	mov	r3, r7
 800e292:	4630      	mov	r0, r6
 800e294:	4639      	mov	r1, r7
 800e296:	f7f2 f9c7 	bl	8000628 <__aeabi_dmul>
 800e29a:	e772      	b.n	800e182 <__ieee754_pow+0x3a>
 800e29c:	4a51      	ldr	r2, [pc, #324]	@ (800e3e4 <__ieee754_pow+0x29c>)
 800e29e:	4591      	cmp	r9, r2
 800e2a0:	d109      	bne.n	800e2b6 <__ieee754_pow+0x16e>
 800e2a2:	2d00      	cmp	r5, #0
 800e2a4:	db07      	blt.n	800e2b6 <__ieee754_pow+0x16e>
 800e2a6:	ec47 6b10 	vmov	d0, r6, r7
 800e2aa:	b011      	add	sp, #68	@ 0x44
 800e2ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2b0:	f7ff be6c 	b.w	800df8c <__ieee754_sqrt>
 800e2b4:	2400      	movs	r4, #0
 800e2b6:	ec47 6b10 	vmov	d0, r6, r7
 800e2ba:	9302      	str	r3, [sp, #8]
 800e2bc:	f000 fc88 	bl	800ebd0 <fabs>
 800e2c0:	9b02      	ldr	r3, [sp, #8]
 800e2c2:	ec51 0b10 	vmov	r0, r1, d0
 800e2c6:	bb53      	cbnz	r3, 800e31e <__ieee754_pow+0x1d6>
 800e2c8:	4b44      	ldr	r3, [pc, #272]	@ (800e3dc <__ieee754_pow+0x294>)
 800e2ca:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800e2ce:	429a      	cmp	r2, r3
 800e2d0:	d002      	beq.n	800e2d8 <__ieee754_pow+0x190>
 800e2d2:	f1b8 0f00 	cmp.w	r8, #0
 800e2d6:	d122      	bne.n	800e31e <__ieee754_pow+0x1d6>
 800e2d8:	f1b9 0f00 	cmp.w	r9, #0
 800e2dc:	da05      	bge.n	800e2ea <__ieee754_pow+0x1a2>
 800e2de:	4602      	mov	r2, r0
 800e2e0:	460b      	mov	r3, r1
 800e2e2:	2000      	movs	r0, #0
 800e2e4:	493d      	ldr	r1, [pc, #244]	@ (800e3dc <__ieee754_pow+0x294>)
 800e2e6:	f7f2 fac9 	bl	800087c <__aeabi_ddiv>
 800e2ea:	2d00      	cmp	r5, #0
 800e2ec:	f6bf af49 	bge.w	800e182 <__ieee754_pow+0x3a>
 800e2f0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800e2f4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800e2f8:	ea58 0804 	orrs.w	r8, r8, r4
 800e2fc:	d108      	bne.n	800e310 <__ieee754_pow+0x1c8>
 800e2fe:	4602      	mov	r2, r0
 800e300:	460b      	mov	r3, r1
 800e302:	4610      	mov	r0, r2
 800e304:	4619      	mov	r1, r3
 800e306:	f7f1 ffd7 	bl	80002b8 <__aeabi_dsub>
 800e30a:	4602      	mov	r2, r0
 800e30c:	460b      	mov	r3, r1
 800e30e:	e794      	b.n	800e23a <__ieee754_pow+0xf2>
 800e310:	2c01      	cmp	r4, #1
 800e312:	f47f af36 	bne.w	800e182 <__ieee754_pow+0x3a>
 800e316:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e31a:	4619      	mov	r1, r3
 800e31c:	e731      	b.n	800e182 <__ieee754_pow+0x3a>
 800e31e:	0feb      	lsrs	r3, r5, #31
 800e320:	3b01      	subs	r3, #1
 800e322:	ea53 0204 	orrs.w	r2, r3, r4
 800e326:	d102      	bne.n	800e32e <__ieee754_pow+0x1e6>
 800e328:	4632      	mov	r2, r6
 800e32a:	463b      	mov	r3, r7
 800e32c:	e7e9      	b.n	800e302 <__ieee754_pow+0x1ba>
 800e32e:	3c01      	subs	r4, #1
 800e330:	431c      	orrs	r4, r3
 800e332:	d016      	beq.n	800e362 <__ieee754_pow+0x21a>
 800e334:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800e3c0 <__ieee754_pow+0x278>
 800e338:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800e33c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e340:	f240 8112 	bls.w	800e568 <__ieee754_pow+0x420>
 800e344:	4b28      	ldr	r3, [pc, #160]	@ (800e3e8 <__ieee754_pow+0x2a0>)
 800e346:	459a      	cmp	sl, r3
 800e348:	4b25      	ldr	r3, [pc, #148]	@ (800e3e0 <__ieee754_pow+0x298>)
 800e34a:	d916      	bls.n	800e37a <__ieee754_pow+0x232>
 800e34c:	4598      	cmp	r8, r3
 800e34e:	d80b      	bhi.n	800e368 <__ieee754_pow+0x220>
 800e350:	f1b9 0f00 	cmp.w	r9, #0
 800e354:	da0b      	bge.n	800e36e <__ieee754_pow+0x226>
 800e356:	2000      	movs	r0, #0
 800e358:	b011      	add	sp, #68	@ 0x44
 800e35a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e35e:	f000 be67 	b.w	800f030 <__math_oflow>
 800e362:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800e3c8 <__ieee754_pow+0x280>
 800e366:	e7e7      	b.n	800e338 <__ieee754_pow+0x1f0>
 800e368:	f1b9 0f00 	cmp.w	r9, #0
 800e36c:	dcf3      	bgt.n	800e356 <__ieee754_pow+0x20e>
 800e36e:	2000      	movs	r0, #0
 800e370:	b011      	add	sp, #68	@ 0x44
 800e372:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e376:	f000 be53 	b.w	800f020 <__math_uflow>
 800e37a:	4598      	cmp	r8, r3
 800e37c:	d20c      	bcs.n	800e398 <__ieee754_pow+0x250>
 800e37e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e382:	2200      	movs	r2, #0
 800e384:	2300      	movs	r3, #0
 800e386:	f7f2 fbc1 	bl	8000b0c <__aeabi_dcmplt>
 800e38a:	3800      	subs	r0, #0
 800e38c:	bf18      	it	ne
 800e38e:	2001      	movne	r0, #1
 800e390:	f1b9 0f00 	cmp.w	r9, #0
 800e394:	daec      	bge.n	800e370 <__ieee754_pow+0x228>
 800e396:	e7df      	b.n	800e358 <__ieee754_pow+0x210>
 800e398:	4b10      	ldr	r3, [pc, #64]	@ (800e3dc <__ieee754_pow+0x294>)
 800e39a:	4598      	cmp	r8, r3
 800e39c:	f04f 0200 	mov.w	r2, #0
 800e3a0:	d924      	bls.n	800e3ec <__ieee754_pow+0x2a4>
 800e3a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	f7f2 fbb0 	bl	8000b0c <__aeabi_dcmplt>
 800e3ac:	3800      	subs	r0, #0
 800e3ae:	bf18      	it	ne
 800e3b0:	2001      	movne	r0, #1
 800e3b2:	f1b9 0f00 	cmp.w	r9, #0
 800e3b6:	dccf      	bgt.n	800e358 <__ieee754_pow+0x210>
 800e3b8:	e7da      	b.n	800e370 <__ieee754_pow+0x228>
 800e3ba:	bf00      	nop
 800e3bc:	f3af 8000 	nop.w
 800e3c0:	00000000 	.word	0x00000000
 800e3c4:	3ff00000 	.word	0x3ff00000
 800e3c8:	00000000 	.word	0x00000000
 800e3cc:	bff00000 	.word	0xbff00000
 800e3d0:	fff00000 	.word	0xfff00000
 800e3d4:	7ff00000 	.word	0x7ff00000
 800e3d8:	433fffff 	.word	0x433fffff
 800e3dc:	3ff00000 	.word	0x3ff00000
 800e3e0:	3fefffff 	.word	0x3fefffff
 800e3e4:	3fe00000 	.word	0x3fe00000
 800e3e8:	43f00000 	.word	0x43f00000
 800e3ec:	4b5a      	ldr	r3, [pc, #360]	@ (800e558 <__ieee754_pow+0x410>)
 800e3ee:	f7f1 ff63 	bl	80002b8 <__aeabi_dsub>
 800e3f2:	a351      	add	r3, pc, #324	@ (adr r3, 800e538 <__ieee754_pow+0x3f0>)
 800e3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3f8:	4604      	mov	r4, r0
 800e3fa:	460d      	mov	r5, r1
 800e3fc:	f7f2 f914 	bl	8000628 <__aeabi_dmul>
 800e400:	a34f      	add	r3, pc, #316	@ (adr r3, 800e540 <__ieee754_pow+0x3f8>)
 800e402:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e406:	4606      	mov	r6, r0
 800e408:	460f      	mov	r7, r1
 800e40a:	4620      	mov	r0, r4
 800e40c:	4629      	mov	r1, r5
 800e40e:	f7f2 f90b 	bl	8000628 <__aeabi_dmul>
 800e412:	4b52      	ldr	r3, [pc, #328]	@ (800e55c <__ieee754_pow+0x414>)
 800e414:	4682      	mov	sl, r0
 800e416:	468b      	mov	fp, r1
 800e418:	2200      	movs	r2, #0
 800e41a:	4620      	mov	r0, r4
 800e41c:	4629      	mov	r1, r5
 800e41e:	f7f2 f903 	bl	8000628 <__aeabi_dmul>
 800e422:	4602      	mov	r2, r0
 800e424:	460b      	mov	r3, r1
 800e426:	a148      	add	r1, pc, #288	@ (adr r1, 800e548 <__ieee754_pow+0x400>)
 800e428:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e42c:	f7f1 ff44 	bl	80002b8 <__aeabi_dsub>
 800e430:	4622      	mov	r2, r4
 800e432:	462b      	mov	r3, r5
 800e434:	f7f2 f8f8 	bl	8000628 <__aeabi_dmul>
 800e438:	4602      	mov	r2, r0
 800e43a:	460b      	mov	r3, r1
 800e43c:	2000      	movs	r0, #0
 800e43e:	4948      	ldr	r1, [pc, #288]	@ (800e560 <__ieee754_pow+0x418>)
 800e440:	f7f1 ff3a 	bl	80002b8 <__aeabi_dsub>
 800e444:	4622      	mov	r2, r4
 800e446:	4680      	mov	r8, r0
 800e448:	4689      	mov	r9, r1
 800e44a:	462b      	mov	r3, r5
 800e44c:	4620      	mov	r0, r4
 800e44e:	4629      	mov	r1, r5
 800e450:	f7f2 f8ea 	bl	8000628 <__aeabi_dmul>
 800e454:	4602      	mov	r2, r0
 800e456:	460b      	mov	r3, r1
 800e458:	4640      	mov	r0, r8
 800e45a:	4649      	mov	r1, r9
 800e45c:	f7f2 f8e4 	bl	8000628 <__aeabi_dmul>
 800e460:	a33b      	add	r3, pc, #236	@ (adr r3, 800e550 <__ieee754_pow+0x408>)
 800e462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e466:	f7f2 f8df 	bl	8000628 <__aeabi_dmul>
 800e46a:	4602      	mov	r2, r0
 800e46c:	460b      	mov	r3, r1
 800e46e:	4650      	mov	r0, sl
 800e470:	4659      	mov	r1, fp
 800e472:	f7f1 ff21 	bl	80002b8 <__aeabi_dsub>
 800e476:	4602      	mov	r2, r0
 800e478:	460b      	mov	r3, r1
 800e47a:	4680      	mov	r8, r0
 800e47c:	4689      	mov	r9, r1
 800e47e:	4630      	mov	r0, r6
 800e480:	4639      	mov	r1, r7
 800e482:	f7f1 ff1b 	bl	80002bc <__adddf3>
 800e486:	2400      	movs	r4, #0
 800e488:	4632      	mov	r2, r6
 800e48a:	463b      	mov	r3, r7
 800e48c:	4620      	mov	r0, r4
 800e48e:	460d      	mov	r5, r1
 800e490:	f7f1 ff12 	bl	80002b8 <__aeabi_dsub>
 800e494:	4602      	mov	r2, r0
 800e496:	460b      	mov	r3, r1
 800e498:	4640      	mov	r0, r8
 800e49a:	4649      	mov	r1, r9
 800e49c:	f7f1 ff0c 	bl	80002b8 <__aeabi_dsub>
 800e4a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e4a4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	9304      	str	r3, [sp, #16]
 800e4ac:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800e4b0:	4606      	mov	r6, r0
 800e4b2:	460f      	mov	r7, r1
 800e4b4:	4652      	mov	r2, sl
 800e4b6:	465b      	mov	r3, fp
 800e4b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e4bc:	f7f1 fefc 	bl	80002b8 <__aeabi_dsub>
 800e4c0:	4622      	mov	r2, r4
 800e4c2:	462b      	mov	r3, r5
 800e4c4:	f7f2 f8b0 	bl	8000628 <__aeabi_dmul>
 800e4c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e4cc:	4680      	mov	r8, r0
 800e4ce:	4689      	mov	r9, r1
 800e4d0:	4630      	mov	r0, r6
 800e4d2:	4639      	mov	r1, r7
 800e4d4:	f7f2 f8a8 	bl	8000628 <__aeabi_dmul>
 800e4d8:	4602      	mov	r2, r0
 800e4da:	460b      	mov	r3, r1
 800e4dc:	4640      	mov	r0, r8
 800e4de:	4649      	mov	r1, r9
 800e4e0:	f7f1 feec 	bl	80002bc <__adddf3>
 800e4e4:	4652      	mov	r2, sl
 800e4e6:	465b      	mov	r3, fp
 800e4e8:	4606      	mov	r6, r0
 800e4ea:	460f      	mov	r7, r1
 800e4ec:	4620      	mov	r0, r4
 800e4ee:	4629      	mov	r1, r5
 800e4f0:	f7f2 f89a 	bl	8000628 <__aeabi_dmul>
 800e4f4:	460b      	mov	r3, r1
 800e4f6:	4602      	mov	r2, r0
 800e4f8:	4680      	mov	r8, r0
 800e4fa:	4689      	mov	r9, r1
 800e4fc:	4630      	mov	r0, r6
 800e4fe:	4639      	mov	r1, r7
 800e500:	f7f1 fedc 	bl	80002bc <__adddf3>
 800e504:	4b17      	ldr	r3, [pc, #92]	@ (800e564 <__ieee754_pow+0x41c>)
 800e506:	4299      	cmp	r1, r3
 800e508:	4604      	mov	r4, r0
 800e50a:	460d      	mov	r5, r1
 800e50c:	468a      	mov	sl, r1
 800e50e:	468b      	mov	fp, r1
 800e510:	f340 82ef 	ble.w	800eaf2 <__ieee754_pow+0x9aa>
 800e514:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800e518:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800e51c:	4303      	orrs	r3, r0
 800e51e:	f000 81e8 	beq.w	800e8f2 <__ieee754_pow+0x7aa>
 800e522:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e526:	2200      	movs	r2, #0
 800e528:	2300      	movs	r3, #0
 800e52a:	f7f2 faef 	bl	8000b0c <__aeabi_dcmplt>
 800e52e:	3800      	subs	r0, #0
 800e530:	bf18      	it	ne
 800e532:	2001      	movne	r0, #1
 800e534:	e710      	b.n	800e358 <__ieee754_pow+0x210>
 800e536:	bf00      	nop
 800e538:	60000000 	.word	0x60000000
 800e53c:	3ff71547 	.word	0x3ff71547
 800e540:	f85ddf44 	.word	0xf85ddf44
 800e544:	3e54ae0b 	.word	0x3e54ae0b
 800e548:	55555555 	.word	0x55555555
 800e54c:	3fd55555 	.word	0x3fd55555
 800e550:	652b82fe 	.word	0x652b82fe
 800e554:	3ff71547 	.word	0x3ff71547
 800e558:	3ff00000 	.word	0x3ff00000
 800e55c:	3fd00000 	.word	0x3fd00000
 800e560:	3fe00000 	.word	0x3fe00000
 800e564:	408fffff 	.word	0x408fffff
 800e568:	4bd5      	ldr	r3, [pc, #852]	@ (800e8c0 <__ieee754_pow+0x778>)
 800e56a:	402b      	ands	r3, r5
 800e56c:	2200      	movs	r2, #0
 800e56e:	b92b      	cbnz	r3, 800e57c <__ieee754_pow+0x434>
 800e570:	4bd4      	ldr	r3, [pc, #848]	@ (800e8c4 <__ieee754_pow+0x77c>)
 800e572:	f7f2 f859 	bl	8000628 <__aeabi_dmul>
 800e576:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800e57a:	468b      	mov	fp, r1
 800e57c:	ea4f 532b 	mov.w	r3, fp, asr #20
 800e580:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800e584:	4413      	add	r3, r2
 800e586:	930a      	str	r3, [sp, #40]	@ 0x28
 800e588:	4bcf      	ldr	r3, [pc, #828]	@ (800e8c8 <__ieee754_pow+0x780>)
 800e58a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800e58e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800e592:	459b      	cmp	fp, r3
 800e594:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e598:	dd08      	ble.n	800e5ac <__ieee754_pow+0x464>
 800e59a:	4bcc      	ldr	r3, [pc, #816]	@ (800e8cc <__ieee754_pow+0x784>)
 800e59c:	459b      	cmp	fp, r3
 800e59e:	f340 81a5 	ble.w	800e8ec <__ieee754_pow+0x7a4>
 800e5a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e5a4:	3301      	adds	r3, #1
 800e5a6:	930a      	str	r3, [sp, #40]	@ 0x28
 800e5a8:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800e5ac:	f04f 0a00 	mov.w	sl, #0
 800e5b0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800e5b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e5b6:	4bc6      	ldr	r3, [pc, #792]	@ (800e8d0 <__ieee754_pow+0x788>)
 800e5b8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e5bc:	ed93 7b00 	vldr	d7, [r3]
 800e5c0:	4629      	mov	r1, r5
 800e5c2:	ec53 2b17 	vmov	r2, r3, d7
 800e5c6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e5ca:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e5ce:	f7f1 fe73 	bl	80002b8 <__aeabi_dsub>
 800e5d2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e5d6:	4606      	mov	r6, r0
 800e5d8:	460f      	mov	r7, r1
 800e5da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e5de:	f7f1 fe6d 	bl	80002bc <__adddf3>
 800e5e2:	4602      	mov	r2, r0
 800e5e4:	460b      	mov	r3, r1
 800e5e6:	2000      	movs	r0, #0
 800e5e8:	49ba      	ldr	r1, [pc, #744]	@ (800e8d4 <__ieee754_pow+0x78c>)
 800e5ea:	f7f2 f947 	bl	800087c <__aeabi_ddiv>
 800e5ee:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800e5f2:	4602      	mov	r2, r0
 800e5f4:	460b      	mov	r3, r1
 800e5f6:	4630      	mov	r0, r6
 800e5f8:	4639      	mov	r1, r7
 800e5fa:	f7f2 f815 	bl	8000628 <__aeabi_dmul>
 800e5fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e602:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800e606:	106d      	asrs	r5, r5, #1
 800e608:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800e60c:	f04f 0b00 	mov.w	fp, #0
 800e610:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800e614:	4661      	mov	r1, ip
 800e616:	2200      	movs	r2, #0
 800e618:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800e61c:	4658      	mov	r0, fp
 800e61e:	46e1      	mov	r9, ip
 800e620:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800e624:	4614      	mov	r4, r2
 800e626:	461d      	mov	r5, r3
 800e628:	f7f1 fffe 	bl	8000628 <__aeabi_dmul>
 800e62c:	4602      	mov	r2, r0
 800e62e:	460b      	mov	r3, r1
 800e630:	4630      	mov	r0, r6
 800e632:	4639      	mov	r1, r7
 800e634:	f7f1 fe40 	bl	80002b8 <__aeabi_dsub>
 800e638:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e63c:	4606      	mov	r6, r0
 800e63e:	460f      	mov	r7, r1
 800e640:	4620      	mov	r0, r4
 800e642:	4629      	mov	r1, r5
 800e644:	f7f1 fe38 	bl	80002b8 <__aeabi_dsub>
 800e648:	4602      	mov	r2, r0
 800e64a:	460b      	mov	r3, r1
 800e64c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e650:	f7f1 fe32 	bl	80002b8 <__aeabi_dsub>
 800e654:	465a      	mov	r2, fp
 800e656:	464b      	mov	r3, r9
 800e658:	f7f1 ffe6 	bl	8000628 <__aeabi_dmul>
 800e65c:	4602      	mov	r2, r0
 800e65e:	460b      	mov	r3, r1
 800e660:	4630      	mov	r0, r6
 800e662:	4639      	mov	r1, r7
 800e664:	f7f1 fe28 	bl	80002b8 <__aeabi_dsub>
 800e668:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e66c:	f7f1 ffdc 	bl	8000628 <__aeabi_dmul>
 800e670:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e674:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e678:	4610      	mov	r0, r2
 800e67a:	4619      	mov	r1, r3
 800e67c:	f7f1 ffd4 	bl	8000628 <__aeabi_dmul>
 800e680:	a37d      	add	r3, pc, #500	@ (adr r3, 800e878 <__ieee754_pow+0x730>)
 800e682:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e686:	4604      	mov	r4, r0
 800e688:	460d      	mov	r5, r1
 800e68a:	f7f1 ffcd 	bl	8000628 <__aeabi_dmul>
 800e68e:	a37c      	add	r3, pc, #496	@ (adr r3, 800e880 <__ieee754_pow+0x738>)
 800e690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e694:	f7f1 fe12 	bl	80002bc <__adddf3>
 800e698:	4622      	mov	r2, r4
 800e69a:	462b      	mov	r3, r5
 800e69c:	f7f1 ffc4 	bl	8000628 <__aeabi_dmul>
 800e6a0:	a379      	add	r3, pc, #484	@ (adr r3, 800e888 <__ieee754_pow+0x740>)
 800e6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6a6:	f7f1 fe09 	bl	80002bc <__adddf3>
 800e6aa:	4622      	mov	r2, r4
 800e6ac:	462b      	mov	r3, r5
 800e6ae:	f7f1 ffbb 	bl	8000628 <__aeabi_dmul>
 800e6b2:	a377      	add	r3, pc, #476	@ (adr r3, 800e890 <__ieee754_pow+0x748>)
 800e6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6b8:	f7f1 fe00 	bl	80002bc <__adddf3>
 800e6bc:	4622      	mov	r2, r4
 800e6be:	462b      	mov	r3, r5
 800e6c0:	f7f1 ffb2 	bl	8000628 <__aeabi_dmul>
 800e6c4:	a374      	add	r3, pc, #464	@ (adr r3, 800e898 <__ieee754_pow+0x750>)
 800e6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6ca:	f7f1 fdf7 	bl	80002bc <__adddf3>
 800e6ce:	4622      	mov	r2, r4
 800e6d0:	462b      	mov	r3, r5
 800e6d2:	f7f1 ffa9 	bl	8000628 <__aeabi_dmul>
 800e6d6:	a372      	add	r3, pc, #456	@ (adr r3, 800e8a0 <__ieee754_pow+0x758>)
 800e6d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6dc:	f7f1 fdee 	bl	80002bc <__adddf3>
 800e6e0:	4622      	mov	r2, r4
 800e6e2:	4606      	mov	r6, r0
 800e6e4:	460f      	mov	r7, r1
 800e6e6:	462b      	mov	r3, r5
 800e6e8:	4620      	mov	r0, r4
 800e6ea:	4629      	mov	r1, r5
 800e6ec:	f7f1 ff9c 	bl	8000628 <__aeabi_dmul>
 800e6f0:	4602      	mov	r2, r0
 800e6f2:	460b      	mov	r3, r1
 800e6f4:	4630      	mov	r0, r6
 800e6f6:	4639      	mov	r1, r7
 800e6f8:	f7f1 ff96 	bl	8000628 <__aeabi_dmul>
 800e6fc:	465a      	mov	r2, fp
 800e6fe:	4604      	mov	r4, r0
 800e700:	460d      	mov	r5, r1
 800e702:	464b      	mov	r3, r9
 800e704:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e708:	f7f1 fdd8 	bl	80002bc <__adddf3>
 800e70c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e710:	f7f1 ff8a 	bl	8000628 <__aeabi_dmul>
 800e714:	4622      	mov	r2, r4
 800e716:	462b      	mov	r3, r5
 800e718:	f7f1 fdd0 	bl	80002bc <__adddf3>
 800e71c:	465a      	mov	r2, fp
 800e71e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e722:	464b      	mov	r3, r9
 800e724:	4658      	mov	r0, fp
 800e726:	4649      	mov	r1, r9
 800e728:	f7f1 ff7e 	bl	8000628 <__aeabi_dmul>
 800e72c:	4b6a      	ldr	r3, [pc, #424]	@ (800e8d8 <__ieee754_pow+0x790>)
 800e72e:	2200      	movs	r2, #0
 800e730:	4606      	mov	r6, r0
 800e732:	460f      	mov	r7, r1
 800e734:	f7f1 fdc2 	bl	80002bc <__adddf3>
 800e738:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e73c:	f7f1 fdbe 	bl	80002bc <__adddf3>
 800e740:	46d8      	mov	r8, fp
 800e742:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800e746:	460d      	mov	r5, r1
 800e748:	465a      	mov	r2, fp
 800e74a:	460b      	mov	r3, r1
 800e74c:	4640      	mov	r0, r8
 800e74e:	4649      	mov	r1, r9
 800e750:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800e754:	f7f1 ff68 	bl	8000628 <__aeabi_dmul>
 800e758:	465c      	mov	r4, fp
 800e75a:	4680      	mov	r8, r0
 800e75c:	4689      	mov	r9, r1
 800e75e:	4b5e      	ldr	r3, [pc, #376]	@ (800e8d8 <__ieee754_pow+0x790>)
 800e760:	2200      	movs	r2, #0
 800e762:	4620      	mov	r0, r4
 800e764:	4629      	mov	r1, r5
 800e766:	f7f1 fda7 	bl	80002b8 <__aeabi_dsub>
 800e76a:	4632      	mov	r2, r6
 800e76c:	463b      	mov	r3, r7
 800e76e:	f7f1 fda3 	bl	80002b8 <__aeabi_dsub>
 800e772:	4602      	mov	r2, r0
 800e774:	460b      	mov	r3, r1
 800e776:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e77a:	f7f1 fd9d 	bl	80002b8 <__aeabi_dsub>
 800e77e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e782:	f7f1 ff51 	bl	8000628 <__aeabi_dmul>
 800e786:	4622      	mov	r2, r4
 800e788:	4606      	mov	r6, r0
 800e78a:	460f      	mov	r7, r1
 800e78c:	462b      	mov	r3, r5
 800e78e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e792:	f7f1 ff49 	bl	8000628 <__aeabi_dmul>
 800e796:	4602      	mov	r2, r0
 800e798:	460b      	mov	r3, r1
 800e79a:	4630      	mov	r0, r6
 800e79c:	4639      	mov	r1, r7
 800e79e:	f7f1 fd8d 	bl	80002bc <__adddf3>
 800e7a2:	4606      	mov	r6, r0
 800e7a4:	460f      	mov	r7, r1
 800e7a6:	4602      	mov	r2, r0
 800e7a8:	460b      	mov	r3, r1
 800e7aa:	4640      	mov	r0, r8
 800e7ac:	4649      	mov	r1, r9
 800e7ae:	f7f1 fd85 	bl	80002bc <__adddf3>
 800e7b2:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800e7b6:	a33c      	add	r3, pc, #240	@ (adr r3, 800e8a8 <__ieee754_pow+0x760>)
 800e7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7bc:	4658      	mov	r0, fp
 800e7be:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800e7c2:	460d      	mov	r5, r1
 800e7c4:	f7f1 ff30 	bl	8000628 <__aeabi_dmul>
 800e7c8:	465c      	mov	r4, fp
 800e7ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e7ce:	4642      	mov	r2, r8
 800e7d0:	464b      	mov	r3, r9
 800e7d2:	4620      	mov	r0, r4
 800e7d4:	4629      	mov	r1, r5
 800e7d6:	f7f1 fd6f 	bl	80002b8 <__aeabi_dsub>
 800e7da:	4602      	mov	r2, r0
 800e7dc:	460b      	mov	r3, r1
 800e7de:	4630      	mov	r0, r6
 800e7e0:	4639      	mov	r1, r7
 800e7e2:	f7f1 fd69 	bl	80002b8 <__aeabi_dsub>
 800e7e6:	a332      	add	r3, pc, #200	@ (adr r3, 800e8b0 <__ieee754_pow+0x768>)
 800e7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7ec:	f7f1 ff1c 	bl	8000628 <__aeabi_dmul>
 800e7f0:	a331      	add	r3, pc, #196	@ (adr r3, 800e8b8 <__ieee754_pow+0x770>)
 800e7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7f6:	4606      	mov	r6, r0
 800e7f8:	460f      	mov	r7, r1
 800e7fa:	4620      	mov	r0, r4
 800e7fc:	4629      	mov	r1, r5
 800e7fe:	f7f1 ff13 	bl	8000628 <__aeabi_dmul>
 800e802:	4602      	mov	r2, r0
 800e804:	460b      	mov	r3, r1
 800e806:	4630      	mov	r0, r6
 800e808:	4639      	mov	r1, r7
 800e80a:	f7f1 fd57 	bl	80002bc <__adddf3>
 800e80e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e810:	4b32      	ldr	r3, [pc, #200]	@ (800e8dc <__ieee754_pow+0x794>)
 800e812:	4413      	add	r3, r2
 800e814:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e818:	f7f1 fd50 	bl	80002bc <__adddf3>
 800e81c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e820:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e822:	f7f1 fe97 	bl	8000554 <__aeabi_i2d>
 800e826:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e828:	4b2d      	ldr	r3, [pc, #180]	@ (800e8e0 <__ieee754_pow+0x798>)
 800e82a:	4413      	add	r3, r2
 800e82c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e830:	4606      	mov	r6, r0
 800e832:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e836:	460f      	mov	r7, r1
 800e838:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e83c:	f7f1 fd3e 	bl	80002bc <__adddf3>
 800e840:	4642      	mov	r2, r8
 800e842:	464b      	mov	r3, r9
 800e844:	f7f1 fd3a 	bl	80002bc <__adddf3>
 800e848:	4632      	mov	r2, r6
 800e84a:	463b      	mov	r3, r7
 800e84c:	f7f1 fd36 	bl	80002bc <__adddf3>
 800e850:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800e854:	4632      	mov	r2, r6
 800e856:	463b      	mov	r3, r7
 800e858:	4658      	mov	r0, fp
 800e85a:	460d      	mov	r5, r1
 800e85c:	f7f1 fd2c 	bl	80002b8 <__aeabi_dsub>
 800e860:	4642      	mov	r2, r8
 800e862:	464b      	mov	r3, r9
 800e864:	f7f1 fd28 	bl	80002b8 <__aeabi_dsub>
 800e868:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e86c:	f7f1 fd24 	bl	80002b8 <__aeabi_dsub>
 800e870:	465c      	mov	r4, fp
 800e872:	4602      	mov	r2, r0
 800e874:	e036      	b.n	800e8e4 <__ieee754_pow+0x79c>
 800e876:	bf00      	nop
 800e878:	4a454eef 	.word	0x4a454eef
 800e87c:	3fca7e28 	.word	0x3fca7e28
 800e880:	93c9db65 	.word	0x93c9db65
 800e884:	3fcd864a 	.word	0x3fcd864a
 800e888:	a91d4101 	.word	0xa91d4101
 800e88c:	3fd17460 	.word	0x3fd17460
 800e890:	518f264d 	.word	0x518f264d
 800e894:	3fd55555 	.word	0x3fd55555
 800e898:	db6fabff 	.word	0xdb6fabff
 800e89c:	3fdb6db6 	.word	0x3fdb6db6
 800e8a0:	33333303 	.word	0x33333303
 800e8a4:	3fe33333 	.word	0x3fe33333
 800e8a8:	e0000000 	.word	0xe0000000
 800e8ac:	3feec709 	.word	0x3feec709
 800e8b0:	dc3a03fd 	.word	0xdc3a03fd
 800e8b4:	3feec709 	.word	0x3feec709
 800e8b8:	145b01f5 	.word	0x145b01f5
 800e8bc:	be3e2fe0 	.word	0xbe3e2fe0
 800e8c0:	7ff00000 	.word	0x7ff00000
 800e8c4:	43400000 	.word	0x43400000
 800e8c8:	0003988e 	.word	0x0003988e
 800e8cc:	000bb679 	.word	0x000bb679
 800e8d0:	0800f498 	.word	0x0800f498
 800e8d4:	3ff00000 	.word	0x3ff00000
 800e8d8:	40080000 	.word	0x40080000
 800e8dc:	0800f478 	.word	0x0800f478
 800e8e0:	0800f488 	.word	0x0800f488
 800e8e4:	460b      	mov	r3, r1
 800e8e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e8ea:	e5d7      	b.n	800e49c <__ieee754_pow+0x354>
 800e8ec:	f04f 0a01 	mov.w	sl, #1
 800e8f0:	e65e      	b.n	800e5b0 <__ieee754_pow+0x468>
 800e8f2:	a3b4      	add	r3, pc, #720	@ (adr r3, 800ebc4 <__ieee754_pow+0xa7c>)
 800e8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8f8:	4630      	mov	r0, r6
 800e8fa:	4639      	mov	r1, r7
 800e8fc:	f7f1 fcde 	bl	80002bc <__adddf3>
 800e900:	4642      	mov	r2, r8
 800e902:	e9cd 0100 	strd	r0, r1, [sp]
 800e906:	464b      	mov	r3, r9
 800e908:	4620      	mov	r0, r4
 800e90a:	4629      	mov	r1, r5
 800e90c:	f7f1 fcd4 	bl	80002b8 <__aeabi_dsub>
 800e910:	4602      	mov	r2, r0
 800e912:	460b      	mov	r3, r1
 800e914:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e918:	f7f2 f916 	bl	8000b48 <__aeabi_dcmpgt>
 800e91c:	2800      	cmp	r0, #0
 800e91e:	f47f ae00 	bne.w	800e522 <__ieee754_pow+0x3da>
 800e922:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800e926:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800e92a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800e92e:	fa43 fa0a 	asr.w	sl, r3, sl
 800e932:	44da      	add	sl, fp
 800e934:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800e938:	489d      	ldr	r0, [pc, #628]	@ (800ebb0 <__ieee754_pow+0xa68>)
 800e93a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800e93e:	4108      	asrs	r0, r1
 800e940:	ea00 030a 	and.w	r3, r0, sl
 800e944:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800e948:	f1c1 0114 	rsb	r1, r1, #20
 800e94c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800e950:	fa4a fa01 	asr.w	sl, sl, r1
 800e954:	f1bb 0f00 	cmp.w	fp, #0
 800e958:	4640      	mov	r0, r8
 800e95a:	4649      	mov	r1, r9
 800e95c:	f04f 0200 	mov.w	r2, #0
 800e960:	bfb8      	it	lt
 800e962:	f1ca 0a00 	rsblt	sl, sl, #0
 800e966:	f7f1 fca7 	bl	80002b8 <__aeabi_dsub>
 800e96a:	4680      	mov	r8, r0
 800e96c:	4689      	mov	r9, r1
 800e96e:	4632      	mov	r2, r6
 800e970:	463b      	mov	r3, r7
 800e972:	4640      	mov	r0, r8
 800e974:	4649      	mov	r1, r9
 800e976:	f7f1 fca1 	bl	80002bc <__adddf3>
 800e97a:	2400      	movs	r4, #0
 800e97c:	a37c      	add	r3, pc, #496	@ (adr r3, 800eb70 <__ieee754_pow+0xa28>)
 800e97e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e982:	4620      	mov	r0, r4
 800e984:	460d      	mov	r5, r1
 800e986:	f7f1 fe4f 	bl	8000628 <__aeabi_dmul>
 800e98a:	4642      	mov	r2, r8
 800e98c:	e9cd 0100 	strd	r0, r1, [sp]
 800e990:	464b      	mov	r3, r9
 800e992:	4620      	mov	r0, r4
 800e994:	4629      	mov	r1, r5
 800e996:	f7f1 fc8f 	bl	80002b8 <__aeabi_dsub>
 800e99a:	4602      	mov	r2, r0
 800e99c:	460b      	mov	r3, r1
 800e99e:	4630      	mov	r0, r6
 800e9a0:	4639      	mov	r1, r7
 800e9a2:	f7f1 fc89 	bl	80002b8 <__aeabi_dsub>
 800e9a6:	a374      	add	r3, pc, #464	@ (adr r3, 800eb78 <__ieee754_pow+0xa30>)
 800e9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9ac:	f7f1 fe3c 	bl	8000628 <__aeabi_dmul>
 800e9b0:	a373      	add	r3, pc, #460	@ (adr r3, 800eb80 <__ieee754_pow+0xa38>)
 800e9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9b6:	4680      	mov	r8, r0
 800e9b8:	4689      	mov	r9, r1
 800e9ba:	4620      	mov	r0, r4
 800e9bc:	4629      	mov	r1, r5
 800e9be:	f7f1 fe33 	bl	8000628 <__aeabi_dmul>
 800e9c2:	4602      	mov	r2, r0
 800e9c4:	460b      	mov	r3, r1
 800e9c6:	4640      	mov	r0, r8
 800e9c8:	4649      	mov	r1, r9
 800e9ca:	f7f1 fc77 	bl	80002bc <__adddf3>
 800e9ce:	4604      	mov	r4, r0
 800e9d0:	460d      	mov	r5, r1
 800e9d2:	4602      	mov	r2, r0
 800e9d4:	460b      	mov	r3, r1
 800e9d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e9da:	f7f1 fc6f 	bl	80002bc <__adddf3>
 800e9de:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e9e2:	4680      	mov	r8, r0
 800e9e4:	4689      	mov	r9, r1
 800e9e6:	f7f1 fc67 	bl	80002b8 <__aeabi_dsub>
 800e9ea:	4602      	mov	r2, r0
 800e9ec:	460b      	mov	r3, r1
 800e9ee:	4620      	mov	r0, r4
 800e9f0:	4629      	mov	r1, r5
 800e9f2:	f7f1 fc61 	bl	80002b8 <__aeabi_dsub>
 800e9f6:	4642      	mov	r2, r8
 800e9f8:	4606      	mov	r6, r0
 800e9fa:	460f      	mov	r7, r1
 800e9fc:	464b      	mov	r3, r9
 800e9fe:	4640      	mov	r0, r8
 800ea00:	4649      	mov	r1, r9
 800ea02:	f7f1 fe11 	bl	8000628 <__aeabi_dmul>
 800ea06:	a360      	add	r3, pc, #384	@ (adr r3, 800eb88 <__ieee754_pow+0xa40>)
 800ea08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea0c:	4604      	mov	r4, r0
 800ea0e:	460d      	mov	r5, r1
 800ea10:	f7f1 fe0a 	bl	8000628 <__aeabi_dmul>
 800ea14:	a35e      	add	r3, pc, #376	@ (adr r3, 800eb90 <__ieee754_pow+0xa48>)
 800ea16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea1a:	f7f1 fc4d 	bl	80002b8 <__aeabi_dsub>
 800ea1e:	4622      	mov	r2, r4
 800ea20:	462b      	mov	r3, r5
 800ea22:	f7f1 fe01 	bl	8000628 <__aeabi_dmul>
 800ea26:	a35c      	add	r3, pc, #368	@ (adr r3, 800eb98 <__ieee754_pow+0xa50>)
 800ea28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea2c:	f7f1 fc46 	bl	80002bc <__adddf3>
 800ea30:	4622      	mov	r2, r4
 800ea32:	462b      	mov	r3, r5
 800ea34:	f7f1 fdf8 	bl	8000628 <__aeabi_dmul>
 800ea38:	a359      	add	r3, pc, #356	@ (adr r3, 800eba0 <__ieee754_pow+0xa58>)
 800ea3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea3e:	f7f1 fc3b 	bl	80002b8 <__aeabi_dsub>
 800ea42:	4622      	mov	r2, r4
 800ea44:	462b      	mov	r3, r5
 800ea46:	f7f1 fdef 	bl	8000628 <__aeabi_dmul>
 800ea4a:	a357      	add	r3, pc, #348	@ (adr r3, 800eba8 <__ieee754_pow+0xa60>)
 800ea4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea50:	f7f1 fc34 	bl	80002bc <__adddf3>
 800ea54:	4622      	mov	r2, r4
 800ea56:	462b      	mov	r3, r5
 800ea58:	f7f1 fde6 	bl	8000628 <__aeabi_dmul>
 800ea5c:	4602      	mov	r2, r0
 800ea5e:	460b      	mov	r3, r1
 800ea60:	4640      	mov	r0, r8
 800ea62:	4649      	mov	r1, r9
 800ea64:	f7f1 fc28 	bl	80002b8 <__aeabi_dsub>
 800ea68:	4604      	mov	r4, r0
 800ea6a:	460d      	mov	r5, r1
 800ea6c:	4602      	mov	r2, r0
 800ea6e:	460b      	mov	r3, r1
 800ea70:	4640      	mov	r0, r8
 800ea72:	4649      	mov	r1, r9
 800ea74:	f7f1 fdd8 	bl	8000628 <__aeabi_dmul>
 800ea78:	2200      	movs	r2, #0
 800ea7a:	e9cd 0100 	strd	r0, r1, [sp]
 800ea7e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ea82:	4620      	mov	r0, r4
 800ea84:	4629      	mov	r1, r5
 800ea86:	f7f1 fc17 	bl	80002b8 <__aeabi_dsub>
 800ea8a:	4602      	mov	r2, r0
 800ea8c:	460b      	mov	r3, r1
 800ea8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ea92:	f7f1 fef3 	bl	800087c <__aeabi_ddiv>
 800ea96:	4632      	mov	r2, r6
 800ea98:	4604      	mov	r4, r0
 800ea9a:	460d      	mov	r5, r1
 800ea9c:	463b      	mov	r3, r7
 800ea9e:	4640      	mov	r0, r8
 800eaa0:	4649      	mov	r1, r9
 800eaa2:	f7f1 fdc1 	bl	8000628 <__aeabi_dmul>
 800eaa6:	4632      	mov	r2, r6
 800eaa8:	463b      	mov	r3, r7
 800eaaa:	f7f1 fc07 	bl	80002bc <__adddf3>
 800eaae:	4602      	mov	r2, r0
 800eab0:	460b      	mov	r3, r1
 800eab2:	4620      	mov	r0, r4
 800eab4:	4629      	mov	r1, r5
 800eab6:	f7f1 fbff 	bl	80002b8 <__aeabi_dsub>
 800eaba:	4642      	mov	r2, r8
 800eabc:	464b      	mov	r3, r9
 800eabe:	f7f1 fbfb 	bl	80002b8 <__aeabi_dsub>
 800eac2:	460b      	mov	r3, r1
 800eac4:	4602      	mov	r2, r0
 800eac6:	493b      	ldr	r1, [pc, #236]	@ (800ebb4 <__ieee754_pow+0xa6c>)
 800eac8:	2000      	movs	r0, #0
 800eaca:	f7f1 fbf5 	bl	80002b8 <__aeabi_dsub>
 800eace:	ec41 0b10 	vmov	d0, r0, r1
 800ead2:	ee10 3a90 	vmov	r3, s1
 800ead6:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800eada:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800eade:	da30      	bge.n	800eb42 <__ieee754_pow+0x9fa>
 800eae0:	4650      	mov	r0, sl
 800eae2:	f000 f9f1 	bl	800eec8 <scalbn>
 800eae6:	ec51 0b10 	vmov	r0, r1, d0
 800eaea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eaee:	f7ff bbd2 	b.w	800e296 <__ieee754_pow+0x14e>
 800eaf2:	4c31      	ldr	r4, [pc, #196]	@ (800ebb8 <__ieee754_pow+0xa70>)
 800eaf4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800eaf8:	42a3      	cmp	r3, r4
 800eafa:	d91a      	bls.n	800eb32 <__ieee754_pow+0x9ea>
 800eafc:	4b2f      	ldr	r3, [pc, #188]	@ (800ebbc <__ieee754_pow+0xa74>)
 800eafe:	440b      	add	r3, r1
 800eb00:	4303      	orrs	r3, r0
 800eb02:	d009      	beq.n	800eb18 <__ieee754_pow+0x9d0>
 800eb04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eb08:	2200      	movs	r2, #0
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	f7f1 fffe 	bl	8000b0c <__aeabi_dcmplt>
 800eb10:	3800      	subs	r0, #0
 800eb12:	bf18      	it	ne
 800eb14:	2001      	movne	r0, #1
 800eb16:	e42b      	b.n	800e370 <__ieee754_pow+0x228>
 800eb18:	4642      	mov	r2, r8
 800eb1a:	464b      	mov	r3, r9
 800eb1c:	f7f1 fbcc 	bl	80002b8 <__aeabi_dsub>
 800eb20:	4632      	mov	r2, r6
 800eb22:	463b      	mov	r3, r7
 800eb24:	f7f2 f806 	bl	8000b34 <__aeabi_dcmpge>
 800eb28:	2800      	cmp	r0, #0
 800eb2a:	d1eb      	bne.n	800eb04 <__ieee754_pow+0x9bc>
 800eb2c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800ebcc <__ieee754_pow+0xa84>
 800eb30:	e6f7      	b.n	800e922 <__ieee754_pow+0x7da>
 800eb32:	469a      	mov	sl, r3
 800eb34:	4b22      	ldr	r3, [pc, #136]	@ (800ebc0 <__ieee754_pow+0xa78>)
 800eb36:	459a      	cmp	sl, r3
 800eb38:	f63f aef3 	bhi.w	800e922 <__ieee754_pow+0x7da>
 800eb3c:	f8dd a010 	ldr.w	sl, [sp, #16]
 800eb40:	e715      	b.n	800e96e <__ieee754_pow+0x826>
 800eb42:	ec51 0b10 	vmov	r0, r1, d0
 800eb46:	4619      	mov	r1, r3
 800eb48:	e7cf      	b.n	800eaea <__ieee754_pow+0x9a2>
 800eb4a:	491a      	ldr	r1, [pc, #104]	@ (800ebb4 <__ieee754_pow+0xa6c>)
 800eb4c:	2000      	movs	r0, #0
 800eb4e:	f7ff bb18 	b.w	800e182 <__ieee754_pow+0x3a>
 800eb52:	2000      	movs	r0, #0
 800eb54:	2100      	movs	r1, #0
 800eb56:	f7ff bb14 	b.w	800e182 <__ieee754_pow+0x3a>
 800eb5a:	4630      	mov	r0, r6
 800eb5c:	4639      	mov	r1, r7
 800eb5e:	f7ff bb10 	b.w	800e182 <__ieee754_pow+0x3a>
 800eb62:	460c      	mov	r4, r1
 800eb64:	f7ff bb5e 	b.w	800e224 <__ieee754_pow+0xdc>
 800eb68:	2400      	movs	r4, #0
 800eb6a:	f7ff bb49 	b.w	800e200 <__ieee754_pow+0xb8>
 800eb6e:	bf00      	nop
 800eb70:	00000000 	.word	0x00000000
 800eb74:	3fe62e43 	.word	0x3fe62e43
 800eb78:	fefa39ef 	.word	0xfefa39ef
 800eb7c:	3fe62e42 	.word	0x3fe62e42
 800eb80:	0ca86c39 	.word	0x0ca86c39
 800eb84:	be205c61 	.word	0xbe205c61
 800eb88:	72bea4d0 	.word	0x72bea4d0
 800eb8c:	3e663769 	.word	0x3e663769
 800eb90:	c5d26bf1 	.word	0xc5d26bf1
 800eb94:	3ebbbd41 	.word	0x3ebbbd41
 800eb98:	af25de2c 	.word	0xaf25de2c
 800eb9c:	3f11566a 	.word	0x3f11566a
 800eba0:	16bebd93 	.word	0x16bebd93
 800eba4:	3f66c16c 	.word	0x3f66c16c
 800eba8:	5555553e 	.word	0x5555553e
 800ebac:	3fc55555 	.word	0x3fc55555
 800ebb0:	fff00000 	.word	0xfff00000
 800ebb4:	3ff00000 	.word	0x3ff00000
 800ebb8:	4090cbff 	.word	0x4090cbff
 800ebbc:	3f6f3400 	.word	0x3f6f3400
 800ebc0:	3fe00000 	.word	0x3fe00000
 800ebc4:	652b82fe 	.word	0x652b82fe
 800ebc8:	3c971547 	.word	0x3c971547
 800ebcc:	4090cc00 	.word	0x4090cc00

0800ebd0 <fabs>:
 800ebd0:	ec51 0b10 	vmov	r0, r1, d0
 800ebd4:	4602      	mov	r2, r0
 800ebd6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ebda:	ec43 2b10 	vmov	d0, r2, r3
 800ebde:	4770      	bx	lr

0800ebe0 <__ieee754_atan2f>:
 800ebe0:	ee10 2a90 	vmov	r2, s1
 800ebe4:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800ebe8:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800ebec:	b510      	push	{r4, lr}
 800ebee:	eef0 7a40 	vmov.f32	s15, s0
 800ebf2:	d806      	bhi.n	800ec02 <__ieee754_atan2f+0x22>
 800ebf4:	ee10 0a10 	vmov	r0, s0
 800ebf8:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800ebfc:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800ec00:	d904      	bls.n	800ec0c <__ieee754_atan2f+0x2c>
 800ec02:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800ec06:	eeb0 0a67 	vmov.f32	s0, s15
 800ec0a:	bd10      	pop	{r4, pc}
 800ec0c:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800ec10:	d103      	bne.n	800ec1a <__ieee754_atan2f+0x3a>
 800ec12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec16:	f000 b883 	b.w	800ed20 <atanf>
 800ec1a:	1794      	asrs	r4, r2, #30
 800ec1c:	f004 0402 	and.w	r4, r4, #2
 800ec20:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800ec24:	b943      	cbnz	r3, 800ec38 <__ieee754_atan2f+0x58>
 800ec26:	2c02      	cmp	r4, #2
 800ec28:	d05e      	beq.n	800ece8 <__ieee754_atan2f+0x108>
 800ec2a:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800ecfc <__ieee754_atan2f+0x11c>
 800ec2e:	2c03      	cmp	r4, #3
 800ec30:	bf08      	it	eq
 800ec32:	eef0 7a47 	vmoveq.f32	s15, s14
 800ec36:	e7e6      	b.n	800ec06 <__ieee754_atan2f+0x26>
 800ec38:	b941      	cbnz	r1, 800ec4c <__ieee754_atan2f+0x6c>
 800ec3a:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800ed00 <__ieee754_atan2f+0x120>
 800ec3e:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800ed04 <__ieee754_atan2f+0x124>
 800ec42:	2800      	cmp	r0, #0
 800ec44:	bfb8      	it	lt
 800ec46:	eef0 7a47 	vmovlt.f32	s15, s14
 800ec4a:	e7dc      	b.n	800ec06 <__ieee754_atan2f+0x26>
 800ec4c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800ec50:	d110      	bne.n	800ec74 <__ieee754_atan2f+0x94>
 800ec52:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800ec56:	f104 34ff 	add.w	r4, r4, #4294967295
 800ec5a:	d107      	bne.n	800ec6c <__ieee754_atan2f+0x8c>
 800ec5c:	2c02      	cmp	r4, #2
 800ec5e:	d846      	bhi.n	800ecee <__ieee754_atan2f+0x10e>
 800ec60:	4b29      	ldr	r3, [pc, #164]	@ (800ed08 <__ieee754_atan2f+0x128>)
 800ec62:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ec66:	edd3 7a00 	vldr	s15, [r3]
 800ec6a:	e7cc      	b.n	800ec06 <__ieee754_atan2f+0x26>
 800ec6c:	2c02      	cmp	r4, #2
 800ec6e:	d841      	bhi.n	800ecf4 <__ieee754_atan2f+0x114>
 800ec70:	4b26      	ldr	r3, [pc, #152]	@ (800ed0c <__ieee754_atan2f+0x12c>)
 800ec72:	e7f6      	b.n	800ec62 <__ieee754_atan2f+0x82>
 800ec74:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800ec78:	d0df      	beq.n	800ec3a <__ieee754_atan2f+0x5a>
 800ec7a:	1a5b      	subs	r3, r3, r1
 800ec7c:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800ec80:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800ec84:	da1a      	bge.n	800ecbc <__ieee754_atan2f+0xdc>
 800ec86:	2a00      	cmp	r2, #0
 800ec88:	da01      	bge.n	800ec8e <__ieee754_atan2f+0xae>
 800ec8a:	313c      	adds	r1, #60	@ 0x3c
 800ec8c:	db19      	blt.n	800ecc2 <__ieee754_atan2f+0xe2>
 800ec8e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800ec92:	f7ff f969 	bl	800df68 <fabsf>
 800ec96:	f000 f843 	bl	800ed20 <atanf>
 800ec9a:	eef0 7a40 	vmov.f32	s15, s0
 800ec9e:	2c01      	cmp	r4, #1
 800eca0:	d012      	beq.n	800ecc8 <__ieee754_atan2f+0xe8>
 800eca2:	2c02      	cmp	r4, #2
 800eca4:	d017      	beq.n	800ecd6 <__ieee754_atan2f+0xf6>
 800eca6:	2c00      	cmp	r4, #0
 800eca8:	d0ad      	beq.n	800ec06 <__ieee754_atan2f+0x26>
 800ecaa:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800ed10 <__ieee754_atan2f+0x130>
 800ecae:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ecb2:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800ed14 <__ieee754_atan2f+0x134>
 800ecb6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ecba:	e7a4      	b.n	800ec06 <__ieee754_atan2f+0x26>
 800ecbc:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800ed00 <__ieee754_atan2f+0x120>
 800ecc0:	e7ed      	b.n	800ec9e <__ieee754_atan2f+0xbe>
 800ecc2:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800ed18 <__ieee754_atan2f+0x138>
 800ecc6:	e7ea      	b.n	800ec9e <__ieee754_atan2f+0xbe>
 800ecc8:	ee17 3a90 	vmov	r3, s15
 800eccc:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800ecd0:	ee07 3a90 	vmov	s15, r3
 800ecd4:	e797      	b.n	800ec06 <__ieee754_atan2f+0x26>
 800ecd6:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800ed10 <__ieee754_atan2f+0x130>
 800ecda:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ecde:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800ed14 <__ieee754_atan2f+0x134>
 800ece2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ece6:	e78e      	b.n	800ec06 <__ieee754_atan2f+0x26>
 800ece8:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800ed14 <__ieee754_atan2f+0x134>
 800ecec:	e78b      	b.n	800ec06 <__ieee754_atan2f+0x26>
 800ecee:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800ed1c <__ieee754_atan2f+0x13c>
 800ecf2:	e788      	b.n	800ec06 <__ieee754_atan2f+0x26>
 800ecf4:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800ed18 <__ieee754_atan2f+0x138>
 800ecf8:	e785      	b.n	800ec06 <__ieee754_atan2f+0x26>
 800ecfa:	bf00      	nop
 800ecfc:	c0490fdb 	.word	0xc0490fdb
 800ed00:	3fc90fdb 	.word	0x3fc90fdb
 800ed04:	bfc90fdb 	.word	0xbfc90fdb
 800ed08:	0800f4b4 	.word	0x0800f4b4
 800ed0c:	0800f4a8 	.word	0x0800f4a8
 800ed10:	33bbbd2e 	.word	0x33bbbd2e
 800ed14:	40490fdb 	.word	0x40490fdb
 800ed18:	00000000 	.word	0x00000000
 800ed1c:	3f490fdb 	.word	0x3f490fdb

0800ed20 <atanf>:
 800ed20:	b538      	push	{r3, r4, r5, lr}
 800ed22:	ee10 5a10 	vmov	r5, s0
 800ed26:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800ed2a:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800ed2e:	eef0 7a40 	vmov.f32	s15, s0
 800ed32:	d310      	bcc.n	800ed56 <atanf+0x36>
 800ed34:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800ed38:	d904      	bls.n	800ed44 <atanf+0x24>
 800ed3a:	ee70 7a00 	vadd.f32	s15, s0, s0
 800ed3e:	eeb0 0a67 	vmov.f32	s0, s15
 800ed42:	bd38      	pop	{r3, r4, r5, pc}
 800ed44:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800ee7c <atanf+0x15c>
 800ed48:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800ee80 <atanf+0x160>
 800ed4c:	2d00      	cmp	r5, #0
 800ed4e:	bfc8      	it	gt
 800ed50:	eef0 7a47 	vmovgt.f32	s15, s14
 800ed54:	e7f3      	b.n	800ed3e <atanf+0x1e>
 800ed56:	4b4b      	ldr	r3, [pc, #300]	@ (800ee84 <atanf+0x164>)
 800ed58:	429c      	cmp	r4, r3
 800ed5a:	d810      	bhi.n	800ed7e <atanf+0x5e>
 800ed5c:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800ed60:	d20a      	bcs.n	800ed78 <atanf+0x58>
 800ed62:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800ee88 <atanf+0x168>
 800ed66:	ee30 7a07 	vadd.f32	s14, s0, s14
 800ed6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ed6e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800ed72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed76:	dce2      	bgt.n	800ed3e <atanf+0x1e>
 800ed78:	f04f 33ff 	mov.w	r3, #4294967295
 800ed7c:	e013      	b.n	800eda6 <atanf+0x86>
 800ed7e:	f7ff f8f3 	bl	800df68 <fabsf>
 800ed82:	4b42      	ldr	r3, [pc, #264]	@ (800ee8c <atanf+0x16c>)
 800ed84:	429c      	cmp	r4, r3
 800ed86:	d84f      	bhi.n	800ee28 <atanf+0x108>
 800ed88:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800ed8c:	429c      	cmp	r4, r3
 800ed8e:	d841      	bhi.n	800ee14 <atanf+0xf4>
 800ed90:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800ed94:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800ed98:	eea0 7a27 	vfma.f32	s14, s0, s15
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800eda2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800eda6:	1c5a      	adds	r2, r3, #1
 800eda8:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800edac:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800ee90 <atanf+0x170>
 800edb0:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800ee94 <atanf+0x174>
 800edb4:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800ee98 <atanf+0x178>
 800edb8:	ee66 6a06 	vmul.f32	s13, s12, s12
 800edbc:	eee6 5a87 	vfma.f32	s11, s13, s14
 800edc0:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800ee9c <atanf+0x17c>
 800edc4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800edc8:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800eea0 <atanf+0x180>
 800edcc:	eee7 5a26 	vfma.f32	s11, s14, s13
 800edd0:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800eea4 <atanf+0x184>
 800edd4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800edd8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800eea8 <atanf+0x188>
 800eddc:	eee7 5a26 	vfma.f32	s11, s14, s13
 800ede0:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800eeac <atanf+0x18c>
 800ede4:	eea6 5a87 	vfma.f32	s10, s13, s14
 800ede8:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800eeb0 <atanf+0x190>
 800edec:	eea5 7a26 	vfma.f32	s14, s10, s13
 800edf0:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800eeb4 <atanf+0x194>
 800edf4:	eea7 5a26 	vfma.f32	s10, s14, s13
 800edf8:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800eeb8 <atanf+0x198>
 800edfc:	eea5 7a26 	vfma.f32	s14, s10, s13
 800ee00:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ee04:	eea5 7a86 	vfma.f32	s14, s11, s12
 800ee08:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ee0c:	d121      	bne.n	800ee52 <atanf+0x132>
 800ee0e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ee12:	e794      	b.n	800ed3e <atanf+0x1e>
 800ee14:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800ee18:	ee30 7a67 	vsub.f32	s14, s0, s15
 800ee1c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ee20:	2301      	movs	r3, #1
 800ee22:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ee26:	e7be      	b.n	800eda6 <atanf+0x86>
 800ee28:	4b24      	ldr	r3, [pc, #144]	@ (800eebc <atanf+0x19c>)
 800ee2a:	429c      	cmp	r4, r3
 800ee2c:	d80b      	bhi.n	800ee46 <atanf+0x126>
 800ee2e:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800ee32:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ee36:	eea0 7a27 	vfma.f32	s14, s0, s15
 800ee3a:	2302      	movs	r3, #2
 800ee3c:	ee70 6a67 	vsub.f32	s13, s0, s15
 800ee40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ee44:	e7af      	b.n	800eda6 <atanf+0x86>
 800ee46:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800ee4a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ee4e:	2303      	movs	r3, #3
 800ee50:	e7a9      	b.n	800eda6 <atanf+0x86>
 800ee52:	4a1b      	ldr	r2, [pc, #108]	@ (800eec0 <atanf+0x1a0>)
 800ee54:	491b      	ldr	r1, [pc, #108]	@ (800eec4 <atanf+0x1a4>)
 800ee56:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800ee5a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800ee5e:	edd3 6a00 	vldr	s13, [r3]
 800ee62:	ee37 7a66 	vsub.f32	s14, s14, s13
 800ee66:	2d00      	cmp	r5, #0
 800ee68:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ee6c:	edd2 7a00 	vldr	s15, [r2]
 800ee70:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ee74:	bfb8      	it	lt
 800ee76:	eef1 7a67 	vneglt.f32	s15, s15
 800ee7a:	e760      	b.n	800ed3e <atanf+0x1e>
 800ee7c:	bfc90fdb 	.word	0xbfc90fdb
 800ee80:	3fc90fdb 	.word	0x3fc90fdb
 800ee84:	3edfffff 	.word	0x3edfffff
 800ee88:	7149f2ca 	.word	0x7149f2ca
 800ee8c:	3f97ffff 	.word	0x3f97ffff
 800ee90:	3c8569d7 	.word	0x3c8569d7
 800ee94:	3d4bda59 	.word	0x3d4bda59
 800ee98:	bd6ef16b 	.word	0xbd6ef16b
 800ee9c:	3d886b35 	.word	0x3d886b35
 800eea0:	3dba2e6e 	.word	0x3dba2e6e
 800eea4:	3e124925 	.word	0x3e124925
 800eea8:	3eaaaaab 	.word	0x3eaaaaab
 800eeac:	bd15a221 	.word	0xbd15a221
 800eeb0:	bd9d8795 	.word	0xbd9d8795
 800eeb4:	bde38e38 	.word	0xbde38e38
 800eeb8:	be4ccccd 	.word	0xbe4ccccd
 800eebc:	401bffff 	.word	0x401bffff
 800eec0:	0800f4d0 	.word	0x0800f4d0
 800eec4:	0800f4c0 	.word	0x0800f4c0

0800eec8 <scalbn>:
 800eec8:	b570      	push	{r4, r5, r6, lr}
 800eeca:	ec55 4b10 	vmov	r4, r5, d0
 800eece:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800eed2:	4606      	mov	r6, r0
 800eed4:	462b      	mov	r3, r5
 800eed6:	b991      	cbnz	r1, 800eefe <scalbn+0x36>
 800eed8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800eedc:	4323      	orrs	r3, r4
 800eede:	d03d      	beq.n	800ef5c <scalbn+0x94>
 800eee0:	4b35      	ldr	r3, [pc, #212]	@ (800efb8 <scalbn+0xf0>)
 800eee2:	4620      	mov	r0, r4
 800eee4:	4629      	mov	r1, r5
 800eee6:	2200      	movs	r2, #0
 800eee8:	f7f1 fb9e 	bl	8000628 <__aeabi_dmul>
 800eeec:	4b33      	ldr	r3, [pc, #204]	@ (800efbc <scalbn+0xf4>)
 800eeee:	429e      	cmp	r6, r3
 800eef0:	4604      	mov	r4, r0
 800eef2:	460d      	mov	r5, r1
 800eef4:	da0f      	bge.n	800ef16 <scalbn+0x4e>
 800eef6:	a328      	add	r3, pc, #160	@ (adr r3, 800ef98 <scalbn+0xd0>)
 800eef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eefc:	e01e      	b.n	800ef3c <scalbn+0x74>
 800eefe:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800ef02:	4291      	cmp	r1, r2
 800ef04:	d10b      	bne.n	800ef1e <scalbn+0x56>
 800ef06:	4622      	mov	r2, r4
 800ef08:	4620      	mov	r0, r4
 800ef0a:	4629      	mov	r1, r5
 800ef0c:	f7f1 f9d6 	bl	80002bc <__adddf3>
 800ef10:	4604      	mov	r4, r0
 800ef12:	460d      	mov	r5, r1
 800ef14:	e022      	b.n	800ef5c <scalbn+0x94>
 800ef16:	460b      	mov	r3, r1
 800ef18:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800ef1c:	3936      	subs	r1, #54	@ 0x36
 800ef1e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800ef22:	4296      	cmp	r6, r2
 800ef24:	dd0d      	ble.n	800ef42 <scalbn+0x7a>
 800ef26:	2d00      	cmp	r5, #0
 800ef28:	a11d      	add	r1, pc, #116	@ (adr r1, 800efa0 <scalbn+0xd8>)
 800ef2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ef2e:	da02      	bge.n	800ef36 <scalbn+0x6e>
 800ef30:	a11d      	add	r1, pc, #116	@ (adr r1, 800efa8 <scalbn+0xe0>)
 800ef32:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ef36:	a31a      	add	r3, pc, #104	@ (adr r3, 800efa0 <scalbn+0xd8>)
 800ef38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef3c:	f7f1 fb74 	bl	8000628 <__aeabi_dmul>
 800ef40:	e7e6      	b.n	800ef10 <scalbn+0x48>
 800ef42:	1872      	adds	r2, r6, r1
 800ef44:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800ef48:	428a      	cmp	r2, r1
 800ef4a:	dcec      	bgt.n	800ef26 <scalbn+0x5e>
 800ef4c:	2a00      	cmp	r2, #0
 800ef4e:	dd08      	ble.n	800ef62 <scalbn+0x9a>
 800ef50:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ef54:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800ef58:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ef5c:	ec45 4b10 	vmov	d0, r4, r5
 800ef60:	bd70      	pop	{r4, r5, r6, pc}
 800ef62:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800ef66:	da08      	bge.n	800ef7a <scalbn+0xb2>
 800ef68:	2d00      	cmp	r5, #0
 800ef6a:	a10b      	add	r1, pc, #44	@ (adr r1, 800ef98 <scalbn+0xd0>)
 800ef6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ef70:	dac1      	bge.n	800eef6 <scalbn+0x2e>
 800ef72:	a10f      	add	r1, pc, #60	@ (adr r1, 800efb0 <scalbn+0xe8>)
 800ef74:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ef78:	e7bd      	b.n	800eef6 <scalbn+0x2e>
 800ef7a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ef7e:	3236      	adds	r2, #54	@ 0x36
 800ef80:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800ef84:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ef88:	4620      	mov	r0, r4
 800ef8a:	4b0d      	ldr	r3, [pc, #52]	@ (800efc0 <scalbn+0xf8>)
 800ef8c:	4629      	mov	r1, r5
 800ef8e:	2200      	movs	r2, #0
 800ef90:	e7d4      	b.n	800ef3c <scalbn+0x74>
 800ef92:	bf00      	nop
 800ef94:	f3af 8000 	nop.w
 800ef98:	c2f8f359 	.word	0xc2f8f359
 800ef9c:	01a56e1f 	.word	0x01a56e1f
 800efa0:	8800759c 	.word	0x8800759c
 800efa4:	7e37e43c 	.word	0x7e37e43c
 800efa8:	8800759c 	.word	0x8800759c
 800efac:	fe37e43c 	.word	0xfe37e43c
 800efb0:	c2f8f359 	.word	0xc2f8f359
 800efb4:	81a56e1f 	.word	0x81a56e1f
 800efb8:	43500000 	.word	0x43500000
 800efbc:	ffff3cb0 	.word	0xffff3cb0
 800efc0:	3c900000 	.word	0x3c900000

0800efc4 <with_errno>:
 800efc4:	b510      	push	{r4, lr}
 800efc6:	ed2d 8b02 	vpush	{d8}
 800efca:	eeb0 8a40 	vmov.f32	s16, s0
 800efce:	eef0 8a60 	vmov.f32	s17, s1
 800efd2:	4604      	mov	r4, r0
 800efd4:	f7fd f97a 	bl	800c2cc <__errno>
 800efd8:	eeb0 0a48 	vmov.f32	s0, s16
 800efdc:	eef0 0a68 	vmov.f32	s1, s17
 800efe0:	ecbd 8b02 	vpop	{d8}
 800efe4:	6004      	str	r4, [r0, #0]
 800efe6:	bd10      	pop	{r4, pc}

0800efe8 <xflow>:
 800efe8:	4603      	mov	r3, r0
 800efea:	b507      	push	{r0, r1, r2, lr}
 800efec:	ec51 0b10 	vmov	r0, r1, d0
 800eff0:	b183      	cbz	r3, 800f014 <xflow+0x2c>
 800eff2:	4602      	mov	r2, r0
 800eff4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800eff8:	e9cd 2300 	strd	r2, r3, [sp]
 800effc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f000:	f7f1 fb12 	bl	8000628 <__aeabi_dmul>
 800f004:	ec41 0b10 	vmov	d0, r0, r1
 800f008:	2022      	movs	r0, #34	@ 0x22
 800f00a:	b003      	add	sp, #12
 800f00c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f010:	f7ff bfd8 	b.w	800efc4 <with_errno>
 800f014:	4602      	mov	r2, r0
 800f016:	460b      	mov	r3, r1
 800f018:	e7ee      	b.n	800eff8 <xflow+0x10>
 800f01a:	0000      	movs	r0, r0
 800f01c:	0000      	movs	r0, r0
	...

0800f020 <__math_uflow>:
 800f020:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f028 <__math_uflow+0x8>
 800f024:	f7ff bfe0 	b.w	800efe8 <xflow>
 800f028:	00000000 	.word	0x00000000
 800f02c:	10000000 	.word	0x10000000

0800f030 <__math_oflow>:
 800f030:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f038 <__math_oflow+0x8>
 800f034:	f7ff bfd8 	b.w	800efe8 <xflow>
 800f038:	00000000 	.word	0x00000000
 800f03c:	70000000 	.word	0x70000000

0800f040 <_init>:
 800f040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f042:	bf00      	nop
 800f044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f046:	bc08      	pop	{r3}
 800f048:	469e      	mov	lr, r3
 800f04a:	4770      	bx	lr

0800f04c <_fini>:
 800f04c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f04e:	bf00      	nop
 800f050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f052:	bc08      	pop	{r3}
 800f054:	469e      	mov	lr, r3
 800f056:	4770      	bx	lr
