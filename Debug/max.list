
max.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ed90  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  0800ef60  0800ef60  0000ff60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f3e0  0800f3e0  00011240  2**0
                  CONTENTS
  4 .ARM          00000008  0800f3e0  0800f3e0  000103e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f3e8  0800f3e8  00011240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f3e8  0800f3e8  000103e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f3ec  0800f3ec  000103ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000240  20000000  0800f3f0  00011000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000243c  20000240  0800f630  00011240  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000267c  0800f630  0001167c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011240  2**0
                  CONTENTS, READONLY
 12 .debug_info   000196f9  00000000  00000000  00011270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000394a  00000000  00000000  0002a969  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001770  00000000  00000000  0002e2b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000125d  00000000  00000000  0002fa28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026f0d  00000000  00000000  00030c85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ece6  00000000  00000000  00057b92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7013  00000000  00000000  00076878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  0015d88b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007898  00000000  00000000  0015d914  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001651ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000240 	.word	0x20000240
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ef48 	.word	0x0800ef48

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000244 	.word	0x20000244
 800020c:	0800ef48 	.word	0x0800ef48

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_ldivmod>:
 8000cb8:	b97b      	cbnz	r3, 8000cda <__aeabi_ldivmod+0x22>
 8000cba:	b972      	cbnz	r2, 8000cda <__aeabi_ldivmod+0x22>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bfbe      	ittt	lt
 8000cc0:	2000      	movlt	r0, #0
 8000cc2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000cc6:	e006      	blt.n	8000cd6 <__aeabi_ldivmod+0x1e>
 8000cc8:	bf08      	it	eq
 8000cca:	2800      	cmpeq	r0, #0
 8000ccc:	bf1c      	itt	ne
 8000cce:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000cd2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd6:	f000 b9eb 	b.w	80010b0 <__aeabi_idiv0>
 8000cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	db09      	blt.n	8000cfa <__aeabi_ldivmod+0x42>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db1a      	blt.n	8000d20 <__aeabi_ldivmod+0x68>
 8000cea:	f000 f883 	bl	8000df4 <__udivmoddi4>
 8000cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf6:	b004      	add	sp, #16
 8000cf8:	4770      	bx	lr
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db1b      	blt.n	8000d3c <__aeabi_ldivmod+0x84>
 8000d04:	f000 f876 	bl	8000df4 <__udivmoddi4>
 8000d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d10:	b004      	add	sp, #16
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	4252      	negs	r2, r2
 8000d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f865 	bl	8000df4 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4240      	negs	r0, r0
 8000d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3a:	4770      	bx	lr
 8000d3c:	4252      	negs	r2, r2
 8000d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d42:	f000 f857 	bl	8000df4 <__udivmoddi4>
 8000d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d4e:	b004      	add	sp, #16
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_uldivmod>:
 8000d58:	b953      	cbnz	r3, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5a:	b94a      	cbnz	r2, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5c:	2900      	cmp	r1, #0
 8000d5e:	bf08      	it	eq
 8000d60:	2800      	cmpeq	r0, #0
 8000d62:	bf1c      	itt	ne
 8000d64:	f04f 31ff 	movne.w	r1, #4294967295
 8000d68:	f04f 30ff 	movne.w	r0, #4294967295
 8000d6c:	f000 b9a0 	b.w	80010b0 <__aeabi_idiv0>
 8000d70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d78:	f000 f83c 	bl	8000df4 <__udivmoddi4>
 8000d7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d84:	b004      	add	sp, #16
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_d2lz>:
 8000d88:	b538      	push	{r3, r4, r5, lr}
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	4604      	mov	r4, r0
 8000d90:	460d      	mov	r5, r1
 8000d92:	f7ff febb 	bl	8000b0c <__aeabi_dcmplt>
 8000d96:	b928      	cbnz	r0, 8000da4 <__aeabi_d2lz+0x1c>
 8000d98:	4620      	mov	r0, r4
 8000d9a:	4629      	mov	r1, r5
 8000d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000da0:	f000 b80a 	b.w	8000db8 <__aeabi_d2ulz>
 8000da4:	4620      	mov	r0, r4
 8000da6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000daa:	f000 f805 	bl	8000db8 <__aeabi_d2ulz>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	bd38      	pop	{r3, r4, r5, pc}
 8000db6:	bf00      	nop

08000db8 <__aeabi_d2ulz>:
 8000db8:	b5d0      	push	{r4, r6, r7, lr}
 8000dba:	4b0c      	ldr	r3, [pc, #48]	@ (8000dec <__aeabi_d2ulz+0x34>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	4606      	mov	r6, r0
 8000dc0:	460f      	mov	r7, r1
 8000dc2:	f7ff fc31 	bl	8000628 <__aeabi_dmul>
 8000dc6:	f7ff ff07 	bl	8000bd8 <__aeabi_d2uiz>
 8000dca:	4604      	mov	r4, r0
 8000dcc:	f7ff fbb2 	bl	8000534 <__aeabi_ui2d>
 8000dd0:	4b07      	ldr	r3, [pc, #28]	@ (8000df0 <__aeabi_d2ulz+0x38>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f7ff fc28 	bl	8000628 <__aeabi_dmul>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4630      	mov	r0, r6
 8000dde:	4639      	mov	r1, r7
 8000de0:	f7ff fa6a 	bl	80002b8 <__aeabi_dsub>
 8000de4:	f7ff fef8 	bl	8000bd8 <__aeabi_d2uiz>
 8000de8:	4621      	mov	r1, r4
 8000dea:	bdd0      	pop	{r4, r6, r7, pc}
 8000dec:	3df00000 	.word	0x3df00000
 8000df0:	41f00000 	.word	0x41f00000

08000df4 <__udivmoddi4>:
 8000df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df8:	9d08      	ldr	r5, [sp, #32]
 8000dfa:	460c      	mov	r4, r1
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d14e      	bne.n	8000e9e <__udivmoddi4+0xaa>
 8000e00:	4694      	mov	ip, r2
 8000e02:	458c      	cmp	ip, r1
 8000e04:	4686      	mov	lr, r0
 8000e06:	fab2 f282 	clz	r2, r2
 8000e0a:	d962      	bls.n	8000ed2 <__udivmoddi4+0xde>
 8000e0c:	b14a      	cbz	r2, 8000e22 <__udivmoddi4+0x2e>
 8000e0e:	f1c2 0320 	rsb	r3, r2, #32
 8000e12:	4091      	lsls	r1, r2
 8000e14:	fa20 f303 	lsr.w	r3, r0, r3
 8000e18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1c:	4319      	orrs	r1, r3
 8000e1e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e26:	fa1f f68c 	uxth.w	r6, ip
 8000e2a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e2e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e32:	fb07 1114 	mls	r1, r7, r4, r1
 8000e36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e3a:	fb04 f106 	mul.w	r1, r4, r6
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d90a      	bls.n	8000e58 <__udivmoddi4+0x64>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e4a:	f080 8112 	bcs.w	8001072 <__udivmoddi4+0x27e>
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	f240 810f 	bls.w	8001072 <__udivmoddi4+0x27e>
 8000e54:	3c02      	subs	r4, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1a59      	subs	r1, r3, r1
 8000e5a:	fa1f f38e 	uxth.w	r3, lr
 8000e5e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e62:	fb07 1110 	mls	r1, r7, r0, r1
 8000e66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e6a:	fb00 f606 	mul.w	r6, r0, r6
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	d90a      	bls.n	8000e88 <__udivmoddi4+0x94>
 8000e72:	eb1c 0303 	adds.w	r3, ip, r3
 8000e76:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e7a:	f080 80fc 	bcs.w	8001076 <__udivmoddi4+0x282>
 8000e7e:	429e      	cmp	r6, r3
 8000e80:	f240 80f9 	bls.w	8001076 <__udivmoddi4+0x282>
 8000e84:	4463      	add	r3, ip
 8000e86:	3802      	subs	r0, #2
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e8e:	2100      	movs	r1, #0
 8000e90:	b11d      	cbz	r5, 8000e9a <__udivmoddi4+0xa6>
 8000e92:	40d3      	lsrs	r3, r2
 8000e94:	2200      	movs	r2, #0
 8000e96:	e9c5 3200 	strd	r3, r2, [r5]
 8000e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9e:	428b      	cmp	r3, r1
 8000ea0:	d905      	bls.n	8000eae <__udivmoddi4+0xba>
 8000ea2:	b10d      	cbz	r5, 8000ea8 <__udivmoddi4+0xb4>
 8000ea4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e7f5      	b.n	8000e9a <__udivmoddi4+0xa6>
 8000eae:	fab3 f183 	clz	r1, r3
 8000eb2:	2900      	cmp	r1, #0
 8000eb4:	d146      	bne.n	8000f44 <__udivmoddi4+0x150>
 8000eb6:	42a3      	cmp	r3, r4
 8000eb8:	d302      	bcc.n	8000ec0 <__udivmoddi4+0xcc>
 8000eba:	4290      	cmp	r0, r2
 8000ebc:	f0c0 80f0 	bcc.w	80010a0 <__udivmoddi4+0x2ac>
 8000ec0:	1a86      	subs	r6, r0, r2
 8000ec2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ec6:	2001      	movs	r0, #1
 8000ec8:	2d00      	cmp	r5, #0
 8000eca:	d0e6      	beq.n	8000e9a <__udivmoddi4+0xa6>
 8000ecc:	e9c5 6300 	strd	r6, r3, [r5]
 8000ed0:	e7e3      	b.n	8000e9a <__udivmoddi4+0xa6>
 8000ed2:	2a00      	cmp	r2, #0
 8000ed4:	f040 8090 	bne.w	8000ff8 <__udivmoddi4+0x204>
 8000ed8:	eba1 040c 	sub.w	r4, r1, ip
 8000edc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee0:	fa1f f78c 	uxth.w	r7, ip
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000eea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000eee:	fb08 4416 	mls	r4, r8, r6, r4
 8000ef2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ef6:	fb07 f006 	mul.w	r0, r7, r6
 8000efa:	4298      	cmp	r0, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x11c>
 8000efe:	eb1c 0303 	adds.w	r3, ip, r3
 8000f02:	f106 34ff 	add.w	r4, r6, #4294967295
 8000f06:	d202      	bcs.n	8000f0e <__udivmoddi4+0x11a>
 8000f08:	4298      	cmp	r0, r3
 8000f0a:	f200 80cd 	bhi.w	80010a8 <__udivmoddi4+0x2b4>
 8000f0e:	4626      	mov	r6, r4
 8000f10:	1a1c      	subs	r4, r3, r0
 8000f12:	fa1f f38e 	uxth.w	r3, lr
 8000f16:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f1a:	fb08 4410 	mls	r4, r8, r0, r4
 8000f1e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f22:	fb00 f707 	mul.w	r7, r0, r7
 8000f26:	429f      	cmp	r7, r3
 8000f28:	d908      	bls.n	8000f3c <__udivmoddi4+0x148>
 8000f2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f2e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f32:	d202      	bcs.n	8000f3a <__udivmoddi4+0x146>
 8000f34:	429f      	cmp	r7, r3
 8000f36:	f200 80b0 	bhi.w	800109a <__udivmoddi4+0x2a6>
 8000f3a:	4620      	mov	r0, r4
 8000f3c:	1bdb      	subs	r3, r3, r7
 8000f3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f42:	e7a5      	b.n	8000e90 <__udivmoddi4+0x9c>
 8000f44:	f1c1 0620 	rsb	r6, r1, #32
 8000f48:	408b      	lsls	r3, r1
 8000f4a:	fa22 f706 	lsr.w	r7, r2, r6
 8000f4e:	431f      	orrs	r7, r3
 8000f50:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f54:	fa04 f301 	lsl.w	r3, r4, r1
 8000f58:	ea43 030c 	orr.w	r3, r3, ip
 8000f5c:	40f4      	lsrs	r4, r6
 8000f5e:	fa00 f801 	lsl.w	r8, r0, r1
 8000f62:	0c38      	lsrs	r0, r7, #16
 8000f64:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f68:	fbb4 fef0 	udiv	lr, r4, r0
 8000f6c:	fa1f fc87 	uxth.w	ip, r7
 8000f70:	fb00 441e 	mls	r4, r0, lr, r4
 8000f74:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f78:	fb0e f90c 	mul.w	r9, lr, ip
 8000f7c:	45a1      	cmp	r9, r4
 8000f7e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f82:	d90a      	bls.n	8000f9a <__udivmoddi4+0x1a6>
 8000f84:	193c      	adds	r4, r7, r4
 8000f86:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f8a:	f080 8084 	bcs.w	8001096 <__udivmoddi4+0x2a2>
 8000f8e:	45a1      	cmp	r9, r4
 8000f90:	f240 8081 	bls.w	8001096 <__udivmoddi4+0x2a2>
 8000f94:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f98:	443c      	add	r4, r7
 8000f9a:	eba4 0409 	sub.w	r4, r4, r9
 8000f9e:	fa1f f983 	uxth.w	r9, r3
 8000fa2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000fa6:	fb00 4413 	mls	r4, r0, r3, r4
 8000faa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fae:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fb2:	45a4      	cmp	ip, r4
 8000fb4:	d907      	bls.n	8000fc6 <__udivmoddi4+0x1d2>
 8000fb6:	193c      	adds	r4, r7, r4
 8000fb8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000fbc:	d267      	bcs.n	800108e <__udivmoddi4+0x29a>
 8000fbe:	45a4      	cmp	ip, r4
 8000fc0:	d965      	bls.n	800108e <__udivmoddi4+0x29a>
 8000fc2:	3b02      	subs	r3, #2
 8000fc4:	443c      	add	r4, r7
 8000fc6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000fca:	fba0 9302 	umull	r9, r3, r0, r2
 8000fce:	eba4 040c 	sub.w	r4, r4, ip
 8000fd2:	429c      	cmp	r4, r3
 8000fd4:	46ce      	mov	lr, r9
 8000fd6:	469c      	mov	ip, r3
 8000fd8:	d351      	bcc.n	800107e <__udivmoddi4+0x28a>
 8000fda:	d04e      	beq.n	800107a <__udivmoddi4+0x286>
 8000fdc:	b155      	cbz	r5, 8000ff4 <__udivmoddi4+0x200>
 8000fde:	ebb8 030e 	subs.w	r3, r8, lr
 8000fe2:	eb64 040c 	sbc.w	r4, r4, ip
 8000fe6:	fa04 f606 	lsl.w	r6, r4, r6
 8000fea:	40cb      	lsrs	r3, r1
 8000fec:	431e      	orrs	r6, r3
 8000fee:	40cc      	lsrs	r4, r1
 8000ff0:	e9c5 6400 	strd	r6, r4, [r5]
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	e750      	b.n	8000e9a <__udivmoddi4+0xa6>
 8000ff8:	f1c2 0320 	rsb	r3, r2, #32
 8000ffc:	fa20 f103 	lsr.w	r1, r0, r3
 8001000:	fa0c fc02 	lsl.w	ip, ip, r2
 8001004:	fa24 f303 	lsr.w	r3, r4, r3
 8001008:	4094      	lsls	r4, r2
 800100a:	430c      	orrs	r4, r1
 800100c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001010:	fa00 fe02 	lsl.w	lr, r0, r2
 8001014:	fa1f f78c 	uxth.w	r7, ip
 8001018:	fbb3 f0f8 	udiv	r0, r3, r8
 800101c:	fb08 3110 	mls	r1, r8, r0, r3
 8001020:	0c23      	lsrs	r3, r4, #16
 8001022:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001026:	fb00 f107 	mul.w	r1, r0, r7
 800102a:	4299      	cmp	r1, r3
 800102c:	d908      	bls.n	8001040 <__udivmoddi4+0x24c>
 800102e:	eb1c 0303 	adds.w	r3, ip, r3
 8001032:	f100 36ff 	add.w	r6, r0, #4294967295
 8001036:	d22c      	bcs.n	8001092 <__udivmoddi4+0x29e>
 8001038:	4299      	cmp	r1, r3
 800103a:	d92a      	bls.n	8001092 <__udivmoddi4+0x29e>
 800103c:	3802      	subs	r0, #2
 800103e:	4463      	add	r3, ip
 8001040:	1a5b      	subs	r3, r3, r1
 8001042:	b2a4      	uxth	r4, r4
 8001044:	fbb3 f1f8 	udiv	r1, r3, r8
 8001048:	fb08 3311 	mls	r3, r8, r1, r3
 800104c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001050:	fb01 f307 	mul.w	r3, r1, r7
 8001054:	42a3      	cmp	r3, r4
 8001056:	d908      	bls.n	800106a <__udivmoddi4+0x276>
 8001058:	eb1c 0404 	adds.w	r4, ip, r4
 800105c:	f101 36ff 	add.w	r6, r1, #4294967295
 8001060:	d213      	bcs.n	800108a <__udivmoddi4+0x296>
 8001062:	42a3      	cmp	r3, r4
 8001064:	d911      	bls.n	800108a <__udivmoddi4+0x296>
 8001066:	3902      	subs	r1, #2
 8001068:	4464      	add	r4, ip
 800106a:	1ae4      	subs	r4, r4, r3
 800106c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001070:	e739      	b.n	8000ee6 <__udivmoddi4+0xf2>
 8001072:	4604      	mov	r4, r0
 8001074:	e6f0      	b.n	8000e58 <__udivmoddi4+0x64>
 8001076:	4608      	mov	r0, r1
 8001078:	e706      	b.n	8000e88 <__udivmoddi4+0x94>
 800107a:	45c8      	cmp	r8, r9
 800107c:	d2ae      	bcs.n	8000fdc <__udivmoddi4+0x1e8>
 800107e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001082:	eb63 0c07 	sbc.w	ip, r3, r7
 8001086:	3801      	subs	r0, #1
 8001088:	e7a8      	b.n	8000fdc <__udivmoddi4+0x1e8>
 800108a:	4631      	mov	r1, r6
 800108c:	e7ed      	b.n	800106a <__udivmoddi4+0x276>
 800108e:	4603      	mov	r3, r0
 8001090:	e799      	b.n	8000fc6 <__udivmoddi4+0x1d2>
 8001092:	4630      	mov	r0, r6
 8001094:	e7d4      	b.n	8001040 <__udivmoddi4+0x24c>
 8001096:	46d6      	mov	lr, sl
 8001098:	e77f      	b.n	8000f9a <__udivmoddi4+0x1a6>
 800109a:	4463      	add	r3, ip
 800109c:	3802      	subs	r0, #2
 800109e:	e74d      	b.n	8000f3c <__udivmoddi4+0x148>
 80010a0:	4606      	mov	r6, r0
 80010a2:	4623      	mov	r3, r4
 80010a4:	4608      	mov	r0, r1
 80010a6:	e70f      	b.n	8000ec8 <__udivmoddi4+0xd4>
 80010a8:	3e02      	subs	r6, #2
 80010aa:	4463      	add	r3, ip
 80010ac:	e730      	b.n	8000f10 <__udivmoddi4+0x11c>
 80010ae:	bf00      	nop

080010b0 <__aeabi_idiv0>:
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop

080010b4 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	/* chip id read try count */
	uint8_t try_count = 5;
 80010bc:	2305      	movs	r3, #5
 80010be:	73bb      	strb	r3, [r7, #14]
	uint8_t chip_id = 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f001 facb 	bl	8002660 <null_ptr_check>
 80010ca:	4603      	mov	r3, r0
 80010cc:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt ==  BME280_OK) {
 80010ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d133      	bne.n	800113e <bme280_init+0x8a>
		while (try_count) {
 80010d6:	e028      	b.n	800112a <bme280_init+0x76>
			/* Read the chip-id of bme280 sensor */
			rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 80010d8:	f107 010d 	add.w	r1, r7, #13
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2201      	movs	r2, #1
 80010e0:	20d0      	movs	r0, #208	@ 0xd0
 80010e2:	f000 f832 	bl	800114a <bme280_get_regs>
 80010e6:	4603      	mov	r3, r0
 80010e8:	73fb      	strb	r3, [r7, #15]
			/* Check for chip id validity */
			if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID)) {
 80010ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d114      	bne.n	800111c <bme280_init+0x68>
 80010f2:	7b7b      	ldrb	r3, [r7, #13]
 80010f4:	2b60      	cmp	r3, #96	@ 0x60
 80010f6:	d111      	bne.n	800111c <bme280_init+0x68>
				dev->chip_id = chip_id;
 80010f8:	7b7a      	ldrb	r2, [r7, #13]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	701a      	strb	r2, [r3, #0]
				/* Reset the sensor */
				rslt = bme280_soft_reset(dev);
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f000 f978 	bl	80013f4 <bme280_soft_reset>
 8001104:	4603      	mov	r3, r0
 8001106:	73fb      	strb	r3, [r7, #15]
				if (rslt == BME280_OK) {
 8001108:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d110      	bne.n	8001132 <bme280_init+0x7e>
					/* Read the calibration data */
					rslt = get_calib_data(dev);
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f001 f919 	bl	8002348 <get_calib_data>
 8001116:	4603      	mov	r3, r0
 8001118:	73fb      	strb	r3, [r7, #15]
				}
				break;
 800111a:	e00a      	b.n	8001132 <bme280_init+0x7e>
			}
			/* Wait for 1 ms */
			dev->delay_ms(1);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	2001      	movs	r0, #1
 8001122:	4798      	blx	r3
			--try_count;
 8001124:	7bbb      	ldrb	r3, [r7, #14]
 8001126:	3b01      	subs	r3, #1
 8001128:	73bb      	strb	r3, [r7, #14]
		while (try_count) {
 800112a:	7bbb      	ldrb	r3, [r7, #14]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d1d3      	bne.n	80010d8 <bme280_init+0x24>
 8001130:	e000      	b.n	8001134 <bme280_init+0x80>
				break;
 8001132:	bf00      	nop
		}
		/* Chip id check failed */
		if (!try_count)
 8001134:	7bbb      	ldrb	r3, [r7, #14]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d101      	bne.n	800113e <bme280_init+0x8a>
			rslt = BME280_E_DEV_NOT_FOUND;
 800113a:	23fe      	movs	r3, #254	@ 0xfe
 800113c:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 800113e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001142:	4618      	mov	r0, r3
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 800114a:	b590      	push	{r4, r7, lr}
 800114c:	b087      	sub	sp, #28
 800114e:	af00      	add	r7, sp, #0
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607b      	str	r3, [r7, #4]
 8001154:	4603      	mov	r3, r0
 8001156:	73fb      	strb	r3, [r7, #15]
 8001158:	4613      	mov	r3, r2
 800115a:	81bb      	strh	r3, [r7, #12]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f001 fa7f 	bl	8002660 <null_ptr_check>
 8001162:	4603      	mov	r3, r0
 8001164:	75fb      	strb	r3, [r7, #23]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8001166:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d117      	bne.n	800119e <bme280_get_regs+0x54>
		/* If interface selected is SPI */
		if (dev->intf != BME280_I2C_INTF)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	789b      	ldrb	r3, [r3, #2]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d003      	beq.n	800117e <bme280_get_regs+0x34>
			reg_addr = reg_addr | 0x80;
 8001176:	7bfb      	ldrb	r3, [r7, #15]
 8001178:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800117c:	73fb      	strb	r3, [r7, #15]
		/* Read the data  */
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	685c      	ldr	r4, [r3, #4]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	7858      	ldrb	r0, [r3, #1]
 8001186:	89bb      	ldrh	r3, [r7, #12]
 8001188:	7bf9      	ldrb	r1, [r7, #15]
 800118a:	68ba      	ldr	r2, [r7, #8]
 800118c:	47a0      	blx	r4
 800118e:	4603      	mov	r3, r0
 8001190:	75fb      	strb	r3, [r7, #23]
		/* Check for communication error */
		if (rslt != BME280_OK)
 8001192:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <bme280_get_regs+0x54>
			rslt = BME280_E_COMM_FAIL;
 800119a:	23fc      	movs	r3, #252	@ 0xfc
 800119c:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800119e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	371c      	adds	r7, #28
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd90      	pop	{r4, r7, pc}

080011aa <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 80011aa:	b590      	push	{r4, r7, lr}
 80011ac:	b08d      	sub	sp, #52	@ 0x34
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	60f8      	str	r0, [r7, #12]
 80011b2:	60b9      	str	r1, [r7, #8]
 80011b4:	603b      	str	r3, [r7, #0]
 80011b6:	4613      	mov	r3, r2
 80011b8:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

	if (len > 10)
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	2b0a      	cmp	r3, #10
 80011be:	d901      	bls.n	80011c4 <bme280_set_regs+0x1a>
		len = 10;
 80011c0:	230a      	movs	r3, #10
 80011c2:	71fb      	strb	r3, [r7, #7]

	uint16_t temp_len;
	uint8_t reg_addr_cnt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80011c4:	6838      	ldr	r0, [r7, #0]
 80011c6:	f001 fa4b 	bl	8002660 <null_ptr_check>
 80011ca:	4603      	mov	r3, r0
 80011cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	/* Check for arguments validity */
	if ((rslt ==  BME280_OK) && (reg_addr != NULL) && (reg_data != NULL)) {
 80011d0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d156      	bne.n	8001286 <bme280_set_regs+0xdc>
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d053      	beq.n	8001286 <bme280_set_regs+0xdc>
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d050      	beq.n	8001286 <bme280_set_regs+0xdc>
		if (len != 0) {
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d049      	beq.n	800127e <bme280_set_regs+0xd4>
			temp_buff[0] = reg_data[0];
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	753b      	strb	r3, [r7, #20]
			/* If interface selected is SPI */
			if (dev->intf != BME280_I2C_INTF) {
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	789b      	ldrb	r3, [r3, #2]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d01a      	beq.n	800122e <bme280_set_regs+0x84>
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80011f8:	2300      	movs	r3, #0
 80011fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80011fe:	e011      	b.n	8001224 <bme280_set_regs+0x7a>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8001200:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001204:	68fa      	ldr	r2, [r7, #12]
 8001206:	4413      	add	r3, r2
 8001208:	781a      	ldrb	r2, [r3, #0]
 800120a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800120e:	68f9      	ldr	r1, [r7, #12]
 8001210:	440b      	add	r3, r1
 8001212:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001216:	b2d2      	uxtb	r2, r2
 8001218:	701a      	strb	r2, [r3, #0]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800121a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800121e:	3301      	adds	r3, #1
 8001220:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001224:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	429a      	cmp	r2, r3
 800122c:	d3e8      	bcc.n	8001200 <bme280_set_regs+0x56>
			}
			/* Burst write mode */
			if (len > 1) {
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d90d      	bls.n	8001250 <bme280_set_regs+0xa6>
				/* Interleave register address w.r.t data for
				burst write*/
				interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	f107 0114 	add.w	r1, r7, #20
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	68f8      	ldr	r0, [r7, #12]
 800123e:	f001 f8c8 	bl	80023d2 <interleave_reg_addr>
				temp_len = ((len * 2) - 1);
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	b29b      	uxth	r3, r3
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	b29b      	uxth	r3, r3
 800124a:	3b01      	subs	r3, #1
 800124c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800124e:	e001      	b.n	8001254 <bme280_set_regs+0xaa>
			} else {
				temp_len = len;
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	85bb      	strh	r3, [r7, #44]	@ 0x2c
			}
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	689c      	ldr	r4, [r3, #8]
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	7858      	ldrb	r0, [r3, #1]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	7819      	ldrb	r1, [r3, #0]
 8001260:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001262:	f107 0214 	add.w	r2, r7, #20
 8001266:	47a0      	blx	r4
 8001268:	4603      	mov	r3, r0
 800126a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			/* Check for communication error */
			if (rslt != BME280_OK)
 800126e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8001272:	2b00      	cmp	r3, #0
 8001274:	d00b      	beq.n	800128e <bme280_set_regs+0xe4>
				rslt = BME280_E_COMM_FAIL;
 8001276:	23fc      	movs	r3, #252	@ 0xfc
 8001278:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (len != 0) {
 800127c:	e007      	b.n	800128e <bme280_set_regs+0xe4>
		} else {
			rslt = BME280_E_INVALID_LEN;
 800127e:	23fd      	movs	r3, #253	@ 0xfd
 8001280:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (len != 0) {
 8001284:	e003      	b.n	800128e <bme280_set_regs+0xe4>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8001286:	23ff      	movs	r3, #255	@ 0xff
 8001288:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800128c:	e000      	b.n	8001290 <bme280_set_regs+0xe6>
		if (len != 0) {
 800128e:	bf00      	nop
	}


	return rslt;
 8001290:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8001294:	4618      	mov	r0, r3
 8001296:	3734      	adds	r7, #52	@ 0x34
 8001298:	46bd      	mov	sp, r7
 800129a:	bd90      	pop	{r4, r7, pc}

0800129c <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	6039      	str	r1, [r7, #0]
 80012a6:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t sensor_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80012a8:	6838      	ldr	r0, [r7, #0]
 80012aa:	f001 f9d9 	bl	8002660 <null_ptr_check>
 80012ae:	4603      	mov	r3, r0
 80012b0:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 80012b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d13f      	bne.n	800133a <bme280_set_sensor_settings+0x9e>
		rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 80012ba:	f107 030e 	add.w	r3, r7, #14
 80012be:	6839      	ldr	r1, [r7, #0]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f000 f874 	bl	80013ae <bme280_get_sensor_mode>
 80012c6:	4603      	mov	r3, r0
 80012c8:	73fb      	strb	r3, [r7, #15]
		if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 80012ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d107      	bne.n	80012e2 <bme280_set_sensor_settings+0x46>
 80012d2:	7bbb      	ldrb	r3, [r7, #14]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d004      	beq.n	80012e2 <bme280_set_sensor_settings+0x46>
			rslt = put_device_to_sleep(dev);
 80012d8:	6838      	ldr	r0, [r7, #0]
 80012da:	f000 fb36 	bl	800194a <put_device_to_sleep>
 80012de:	4603      	mov	r3, r0
 80012e0:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK) {
 80012e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d127      	bne.n	800133a <bme280_set_sensor_settings+0x9e>
			/* Check if user wants to change oversampling
			   settings */
			if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	4619      	mov	r1, r3
 80012ee:	2007      	movs	r0, #7
 80012f0:	f001 f99a 	bl	8002628 <are_settings_changed>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d009      	beq.n	800130e <bme280_set_sensor_settings+0x72>
				rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	683a      	ldr	r2, [r7, #0]
 8001304:	4618      	mov	r0, r3
 8001306:	f000 f972 	bl	80015ee <set_osr_settings>
 800130a:	4603      	mov	r3, r0
 800130c:	73fb      	strb	r3, [r7, #15]
			/* Check if user wants to change filter and/or
			   standby settings */
			if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 800130e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d111      	bne.n	800133a <bme280_set_sensor_settings+0x9e>
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	4619      	mov	r1, r3
 800131a:	2018      	movs	r0, #24
 800131c:	f001 f984 	bl	8002628 <are_settings_changed>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d009      	beq.n	800133a <bme280_set_sensor_settings+0x9e>
				rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	683a      	ldr	r2, [r7, #0]
 8001330:	4618      	mov	r0, r3
 8001332:	f000 f9f9 	bl	8001728 <set_filter_standby_settings>
 8001336:	4603      	mov	r3, r0
 8001338:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
 800133a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800133e:	4618      	mov	r0, r3
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b084      	sub	sp, #16
 800134a:	af00      	add	r7, sp, #0
 800134c:	4603      	mov	r3, r0
 800134e:	6039      	str	r1, [r7, #0]
 8001350:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t last_set_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001352:	6838      	ldr	r0, [r7, #0]
 8001354:	f001 f984 	bl	8002660 <null_ptr_check>
 8001358:	4603      	mov	r3, r0
 800135a:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 800135c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d11e      	bne.n	80013a2 <bme280_set_sensor_mode+0x5c>
		rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 8001364:	f107 030e 	add.w	r3, r7, #14
 8001368:	6839      	ldr	r1, [r7, #0]
 800136a:	4618      	mov	r0, r3
 800136c:	f000 f81f 	bl	80013ae <bme280_get_sensor_mode>
 8001370:	4603      	mov	r3, r0
 8001372:	73fb      	strb	r3, [r7, #15]
		/* If the sensor is not in sleep mode put the device to sleep
		   mode */
		if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 8001374:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d107      	bne.n	800138c <bme280_set_sensor_mode+0x46>
 800137c:	7bbb      	ldrb	r3, [r7, #14]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d004      	beq.n	800138c <bme280_set_sensor_mode+0x46>
			rslt = put_device_to_sleep(dev);
 8001382:	6838      	ldr	r0, [r7, #0]
 8001384:	f000 fae1 	bl	800194a <put_device_to_sleep>
 8001388:	4603      	mov	r3, r0
 800138a:	73fb      	strb	r3, [r7, #15]
		/* Set the power mode */
		if (rslt == BME280_OK)
 800138c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d106      	bne.n	80013a2 <bme280_set_sensor_mode+0x5c>
			rslt = write_power_mode(sensor_mode, dev);
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	6839      	ldr	r1, [r7, #0]
 8001398:	4618      	mov	r0, r3
 800139a:	f000 faa3 	bl	80018e4 <write_power_mode>
 800139e:	4603      	mov	r3, r0
 80013a0:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80013a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b084      	sub	sp, #16
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
 80013b6:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80013b8:	6838      	ldr	r0, [r7, #0]
 80013ba:	f001 f951 	bl	8002660 <null_ptr_check>
 80013be:	4603      	mov	r3, r0
 80013c0:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 80013c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d10e      	bne.n	80013e8 <bme280_get_sensor_mode+0x3a>
		/* Read the power mode register */
		rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	2201      	movs	r2, #1
 80013ce:	6879      	ldr	r1, [r7, #4]
 80013d0:	20f4      	movs	r0, #244	@ 0xf4
 80013d2:	f7ff feba 	bl	800114a <bme280_get_regs>
 80013d6:	4603      	mov	r3, r0
 80013d8:	73fb      	strb	r3, [r7, #15]
		/* Assign the power mode in the device structure */
		*sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	f003 0303 	and.w	r3, r3, #3
 80013e2:	b2da      	uxtb	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
 80013e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3710      	adds	r7, #16
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_RESET_ADDR;
 80013fc:	23e0      	movs	r3, #224	@ 0xe0
 80013fe:	73bb      	strb	r3, [r7, #14]
	/* 0xB6 is the soft reset command */
	uint8_t soft_rst_cmd = 0xB6;
 8001400:	23b6      	movs	r3, #182	@ 0xb6
 8001402:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f001 f92b 	bl	8002660 <null_ptr_check>
 800140a:	4603      	mov	r3, r0
 800140c:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 800140e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d10d      	bne.n	8001432 <bme280_soft_reset+0x3e>
		/* Write the soft reset command in the sensor */
		rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001416:	f107 010d 	add.w	r1, r7, #13
 800141a:	f107 000e 	add.w	r0, r7, #14
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2201      	movs	r2, #1
 8001422:	f7ff fec2 	bl	80011aa <bme280_set_regs>
 8001426:	4603      	mov	r3, r0
 8001428:	73fb      	strb	r3, [r7, #15]
		/* As per data sheet, startup time is 2 ms. */
		dev->delay_ms(2);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	68db      	ldr	r3, [r3, #12]
 800142e:	2002      	movs	r0, #2
 8001430:	4798      	blx	r3
	}

	return rslt;
 8001432:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001436:	4618      	mov	r0, r3
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b08a      	sub	sp, #40	@ 0x28
 8001442:	af00      	add	r7, sp, #0
 8001444:	4603      	mov	r3, r0
 8001446:	60b9      	str	r1, [r7, #8]
 8001448:	607a      	str	r2, [r7, #4]
 800144a:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	/* Array to store the pressure, temperature and humidity data read from
	the sensor */
	uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
 800144c:	2300      	movs	r3, #0
 800144e:	61fb      	str	r3, [r7, #28]
 8001450:	2300      	movs	r3, #0
 8001452:	623b      	str	r3, [r7, #32]
	struct bme280_uncomp_data uncomp_data = {0};
 8001454:	f107 0310 	add.w	r3, r7, #16
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f001 f8fd 	bl	8002660 <null_ptr_check>
 8001466:	4603      	mov	r3, r0
 8001468:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if ((rslt == BME280_OK) && (comp_data != NULL)) {
 800146c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001470:	2b00      	cmp	r3, #0
 8001472:	d124      	bne.n	80014be <bme280_get_sensor_data+0x80>
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d021      	beq.n	80014be <bme280_get_sensor_data+0x80>
		/* Read the pressure and temperature data from the sensor */
		rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 800147a:	f107 011c 	add.w	r1, r7, #28
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2208      	movs	r2, #8
 8001482:	20f7      	movs	r0, #247	@ 0xf7
 8001484:	f7ff fe61 	bl	800114a <bme280_get_regs>
 8001488:	4603      	mov	r3, r0
 800148a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		if (rslt == BME280_OK) {
 800148e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001492:	2b00      	cmp	r3, #0
 8001494:	d116      	bne.n	80014c4 <bme280_get_sensor_data+0x86>
			/* Parse the read data from the sensor */
			bme280_parse_sensor_data(reg_data, &uncomp_data);
 8001496:	f107 0210 	add.w	r2, r7, #16
 800149a:	f107 031c 	add.w	r3, r7, #28
 800149e:	4611      	mov	r1, r2
 80014a0:	4618      	mov	r0, r3
 80014a2:	f000 f815 	bl	80014d0 <bme280_parse_sensor_data>
			/* Compensate the pressure and/or temperature and/or
			   humidity data from the sensor */
			rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	3310      	adds	r3, #16
 80014aa:	f107 0110 	add.w	r1, r7, #16
 80014ae:	7bf8      	ldrb	r0, [r7, #15]
 80014b0:	68ba      	ldr	r2, [r7, #8]
 80014b2:	f000 f853 	bl	800155c <bme280_compensate_data>
 80014b6:	4603      	mov	r3, r0
 80014b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (rslt == BME280_OK) {
 80014bc:	e002      	b.n	80014c4 <bme280_get_sensor_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 80014be:	23ff      	movs	r3, #255	@ 0xff
 80014c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	return rslt;
 80014c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3728      	adds	r7, #40	@ 0x28
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b087      	sub	sp, #28
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
	uint32_t data_xlsb;
	uint32_t data_lsb;
	uint32_t data_msb;

	/* Store the parsed register values for pressure data */
	data_msb = (uint32_t)reg_data[0] << 12;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	031b      	lsls	r3, r3, #12
 80014e0:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[1] << 4;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	3301      	adds	r3, #1
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	011b      	lsls	r3, r3, #4
 80014ea:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[2] >> 4;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3302      	adds	r3, #2
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	091b      	lsrs	r3, r3, #4
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	60fb      	str	r3, [r7, #12]
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 80014f8:	697a      	ldr	r2, [r7, #20]
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	431a      	orrs	r2, r3
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	431a      	orrs	r2, r3
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	601a      	str	r2, [r3, #0]

	/* Store the parsed register values for temperature data */
	data_msb = (uint32_t)reg_data[3] << 12;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	3303      	adds	r3, #3
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	031b      	lsls	r3, r3, #12
 800150e:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[4] << 4;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3304      	adds	r3, #4
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	011b      	lsls	r3, r3, #4
 8001518:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[5] >> 4;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	3305      	adds	r3, #5
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	091b      	lsrs	r3, r3, #4
 8001522:	b2db      	uxtb	r3, r3
 8001524:	60fb      	str	r3, [r7, #12]
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8001526:	697a      	ldr	r2, [r7, #20]
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	431a      	orrs	r2, r3
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	431a      	orrs	r2, r3
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	605a      	str	r2, [r3, #4]

	/* Store the parsed register values for temperature data */
	data_lsb = (uint32_t)reg_data[6] << 8;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3306      	adds	r3, #6
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	021b      	lsls	r3, r3, #8
 800153c:	613b      	str	r3, [r7, #16]
	data_msb = (uint32_t)reg_data[7];
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	3307      	adds	r3, #7
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	617b      	str	r3, [r7, #20]
	uncomp_data->humidity = data_msb | data_lsb;
 8001546:	697a      	ldr	r2, [r7, #20]
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	431a      	orrs	r2, r3
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	609a      	str	r2, [r3, #8]
}
 8001550:	bf00      	nop
 8001552:	371c      	adds	r7, #28
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <bme280_compensate_data>:
 * temperature and/or humidity data according to the component selected
 * by the user.
 */
int8_t bme280_compensate_data(uint8_t sensor_comp, const struct bme280_uncomp_data *uncomp_data,
				     struct bme280_data *comp_data, struct bme280_calib_data *calib_data)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0
 8001562:	60b9      	str	r1, [r7, #8]
 8001564:	607a      	str	r2, [r7, #4]
 8001566:	603b      	str	r3, [r7, #0]
 8001568:	4603      	mov	r3, r0
 800156a:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_OK;
 800156c:	2300      	movs	r3, #0
 800156e:	75fb      	strb	r3, [r7, #23]

	if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL)) {
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d033      	beq.n	80015de <bme280_compensate_data+0x82>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d030      	beq.n	80015de <bme280_compensate_data+0x82>
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d02d      	beq.n	80015de <bme280_compensate_data+0x82>
		/* Initialize to zero */
		comp_data->temperature = 0;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	605a      	str	r2, [r3, #4]
		comp_data->pressure = 0;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
		comp_data->humidity = 0;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
		/* If pressure or temperature component is selected */
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
 8001594:	7bfb      	ldrb	r3, [r7, #15]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	2b00      	cmp	r3, #0
 800159c:	d006      	beq.n	80015ac <bme280_compensate_data+0x50>
			/* Compensate the temperature data */
			comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 800159e:	6839      	ldr	r1, [r7, #0]
 80015a0:	68b8      	ldr	r0, [r7, #8]
 80015a2:	f000 fa1f 	bl	80019e4 <compensate_temperature>
 80015a6:	4602      	mov	r2, r0
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	605a      	str	r2, [r3, #4]
		}
		if (sensor_comp & BME280_PRESS) {
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d006      	beq.n	80015c4 <bme280_compensate_data+0x68>
			/* Compensate the pressure data */
			comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 80015b6:	6839      	ldr	r1, [r7, #0]
 80015b8:	68b8      	ldr	r0, [r7, #8]
 80015ba:	f000 fa75 	bl	8001aa8 <compensate_pressure>
 80015be:	4602      	mov	r2, r0
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	601a      	str	r2, [r3, #0]
		}
		if (sensor_comp & BME280_HUM) {
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
 80015c6:	f003 0304 	and.w	r3, r3, #4
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d009      	beq.n	80015e2 <bme280_compensate_data+0x86>
			/* Compensate the humidity data */
			comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 80015ce:	6839      	ldr	r1, [r7, #0]
 80015d0:	68b8      	ldr	r0, [r7, #8]
 80015d2:	f000 fe0d 	bl	80021f0 <compensate_humidity>
 80015d6:	4602      	mov	r2, r0
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	609a      	str	r2, [r3, #8]
		if (sensor_comp & BME280_HUM) {
 80015dc:	e001      	b.n	80015e2 <bme280_compensate_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 80015de:	23ff      	movs	r3, #255	@ 0xff
 80015e0:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80015e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3718      	adds	r7, #24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <set_osr_settings>:
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings,
				const struct bme280_dev *dev)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b086      	sub	sp, #24
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	4603      	mov	r3, r0
 80015f6:	60b9      	str	r1, [r7, #8]
 80015f8:	607a      	str	r2, [r7, #4]
 80015fa:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 80015fc:	2301      	movs	r3, #1
 80015fe:	75fb      	strb	r3, [r7, #23]

	if (desired_settings & BME280_OSR_HUM_SEL)
 8001600:	7bfb      	ldrb	r3, [r7, #15]
 8001602:	f003 0304 	and.w	r3, r3, #4
 8001606:	2b00      	cmp	r3, #0
 8001608:	d005      	beq.n	8001616 <set_osr_settings+0x28>
		rslt = set_osr_humidity_settings(settings, dev);
 800160a:	6879      	ldr	r1, [r7, #4]
 800160c:	68b8      	ldr	r0, [r7, #8]
 800160e:	f000 f815 	bl	800163c <set_osr_humidity_settings>
 8001612:	4603      	mov	r3, r0
 8001614:	75fb      	strb	r3, [r7, #23]
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 8001616:	7bfb      	ldrb	r3, [r7, #15]
 8001618:	f003 0303 	and.w	r3, r3, #3
 800161c:	2b00      	cmp	r3, #0
 800161e:	d007      	beq.n	8001630 <set_osr_settings+0x42>
		rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 8001620:	7bfb      	ldrb	r3, [r7, #15]
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	68b9      	ldr	r1, [r7, #8]
 8001626:	4618      	mov	r0, r3
 8001628:	f000 f842 	bl	80016b0 <set_osr_press_temp_settings>
 800162c:	4603      	mov	r3, r0
 800162e:	75fb      	strb	r3, [r7, #23]

	return rslt;
 8001630:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001634:	4618      	mov	r0, r3
 8001636:	3718      	adds	r7, #24
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t ctrl_hum;
	uint8_t ctrl_meas;
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 8001646:	23f2      	movs	r3, #242	@ 0xf2
 8001648:	733b      	strb	r3, [r7, #12]

	ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	789b      	ldrb	r3, [r3, #2]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	b2db      	uxtb	r3, r3
 8001654:	73bb      	strb	r3, [r7, #14]
	/* Write the humidity control value in the register */
	rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 8001656:	f107 010e 	add.w	r1, r7, #14
 800165a:	f107 000c 	add.w	r0, r7, #12
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	2201      	movs	r2, #1
 8001662:	f7ff fda2 	bl	80011aa <bme280_set_regs>
 8001666:	4603      	mov	r3, r0
 8001668:	73fb      	strb	r3, [r7, #15]
	/* Humidity related changes will be only effective after a
	   write operation to ctrl_meas register */
	if (rslt == BME280_OK) {
 800166a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d118      	bne.n	80016a4 <set_osr_humidity_settings+0x68>
		reg_addr = BME280_CTRL_MEAS_ADDR;
 8001672:	23f4      	movs	r3, #244	@ 0xf4
 8001674:	733b      	strb	r3, [r7, #12]
		rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 8001676:	7b38      	ldrb	r0, [r7, #12]
 8001678:	f107 010d 	add.w	r1, r7, #13
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	2201      	movs	r2, #1
 8001680:	f7ff fd63 	bl	800114a <bme280_get_regs>
 8001684:	4603      	mov	r3, r0
 8001686:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK)
 8001688:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d109      	bne.n	80016a4 <set_osr_humidity_settings+0x68>
			rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 8001690:	f107 010d 	add.w	r1, r7, #13
 8001694:	f107 000c 	add.w	r0, r7, #12
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	2201      	movs	r2, #1
 800169c:	f7ff fd85 	bl	80011aa <bme280_set_regs>
 80016a0:	4603      	mov	r3, r0
 80016a2:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80016a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3710      	adds	r7, #16
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <set_osr_press_temp_settings>:
 * @brief This API sets the pressure and/or temperature oversampling settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
 80016bc:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 80016be:	23f4      	movs	r3, #244	@ 0xf4
 80016c0:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 80016c2:	7db8      	ldrb	r0, [r7, #22]
 80016c4:	f107 0115 	add.w	r1, r7, #21
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2201      	movs	r2, #1
 80016cc:	f7ff fd3d 	bl	800114a <bme280_get_regs>
 80016d0:	4603      	mov	r3, r0
 80016d2:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 80016d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d11f      	bne.n	800171c <set_osr_press_temp_settings+0x6c>
		if (desired_settings & BME280_OSR_PRESS_SEL)
 80016dc:	7bfb      	ldrb	r3, [r7, #15]
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d005      	beq.n	80016f2 <set_osr_press_temp_settings+0x42>
			fill_osr_press_settings(&reg_data, settings);
 80016e6:	f107 0315 	add.w	r3, r7, #21
 80016ea:	68b9      	ldr	r1, [r7, #8]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f000 f88e 	bl	800180e <fill_osr_press_settings>
		if (desired_settings & BME280_OSR_TEMP_SEL)
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
 80016f4:	f003 0302 	and.w	r3, r3, #2
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d005      	beq.n	8001708 <set_osr_press_temp_settings+0x58>
			fill_osr_temp_settings(&reg_data, settings);
 80016fc:	f107 0315 	add.w	r3, r7, #21
 8001700:	68b9      	ldr	r1, [r7, #8]
 8001702:	4618      	mov	r0, r3
 8001704:	f000 f8a0 	bl	8001848 <fill_osr_temp_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8001708:	f107 0115 	add.w	r1, r7, #21
 800170c:	f107 0016 	add.w	r0, r7, #22
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2201      	movs	r2, #1
 8001714:	f7ff fd49 	bl	80011aa <bme280_set_regs>
 8001718:	4603      	mov	r3, r0
 800171a:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800171c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001720:	4618      	mov	r0, r3
 8001722:	3718      	adds	r7, #24
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <set_filter_standby_settings>:
 * @brief This internal API sets the filter and/or standby duration settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
 8001734:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CONFIG_ADDR;
 8001736:	23f5      	movs	r3, #245	@ 0xf5
 8001738:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 800173a:	7db8      	ldrb	r0, [r7, #22]
 800173c:	f107 0115 	add.w	r1, r7, #21
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2201      	movs	r2, #1
 8001744:	f7ff fd01 	bl	800114a <bme280_get_regs>
 8001748:	4603      	mov	r3, r0
 800174a:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 800174c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d11f      	bne.n	8001794 <set_filter_standby_settings+0x6c>
		if (desired_settings & BME280_FILTER_SEL)
 8001754:	7bfb      	ldrb	r3, [r7, #15]
 8001756:	f003 0308 	and.w	r3, r3, #8
 800175a:	2b00      	cmp	r3, #0
 800175c:	d005      	beq.n	800176a <set_filter_standby_settings+0x42>
			fill_filter_settings(&reg_data, settings);
 800175e:	f107 0315 	add.w	r3, r7, #21
 8001762:	68b9      	ldr	r1, [r7, #8]
 8001764:	4618      	mov	r0, r3
 8001766:	f000 f81b 	bl	80017a0 <fill_filter_settings>
		if (desired_settings & BME280_STANDBY_SEL)
 800176a:	7bfb      	ldrb	r3, [r7, #15]
 800176c:	f003 0310 	and.w	r3, r3, #16
 8001770:	2b00      	cmp	r3, #0
 8001772:	d005      	beq.n	8001780 <set_filter_standby_settings+0x58>
			fill_standby_settings(&reg_data, settings);
 8001774:	f107 0315 	add.w	r3, r7, #21
 8001778:	68b9      	ldr	r1, [r7, #8]
 800177a:	4618      	mov	r0, r3
 800177c:	f000 f82d 	bl	80017da <fill_standby_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8001780:	f107 0115 	add.w	r1, r7, #21
 8001784:	f107 0016 	add.w	r0, r7, #22
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2201      	movs	r2, #1
 800178c:	f7ff fd0d 	bl	80011aa <bme280_set_regs>
 8001790:	4603      	mov	r3, r0
 8001792:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8001794:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001798:	4618      	mov	r0, r3
 800179a:	3718      	adds	r7, #24
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	b25b      	sxtb	r3, r3
 80017b0:	f023 031c 	bic.w	r3, r3, #28
 80017b4:	b25a      	sxtb	r2, r3
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	78db      	ldrb	r3, [r3, #3]
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	b25b      	sxtb	r3, r3
 80017be:	f003 031c 	and.w	r3, r3, #28
 80017c2:	b25b      	sxtb	r3, r3
 80017c4:	4313      	orrs	r3, r2
 80017c6:	b25b      	sxtb	r3, r3
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	701a      	strb	r2, [r3, #0]
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80017da:	b480      	push	{r7}
 80017dc:	b083      	sub	sp, #12
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
 80017e2:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	b25b      	sxtb	r3, r3
 80017ea:	f003 031f 	and.w	r3, r3, #31
 80017ee:	b25a      	sxtb	r2, r3
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	791b      	ldrb	r3, [r3, #4]
 80017f4:	015b      	lsls	r3, r3, #5
 80017f6:	b25b      	sxtb	r3, r3
 80017f8:	4313      	orrs	r3, r2
 80017fa:	b25b      	sxtb	r3, r3
 80017fc:	b2da      	uxtb	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	701a      	strb	r2, [r3, #0]
}
 8001802:	bf00      	nop
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800180e:	b480      	push	{r7}
 8001810:	b083      	sub	sp, #12
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
 8001816:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	b25b      	sxtb	r3, r3
 800181e:	f023 031c 	bic.w	r3, r3, #28
 8001822:	b25a      	sxtb	r2, r3
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	b25b      	sxtb	r3, r3
 800182c:	f003 031c 	and.w	r3, r3, #28
 8001830:	b25b      	sxtb	r3, r3
 8001832:	4313      	orrs	r3, r2
 8001834:	b25b      	sxtb	r3, r3
 8001836:	b2da      	uxtb	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	701a      	strb	r2, [r3, #0]
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	b25b      	sxtb	r3, r3
 8001858:	f003 031f 	and.w	r3, r3, #31
 800185c:	b25a      	sxtb	r2, r3
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	785b      	ldrb	r3, [r3, #1]
 8001862:	015b      	lsls	r3, r3, #5
 8001864:	b25b      	sxtb	r3, r3
 8001866:	4313      	orrs	r3, r2
 8001868:	b25b      	sxtb	r3, r3
 800186a:	b2da      	uxtb	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	701a      	strb	r2, [r3, #0]
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	b2da      	uxtb	r2, r3
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	709a      	strb	r2, [r3, #2]
	settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3302      	adds	r3, #2
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	109b      	asrs	r3, r3, #2
 800189c:	b2db      	uxtb	r3, r3
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	701a      	strb	r2, [r3, #0]
	settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3302      	adds	r3, #2
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	095b      	lsrs	r3, r3, #5
 80018b0:	b2da      	uxtb	r2, r3
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	705a      	strb	r2, [r3, #1]
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	3303      	adds	r3, #3
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	109b      	asrs	r3, r3, #2
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	f003 0307 	and.w	r3, r3, #7
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	70da      	strb	r2, [r3, #3]
	settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	3303      	adds	r3, #3
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	095b      	lsrs	r3, r3, #5
 80018d2:	b2da      	uxtb	r2, r3
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	711a      	strb	r2, [r3, #4]
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <write_power_mode>:
/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	6039      	str	r1, [r7, #0]
 80018ee:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 80018f0:	23f4      	movs	r3, #244	@ 0xf4
 80018f2:	73bb      	strb	r3, [r7, #14]
	/* Variable to store the value read from power mode register */
	uint8_t sensor_mode_reg_val;

	/* Read the power mode register */
	rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 80018f4:	7bb8      	ldrb	r0, [r7, #14]
 80018f6:	f107 010d 	add.w	r1, r7, #13
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	2201      	movs	r2, #1
 80018fe:	f7ff fc24 	bl	800114a <bme280_get_regs>
 8001902:	4603      	mov	r3, r0
 8001904:	73fb      	strb	r3, [r7, #15]
	/* Set the power mode */
	if (rslt == BME280_OK) {
 8001906:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d117      	bne.n	800193e <write_power_mode+0x5a>
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 800190e:	7b7b      	ldrb	r3, [r7, #13]
 8001910:	b25b      	sxtb	r3, r3
 8001912:	f023 0303 	bic.w	r3, r3, #3
 8001916:	b25a      	sxtb	r2, r3
 8001918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191c:	f003 0303 	and.w	r3, r3, #3
 8001920:	b25b      	sxtb	r3, r3
 8001922:	4313      	orrs	r3, r2
 8001924:	b25b      	sxtb	r3, r3
 8001926:	b2db      	uxtb	r3, r3
 8001928:	737b      	strb	r3, [r7, #13]
		/* Write the power mode in the register */
		rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 800192a:	f107 010d 	add.w	r1, r7, #13
 800192e:	f107 000e 	add.w	r0, r7, #14
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	2201      	movs	r2, #1
 8001936:	f7ff fc38 	bl	80011aa <bme280_set_regs>
 800193a:	4603      	mov	r3, r0
 800193c:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 800193e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001942:	4618      	mov	r0, r3
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b086      	sub	sp, #24
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_data[4];
	struct bme280_settings settings;

	rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 8001952:	f107 0110 	add.w	r1, r7, #16
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2204      	movs	r2, #4
 800195a:	20f2      	movs	r0, #242	@ 0xf2
 800195c:	f7ff fbf5 	bl	800114a <bme280_get_regs>
 8001960:	4603      	mov	r3, r0
 8001962:	75fb      	strb	r3, [r7, #23]
	if (rslt == BME280_OK) {
 8001964:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d118      	bne.n	800199e <put_device_to_sleep+0x54>
		parse_device_settings(reg_data, &settings);
 800196c:	f107 0208 	add.w	r2, r7, #8
 8001970:	f107 0310 	add.w	r3, r7, #16
 8001974:	4611      	mov	r1, r2
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff ff80 	bl	800187c <parse_device_settings>
		rslt = bme280_soft_reset(dev);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff fd39 	bl	80013f4 <bme280_soft_reset>
 8001982:	4603      	mov	r3, r0
 8001984:	75fb      	strb	r3, [r7, #23]
		if (rslt == BME280_OK)
 8001986:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d107      	bne.n	800199e <put_device_to_sleep+0x54>
			rslt = reload_device_settings(&settings, dev);
 800198e:	f107 0308 	add.w	r3, r7, #8
 8001992:	6879      	ldr	r1, [r7, #4]
 8001994:	4618      	mov	r0, r3
 8001996:	f000 f808 	bl	80019aa <reload_device_settings>
 800199a:	4603      	mov	r3, r0
 800199c:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800199e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3718      	adds	r7, #24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b084      	sub	sp, #16
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
 80019b2:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	201f      	movs	r0, #31
 80019ba:	f7ff fe18 	bl	80015ee <set_osr_settings>
 80019be:	4603      	mov	r3, r0
 80019c0:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME280_OK)
 80019c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d106      	bne.n	80019d8 <reload_device_settings+0x2e>
		rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 80019ca:	683a      	ldr	r2, [r7, #0]
 80019cc:	6879      	ldr	r1, [r7, #4]
 80019ce:	201f      	movs	r0, #31
 80019d0:	f7ff feaa 	bl	8001728 <set_filter_standby_settings>
 80019d4:	4603      	mov	r3, r0
 80019d6:	73fb      	strb	r3, [r7, #15]

	return rslt;
 80019d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in integer data type.
 */
static int32_t compensate_temperature(const struct bme280_uncomp_data *uncomp_data,
						struct bme280_calib_data *calib_data)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b089      	sub	sp, #36	@ 0x24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
	int32_t var1;
	int32_t var2;
	int32_t temperature;
	int32_t temperature_min = -4000;
 80019ee:	4b2d      	ldr	r3, [pc, #180]	@ (8001aa4 <compensate_temperature+0xc0>)
 80019f0:	61bb      	str	r3, [r7, #24]
	int32_t temperature_max = 8500;
 80019f2:	f242 1334 	movw	r3, #8500	@ 0x2134
 80019f6:	617b      	str	r3, [r7, #20]

	var1 = (int32_t)((uncomp_data->temperature / 8) - ((int32_t)calib_data->dig_T1 * 2));
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	08db      	lsrs	r3, r3, #3
 80019fe:	683a      	ldr	r2, [r7, #0]
 8001a00:	8812      	ldrh	r2, [r2, #0]
 8001a02:	0052      	lsls	r2, r2, #1
 8001a04:	1a9b      	subs	r3, r3, r2
 8001a06:	613b      	str	r3, [r7, #16]
	var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a0e:	461a      	mov	r2, r3
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	fb02 f303 	mul.w	r3, r2, r3
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	da01      	bge.n	8001a1e <compensate_temperature+0x3a>
 8001a1a:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8001a1e:	12db      	asrs	r3, r3, #11
 8001a20:	613b      	str	r3, [r7, #16]
	var2 = (int32_t)((uncomp_data->temperature / 16) - ((int32_t)calib_data->dig_T1));
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	091b      	lsrs	r3, r3, #4
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	8812      	ldrh	r2, [r2, #0]
 8001a2c:	1a9b      	subs	r3, r3, r2
 8001a2e:	60fb      	str	r3, [r7, #12]
	var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_T3)) / 16384;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	fb03 f303 	mul.w	r3, r3, r3
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	da01      	bge.n	8001a3e <compensate_temperature+0x5a>
 8001a3a:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8001a3e:	131b      	asrs	r3, r3, #12
 8001a40:	461a      	mov	r2, r3
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a48:	fb02 f303 	mul.w	r3, r2, r3
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	da02      	bge.n	8001a56 <compensate_temperature+0x72>
 8001a50:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 8001a54:	333f      	adds	r3, #63	@ 0x3f
 8001a56:	139b      	asrs	r3, r3, #14
 8001a58:	60fb      	str	r3, [r7, #12]
	calib_data->t_fine = var1 + var2;
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	441a      	add	r2, r3
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	625a      	str	r2, [r3, #36]	@ 0x24
	temperature = (calib_data->t_fine * 5 + 128) / 256;
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a68:	4613      	mov	r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4413      	add	r3, r2
 8001a6e:	3380      	adds	r3, #128	@ 0x80
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	da00      	bge.n	8001a76 <compensate_temperature+0x92>
 8001a74:	33ff      	adds	r3, #255	@ 0xff
 8001a76:	121b      	asrs	r3, r3, #8
 8001a78:	61fb      	str	r3, [r7, #28]

	if (temperature < temperature_min)
 8001a7a:	69fa      	ldr	r2, [r7, #28]
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	da02      	bge.n	8001a88 <compensate_temperature+0xa4>
		temperature = temperature_min;
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	61fb      	str	r3, [r7, #28]
 8001a86:	e005      	b.n	8001a94 <compensate_temperature+0xb0>
	else if (temperature > temperature_max)
 8001a88:	69fa      	ldr	r2, [r7, #28]
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	dd01      	ble.n	8001a94 <compensate_temperature+0xb0>
		temperature = temperature_max;
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	61fb      	str	r3, [r7, #28]

	return temperature;
 8001a94:	69fb      	ldr	r3, [r7, #28]
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3724      	adds	r7, #36	@ 0x24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	fffff060 	.word	0xfffff060

08001aa8 <compensate_pressure>:
 * return the compensated pressure data in integer data type with higher
 * accuracy.
 */
static uint32_t compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8001aa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001aac:	b0ea      	sub	sp, #424	@ 0x1a8
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	f8c7 0174 	str.w	r0, [r7, #372]	@ 0x174
 8001ab4:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int64_t var4;
	uint32_t pressure;
	uint32_t pressure_min = 3000000;
 8001ab8:	4bbf      	ldr	r3, [pc, #764]	@ (8001db8 <compensate_pressure+0x310>)
 8001aba:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
	uint32_t pressure_max = 11000000;
 8001abe:	4bbf      	ldr	r3, [pc, #764]	@ (8001dbc <compensate_pressure+0x314>)
 8001ac0:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c

	var1 = ((int64_t)calib_data->t_fine) - 128000;
 8001ac4:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aca:	17da      	asrs	r2, r3, #31
 8001acc:	4698      	mov	r8, r3
 8001ace:	4691      	mov	r9, r2
 8001ad0:	f5b8 3afa 	subs.w	sl, r8, #128000	@ 0x1f400
 8001ad4:	f149 3bff 	adc.w	fp, r9, #4294967295
 8001ad8:	e9c7 ab64 	strd	sl, fp, [r7, #400]	@ 0x190
	var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
 8001adc:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001ae0:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001ae4:	fb03 f102 	mul.w	r1, r3, r2
 8001ae8:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001aec:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001af0:	fb02 f303 	mul.w	r3, r2, r3
 8001af4:	18ca      	adds	r2, r1, r3
 8001af6:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001afa:	fba3 4503 	umull	r4, r5, r3, r3
 8001afe:	1953      	adds	r3, r2, r5
 8001b00:	461d      	mov	r5, r3
 8001b02:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001b06:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001b0a:	b21b      	sxth	r3, r3
 8001b0c:	17da      	asrs	r2, r3, #31
 8001b0e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001b12:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 8001b16:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	fb03 f205 	mul.w	r2, r3, r5
 8001b20:	460b      	mov	r3, r1
 8001b22:	fb04 f303 	mul.w	r3, r4, r3
 8001b26:	4413      	add	r3, r2
 8001b28:	4602      	mov	r2, r0
 8001b2a:	fba4 1202 	umull	r1, r2, r4, r2
 8001b2e:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 8001b32:	460a      	mov	r2, r1
 8001b34:	f8c7 2128 	str.w	r2, [r7, #296]	@ 0x128
 8001b38:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001b3c:	4413      	add	r3, r2
 8001b3e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001b42:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	@ 0x128
 8001b46:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
 8001b4a:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
	var2 = var2 + ((var1 * (int64_t)calib_data->dig_P5) * 131072);
 8001b4e:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001b52:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001b56:	b21b      	sxth	r3, r3
 8001b58:	17da      	asrs	r2, r3, #31
 8001b5a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8001b5e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001b62:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001b66:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	@ 0x118
 8001b6a:	462a      	mov	r2, r5
 8001b6c:	fb02 f203 	mul.w	r2, r2, r3
 8001b70:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001b74:	4621      	mov	r1, r4
 8001b76:	fb01 f303 	mul.w	r3, r1, r3
 8001b7a:	441a      	add	r2, r3
 8001b7c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001b80:	4621      	mov	r1, r4
 8001b82:	fba3 1301 	umull	r1, r3, r3, r1
 8001b86:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8001b90:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001b94:	18d3      	adds	r3, r2, r3
 8001b96:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8001b9a:	f04f 0000 	mov.w	r0, #0
 8001b9e:	f04f 0100 	mov.w	r1, #0
 8001ba2:	e9d7 455a 	ldrd	r4, r5, [r7, #360]	@ 0x168
 8001ba6:	462b      	mov	r3, r5
 8001ba8:	0459      	lsls	r1, r3, #17
 8001baa:	4623      	mov	r3, r4
 8001bac:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001bb0:	4623      	mov	r3, r4
 8001bb2:	0458      	lsls	r0, r3, #17
 8001bb4:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8001bb8:	1814      	adds	r4, r2, r0
 8001bba:	f8c7 40a8 	str.w	r4, [r7, #168]	@ 0xa8
 8001bbe:	414b      	adcs	r3, r1
 8001bc0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001bc4:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 8001bc8:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
	var2 = var2 + (((int64_t)calib_data->dig_P4) * 34359738368);
 8001bcc:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001bd0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001bd4:	b21b      	sxth	r3, r3
 8001bd6:	17da      	asrs	r2, r3, #31
 8001bd8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8001bdc:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 8001be0:	f04f 0000 	mov.w	r0, #0
 8001be4:	f04f 0100 	mov.w	r1, #0
 8001be8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001bec:	00d9      	lsls	r1, r3, #3
 8001bee:	2000      	movs	r0, #0
 8001bf0:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8001bf4:	1814      	adds	r4, r2, r0
 8001bf6:	f8c7 40a0 	str.w	r4, [r7, #160]	@ 0xa0
 8001bfa:	414b      	adcs	r3, r1
 8001bfc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001c00:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	@ 0xa0
 8001c04:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
	var1 = ((var1 * var1 * (int64_t)calib_data->dig_P3) / 256) + ((var1 * ((int64_t)calib_data->dig_P2) * 4096));
 8001c08:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001c0c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001c10:	fb03 f102 	mul.w	r1, r3, r2
 8001c14:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001c18:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001c1c:	fb02 f303 	mul.w	r3, r2, r3
 8001c20:	18ca      	adds	r2, r1, r3
 8001c22:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001c26:	fba3 1303 	umull	r1, r3, r3, r3
 8001c2a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8001c2e:	460b      	mov	r3, r1
 8001c30:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8001c34:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001c38:	18d3      	adds	r3, r2, r3
 8001c3a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8001c3e:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001c42:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001c46:	b21b      	sxth	r3, r3
 8001c48:	17da      	asrs	r2, r3, #31
 8001c4a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8001c4e:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8001c52:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 8001c56:	462b      	mov	r3, r5
 8001c58:	e9d7 8942 	ldrd	r8, r9, [r7, #264]	@ 0x108
 8001c5c:	4642      	mov	r2, r8
 8001c5e:	fb02 f203 	mul.w	r2, r2, r3
 8001c62:	464b      	mov	r3, r9
 8001c64:	4621      	mov	r1, r4
 8001c66:	fb01 f303 	mul.w	r3, r1, r3
 8001c6a:	4413      	add	r3, r2
 8001c6c:	4622      	mov	r2, r4
 8001c6e:	4641      	mov	r1, r8
 8001c70:	fba2 1201 	umull	r1, r2, r2, r1
 8001c74:	f8c7 215c 	str.w	r2, [r7, #348]	@ 0x15c
 8001c78:	460a      	mov	r2, r1
 8001c7a:	f8c7 2158 	str.w	r2, [r7, #344]	@ 0x158
 8001c7e:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 8001c82:	4413      	add	r3, r2
 8001c84:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8001c88:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	da09      	bge.n	8001ca4 <compensate_pressure+0x1fc>
 8001c90:	f112 01ff 	adds.w	r1, r2, #255	@ 0xff
 8001c94:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8001c98:	f143 0300 	adc.w	r3, r3, #0
 8001c9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001ca0:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8001ca4:	f04f 0000 	mov.w	r0, #0
 8001ca8:	f04f 0100 	mov.w	r1, #0
 8001cac:	0a10      	lsrs	r0, r2, #8
 8001cae:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001cb2:	1219      	asrs	r1, r3, #8
 8001cb4:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001cb8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001cbc:	b21b      	sxth	r3, r3
 8001cbe:	17da      	asrs	r2, r3, #31
 8001cc0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001cc4:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8001cc8:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001ccc:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	@ 0x100
 8001cd0:	464a      	mov	r2, r9
 8001cd2:	fb02 f203 	mul.w	r2, r2, r3
 8001cd6:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001cda:	4644      	mov	r4, r8
 8001cdc:	fb04 f303 	mul.w	r3, r4, r3
 8001ce0:	441a      	add	r2, r3
 8001ce2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001ce6:	4644      	mov	r4, r8
 8001ce8:	fba3 4304 	umull	r4, r3, r3, r4
 8001cec:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001cf0:	4623      	mov	r3, r4
 8001cf2:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001cf6:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001cfa:	18d3      	adds	r3, r2, r3
 8001cfc:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001d00:	f04f 0200 	mov.w	r2, #0
 8001d04:	f04f 0300 	mov.w	r3, #0
 8001d08:	e9d7 8954 	ldrd	r8, r9, [r7, #336]	@ 0x150
 8001d0c:	464c      	mov	r4, r9
 8001d0e:	0323      	lsls	r3, r4, #12
 8001d10:	4644      	mov	r4, r8
 8001d12:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001d16:	4644      	mov	r4, r8
 8001d18:	0322      	lsls	r2, r4, #12
 8001d1a:	1884      	adds	r4, r0, r2
 8001d1c:	f8c7 4090 	str.w	r4, [r7, #144]	@ 0x90
 8001d20:	eb41 0303 	adc.w	r3, r1, r3
 8001d24:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001d28:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	@ 0x90
 8001d2c:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
	var3 = ((int64_t)1) * 140737488355328;
 8001d30:	f04f 0200 	mov.w	r2, #0
 8001d34:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001d38:	e9c7 2360 	strd	r2, r3, [r7, #384]	@ 0x180
	var1 = (var3 + var1) * ((int64_t)calib_data->dig_P1) / 8589934592;
 8001d3c:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	@ 0x180
 8001d40:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8001d44:	1884      	adds	r4, r0, r2
 8001d46:	f8c7 40f8 	str.w	r4, [r7, #248]	@ 0xf8
 8001d4a:	eb41 0303 	adc.w	r3, r1, r3
 8001d4e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001d52:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001d56:	88db      	ldrh	r3, [r3, #6]
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8001d60:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001d64:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8001d68:	462b      	mov	r3, r5
 8001d6a:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 8001d6e:	4642      	mov	r2, r8
 8001d70:	fb02 f203 	mul.w	r2, r2, r3
 8001d74:	464b      	mov	r3, r9
 8001d76:	4621      	mov	r1, r4
 8001d78:	fb01 f303 	mul.w	r3, r1, r3
 8001d7c:	4413      	add	r3, r2
 8001d7e:	4622      	mov	r2, r4
 8001d80:	4641      	mov	r1, r8
 8001d82:	fba2 1201 	umull	r1, r2, r2, r1
 8001d86:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001d8a:	460a      	mov	r2, r1
 8001d8c:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001d90:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001d94:	4413      	add	r3, r2
 8001d96:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001d9a:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	da0e      	bge.n	8001dc0 <compensate_pressure+0x318>
 8001da2:	1e51      	subs	r1, r2, #1
 8001da4:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8001da8:	f143 0301 	adc.w	r3, r3, #1
 8001dac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001db0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001db4:	e004      	b.n	8001dc0 <compensate_pressure+0x318>
 8001db6:	bf00      	nop
 8001db8:	002dc6c0 	.word	0x002dc6c0
 8001dbc:	00a7d8c0 	.word	0x00a7d8c0
 8001dc0:	f04f 0000 	mov.w	r0, #0
 8001dc4:	f04f 0100 	mov.w	r1, #0
 8001dc8:	1058      	asrs	r0, r3, #1
 8001dca:	17d9      	asrs	r1, r3, #31
 8001dcc:	e9c7 0164 	strd	r0, r1, [r7, #400]	@ 0x190

	/* To avoid divide by zero exception */
	if (var1 != 0) {
 8001dd0:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	f000 81fc 	beq.w	80021d2 <compensate_pressure+0x72a>
		var4 = 1048576 - uncomp_data->pressure;
 8001dda:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001de4:	2200      	movs	r2, #0
 8001de6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001dea:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001dee:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	@ 0x80
 8001df2:	e9c7 345e 	strd	r3, r4, [r7, #376]	@ 0x178
		var4 = (((var4 * 2147483648) - var2) * 3125) / var1;
 8001df6:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 8001dfa:	f04f 0000 	mov.w	r0, #0
 8001dfe:	f04f 0100 	mov.w	r1, #0
 8001e02:	07d9      	lsls	r1, r3, #31
 8001e04:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8001e08:	07d0      	lsls	r0, r2, #31
 8001e0a:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8001e0e:	1a84      	subs	r4, r0, r2
 8001e10:	f8c7 40e8 	str.w	r4, [r7, #232]	@ 0xe8
 8001e14:	eb61 0303 	sbc.w	r3, r1, r3
 8001e18:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001e1c:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001e20:	4622      	mov	r2, r4
 8001e22:	462b      	mov	r3, r5
 8001e24:	1891      	adds	r1, r2, r2
 8001e26:	67b9      	str	r1, [r7, #120]	@ 0x78
 8001e28:	415b      	adcs	r3, r3
 8001e2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001e2c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8001e30:	4621      	mov	r1, r4
 8001e32:	1851      	adds	r1, r2, r1
 8001e34:	6739      	str	r1, [r7, #112]	@ 0x70
 8001e36:	4629      	mov	r1, r5
 8001e38:	414b      	adcs	r3, r1
 8001e3a:	677b      	str	r3, [r7, #116]	@ 0x74
 8001e3c:	f04f 0200 	mov.w	r2, #0
 8001e40:	f04f 0300 	mov.w	r3, #0
 8001e44:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8001e48:	4649      	mov	r1, r9
 8001e4a:	018b      	lsls	r3, r1, #6
 8001e4c:	4641      	mov	r1, r8
 8001e4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e52:	4641      	mov	r1, r8
 8001e54:	018a      	lsls	r2, r1, #6
 8001e56:	4641      	mov	r1, r8
 8001e58:	1889      	adds	r1, r1, r2
 8001e5a:	66b9      	str	r1, [r7, #104]	@ 0x68
 8001e5c:	4649      	mov	r1, r9
 8001e5e:	eb43 0101 	adc.w	r1, r3, r1
 8001e62:	66f9      	str	r1, [r7, #108]	@ 0x6c
 8001e64:	f04f 0200 	mov.w	r2, #0
 8001e68:	f04f 0300 	mov.w	r3, #0
 8001e6c:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8001e70:	4649      	mov	r1, r9
 8001e72:	008b      	lsls	r3, r1, #2
 8001e74:	4641      	mov	r1, r8
 8001e76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001e7a:	4641      	mov	r1, r8
 8001e7c:	008a      	lsls	r2, r1, #2
 8001e7e:	4610      	mov	r0, r2
 8001e80:	4619      	mov	r1, r3
 8001e82:	4603      	mov	r3, r0
 8001e84:	4622      	mov	r2, r4
 8001e86:	189b      	adds	r3, r3, r2
 8001e88:	663b      	str	r3, [r7, #96]	@ 0x60
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	462a      	mov	r2, r5
 8001e8e:	eb42 0303 	adc.w	r3, r2, r3
 8001e92:	667b      	str	r3, [r7, #100]	@ 0x64
 8001e94:	f04f 0200 	mov.w	r2, #0
 8001e98:	f04f 0300 	mov.w	r3, #0
 8001e9c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8001ea0:	4649      	mov	r1, r9
 8001ea2:	008b      	lsls	r3, r1, #2
 8001ea4:	4641      	mov	r1, r8
 8001ea6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001eaa:	4641      	mov	r1, r8
 8001eac:	008a      	lsls	r2, r1, #2
 8001eae:	4610      	mov	r0, r2
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	4622      	mov	r2, r4
 8001eb6:	189b      	adds	r3, r3, r2
 8001eb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001ebc:	462b      	mov	r3, r5
 8001ebe:	460a      	mov	r2, r1
 8001ec0:	eb42 0303 	adc.w	r3, r2, r3
 8001ec4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001ec8:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8001ecc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001ed0:	f7fe fef2 	bl	8000cb8 <__aeabi_ldivmod>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	e9c7 235e 	strd	r2, r3, [r7, #376]	@ 0x178
		var1 = (((int64_t)calib_data->dig_P9) * (var4 / 8192) * (var4 / 8192)) / 33554432;
 8001edc:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001ee0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001ee4:	b21b      	sxth	r3, r3
 8001ee6:	17da      	asrs	r2, r3, #31
 8001ee8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001eec:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001ef0:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	da08      	bge.n	8001f0a <compensate_pressure+0x462>
 8001ef8:	f641 71ff 	movw	r1, #8191	@ 0x1fff
 8001efc:	1851      	adds	r1, r2, r1
 8001efe:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001f00:	f143 0300 	adc.w	r3, r3, #0
 8001f04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001f06:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001f0a:	f04f 0000 	mov.w	r0, #0
 8001f0e:	f04f 0100 	mov.w	r1, #0
 8001f12:	0b50      	lsrs	r0, r2, #13
 8001f14:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001f18:	1359      	asrs	r1, r3, #13
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001f22:	4629      	mov	r1, r5
 8001f24:	fb02 f001 	mul.w	r0, r2, r1
 8001f28:	4621      	mov	r1, r4
 8001f2a:	fb01 f103 	mul.w	r1, r1, r3
 8001f2e:	4401      	add	r1, r0
 8001f30:	4620      	mov	r0, r4
 8001f32:	fba0 2302 	umull	r2, r3, r0, r2
 8001f36:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8001f40:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8001f44:	18cb      	adds	r3, r1, r3
 8001f46:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8001f4a:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	da08      	bge.n	8001f64 <compensate_pressure+0x4bc>
 8001f52:	f641 71ff 	movw	r1, #8191	@ 0x1fff
 8001f56:	1851      	adds	r1, r2, r1
 8001f58:	6539      	str	r1, [r7, #80]	@ 0x50
 8001f5a:	f143 0300 	adc.w	r3, r3, #0
 8001f5e:	657b      	str	r3, [r7, #84]	@ 0x54
 8001f60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001f64:	f04f 0000 	mov.w	r0, #0
 8001f68:	f04f 0100 	mov.w	r1, #0
 8001f6c:	0b50      	lsrs	r0, r2, #13
 8001f6e:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001f72:	1359      	asrs	r1, r3, #13
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	@ 0x140
 8001f7c:	4629      	mov	r1, r5
 8001f7e:	fb02 f001 	mul.w	r0, r2, r1
 8001f82:	4621      	mov	r1, r4
 8001f84:	fb01 f103 	mul.w	r1, r1, r3
 8001f88:	4401      	add	r1, r0
 8001f8a:	4620      	mov	r0, r4
 8001f8c:	fba0 2302 	umull	r2, r3, r0, r2
 8001f90:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8001f94:	4613      	mov	r3, r2
 8001f96:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8001f9a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001f9e:	18cb      	adds	r3, r1, r3
 8001fa0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8001fa4:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	da08      	bge.n	8001fbe <compensate_pressure+0x516>
 8001fac:	f06f 417e 	mvn.w	r1, #4261412864	@ 0xfe000000
 8001fb0:	1851      	adds	r1, r2, r1
 8001fb2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001fb4:	f143 0300 	adc.w	r3, r3, #0
 8001fb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001fba:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001fbe:	f04f 0000 	mov.w	r0, #0
 8001fc2:	f04f 0100 	mov.w	r1, #0
 8001fc6:	0e50      	lsrs	r0, r2, #25
 8001fc8:	ea40 10c3 	orr.w	r0, r0, r3, lsl #7
 8001fcc:	1659      	asrs	r1, r3, #25
 8001fce:	e9c7 0164 	strd	r0, r1, [r7, #400]	@ 0x190
		var2 = (((int64_t)calib_data->dig_P8) * var4) / 524288;
 8001fd2:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001fd6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001fda:	b21b      	sxth	r3, r3
 8001fdc:	17da      	asrs	r2, r3, #31
 8001fde:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001fe2:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001fe6:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8001fea:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001fee:	462a      	mov	r2, r5
 8001ff0:	fb02 f203 	mul.w	r2, r2, r3
 8001ff4:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001ff8:	4621      	mov	r1, r4
 8001ffa:	fb01 f303 	mul.w	r3, r1, r3
 8001ffe:	441a      	add	r2, r3
 8002000:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8002004:	4621      	mov	r1, r4
 8002006:	fba3 1301 	umull	r1, r3, r3, r1
 800200a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800200e:	460b      	mov	r3, r1
 8002010:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8002014:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002018:	18d3      	adds	r3, r2, r3
 800201a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800201e:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8002022:	2b00      	cmp	r3, #0
 8002024:	da07      	bge.n	8002036 <compensate_pressure+0x58e>
 8002026:	4971      	ldr	r1, [pc, #452]	@ (80021ec <compensate_pressure+0x744>)
 8002028:	1851      	adds	r1, r2, r1
 800202a:	6439      	str	r1, [r7, #64]	@ 0x40
 800202c:	f143 0300 	adc.w	r3, r3, #0
 8002030:	647b      	str	r3, [r7, #68]	@ 0x44
 8002032:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002036:	f04f 0000 	mov.w	r0, #0
 800203a:	f04f 0100 	mov.w	r1, #0
 800203e:	0cd0      	lsrs	r0, r2, #19
 8002040:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 8002044:	14d9      	asrs	r1, r3, #19
 8002046:	e9c7 0162 	strd	r0, r1, [r7, #392]	@ 0x188
		var4 = ((var4 + var1 + var2) / 256) + (((int64_t)calib_data->dig_P7) * 16);
 800204a:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	@ 0x178
 800204e:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8002052:	1884      	adds	r4, r0, r2
 8002054:	f8c7 40c8 	str.w	r4, [r7, #200]	@ 0xc8
 8002058:	eb41 0303 	adc.w	r3, r1, r3
 800205c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002060:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8002064:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8002068:	4621      	mov	r1, r4
 800206a:	1889      	adds	r1, r1, r2
 800206c:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 8002070:	4629      	mov	r1, r5
 8002072:	eb43 0101 	adc.w	r1, r3, r1
 8002076:	f8c7 10c4 	str.w	r1, [r7, #196]	@ 0xc4
 800207a:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 800207e:	2b00      	cmp	r3, #0
 8002080:	da07      	bge.n	8002092 <compensate_pressure+0x5ea>
 8002082:	f112 01ff 	adds.w	r1, r2, #255	@ 0xff
 8002086:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002088:	f143 0300 	adc.w	r3, r3, #0
 800208c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800208e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002092:	f04f 0000 	mov.w	r0, #0
 8002096:	f04f 0100 	mov.w	r1, #0
 800209a:	0a10      	lsrs	r0, r2, #8
 800209c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80020a0:	1219      	asrs	r1, r3, #8
 80020a2:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80020a6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80020aa:	b21b      	sxth	r3, r3
 80020ac:	17da      	asrs	r2, r3, #31
 80020ae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80020b2:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80020b6:	f04f 0200 	mov.w	r2, #0
 80020ba:	f04f 0300 	mov.w	r3, #0
 80020be:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80020c2:	464c      	mov	r4, r9
 80020c4:	0123      	lsls	r3, r4, #4
 80020c6:	4644      	mov	r4, r8
 80020c8:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80020cc:	4644      	mov	r4, r8
 80020ce:	0122      	lsls	r2, r4, #4
 80020d0:	1884      	adds	r4, r0, r2
 80020d2:	633c      	str	r4, [r7, #48]	@ 0x30
 80020d4:	eb41 0303 	adc.w	r3, r1, r3
 80020d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80020da:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80020de:	e9c7 345e 	strd	r3, r4, [r7, #376]	@ 0x178
		pressure = (uint32_t)(((var4 / 2) * 100) / 128);
 80020e2:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 80020e6:	0fd9      	lsrs	r1, r3, #31
 80020e8:	2000      	movs	r0, #0
 80020ea:	62b9      	str	r1, [r7, #40]	@ 0x28
 80020ec:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80020ee:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 80020f2:	4621      	mov	r1, r4
 80020f4:	1889      	adds	r1, r1, r2
 80020f6:	6239      	str	r1, [r7, #32]
 80020f8:	4629      	mov	r1, r5
 80020fa:	eb43 0101 	adc.w	r1, r3, r1
 80020fe:	6279      	str	r1, [r7, #36]	@ 0x24
 8002100:	f04f 0200 	mov.w	r2, #0
 8002104:	f04f 0300 	mov.w	r3, #0
 8002108:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800210c:	4621      	mov	r1, r4
 800210e:	084a      	lsrs	r2, r1, #1
 8002110:	4629      	mov	r1, r5
 8002112:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8002116:	4629      	mov	r1, r5
 8002118:	104b      	asrs	r3, r1, #1
 800211a:	4610      	mov	r0, r2
 800211c:	4619      	mov	r1, r3
 800211e:	4602      	mov	r2, r0
 8002120:	460b      	mov	r3, r1
 8002122:	1894      	adds	r4, r2, r2
 8002124:	61bc      	str	r4, [r7, #24]
 8002126:	415b      	adcs	r3, r3
 8002128:	61fb      	str	r3, [r7, #28]
 800212a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800212e:	1814      	adds	r4, r2, r0
 8002130:	613c      	str	r4, [r7, #16]
 8002132:	414b      	adcs	r3, r1
 8002134:	617b      	str	r3, [r7, #20]
 8002136:	f04f 0200 	mov.w	r2, #0
 800213a:	f04f 0300 	mov.w	r3, #0
 800213e:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002142:	464c      	mov	r4, r9
 8002144:	0163      	lsls	r3, r4, #5
 8002146:	4644      	mov	r4, r8
 8002148:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800214c:	4644      	mov	r4, r8
 800214e:	0162      	lsls	r2, r4, #5
 8002150:	4644      	mov	r4, r8
 8002152:	18a4      	adds	r4, r4, r2
 8002154:	60bc      	str	r4, [r7, #8]
 8002156:	464c      	mov	r4, r9
 8002158:	eb43 0404 	adc.w	r4, r3, r4
 800215c:	60fc      	str	r4, [r7, #12]
 800215e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002162:	4623      	mov	r3, r4
 8002164:	181b      	adds	r3, r3, r0
 8002166:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800216a:	462b      	mov	r3, r5
 800216c:	eb41 0303 	adc.w	r3, r1, r3
 8002170:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002174:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 8002178:	2b00      	cmp	r3, #0
 800217a:	da07      	bge.n	800218c <compensate_pressure+0x6e4>
 800217c:	f112 017f 	adds.w	r1, r2, #127	@ 0x7f
 8002180:	6039      	str	r1, [r7, #0]
 8002182:	f143 0300 	adc.w	r3, r3, #0
 8002186:	607b      	str	r3, [r7, #4]
 8002188:	e9d7 2300 	ldrd	r2, r3, [r7]
 800218c:	f04f 0000 	mov.w	r0, #0
 8002190:	f04f 0100 	mov.w	r1, #0
 8002194:	09d0      	lsrs	r0, r2, #7
 8002196:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 800219a:	11d9      	asrs	r1, r3, #7
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
 80021a0:	4613      	mov	r3, r2
 80021a2:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4

		if (pressure < pressure_min)
 80021a6:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 80021aa:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d204      	bcs.n	80021bc <compensate_pressure+0x714>
			pressure = pressure_min;
 80021b2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80021b6:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80021ba:	e00e      	b.n	80021da <compensate_pressure+0x732>
		else if (pressure > pressure_max)
 80021bc:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 80021c0:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d908      	bls.n	80021da <compensate_pressure+0x732>
			pressure = pressure_max;
 80021c8:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 80021cc:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80021d0:	e003      	b.n	80021da <compensate_pressure+0x732>
	} else {
		pressure = pressure_min;
 80021d2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80021d6:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
	}

	return pressure;
 80021da:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
}
 80021de:	4618      	mov	r0, r3
 80021e0:	f507 77d4 	add.w	r7, r7, #424	@ 0x1a8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021ea:	bf00      	nop
 80021ec:	0007ffff 	.word	0x0007ffff

080021f0 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in integer data type.
 */
static uint32_t compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b08b      	sub	sp, #44	@ 0x2c
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
	int32_t var2;
	int32_t var3;
	int32_t var4;
	int32_t var5;
	uint32_t humidity;
	uint32_t humidity_max = 102400;
 80021fa:	f44f 33c8 	mov.w	r3, #102400	@ 0x19000
 80021fe:	623b      	str	r3, [r7, #32]

	var1 = calib_data->t_fine - ((int32_t)76800);
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002204:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8002208:	61fb      	str	r3, [r7, #28]
	var2 = (int32_t)(uncomp_data->humidity * 16384);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	039b      	lsls	r3, r3, #14
 8002210:	61bb      	str	r3, [r7, #24]
	var3 = (int32_t)(((int32_t)calib_data->dig_H4) * 1048576);
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002218:	051b      	lsls	r3, r3, #20
 800221a:	617b      	str	r3, [r7, #20]
	var4 = ((int32_t)calib_data->dig_H5) * var1;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002222:	461a      	mov	r2, r3
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	fb02 f303 	mul.w	r3, r2, r3
 800222a:	613b      	str	r3, [r7, #16]
	var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	1ad2      	subs	r2, r2, r3
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800223a:	2b00      	cmp	r3, #0
 800223c:	da02      	bge.n	8002244 <compensate_humidity+0x54>
 800223e:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8002242:	337f      	adds	r3, #127	@ 0x7f
 8002244:	13db      	asrs	r3, r3, #15
 8002246:	60fb      	str	r3, [r7, #12]
	var2 = (var1 * ((int32_t)calib_data->dig_H6)) / 1024;
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	f993 3022 	ldrsb.w	r3, [r3, #34]	@ 0x22
 800224e:	461a      	mov	r2, r3
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	fb02 f303 	mul.w	r3, r2, r3
 8002256:	2b00      	cmp	r3, #0
 8002258:	da01      	bge.n	800225e <compensate_humidity+0x6e>
 800225a:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 800225e:	129b      	asrs	r3, r3, #10
 8002260:	61bb      	str	r3, [r7, #24]
	var3 = (var1 * ((int32_t)calib_data->dig_H3)) / 2048;
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	7f1b      	ldrb	r3, [r3, #28]
 8002266:	461a      	mov	r2, r3
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	fb02 f303 	mul.w	r3, r2, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	da01      	bge.n	8002276 <compensate_humidity+0x86>
 8002272:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8002276:	12db      	asrs	r3, r3, #11
 8002278:	617b      	str	r3, [r7, #20]
	var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	fb02 f303 	mul.w	r3, r2, r3
 8002286:	2b00      	cmp	r3, #0
 8002288:	da01      	bge.n	800228e <compensate_humidity+0x9e>
 800228a:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 800228e:	129b      	asrs	r3, r3, #10
 8002290:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8002294:	613b      	str	r3, [r7, #16]
	var2 = ((var4 * ((int32_t)calib_data->dig_H2)) + 8192) / 16384;
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800229c:	461a      	mov	r2, r3
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	fb02 f303 	mul.w	r3, r2, r3
 80022a4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	da02      	bge.n	80022b2 <compensate_humidity+0xc2>
 80022ac:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 80022b0:	333f      	adds	r3, #63	@ 0x3f
 80022b2:	139b      	asrs	r3, r3, #14
 80022b4:	61bb      	str	r3, [r7, #24]
	var3 = var5 * var2;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	fb02 f303 	mul.w	r3, r2, r3
 80022be:	617b      	str	r3, [r7, #20]
	var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	da02      	bge.n	80022cc <compensate_humidity+0xdc>
 80022c6:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 80022ca:	337f      	adds	r3, #127	@ 0x7f
 80022cc:	13db      	asrs	r3, r3, #15
 80022ce:	461a      	mov	r2, r3
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	da02      	bge.n	80022dc <compensate_humidity+0xec>
 80022d6:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 80022da:	337f      	adds	r3, #127	@ 0x7f
 80022dc:	13db      	asrs	r3, r3, #15
 80022de:	fb02 f303 	mul.w	r3, r2, r3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	da00      	bge.n	80022e8 <compensate_humidity+0xf8>
 80022e6:	337f      	adds	r3, #127	@ 0x7f
 80022e8:	11db      	asrs	r3, r3, #7
 80022ea:	613b      	str	r3, [r7, #16]
	var5 = var3 - ((var4 * ((int32_t)calib_data->dig_H1)) / 16);
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	7e1b      	ldrb	r3, [r3, #24]
 80022f0:	461a      	mov	r2, r3
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	fb02 f303 	mul.w	r3, r2, r3
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	da00      	bge.n	80022fe <compensate_humidity+0x10e>
 80022fc:	330f      	adds	r3, #15
 80022fe:	111b      	asrs	r3, r3, #4
 8002300:	425b      	negs	r3, r3
 8002302:	461a      	mov	r2, r3
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	4413      	add	r3, r2
 8002308:	60fb      	str	r3, [r7, #12]
	var5 = (var5 < 0 ? 0 : var5);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002310:	60fb      	str	r3, [r7, #12]
	var5 = (var5 > 419430400 ? 419430400 : var5);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8002318:	bfa8      	it	ge
 800231a:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 800231e:	60fb      	str	r3, [r7, #12]
	humidity = (uint32_t)(var5 / 4096);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2b00      	cmp	r3, #0
 8002324:	da01      	bge.n	800232a <compensate_humidity+0x13a>
 8002326:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 800232a:	131b      	asrs	r3, r3, #12
 800232c:	627b      	str	r3, [r7, #36]	@ 0x24

	if (humidity > humidity_max)
 800232e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002330:	6a3b      	ldr	r3, [r7, #32]
 8002332:	429a      	cmp	r2, r3
 8002334:	d901      	bls.n	800233a <compensate_humidity+0x14a>
		humidity = humidity_max;
 8002336:	6a3b      	ldr	r3, [r7, #32]
 8002338:	627b      	str	r3, [r7, #36]	@ 0x24

	return humidity;
 800233a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800233c:	4618      	mov	r0, r3
 800233e:	372c      	adds	r7, #44	@ 0x2c
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b08a      	sub	sp, #40	@ 0x28
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 8002350:	2388      	movs	r3, #136	@ 0x88
 8002352:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	/* Array to store calibration data */
	uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = {0};
 8002356:	2300      	movs	r3, #0
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	f107 0310 	add.w	r3, r7, #16
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]
 8002362:	605a      	str	r2, [r3, #4]
 8002364:	609a      	str	r2, [r3, #8]
 8002366:	60da      	str	r2, [r3, #12]
 8002368:	611a      	str	r2, [r3, #16]
 800236a:	829a      	strh	r2, [r3, #20]

	/* Read the calibration data from the sensor */
	rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 800236c:	f107 010c 	add.w	r1, r7, #12
 8002370:	f897 0026 	ldrb.w	r0, [r7, #38]	@ 0x26
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	221a      	movs	r2, #26
 8002378:	f7fe fee7 	bl	800114a <bme280_get_regs>
 800237c:	4603      	mov	r3, r0
 800237e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (rslt == BME280_OK) {
 8002382:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002386:	2b00      	cmp	r3, #0
 8002388:	d11d      	bne.n	80023c6 <get_calib_data+0x7e>
		/* Parse temperature and pressure calibration data and store
		   it in device structure */
		parse_temp_press_calib_data(calib_data, dev);
 800238a:	f107 030c 	add.w	r3, r7, #12
 800238e:	6879      	ldr	r1, [r7, #4]
 8002390:	4618      	mov	r0, r3
 8002392:	f000 f84a 	bl	800242a <parse_temp_press_calib_data>

		reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 8002396:	23e1      	movs	r3, #225	@ 0xe1
 8002398:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		/* Read the humidity calibration data from the sensor */
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 800239c:	f107 010c 	add.w	r1, r7, #12
 80023a0:	f897 0026 	ldrb.w	r0, [r7, #38]	@ 0x26
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2207      	movs	r2, #7
 80023a8:	f7fe fecf 	bl	800114a <bme280_get_regs>
 80023ac:	4603      	mov	r3, r0
 80023ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (rslt == BME280_OK) {
 80023b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d105      	bne.n	80023c6 <get_calib_data+0x7e>
			/* Parse humidity calibration data and store it in
			   device structure */
			parse_humidity_calib_data(calib_data, dev);
 80023ba:	f107 030c 	add.w	r3, r7, #12
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f000 f8e2 	bl	800258a <parse_humidity_calib_data>
		}
	}

	return rslt;
 80023c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3728      	adds	r7, #40	@ 0x28
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 80023d2:	b480      	push	{r7}
 80023d4:	b087      	sub	sp, #28
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	60f8      	str	r0, [r7, #12]
 80023da:	60b9      	str	r1, [r7, #8]
 80023dc:	607a      	str	r2, [r7, #4]
 80023de:	70fb      	strb	r3, [r7, #3]
	uint8_t index;

	for (index = 1; index < len; index++) {
 80023e0:	2301      	movs	r3, #1
 80023e2:	75fb      	strb	r3, [r7, #23]
 80023e4:	e016      	b.n	8002414 <interleave_reg_addr+0x42>
		temp_buff[(index * 2) - 1] = reg_addr[index];
 80023e6:	7dfb      	ldrb	r3, [r7, #23]
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	441a      	add	r2, r3
 80023ec:	7dfb      	ldrb	r3, [r7, #23]
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	3b01      	subs	r3, #1
 80023f2:	68b9      	ldr	r1, [r7, #8]
 80023f4:	440b      	add	r3, r1
 80023f6:	7812      	ldrb	r2, [r2, #0]
 80023f8:	701a      	strb	r2, [r3, #0]
		temp_buff[index * 2] = reg_data[index];
 80023fa:	7dfb      	ldrb	r3, [r7, #23]
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	441a      	add	r2, r3
 8002400:	7dfb      	ldrb	r3, [r7, #23]
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	4619      	mov	r1, r3
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	440b      	add	r3, r1
 800240a:	7812      	ldrb	r2, [r2, #0]
 800240c:	701a      	strb	r2, [r3, #0]
	for (index = 1; index < len; index++) {
 800240e:	7dfb      	ldrb	r3, [r7, #23]
 8002410:	3301      	adds	r3, #1
 8002412:	75fb      	strb	r3, [r7, #23]
 8002414:	7dfa      	ldrb	r2, [r7, #23]
 8002416:	78fb      	ldrb	r3, [r7, #3]
 8002418:	429a      	cmp	r2, r3
 800241a:	d3e4      	bcc.n	80023e6 <interleave_reg_addr+0x14>
	}
}
 800241c:	bf00      	nop
 800241e:	bf00      	nop
 8002420:	371c      	adds	r7, #28
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr

0800242a <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 800242a:	b480      	push	{r7}
 800242c:	b085      	sub	sp, #20
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
 8002432:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	3310      	adds	r3, #16
 8002438:	60fb      	str	r3, [r7, #12]

	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	3301      	adds	r3, #1
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	021b      	lsls	r3, r3, #8
 8002442:	b21a      	sxth	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	b21b      	sxth	r3, r3
 800244a:	4313      	orrs	r3, r2
 800244c:	b21b      	sxth	r3, r3
 800244e:	b29a      	uxth	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	801a      	strh	r2, [r3, #0]
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	3303      	adds	r3, #3
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	021b      	lsls	r3, r3, #8
 800245c:	b21a      	sxth	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	3302      	adds	r3, #2
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	b21b      	sxth	r3, r3
 8002466:	4313      	orrs	r3, r2
 8002468:	b21a      	sxth	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	805a      	strh	r2, [r3, #2]
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	3305      	adds	r3, #5
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	021b      	lsls	r3, r3, #8
 8002476:	b21a      	sxth	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3304      	adds	r3, #4
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	b21b      	sxth	r3, r3
 8002480:	4313      	orrs	r3, r2
 8002482:	b21a      	sxth	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	809a      	strh	r2, [r3, #4]
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3307      	adds	r3, #7
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	021b      	lsls	r3, r3, #8
 8002490:	b21a      	sxth	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	3306      	adds	r3, #6
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	b21b      	sxth	r3, r3
 800249a:	4313      	orrs	r3, r2
 800249c:	b21b      	sxth	r3, r3
 800249e:	b29a      	uxth	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	80da      	strh	r2, [r3, #6]
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3309      	adds	r3, #9
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	021b      	lsls	r3, r3, #8
 80024ac:	b21a      	sxth	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	3308      	adds	r3, #8
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	b21b      	sxth	r3, r3
 80024b6:	4313      	orrs	r3, r2
 80024b8:	b21a      	sxth	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	811a      	strh	r2, [r3, #8]
	calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	330b      	adds	r3, #11
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	021b      	lsls	r3, r3, #8
 80024c6:	b21a      	sxth	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	330a      	adds	r3, #10
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	b21b      	sxth	r3, r3
 80024d0:	4313      	orrs	r3, r2
 80024d2:	b21a      	sxth	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	815a      	strh	r2, [r3, #10]
	calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	330d      	adds	r3, #13
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	021b      	lsls	r3, r3, #8
 80024e0:	b21a      	sxth	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	330c      	adds	r3, #12
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	b21b      	sxth	r3, r3
 80024ea:	4313      	orrs	r3, r2
 80024ec:	b21a      	sxth	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	819a      	strh	r2, [r3, #12]
	calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	330f      	adds	r3, #15
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	021b      	lsls	r3, r3, #8
 80024fa:	b21a      	sxth	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	330e      	adds	r3, #14
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	b21b      	sxth	r3, r3
 8002504:	4313      	orrs	r3, r2
 8002506:	b21a      	sxth	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	81da      	strh	r2, [r3, #14]
	calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3311      	adds	r3, #17
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	021b      	lsls	r3, r3, #8
 8002514:	b21a      	sxth	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	3310      	adds	r3, #16
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	b21b      	sxth	r3, r3
 800251e:	4313      	orrs	r3, r2
 8002520:	b21a      	sxth	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	821a      	strh	r2, [r3, #16]
	calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	3313      	adds	r3, #19
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	021b      	lsls	r3, r3, #8
 800252e:	b21a      	sxth	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	3312      	adds	r3, #18
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	b21b      	sxth	r3, r3
 8002538:	4313      	orrs	r3, r2
 800253a:	b21a      	sxth	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	825a      	strh	r2, [r3, #18]
	calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	3315      	adds	r3, #21
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	021b      	lsls	r3, r3, #8
 8002548:	b21a      	sxth	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	3314      	adds	r3, #20
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	b21b      	sxth	r3, r3
 8002552:	4313      	orrs	r3, r2
 8002554:	b21a      	sxth	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	829a      	strh	r2, [r3, #20]
	calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	3317      	adds	r3, #23
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	021b      	lsls	r3, r3, #8
 8002562:	b21a      	sxth	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	3316      	adds	r3, #22
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	b21b      	sxth	r3, r3
 800256c:	4313      	orrs	r3, r2
 800256e:	b21a      	sxth	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	82da      	strh	r2, [r3, #22]
	calib_data->dig_H1 = reg_data[25];
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	3319      	adds	r3, #25
 8002578:	781a      	ldrb	r2, [r3, #0]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	761a      	strb	r2, [r3, #24]

}
 800257e:	bf00      	nop
 8002580:	3714      	adds	r7, #20
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr

0800258a <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 800258a:	b480      	push	{r7}
 800258c:	b087      	sub	sp, #28
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
 8002592:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	3310      	adds	r3, #16
 8002598:	617b      	str	r3, [r7, #20]
	int16_t dig_H4_lsb;
	int16_t dig_H4_msb;
	int16_t dig_H5_lsb;
	int16_t dig_H5_msb;

	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	3301      	adds	r3, #1
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	021b      	lsls	r3, r3, #8
 80025a2:	b21a      	sxth	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	b21b      	sxth	r3, r3
 80025aa:	4313      	orrs	r3, r2
 80025ac:	b21a      	sxth	r2, r3
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	835a      	strh	r2, [r3, #26]
	calib_data->dig_H3 = reg_data[2];
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	3302      	adds	r3, #2
 80025b6:	781a      	ldrb	r2, [r3, #0]
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	771a      	strb	r2, [r3, #28]

	dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	3303      	adds	r3, #3
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	b25b      	sxtb	r3, r3
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	011b      	lsls	r3, r3, #4
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	827b      	strh	r3, [r7, #18]
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	3304      	adds	r3, #4
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	b21b      	sxth	r3, r3
 80025d4:	f003 030f 	and.w	r3, r3, #15
 80025d8:	823b      	strh	r3, [r7, #16]
	calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 80025da:	8a7a      	ldrh	r2, [r7, #18]
 80025dc:	8a3b      	ldrh	r3, [r7, #16]
 80025de:	4313      	orrs	r3, r2
 80025e0:	b21a      	sxth	r2, r3
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	83da      	strh	r2, [r3, #30]

	dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	3305      	adds	r3, #5
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	b25b      	sxtb	r3, r3
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	011b      	lsls	r3, r3, #4
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	81fb      	strh	r3, [r7, #14]
	dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	3304      	adds	r3, #4
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	091b      	lsrs	r3, r3, #4
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	81bb      	strh	r3, [r7, #12]
	calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 8002602:	89fa      	ldrh	r2, [r7, #14]
 8002604:	89bb      	ldrh	r3, [r7, #12]
 8002606:	4313      	orrs	r3, r2
 8002608:	b21a      	sxth	r2, r3
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	841a      	strh	r2, [r3, #32]
	calib_data->dig_H6 = (int8_t)reg_data[6];
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	3306      	adds	r3, #6
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	b25a      	sxtb	r2, r3
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 800261c:	bf00      	nop
 800261e:	371c      	adds	r7, #28
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	4603      	mov	r3, r0
 8002630:	460a      	mov	r2, r1
 8002632:	71fb      	strb	r3, [r7, #7]
 8002634:	4613      	mov	r3, r2
 8002636:	71bb      	strb	r3, [r7, #6]
	uint8_t settings_changed = FALSE;
 8002638:	2300      	movs	r3, #0
 800263a:	73fb      	strb	r3, [r7, #15]

	if (sub_settings & desired_settings) {
 800263c:	79fa      	ldrb	r2, [r7, #7]
 800263e:	79bb      	ldrb	r3, [r7, #6]
 8002640:	4013      	ands	r3, r2
 8002642:	b2db      	uxtb	r3, r3
 8002644:	2b00      	cmp	r3, #0
 8002646:	d002      	beq.n	800264e <are_settings_changed+0x26>
		/* User wants to modify this particular settings */
		settings_changed = TRUE;
 8002648:	2301      	movs	r3, #1
 800264a:	73fb      	strb	r3, [r7, #15]
 800264c:	e001      	b.n	8002652 <are_settings_changed+0x2a>
	} else {
		/* User don't want to modify this particular settings */
		settings_changed = FALSE;
 800264e:	2300      	movs	r3, #0
 8002650:	73fb      	strb	r3, [r7, #15]
	}

	return settings_changed;
 8002652:	7bfb      	ldrb	r3, [r7, #15]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3714      	adds	r7, #20
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00b      	beq.n	8002686 <null_ptr_check+0x26>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d007      	beq.n	8002686 <null_ptr_check+0x26>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d003      	beq.n	8002686 <null_ptr_check+0x26>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d102      	bne.n	800268c <null_ptr_check+0x2c>
		/* Device structure pointer is not valid */
		rslt = BME280_E_NULL_PTR;
 8002686:	23ff      	movs	r3, #255	@ 0xff
 8002688:	73fb      	strb	r3, [r7, #15]
 800268a:	e001      	b.n	8002690 <null_ptr_check+0x30>
	} else {
		/* Device structure is fine */
		rslt = BME280_OK;
 800268c:	2300      	movs	r3, #0
 800268e:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8002690:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002694:	4618      	mov	r0, r3
 8002696:	3714      	adds	r7, #20
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <FIRFilter_Init>:
static float MAF_IMPULSE_RESPONSE [4] = {0.25f , 0.25f , 0.25f , 0.25f};



void FIRFilter_Init(FIRFilter *fir)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
	for (uint8_t n = 0; n< FIR_FILTER_LENGHT; n++)
 80026a8:	2300      	movs	r3, #0
 80026aa:	73fb      	strb	r3, [r7, #15]
 80026ac:	e009      	b.n	80026c2 <FIRFilter_Init+0x22>
	{
		fir->buf[n] =0.0f; // filtre buffer temizleme
 80026ae:	7bfb      	ldrb	r3, [r7, #15]
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	4413      	add	r3, r2
 80026b6:	f04f 0200 	mov.w	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
	for (uint8_t n = 0; n< FIR_FILTER_LENGHT; n++)
 80026bc:	7bfb      	ldrb	r3, [r7, #15]
 80026be:	3301      	adds	r3, #1
 80026c0:	73fb      	strb	r3, [r7, #15]
 80026c2:	7bfb      	ldrb	r3, [r7, #15]
 80026c4:	2b0f      	cmp	r3, #15
 80026c6:	d9f2      	bls.n	80026ae <FIRFilter_Init+0xe>

	}

	fir->bufIndex =0; // index reset
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	fir->out = 0; // clear output
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f04f 0200 	mov.w	r2, #0
 80026d6:	645a      	str	r2, [r3, #68]	@ 0x44
}
 80026d8:	bf00      	nop
 80026da:	3714      	adds	r7, #20
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <FIRFilter_Update>:




float FIRFilter_Update(FIRFilter *fir , float inp)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	ed87 0a00 	vstr	s0, [r7]
	// son gelen veriyi buffer'a kaydet
	fir->buf[fir->bufIndex] =inp;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	4413      	add	r3, r2
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	601a      	str	r2, [r3, #0]

	// buffer indexini arttır
	fir->bufIndex++;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002706:	3301      	adds	r3, #1
 8002708:	b2da      	uxtb	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	// index uzunluğu taşması kontrolü

	if(fir->bufIndex == FIR_FILTER_LENGHT) fir->bufIndex=0;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002716:	2b10      	cmp	r3, #16
 8002718:	d103      	bne.n	8002722 <FIRFilter_Update+0x3e>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	fir->out =0;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f04f 0200 	mov.w	r2, #0
 8002728:	645a      	str	r2, [r3, #68]	@ 0x44

	uint8_t sumIndex = fir->bufIndex;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002730:	73fb      	strb	r3, [r7, #15]

	for (uint8_t n = 0; n< FIR_FILTER_LENGHT; n++)
 8002732:	2300      	movs	r3, #0
 8002734:	73bb      	strb	r3, [r7, #14]
 8002736:	e021      	b.n	800277c <FIRFilter_Update+0x98>
	{
		// index kontrol
		if(sumIndex >0) sumIndex --;
 8002738:	7bfb      	ldrb	r3, [r7, #15]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <FIRFilter_Update+0x62>
 800273e:	7bfb      	ldrb	r3, [r7, #15]
 8002740:	3b01      	subs	r3, #1
 8002742:	73fb      	strb	r3, [r7, #15]
 8002744:	e001      	b.n	800274a <FIRFilter_Update+0x66>
		else sumIndex = FIR_FILTER_LENGHT-1;
 8002746:	230f      	movs	r3, #15
 8002748:	73fb      	strb	r3, [r7, #15]

		// convulution toplam kısmı
		fir->out += FIR_IMPULSE_RESPONSE[n] * fir->buf[sumIndex];
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 8002750:	7bbb      	ldrb	r3, [r7, #14]
 8002752:	4a11      	ldr	r2, [pc, #68]	@ (8002798 <FIRFilter_Update+0xb4>)
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	4413      	add	r3, r2
 8002758:	edd3 6a00 	vldr	s13, [r3]
 800275c:	7bfb      	ldrb	r3, [r7, #15]
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	4413      	add	r3, r2
 8002764:	edd3 7a00 	vldr	s15, [r3]
 8002768:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800276c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
	for (uint8_t n = 0; n< FIR_FILTER_LENGHT; n++)
 8002776:	7bbb      	ldrb	r3, [r7, #14]
 8002778:	3301      	adds	r3, #1
 800277a:	73bb      	strb	r3, [r7, #14]
 800277c:	7bbb      	ldrb	r3, [r7, #14]
 800277e:	2b0f      	cmp	r3, #15
 8002780:	d9da      	bls.n	8002738 <FIRFilter_Update+0x54>

	}

	return fir->out;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002786:	ee07 3a90 	vmov	s15, r3

}
 800278a:	eeb0 0a67 	vmov.f32	s0, s15
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr
 8002798:	20000000 	.word	0x20000000

0800279c <MAFilter_Init>:



void MAFilter_Init(FIRFilter *fir)
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
	for (uint8_t n = 0; n< MAV_FILTER_LENGHT; n++)
 80027a4:	2300      	movs	r3, #0
 80027a6:	73fb      	strb	r3, [r7, #15]
 80027a8:	e009      	b.n	80027be <MAFilter_Init+0x22>
	{
		fir->buf[n] =0.0f; // filtre buffer temizleme
 80027aa:	7bfb      	ldrb	r3, [r7, #15]
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	4413      	add	r3, r2
 80027b2:	f04f 0200 	mov.w	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]
	for (uint8_t n = 0; n< MAV_FILTER_LENGHT; n++)
 80027b8:	7bfb      	ldrb	r3, [r7, #15]
 80027ba:	3301      	adds	r3, #1
 80027bc:	73fb      	strb	r3, [r7, #15]
 80027be:	7bfb      	ldrb	r3, [r7, #15]
 80027c0:	2b03      	cmp	r3, #3
 80027c2:	d9f2      	bls.n	80027aa <MAFilter_Init+0xe>

	}

	fir->bufIndex =0; // index reset
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	fir->out = 0; // clear output
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f04f 0200 	mov.w	r2, #0
 80027d2:	645a      	str	r2, [r3, #68]	@ 0x44
}
 80027d4:	bf00      	nop
 80027d6:	3714      	adds	r7, #20
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <LSM6DSLTR_Init>:

extern LSM6DSLTR;
extern I2C_HandleTypeDef hi2c1;

void LSM6DSLTR_Init()
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af04      	add	r7, sp, #16
	uint8_t data1;

	// Gyro ve Accel interrupt pin 1 aktif
	data1= 0x03;
 80027e6:	2303      	movs	r3, #3
 80027e8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, LSM6DSL_Write_Address, INT1_CTR, 1, &data1, 1, 1);
 80027ea:	2301      	movs	r3, #1
 80027ec:	9302      	str	r3, [sp, #8]
 80027ee:	2301      	movs	r3, #1
 80027f0:	9301      	str	r3, [sp, #4]
 80027f2:	1dfb      	adds	r3, r7, #7
 80027f4:	9300      	str	r3, [sp, #0]
 80027f6:	2301      	movs	r3, #1
 80027f8:	220d      	movs	r2, #13
 80027fa:	21d4      	movs	r1, #212	@ 0xd4
 80027fc:	481f      	ldr	r0, [pc, #124]	@ (800287c <LSM6DSLTR_Init+0x9c>)
 80027fe:	f004 ff25 	bl	800764c <HAL_I2C_Mem_Write>

	data1 = 0xA4; // 16G 6.66khz
 8002802:	23a4      	movs	r3, #164	@ 0xa4
 8002804:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, LSM6DSL_Write_Address, CTRL1_XL, 1, &data1,  1, 1);
 8002806:	2301      	movs	r3, #1
 8002808:	9302      	str	r3, [sp, #8]
 800280a:	2301      	movs	r3, #1
 800280c:	9301      	str	r3, [sp, #4]
 800280e:	1dfb      	adds	r3, r7, #7
 8002810:	9300      	str	r3, [sp, #0]
 8002812:	2301      	movs	r3, #1
 8002814:	2210      	movs	r2, #16
 8002816:	21d4      	movs	r1, #212	@ 0xd4
 8002818:	4818      	ldr	r0, [pc, #96]	@ (800287c <LSM6DSLTR_Init+0x9c>)
 800281a:	f004 ff17 	bl	800764c <HAL_I2C_Mem_Write>

	data1 = 0xA4; // 500 dps 6.6khz
 800281e:	23a4      	movs	r3, #164	@ 0xa4
 8002820:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, LSM6DSL_Write_Address,CTRL2_G, 1, &data1, 1, 1);
 8002822:	2301      	movs	r3, #1
 8002824:	9302      	str	r3, [sp, #8]
 8002826:	2301      	movs	r3, #1
 8002828:	9301      	str	r3, [sp, #4]
 800282a:	1dfb      	adds	r3, r7, #7
 800282c:	9300      	str	r3, [sp, #0]
 800282e:	2301      	movs	r3, #1
 8002830:	2211      	movs	r2, #17
 8002832:	21d4      	movs	r1, #212	@ 0xd4
 8002834:	4811      	ldr	r0, [pc, #68]	@ (800287c <LSM6DSLTR_Init+0x9c>)
 8002836:	f004 ff09 	bl	800764c <HAL_I2C_Mem_Write>

	data1= 0x00;
 800283a:	2300      	movs	r3, #0
 800283c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, LSM6DSL_Write_Address, CTRL3_C, 1, &data1, 1, 1);
 800283e:	2301      	movs	r3, #1
 8002840:	9302      	str	r3, [sp, #8]
 8002842:	2301      	movs	r3, #1
 8002844:	9301      	str	r3, [sp, #4]
 8002846:	1dfb      	adds	r3, r7, #7
 8002848:	9300      	str	r3, [sp, #0]
 800284a:	2301      	movs	r3, #1
 800284c:	2212      	movs	r2, #18
 800284e:	21d4      	movs	r1, #212	@ 0xd4
 8002850:	480a      	ldr	r0, [pc, #40]	@ (800287c <LSM6DSLTR_Init+0x9c>)
 8002852:	f004 fefb 	bl	800764c <HAL_I2C_Mem_Write>

	data1= 0x08;
 8002856:	2308      	movs	r3, #8
 8002858:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, LSM6DSL_Write_Address, CTRL4_C, 1, &data1, 1, 1);
 800285a:	2301      	movs	r3, #1
 800285c:	9302      	str	r3, [sp, #8]
 800285e:	2301      	movs	r3, #1
 8002860:	9301      	str	r3, [sp, #4]
 8002862:	1dfb      	adds	r3, r7, #7
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	2301      	movs	r3, #1
 8002868:	2213      	movs	r2, #19
 800286a:	21d4      	movs	r1, #212	@ 0xd4
 800286c:	4803      	ldr	r0, [pc, #12]	@ (800287c <LSM6DSLTR_Init+0x9c>)
 800286e:	f004 feed 	bl	800764c <HAL_I2C_Mem_Write>




}
 8002872:	bf00      	nop
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	200002a8 	.word	0x200002a8

08002880 <LSM6DSLTR_Read_Accel_Data>:


void LSM6DSLTR_Read_Accel_Data(LSM6DSLTR* Lsm_Sensor)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b088      	sub	sp, #32
 8002884:	af04      	add	r7, sp, #16
 8002886:	6078      	str	r0, [r7, #4]
	uint8_t data;
	uint8_t s;
	int16_t accel;


	HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTZ_L_XL, 1, &data, 1, 1);
 8002888:	2301      	movs	r3, #1
 800288a:	9302      	str	r3, [sp, #8]
 800288c:	2301      	movs	r3, #1
 800288e:	9301      	str	r3, [sp, #4]
 8002890:	f107 030d 	add.w	r3, r7, #13
 8002894:	9300      	str	r3, [sp, #0]
 8002896:	2301      	movs	r3, #1
 8002898:	222c      	movs	r2, #44	@ 0x2c
 800289a:	21d5      	movs	r1, #213	@ 0xd5
 800289c:	4864      	ldr	r0, [pc, #400]	@ (8002a30 <LSM6DSLTR_Read_Accel_Data+0x1b0>)
 800289e:	f004 ffcf 	bl	8007840 <HAL_I2C_Mem_Read>

	HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTZ_H_XL, 1, &s, 1, 1);
 80028a2:	2301      	movs	r3, #1
 80028a4:	9302      	str	r3, [sp, #8]
 80028a6:	2301      	movs	r3, #1
 80028a8:	9301      	str	r3, [sp, #4]
 80028aa:	f107 030c 	add.w	r3, r7, #12
 80028ae:	9300      	str	r3, [sp, #0]
 80028b0:	2301      	movs	r3, #1
 80028b2:	222d      	movs	r2, #45	@ 0x2d
 80028b4:	21d5      	movs	r1, #213	@ 0xd5
 80028b6:	485e      	ldr	r0, [pc, #376]	@ (8002a30 <LSM6DSLTR_Read_Accel_Data+0x1b0>)
 80028b8:	f004 ffc2 	bl	8007840 <HAL_I2C_Mem_Read>

	accel = (int16_t) ( (s << 8 ) | (data));
 80028bc:	7b3b      	ldrb	r3, [r7, #12]
 80028be:	021b      	lsls	r3, r3, #8
 80028c0:	b21a      	sxth	r2, r3
 80028c2:	7b7b      	ldrb	r3, [r7, #13]
 80028c4:	b21b      	sxth	r3, r3
 80028c6:	4313      	orrs	r3, r2
 80028c8:	81fb      	strh	r3, [r7, #14]

	Lsm_Sensor->Accel_Z = (float)accel* 0.000488*9.81; // 16g mg/LSB 0.488
 80028ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80028ce:	ee07 3a90 	vmov	s15, r3
 80028d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028d6:	ee17 0a90 	vmov	r0, s15
 80028da:	f7fd fe4d 	bl	8000578 <__aeabi_f2d>
 80028de:	a350      	add	r3, pc, #320	@ (adr r3, 8002a20 <LSM6DSLTR_Read_Accel_Data+0x1a0>)
 80028e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e4:	f7fd fea0 	bl	8000628 <__aeabi_dmul>
 80028e8:	4602      	mov	r2, r0
 80028ea:	460b      	mov	r3, r1
 80028ec:	4610      	mov	r0, r2
 80028ee:	4619      	mov	r1, r3
 80028f0:	a34d      	add	r3, pc, #308	@ (adr r3, 8002a28 <LSM6DSLTR_Read_Accel_Data+0x1a8>)
 80028f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f6:	f7fd fe97 	bl	8000628 <__aeabi_dmul>
 80028fa:	4602      	mov	r2, r0
 80028fc:	460b      	mov	r3, r1
 80028fe:	4610      	mov	r0, r2
 8002900:	4619      	mov	r1, r3
 8002902:	f7fe f989 	bl	8000c18 <__aeabi_d2f>
 8002906:	4602      	mov	r2, r0
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	609a      	str	r2, [r3, #8]



	HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTX_L_XL, 1, &data, 1, 1);
 800290c:	2301      	movs	r3, #1
 800290e:	9302      	str	r3, [sp, #8]
 8002910:	2301      	movs	r3, #1
 8002912:	9301      	str	r3, [sp, #4]
 8002914:	f107 030d 	add.w	r3, r7, #13
 8002918:	9300      	str	r3, [sp, #0]
 800291a:	2301      	movs	r3, #1
 800291c:	2228      	movs	r2, #40	@ 0x28
 800291e:	21d5      	movs	r1, #213	@ 0xd5
 8002920:	4843      	ldr	r0, [pc, #268]	@ (8002a30 <LSM6DSLTR_Read_Accel_Data+0x1b0>)
 8002922:	f004 ff8d 	bl	8007840 <HAL_I2C_Mem_Read>

	HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTX_H_XL, 1, &s, 1, 1);
 8002926:	2301      	movs	r3, #1
 8002928:	9302      	str	r3, [sp, #8]
 800292a:	2301      	movs	r3, #1
 800292c:	9301      	str	r3, [sp, #4]
 800292e:	f107 030c 	add.w	r3, r7, #12
 8002932:	9300      	str	r3, [sp, #0]
 8002934:	2301      	movs	r3, #1
 8002936:	2229      	movs	r2, #41	@ 0x29
 8002938:	21d5      	movs	r1, #213	@ 0xd5
 800293a:	483d      	ldr	r0, [pc, #244]	@ (8002a30 <LSM6DSLTR_Read_Accel_Data+0x1b0>)
 800293c:	f004 ff80 	bl	8007840 <HAL_I2C_Mem_Read>

	accel = (int16_t) ( (s << 8 ) | (data));
 8002940:	7b3b      	ldrb	r3, [r7, #12]
 8002942:	021b      	lsls	r3, r3, #8
 8002944:	b21a      	sxth	r2, r3
 8002946:	7b7b      	ldrb	r3, [r7, #13]
 8002948:	b21b      	sxth	r3, r3
 800294a:	4313      	orrs	r3, r2
 800294c:	81fb      	strh	r3, [r7, #14]

	Lsm_Sensor->Accel_X= (float)accel* 0.000488*9.81; // 16g mg/LSB 0.488
 800294e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002952:	ee07 3a90 	vmov	s15, r3
 8002956:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800295a:	ee17 0a90 	vmov	r0, s15
 800295e:	f7fd fe0b 	bl	8000578 <__aeabi_f2d>
 8002962:	a32f      	add	r3, pc, #188	@ (adr r3, 8002a20 <LSM6DSLTR_Read_Accel_Data+0x1a0>)
 8002964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002968:	f7fd fe5e 	bl	8000628 <__aeabi_dmul>
 800296c:	4602      	mov	r2, r0
 800296e:	460b      	mov	r3, r1
 8002970:	4610      	mov	r0, r2
 8002972:	4619      	mov	r1, r3
 8002974:	a32c      	add	r3, pc, #176	@ (adr r3, 8002a28 <LSM6DSLTR_Read_Accel_Data+0x1a8>)
 8002976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800297a:	f7fd fe55 	bl	8000628 <__aeabi_dmul>
 800297e:	4602      	mov	r2, r0
 8002980:	460b      	mov	r3, r1
 8002982:	4610      	mov	r0, r2
 8002984:	4619      	mov	r1, r3
 8002986:	f7fe f947 	bl	8000c18 <__aeabi_d2f>
 800298a:	4602      	mov	r2, r0
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	601a      	str	r2, [r3, #0]



	HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTY_L_XL, 1, &data, 1, 1);
 8002990:	2301      	movs	r3, #1
 8002992:	9302      	str	r3, [sp, #8]
 8002994:	2301      	movs	r3, #1
 8002996:	9301      	str	r3, [sp, #4]
 8002998:	f107 030d 	add.w	r3, r7, #13
 800299c:	9300      	str	r3, [sp, #0]
 800299e:	2301      	movs	r3, #1
 80029a0:	222a      	movs	r2, #42	@ 0x2a
 80029a2:	21d5      	movs	r1, #213	@ 0xd5
 80029a4:	4822      	ldr	r0, [pc, #136]	@ (8002a30 <LSM6DSLTR_Read_Accel_Data+0x1b0>)
 80029a6:	f004 ff4b 	bl	8007840 <HAL_I2C_Mem_Read>

	HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTY_H_XL, 1, &s, 1, 1);
 80029aa:	2301      	movs	r3, #1
 80029ac:	9302      	str	r3, [sp, #8]
 80029ae:	2301      	movs	r3, #1
 80029b0:	9301      	str	r3, [sp, #4]
 80029b2:	f107 030c 	add.w	r3, r7, #12
 80029b6:	9300      	str	r3, [sp, #0]
 80029b8:	2301      	movs	r3, #1
 80029ba:	222b      	movs	r2, #43	@ 0x2b
 80029bc:	21d5      	movs	r1, #213	@ 0xd5
 80029be:	481c      	ldr	r0, [pc, #112]	@ (8002a30 <LSM6DSLTR_Read_Accel_Data+0x1b0>)
 80029c0:	f004 ff3e 	bl	8007840 <HAL_I2C_Mem_Read>

	accel = (int16_t) ( (s << 8 ) | (data));
 80029c4:	7b3b      	ldrb	r3, [r7, #12]
 80029c6:	021b      	lsls	r3, r3, #8
 80029c8:	b21a      	sxth	r2, r3
 80029ca:	7b7b      	ldrb	r3, [r7, #13]
 80029cc:	b21b      	sxth	r3, r3
 80029ce:	4313      	orrs	r3, r2
 80029d0:	81fb      	strh	r3, [r7, #14]

	Lsm_Sensor->Accel_Y = (float)accel* 0.000488*9.81; // 16g mg/LSB 0.488
 80029d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029d6:	ee07 3a90 	vmov	s15, r3
 80029da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029de:	ee17 0a90 	vmov	r0, s15
 80029e2:	f7fd fdc9 	bl	8000578 <__aeabi_f2d>
 80029e6:	a30e      	add	r3, pc, #56	@ (adr r3, 8002a20 <LSM6DSLTR_Read_Accel_Data+0x1a0>)
 80029e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ec:	f7fd fe1c 	bl	8000628 <__aeabi_dmul>
 80029f0:	4602      	mov	r2, r0
 80029f2:	460b      	mov	r3, r1
 80029f4:	4610      	mov	r0, r2
 80029f6:	4619      	mov	r1, r3
 80029f8:	a30b      	add	r3, pc, #44	@ (adr r3, 8002a28 <LSM6DSLTR_Read_Accel_Data+0x1a8>)
 80029fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029fe:	f7fd fe13 	bl	8000628 <__aeabi_dmul>
 8002a02:	4602      	mov	r2, r0
 8002a04:	460b      	mov	r3, r1
 8002a06:	4610      	mov	r0, r2
 8002a08:	4619      	mov	r1, r3
 8002a0a:	f7fe f905 	bl	8000c18 <__aeabi_d2f>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	605a      	str	r2, [r3, #4]


}
 8002a14:	bf00      	nop
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	f3af 8000 	nop.w
 8002a20:	0a5accd5 	.word	0x0a5accd5
 8002a24:	3f3ffb48 	.word	0x3f3ffb48
 8002a28:	51eb851f 	.word	0x51eb851f
 8002a2c:	40239eb8 	.word	0x40239eb8
 8002a30:	200002a8 	.word	0x200002a8

08002a34 <LSM6DSLTR_Read_Gyro_Data>:

void LSM6DSLTR_Read_Gyro_Data(LSM6DSLTR* Lsm_Sensor){
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b088      	sub	sp, #32
 8002a38:	af04      	add	r7, sp, #16
 8002a3a:	6078      	str	r0, [r7, #4]
     	uint8_t data;
		uint8_t s;
		int16_t gyro;


		HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTX_L_G, 1, &data, 1, 1);
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	9302      	str	r3, [sp, #8]
 8002a40:	2301      	movs	r3, #1
 8002a42:	9301      	str	r3, [sp, #4]
 8002a44:	f107 030d 	add.w	r3, r7, #13
 8002a48:	9300      	str	r3, [sp, #0]
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	2222      	movs	r2, #34	@ 0x22
 8002a4e:	21d5      	movs	r1, #213	@ 0xd5
 8002a50:	4843      	ldr	r0, [pc, #268]	@ (8002b60 <LSM6DSLTR_Read_Gyro_Data+0x12c>)
 8002a52:	f004 fef5 	bl	8007840 <HAL_I2C_Mem_Read>

		HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTX_H_G, 1, &s, 1, 1);
 8002a56:	2301      	movs	r3, #1
 8002a58:	9302      	str	r3, [sp, #8]
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	9301      	str	r3, [sp, #4]
 8002a5e:	f107 030c 	add.w	r3, r7, #12
 8002a62:	9300      	str	r3, [sp, #0]
 8002a64:	2301      	movs	r3, #1
 8002a66:	2223      	movs	r2, #35	@ 0x23
 8002a68:	21d5      	movs	r1, #213	@ 0xd5
 8002a6a:	483d      	ldr	r0, [pc, #244]	@ (8002b60 <LSM6DSLTR_Read_Gyro_Data+0x12c>)
 8002a6c:	f004 fee8 	bl	8007840 <HAL_I2C_Mem_Read>

		gyro = (int16_t) ( (s << 8 ) | (data));
 8002a70:	7b3b      	ldrb	r3, [r7, #12]
 8002a72:	021b      	lsls	r3, r3, #8
 8002a74:	b21a      	sxth	r2, r3
 8002a76:	7b7b      	ldrb	r3, [r7, #13]
 8002a78:	b21b      	sxth	r3, r3
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	81fb      	strh	r3, [r7, #14]

		Lsm_Sensor->Gyro_X = (float)gyro*gyro_constant;
 8002a7e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a82:	ee07 3a90 	vmov	s15, r3
 8002a86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a8a:	4b36      	ldr	r3, [pc, #216]	@ (8002b64 <LSM6DSLTR_Read_Gyro_Data+0x130>)
 8002a8c:	edd3 7a00 	vldr	s15, [r3]
 8002a90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	edc3 7a03 	vstr	s15, [r3, #12]



		HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTY_L_G, 1, &data, 1, 1);
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	9302      	str	r3, [sp, #8]
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	9301      	str	r3, [sp, #4]
 8002aa2:	f107 030d 	add.w	r3, r7, #13
 8002aa6:	9300      	str	r3, [sp, #0]
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	2224      	movs	r2, #36	@ 0x24
 8002aac:	21d5      	movs	r1, #213	@ 0xd5
 8002aae:	482c      	ldr	r0, [pc, #176]	@ (8002b60 <LSM6DSLTR_Read_Gyro_Data+0x12c>)
 8002ab0:	f004 fec6 	bl	8007840 <HAL_I2C_Mem_Read>

		HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTY_H_G, 1, &s, 1, 1);
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	9302      	str	r3, [sp, #8]
 8002ab8:	2301      	movs	r3, #1
 8002aba:	9301      	str	r3, [sp, #4]
 8002abc:	f107 030c 	add.w	r3, r7, #12
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	2225      	movs	r2, #37	@ 0x25
 8002ac6:	21d5      	movs	r1, #213	@ 0xd5
 8002ac8:	4825      	ldr	r0, [pc, #148]	@ (8002b60 <LSM6DSLTR_Read_Gyro_Data+0x12c>)
 8002aca:	f004 feb9 	bl	8007840 <HAL_I2C_Mem_Read>

		gyro = (int16_t) ( (s << 8 ) | (data));
 8002ace:	7b3b      	ldrb	r3, [r7, #12]
 8002ad0:	021b      	lsls	r3, r3, #8
 8002ad2:	b21a      	sxth	r2, r3
 8002ad4:	7b7b      	ldrb	r3, [r7, #13]
 8002ad6:	b21b      	sxth	r3, r3
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	81fb      	strh	r3, [r7, #14]

		Lsm_Sensor->Gyro_Y = (float)gyro*gyro_constant;
 8002adc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ae0:	ee07 3a90 	vmov	s15, r3
 8002ae4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ae8:	4b1e      	ldr	r3, [pc, #120]	@ (8002b64 <LSM6DSLTR_Read_Gyro_Data+0x130>)
 8002aea:	edd3 7a00 	vldr	s15, [r3]
 8002aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	edc3 7a04 	vstr	s15, [r3, #16]


		HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTZ_L_G, 1, &data, 1, 1);
 8002af8:	2301      	movs	r3, #1
 8002afa:	9302      	str	r3, [sp, #8]
 8002afc:	2301      	movs	r3, #1
 8002afe:	9301      	str	r3, [sp, #4]
 8002b00:	f107 030d 	add.w	r3, r7, #13
 8002b04:	9300      	str	r3, [sp, #0]
 8002b06:	2301      	movs	r3, #1
 8002b08:	2226      	movs	r2, #38	@ 0x26
 8002b0a:	21d5      	movs	r1, #213	@ 0xd5
 8002b0c:	4814      	ldr	r0, [pc, #80]	@ (8002b60 <LSM6DSLTR_Read_Gyro_Data+0x12c>)
 8002b0e:	f004 fe97 	bl	8007840 <HAL_I2C_Mem_Read>

		HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTZ_H_G, 1, &s, 1, 1);
 8002b12:	2301      	movs	r3, #1
 8002b14:	9302      	str	r3, [sp, #8]
 8002b16:	2301      	movs	r3, #1
 8002b18:	9301      	str	r3, [sp, #4]
 8002b1a:	f107 030c 	add.w	r3, r7, #12
 8002b1e:	9300      	str	r3, [sp, #0]
 8002b20:	2301      	movs	r3, #1
 8002b22:	2227      	movs	r2, #39	@ 0x27
 8002b24:	21d5      	movs	r1, #213	@ 0xd5
 8002b26:	480e      	ldr	r0, [pc, #56]	@ (8002b60 <LSM6DSLTR_Read_Gyro_Data+0x12c>)
 8002b28:	f004 fe8a 	bl	8007840 <HAL_I2C_Mem_Read>

		gyro = (int16_t) ( (s << 8 ) | (data));
 8002b2c:	7b3b      	ldrb	r3, [r7, #12]
 8002b2e:	021b      	lsls	r3, r3, #8
 8002b30:	b21a      	sxth	r2, r3
 8002b32:	7b7b      	ldrb	r3, [r7, #13]
 8002b34:	b21b      	sxth	r3, r3
 8002b36:	4313      	orrs	r3, r2
 8002b38:	81fb      	strh	r3, [r7, #14]

		Lsm_Sensor->Gyro_Z = (float)gyro*gyro_constant;
 8002b3a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b3e:	ee07 3a90 	vmov	s15, r3
 8002b42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b46:	4b07      	ldr	r3, [pc, #28]	@ (8002b64 <LSM6DSLTR_Read_Gyro_Data+0x130>)
 8002b48:	edd3 7a00 	vldr	s15, [r3]
 8002b4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	edc3 7a05 	vstr	s15, [r3, #20]

}
 8002b56:	bf00      	nop
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	200002a8 	.word	0x200002a8
 8002b64:	20000040 	.word	0x20000040

08002b68 <calculate_roll_pitch>:
	return HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8);

}


void calculate_roll_pitch(LSM6DSLTR *Lsm_Sensor) {
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	ed2d 8b02 	vpush	{d8}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
    Lsm_Sensor->Roll = atan2f(Lsm_Sensor->Accel_Y, sqrtf(Lsm_Sensor->Accel_X * Lsm_Sensor->Accel_X + Lsm_Sensor->Accel_Z * Lsm_Sensor->Accel_Z)) * 180.0f / 3.14;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	ed93 8a01 	vldr	s16, [r3, #4]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	ed93 7a00 	vldr	s14, [r3]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	edd3 7a00 	vldr	s15, [r3]
 8002b86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	edd3 6a02 	vldr	s13, [r3, #8]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	edd3 7a02 	vldr	s15, [r3, #8]
 8002b96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b9e:	eeb0 0a67 	vmov.f32	s0, s15
 8002ba2:	f00b f943 	bl	800de2c <sqrtf>
 8002ba6:	eef0 7a40 	vmov.f32	s15, s0
 8002baa:	eef0 0a67 	vmov.f32	s1, s15
 8002bae:	eeb0 0a48 	vmov.f32	s0, s16
 8002bb2:	f00b f939 	bl	800de28 <atan2f>
 8002bb6:	eef0 7a40 	vmov.f32	s15, s0
 8002bba:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8002c70 <calculate_roll_pitch+0x108>
 8002bbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bc2:	ee17 0a90 	vmov	r0, s15
 8002bc6:	f7fd fcd7 	bl	8000578 <__aeabi_f2d>
 8002bca:	a327      	add	r3, pc, #156	@ (adr r3, 8002c68 <calculate_roll_pitch+0x100>)
 8002bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd0:	f7fd fe54 	bl	800087c <__aeabi_ddiv>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	4610      	mov	r0, r2
 8002bda:	4619      	mov	r1, r3
 8002bdc:	f7fe f81c 	bl	8000c18 <__aeabi_d2f>
 8002be0:	4602      	mov	r2, r0
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	619a      	str	r2, [r3, #24]
    Lsm_Sensor->Pitch = atan2f(-Lsm_Sensor->Accel_X, sqrtf(Lsm_Sensor->Accel_Y * Lsm_Sensor->Accel_Y + Lsm_Sensor->Accel_Z * Lsm_Sensor->Accel_Z)) * 180.0f / 3.14;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	edd3 7a00 	vldr	s15, [r3]
 8002bec:	eeb1 8a67 	vneg.f32	s16, s15
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	ed93 7a01 	vldr	s14, [r3, #4]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	edd3 7a01 	vldr	s15, [r3, #4]
 8002bfc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	edd3 6a02 	vldr	s13, [r3, #8]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c14:	eeb0 0a67 	vmov.f32	s0, s15
 8002c18:	f00b f908 	bl	800de2c <sqrtf>
 8002c1c:	eef0 7a40 	vmov.f32	s15, s0
 8002c20:	eef0 0a67 	vmov.f32	s1, s15
 8002c24:	eeb0 0a48 	vmov.f32	s0, s16
 8002c28:	f00b f8fe 	bl	800de28 <atan2f>
 8002c2c:	eef0 7a40 	vmov.f32	s15, s0
 8002c30:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8002c70 <calculate_roll_pitch+0x108>
 8002c34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c38:	ee17 0a90 	vmov	r0, s15
 8002c3c:	f7fd fc9c 	bl	8000578 <__aeabi_f2d>
 8002c40:	a309      	add	r3, pc, #36	@ (adr r3, 8002c68 <calculate_roll_pitch+0x100>)
 8002c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c46:	f7fd fe19 	bl	800087c <__aeabi_ddiv>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	4610      	mov	r0, r2
 8002c50:	4619      	mov	r1, r3
 8002c52:	f7fd ffe1 	bl	8000c18 <__aeabi_d2f>
 8002c56:	4602      	mov	r2, r0
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	61da      	str	r2, [r3, #28]
}
 8002c5c:	bf00      	nop
 8002c5e:	3708      	adds	r7, #8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	ecbd 8b02 	vpop	{d8}
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	51eb851f 	.word	0x51eb851f
 8002c6c:	40091eb8 	.word	0x40091eb8
 8002c70:	43340000 	.word	0x43340000

08002c74 <update_angles>:
void update_angles(LSM6DSLTR *Lsm_Sensor) {
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
    uint32_t current_time = HAL_GetTick(); // Şu anki zamanı al
 8002c7c:	f003 f83e 	bl	8005cfc <HAL_GetTick>
 8002c80:	60f8      	str	r0, [r7, #12]

    // Zaman farkını hesapla (saniye cinsinden)
    float dt = (current_time - prev_time) / 1000.0f;
 8002c82:	4b26      	ldr	r3, [pc, #152]	@ (8002d1c <update_angles+0xa8>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	ee07 3a90 	vmov	s15, r3
 8002c8e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c92:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8002d20 <update_angles+0xac>
 8002c96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c9a:	edc7 7a02 	vstr	s15, [r7, #8]

    // Roll ve pitch açılarını güncelle (tamamlayıcı filtre)
    Lsm_Sensor->Roll = ALPHA * (Lsm_Sensor->Roll + Lsm_Sensor->Gyro_X * dt) + (1 - ALPHA) * Lsm_Sensor->Roll;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	ed93 7a06 	vldr	s14, [r3, #24]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	edd3 6a03 	vldr	s13, [r3, #12]
 8002caa:	edd7 7a02 	vldr	s15, [r7, #8]
 8002cae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cb6:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8002d24 <update_angles+0xb0>
 8002cba:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	edd3 7a06 	vldr	s15, [r3, #24]
 8002cc4:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8002d28 <update_angles+0xb4>
 8002cc8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ccc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	edc3 7a06 	vstr	s15, [r3, #24]
    Lsm_Sensor->Pitch = ALPHA * (Lsm_Sensor->Pitch + Lsm_Sensor->Gyro_Y * dt) + (1 - ALPHA) * Lsm_Sensor->Pitch;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	ed93 7a07 	vldr	s14, [r3, #28]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	edd3 6a04 	vldr	s13, [r3, #16]
 8002ce2:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ce6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cee:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8002d24 <update_angles+0xb0>
 8002cf2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	edd3 7a07 	vldr	s15, [r3, #28]
 8002cfc:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8002d28 <update_angles+0xb4>
 8002d00:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	edc3 7a07 	vstr	s15, [r3, #28]

    // Yaw açısını jiroskop verileriyle güncelle (basit zamanla entegrasyon)
  //  Lsm_Sensor->Yaw += Lsm_Sensor->Gyro_Z * dt;

    // Önceki zamanı güncelle
    prev_time = current_time;
 8002d0e:	4a03      	ldr	r2, [pc, #12]	@ (8002d1c <update_angles+0xa8>)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6013      	str	r3, [r2, #0]
}
 8002d14:	bf00      	nop
 8002d16:	3710      	adds	r7, #16
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	2000025c 	.word	0x2000025c
 8002d20:	447a0000 	.word	0x447a0000
 8002d24:	3f7ae148 	.word	0x3f7ae148
 8002d28:	3ca3d700 	.word	0x3ca3d700

08002d2c <W25Q_Delay>:
#define W25Q_SPI hspi1

#define numBLOCK 32  // number of total blocks for 16Mb flash, 32x16x16 pages and 32x16x16x256 Bytes

void W25Q_Delay(uint32_t time)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
	HAL_Delay(time);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f002 ffed 	bl	8005d14 <HAL_Delay>
}
 8002d3a:	bf00      	nop
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
	...

08002d44 <csLOW>:

void csLOW (void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8002d48:	2200      	movs	r2, #0
 8002d4a:	2102      	movs	r1, #2
 8002d4c:	4802      	ldr	r0, [pc, #8]	@ (8002d58 <csLOW+0x14>)
 8002d4e:	f003 ffe1 	bl	8006d14 <HAL_GPIO_WritePin>
}
 8002d52:	bf00      	nop
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	40020800 	.word	0x40020800

08002d5c <csHIGH>:

void csHIGH (void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8002d60:	2201      	movs	r2, #1
 8002d62:	2102      	movs	r1, #2
 8002d64:	4802      	ldr	r0, [pc, #8]	@ (8002d70 <csHIGH+0x14>)
 8002d66:	f003 ffd5 	bl	8006d14 <HAL_GPIO_WritePin>
}
 8002d6a:	bf00      	nop
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	40020800 	.word	0x40020800

08002d74 <SPI_Write>:

void SPI_Write (uint8_t *data, uint8_t len)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(&W25Q_SPI, data, len, 2000);
 8002d80:	78fb      	ldrb	r3, [r7, #3]
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002d88:	6879      	ldr	r1, [r7, #4]
 8002d8a:	4803      	ldr	r0, [pc, #12]	@ (8002d98 <SPI_Write+0x24>)
 8002d8c:	f006 fa9b 	bl	80092c6 <HAL_SPI_Transmit>
}
 8002d90:	bf00      	nop
 8002d92:	3708      	adds	r7, #8
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	200002fc 	.word	0x200002fc

08002d9c <write_enable>:
	SPI_Read(rData, size);  // Read the data
	csHIGH();  // pull the CS High
}

void write_enable (void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
	uint8_t tData = 0x06;  // enable write
 8002da2:	2306      	movs	r3, #6
 8002da4:	71fb      	strb	r3, [r7, #7]
	csLOW();
 8002da6:	f7ff ffcd 	bl	8002d44 <csLOW>
	SPI_Write(&tData, 1);
 8002daa:	1dfb      	adds	r3, r7, #7
 8002dac:	2101      	movs	r1, #1
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7ff ffe0 	bl	8002d74 <SPI_Write>
	csHIGH();
 8002db4:	f7ff ffd2 	bl	8002d5c <csHIGH>
	W25Q_Delay(5);  // 5ms delay
 8002db8:	2005      	movs	r0, #5
 8002dba:	f7ff ffb7 	bl	8002d2c <W25Q_Delay>
}
 8002dbe:	bf00      	nop
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <write_disable>:

void write_disable(void)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b082      	sub	sp, #8
 8002dca:	af00      	add	r7, sp, #0
	uint8_t tData = 0x04;  // disable write
 8002dcc:	2304      	movs	r3, #4
 8002dce:	71fb      	strb	r3, [r7, #7]
	csLOW();
 8002dd0:	f7ff ffb8 	bl	8002d44 <csLOW>
	SPI_Write(&tData, 1);
 8002dd4:	1dfb      	adds	r3, r7, #7
 8002dd6:	2101      	movs	r1, #1
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7ff ffcb 	bl	8002d74 <SPI_Write>
	csHIGH();
 8002dde:	f7ff ffbd 	bl	8002d5c <csHIGH>
	W25Q_Delay(5);  // 5ms delay
 8002de2:	2005      	movs	r0, #5
 8002de4:	f7ff ffa2 	bl	8002d2c <W25Q_Delay>
}
 8002de8:	bf00      	nop
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <bytestowrite>:

uint32_t bytestowrite (uint32_t size, uint16_t offset)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	460b      	mov	r3, r1
 8002dfa:	807b      	strh	r3, [r7, #2]
	if ((size+offset)<256) return size;
 8002dfc:	887a      	ldrh	r2, [r7, #2]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4413      	add	r3, r2
 8002e02:	2bff      	cmp	r3, #255	@ 0xff
 8002e04:	d801      	bhi.n	8002e0a <bytestowrite+0x1a>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	e002      	b.n	8002e10 <bytestowrite+0x20>
	else return 256-offset;
 8002e0a:	887b      	ldrh	r3, [r7, #2]
 8002e0c:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <W25Q_Erase_Sector>:

void W25Q_Erase_Sector (uint16_t numsector)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	4603      	mov	r3, r0
 8002e24:	80fb      	strh	r3, [r7, #6]
	uint8_t tData[6];
	uint32_t memAddr = numsector*16*256;   // Each sector contains 16 pages * 256 bytes
 8002e26:	88fb      	ldrh	r3, [r7, #6]
 8002e28:	031b      	lsls	r3, r3, #12
 8002e2a:	617b      	str	r3, [r7, #20]

	write_enable();
 8002e2c:	f7ff ffb6 	bl	8002d9c <write_enable>

	if (numBLOCK<512)   // Chip Size<256Mb
	{
		tData[0] = 0x20;  // Erase sector
 8002e30:	2320      	movs	r3, #32
 8002e32:	733b      	strb	r3, [r7, #12]
		tData[1] = (memAddr>>16)&0xFF;  // MSB of the memory Address
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	0c1b      	lsrs	r3, r3, #16
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	737b      	strb	r3, [r7, #13]
		tData[2] = (memAddr>>8)&0xFF;
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	0a1b      	lsrs	r3, r3, #8
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	73bb      	strb	r3, [r7, #14]
		tData[3] = (memAddr)&0xFF; // LSB of the memory Address
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	73fb      	strb	r3, [r7, #15]

		csLOW();
 8002e4a:	f7ff ff7b 	bl	8002d44 <csLOW>
		SPI_Write(tData, 4);
 8002e4e:	f107 030c 	add.w	r3, r7, #12
 8002e52:	2104      	movs	r1, #4
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7ff ff8d 	bl	8002d74 <SPI_Write>
		csHIGH();
 8002e5a:	f7ff ff7f 	bl	8002d5c <csHIGH>
		csLOW();  // pull the CS LOW
		SPI_Write(tData, 5);
		csHIGH();  // pull the HIGH
	}

	W25Q_Delay(450);  // 450ms delay for sector erase
 8002e5e:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8002e62:	f7ff ff63 	bl	8002d2c <W25Q_Delay>

	write_disable();
 8002e66:	f7ff ffae 	bl	8002dc6 <write_disable>

}
 8002e6a:	bf00      	nop
 8002e6c:	3718      	adds	r7, #24
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <W25Q_Write_Page>:


void W25Q_Write_Page (uint32_t page, uint16_t offset, uint32_t size, uint8_t *data)
{
 8002e72:	b590      	push	{r4, r7, lr}
 8002e74:	b0d3      	sub	sp, #332	@ 0x14c
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	f507 74a4 	add.w	r4, r7, #328	@ 0x148
 8002e7c:	f5a4 749e 	sub.w	r4, r4, #316	@ 0x13c
 8002e80:	6020      	str	r0, [r4, #0]
 8002e82:	4608      	mov	r0, r1
 8002e84:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 8002e88:	f5a1 71a2 	sub.w	r1, r1, #324	@ 0x144
 8002e8c:	600a      	str	r2, [r1, #0]
 8002e8e:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8002e92:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 8002e96:	6013      	str	r3, [r2, #0]
 8002e98:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002e9c:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	801a      	strh	r2, [r3, #0]
	uint8_t tData[266];
	uint32_t startPage = page;
 8002ea4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002ea8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
	uint32_t endPage  = startPage + ((size+offset-1)/256);
 8002eb2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002eb6:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8002eba:	881a      	ldrh	r2, [r3, #0]
 8002ebc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002ec0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	0a1b      	lsrs	r3, r3, #8
 8002ecc:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002ed0:	4413      	add	r3, r2
 8002ed2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	uint32_t numPages = endPage-startPage+1;
 8002ed6:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8002eda:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128

	uint16_t startSector  = startPage/16;
 8002ee6:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8002eea:	091b      	lsrs	r3, r3, #4
 8002eec:	f8a7 3142 	strh.w	r3, [r7, #322]	@ 0x142
	uint16_t endSector  = endPage/16;
 8002ef0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002ef4:	091b      	lsrs	r3, r3, #4
 8002ef6:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
	uint16_t numSectors = endSector-startSector+1;
 8002efa:	f8b7 2126 	ldrh.w	r2, [r7, #294]	@ 0x126
 8002efe:	f8b7 3142 	ldrh.w	r3, [r7, #322]	@ 0x142
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	3301      	adds	r3, #1
 8002f08:	f8a7 3124 	strh.w	r3, [r7, #292]	@ 0x124
	for (uint16_t i=0; i<numSectors; i++)
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	f8a7 3140 	strh.w	r3, [r7, #320]	@ 0x140
 8002f12:	e00c      	b.n	8002f2e <W25Q_Write_Page+0xbc>
	{
		W25Q_Erase_Sector(startSector++);
 8002f14:	f8b7 3142 	ldrh.w	r3, [r7, #322]	@ 0x142
 8002f18:	1c5a      	adds	r2, r3, #1
 8002f1a:	f8a7 2142 	strh.w	r2, [r7, #322]	@ 0x142
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff ff7c 	bl	8002e1c <W25Q_Erase_Sector>
	for (uint16_t i=0; i<numSectors; i++)
 8002f24:	f8b7 3140 	ldrh.w	r3, [r7, #320]	@ 0x140
 8002f28:	3301      	adds	r3, #1
 8002f2a:	f8a7 3140 	strh.w	r3, [r7, #320]	@ 0x140
 8002f2e:	f8b7 2140 	ldrh.w	r2, [r7, #320]	@ 0x140
 8002f32:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d3ec      	bcc.n	8002f14 <W25Q_Write_Page+0xa2>
	}

	uint32_t dataPosition = 0;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c

	// write the data
	for (uint32_t i=0; i<numPages; i++)
 8002f40:	2300      	movs	r3, #0
 8002f42:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8002f46:	e0c0      	b.n	80030ca <W25Q_Write_Page+0x258>
	{
		uint32_t memAddr = (startPage*256)+offset;
 8002f48:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8002f4c:	021a      	lsls	r2, r3, #8
 8002f4e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002f52:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8002f56:	881b      	ldrh	r3, [r3, #0]
 8002f58:	4413      	add	r3, r2
 8002f5a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
		uint16_t bytesremaining  = bytestowrite(size, offset);
 8002f5e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002f62:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8002f66:	881a      	ldrh	r2, [r3, #0]
 8002f68:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002f6c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002f70:	4611      	mov	r1, r2
 8002f72:	6818      	ldr	r0, [r3, #0]
 8002f74:	f7ff ff3c 	bl	8002df0 <bytestowrite>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	f8a7 311e 	strh.w	r3, [r7, #286]	@ 0x11e
		uint32_t indx = 0;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134

		write_enable();
 8002f84:	f7ff ff0a 	bl	8002d9c <write_enable>

		if (numBLOCK<512)   // Chip Size<256Mb
		{
			tData[0] = 0x02;  // page program
 8002f88:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002f8c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002f90:	2202      	movs	r2, #2
 8002f92:	701a      	strb	r2, [r3, #0]
			tData[1] = (memAddr>>16)&0xFF;  // MSB of the memory Address
 8002f94:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002f98:	0c1b      	lsrs	r3, r3, #16
 8002f9a:	b2da      	uxtb	r2, r3
 8002f9c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002fa0:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002fa4:	705a      	strb	r2, [r3, #1]
			tData[2] = (memAddr>>8)&0xFF;
 8002fa6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002faa:	0a1b      	lsrs	r3, r3, #8
 8002fac:	b2da      	uxtb	r2, r3
 8002fae:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002fb2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002fb6:	709a      	strb	r2, [r3, #2]
			tData[3] = (memAddr)&0xFF; // LSB of the memory Address
 8002fb8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002fbc:	b2da      	uxtb	r2, r3
 8002fbe:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002fc2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002fc6:	70da      	strb	r2, [r3, #3]

			indx = 4;
 8002fc8:	2304      	movs	r3, #4
 8002fca:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
			tData[4] = (memAddr)&0xFF; // LSB of the memory Address

			indx = 5;
		}

		uint16_t bytestosend  = bytesremaining + indx;
 8002fce:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002fd2:	b29a      	uxth	r2, r3
 8002fd4:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 8002fd8:	4413      	add	r3, r2
 8002fda:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c

		for (uint16_t i=0; i<bytesremaining; i++)
 8002fde:	2300      	movs	r3, #0
 8002fe0:	f8a7 3132 	strh.w	r3, [r7, #306]	@ 0x132
 8002fe4:	e01a      	b.n	800301c <W25Q_Write_Page+0x1aa>
		{
			tData[indx++] = data[i+dataPosition];
 8002fe6:	f8b7 2132 	ldrh.w	r2, [r7, #306]	@ 0x132
 8002fea:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002fee:	4413      	add	r3, r2
 8002ff0:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8002ff4:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 8002ff8:	6812      	ldr	r2, [r2, #0]
 8002ffa:	441a      	add	r2, r3
 8002ffc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003000:	1c59      	adds	r1, r3, #1
 8003002:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8003006:	7811      	ldrb	r1, [r2, #0]
 8003008:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 800300c:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8003010:	54d1      	strb	r1, [r2, r3]
		for (uint16_t i=0; i<bytesremaining; i++)
 8003012:	f8b7 3132 	ldrh.w	r3, [r7, #306]	@ 0x132
 8003016:	3301      	adds	r3, #1
 8003018:	f8a7 3132 	strh.w	r3, [r7, #306]	@ 0x132
 800301c:	f8b7 2132 	ldrh.w	r2, [r7, #306]	@ 0x132
 8003020:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 8003024:	429a      	cmp	r2, r3
 8003026:	d3de      	bcc.n	8002fe6 <W25Q_Write_Page+0x174>
		}

		if (bytestosend > 200)
 8003028:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 800302c:	2bc8      	cmp	r3, #200	@ 0xc8
 800302e:	d916      	bls.n	800305e <W25Q_Write_Page+0x1ec>
		{
			csLOW();
 8003030:	f7ff fe88 	bl	8002d44 <csLOW>
			SPI_Write(tData, 100);
 8003034:	f107 0310 	add.w	r3, r7, #16
 8003038:	2164      	movs	r1, #100	@ 0x64
 800303a:	4618      	mov	r0, r3
 800303c:	f7ff fe9a 	bl	8002d74 <SPI_Write>
			SPI_Write(tData+100, bytestosend-100);
 8003040:	f107 0310 	add.w	r3, r7, #16
 8003044:	3364      	adds	r3, #100	@ 0x64
 8003046:	f8b7 211c 	ldrh.w	r2, [r7, #284]	@ 0x11c
 800304a:	b2d2      	uxtb	r2, r2
 800304c:	3a64      	subs	r2, #100	@ 0x64
 800304e:	b2d2      	uxtb	r2, r2
 8003050:	4611      	mov	r1, r2
 8003052:	4618      	mov	r0, r3
 8003054:	f7ff fe8e 	bl	8002d74 <SPI_Write>
			csHIGH();
 8003058:	f7ff fe80 	bl	8002d5c <csHIGH>
 800305c:	e00c      	b.n	8003078 <W25Q_Write_Page+0x206>
		}
		
		else 
		{
			csLOW();
 800305e:	f7ff fe71 	bl	8002d44 <csLOW>
			SPI_Write(tData, bytestosend);
 8003062:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 8003066:	b2da      	uxtb	r2, r3
 8003068:	f107 0310 	add.w	r3, r7, #16
 800306c:	4611      	mov	r1, r2
 800306e:	4618      	mov	r0, r3
 8003070:	f7ff fe80 	bl	8002d74 <SPI_Write>
			csHIGH();
 8003074:	f7ff fe72 	bl	8002d5c <csHIGH>
		}

		startPage++;
 8003078:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800307c:	3301      	adds	r3, #1
 800307e:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
		offset = 0;
 8003082:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003086:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 800308a:	2200      	movs	r2, #0
 800308c:	801a      	strh	r2, [r3, #0]
		size = size-bytesremaining;
 800308e:	f8b7 211e 	ldrh.w	r2, [r7, #286]	@ 0x11e
 8003092:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003096:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800309a:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 800309e:	f5a1 71a2 	sub.w	r1, r1, #324	@ 0x144
 80030a2:	6809      	ldr	r1, [r1, #0]
 80030a4:	1a8a      	subs	r2, r1, r2
 80030a6:	601a      	str	r2, [r3, #0]
		dataPosition = dataPosition+bytesremaining;
 80030a8:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 80030ac:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 80030b0:	4413      	add	r3, r2
 80030b2:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c

		W25Q_Delay(5);
 80030b6:	2005      	movs	r0, #5
 80030b8:	f7ff fe38 	bl	8002d2c <W25Q_Delay>
		write_disable();
 80030bc:	f7ff fe83 	bl	8002dc6 <write_disable>
	for (uint32_t i=0; i<numPages; i++)
 80030c0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80030c4:	3301      	adds	r3, #1
 80030c6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80030ca:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 80030ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80030d2:	429a      	cmp	r2, r3
 80030d4:	f4ff af38 	bcc.w	8002f48 <W25Q_Write_Page+0xd6>

	}
}
 80030d8:	bf00      	nop
 80030da:	bf00      	nop
 80030dc:	f507 77a6 	add.w	r7, r7, #332	@ 0x14c
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd90      	pop	{r4, r7, pc}

080030e4 <prv_parse_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed integer
 */
static int32_t
prv_parse_number(lwgps_t* gh, const char* t) {
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
    int32_t res = 0;
 80030ee:	2300      	movs	r3, #0
 80030f0:	60fb      	str	r3, [r7, #12]
    uint8_t minus;

    if (t == NULL) {
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d106      	bne.n	8003106 <prv_parse_number+0x22>
        t = gh->p.term_str;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	3371      	adds	r3, #113	@ 0x71
 80030fc:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 80030fe:	e002      	b.n	8003106 <prv_parse_number+0x22>
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	3301      	adds	r3, #1
 8003104:	603b      	str	r3, [r7, #0]
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d003      	beq.n	8003114 <prv_parse_number+0x30>
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	2b20      	cmp	r3, #32
 8003112:	d0f5      	beq.n	8003100 <prv_parse_number+0x1c>

    minus = (*t == '-' ? (++t, 1) : 0);
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	2b2d      	cmp	r3, #45	@ 0x2d
 800311a:	d104      	bne.n	8003126 <prv_parse_number+0x42>
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	3301      	adds	r3, #1
 8003120:	603b      	str	r3, [r7, #0]
 8003122:	2301      	movs	r3, #1
 8003124:	e000      	b.n	8003128 <prv_parse_number+0x44>
 8003126:	2300      	movs	r3, #0
 8003128:	72fb      	strb	r3, [r7, #11]
    for (; t != NULL && CIN(*t); ++t) {
 800312a:	e00d      	b.n	8003148 <prv_parse_number+0x64>
        res = 10 * res + CTN(*t);
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	4613      	mov	r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4413      	add	r3, r2
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	461a      	mov	r2, r3
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	3b30      	subs	r3, #48	@ 0x30
 800313e:	4413      	add	r3, r2
 8003140:	60fb      	str	r3, [r7, #12]
    for (; t != NULL && CIN(*t); ++t) {
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	3301      	adds	r3, #1
 8003146:	603b      	str	r3, [r7, #0]
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d007      	beq.n	800315e <prv_parse_number+0x7a>
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	2b2f      	cmp	r3, #47	@ 0x2f
 8003154:	d903      	bls.n	800315e <prv_parse_number+0x7a>
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	2b39      	cmp	r3, #57	@ 0x39
 800315c:	d9e6      	bls.n	800312c <prv_parse_number+0x48>
    }
    return minus ? -res : res;
 800315e:	7afb      	ldrb	r3, [r7, #11]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d002      	beq.n	800316a <prv_parse_number+0x86>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	425b      	negs	r3, r3
 8003168:	e000      	b.n	800316c <prv_parse_number+0x88>
 800316a:	68fb      	ldr	r3, [r7, #12]
}
 800316c:	4618      	mov	r0, r3
 800316e:	3714      	adds	r7, #20
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <prv_parse_float_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed double in \ref lwgps_float_t format
 */
static lwgps_float_t
prv_parse_float_number(lwgps_t* gh, const char* t) {
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
    lwgps_float_t res;

    if (t == NULL) {
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d106      	bne.n	8003196 <prv_parse_float_number+0x1e>
        t = gh->p.term_str;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	3371      	adds	r3, #113	@ 0x71
 800318c:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 800318e:	e002      	b.n	8003196 <prv_parse_float_number+0x1e>
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	3301      	adds	r3, #1
 8003194:	603b      	str	r3, [r7, #0]
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d003      	beq.n	80031a4 <prv_parse_float_number+0x2c>
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	2b20      	cmp	r3, #32
 80031a2:	d0f5      	beq.n	8003190 <prv_parse_float_number+0x18>

#if LWGPS_CFG_DOUBLE
    res = strtod(t, NULL);                      /* Parse string to double */
 80031a4:	2100      	movs	r1, #0
 80031a6:	6838      	ldr	r0, [r7, #0]
 80031a8:	f008 fe8e 	bl	800bec8 <strtod>
 80031ac:	ed87 0b02 	vstr	d0, [r7, #8]
#else /* LWGPS_CFG_DOUBLE */
    res = strtof(t, NULL);                      /* Parse string to float */
#endif /* !LWGPS_CFG_DOUBLE */

    return FLT(res);                            /* Return casted value, based on float size */
 80031b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031b4:	ec43 2b17 	vmov	d7, r2, r3
}
 80031b8:	eeb0 0a47 	vmov.f32	s0, s14
 80031bc:	eef0 0a67 	vmov.f32	s1, s15
 80031c0:	3710      	adds	r7, #16
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
	...

080031c8 <prv_parse_lat_long>:
 *                  NMEA output for latitude is ddmm.sss and longitude is dddmm.sss
 * \param[in]       gh: GPS handle
 * \return          Latitude/Longitude value in degrees
 */
static lwgps_float_t
prv_parse_lat_long(lwgps_t* gh) {
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b088      	sub	sp, #32
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
    lwgps_float_t ll, deg, min;

    ll = prv_parse_float_number(gh, NULL);      /* Parse value as double */
 80031d0:	2100      	movs	r1, #0
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f7ff ffd0 	bl	8003178 <prv_parse_float_number>
 80031d8:	ed87 0b06 	vstr	d0, [r7, #24]
    deg = FLT((int)((int)ll / 100));            /* Get absolute degrees value, interested in integer part only */
 80031dc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80031e0:	f7fd fcd2 	bl	8000b88 <__aeabi_d2iz>
 80031e4:	4603      	mov	r3, r0
 80031e6:	4a1d      	ldr	r2, [pc, #116]	@ (800325c <prv_parse_lat_long+0x94>)
 80031e8:	fb82 1203 	smull	r1, r2, r2, r3
 80031ec:	1152      	asrs	r2, r2, #5
 80031ee:	17db      	asrs	r3, r3, #31
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7fd f9ae 	bl	8000554 <__aeabi_i2d>
 80031f8:	4602      	mov	r2, r0
 80031fa:	460b      	mov	r3, r1
 80031fc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    min = ll - (deg * FLT(100));                /* Get remaining part from full number, minutes */
 8003200:	f04f 0200 	mov.w	r2, #0
 8003204:	4b16      	ldr	r3, [pc, #88]	@ (8003260 <prv_parse_lat_long+0x98>)
 8003206:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800320a:	f7fd fa0d 	bl	8000628 <__aeabi_dmul>
 800320e:	4602      	mov	r2, r0
 8003210:	460b      	mov	r3, r1
 8003212:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003216:	f7fd f84f 	bl	80002b8 <__aeabi_dsub>
 800321a:	4602      	mov	r2, r0
 800321c:	460b      	mov	r3, r1
 800321e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    ll = deg + (min / FLT(60.0));               /* Calculate latitude/longitude */
 8003222:	f04f 0200 	mov.w	r2, #0
 8003226:	4b0f      	ldr	r3, [pc, #60]	@ (8003264 <prv_parse_lat_long+0x9c>)
 8003228:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800322c:	f7fd fb26 	bl	800087c <__aeabi_ddiv>
 8003230:	4602      	mov	r2, r0
 8003232:	460b      	mov	r3, r1
 8003234:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003238:	f7fd f840 	bl	80002bc <__adddf3>
 800323c:	4602      	mov	r2, r0
 800323e:	460b      	mov	r3, r1
 8003240:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return ll;
 8003244:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003248:	ec43 2b17 	vmov	d7, r2, r3
}
 800324c:	eeb0 0a47 	vmov.f32	s0, s14
 8003250:	eef0 0a67 	vmov.f32	s1, s15
 8003254:	3720      	adds	r7, #32
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	51eb851f 	.word	0x51eb851f
 8003260:	40590000 	.word	0x40590000
 8003264:	404e0000 	.word	0x404e0000

08003268 <prv_parse_term>:
 * \brief           Parse received term
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_parse_term(lwgps_t* gh) {
 8003268:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800326c:	b082      	sub	sp, #8
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
    if (gh->p.term_num == 0) {                  /* Check string type */
 8003272:	6879      	ldr	r1, [r7, #4]
 8003274:	f891 107f 	ldrb.w	r1, [r1, #127]	@ 0x7f
 8003278:	2900      	cmp	r1, #0
 800327a:	d169      	bne.n	8003350 <prv_parse_term+0xe8>
        if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
        } else if (!strncmp(gh->p.term_str, "$GPGGA", 6) || !strncmp(gh->p.term_str, "$GNGGA", 6)) {
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	3371      	adds	r3, #113	@ 0x71
 8003280:	2206      	movs	r2, #6
 8003282:	49ba      	ldr	r1, [pc, #744]	@ (800356c <prv_parse_term+0x304>)
 8003284:	4618      	mov	r0, r3
 8003286:	f008 ff38 	bl	800c0fa <strncmp>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d009      	beq.n	80032a4 <prv_parse_term+0x3c>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	3371      	adds	r3, #113	@ 0x71
 8003294:	2206      	movs	r2, #6
 8003296:	49b6      	ldr	r1, [pc, #728]	@ (8003570 <prv_parse_term+0x308>)
 8003298:	4618      	mov	r0, r3
 800329a:	f008 ff2e 	bl	800c0fa <strncmp>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d104      	bne.n	80032ae <prv_parse_term+0x46>
            gh->p.stat = STAT_GGA;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 80032ac:	e04e      	b.n	800334c <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
        } else if (!strncmp(gh->p.term_str, "$GPGSA", 6) || !strncmp(gh->p.term_str, "$GNGSA", 6)) {
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	3371      	adds	r3, #113	@ 0x71
 80032b2:	2206      	movs	r2, #6
 80032b4:	49af      	ldr	r1, [pc, #700]	@ (8003574 <prv_parse_term+0x30c>)
 80032b6:	4618      	mov	r0, r3
 80032b8:	f008 ff1f 	bl	800c0fa <strncmp>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d009      	beq.n	80032d6 <prv_parse_term+0x6e>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	3371      	adds	r3, #113	@ 0x71
 80032c6:	2206      	movs	r2, #6
 80032c8:	49ab      	ldr	r1, [pc, #684]	@ (8003578 <prv_parse_term+0x310>)
 80032ca:	4618      	mov	r0, r3
 80032cc:	f008 ff15 	bl	800c0fa <strncmp>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d104      	bne.n	80032e0 <prv_parse_term+0x78>
            gh->p.stat = STAT_GSA;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2202      	movs	r2, #2
 80032da:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 80032de:	e035      	b.n	800334c <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
        } else if (!strncmp(gh->p.term_str, "$GPGSV", 6) || !strncmp(gh->p.term_str, "$GNGSV", 6)) {
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	3371      	adds	r3, #113	@ 0x71
 80032e4:	2206      	movs	r2, #6
 80032e6:	49a5      	ldr	r1, [pc, #660]	@ (800357c <prv_parse_term+0x314>)
 80032e8:	4618      	mov	r0, r3
 80032ea:	f008 ff06 	bl	800c0fa <strncmp>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d009      	beq.n	8003308 <prv_parse_term+0xa0>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	3371      	adds	r3, #113	@ 0x71
 80032f8:	2206      	movs	r2, #6
 80032fa:	49a1      	ldr	r1, [pc, #644]	@ (8003580 <prv_parse_term+0x318>)
 80032fc:	4618      	mov	r0, r3
 80032fe:	f008 fefc 	bl	800c0fa <strncmp>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d104      	bne.n	8003312 <prv_parse_term+0xaa>
            gh->p.stat = STAT_GSV;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2203      	movs	r2, #3
 800330c:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 8003310:	e01c      	b.n	800334c <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
        } else if (!strncmp(gh->p.term_str, "$GPRMC", 6) || !strncmp(gh->p.term_str, "$GNRMC", 6)) {
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	3371      	adds	r3, #113	@ 0x71
 8003316:	2206      	movs	r2, #6
 8003318:	499a      	ldr	r1, [pc, #616]	@ (8003584 <prv_parse_term+0x31c>)
 800331a:	4618      	mov	r0, r3
 800331c:	f008 feed 	bl	800c0fa <strncmp>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d009      	beq.n	800333a <prv_parse_term+0xd2>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	3371      	adds	r3, #113	@ 0x71
 800332a:	2206      	movs	r2, #6
 800332c:	4996      	ldr	r1, [pc, #600]	@ (8003588 <prv_parse_term+0x320>)
 800332e:	4618      	mov	r0, r3
 8003330:	f008 fee3 	bl	800c0fa <strncmp>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d104      	bne.n	8003344 <prv_parse_term+0xdc>
            gh->p.stat = STAT_RMC;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2204      	movs	r2, #4
 800333e:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 8003342:	e003      	b.n	800334c <prv_parse_term+0xe4>
#if LWGPS_CFG_STATEMENT_PUBX
        } else if (!strncmp(gh->p.term_str, "$PUBX", 5)) {
            gh->p.stat = STAT_UBX;
#endif /* LWGPS_CFG_STATEMENT_PUBX */
        } else {
            gh->p.stat = STAT_UNKNOWN;          /* Invalid statement for library */
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
        }
        return 1;
 800334c:	2301      	movs	r3, #1
 800334e:	e231      	b.n	80037b4 <prv_parse_term+0x54c>
    }

    /* Start parsing terms */
    if (gh->p.stat == STAT_UNKNOWN) {
 8003350:	6879      	ldr	r1, [r7, #4]
 8003352:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 8003356:	2900      	cmp	r1, #0
 8003358:	f000 822b 	beq.w	80037b2 <prv_parse_term+0x54a>
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {        /* Process GPGGA statement */
 800335c:	6879      	ldr	r1, [r7, #4]
 800335e:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 8003362:	2901      	cmp	r1, #1
 8003364:	f040 80c9 	bne.w	80034fa <prv_parse_term+0x292>
        switch (gh->p.term_num) {
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 800336e:	3b01      	subs	r3, #1
 8003370:	2b0a      	cmp	r3, #10
 8003372:	f200 8213 	bhi.w	800379c <prv_parse_term+0x534>
 8003376:	a201      	add	r2, pc, #4	@ (adr r2, 800337c <prv_parse_term+0x114>)
 8003378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800337c:	080033a9 	.word	0x080033a9
 8003380:	08003423 	.word	0x08003423
 8003384:	08003439 	.word	0x08003439
 8003388:	08003463 	.word	0x08003463
 800338c:	08003479 	.word	0x08003479
 8003390:	080034a3 	.word	0x080034a3
 8003394:	080034b7 	.word	0x080034b7
 8003398:	0800379d 	.word	0x0800379d
 800339c:	080034cb 	.word	0x080034cb
 80033a0:	0800379d 	.word	0x0800379d
 80033a4:	080034e3 	.word	0x080034e3
            case 1:                             /* Process UTC time */
                gh->p.data.gga.hours = 10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80033ae:	3b30      	subs	r3, #48	@ 0x30
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	461a      	mov	r2, r3
 80033b4:	0092      	lsls	r2, r2, #2
 80033b6:	4413      	add	r3, r2
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	b2da      	uxtb	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80033c2:	4413      	add	r3, r2
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	3b30      	subs	r3, #48	@ 0x30
 80033c8:	b2da      	uxtb	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f883 20aa 	strb.w	r2, [r3, #170]	@ 0xaa
                gh->p.data.gga.minutes = 10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 80033d6:	3b30      	subs	r3, #48	@ 0x30
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	461a      	mov	r2, r3
 80033dc:	0092      	lsls	r2, r2, #2
 80033de:	4413      	add	r3, r2
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	b2da      	uxtb	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80033ea:	4413      	add	r3, r2
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	3b30      	subs	r3, #48	@ 0x30
 80033f0:	b2da      	uxtb	r2, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f883 20ab 	strb.w	r2, [r3, #171]	@ 0xab
                gh->p.data.gga.seconds = 10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 80033fe:	3b30      	subs	r3, #48	@ 0x30
 8003400:	b2db      	uxtb	r3, r3
 8003402:	461a      	mov	r2, r3
 8003404:	0092      	lsls	r2, r2, #2
 8003406:	4413      	add	r3, r2
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	b2da      	uxtb	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 8003412:	4413      	add	r3, r2
 8003414:	b2db      	uxtb	r3, r3
 8003416:	3b30      	subs	r3, #48	@ 0x30
 8003418:	b2da      	uxtb	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
                break;
 8003420:	e1c7      	b.n	80037b2 <prv_parse_term+0x54a>
            case 2:                             /* Latitude */
                gh->p.data.gga.latitude = prv_parse_lat_long(gh);   /* Parse latitude */
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f7ff fed0 	bl	80031c8 <prv_parse_lat_long>
 8003428:	eeb0 7a40 	vmov.f32	s14, s0
 800342c:	eef0 7a60 	vmov.f32	s15, s1
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	ed83 7b22 	vstr	d7, [r3, #136]	@ 0x88
                break;
 8003436:	e1bc      	b.n	80037b2 <prv_parse_term+0x54a>
            case 3:                             /* Latitude north/south information */
                if (gh->p.term_str[0] == 'S' || gh->p.term_str[0] == 's') {
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800343e:	2b53      	cmp	r3, #83	@ 0x53
 8003440:	d005      	beq.n	800344e <prv_parse_term+0x1e6>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8003448:	2b73      	cmp	r3, #115	@ 0x73
 800344a:	f040 81a9 	bne.w	80037a0 <prv_parse_term+0x538>
                    gh->p.data.gga.latitude = -gh->p.data.gga.latitude;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8003454:	4690      	mov	r8, r2
 8003456:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	e9c3 8922 	strd	r8, r9, [r3, #136]	@ 0x88
                }
                break;
 8003460:	e19e      	b.n	80037a0 <prv_parse_term+0x538>
            case 4:                             /* Longitude */
                gh->p.data.gga.longitude = prv_parse_lat_long(gh);  /* Parse longitude */
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f7ff feb0 	bl	80031c8 <prv_parse_lat_long>
 8003468:	eeb0 7a40 	vmov.f32	s14, s0
 800346c:	eef0 7a60 	vmov.f32	s15, s1
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	ed83 7b24 	vstr	d7, [r3, #144]	@ 0x90
                break;
 8003476:	e19c      	b.n	80037b2 <prv_parse_term+0x54a>
            case 5:                             /* Longitude east/west information */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800347e:	2b57      	cmp	r3, #87	@ 0x57
 8003480:	d005      	beq.n	800348e <prv_parse_term+0x226>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8003488:	2b77      	cmp	r3, #119	@ 0x77
 800348a:	f040 818b 	bne.w	80037a4 <prv_parse_term+0x53c>
                    gh->p.data.gga.longitude = -gh->p.data.gga.longitude;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8003494:	4614      	mov	r4, r2
 8003496:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	e9c3 4524 	strd	r4, r5, [r3, #144]	@ 0x90
                }
                break;
 80034a0:	e180      	b.n	80037a4 <prv_parse_term+0x53c>
            case 6:                             /* Fix status */
                gh->p.data.gga.fix = (uint8_t)prv_parse_number(gh, NULL);
 80034a2:	2100      	movs	r1, #0
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f7ff fe1d 	bl	80030e4 <prv_parse_number>
 80034aa:	4603      	mov	r3, r0
 80034ac:	b2da      	uxtb	r2, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
                break;
 80034b4:	e17d      	b.n	80037b2 <prv_parse_term+0x54a>
            case 7:                             /* Satellites in use */
                gh->p.data.gga.sats_in_use = (uint8_t)prv_parse_number(gh, NULL);
 80034b6:	2100      	movs	r1, #0
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f7ff fe13 	bl	80030e4 <prv_parse_number>
 80034be:	4603      	mov	r3, r0
 80034c0:	b2da      	uxtb	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
                break;
 80034c8:	e173      	b.n	80037b2 <prv_parse_term+0x54a>
            case 9:                             /* Altitude */
                gh->p.data.gga.altitude = prv_parse_float_number(gh, NULL);
 80034ca:	2100      	movs	r1, #0
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f7ff fe53 	bl	8003178 <prv_parse_float_number>
 80034d2:	eeb0 7a40 	vmov.f32	s14, s0
 80034d6:	eef0 7a60 	vmov.f32	s15, s1
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	ed83 7b26 	vstr	d7, [r3, #152]	@ 0x98
                break;
 80034e0:	e167      	b.n	80037b2 <prv_parse_term+0x54a>
            case 11:                            /* Altitude above ellipsoid */
                gh->p.data.gga.geo_sep = prv_parse_float_number(gh, NULL);
 80034e2:	2100      	movs	r1, #0
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f7ff fe47 	bl	8003178 <prv_parse_float_number>
 80034ea:	eeb0 7a40 	vmov.f32	s14, s0
 80034ee:	eef0 7a60 	vmov.f32	s15, s1
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	ed83 7b28 	vstr	d7, [r3, #160]	@ 0xa0
                break;
 80034f8:	e15b      	b.n	80037b2 <prv_parse_term+0x54a>
            default:
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {        /* Process GPGSA statement */
 80034fa:	6879      	ldr	r1, [r7, #4]
 80034fc:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 8003500:	2902      	cmp	r1, #2
 8003502:	f040 8083 	bne.w	800360c <prv_parse_term+0x3a4>
        switch (gh->p.term_num) {
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 800350c:	3b02      	subs	r3, #2
 800350e:	2b0f      	cmp	r3, #15
 8003510:	d860      	bhi.n	80035d4 <prv_parse_term+0x36c>
 8003512:	a201      	add	r2, pc, #4	@ (adr r2, 8003518 <prv_parse_term+0x2b0>)
 8003514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003518:	08003559 	.word	0x08003559
 800351c:	080035d5 	.word	0x080035d5
 8003520:	080035d5 	.word	0x080035d5
 8003524:	080035d5 	.word	0x080035d5
 8003528:	080035d5 	.word	0x080035d5
 800352c:	080035d5 	.word	0x080035d5
 8003530:	080035d5 	.word	0x080035d5
 8003534:	080035d5 	.word	0x080035d5
 8003538:	080035d5 	.word	0x080035d5
 800353c:	080035d5 	.word	0x080035d5
 8003540:	080035d5 	.word	0x080035d5
 8003544:	080035d5 	.word	0x080035d5
 8003548:	080035d5 	.word	0x080035d5
 800354c:	0800358d 	.word	0x0800358d
 8003550:	080035a5 	.word	0x080035a5
 8003554:	080035bd 	.word	0x080035bd
            case 2:                             /* Process fix mode */
                gh->p.data.gsa.fix_mode = (uint8_t)prv_parse_number(gh, NULL);
 8003558:	2100      	movs	r1, #0
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f7ff fdc2 	bl	80030e4 <prv_parse_number>
 8003560:	4603      	mov	r3, r0
 8003562:	b2da      	uxtb	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
                break;
 800356a:	e122      	b.n	80037b2 <prv_parse_term+0x54a>
 800356c:	0800ef60 	.word	0x0800ef60
 8003570:	0800ef68 	.word	0x0800ef68
 8003574:	0800ef70 	.word	0x0800ef70
 8003578:	0800ef78 	.word	0x0800ef78
 800357c:	0800ef80 	.word	0x0800ef80
 8003580:	0800ef88 	.word	0x0800ef88
 8003584:	0800ef90 	.word	0x0800ef90
 8003588:	0800ef98 	.word	0x0800ef98
            case 15:                            /* Process PDOP */
                gh->p.data.gsa.dop_p = prv_parse_float_number(gh, NULL);
 800358c:	2100      	movs	r1, #0
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f7ff fdf2 	bl	8003178 <prv_parse_float_number>
 8003594:	eeb0 7a40 	vmov.f32	s14, s0
 8003598:	eef0 7a60 	vmov.f32	s15, s1
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	ed83 7b26 	vstr	d7, [r3, #152]	@ 0x98
                break;
 80035a2:	e106      	b.n	80037b2 <prv_parse_term+0x54a>
            case 16:                            /* Process HDOP */
                gh->p.data.gsa.dop_h = prv_parse_float_number(gh, NULL);
 80035a4:	2100      	movs	r1, #0
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f7ff fde6 	bl	8003178 <prv_parse_float_number>
 80035ac:	eeb0 7a40 	vmov.f32	s14, s0
 80035b0:	eef0 7a60 	vmov.f32	s15, s1
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	ed83 7b22 	vstr	d7, [r3, #136]	@ 0x88
                break;
 80035ba:	e0fa      	b.n	80037b2 <prv_parse_term+0x54a>
            case 17:                            /* Process VDOP */
                gh->p.data.gsa.dop_v = prv_parse_float_number(gh, NULL);
 80035bc:	2100      	movs	r1, #0
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f7ff fdda 	bl	8003178 <prv_parse_float_number>
 80035c4:	eeb0 7a40 	vmov.f32	s14, s0
 80035c8:	eef0 7a60 	vmov.f32	s15, s1
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	ed83 7b24 	vstr	d7, [r3, #144]	@ 0x90
                break;
 80035d2:	e0ee      	b.n	80037b2 <prv_parse_term+0x54a>
            default:
                /* Parse satellite IDs */
                if (gh->p.term_num >= 3 && gh->p.term_num <= 14) {
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 80035da:	2b02      	cmp	r3, #2
 80035dc:	f240 80e4 	bls.w	80037a8 <prv_parse_term+0x540>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 80035e6:	2b0e      	cmp	r3, #14
 80035e8:	f200 80de 	bhi.w	80037a8 <prv_parse_term+0x540>
                    gh->p.data.gsa.satellites_ids[gh->p.term_num - 3] = (uint8_t)prv_parse_number(gh, NULL);
 80035ec:	2100      	movs	r1, #0
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f7ff fd78 	bl	80030e4 <prv_parse_number>
 80035f4:	4602      	mov	r2, r0
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 80035fc:	3b03      	subs	r3, #3
 80035fe:	b2d1      	uxtb	r1, r2
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	4413      	add	r3, r2
 8003604:	460a      	mov	r2, r1
 8003606:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
                }
                break;
 800360a:	e0cd      	b.n	80037a8 <prv_parse_term+0x540>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {        /* Process GPGSV statement */
 800360c:	6879      	ldr	r1, [r7, #4]
 800360e:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 8003612:	2903      	cmp	r1, #3
 8003614:	d11b      	bne.n	800364e <prv_parse_term+0x3e6>
        switch (gh->p.term_num) {
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 800361c:	2b02      	cmp	r3, #2
 800361e:	d002      	beq.n	8003626 <prv_parse_term+0x3be>
 8003620:	2b03      	cmp	r3, #3
 8003622:	d00a      	beq.n	800363a <prv_parse_term+0x3d2>
                                break;
                        }
                    }
                }
#endif /* LWGPS_CFG_STATEMENT_GPGSV_SAT_DET */
                break;
 8003624:	e0c5      	b.n	80037b2 <prv_parse_term+0x54a>
                gh->p.data.gsv.stat_num = (uint8_t)prv_parse_number(gh, NULL);
 8003626:	2100      	movs	r1, #0
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f7ff fd5b 	bl	80030e4 <prv_parse_number>
 800362e:	4603      	mov	r3, r0
 8003630:	b2da      	uxtb	r2, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
                break;
 8003638:	e0bb      	b.n	80037b2 <prv_parse_term+0x54a>
                gh->p.data.gsv.sats_in_view = (uint8_t)prv_parse_number(gh, NULL);
 800363a:	2100      	movs	r1, #0
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f7ff fd51 	bl	80030e4 <prv_parse_number>
 8003642:	4603      	mov	r3, r0
 8003644:	b2da      	uxtb	r2, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
                break;
 800364c:	e0b1      	b.n	80037b2 <prv_parse_term+0x54a>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {        /* Process GPRMC statement */
 800364e:	6879      	ldr	r1, [r7, #4]
 8003650:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 8003654:	2904      	cmp	r1, #4
 8003656:	f040 80ac 	bne.w	80037b2 <prv_parse_term+0x54a>
        switch (gh->p.term_num) {
 800365a:	6879      	ldr	r1, [r7, #4]
 800365c:	f891 107f 	ldrb.w	r1, [r1, #127]	@ 0x7f
 8003660:	3902      	subs	r1, #2
 8003662:	2909      	cmp	r1, #9
 8003664:	f200 80a2 	bhi.w	80037ac <prv_parse_term+0x544>
 8003668:	a001      	add	r0, pc, #4	@ (adr r0, 8003670 <prv_parse_term+0x408>)
 800366a:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800366e:	bf00      	nop
 8003670:	08003699 	.word	0x08003699
 8003674:	080037ad 	.word	0x080037ad
 8003678:	080037ad 	.word	0x080037ad
 800367c:	080037ad 	.word	0x080037ad
 8003680:	080037ad 	.word	0x080037ad
 8003684:	080036b3 	.word	0x080036b3
 8003688:	080036cb 	.word	0x080036cb
 800368c:	080036e3 	.word	0x080036e3
 8003690:	0800375d 	.word	0x0800375d
 8003694:	08003775 	.word	0x08003775
            case 2:                             /* Process valid status */
                gh->p.data.rmc.is_valid = (gh->p.term_str[0] == 'A');
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800369e:	2b41      	cmp	r3, #65	@ 0x41
 80036a0:	bf0c      	ite	eq
 80036a2:	2301      	moveq	r3, #1
 80036a4:	2300      	movne	r3, #0
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	461a      	mov	r2, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
                break;
 80036b0:	e07f      	b.n	80037b2 <prv_parse_term+0x54a>
            case 7:                             /* Process ground speed in knots */
                gh->p.data.rmc.speed = prv_parse_float_number(gh, NULL);
 80036b2:	2100      	movs	r1, #0
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f7ff fd5f 	bl	8003178 <prv_parse_float_number>
 80036ba:	eeb0 7a40 	vmov.f32	s14, s0
 80036be:	eef0 7a60 	vmov.f32	s15, s1
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	ed83 7b24 	vstr	d7, [r3, #144]	@ 0x90
                break;
 80036c8:	e073      	b.n	80037b2 <prv_parse_term+0x54a>
            case 8:                             /* Process true ground coarse */
                gh->p.data.rmc.course = prv_parse_float_number(gh, NULL);
 80036ca:	2100      	movs	r1, #0
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f7ff fd53 	bl	8003178 <prv_parse_float_number>
 80036d2:	eeb0 7a40 	vmov.f32	s14, s0
 80036d6:	eef0 7a60 	vmov.f32	s15, s1
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	ed83 7b26 	vstr	d7, [r3, #152]	@ 0x98
                break;
 80036e0:	e067      	b.n	80037b2 <prv_parse_term+0x54a>
            case 9:                             /* Process date */
                gh->p.data.rmc.date = (uint8_t)(10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]));
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80036e8:	3b30      	subs	r3, #48	@ 0x30
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	461a      	mov	r2, r3
 80036ee:	0092      	lsls	r2, r2, #2
 80036f0:	4413      	add	r3, r2
 80036f2:	005b      	lsls	r3, r3, #1
 80036f4:	b2da      	uxtb	r2, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80036fc:	4413      	add	r3, r2
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	3b30      	subs	r3, #48	@ 0x30
 8003702:	b2da      	uxtb	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
                gh->p.data.rmc.month = (uint8_t)(10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]));
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 8003710:	3b30      	subs	r3, #48	@ 0x30
 8003712:	b2db      	uxtb	r3, r3
 8003714:	461a      	mov	r2, r3
 8003716:	0092      	lsls	r2, r2, #2
 8003718:	4413      	add	r3, r2
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	b2da      	uxtb	r2, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8003724:	4413      	add	r3, r2
 8003726:	b2db      	uxtb	r3, r3
 8003728:	3b30      	subs	r3, #48	@ 0x30
 800372a:	b2da      	uxtb	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
                gh->p.data.rmc.year = (uint8_t)(10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]));
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8003738:	3b30      	subs	r3, #48	@ 0x30
 800373a:	b2db      	uxtb	r3, r3
 800373c:	461a      	mov	r2, r3
 800373e:	0092      	lsls	r2, r2, #2
 8003740:	4413      	add	r3, r2
 8003742:	005b      	lsls	r3, r3, #1
 8003744:	b2da      	uxtb	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 800374c:	4413      	add	r3, r2
 800374e:	b2db      	uxtb	r3, r3
 8003750:	3b30      	subs	r3, #48	@ 0x30
 8003752:	b2da      	uxtb	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f883 208b 	strb.w	r2, [r3, #139]	@ 0x8b
                break;
 800375a:	e02a      	b.n	80037b2 <prv_parse_term+0x54a>
            case 10:                            /* Process magnetic variation */
                gh->p.data.rmc.variation = prv_parse_float_number(gh, NULL);
 800375c:	2100      	movs	r1, #0
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f7ff fd0a 	bl	8003178 <prv_parse_float_number>
 8003764:	eeb0 7a40 	vmov.f32	s14, s0
 8003768:	eef0 7a60 	vmov.f32	s15, s1
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	ed83 7b28 	vstr	d7, [r3, #160]	@ 0xa0
                break;
 8003772:	e01e      	b.n	80037b2 <prv_parse_term+0x54a>
            case 11:                            /* Process magnetic variation east/west */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 8003774:	6879      	ldr	r1, [r7, #4]
 8003776:	f891 1071 	ldrb.w	r1, [r1, #113]	@ 0x71
 800377a:	2957      	cmp	r1, #87	@ 0x57
 800377c:	d004      	beq.n	8003788 <prv_parse_term+0x520>
 800377e:	6879      	ldr	r1, [r7, #4]
 8003780:	f891 1071 	ldrb.w	r1, [r1, #113]	@ 0x71
 8003784:	2977      	cmp	r1, #119	@ 0x77
 8003786:	d113      	bne.n	80037b0 <prv_parse_term+0x548>
                    gh->p.data.rmc.variation = -gh->p.data.rmc.variation;
 8003788:	6879      	ldr	r1, [r7, #4]
 800378a:	e9d1 0128 	ldrd	r0, r1, [r1, #160]	@ 0xa0
 800378e:	4602      	mov	r2, r0
 8003790:	f081 4300 	eor.w	r3, r1, #2147483648	@ 0x80000000
 8003794:	6879      	ldr	r1, [r7, #4]
 8003796:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
                }
                break;
 800379a:	e009      	b.n	80037b0 <prv_parse_term+0x548>
                break;
 800379c:	bf00      	nop
 800379e:	e008      	b.n	80037b2 <prv_parse_term+0x54a>
                break;
 80037a0:	bf00      	nop
 80037a2:	e006      	b.n	80037b2 <prv_parse_term+0x54a>
                break;
 80037a4:	bf00      	nop
 80037a6:	e004      	b.n	80037b2 <prv_parse_term+0x54a>
                break;
 80037a8:	bf00      	nop
 80037aa:	e002      	b.n	80037b2 <prv_parse_term+0x54a>
            default:
                break;
 80037ac:	bf00      	nop
 80037ae:	e000      	b.n	80037b2 <prv_parse_term+0x54a>
                break;
 80037b0:	bf00      	nop
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
#endif /* LWGPS_CFG_STATEMENT_PUBX */
    }
    return 1;
 80037b2:	2301      	movs	r3, #1
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3708      	adds	r7, #8
 80037b8:	46bd      	mov	sp, r7
 80037ba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80037be:	bf00      	nop

080037c0 <prv_check_crc>:
 * \brief           Compare calculated CRC with received CRC
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_check_crc(lwgps_t* gh) {
 80037c0:	b480      	push	{r7}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
    uint8_t crc;
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04) | (CHTN(gh->p.term_str[1]) & 0x0F);   /* Convert received CRC from string (hex) to number */
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80037ce:	2b2f      	cmp	r3, #47	@ 0x2f
 80037d0:	d90d      	bls.n	80037ee <prv_check_crc+0x2e>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80037d8:	2b39      	cmp	r3, #57	@ 0x39
 80037da:	d808      	bhi.n	80037ee <prv_check_crc+0x2e>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80037e2:	3b30      	subs	r3, #48	@ 0x30
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	b25b      	sxtb	r3, r3
 80037e8:	011b      	lsls	r3, r3, #4
 80037ea:	b25a      	sxtb	r2, r3
 80037ec:	e026      	b.n	800383c <prv_check_crc+0x7c>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80037f4:	2b60      	cmp	r3, #96	@ 0x60
 80037f6:	d90d      	bls.n	8003814 <prv_check_crc+0x54>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80037fe:	2b7a      	cmp	r3, #122	@ 0x7a
 8003800:	d808      	bhi.n	8003814 <prv_check_crc+0x54>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8003808:	3b57      	subs	r3, #87	@ 0x57
 800380a:	b2db      	uxtb	r3, r3
 800380c:	b25b      	sxtb	r3, r3
 800380e:	011b      	lsls	r3, r3, #4
 8003810:	b25a      	sxtb	r2, r3
 8003812:	e013      	b.n	800383c <prv_check_crc+0x7c>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800381a:	2b40      	cmp	r3, #64	@ 0x40
 800381c:	d90d      	bls.n	800383a <prv_check_crc+0x7a>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8003824:	2b5a      	cmp	r3, #90	@ 0x5a
 8003826:	d808      	bhi.n	800383a <prv_check_crc+0x7a>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800382e:	3b37      	subs	r3, #55	@ 0x37
 8003830:	b2db      	uxtb	r3, r3
 8003832:	b25b      	sxtb	r3, r3
 8003834:	011b      	lsls	r3, r3, #4
 8003836:	b25a      	sxtb	r2, r3
 8003838:	e000      	b.n	800383c <prv_check_crc+0x7c>
 800383a:	2200      	movs	r2, #0
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8003842:	2b2f      	cmp	r3, #47	@ 0x2f
 8003844:	d90c      	bls.n	8003860 <prv_check_crc+0xa0>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 800384c:	2b39      	cmp	r3, #57	@ 0x39
 800384e:	d807      	bhi.n	8003860 <prv_check_crc+0xa0>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8003856:	b25b      	sxtb	r3, r3
 8003858:	f003 030f 	and.w	r3, r3, #15
 800385c:	b25b      	sxtb	r3, r3
 800385e:	e028      	b.n	80038b2 <prv_check_crc+0xf2>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8003866:	2b60      	cmp	r3, #96	@ 0x60
 8003868:	d90e      	bls.n	8003888 <prv_check_crc+0xc8>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8003870:	2b7a      	cmp	r3, #122	@ 0x7a
 8003872:	d809      	bhi.n	8003888 <prv_check_crc+0xc8>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 800387a:	3b57      	subs	r3, #87	@ 0x57
 800387c:	b2db      	uxtb	r3, r3
 800387e:	b25b      	sxtb	r3, r3
 8003880:	f003 030f 	and.w	r3, r3, #15
 8003884:	b25b      	sxtb	r3, r3
 8003886:	e014      	b.n	80038b2 <prv_check_crc+0xf2>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 800388e:	2b40      	cmp	r3, #64	@ 0x40
 8003890:	d90e      	bls.n	80038b0 <prv_check_crc+0xf0>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8003898:	2b5a      	cmp	r3, #90	@ 0x5a
 800389a:	d809      	bhi.n	80038b0 <prv_check_crc+0xf0>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80038a2:	3b37      	subs	r3, #55	@ 0x37
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	b25b      	sxtb	r3, r3
 80038a8:	f003 030f 	and.w	r3, r3, #15
 80038ac:	b25b      	sxtb	r3, r3
 80038ae:	e000      	b.n	80038b2 <prv_check_crc+0xf2>
 80038b0:	2300      	movs	r3, #0
 80038b2:	4313      	orrs	r3, r2
 80038b4:	b25b      	sxtb	r3, r3
 80038b6:	73fb      	strb	r3, [r7, #15]
    return gh->p.crc_calc == crc;               /* They must match! */
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80038be:	7bfa      	ldrb	r2, [r7, #15]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	bf0c      	ite	eq
 80038c4:	2301      	moveq	r3, #1
 80038c6:	2300      	movne	r3, #0
 80038c8:	b2db      	uxtb	r3, r3
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3714      	adds	r7, #20
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr

080038d6 <prv_copy_from_tmp_memory>:
 * \brief           Copy temporary memory to user memory
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_copy_from_tmp_memory(lwgps_t* gh) {
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b082      	sub	sp, #8
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
    if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d136      	bne.n	8003956 <prv_copy_from_tmp_memory+0x80>
        gh->latitude = gh->p.data.gga.latitude;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 80038ee:	6879      	ldr	r1, [r7, #4]
 80038f0:	e9c1 2300 	strd	r2, r3, [r1]
        gh->longitude = gh->p.data.gga.longitude;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 80038fa:	6879      	ldr	r1, [r7, #4]
 80038fc:	e9c1 2302 	strd	r2, r3, [r1, #8]
        gh->altitude = gh->p.data.gga.altitude;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 8003906:	6879      	ldr	r1, [r7, #4]
 8003908:	e9c1 2304 	strd	r2, r3, [r1, #16]
        gh->geo_sep = gh->p.data.gga.geo_sep;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 8003912:	6879      	ldr	r1, [r7, #4]
 8003914:	e9c1 2306 	strd	r2, r3, [r1, #24]
        gh->sats_in_use = gh->p.data.gga.sats_in_use;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f893 20a8 	ldrb.w	r2, [r3, #168]	@ 0xa8
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f883 2020 	strb.w	r2, [r3, #32]
        gh->fix = gh->p.data.gga.fix;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f893 20a9 	ldrb.w	r2, [r3, #169]	@ 0xa9
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        gh->hours = gh->p.data.gga.hours;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f893 20aa 	ldrb.w	r2, [r3, #170]	@ 0xaa
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
        gh->minutes = gh->p.data.gga.minutes;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f893 20ab 	ldrb.w	r2, [r3, #171]	@ 0xab
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
        gh->seconds = gh->p.data.gga.seconds;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f893 20ac 	ldrb.w	r2, [r3, #172]	@ 0xac
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003954:	e061      	b.n	8003a1a <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800395c:	2b02      	cmp	r3, #2
 800395e:	d121      	bne.n	80039a4 <prv_copy_from_tmp_memory+0xce>
        gh->dop_h = gh->p.data.gsa.dop_h;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8003966:	6879      	ldr	r1, [r7, #4]
 8003968:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
        gh->dop_p = gh->p.data.gsa.dop_p;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 8003972:	6879      	ldr	r1, [r7, #4]
 8003974:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
        gh->dop_v = gh->p.data.gsa.dop_v;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 800397e:	6879      	ldr	r1, [r7, #4]
 8003980:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
        gh->fix_mode = gh->p.data.gsa.fix_mode;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f893 20a0 	ldrb.w	r2, [r3, #160]	@ 0xa0
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        memcpy(gh->satellites_ids, gh->p.data.gsa.satellites_ids, sizeof(gh->satellites_ids));
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f103 0041 	add.w	r0, r3, #65	@ 0x41
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	33a1      	adds	r3, #161	@ 0xa1
 800399a:	220c      	movs	r2, #12
 800399c:	4619      	mov	r1, r3
 800399e:	f008 fc42 	bl	800c226 <memcpy>
 80039a2:	e03a      	b.n	8003a1a <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 80039aa:	2b03      	cmp	r3, #3
 80039ac:	d106      	bne.n	80039bc <prv_copy_from_tmp_memory+0xe6>
        gh->sats_in_view = gh->p.data.gsv.sats_in_view;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 2088 	ldrb.w	r2, [r3, #136]	@ 0x88
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 80039ba:	e02e      	b.n	8003a1a <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 80039c2:	2b04      	cmp	r3, #4
 80039c4:	d129      	bne.n	8003a1a <prv_copy_from_tmp_memory+0x144>
        gh->course = gh->p.data.rmc.course;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 80039cc:	6879      	ldr	r1, [r7, #4]
 80039ce:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
        gh->is_valid = gh->p.data.rmc.is_valid;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 2088 	ldrb.w	r2, [r3, #136]	@ 0x88
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
        gh->speed = gh->p.data.rmc.speed;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 80039e4:	6879      	ldr	r1, [r7, #4]
 80039e6:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
        gh->variation = gh->p.data.rmc.variation;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 80039f0:	6879      	ldr	r1, [r7, #4]
 80039f2:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
        gh->date = gh->p.data.rmc.date;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f893 2089 	ldrb.w	r2, [r3, #137]	@ 0x89
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
        gh->month = gh->p.data.rmc.month;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f893 208a 	ldrb.w	r2, [r3, #138]	@ 0x8a
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
        gh->year = gh->p.data.rmc.year;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 208b 	ldrb.w	r2, [r3, #139]	@ 0x8b
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
        gh->clk_bias = gh->p.data.time.clk_bias;
        gh->clk_drift = gh->p.data.time.clk_drift;
        gh->tp_gran = gh->p.data.time.tp_gran;
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
    }
    return 1;
 8003a1a:	2301      	movs	r3, #1
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3708      	adds	r7, #8
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       gh: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* gh) {
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
    memset(gh, 0x00, sizeof(*gh));              /* Reset structure */
 8003a2c:	22b0      	movs	r2, #176	@ 0xb0
 8003a2e:	2100      	movs	r1, #0
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f008 fb5a 	bl	800c0ea <memset>
    return 1;
 8003a36:	2301      	movs	r3, #1
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3708      	adds	r7, #8
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <lwgps_process>:
 */
uint8_t
#if LWGPS_CFG_STATUS || __DOXYGEN__
lwgps_process(lwgps_t* gh, const void* data, size_t len, lwgps_process_fn evt_fn) {
#else /* LWGPS_CFG_STATUS */
lwgps_process(lwgps_t* gh, const void* data, size_t len) {
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
#endif /* !LWGPS_CFG_STATUS */
    const uint8_t* d = data;
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	617b      	str	r3, [r7, #20]

    for (; len > 0; ++d, --len) {               /* Process all bytes */
 8003a50:	e0ad      	b.n	8003bae <lwgps_process+0x16e>
        if (*d == '$') {                        /* Check for beginning of NMEA line */
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	2b24      	cmp	r3, #36	@ 0x24
 8003a58:	d128      	bne.n	8003aac <lwgps_process+0x6c>
            memset(&gh->p, 0x00, sizeof(gh->p));/* Reset private memory */
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	3370      	adds	r3, #112	@ 0x70
 8003a5e:	2240      	movs	r2, #64	@ 0x40
 8003a60:	2100      	movs	r1, #0
 8003a62:	4618      	mov	r0, r3
 8003a64:	f008 fb41 	bl	800c0ea <memset>
            TERM_ADD(gh, *d);                   /* Add character to term */
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8003a6e:	2b0b      	cmp	r3, #11
 8003a70:	f200 8097 	bhi.w	8003ba2 <lwgps_process+0x162>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	781a      	ldrb	r2, [r3, #0]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	440b      	add	r3, r1
 8003a84:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8003a8e:	3301      	adds	r3, #1
 8003a90:	b2da      	uxtb	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 8003aaa:	e07a      	b.n	8003ba2 <lwgps_process+0x162>
        } else if (*d == ',') {                 /* Term separator character */
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	2b2c      	cmp	r3, #44	@ 0x2c
 8003ab2:	d11d      	bne.n	8003af0 <lwgps_process+0xb0>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 8003ab4:	68f8      	ldr	r0, [r7, #12]
 8003ab6:	f7ff fbd7 	bl	8003268 <prv_parse_term>
            CRC_ADD(gh, *d);                    /* Add character to CRC computation */
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f893 2081 	ldrb.w	r2, [r3, #129]	@ 0x81
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	4053      	eors	r3, r2
 8003ac6:	b2da      	uxtb	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
            TERM_NEXT(gh);                      /* Start with next term */
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	b2da      	uxtb	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
 8003aee:	e058      	b.n	8003ba2 <lwgps_process+0x162>
        } else if (*d == '*') {                 /* Start indicates end of data for CRC computation */
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	2b2a      	cmp	r3, #42	@ 0x2a
 8003af6:	d117      	bne.n	8003b28 <lwgps_process+0xe8>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 8003af8:	68f8      	ldr	r0, [r7, #12]
 8003afa:	f7ff fbb5 	bl	8003268 <prv_parse_term>
            gh->p.star = 1;                     /* STAR detected */
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2201      	movs	r2, #1
 8003b02:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
            TERM_NEXT(gh);                      /* Start with next term */
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	b2da      	uxtb	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
 8003b26:	e03c      	b.n	8003ba2 <lwgps_process+0x162>
        } else if (*d == '\r') {
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	2b0d      	cmp	r3, #13
 8003b2e:	d109      	bne.n	8003b44 <lwgps_process+0x104>
            if (prv_check_crc(gh)) {            /* Check for CRC result */
 8003b30:	68f8      	ldr	r0, [r7, #12]
 8003b32:	f7ff fe45 	bl	80037c0 <prv_check_crc>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d032      	beq.n	8003ba2 <lwgps_process+0x162>
                /* CRC is OK, in theory we can copy data from statements to user data */
                prv_copy_from_tmp_memory(gh);   /* Copy memory from temporary to user memory */
 8003b3c:	68f8      	ldr	r0, [r7, #12]
 8003b3e:	f7ff feca 	bl	80038d6 <prv_copy_from_tmp_memory>
 8003b42:	e02e      	b.n	8003ba2 <lwgps_process+0x162>
            } else if (evt_fn != NULL) {
                evt_fn(STAT_CHECKSUM_FAIL);
#endif /* LWGPS_CFG_STATUS */
            }
        } else {
            if (!gh->p.star) {                  /* Add to CRC only if star not yet detected */
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d109      	bne.n	8003b62 <lwgps_process+0x122>
                CRC_ADD(gh, *d);                /* Add to CRC */
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f893 2081 	ldrb.w	r2, [r3, #129]	@ 0x81
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	4053      	eors	r3, r2
 8003b5a:	b2da      	uxtb	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
            }
            TERM_ADD(gh, *d);                   /* Add character to term */
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8003b68:	2b0b      	cmp	r3, #11
 8003b6a:	d81a      	bhi.n	8003ba2 <lwgps_process+0x162>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8003b72:	4619      	mov	r1, r3
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	781a      	ldrb	r2, [r3, #0]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	440b      	add	r3, r1
 8003b7c:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8003b86:	3301      	adds	r3, #1
 8003b88:	b2da      	uxtb	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8003b96:	461a      	mov	r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
    for (; len > 0; ++d, --len) {               /* Process all bytes */
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	617b      	str	r3, [r7, #20]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	3b01      	subs	r3, #1
 8003bac:	607b      	str	r3, [r7, #4]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	f47f af4e 	bne.w	8003a52 <lwgps_process+0x12>
        }
    }
    return 1;
 8003bb6:	2301      	movs	r3, #1
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3718      	adds	r7, #24
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <HAL_UART_RxCpltCallback>:
{
	return ( A - B) * (E - D ) / (C - B )+ D ;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
	if(huart==&huart2){
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a29      	ldr	r2, [pc, #164]	@ (8003c70 <HAL_UART_RxCpltCallback+0xb0>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d127      	bne.n	8003c20 <HAL_UART_RxCpltCallback+0x60>
	if(rx_data != '\n' && rx_index < RX_BUFFER_SIZE) {
 8003bd0:	4b28      	ldr	r3, [pc, #160]	@ (8003c74 <HAL_UART_RxCpltCallback+0xb4>)
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	2b0a      	cmp	r3, #10
 8003bd6:	d010      	beq.n	8003bfa <HAL_UART_RxCpltCallback+0x3a>
 8003bd8:	4b27      	ldr	r3, [pc, #156]	@ (8003c78 <HAL_UART_RxCpltCallback+0xb8>)
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	b25b      	sxtb	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	db0b      	blt.n	8003bfa <HAL_UART_RxCpltCallback+0x3a>
		rx_buffer[rx_index++] = rx_data;
 8003be2:	4b25      	ldr	r3, [pc, #148]	@ (8003c78 <HAL_UART_RxCpltCallback+0xb8>)
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	1c5a      	adds	r2, r3, #1
 8003be8:	b2d1      	uxtb	r1, r2
 8003bea:	4a23      	ldr	r2, [pc, #140]	@ (8003c78 <HAL_UART_RxCpltCallback+0xb8>)
 8003bec:	7011      	strb	r1, [r2, #0]
 8003bee:	461a      	mov	r2, r3
 8003bf0:	4b20      	ldr	r3, [pc, #128]	@ (8003c74 <HAL_UART_RxCpltCallback+0xb4>)
 8003bf2:	7819      	ldrb	r1, [r3, #0]
 8003bf4:	4b21      	ldr	r3, [pc, #132]	@ (8003c7c <HAL_UART_RxCpltCallback+0xbc>)
 8003bf6:	5499      	strb	r1, [r3, r2]
 8003bf8:	e00d      	b.n	8003c16 <HAL_UART_RxCpltCallback+0x56>
	} else {
		lwgps_process(&gps, rx_buffer, rx_index+1);
 8003bfa:	4b1f      	ldr	r3, [pc, #124]	@ (8003c78 <HAL_UART_RxCpltCallback+0xb8>)
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	3301      	adds	r3, #1
 8003c00:	461a      	mov	r2, r3
 8003c02:	491e      	ldr	r1, [pc, #120]	@ (8003c7c <HAL_UART_RxCpltCallback+0xbc>)
 8003c04:	481e      	ldr	r0, [pc, #120]	@ (8003c80 <HAL_UART_RxCpltCallback+0xc0>)
 8003c06:	f7ff ff1b 	bl	8003a40 <lwgps_process>
		rx_index = 0;
 8003c0a:	4b1b      	ldr	r3, [pc, #108]	@ (8003c78 <HAL_UART_RxCpltCallback+0xb8>)
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	701a      	strb	r2, [r3, #0]
		rx_data = 0;
 8003c10:	4b18      	ldr	r3, [pc, #96]	@ (8003c74 <HAL_UART_RxCpltCallback+0xb4>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8003c16:	2201      	movs	r2, #1
 8003c18:	4916      	ldr	r1, [pc, #88]	@ (8003c74 <HAL_UART_RxCpltCallback+0xb4>)
 8003c1a:	4815      	ldr	r0, [pc, #84]	@ (8003c70 <HAL_UART_RxCpltCallback+0xb0>)
 8003c1c:	f006 fa36 	bl	800a08c <HAL_UART_Receive_IT>
	}


	if(huart == &huart6){
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a18      	ldr	r2, [pc, #96]	@ (8003c84 <HAL_UART_RxCpltCallback+0xc4>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d11e      	bne.n	8003c66 <HAL_UART_RxCpltCallback+0xa6>
		if(rx_data_EGU != '\n' && rx_index_EGU <34){//sol taraf silinebilir
 8003c28:	4b17      	ldr	r3, [pc, #92]	@ (8003c88 <HAL_UART_RxCpltCallback+0xc8>)
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	2b0a      	cmp	r3, #10
 8003c2e:	d00f      	beq.n	8003c50 <HAL_UART_RxCpltCallback+0x90>
 8003c30:	4b16      	ldr	r3, [pc, #88]	@ (8003c8c <HAL_UART_RxCpltCallback+0xcc>)
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	2b21      	cmp	r3, #33	@ 0x21
 8003c36:	d80b      	bhi.n	8003c50 <HAL_UART_RxCpltCallback+0x90>
			EGU_RX_BUFFER[rx_index_EGU++]=rx_data_EGU;
 8003c38:	4b14      	ldr	r3, [pc, #80]	@ (8003c8c <HAL_UART_RxCpltCallback+0xcc>)
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	1c5a      	adds	r2, r3, #1
 8003c3e:	b2d1      	uxtb	r1, r2
 8003c40:	4a12      	ldr	r2, [pc, #72]	@ (8003c8c <HAL_UART_RxCpltCallback+0xcc>)
 8003c42:	7011      	strb	r1, [r2, #0]
 8003c44:	461a      	mov	r2, r3
 8003c46:	4b10      	ldr	r3, [pc, #64]	@ (8003c88 <HAL_UART_RxCpltCallback+0xc8>)
 8003c48:	7819      	ldrb	r1, [r3, #0]
 8003c4a:	4b11      	ldr	r3, [pc, #68]	@ (8003c90 <HAL_UART_RxCpltCallback+0xd0>)
 8003c4c:	5499      	strb	r1, [r3, r2]
 8003c4e:	e005      	b.n	8003c5c <HAL_UART_RxCpltCallback+0x9c>

		}
		else
		{
			rx_data_EGU=0;
 8003c50:	4b0d      	ldr	r3, [pc, #52]	@ (8003c88 <HAL_UART_RxCpltCallback+0xc8>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	701a      	strb	r2, [r3, #0]
			rx_index_EGU=0;
 8003c56:	4b0d      	ldr	r3, [pc, #52]	@ (8003c8c <HAL_UART_RxCpltCallback+0xcc>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	701a      	strb	r2, [r3, #0]

		}
	HAL_UART_Receive_IT(&huart6, &rx_data_EGU, 1);
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	490a      	ldr	r1, [pc, #40]	@ (8003c88 <HAL_UART_RxCpltCallback+0xc8>)
 8003c60:	4808      	ldr	r0, [pc, #32]	@ (8003c84 <HAL_UART_RxCpltCallback+0xc4>)
 8003c62:	f006 fa13 	bl	800a08c <HAL_UART_Receive_IT>
		}
}
 8003c66:	bf00      	nop
 8003c68:	3708      	adds	r7, #8
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	200004b8 	.word	0x200004b8
 8003c74:	20000635 	.word	0x20000635
 8003c78:	20000634 	.word	0x20000634
 8003c7c:	200005b4 	.word	0x200005b4
 8003c80:	200022d0 	.word	0x200022d0
 8003c84:	20000540 	.word	0x20000540
 8003c88:	200005a6 	.word	0x200005a6
 8003c8c:	200005a7 	.word	0x200005a7
 8003c90:	20000584 	.word	0x20000584

08003c94 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]

	if(htim==&htim11){ // 1 sn
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4a17      	ldr	r2, [pc, #92]	@ (8003cfc <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d102      	bne.n	8003caa <HAL_TIM_PeriodElapsedCallback+0x16>
   lora_flag=1;
 8003ca4:	4b16      	ldr	r3, [pc, #88]	@ (8003d00 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	701a      	strb	r2, [r3, #0]

	}
	if(htim==&htim10){ //30ms
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a15      	ldr	r2, [pc, #84]	@ (8003d04 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d102      	bne.n	8003cb8 <HAL_TIM_PeriodElapsedCallback+0x24>
	sensor_flag=1;
 8003cb2:	4b15      	ldr	r3, [pc, #84]	@ (8003d08 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	701a      	strb	r2, [r3, #0]

	}
	if(htim==&htim6){ // 200 ms timer
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a14      	ldr	r2, [pc, #80]	@ (8003d0c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d118      	bne.n	8003cf2 <HAL_TIM_PeriodElapsedCallback+0x5e>
	timer_200ms_flag = 1;
 8003cc0:	4b13      	ldr	r3, [pc, #76]	@ (8003d10 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	701a      	strb	r2, [r3, #0]
	egu_durum_flag=1;
 8003cc6:	4b13      	ldr	r3, [pc, #76]	@ (8003d14 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003cc8:	2201      	movs	r2, #1
 8003cca:	701a      	strb	r2, [r3, #0]

	counter++;
 8003ccc:	4b12      	ldr	r3, [pc, #72]	@ (8003d18 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	b2da      	uxtb	r2, r3
 8003cd4:	4b10      	ldr	r3, [pc, #64]	@ (8003d18 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8003cd6:	701a      	strb	r2, [r3, #0]
		if(counter == 15)
 8003cd8:	4b0f      	ldr	r3, [pc, #60]	@ (8003d18 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	2b0f      	cmp	r3, #15
 8003cde:	d108      	bne.n	8003cf2 <HAL_TIM_PeriodElapsedCallback+0x5e>
		{
			adc_flag=1;
 8003ce0:	4b0e      	ldr	r3, [pc, #56]	@ (8003d1c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	701a      	strb	r2, [r3, #0]
			counter =0;
 8003ce6:	4b0c      	ldr	r3, [pc, #48]	@ (8003d18 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	701a      	strb	r2, [r3, #0]
			HAL_ADC_Start_IT(&hadc1);
 8003cec:	480c      	ldr	r0, [pc, #48]	@ (8003d20 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003cee:	f002 f879 	bl	8005de4 <HAL_ADC_Start_IT>


	}


}
 8003cf2:	bf00      	nop
 8003cf4:	3708      	adds	r7, #8
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	2000042c 	.word	0x2000042c
 8003d00:	20002292 	.word	0x20002292
 8003d04:	200003e4 	.word	0x200003e4
 8003d08:	20002293 	.word	0x20002293
 8003d0c:	20000354 	.word	0x20000354
 8003d10:	2000063d 	.word	0x2000063d
 8003d14:	20002294 	.word	0x20002294
 8003d18:	200005b0 	.word	0x200005b0
 8003d1c:	200005b1 	.word	0x200005b1
 8003d20:	20000260 	.word	0x20000260

08003d24 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1 )
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a08      	ldr	r2, [pc, #32]	@ (8003d54 <HAL_ADC_ConvCpltCallback+0x30>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d109      	bne.n	8003d4a <HAL_ADC_ConvCpltCallback+0x26>
	{
		adc= HAL_ADC_GetValue(&hadc1);
 8003d36:	4808      	ldr	r0, [pc, #32]	@ (8003d58 <HAL_ADC_ConvCpltCallback+0x34>)
 8003d38:	f002 fa42 	bl	80061c0 <HAL_ADC_GetValue>
 8003d3c:	ee07 0a90 	vmov	s15, r0
 8003d40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d44:	4b05      	ldr	r3, [pc, #20]	@ (8003d5c <HAL_ADC_ConvCpltCallback+0x38>)
 8003d46:	edc3 7a00 	vstr	s15, [r3]


		adc_flag == 0;
	}
}
 8003d4a:	bf00      	nop
 8003d4c:	3708      	adds	r7, #8
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	40012000 	.word	0x40012000
 8003d58:	20000260 	.word	0x20000260
 8003d5c:	200005ac 	.word	0x200005ac

08003d60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003d66:	f001 ff63 	bl	8005c30 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003d6a:	f000 fc89 	bl	8004680 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003d6e:	f000 ff05 	bl	8004b7c <MX_GPIO_Init>
  MX_ADC1_Init();
 8003d72:	f000 fcf1 	bl	8004758 <MX_ADC1_Init>
  MX_I2C1_Init();
 8003d76:	f000 fd41 	bl	80047fc <MX_I2C1_Init>
  MX_SPI1_Init();
 8003d7a:	f000 fd6d 	bl	8004858 <MX_SPI1_Init>
  MX_UART4_Init();
 8003d7e:	f000 fe55 	bl	8004a2c <MX_UART4_Init>
  MX_USART2_UART_Init();
 8003d82:	f000 fe7d 	bl	8004a80 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8003d86:	f000 fea5 	bl	8004ad4 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8003d8a:	f000 fecd 	bl	8004b28 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8003d8e:	f007 f915 	bl	800afbc <MX_FATFS_Init>
  MX_TIM11_Init();
 8003d92:	f000 fe27 	bl	80049e4 <MX_TIM11_Init>
  MX_TIM10_Init();
 8003d96:	f000 fe01 	bl	800499c <MX_TIM10_Init>
  MX_TIM6_Init();
 8003d9a:	f000 fd93 	bl	80048c4 <MX_TIM6_Init>
  MX_TIM7_Init();
 8003d9e:	f000 fdc7 	bl	8004930 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8003da2:	2201      	movs	r2, #1
 8003da4:	2102      	movs	r1, #2
 8003da6:	48c1      	ldr	r0, [pc, #772]	@ (80040ac <main+0x34c>)
 8003da8:	f002 ffb4 	bl	8006d14 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8003dac:	2201      	movs	r2, #1
 8003dae:	2104      	movs	r1, #4
 8003db0:	48bf      	ldr	r0, [pc, #764]	@ (80040b0 <main+0x350>)
 8003db2:	f002 ffaf 	bl	8006d14 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8003db6:	2201      	movs	r2, #1
 8003db8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003dbc:	48bb      	ldr	r0, [pc, #748]	@ (80040ac <main+0x34c>)
 8003dbe:	f002 ffa9 	bl	8006d14 <HAL_GPIO_WritePin>

  ///KURTARMA PORTLARI KAPALI EMIN OL
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);//A
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	2110      	movs	r1, #16
 8003dc6:	48ba      	ldr	r0, [pc, #744]	@ (80040b0 <main+0x350>)
 8003dc8:	f002 ffa4 	bl	8006d14 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);//B
 8003dcc:	2200      	movs	r2, #0
 8003dce:	2108      	movs	r1, #8
 8003dd0:	48b7      	ldr	r0, [pc, #732]	@ (80040b0 <main+0x350>)
 8003dd2:	f002 ff9f 	bl	8006d14 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);//C
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003ddc:	48b3      	ldr	r0, [pc, #716]	@ (80040ac <main+0x34c>)
 8003dde:	f002 ff99 	bl	8006d14 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);//D
 8003de2:	2200      	movs	r2, #0
 8003de4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003de8:	48b0      	ldr	r0, [pc, #704]	@ (80040ac <main+0x34c>)
 8003dea:	f002 ff93 	bl	8006d14 <HAL_GPIO_WritePin>

  HAL_UART_Receive_IT(&huart2,&rx_data,1);
 8003dee:	2201      	movs	r2, #1
 8003df0:	49b0      	ldr	r1, [pc, #704]	@ (80040b4 <main+0x354>)
 8003df2:	48b1      	ldr	r0, [pc, #708]	@ (80040b8 <main+0x358>)
 8003df4:	f006 f94a 	bl	800a08c <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, &rx_data_EGU, 1);
 8003df8:	2201      	movs	r2, #1
 8003dfa:	49b0      	ldr	r1, [pc, #704]	@ (80040bc <main+0x35c>)
 8003dfc:	48b0      	ldr	r0, [pc, #704]	@ (80040c0 <main+0x360>)
 8003dfe:	f006 f945 	bl	800a08c <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim11);
 8003e02:	48b0      	ldr	r0, [pc, #704]	@ (80040c4 <main+0x364>)
 8003e04:	f005 fd1e 	bl	8009844 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim10);
 8003e08:	48af      	ldr	r0, [pc, #700]	@ (80040c8 <main+0x368>)
 8003e0a:	f005 fd1b 	bl	8009844 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 8003e0e:	48af      	ldr	r0, [pc, #700]	@ (80040cc <main+0x36c>)
 8003e10:	f005 fd18 	bl	8009844 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Stop_IT(&htim7);
 8003e14:	48ae      	ldr	r0, [pc, #696]	@ (80040d0 <main+0x370>)
 8003e16:	f005 fd85 	bl	8009924 <HAL_TIM_Base_Stop_IT>

  MAFilter_Init(&accx);
 8003e1a:	48ae      	ldr	r0, [pc, #696]	@ (80040d4 <main+0x374>)
 8003e1c:	f7fe fcbe 	bl	800279c <MAFilter_Init>
  FIRFilter_Init(&IMU_GYROY);
 8003e20:	48ad      	ldr	r0, [pc, #692]	@ (80040d8 <main+0x378>)
 8003e22:	f7fe fc3d 	bl	80026a0 <FIRFilter_Init>
  FIRFilter_Init(&IMU_GYROX);
 8003e26:	48ad      	ldr	r0, [pc, #692]	@ (80040dc <main+0x37c>)
 8003e28:	f7fe fc3a 	bl	80026a0 <FIRFilter_Init>
  FIRFilter_Init(&IMU_GYROZ);
 8003e2c:	48ac      	ldr	r0, [pc, #688]	@ (80040e0 <main+0x380>)
 8003e2e:	f7fe fc37 	bl	80026a0 <FIRFilter_Init>


  lwgps_init(&gps);
 8003e32:	48ac      	ldr	r0, [pc, #688]	@ (80040e4 <main+0x384>)
 8003e34:	f7ff fdf6 	bl	8003a24 <lwgps_init>
  LSM6DSLTR_Init();
 8003e38:	f7fe fcd2 	bl	80027e0 <LSM6DSLTR_Init>
  E220_CONFIG(0x6,0x4A,0X10,1);
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	2210      	movs	r2, #16
 8003e40:	214a      	movs	r1, #74	@ 0x4a
 8003e42:	2006      	movs	r0, #6
 8003e44:	f000 ff46 	bl	8004cd4 <E220_CONFIG>
  HAL_ADC_Start_IT(&hadc1);
 8003e48:	48a7      	ldr	r0, [pc, #668]	@ (80040e8 <main+0x388>)
 8003e4a:	f001 ffcb 	bl	8005de4 <HAL_ADC_Start_IT>

  dev.dev_id = BME280_I2C_ADDR_PRIM;
 8003e4e:	4ba7      	ldr	r3, [pc, #668]	@ (80040ec <main+0x38c>)
 8003e50:	2276      	movs	r2, #118	@ 0x76
 8003e52:	705a      	strb	r2, [r3, #1]
  dev.intf = BME280_I2C_INTF;
 8003e54:	4ba5      	ldr	r3, [pc, #660]	@ (80040ec <main+0x38c>)
 8003e56:	2201      	movs	r2, #1
 8003e58:	709a      	strb	r2, [r3, #2]
  dev.read = user_i2c_read;
 8003e5a:	4ba4      	ldr	r3, [pc, #656]	@ (80040ec <main+0x38c>)
 8003e5c:	4aa4      	ldr	r2, [pc, #656]	@ (80040f0 <main+0x390>)
 8003e5e:	605a      	str	r2, [r3, #4]
  dev.write = user_i2c_write;
 8003e60:	4ba2      	ldr	r3, [pc, #648]	@ (80040ec <main+0x38c>)
 8003e62:	4aa4      	ldr	r2, [pc, #656]	@ (80040f4 <main+0x394>)
 8003e64:	609a      	str	r2, [r3, #8]
  dev.delay_ms = user_delay_ms;
 8003e66:	4ba1      	ldr	r3, [pc, #644]	@ (80040ec <main+0x38c>)
 8003e68:	4aa3      	ldr	r2, [pc, #652]	@ (80040f8 <main+0x398>)
 8003e6a:	60da      	str	r2, [r3, #12]

  rslt = bme280_init(&dev);
 8003e6c:	489f      	ldr	r0, [pc, #636]	@ (80040ec <main+0x38c>)
 8003e6e:	f7fd f921 	bl	80010b4 <bme280_init>
 8003e72:	4603      	mov	r3, r0
 8003e74:	461a      	mov	r2, r3
 8003e76:	4ba1      	ldr	r3, [pc, #644]	@ (80040fc <main+0x39c>)
 8003e78:	701a      	strb	r2, [r3, #0]

  dev.settings.osr_h = BME280_OVERSAMPLING_1X;
 8003e7a:	4b9c      	ldr	r3, [pc, #624]	@ (80040ec <main+0x38c>)
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
  dev.settings.osr_p = BME280_OVERSAMPLING_4X;
 8003e82:	4b9a      	ldr	r3, [pc, #616]	@ (80040ec <main+0x38c>)
 8003e84:	2203      	movs	r2, #3
 8003e86:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  dev.settings.osr_t = BME280_OVERSAMPLING_2X;
 8003e8a:	4b98      	ldr	r3, [pc, #608]	@ (80040ec <main+0x38c>)
 8003e8c:	2202      	movs	r2, #2
 8003e8e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  dev.settings.filter = BME280_FILTER_COEFF_16;
 8003e92:	4b96      	ldr	r3, [pc, #600]	@ (80040ec <main+0x38c>)
 8003e94:	2204      	movs	r2, #4
 8003e96:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
  rslt = bme280_set_sensor_settings(BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL, &dev);
 8003e9a:	4994      	ldr	r1, [pc, #592]	@ (80040ec <main+0x38c>)
 8003e9c:	200f      	movs	r0, #15
 8003e9e:	f7fd f9fd 	bl	800129c <bme280_set_sensor_settings>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	4b95      	ldr	r3, [pc, #596]	@ (80040fc <main+0x39c>)
 8003ea8:	701a      	strb	r2, [r3, #0]

  ////ALTITUDE OFFSET
   Altitude_Offset();
 8003eaa:	f001 fa51 	bl	8005350 <Altitude_Offset>
//	   W25Q_Read(i, 0, 255, test);
//   }



   Buzzer(10, 100);
 8003eae:	2164      	movs	r1, #100	@ 0x64
 8003eb0:	200a      	movs	r0, #10
 8003eb2:	f001 fa19 	bl	80052e8 <Buzzer>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

/********************* Sensor Ölçüm **************************************************/
	if(sensor_flag==1)
 8003eb6:	4b92      	ldr	r3, [pc, #584]	@ (8004100 <main+0x3a0>)
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	f040 80e4 	bne.w	8004088 <main+0x328>
	{
		 sensor_flag=0;
 8003ec0:	4b8f      	ldr	r3, [pc, #572]	@ (8004100 <main+0x3a0>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	701a      	strb	r2, [r3, #0]
		 prev_alt=altitude;
 8003ec6:	4b8f      	ldr	r3, [pc, #572]	@ (8004104 <main+0x3a4>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a8f      	ldr	r2, [pc, #572]	@ (8004108 <main+0x3a8>)
 8003ecc:	6013      	str	r3, [r2, #0]
		 rslt = bme280_set_sensor_mode(BME280_FORCED_MODE, &dev);
 8003ece:	4987      	ldr	r1, [pc, #540]	@ (80040ec <main+0x38c>)
 8003ed0:	2001      	movs	r0, #1
 8003ed2:	f7fd fa38 	bl	8001346 <bme280_set_sensor_mode>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	461a      	mov	r2, r3
 8003eda:	4b88      	ldr	r3, [pc, #544]	@ (80040fc <main+0x39c>)
 8003edc:	701a      	strb	r2, [r3, #0]
		/* �?��?�터 취�? */
		rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 8003ede:	4a83      	ldr	r2, [pc, #524]	@ (80040ec <main+0x38c>)
 8003ee0:	498a      	ldr	r1, [pc, #552]	@ (800410c <main+0x3ac>)
 8003ee2:	2007      	movs	r0, #7
 8003ee4:	f7fd faab 	bl	800143e <bme280_get_sensor_data>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	461a      	mov	r2, r3
 8003eec:	4b83      	ldr	r3, [pc, #524]	@ (80040fc <main+0x39c>)
 8003eee:	701a      	strb	r2, [r3, #0]

		if(rslt == BME280_OK)
 8003ef0:	4b82      	ldr	r3, [pc, #520]	@ (80040fc <main+0x39c>)
 8003ef2:	f993 3000 	ldrsb.w	r3, [r3]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d135      	bne.n	8003f66 <main+0x206>
		{
		  temperature = comp_data.temperature;
 8003efa:	4b84      	ldr	r3, [pc, #528]	@ (800410c <main+0x3ac>)
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	ee07 3a90 	vmov	s15, r3
 8003f02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f06:	4b82      	ldr	r3, [pc, #520]	@ (8004110 <main+0x3b0>)
 8003f08:	edc3 7a00 	vstr	s15, [r3]
		  humidity = comp_data.humidity;
 8003f0c:	4b7f      	ldr	r3, [pc, #508]	@ (800410c <main+0x3ac>)
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	ee07 3a90 	vmov	s15, r3
 8003f14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f18:	4b7e      	ldr	r3, [pc, #504]	@ (8004114 <main+0x3b4>)
 8003f1a:	edc3 7a00 	vstr	s15, [r3]
		  pressure = comp_data.pressure;
 8003f1e:	4b7b      	ldr	r3, [pc, #492]	@ (800410c <main+0x3ac>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	ee07 3a90 	vmov	s15, r3
 8003f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f2a:	4b7b      	ldr	r3, [pc, #492]	@ (8004118 <main+0x3b8>)
 8003f2c:	edc3 7a00 	vstr	s15, [r3]
		  altitude=BME280_Get_Altitude()-offset_altitude;
 8003f30:	f000 ff2e 	bl	8004d90 <BME280_Get_Altitude>
 8003f34:	eeb0 7a40 	vmov.f32	s14, s0
 8003f38:	4b78      	ldr	r3, [pc, #480]	@ (800411c <main+0x3bc>)
 8003f3a:	edd3 7a00 	vldr	s15, [r3]
 8003f3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f42:	4b70      	ldr	r3, [pc, #448]	@ (8004104 <main+0x3a4>)
 8003f44:	edc3 7a00 	vstr	s15, [r3]
		  speed=(altitude-prev_alt)*20;
 8003f48:	4b6e      	ldr	r3, [pc, #440]	@ (8004104 <main+0x3a4>)
 8003f4a:	ed93 7a00 	vldr	s14, [r3]
 8003f4e:	4b6e      	ldr	r3, [pc, #440]	@ (8004108 <main+0x3a8>)
 8003f50:	edd3 7a00 	vldr	s15, [r3]
 8003f54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f58:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8003f5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f60:	4b6f      	ldr	r3, [pc, #444]	@ (8004120 <main+0x3c0>)
 8003f62:	edc3 7a00 	vstr	s15, [r3]
    	}

		 LSM6DSLTR_Read_Accel_Data(&Lsm_Sensor);
 8003f66:	486f      	ldr	r0, [pc, #444]	@ (8004124 <main+0x3c4>)
 8003f68:	f7fe fc8a 	bl	8002880 <LSM6DSLTR_Read_Accel_Data>
		 calculate_roll_pitch(&Lsm_Sensor);
 8003f6c:	486d      	ldr	r0, [pc, #436]	@ (8004124 <main+0x3c4>)
 8003f6e:	f7fe fdfb 	bl	8002b68 <calculate_roll_pitch>
		 LSM6DSLTR_Read_Gyro_Data(&Lsm_Sensor);
 8003f72:	486c      	ldr	r0, [pc, #432]	@ (8004124 <main+0x3c4>)
 8003f74:	f7fe fd5e 	bl	8002a34 <LSM6DSLTR_Read_Gyro_Data>
		 update_angles(&Lsm_Sensor);
 8003f78:	486a      	ldr	r0, [pc, #424]	@ (8004124 <main+0x3c4>)
 8003f7a:	f7fe fe7b 	bl	8002c74 <update_angles>

		 Lsm_Sensor.Accel_X=FIRFilter_Update(&accx,  Lsm_Sensor.Accel_X);
 8003f7e:	4b69      	ldr	r3, [pc, #420]	@ (8004124 <main+0x3c4>)
 8003f80:	edd3 7a00 	vldr	s15, [r3]
 8003f84:	eeb0 0a67 	vmov.f32	s0, s15
 8003f88:	4852      	ldr	r0, [pc, #328]	@ (80040d4 <main+0x374>)
 8003f8a:	f7fe fbab 	bl	80026e4 <FIRFilter_Update>
 8003f8e:	eef0 7a40 	vmov.f32	s15, s0
 8003f92:	4b64      	ldr	r3, [pc, #400]	@ (8004124 <main+0x3c4>)
 8003f94:	edc3 7a00 	vstr	s15, [r3]
		 Lsm_Sensor.Gyro_X=FIRFilter_Update(&IMU_GYROX,  Lsm_Sensor.Gyro_X);
 8003f98:	4b62      	ldr	r3, [pc, #392]	@ (8004124 <main+0x3c4>)
 8003f9a:	edd3 7a03 	vldr	s15, [r3, #12]
 8003f9e:	eeb0 0a67 	vmov.f32	s0, s15
 8003fa2:	484e      	ldr	r0, [pc, #312]	@ (80040dc <main+0x37c>)
 8003fa4:	f7fe fb9e 	bl	80026e4 <FIRFilter_Update>
 8003fa8:	eef0 7a40 	vmov.f32	s15, s0
 8003fac:	4b5d      	ldr	r3, [pc, #372]	@ (8004124 <main+0x3c4>)
 8003fae:	edc3 7a03 	vstr	s15, [r3, #12]
		 Lsm_Sensor.Gyro_Y=FIRFilter_Update(&IMU_GYROY, Lsm_Sensor.Gyro_Y);
 8003fb2:	4b5c      	ldr	r3, [pc, #368]	@ (8004124 <main+0x3c4>)
 8003fb4:	edd3 7a04 	vldr	s15, [r3, #16]
 8003fb8:	eeb0 0a67 	vmov.f32	s0, s15
 8003fbc:	4846      	ldr	r0, [pc, #280]	@ (80040d8 <main+0x378>)
 8003fbe:	f7fe fb91 	bl	80026e4 <FIRFilter_Update>
 8003fc2:	eef0 7a40 	vmov.f32	s15, s0
 8003fc6:	4b57      	ldr	r3, [pc, #348]	@ (8004124 <main+0x3c4>)
 8003fc8:	edc3 7a04 	vstr	s15, [r3, #16]
		 Lsm_Sensor.Gyro_Z=FIRFilter_Update(&IMU_GYROZ, Lsm_Sensor.Gyro_Z);
 8003fcc:	4b55      	ldr	r3, [pc, #340]	@ (8004124 <main+0x3c4>)
 8003fce:	edd3 7a05 	vldr	s15, [r3, #20]
 8003fd2:	eeb0 0a67 	vmov.f32	s0, s15
 8003fd6:	4842      	ldr	r0, [pc, #264]	@ (80040e0 <main+0x380>)
 8003fd8:	f7fe fb84 	bl	80026e4 <FIRFilter_Update>
 8003fdc:	eef0 7a40 	vmov.f32	s15, s0
 8003fe0:	4b50      	ldr	r3, [pc, #320]	@ (8004124 <main+0x3c4>)
 8003fe2:	edc3 7a05 	vstr	s15, [r3, #20]

		 toplam_pitch+= Lsm_Sensor.Pitch;
 8003fe6:	4b4f      	ldr	r3, [pc, #316]	@ (8004124 <main+0x3c4>)
 8003fe8:	ed93 7a07 	vldr	s14, [r3, #28]
 8003fec:	4b4e      	ldr	r3, [pc, #312]	@ (8004128 <main+0x3c8>)
 8003fee:	edd3 7a00 	vldr	s15, [r3]
 8003ff2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ff6:	4b4c      	ldr	r3, [pc, #304]	@ (8004128 <main+0x3c8>)
 8003ff8:	edc3 7a00 	vstr	s15, [r3]
		 toplam_roll+= Lsm_Sensor.Roll;
 8003ffc:	4b49      	ldr	r3, [pc, #292]	@ (8004124 <main+0x3c4>)
 8003ffe:	ed93 7a06 	vldr	s14, [r3, #24]
 8004002:	4b4a      	ldr	r3, [pc, #296]	@ (800412c <main+0x3cc>)
 8004004:	edd3 7a00 	vldr	s15, [r3]
 8004008:	ee77 7a27 	vadd.f32	s15, s14, s15
 800400c:	4b47      	ldr	r3, [pc, #284]	@ (800412c <main+0x3cc>)
 800400e:	edc3 7a00 	vstr	s15, [r3]

		 sensor_counter++;
 8004012:	4b47      	ldr	r3, [pc, #284]	@ (8004130 <main+0x3d0>)
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	3301      	adds	r3, #1
 8004018:	b2da      	uxtb	r2, r3
 800401a:	4b45      	ldr	r3, [pc, #276]	@ (8004130 <main+0x3d0>)
 800401c:	701a      	strb	r2, [r3, #0]
		 if(sensor_counter == 6)
 800401e:	4b44      	ldr	r3, [pc, #272]	@ (8004130 <main+0x3d0>)
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	2b06      	cmp	r3, #6
 8004024:	d11e      	bne.n	8004064 <main+0x304>
		 {
			 real_pitch = toplam_pitch/6;
 8004026:	4b40      	ldr	r3, [pc, #256]	@ (8004128 <main+0x3c8>)
 8004028:	ed93 7a00 	vldr	s14, [r3]
 800402c:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 8004030:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004034:	4b3f      	ldr	r3, [pc, #252]	@ (8004134 <main+0x3d4>)
 8004036:	edc3 7a00 	vstr	s15, [r3]
			 real_roll = toplam_roll/6;
 800403a:	4b3c      	ldr	r3, [pc, #240]	@ (800412c <main+0x3cc>)
 800403c:	ed93 7a00 	vldr	s14, [r3]
 8004040:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 8004044:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004048:	4b3b      	ldr	r3, [pc, #236]	@ (8004138 <main+0x3d8>)
 800404a:	edc3 7a00 	vstr	s15, [r3]
			 toplam_roll=0;
 800404e:	4b37      	ldr	r3, [pc, #220]	@ (800412c <main+0x3cc>)
 8004050:	f04f 0200 	mov.w	r2, #0
 8004054:	601a      	str	r2, [r3, #0]
			 toplam_pitch=0;
 8004056:	4b34      	ldr	r3, [pc, #208]	@ (8004128 <main+0x3c8>)
 8004058:	f04f 0200 	mov.w	r2, #0
 800405c:	601a      	str	r2, [r3, #0]
			 sensor_counter =0;
 800405e:	4b34      	ldr	r3, [pc, #208]	@ (8004130 <main+0x3d0>)
 8004060:	2200      	movs	r2, #0
 8004062:	701a      	strb	r2, [r3, #0]
		 }

		 magnetic_switch=HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8004064:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004068:	4810      	ldr	r0, [pc, #64]	@ (80040ac <main+0x34c>)
 800406a:	f002 fe3b 	bl	8006ce4 <HAL_GPIO_ReadPin>
 800406e:	4603      	mov	r3, r0
 8004070:	461a      	mov	r2, r3
 8004072:	4b32      	ldr	r3, [pc, #200]	@ (800413c <main+0x3dc>)
 8004074:	701a      	strb	r2, [r3, #0]
		 BUTTON_STATE=HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9);
 8004076:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800407a:	480c      	ldr	r0, [pc, #48]	@ (80040ac <main+0x34c>)
 800407c:	f002 fe32 	bl	8006ce4 <HAL_GPIO_ReadPin>
 8004080:	4603      	mov	r3, r0
 8004082:	461a      	mov	r2, r3
 8004084:	4b2e      	ldr	r3, [pc, #184]	@ (8004140 <main+0x3e0>)
 8004086:	701a      	strb	r2, [r3, #0]


	}

/********************Lora Ayar ve Gönderme*****************************************************/
	if(lora_flag==1)
 8004088:	4b2e      	ldr	r3, [pc, #184]	@ (8004144 <main+0x3e4>)
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	2b01      	cmp	r3, #1
 800408e:	f040 8084 	bne.w	800419a <main+0x43a>
	{
	    lora_flag=0;
 8004092:	4b2c      	ldr	r3, [pc, #176]	@ (8004144 <main+0x3e4>)
 8004094:	2200      	movs	r2, #0
 8004096:	701a      	strb	r2, [r3, #0]

		loratx[0]=0x8;
 8004098:	4b2b      	ldr	r3, [pc, #172]	@ (8004148 <main+0x3e8>)
 800409a:	2208      	movs	r2, #8
 800409c:	701a      	strb	r2, [r3, #0]
		loratx[1]=0x2A;
 800409e:	4b2a      	ldr	r3, [pc, #168]	@ (8004148 <main+0x3e8>)
 80040a0:	222a      	movs	r2, #42	@ 0x2a
 80040a2:	705a      	strb	r2, [r3, #1]
		loratx[2]=0x10;
 80040a4:	4b28      	ldr	r3, [pc, #160]	@ (8004148 <main+0x3e8>)
 80040a6:	2210      	movs	r2, #16
 80040a8:	709a      	strb	r2, [r3, #2]
 80040aa:	e04f      	b.n	800414c <main+0x3ec>
 80040ac:	40020800 	.word	0x40020800
 80040b0:	40020400 	.word	0x40020400
 80040b4:	20000635 	.word	0x20000635
 80040b8:	200004b8 	.word	0x200004b8
 80040bc:	200005a6 	.word	0x200005a6
 80040c0:	20000540 	.word	0x20000540
 80040c4:	2000042c 	.word	0x2000042c
 80040c8:	200003e4 	.word	0x200003e4
 80040cc:	20000354 	.word	0x20000354
 80040d0:	2000039c 	.word	0x2000039c
 80040d4:	200023a4 	.word	0x200023a4
 80040d8:	20002434 	.word	0x20002434
 80040dc:	200023ec 	.word	0x200023ec
 80040e0:	2000247c 	.word	0x2000247c
 80040e4:	200022d0 	.word	0x200022d0
 80040e8:	20000260 	.word	0x20000260
 80040ec:	200024c4 	.word	0x200024c4
 80040f0:	08004e81 	.word	0x08004e81
 80040f4:	08004f09 	.word	0x08004f09
 80040f8:	08004ef1 	.word	0x08004ef1
 80040fc:	20002510 	.word	0x20002510
 8004100:	20002293 	.word	0x20002293
 8004104:	200022a0 	.word	0x200022a0
 8004108:	200022b0 	.word	0x200022b0
 800410c:	20002504 	.word	0x20002504
 8004110:	20002298 	.word	0x20002298
 8004114:	2000229c 	.word	0x2000229c
 8004118:	200022a8 	.word	0x200022a8
 800411c:	200022a4 	.word	0x200022a4
 8004120:	200022b4 	.word	0x200022b4
 8004124:	20002380 	.word	0x20002380
 8004128:	200022c4 	.word	0x200022c4
 800412c:	200022c8 	.word	0x200022c8
 8004130:	200022cc 	.word	0x200022cc
 8004134:	200022bc 	.word	0x200022bc
 8004138:	200022c0 	.word	0x200022c0
 800413c:	20000645 	.word	0x20000645
 8004140:	20000646 	.word	0x20000646
 8004144:	20002292 	.word	0x20002292
 8004148:	2000224c 	.word	0x2000224c
		loratx[3]=DEVICE_ID;
 800414c:	4b7d      	ldr	r3, [pc, #500]	@ (8004344 <main+0x5e4>)
 800414e:	2202      	movs	r2, #2
 8004150:	70da      	strb	r2, [r3, #3]
		loratx[4]=gps.sats_in_view;
 8004152:	4b7d      	ldr	r3, [pc, #500]	@ (8004348 <main+0x5e8>)
 8004154:	f893 204d 	ldrb.w	r2, [r3, #77]	@ 0x4d
 8004158:	4b7a      	ldr	r3, [pc, #488]	@ (8004344 <main+0x5e4>)
 800415a:	711a      	strb	r2, [r3, #4]

		union_converter();
 800415c:	f000 ff10 	bl	8004f80 <union_converter>

		loratx[49]=(uint8_t)adc_pil_val;
 8004160:	4b7a      	ldr	r3, [pc, #488]	@ (800434c <main+0x5ec>)
 8004162:	edd3 7a00 	vldr	s15, [r3]
 8004166:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800416a:	edc7 7a01 	vstr	s15, [r7, #4]
 800416e:	793b      	ldrb	r3, [r7, #4]
 8004170:	b2da      	uxtb	r2, r3
 8004172:	4b74      	ldr	r3, [pc, #464]	@ (8004344 <main+0x5e4>)
 8004174:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
		loratx[50]=v4_mod;
 8004178:	4b75      	ldr	r3, [pc, #468]	@ (8004350 <main+0x5f0>)
 800417a:	781a      	ldrb	r2, [r3, #0]
 800417c:	4b71      	ldr	r3, [pc, #452]	@ (8004344 <main+0x5e4>)
 800417e:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
		loratx[51]=magnetic_switch;
 8004182:	4b74      	ldr	r3, [pc, #464]	@ (8004354 <main+0x5f4>)
 8004184:	781a      	ldrb	r2, [r3, #0]
 8004186:	4b6f      	ldr	r3, [pc, #444]	@ (8004344 <main+0x5e4>)
 8004188:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

		////////EGU PART
		EGU_Buff_Load();
 800418c:	f001 f848 	bl	8005220 <EGU_Buff_Load>

		HAL_UART_Transmit_IT(&huart3,loratx,sizeof(loratx));
 8004190:	2246      	movs	r2, #70	@ 0x46
 8004192:	496c      	ldr	r1, [pc, #432]	@ (8004344 <main+0x5e4>)
 8004194:	4870      	ldr	r0, [pc, #448]	@ (8004358 <main+0x5f8>)
 8004196:	f005 ff34 	bl	800a002 <HAL_UART_Transmit_IT>

	}


/************ EGÜ durum sorgusu gönder **************************************************/
	if(egu_durum_flag==1)
 800419a:	4b70      	ldr	r3, [pc, #448]	@ (800435c <main+0x5fc>)
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d109      	bne.n	80041b6 <main+0x456>
	{
		egu_durum_flag=0;
 80041a2:	4b6e      	ldr	r3, [pc, #440]	@ (800435c <main+0x5fc>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart6, EGU_durum_sorgusu, 5, 1000);
 80041a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80041ac:	2205      	movs	r2, #5
 80041ae:	496c      	ldr	r1, [pc, #432]	@ (8004360 <main+0x600>)
 80041b0:	486c      	ldr	r0, [pc, #432]	@ (8004364 <main+0x604>)
 80041b2:	f005 fe94 	bl	8009ede <HAL_UART_Transmit>
	}


/**************************Algoritma****************************************************/
		  switch(SUSTAINER){
 80041b6:	4b6c      	ldr	r3, [pc, #432]	@ (8004368 <main+0x608>)
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	2b06      	cmp	r3, #6
 80041bc:	f200 80f1 	bhi.w	80043a2 <main+0x642>
 80041c0:	a201      	add	r2, pc, #4	@ (adr r2, 80041c8 <main+0x468>)
 80041c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c6:	bf00      	nop
 80041c8:	080041e5 	.word	0x080041e5
 80041cc:	08004209 	.word	0x08004209
 80041d0:	0800421d 	.word	0x0800421d
 80041d4:	0800426b 	.word	0x0800426b
 80041d8:	08004279 	.word	0x08004279
 80041dc:	080042d3 	.word	0x080042d3
 80041e0:	08004331 	.word	0x08004331

		  case RAMPA:
				v4_mod=1;
 80041e4:	4b5a      	ldr	r3, [pc, #360]	@ (8004350 <main+0x5f0>)
 80041e6:	2201      	movs	r2, #1
 80041e8:	701a      	strb	r2, [r3, #0]
			  //RAMPA MODU ROKET RAMPADA EGÜ SWİTCHLERİ VE ALT KADEME HABERLE�?ME KONTROL ET

				if(Lsm_Sensor.Accel_X > 5 )
 80041ea:	4b60      	ldr	r3, [pc, #384]	@ (800436c <main+0x60c>)
 80041ec:	edd3 7a00 	vldr	s15, [r3]
 80041f0:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80041f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041fc:	dc00      	bgt.n	8004200 <main+0x4a0>
				  {
					SUSTAINER=UCUS_BASLADI;
//					Buzzer(6, 300);
				  }

			  break;
 80041fe:	e0d0      	b.n	80043a2 <main+0x642>
					SUSTAINER=UCUS_BASLADI;
 8004200:	4b59      	ldr	r3, [pc, #356]	@ (8004368 <main+0x608>)
 8004202:	2201      	movs	r2, #1
 8004204:	701a      	strb	r2, [r3, #0]
			  break;
 8004206:	e0cc      	b.n	80043a2 <main+0x642>

		  case UCUS_BASLADI:
				v4_mod=2;
 8004208:	4b51      	ldr	r3, [pc, #324]	@ (8004350 <main+0x5f0>)
 800420a:	2202      	movs	r2, #2
 800420c:	701a      	strb	r2, [r3, #0]
				// FLASH MEMORYE KAYDETMEYE BASLA
				flash_flag =1;
 800420e:	4b58      	ldr	r3, [pc, #352]	@ (8004370 <main+0x610>)
 8004210:	2201      	movs	r2, #1
 8004212:	701a      	strb	r2, [r3, #0]

				SUSTAINER=KADEMEAYRILDIMI;
 8004214:	4b54      	ldr	r3, [pc, #336]	@ (8004368 <main+0x608>)
 8004216:	2202      	movs	r2, #2
 8004218:	701a      	strb	r2, [r3, #0]

			 break;
 800421a:	e0c2      	b.n	80043a2 <main+0x642>

		  case KADEMEAYRILDIMI:
				v4_mod=3;
 800421c:	4b4c      	ldr	r3, [pc, #304]	@ (8004350 <main+0x5f0>)
 800421e:	2203      	movs	r2, #3
 8004220:	701a      	strb	r2, [r3, #0]
					  //ALT KADEMEDEN GELEN SİNYALE VE EGÜ SWİTCHLERİNE BAK
					  //BELLİ BİR SÜRE VE İRTİFA BOYUNCA AYRILMA OLMAZSA APOGEE YA GEÇ
				if(timer_start_flag == 0){
 8004222:	4b54      	ldr	r3, [pc, #336]	@ (8004374 <main+0x614>)
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d109      	bne.n	800423e <main+0x4de>

					__HAL_TIM_SET_COUNTER(&htim7 , 0);
 800422a:	4b53      	ldr	r3, [pc, #332]	@ (8004378 <main+0x618>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2200      	movs	r2, #0
 8004230:	625a      	str	r2, [r3, #36]	@ 0x24
					HAL_TIM_Base_Start(&htim7);
 8004232:	4851      	ldr	r0, [pc, #324]	@ (8004378 <main+0x618>)
 8004234:	f005 fa9e 	bl	8009774 <HAL_TIM_Base_Start>
					timer_start_flag =1;
 8004238:	4b4e      	ldr	r3, [pc, #312]	@ (8004374 <main+0x614>)
 800423a:	2201      	movs	r2, #1
 800423c:	701a      	strb	r2, [r3, #0]
				}

				if((magnetic_switch==0 && EGU_RX_BUFFER[30]==0) && TIM7->CNT >= 45000 && altitude_rampa_control == 1)
 800423e:	4b45      	ldr	r3, [pc, #276]	@ (8004354 <main+0x5f4>)
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d17b      	bne.n	800433e <main+0x5de>
 8004246:	4b4d      	ldr	r3, [pc, #308]	@ (800437c <main+0x61c>)
 8004248:	7f9b      	ldrb	r3, [r3, #30]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d177      	bne.n	800433e <main+0x5de>
 800424e:	4b4c      	ldr	r3, [pc, #304]	@ (8004380 <main+0x620>)
 8004250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004252:	f64a 72c7 	movw	r2, #44999	@ 0xafc7
 8004256:	4293      	cmp	r3, r2
 8004258:	d971      	bls.n	800433e <main+0x5de>
 800425a:	4b4a      	ldr	r3, [pc, #296]	@ (8004384 <main+0x624>)
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	2b01      	cmp	r3, #1
 8004260:	d16d      	bne.n	800433e <main+0x5de>
				{
				  SUSTAINER=AYRILDI;
 8004262:	4b41      	ldr	r3, [pc, #260]	@ (8004368 <main+0x608>)
 8004264:	2203      	movs	r2, #3
 8004266:	701a      	strb	r2, [r3, #0]

//				  Buzzer(10, 100);
				}

			 break;
 8004268:	e069      	b.n	800433e <main+0x5de>

		  case AYRILDI:
				v4_mod=4;
 800426a:	4b39      	ldr	r3, [pc, #228]	@ (8004350 <main+0x5f0>)
 800426c:	2204      	movs	r2, #4
 800426e:	701a      	strb	r2, [r3, #0]
					  //MOTOR ATE�?LEME TALEBİ GÖNDER MEGU YE MESAJ AT
//				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
//				HAL_Delay(50);
//				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
				SUSTAINER=APOGEE;
 8004270:	4b3d      	ldr	r3, [pc, #244]	@ (8004368 <main+0x608>)
 8004272:	2204      	movs	r2, #4
 8004274:	701a      	strb	r2, [r3, #0]

			 break;
 8004276:	e094      	b.n	80043a2 <main+0x642>

		  case APOGEE:
				v4_mod=5;
 8004278:	4b35      	ldr	r3, [pc, #212]	@ (8004350 <main+0x5f0>)
 800427a:	2205      	movs	r2, #5
 800427c:	701a      	strb	r2, [r3, #0]
					  //AYRILMA GERÇEKLE�?MESE BİLE APOGEE İLE ROKETİ KURTAR *ucus basladı kısmına timer kuracam ona göre ayrıldımıdan APOGEEya geçecek


				if((Lsm_Sensor.Pitch <= 32) && speed <= 2 /*&& altitude >300 && motor_ivmelendi_mi == 1*/ )
 800427e:	4b3b      	ldr	r3, [pc, #236]	@ (800436c <main+0x60c>)
 8004280:	edd3 7a07 	vldr	s15, [r3, #28]
 8004284:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8004388 <main+0x628>
 8004288:	eef4 7ac7 	vcmpe.f32	s15, s14
 800428c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004290:	d900      	bls.n	8004294 <main+0x534>
					SUSTAINER=SUSTAINER_ANA;
					altitude_rampa_control =0;
				}


			 break;
 8004292:	e086      	b.n	80043a2 <main+0x642>
				if((Lsm_Sensor.Pitch <= 32) && speed <= 2 /*&& altitude >300 && motor_ivmelendi_mi == 1*/ )
 8004294:	4b3d      	ldr	r3, [pc, #244]	@ (800438c <main+0x62c>)
 8004296:	edd3 7a00 	vldr	s15, [r3]
 800429a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800429e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042a6:	d900      	bls.n	80042aa <main+0x54a>
			 break;
 80042a8:	e07b      	b.n	80043a2 <main+0x642>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 80042aa:	2201      	movs	r2, #1
 80042ac:	2108      	movs	r1, #8
 80042ae:	4838      	ldr	r0, [pc, #224]	@ (8004390 <main+0x630>)
 80042b0:	f002 fd30 	bl	8006d14 <HAL_GPIO_WritePin>
					HAL_Delay(50);
 80042b4:	2032      	movs	r0, #50	@ 0x32
 80042b6:	f001 fd2d 	bl	8005d14 <HAL_Delay>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 80042ba:	2200      	movs	r2, #0
 80042bc:	2108      	movs	r1, #8
 80042be:	4834      	ldr	r0, [pc, #208]	@ (8004390 <main+0x630>)
 80042c0:	f002 fd28 	bl	8006d14 <HAL_GPIO_WritePin>
					SUSTAINER=SUSTAINER_ANA;
 80042c4:	4b28      	ldr	r3, [pc, #160]	@ (8004368 <main+0x608>)
 80042c6:	2205      	movs	r2, #5
 80042c8:	701a      	strb	r2, [r3, #0]
					altitude_rampa_control =0;
 80042ca:	4b2e      	ldr	r3, [pc, #184]	@ (8004384 <main+0x624>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	701a      	strb	r2, [r3, #0]
			 break;
 80042d0:	e067      	b.n	80043a2 <main+0x642>

		  case SUSTAINER_ANA:
				v4_mod=6;
 80042d2:	4b1f      	ldr	r3, [pc, #124]	@ (8004350 <main+0x5f0>)
 80042d4:	2206      	movs	r2, #6
 80042d6:	701a      	strb	r2, [r3, #0]
					  //AYRILDI VEYA APOGEEDAN GELEN APOGEE BİLGİSİNDEN SONRA İSTENEN İRTİFADA ANA PARA�?ÜT AÇ

				if(altitude <= 500 && speed < 0  && altitude_rampa_control == 0 )
 80042d8:	4b2e      	ldr	r3, [pc, #184]	@ (8004394 <main+0x634>)
 80042da:	edd3 7a00 	vldr	s15, [r3]
 80042de:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8004398 <main+0x638>
 80042e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042ea:	d900      	bls.n	80042ee <main+0x58e>
					HAL_Delay(500);
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, RESET);
					SUSTAINER=FINISH;
				}

			  break;
 80042ec:	e058      	b.n	80043a0 <main+0x640>
				if(altitude <= 500 && speed < 0  && altitude_rampa_control == 0 )
 80042ee:	4b27      	ldr	r3, [pc, #156]	@ (800438c <main+0x62c>)
 80042f0:	edd3 7a00 	vldr	s15, [r3]
 80042f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80042f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042fc:	d400      	bmi.n	8004300 <main+0x5a0>
			  break;
 80042fe:	e04f      	b.n	80043a0 <main+0x640>
				if(altitude <= 500 && speed < 0  && altitude_rampa_control == 0 )
 8004300:	4b20      	ldr	r3, [pc, #128]	@ (8004384 <main+0x624>)
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d14b      	bne.n	80043a0 <main+0x640>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, SET);
 8004308:	2201      	movs	r2, #1
 800430a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800430e:	4823      	ldr	r0, [pc, #140]	@ (800439c <main+0x63c>)
 8004310:	f002 fd00 	bl	8006d14 <HAL_GPIO_WritePin>
					HAL_Delay(500);
 8004314:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004318:	f001 fcfc 	bl	8005d14 <HAL_Delay>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, RESET);
 800431c:	2200      	movs	r2, #0
 800431e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004322:	481e      	ldr	r0, [pc, #120]	@ (800439c <main+0x63c>)
 8004324:	f002 fcf6 	bl	8006d14 <HAL_GPIO_WritePin>
					SUSTAINER=FINISH;
 8004328:	4b0f      	ldr	r3, [pc, #60]	@ (8004368 <main+0x608>)
 800432a:	2206      	movs	r2, #6
 800432c:	701a      	strb	r2, [r3, #0]
			  break;
 800432e:	e037      	b.n	80043a0 <main+0x640>

		  case FINISH:
				v4_mod=7;
 8004330:	4b07      	ldr	r3, [pc, #28]	@ (8004350 <main+0x5f0>)
 8004332:	2207      	movs	r2, #7
 8004334:	701a      	strb	r2, [r3, #0]
					  //KURTARMA GERÇEKLE�?Tİ VERİ KAYDETMEYİ BIRAK VE BUZZERI AÇ
				flash_flag=1;
 8004336:	4b0e      	ldr	r3, [pc, #56]	@ (8004370 <main+0x610>)
 8004338:	2201      	movs	r2, #1
 800433a:	701a      	strb	r2, [r3, #0]

			  break;
 800433c:	e031      	b.n	80043a2 <main+0x642>
			 break;
 800433e:	bf00      	nop
 8004340:	e02f      	b.n	80043a2 <main+0x642>
 8004342:	bf00      	nop
 8004344:	2000224c 	.word	0x2000224c
 8004348:	200022d0 	.word	0x200022d0
 800434c:	200005a8 	.word	0x200005a8
 8004350:	20000644 	.word	0x20000644
 8004354:	20000645 	.word	0x20000645
 8004358:	200004fc 	.word	0x200004fc
 800435c:	20002294 	.word	0x20002294
 8004360:	0800efa0 	.word	0x0800efa0
 8004364:	20000540 	.word	0x20000540
 8004368:	200022cd 	.word	0x200022cd
 800436c:	20002380 	.word	0x20002380
 8004370:	2000063c 	.word	0x2000063c
 8004374:	20000636 	.word	0x20000636
 8004378:	2000039c 	.word	0x2000039c
 800437c:	20000584 	.word	0x20000584
 8004380:	40001400 	.word	0x40001400
 8004384:	20000637 	.word	0x20000637
 8004388:	42000000 	.word	0x42000000
 800438c:	200022b4 	.word	0x200022b4
 8004390:	40020400 	.word	0x40020400
 8004394:	200022a0 	.word	0x200022a0
 8004398:	43fa0000 	.word	0x43fa0000
 800439c:	40020800 	.word	0x40020800
			  break;
 80043a0:	bf00      	nop
		  }


/**************************************************************************************/
		  if(altitude >30 )
 80043a2:	4b9b      	ldr	r3, [pc, #620]	@ (8004610 <main+0x8b0>)
 80043a4:	edd3 7a00 	vldr	s15, [r3]
 80043a8:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80043ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043b4:	dd02      	ble.n	80043bc <main+0x65c>
		  {
			  altitude_rampa_control =1;
 80043b6:	4b97      	ldr	r3, [pc, #604]	@ (8004614 <main+0x8b4>)
 80043b8:	2201      	movs	r2, #1
 80043ba:	701a      	strb	r2, [r3, #0]
		  }
		  if(altitude>altitude_max) altitude_max = altitude;
 80043bc:	4b94      	ldr	r3, [pc, #592]	@ (8004610 <main+0x8b0>)
 80043be:	ed93 7a00 	vldr	s14, [r3]
 80043c2:	4b95      	ldr	r3, [pc, #596]	@ (8004618 <main+0x8b8>)
 80043c4:	edd3 7a00 	vldr	s15, [r3]
 80043c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80043cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043d0:	dd03      	ble.n	80043da <main+0x67a>
 80043d2:	4b8f      	ldr	r3, [pc, #572]	@ (8004610 <main+0x8b0>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a90      	ldr	r2, [pc, #576]	@ (8004618 <main+0x8b8>)
 80043d8:	6013      	str	r3, [r2, #0]
		  if(speed>speed_max) speed_max = speed;
 80043da:	4b90      	ldr	r3, [pc, #576]	@ (800461c <main+0x8bc>)
 80043dc:	ed93 7a00 	vldr	s14, [r3]
 80043e0:	4b8f      	ldr	r3, [pc, #572]	@ (8004620 <main+0x8c0>)
 80043e2:	edd3 7a00 	vldr	s15, [r3]
 80043e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80043ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043ee:	dd03      	ble.n	80043f8 <main+0x698>
 80043f0:	4b8a      	ldr	r3, [pc, #552]	@ (800461c <main+0x8bc>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a8a      	ldr	r2, [pc, #552]	@ (8004620 <main+0x8c0>)
 80043f6:	6013      	str	r3, [r2, #0]
/**************************************************************************************/
		  if(adc_flag ==1)
 80043f8:	4b8a      	ldr	r3, [pc, #552]	@ (8004624 <main+0x8c4>)
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d14a      	bne.n	8004496 <main+0x736>
		  {
			  if(adc > 2476) adc = 2234;
 8004400:	4b89      	ldr	r3, [pc, #548]	@ (8004628 <main+0x8c8>)
 8004402:	edd3 7a00 	vldr	s15, [r3]
 8004406:	ed9f 7a89 	vldr	s14, [pc, #548]	@ 800462c <main+0x8cc>
 800440a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800440e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004412:	dd02      	ble.n	800441a <main+0x6ba>
 8004414:	4b84      	ldr	r3, [pc, #528]	@ (8004628 <main+0x8c8>)
 8004416:	4a86      	ldr	r2, [pc, #536]	@ (8004630 <main+0x8d0>)
 8004418:	601a      	str	r2, [r3, #0]
			  if(adc < 1755) adc = 1755;
 800441a:	4b83      	ldr	r3, [pc, #524]	@ (8004628 <main+0x8c8>)
 800441c:	edd3 7a00 	vldr	s15, [r3]
 8004420:	ed9f 7a84 	vldr	s14, [pc, #528]	@ 8004634 <main+0x8d4>
 8004424:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800442c:	d502      	bpl.n	8004434 <main+0x6d4>
 800442e:	4b7e      	ldr	r3, [pc, #504]	@ (8004628 <main+0x8c8>)
 8004430:	4a81      	ldr	r2, [pc, #516]	@ (8004638 <main+0x8d8>)
 8004432:	601a      	str	r2, [r3, #0]
			  // 6V = 1755 adc val 1,41V
			  // 8.4V = 2476 adc val 1,99V 0,58V
			  adc_pil_val=(float)( ( ( (adc/4095)*3.3)-1.41) / (1.99-1.41) ) *100 ; // pil conv
 8004434:	4b7c      	ldr	r3, [pc, #496]	@ (8004628 <main+0x8c8>)
 8004436:	edd3 7a00 	vldr	s15, [r3]
 800443a:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800463c <main+0x8dc>
 800443e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004442:	ee16 0a90 	vmov	r0, s13
 8004446:	f7fc f897 	bl	8000578 <__aeabi_f2d>
 800444a:	a36b      	add	r3, pc, #428	@ (adr r3, 80045f8 <main+0x898>)
 800444c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004450:	f7fc f8ea 	bl	8000628 <__aeabi_dmul>
 8004454:	4602      	mov	r2, r0
 8004456:	460b      	mov	r3, r1
 8004458:	4610      	mov	r0, r2
 800445a:	4619      	mov	r1, r3
 800445c:	a368      	add	r3, pc, #416	@ (adr r3, 8004600 <main+0x8a0>)
 800445e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004462:	f7fb ff29 	bl	80002b8 <__aeabi_dsub>
 8004466:	4602      	mov	r2, r0
 8004468:	460b      	mov	r3, r1
 800446a:	4610      	mov	r0, r2
 800446c:	4619      	mov	r1, r3
 800446e:	a366      	add	r3, pc, #408	@ (adr r3, 8004608 <main+0x8a8>)
 8004470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004474:	f7fc fa02 	bl	800087c <__aeabi_ddiv>
 8004478:	4602      	mov	r2, r0
 800447a:	460b      	mov	r3, r1
 800447c:	4610      	mov	r0, r2
 800447e:	4619      	mov	r1, r3
 8004480:	f7fc fbca 	bl	8000c18 <__aeabi_d2f>
 8004484:	ee07 0a10 	vmov	s14, r0
 8004488:	eddf 7a6d 	vldr	s15, [pc, #436]	@ 8004640 <main+0x8e0>
 800448c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004490:	4b6c      	ldr	r3, [pc, #432]	@ (8004644 <main+0x8e4>)
 8004492:	edc3 7a00 	vstr	s15, [r3]

		  }
/**********************Flash Kayıt*********************************************************/
	if(flash_flag == 1 && SUSTAINER >=6 ) //
 8004496:	4b6c      	ldr	r3, [pc, #432]	@ (8004648 <main+0x8e8>)
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	2b01      	cmp	r3, #1
 800449c:	d14c      	bne.n	8004538 <main+0x7d8>
 800449e:	4b6b      	ldr	r3, [pc, #428]	@ (800464c <main+0x8ec>)
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	2b05      	cmp	r3, #5
 80044a4:	d948      	bls.n	8004538 <main+0x7d8>
	{

		W25Q_Write_Page(page, 0, sizeof(flash_accX), flash_accX);
 80044a6:	4b6a      	ldr	r3, [pc, #424]	@ (8004650 <main+0x8f0>)
 80044a8:	6818      	ldr	r0, [r3, #0]
 80044aa:	4b6a      	ldr	r3, [pc, #424]	@ (8004654 <main+0x8f4>)
 80044ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80044b0:	2100      	movs	r1, #0
 80044b2:	f7fe fcde 	bl	8002e72 <W25Q_Write_Page>
		page++;
 80044b6:	4b66      	ldr	r3, [pc, #408]	@ (8004650 <main+0x8f0>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	3301      	adds	r3, #1
 80044bc:	4a64      	ldr	r2, [pc, #400]	@ (8004650 <main+0x8f0>)
 80044be:	6013      	str	r3, [r2, #0]
		W25Q_Write_Page(page, 0, sizeof(flash_accX), flash_accY);
 80044c0:	4b63      	ldr	r3, [pc, #396]	@ (8004650 <main+0x8f0>)
 80044c2:	6818      	ldr	r0, [r3, #0]
 80044c4:	4b64      	ldr	r3, [pc, #400]	@ (8004658 <main+0x8f8>)
 80044c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80044ca:	2100      	movs	r1, #0
 80044cc:	f7fe fcd1 	bl	8002e72 <W25Q_Write_Page>
		page++;
 80044d0:	4b5f      	ldr	r3, [pc, #380]	@ (8004650 <main+0x8f0>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	3301      	adds	r3, #1
 80044d6:	4a5e      	ldr	r2, [pc, #376]	@ (8004650 <main+0x8f0>)
 80044d8:	6013      	str	r3, [r2, #0]
		W25Q_Write_Page(page, 0, sizeof(flash_accX), flash_accZ);
 80044da:	4b5d      	ldr	r3, [pc, #372]	@ (8004650 <main+0x8f0>)
 80044dc:	6818      	ldr	r0, [r3, #0]
 80044de:	4b5f      	ldr	r3, [pc, #380]	@ (800465c <main+0x8fc>)
 80044e0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80044e4:	2100      	movs	r1, #0
 80044e6:	f7fe fcc4 	bl	8002e72 <W25Q_Write_Page>
		page++;
 80044ea:	4b59      	ldr	r3, [pc, #356]	@ (8004650 <main+0x8f0>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	3301      	adds	r3, #1
 80044f0:	4a57      	ldr	r2, [pc, #348]	@ (8004650 <main+0x8f0>)
 80044f2:	6013      	str	r3, [r2, #0]
		W25Q_Write_Page(page, 0, sizeof(flash_accX), flash_gyroX);
 80044f4:	4b56      	ldr	r3, [pc, #344]	@ (8004650 <main+0x8f0>)
 80044f6:	6818      	ldr	r0, [r3, #0]
 80044f8:	4b59      	ldr	r3, [pc, #356]	@ (8004660 <main+0x900>)
 80044fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80044fe:	2100      	movs	r1, #0
 8004500:	f7fe fcb7 	bl	8002e72 <W25Q_Write_Page>
		page++;
 8004504:	4b52      	ldr	r3, [pc, #328]	@ (8004650 <main+0x8f0>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	3301      	adds	r3, #1
 800450a:	4a51      	ldr	r2, [pc, #324]	@ (8004650 <main+0x8f0>)
 800450c:	6013      	str	r3, [r2, #0]
		W25Q_Write_Page(page, 0, sizeof(flash_accX), flash_gyroY);
 800450e:	4b50      	ldr	r3, [pc, #320]	@ (8004650 <main+0x8f0>)
 8004510:	6818      	ldr	r0, [r3, #0]
 8004512:	4b54      	ldr	r3, [pc, #336]	@ (8004664 <main+0x904>)
 8004514:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004518:	2100      	movs	r1, #0
 800451a:	f7fe fcaa 	bl	8002e72 <W25Q_Write_Page>
		page++;
 800451e:	4b4c      	ldr	r3, [pc, #304]	@ (8004650 <main+0x8f0>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	3301      	adds	r3, #1
 8004524:	4a4a      	ldr	r2, [pc, #296]	@ (8004650 <main+0x8f0>)
 8004526:	6013      	str	r3, [r2, #0]
		W25Q_Write_Page(page, 0, sizeof(flash_accX), flash_gyroZ);
 8004528:	4b49      	ldr	r3, [pc, #292]	@ (8004650 <main+0x8f0>)
 800452a:	6818      	ldr	r0, [r3, #0]
 800452c:	4b4e      	ldr	r3, [pc, #312]	@ (8004668 <main+0x908>)
 800452e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004532:	2100      	movs	r1, #0
 8004534:	f7fe fc9d 	bl	8002e72 <W25Q_Write_Page>


	}
//
	if(timer_200ms_flag == 1 && i_flag ==0 && SUSTAINER >=1)
 8004538:	4b4c      	ldr	r3, [pc, #304]	@ (800466c <main+0x90c>)
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	2b01      	cmp	r3, #1
 800453e:	f47f acba 	bne.w	8003eb6 <main+0x156>
 8004542:	4b4b      	ldr	r3, [pc, #300]	@ (8004670 <main+0x910>)
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	2b00      	cmp	r3, #0
 8004548:	f47f acb5 	bne.w	8003eb6 <main+0x156>
 800454c:	4b3f      	ldr	r3, [pc, #252]	@ (800464c <main+0x8ec>)
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	2b00      	cmp	r3, #0
 8004552:	f43f acb0 	beq.w	8003eb6 <main+0x156>
	{
		if(i == 255) {
 8004556:	4b47      	ldr	r3, [pc, #284]	@ (8004674 <main+0x914>)
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	2bff      	cmp	r3, #255	@ 0xff
 800455c:	d102      	bne.n	8004564 <main+0x804>
			i_flag=1;
 800455e:	4b44      	ldr	r3, [pc, #272]	@ (8004670 <main+0x910>)
 8004560:	2201      	movs	r2, #1
 8004562:	701a      	strb	r2, [r3, #0]
		}

		flash_accX[i] = Lsm_Sensor.Accel_X;
 8004564:	4b43      	ldr	r3, [pc, #268]	@ (8004674 <main+0x914>)
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	4618      	mov	r0, r3
 800456a:	4b43      	ldr	r3, [pc, #268]	@ (8004678 <main+0x918>)
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	4939      	ldr	r1, [pc, #228]	@ (8004654 <main+0x8f4>)
 8004570:	0083      	lsls	r3, r0, #2
 8004572:	440b      	add	r3, r1
 8004574:	601a      	str	r2, [r3, #0]
		flash_accY[i] = Lsm_Sensor.Accel_Y;
 8004576:	4b3f      	ldr	r3, [pc, #252]	@ (8004674 <main+0x914>)
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	4618      	mov	r0, r3
 800457c:	4b3e      	ldr	r3, [pc, #248]	@ (8004678 <main+0x918>)
 800457e:	685a      	ldr	r2, [r3, #4]
 8004580:	4935      	ldr	r1, [pc, #212]	@ (8004658 <main+0x8f8>)
 8004582:	0083      	lsls	r3, r0, #2
 8004584:	440b      	add	r3, r1
 8004586:	601a      	str	r2, [r3, #0]
		flash_accZ[i] = Lsm_Sensor.Accel_Z;
 8004588:	4b3a      	ldr	r3, [pc, #232]	@ (8004674 <main+0x914>)
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	4618      	mov	r0, r3
 800458e:	4b3a      	ldr	r3, [pc, #232]	@ (8004678 <main+0x918>)
 8004590:	689a      	ldr	r2, [r3, #8]
 8004592:	4932      	ldr	r1, [pc, #200]	@ (800465c <main+0x8fc>)
 8004594:	0083      	lsls	r3, r0, #2
 8004596:	440b      	add	r3, r1
 8004598:	601a      	str	r2, [r3, #0]
		flash_gyroX[i] = Lsm_Sensor.Gyro_X;
 800459a:	4b36      	ldr	r3, [pc, #216]	@ (8004674 <main+0x914>)
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	4618      	mov	r0, r3
 80045a0:	4b35      	ldr	r3, [pc, #212]	@ (8004678 <main+0x918>)
 80045a2:	68da      	ldr	r2, [r3, #12]
 80045a4:	492e      	ldr	r1, [pc, #184]	@ (8004660 <main+0x900>)
 80045a6:	0083      	lsls	r3, r0, #2
 80045a8:	440b      	add	r3, r1
 80045aa:	601a      	str	r2, [r3, #0]
		flash_gyroY[i] = Lsm_Sensor.Gyro_Y;
 80045ac:	4b31      	ldr	r3, [pc, #196]	@ (8004674 <main+0x914>)
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	4618      	mov	r0, r3
 80045b2:	4b31      	ldr	r3, [pc, #196]	@ (8004678 <main+0x918>)
 80045b4:	691a      	ldr	r2, [r3, #16]
 80045b6:	492b      	ldr	r1, [pc, #172]	@ (8004664 <main+0x904>)
 80045b8:	0083      	lsls	r3, r0, #2
 80045ba:	440b      	add	r3, r1
 80045bc:	601a      	str	r2, [r3, #0]
		flash_gyroZ[i] = Lsm_Sensor.Gyro_Z;
 80045be:	4b2d      	ldr	r3, [pc, #180]	@ (8004674 <main+0x914>)
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	4618      	mov	r0, r3
 80045c4:	4b2c      	ldr	r3, [pc, #176]	@ (8004678 <main+0x918>)
 80045c6:	695a      	ldr	r2, [r3, #20]
 80045c8:	4927      	ldr	r1, [pc, #156]	@ (8004668 <main+0x908>)
 80045ca:	0083      	lsls	r3, r0, #2
 80045cc:	440b      	add	r3, r1
 80045ce:	601a      	str	r2, [r3, #0]
		flash_altitude[i] =altitude;
 80045d0:	4b28      	ldr	r3, [pc, #160]	@ (8004674 <main+0x914>)
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	4618      	mov	r0, r3
 80045d6:	4b0e      	ldr	r3, [pc, #56]	@ (8004610 <main+0x8b0>)
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	4928      	ldr	r1, [pc, #160]	@ (800467c <main+0x91c>)
 80045dc:	0083      	lsls	r3, r0, #2
 80045de:	440b      	add	r3, r1
 80045e0:	601a      	str	r2, [r3, #0]
		timer_200ms_flag =0;
 80045e2:	4b22      	ldr	r3, [pc, #136]	@ (800466c <main+0x90c>)
 80045e4:	2200      	movs	r2, #0
 80045e6:	701a      	strb	r2, [r3, #0]

		i++;
 80045e8:	4b22      	ldr	r3, [pc, #136]	@ (8004674 <main+0x914>)
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	3301      	adds	r3, #1
 80045ee:	b2da      	uxtb	r2, r3
 80045f0:	4b20      	ldr	r3, [pc, #128]	@ (8004674 <main+0x914>)
 80045f2:	701a      	strb	r2, [r3, #0]
	if(sensor_flag==1)
 80045f4:	e45f      	b.n	8003eb6 <main+0x156>
 80045f6:	bf00      	nop
 80045f8:	66666666 	.word	0x66666666
 80045fc:	400a6666 	.word	0x400a6666
 8004600:	28f5c28f 	.word	0x28f5c28f
 8004604:	3ff68f5c 	.word	0x3ff68f5c
 8004608:	28f5c290 	.word	0x28f5c290
 800460c:	3fe28f5c 	.word	0x3fe28f5c
 8004610:	200022a0 	.word	0x200022a0
 8004614:	20000637 	.word	0x20000637
 8004618:	20000640 	.word	0x20000640
 800461c:	200022b4 	.word	0x200022b4
 8004620:	200022b8 	.word	0x200022b8
 8004624:	200005b1 	.word	0x200005b1
 8004628:	200005ac 	.word	0x200005ac
 800462c:	451ac000 	.word	0x451ac000
 8004630:	450ba000 	.word	0x450ba000
 8004634:	44db6000 	.word	0x44db6000
 8004638:	44db6000 	.word	0x44db6000
 800463c:	457ff000 	.word	0x457ff000
 8004640:	42c80000 	.word	0x42c80000
 8004644:	200005a8 	.word	0x200005a8
 8004648:	2000063c 	.word	0x2000063c
 800464c:	200022cd 	.word	0x200022cd
 8004650:	20000638 	.word	0x20000638
 8004654:	20000a4c 	.word	0x20000a4c
 8004658:	2000124c 	.word	0x2000124c
 800465c:	20000e4c 	.word	0x20000e4c
 8004660:	2000164c 	.word	0x2000164c
 8004664:	20001a4c 	.word	0x20001a4c
 8004668:	20001e4c 	.word	0x20001e4c
 800466c:	2000063d 	.word	0x2000063d
 8004670:	20000648 	.word	0x20000648
 8004674:	20000647 	.word	0x20000647
 8004678:	20002380 	.word	0x20002380
 800467c:	2000064c 	.word	0x2000064c

08004680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b094      	sub	sp, #80	@ 0x50
 8004684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004686:	f107 031c 	add.w	r3, r7, #28
 800468a:	2234      	movs	r2, #52	@ 0x34
 800468c:	2100      	movs	r1, #0
 800468e:	4618      	mov	r0, r3
 8004690:	f007 fd2b 	bl	800c0ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004694:	f107 0308 	add.w	r3, r7, #8
 8004698:	2200      	movs	r2, #0
 800469a:	601a      	str	r2, [r3, #0]
 800469c:	605a      	str	r2, [r3, #4]
 800469e:	609a      	str	r2, [r3, #8]
 80046a0:	60da      	str	r2, [r3, #12]
 80046a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80046a4:	2300      	movs	r3, #0
 80046a6:	607b      	str	r3, [r7, #4]
 80046a8:	4b29      	ldr	r3, [pc, #164]	@ (8004750 <SystemClock_Config+0xd0>)
 80046aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ac:	4a28      	ldr	r2, [pc, #160]	@ (8004750 <SystemClock_Config+0xd0>)
 80046ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80046b4:	4b26      	ldr	r3, [pc, #152]	@ (8004750 <SystemClock_Config+0xd0>)
 80046b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046bc:	607b      	str	r3, [r7, #4]
 80046be:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80046c0:	2300      	movs	r3, #0
 80046c2:	603b      	str	r3, [r7, #0]
 80046c4:	4b23      	ldr	r3, [pc, #140]	@ (8004754 <SystemClock_Config+0xd4>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a22      	ldr	r2, [pc, #136]	@ (8004754 <SystemClock_Config+0xd4>)
 80046ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80046ce:	6013      	str	r3, [r2, #0]
 80046d0:	4b20      	ldr	r3, [pc, #128]	@ (8004754 <SystemClock_Config+0xd4>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80046d8:	603b      	str	r3, [r7, #0]
 80046da:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80046dc:	2301      	movs	r3, #1
 80046de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80046e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80046e4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80046e6:	2302      	movs	r3, #2
 80046e8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80046ea:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80046ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80046f0:	2304      	movs	r3, #4
 80046f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80046f4:	23a8      	movs	r3, #168	@ 0xa8
 80046f6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80046f8:	2302      	movs	r3, #2
 80046fa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80046fc:	2307      	movs	r3, #7
 80046fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004700:	2302      	movs	r3, #2
 8004702:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004704:	f107 031c 	add.w	r3, r7, #28
 8004708:	4618      	mov	r0, r3
 800470a:	f004 fab5 	bl	8008c78 <HAL_RCC_OscConfig>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d001      	beq.n	8004718 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8004714:	f000 fe60 	bl	80053d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004718:	230f      	movs	r3, #15
 800471a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 800471c:	2303      	movs	r3, #3
 800471e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004720:	2300      	movs	r3, #0
 8004722:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004724:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004728:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800472a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800472e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004730:	f107 0308 	add.w	r3, r7, #8
 8004734:	2105      	movs	r1, #5
 8004736:	4618      	mov	r0, r3
 8004738:	f003 ff54 	bl	80085e4 <HAL_RCC_ClockConfig>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d001      	beq.n	8004746 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8004742:	f000 fe49 	bl	80053d8 <Error_Handler>
  }
}
 8004746:	bf00      	nop
 8004748:	3750      	adds	r7, #80	@ 0x50
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	40023800 	.word	0x40023800
 8004754:	40007000 	.word	0x40007000

08004758 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800475e:	463b      	mov	r3, r7
 8004760:	2200      	movs	r2, #0
 8004762:	601a      	str	r2, [r3, #0]
 8004764:	605a      	str	r2, [r3, #4]
 8004766:	609a      	str	r2, [r3, #8]
 8004768:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800476a:	4b21      	ldr	r3, [pc, #132]	@ (80047f0 <MX_ADC1_Init+0x98>)
 800476c:	4a21      	ldr	r2, [pc, #132]	@ (80047f4 <MX_ADC1_Init+0x9c>)
 800476e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004770:	4b1f      	ldr	r3, [pc, #124]	@ (80047f0 <MX_ADC1_Init+0x98>)
 8004772:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004776:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004778:	4b1d      	ldr	r3, [pc, #116]	@ (80047f0 <MX_ADC1_Init+0x98>)
 800477a:	2200      	movs	r2, #0
 800477c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800477e:	4b1c      	ldr	r3, [pc, #112]	@ (80047f0 <MX_ADC1_Init+0x98>)
 8004780:	2200      	movs	r2, #0
 8004782:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004784:	4b1a      	ldr	r3, [pc, #104]	@ (80047f0 <MX_ADC1_Init+0x98>)
 8004786:	2201      	movs	r2, #1
 8004788:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800478a:	4b19      	ldr	r3, [pc, #100]	@ (80047f0 <MX_ADC1_Init+0x98>)
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004792:	4b17      	ldr	r3, [pc, #92]	@ (80047f0 <MX_ADC1_Init+0x98>)
 8004794:	2200      	movs	r2, #0
 8004796:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004798:	4b15      	ldr	r3, [pc, #84]	@ (80047f0 <MX_ADC1_Init+0x98>)
 800479a:	4a17      	ldr	r2, [pc, #92]	@ (80047f8 <MX_ADC1_Init+0xa0>)
 800479c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800479e:	4b14      	ldr	r3, [pc, #80]	@ (80047f0 <MX_ADC1_Init+0x98>)
 80047a0:	2200      	movs	r2, #0
 80047a2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80047a4:	4b12      	ldr	r3, [pc, #72]	@ (80047f0 <MX_ADC1_Init+0x98>)
 80047a6:	2201      	movs	r2, #1
 80047a8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80047aa:	4b11      	ldr	r3, [pc, #68]	@ (80047f0 <MX_ADC1_Init+0x98>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80047b2:	4b0f      	ldr	r3, [pc, #60]	@ (80047f0 <MX_ADC1_Init+0x98>)
 80047b4:	2201      	movs	r2, #1
 80047b6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80047b8:	480d      	ldr	r0, [pc, #52]	@ (80047f0 <MX_ADC1_Init+0x98>)
 80047ba:	f001 facf 	bl	8005d5c <HAL_ADC_Init>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d001      	beq.n	80047c8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80047c4:	f000 fe08 	bl	80053d8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80047c8:	230c      	movs	r3, #12
 80047ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80047cc:	2301      	movs	r3, #1
 80047ce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80047d0:	2300      	movs	r3, #0
 80047d2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80047d4:	463b      	mov	r3, r7
 80047d6:	4619      	mov	r1, r3
 80047d8:	4805      	ldr	r0, [pc, #20]	@ (80047f0 <MX_ADC1_Init+0x98>)
 80047da:	f001 fd13 	bl	8006204 <HAL_ADC_ConfigChannel>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d001      	beq.n	80047e8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80047e4:	f000 fdf8 	bl	80053d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80047e8:	bf00      	nop
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	20000260 	.word	0x20000260
 80047f4:	40012000 	.word	0x40012000
 80047f8:	0f000001 	.word	0x0f000001

080047fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004800:	4b12      	ldr	r3, [pc, #72]	@ (800484c <MX_I2C1_Init+0x50>)
 8004802:	4a13      	ldr	r2, [pc, #76]	@ (8004850 <MX_I2C1_Init+0x54>)
 8004804:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8004806:	4b11      	ldr	r3, [pc, #68]	@ (800484c <MX_I2C1_Init+0x50>)
 8004808:	4a12      	ldr	r2, [pc, #72]	@ (8004854 <MX_I2C1_Init+0x58>)
 800480a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800480c:	4b0f      	ldr	r3, [pc, #60]	@ (800484c <MX_I2C1_Init+0x50>)
 800480e:	2200      	movs	r2, #0
 8004810:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004812:	4b0e      	ldr	r3, [pc, #56]	@ (800484c <MX_I2C1_Init+0x50>)
 8004814:	2200      	movs	r2, #0
 8004816:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004818:	4b0c      	ldr	r3, [pc, #48]	@ (800484c <MX_I2C1_Init+0x50>)
 800481a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800481e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004820:	4b0a      	ldr	r3, [pc, #40]	@ (800484c <MX_I2C1_Init+0x50>)
 8004822:	2200      	movs	r2, #0
 8004824:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004826:	4b09      	ldr	r3, [pc, #36]	@ (800484c <MX_I2C1_Init+0x50>)
 8004828:	2200      	movs	r2, #0
 800482a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800482c:	4b07      	ldr	r3, [pc, #28]	@ (800484c <MX_I2C1_Init+0x50>)
 800482e:	2200      	movs	r2, #0
 8004830:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004832:	4b06      	ldr	r3, [pc, #24]	@ (800484c <MX_I2C1_Init+0x50>)
 8004834:	2200      	movs	r2, #0
 8004836:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004838:	4804      	ldr	r0, [pc, #16]	@ (800484c <MX_I2C1_Init+0x50>)
 800483a:	f002 fa9f 	bl	8006d7c <HAL_I2C_Init>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d001      	beq.n	8004848 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004844:	f000 fdc8 	bl	80053d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004848:	bf00      	nop
 800484a:	bd80      	pop	{r7, pc}
 800484c:	200002a8 	.word	0x200002a8
 8004850:	40005400 	.word	0x40005400
 8004854:	00061a80 	.word	0x00061a80

08004858 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800485c:	4b17      	ldr	r3, [pc, #92]	@ (80048bc <MX_SPI1_Init+0x64>)
 800485e:	4a18      	ldr	r2, [pc, #96]	@ (80048c0 <MX_SPI1_Init+0x68>)
 8004860:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004862:	4b16      	ldr	r3, [pc, #88]	@ (80048bc <MX_SPI1_Init+0x64>)
 8004864:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004868:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800486a:	4b14      	ldr	r3, [pc, #80]	@ (80048bc <MX_SPI1_Init+0x64>)
 800486c:	2200      	movs	r2, #0
 800486e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004870:	4b12      	ldr	r3, [pc, #72]	@ (80048bc <MX_SPI1_Init+0x64>)
 8004872:	2200      	movs	r2, #0
 8004874:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004876:	4b11      	ldr	r3, [pc, #68]	@ (80048bc <MX_SPI1_Init+0x64>)
 8004878:	2200      	movs	r2, #0
 800487a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800487c:	4b0f      	ldr	r3, [pc, #60]	@ (80048bc <MX_SPI1_Init+0x64>)
 800487e:	2200      	movs	r2, #0
 8004880:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004882:	4b0e      	ldr	r3, [pc, #56]	@ (80048bc <MX_SPI1_Init+0x64>)
 8004884:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004888:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800488a:	4b0c      	ldr	r3, [pc, #48]	@ (80048bc <MX_SPI1_Init+0x64>)
 800488c:	2220      	movs	r2, #32
 800488e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004890:	4b0a      	ldr	r3, [pc, #40]	@ (80048bc <MX_SPI1_Init+0x64>)
 8004892:	2200      	movs	r2, #0
 8004894:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004896:	4b09      	ldr	r3, [pc, #36]	@ (80048bc <MX_SPI1_Init+0x64>)
 8004898:	2200      	movs	r2, #0
 800489a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800489c:	4b07      	ldr	r3, [pc, #28]	@ (80048bc <MX_SPI1_Init+0x64>)
 800489e:	2200      	movs	r2, #0
 80048a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80048a2:	4b06      	ldr	r3, [pc, #24]	@ (80048bc <MX_SPI1_Init+0x64>)
 80048a4:	220a      	movs	r2, #10
 80048a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80048a8:	4804      	ldr	r0, [pc, #16]	@ (80048bc <MX_SPI1_Init+0x64>)
 80048aa:	f004 fc83 	bl	80091b4 <HAL_SPI_Init>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d001      	beq.n	80048b8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80048b4:	f000 fd90 	bl	80053d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80048b8:	bf00      	nop
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	200002fc 	.word	0x200002fc
 80048c0:	40013000 	.word	0x40013000

080048c4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80048ca:	463b      	mov	r3, r7
 80048cc:	2200      	movs	r2, #0
 80048ce:	601a      	str	r2, [r3, #0]
 80048d0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80048d2:	4b15      	ldr	r3, [pc, #84]	@ (8004928 <MX_TIM6_Init+0x64>)
 80048d4:	4a15      	ldr	r2, [pc, #84]	@ (800492c <MX_TIM6_Init+0x68>)
 80048d6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 840;
 80048d8:	4b13      	ldr	r3, [pc, #76]	@ (8004928 <MX_TIM6_Init+0x64>)
 80048da:	f44f 7252 	mov.w	r2, #840	@ 0x348
 80048de:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048e0:	4b11      	ldr	r3, [pc, #68]	@ (8004928 <MX_TIM6_Init+0x64>)
 80048e2:	2200      	movs	r2, #0
 80048e4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 19999;
 80048e6:	4b10      	ldr	r3, [pc, #64]	@ (8004928 <MX_TIM6_Init+0x64>)
 80048e8:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80048ec:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80048ee:	4b0e      	ldr	r3, [pc, #56]	@ (8004928 <MX_TIM6_Init+0x64>)
 80048f0:	2200      	movs	r2, #0
 80048f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80048f4:	480c      	ldr	r0, [pc, #48]	@ (8004928 <MX_TIM6_Init+0x64>)
 80048f6:	f004 feed 	bl	80096d4 <HAL_TIM_Base_Init>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d001      	beq.n	8004904 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8004900:	f000 fd6a 	bl	80053d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004904:	2300      	movs	r3, #0
 8004906:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004908:	2300      	movs	r3, #0
 800490a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800490c:	463b      	mov	r3, r7
 800490e:	4619      	mov	r1, r3
 8004910:	4805      	ldr	r0, [pc, #20]	@ (8004928 <MX_TIM6_Init+0x64>)
 8004912:	f005 fa07 	bl	8009d24 <HAL_TIMEx_MasterConfigSynchronization>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d001      	beq.n	8004920 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800491c:	f000 fd5c 	bl	80053d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004920:	bf00      	nop
 8004922:	3708      	adds	r7, #8
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	20000354 	.word	0x20000354
 800492c:	40001000 	.word	0x40001000

08004930 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004936:	463b      	mov	r3, r7
 8004938:	2200      	movs	r2, #0
 800493a:	601a      	str	r2, [r3, #0]
 800493c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800493e:	4b15      	ldr	r3, [pc, #84]	@ (8004994 <MX_TIM7_Init+0x64>)
 8004940:	4a15      	ldr	r2, [pc, #84]	@ (8004998 <MX_TIM7_Init+0x68>)
 8004942:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8400-1;
 8004944:	4b13      	ldr	r3, [pc, #76]	@ (8004994 <MX_TIM7_Init+0x64>)
 8004946:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 800494a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800494c:	4b11      	ldr	r3, [pc, #68]	@ (8004994 <MX_TIM7_Init+0x64>)
 800494e:	2200      	movs	r2, #0
 8004950:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 59999;
 8004952:	4b10      	ldr	r3, [pc, #64]	@ (8004994 <MX_TIM7_Init+0x64>)
 8004954:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8004958:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800495a:	4b0e      	ldr	r3, [pc, #56]	@ (8004994 <MX_TIM7_Init+0x64>)
 800495c:	2200      	movs	r2, #0
 800495e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004960:	480c      	ldr	r0, [pc, #48]	@ (8004994 <MX_TIM7_Init+0x64>)
 8004962:	f004 feb7 	bl	80096d4 <HAL_TIM_Base_Init>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d001      	beq.n	8004970 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800496c:	f000 fd34 	bl	80053d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004970:	2300      	movs	r3, #0
 8004972:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004974:	2300      	movs	r3, #0
 8004976:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004978:	463b      	mov	r3, r7
 800497a:	4619      	mov	r1, r3
 800497c:	4805      	ldr	r0, [pc, #20]	@ (8004994 <MX_TIM7_Init+0x64>)
 800497e:	f005 f9d1 	bl	8009d24 <HAL_TIMEx_MasterConfigSynchronization>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d001      	beq.n	800498c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8004988:	f000 fd26 	bl	80053d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800498c:	bf00      	nop
 800498e:	3708      	adds	r7, #8
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}
 8004994:	2000039c 	.word	0x2000039c
 8004998:	40001400 	.word	0x40001400

0800499c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80049a0:	4b0e      	ldr	r3, [pc, #56]	@ (80049dc <MX_TIM10_Init+0x40>)
 80049a2:	4a0f      	ldr	r2, [pc, #60]	@ (80049e0 <MX_TIM10_Init+0x44>)
 80049a4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1680;
 80049a6:	4b0d      	ldr	r3, [pc, #52]	@ (80049dc <MX_TIM10_Init+0x40>)
 80049a8:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 80049ac:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049ae:	4b0b      	ldr	r3, [pc, #44]	@ (80049dc <MX_TIM10_Init+0x40>)
 80049b0:	2200      	movs	r2, #0
 80049b2:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 3000-1;
 80049b4:	4b09      	ldr	r3, [pc, #36]	@ (80049dc <MX_TIM10_Init+0x40>)
 80049b6:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80049ba:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049bc:	4b07      	ldr	r3, [pc, #28]	@ (80049dc <MX_TIM10_Init+0x40>)
 80049be:	2200      	movs	r2, #0
 80049c0:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80049c2:	4b06      	ldr	r3, [pc, #24]	@ (80049dc <MX_TIM10_Init+0x40>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80049c8:	4804      	ldr	r0, [pc, #16]	@ (80049dc <MX_TIM10_Init+0x40>)
 80049ca:	f004 fe83 	bl	80096d4 <HAL_TIM_Base_Init>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d001      	beq.n	80049d8 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80049d4:	f000 fd00 	bl	80053d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80049d8:	bf00      	nop
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	200003e4 	.word	0x200003e4
 80049e0:	40014400 	.word	0x40014400

080049e4 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80049e8:	4b0e      	ldr	r3, [pc, #56]	@ (8004a24 <MX_TIM11_Init+0x40>)
 80049ea:	4a0f      	ldr	r2, [pc, #60]	@ (8004a28 <MX_TIM11_Init+0x44>)
 80049ec:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 16800;
 80049ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004a24 <MX_TIM11_Init+0x40>)
 80049f0:	f244 12a0 	movw	r2, #16800	@ 0x41a0
 80049f4:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004a24 <MX_TIM11_Init+0x40>)
 80049f8:	2200      	movs	r2, #0
 80049fa:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 10000-1;
 80049fc:	4b09      	ldr	r3, [pc, #36]	@ (8004a24 <MX_TIM11_Init+0x40>)
 80049fe:	f242 720f 	movw	r2, #9999	@ 0x270f
 8004a02:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a04:	4b07      	ldr	r3, [pc, #28]	@ (8004a24 <MX_TIM11_Init+0x40>)
 8004a06:	2200      	movs	r2, #0
 8004a08:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004a0a:	4b06      	ldr	r3, [pc, #24]	@ (8004a24 <MX_TIM11_Init+0x40>)
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8004a10:	4804      	ldr	r0, [pc, #16]	@ (8004a24 <MX_TIM11_Init+0x40>)
 8004a12:	f004 fe5f 	bl	80096d4 <HAL_TIM_Base_Init>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d001      	beq.n	8004a20 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8004a1c:	f000 fcdc 	bl	80053d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8004a20:	bf00      	nop
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	2000042c 	.word	0x2000042c
 8004a28:	40014800 	.word	0x40014800

08004a2c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8004a30:	4b11      	ldr	r3, [pc, #68]	@ (8004a78 <MX_UART4_Init+0x4c>)
 8004a32:	4a12      	ldr	r2, [pc, #72]	@ (8004a7c <MX_UART4_Init+0x50>)
 8004a34:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8004a36:	4b10      	ldr	r3, [pc, #64]	@ (8004a78 <MX_UART4_Init+0x4c>)
 8004a38:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004a3c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004a3e:	4b0e      	ldr	r3, [pc, #56]	@ (8004a78 <MX_UART4_Init+0x4c>)
 8004a40:	2200      	movs	r2, #0
 8004a42:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004a44:	4b0c      	ldr	r3, [pc, #48]	@ (8004a78 <MX_UART4_Init+0x4c>)
 8004a46:	2200      	movs	r2, #0
 8004a48:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8004a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8004a78 <MX_UART4_Init+0x4c>)
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004a50:	4b09      	ldr	r3, [pc, #36]	@ (8004a78 <MX_UART4_Init+0x4c>)
 8004a52:	220c      	movs	r2, #12
 8004a54:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a56:	4b08      	ldr	r3, [pc, #32]	@ (8004a78 <MX_UART4_Init+0x4c>)
 8004a58:	2200      	movs	r2, #0
 8004a5a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a5c:	4b06      	ldr	r3, [pc, #24]	@ (8004a78 <MX_UART4_Init+0x4c>)
 8004a5e:	2200      	movs	r2, #0
 8004a60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8004a62:	4805      	ldr	r0, [pc, #20]	@ (8004a78 <MX_UART4_Init+0x4c>)
 8004a64:	f005 f9ee 	bl	8009e44 <HAL_UART_Init>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d001      	beq.n	8004a72 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8004a6e:	f000 fcb3 	bl	80053d8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8004a72:	bf00      	nop
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	20000474 	.word	0x20000474
 8004a7c:	40004c00 	.word	0x40004c00

08004a80 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004a84:	4b11      	ldr	r3, [pc, #68]	@ (8004acc <MX_USART2_UART_Init+0x4c>)
 8004a86:	4a12      	ldr	r2, [pc, #72]	@ (8004ad0 <MX_USART2_UART_Init+0x50>)
 8004a88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8004a8a:	4b10      	ldr	r3, [pc, #64]	@ (8004acc <MX_USART2_UART_Init+0x4c>)
 8004a8c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8004a90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004a92:	4b0e      	ldr	r3, [pc, #56]	@ (8004acc <MX_USART2_UART_Init+0x4c>)
 8004a94:	2200      	movs	r2, #0
 8004a96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004a98:	4b0c      	ldr	r3, [pc, #48]	@ (8004acc <MX_USART2_UART_Init+0x4c>)
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8004acc <MX_USART2_UART_Init+0x4c>)
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004aa4:	4b09      	ldr	r3, [pc, #36]	@ (8004acc <MX_USART2_UART_Init+0x4c>)
 8004aa6:	220c      	movs	r2, #12
 8004aa8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004aaa:	4b08      	ldr	r3, [pc, #32]	@ (8004acc <MX_USART2_UART_Init+0x4c>)
 8004aac:	2200      	movs	r2, #0
 8004aae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004ab0:	4b06      	ldr	r3, [pc, #24]	@ (8004acc <MX_USART2_UART_Init+0x4c>)
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004ab6:	4805      	ldr	r0, [pc, #20]	@ (8004acc <MX_USART2_UART_Init+0x4c>)
 8004ab8:	f005 f9c4 	bl	8009e44 <HAL_UART_Init>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d001      	beq.n	8004ac6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004ac2:	f000 fc89 	bl	80053d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004ac6:	bf00      	nop
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	200004b8 	.word	0x200004b8
 8004ad0:	40004400 	.word	0x40004400

08004ad4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004ad8:	4b11      	ldr	r3, [pc, #68]	@ (8004b20 <MX_USART3_UART_Init+0x4c>)
 8004ada:	4a12      	ldr	r2, [pc, #72]	@ (8004b24 <MX_USART3_UART_Init+0x50>)
 8004adc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8004ade:	4b10      	ldr	r3, [pc, #64]	@ (8004b20 <MX_USART3_UART_Init+0x4c>)
 8004ae0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8004ae4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004ae6:	4b0e      	ldr	r3, [pc, #56]	@ (8004b20 <MX_USART3_UART_Init+0x4c>)
 8004ae8:	2200      	movs	r2, #0
 8004aea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004aec:	4b0c      	ldr	r3, [pc, #48]	@ (8004b20 <MX_USART3_UART_Init+0x4c>)
 8004aee:	2200      	movs	r2, #0
 8004af0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004af2:	4b0b      	ldr	r3, [pc, #44]	@ (8004b20 <MX_USART3_UART_Init+0x4c>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004af8:	4b09      	ldr	r3, [pc, #36]	@ (8004b20 <MX_USART3_UART_Init+0x4c>)
 8004afa:	220c      	movs	r2, #12
 8004afc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004afe:	4b08      	ldr	r3, [pc, #32]	@ (8004b20 <MX_USART3_UART_Init+0x4c>)
 8004b00:	2200      	movs	r2, #0
 8004b02:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004b04:	4b06      	ldr	r3, [pc, #24]	@ (8004b20 <MX_USART3_UART_Init+0x4c>)
 8004b06:	2200      	movs	r2, #0
 8004b08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004b0a:	4805      	ldr	r0, [pc, #20]	@ (8004b20 <MX_USART3_UART_Init+0x4c>)
 8004b0c:	f005 f99a 	bl	8009e44 <HAL_UART_Init>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d001      	beq.n	8004b1a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004b16:	f000 fc5f 	bl	80053d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004b1a:	bf00      	nop
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	200004fc 	.word	0x200004fc
 8004b24:	40004800 	.word	0x40004800

08004b28 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004b2c:	4b11      	ldr	r3, [pc, #68]	@ (8004b74 <MX_USART6_UART_Init+0x4c>)
 8004b2e:	4a12      	ldr	r2, [pc, #72]	@ (8004b78 <MX_USART6_UART_Init+0x50>)
 8004b30:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 19200;
 8004b32:	4b10      	ldr	r3, [pc, #64]	@ (8004b74 <MX_USART6_UART_Init+0x4c>)
 8004b34:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8004b38:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8004b74 <MX_USART6_UART_Init+0x4c>)
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004b40:	4b0c      	ldr	r3, [pc, #48]	@ (8004b74 <MX_USART6_UART_Init+0x4c>)
 8004b42:	2200      	movs	r2, #0
 8004b44:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004b46:	4b0b      	ldr	r3, [pc, #44]	@ (8004b74 <MX_USART6_UART_Init+0x4c>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004b4c:	4b09      	ldr	r3, [pc, #36]	@ (8004b74 <MX_USART6_UART_Init+0x4c>)
 8004b4e:	220c      	movs	r2, #12
 8004b50:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004b52:	4b08      	ldr	r3, [pc, #32]	@ (8004b74 <MX_USART6_UART_Init+0x4c>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004b58:	4b06      	ldr	r3, [pc, #24]	@ (8004b74 <MX_USART6_UART_Init+0x4c>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004b5e:	4805      	ldr	r0, [pc, #20]	@ (8004b74 <MX_USART6_UART_Init+0x4c>)
 8004b60:	f005 f970 	bl	8009e44 <HAL_UART_Init>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8004b6a:	f000 fc35 	bl	80053d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004b6e:	bf00      	nop
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	20000540 	.word	0x20000540
 8004b78:	40011400 	.word	0x40011400

08004b7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b08a      	sub	sp, #40	@ 0x28
 8004b80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b82:	f107 0314 	add.w	r3, r7, #20
 8004b86:	2200      	movs	r2, #0
 8004b88:	601a      	str	r2, [r3, #0]
 8004b8a:	605a      	str	r2, [r3, #4]
 8004b8c:	609a      	str	r2, [r3, #8]
 8004b8e:	60da      	str	r2, [r3, #12]
 8004b90:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b92:	2300      	movs	r3, #0
 8004b94:	613b      	str	r3, [r7, #16]
 8004b96:	4b4c      	ldr	r3, [pc, #304]	@ (8004cc8 <MX_GPIO_Init+0x14c>)
 8004b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b9a:	4a4b      	ldr	r2, [pc, #300]	@ (8004cc8 <MX_GPIO_Init+0x14c>)
 8004b9c:	f043 0304 	orr.w	r3, r3, #4
 8004ba0:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ba2:	4b49      	ldr	r3, [pc, #292]	@ (8004cc8 <MX_GPIO_Init+0x14c>)
 8004ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ba6:	f003 0304 	and.w	r3, r3, #4
 8004baa:	613b      	str	r3, [r7, #16]
 8004bac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004bae:	2300      	movs	r3, #0
 8004bb0:	60fb      	str	r3, [r7, #12]
 8004bb2:	4b45      	ldr	r3, [pc, #276]	@ (8004cc8 <MX_GPIO_Init+0x14c>)
 8004bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bb6:	4a44      	ldr	r2, [pc, #272]	@ (8004cc8 <MX_GPIO_Init+0x14c>)
 8004bb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8004bbe:	4b42      	ldr	r3, [pc, #264]	@ (8004cc8 <MX_GPIO_Init+0x14c>)
 8004bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bc6:	60fb      	str	r3, [r7, #12]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bca:	2300      	movs	r3, #0
 8004bcc:	60bb      	str	r3, [r7, #8]
 8004bce:	4b3e      	ldr	r3, [pc, #248]	@ (8004cc8 <MX_GPIO_Init+0x14c>)
 8004bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bd2:	4a3d      	ldr	r2, [pc, #244]	@ (8004cc8 <MX_GPIO_Init+0x14c>)
 8004bd4:	f043 0301 	orr.w	r3, r3, #1
 8004bd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8004bda:	4b3b      	ldr	r3, [pc, #236]	@ (8004cc8 <MX_GPIO_Init+0x14c>)
 8004bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bde:	f003 0301 	and.w	r3, r3, #1
 8004be2:	60bb      	str	r3, [r7, #8]
 8004be4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004be6:	2300      	movs	r3, #0
 8004be8:	607b      	str	r3, [r7, #4]
 8004bea:	4b37      	ldr	r3, [pc, #220]	@ (8004cc8 <MX_GPIO_Init+0x14c>)
 8004bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bee:	4a36      	ldr	r2, [pc, #216]	@ (8004cc8 <MX_GPIO_Init+0x14c>)
 8004bf0:	f043 0302 	orr.w	r3, r3, #2
 8004bf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8004bf6:	4b34      	ldr	r3, [pc, #208]	@ (8004cc8 <MX_GPIO_Init+0x14c>)
 8004bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bfa:	f003 0302 	and.w	r3, r3, #2
 8004bfe:	607b      	str	r3, [r7, #4]
 8004c00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|CS_Pin|BUZZER_Pin|GATE_D_Pin
 8004c02:	2200      	movs	r2, #0
 8004c04:	f644 4112 	movw	r1, #19474	@ 0x4c12
 8004c08:	4830      	ldr	r0, [pc, #192]	@ (8004ccc <MX_GPIO_Init+0x150>)
 8004c0a:	f002 f883 	bl	8006d14 <HAL_GPIO_WritePin>
                          |GATE_C_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M0_Pin|M1_Pin|FN_Pin|LED2_Pin
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f246 011f 	movw	r1, #24607	@ 0x601f
 8004c14:	482e      	ldr	r0, [pc, #184]	@ (8004cd0 <MX_GPIO_Init+0x154>)
 8004c16:	f002 f87d 	bl	8006d14 <HAL_GPIO_WritePin>
                          |LED1_Pin|GATE_B_Pin|GATE_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004c1a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004c1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004c20:	2300      	movs	r3, #0
 8004c22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004c24:	2302      	movs	r3, #2
 8004c26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c28:	f107 0314 	add.w	r3, r7, #20
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	4827      	ldr	r0, [pc, #156]	@ (8004ccc <MX_GPIO_Init+0x150>)
 8004c30:	f001 fec4 	bl	80069bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 CS_Pin BUZZER_Pin GATE_D_Pin
                           GATE_C_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|CS_Pin|BUZZER_Pin|GATE_D_Pin
 8004c34:	f644 4312 	movw	r3, #19474	@ 0x4c12
 8004c38:	617b      	str	r3, [r7, #20]
                          |GATE_C_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c42:	2300      	movs	r3, #0
 8004c44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c46:	f107 0314 	add.w	r3, r7, #20
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	481f      	ldr	r0, [pc, #124]	@ (8004ccc <MX_GPIO_Init+0x150>)
 8004c4e:	f001 feb5 	bl	80069bc <HAL_GPIO_Init>

  /*Configure GPIO pins : M0_Pin M1_Pin FN_Pin LED2_Pin
                           LED1_Pin GATE_B_Pin GATE_A_Pin */
  GPIO_InitStruct.Pin = M0_Pin|M1_Pin|FN_Pin|LED2_Pin
 8004c52:	f246 031f 	movw	r3, #24607	@ 0x601f
 8004c56:	617b      	str	r3, [r7, #20]
                          |LED1_Pin|GATE_B_Pin|GATE_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c60:	2300      	movs	r3, #0
 8004c62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c64:	f107 0314 	add.w	r3, r7, #20
 8004c68:	4619      	mov	r1, r3
 8004c6a:	4819      	ldr	r0, [pc, #100]	@ (8004cd0 <MX_GPIO_Init+0x154>)
 8004c6c:	f001 fea6 	bl	80069bc <HAL_GPIO_Init>

  /*Configure GPIO pin : SECINP_Pin */
  GPIO_InitStruct.Pin = SECINP_Pin;
 8004c70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004c74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004c76:	2300      	movs	r3, #0
 8004c78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SECINP_GPIO_Port, &GPIO_InitStruct);
 8004c7e:	f107 0314 	add.w	r3, r7, #20
 8004c82:	4619      	mov	r1, r3
 8004c84:	4812      	ldr	r0, [pc, #72]	@ (8004cd0 <MX_GPIO_Init+0x154>)
 8004c86:	f001 fe99 	bl	80069bc <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8004c8a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004c8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004c90:	2300      	movs	r3, #0
 8004c92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004c94:	2301      	movs	r3, #1
 8004c96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8004c98:	f107 0314 	add.w	r3, r7, #20
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	480b      	ldr	r0, [pc, #44]	@ (8004ccc <MX_GPIO_Init+0x150>)
 8004ca0:	f001 fe8c 	bl	80069bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|INT2_Pin;
 8004ca4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004ca8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004caa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004cae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cb4:	f107 0314 	add.w	r3, r7, #20
 8004cb8:	4619      	mov	r1, r3
 8004cba:	4805      	ldr	r0, [pc, #20]	@ (8004cd0 <MX_GPIO_Init+0x154>)
 8004cbc:	f001 fe7e 	bl	80069bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004cc0:	bf00      	nop
 8004cc2:	3728      	adds	r7, #40	@ 0x28
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	40023800 	.word	0x40023800
 8004ccc:	40020800 	.word	0x40020800
 8004cd0:	40020400 	.word	0x40020400

08004cd4 <E220_CONFIG>:
		}


}
void E220_CONFIG(uint8_t ADDH, uint8_t ADDL, uint8_t CHN, uint8_t MODE)
{
 8004cd4:	b590      	push	{r4, r7, lr}
 8004cd6:	b087      	sub	sp, #28
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	4604      	mov	r4, r0
 8004cdc:	4608      	mov	r0, r1
 8004cde:	4611      	mov	r1, r2
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	4623      	mov	r3, r4
 8004ce4:	71fb      	strb	r3, [r7, #7]
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	71bb      	strb	r3, [r7, #6]
 8004cea:	460b      	mov	r3, r1
 8004cec:	717b      	strb	r3, [r7, #5]
 8004cee:	4613      	mov	r3, r2
 8004cf0:	713b      	strb	r3, [r7, #4]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, SET);
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	2104      	movs	r1, #4
 8004cf6:	4824      	ldr	r0, [pc, #144]	@ (8004d88 <E220_CONFIG+0xb4>)
 8004cf8:	f002 f80c 	bl	8006d14 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET);
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	2102      	movs	r1, #2
 8004d00:	4821      	ldr	r0, [pc, #132]	@ (8004d88 <E220_CONFIG+0xb4>)
 8004d02:	f002 f807 	bl	8006d14 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8004d06:	2032      	movs	r0, #50	@ 0x32
 8004d08:	f001 f804 	bl	8005d14 <HAL_Delay>

    char cfg_buff[8] = {0}; // E220 için 8 elemanlı bir dizi kullanıyoruz
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	60fb      	str	r3, [r7, #12]
 8004d10:	2300      	movs	r3, #0
 8004d12:	613b      	str	r3, [r7, #16]
    enum {Transparent, Fixed} mode;
    mode = MODE;
 8004d14:	793b      	ldrb	r3, [r7, #4]
 8004d16:	75fb      	strb	r3, [r7, #23]

    cfg_buff[0] = ADDH;
 8004d18:	79fb      	ldrb	r3, [r7, #7]
 8004d1a:	733b      	strb	r3, [r7, #12]
    cfg_buff[1] = ADDL;
 8004d1c:	79bb      	ldrb	r3, [r7, #6]
 8004d1e:	737b      	strb	r3, [r7, #13]
    cfg_buff[2] = 0x62;
 8004d20:	2362      	movs	r3, #98	@ 0x62
 8004d22:	73bb      	strb	r3, [r7, #14]
    cfg_buff[3] = 0x00;
 8004d24:	2300      	movs	r3, #0
 8004d26:	73fb      	strb	r3, [r7, #15]
    cfg_buff[4] = CHN;
 8004d28:	797b      	ldrb	r3, [r7, #5]
 8004d2a:	743b      	strb	r3, [r7, #16]

    switch(mode){
 8004d2c:	7dfb      	ldrb	r3, [r7, #23]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d002      	beq.n	8004d38 <E220_CONFIG+0x64>
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d003      	beq.n	8004d3e <E220_CONFIG+0x6a>
 8004d36:	e005      	b.n	8004d44 <E220_CONFIG+0x70>
        case Transparent:
            cfg_buff[5] = 0x00;  // opsiyon
 8004d38:	2300      	movs	r3, #0
 8004d3a:	747b      	strb	r3, [r7, #17]
            break;
 8004d3c:	e004      	b.n	8004d48 <E220_CONFIG+0x74>
        case Fixed:
            cfg_buff[5] = 0x11;
 8004d3e:	2311      	movs	r3, #17
 8004d40:	747b      	strb	r3, [r7, #17]
            break;
 8004d42:	e001      	b.n	8004d48 <E220_CONFIG+0x74>
        default:
            cfg_buff[5] = 0x11;
 8004d44:	2311      	movs	r3, #17
 8004d46:	747b      	strb	r3, [r7, #17]
     }

     cfg_buff[6] = 0x00;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	74bb      	strb	r3, [r7, #18]
     cfg_buff[7] = 0x00;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	74fb      	strb	r3, [r7, #19]


    HAL_UART_Transmit(&huart3, (uint8_t*) cfg_buff, 8, 1000);
 8004d50:	f107 010c 	add.w	r1, r7, #12
 8004d54:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004d58:	2208      	movs	r2, #8
 8004d5a:	480c      	ldr	r0, [pc, #48]	@ (8004d8c <E220_CONFIG+0xb8>)
 8004d5c:	f005 f8bf 	bl	8009ede <HAL_UART_Transmit>

    HAL_Delay(25);
 8004d60:	2019      	movs	r0, #25
 8004d62:	f000 ffd7 	bl	8005d14 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET);
 8004d66:	2200      	movs	r2, #0
 8004d68:	2104      	movs	r1, #4
 8004d6a:	4807      	ldr	r0, [pc, #28]	@ (8004d88 <E220_CONFIG+0xb4>)
 8004d6c:	f001 ffd2 	bl	8006d14 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 8004d70:	2200      	movs	r2, #0
 8004d72:	2102      	movs	r1, #2
 8004d74:	4804      	ldr	r0, [pc, #16]	@ (8004d88 <E220_CONFIG+0xb4>)
 8004d76:	f001 ffcd 	bl	8006d14 <HAL_GPIO_WritePin>
    HAL_Delay(25);
 8004d7a:	2019      	movs	r0, #25
 8004d7c:	f000 ffca 	bl	8005d14 <HAL_Delay>
}
 8004d80:	bf00      	nop
 8004d82:	371c      	adds	r7, #28
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd90      	pop	{r4, r7, pc}
 8004d88:	40020400 	.word	0x40020400
 8004d8c:	200004fc 	.word	0x200004fc

08004d90 <BME280_Get_Altitude>:

float BME280_Get_Altitude(void)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
	float press = comp_data.pressure / 10000.0;
 8004d96:	4b36      	ldr	r3, [pc, #216]	@ (8004e70 <BME280_Get_Altitude+0xe0>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f7fb fbca 	bl	8000534 <__aeabi_ui2d>
 8004da0:	a32b      	add	r3, pc, #172	@ (adr r3, 8004e50 <BME280_Get_Altitude+0xc0>)
 8004da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da6:	f7fb fd69 	bl	800087c <__aeabi_ddiv>
 8004daa:	4602      	mov	r2, r0
 8004dac:	460b      	mov	r3, r1
 8004dae:	4610      	mov	r0, r2
 8004db0:	4619      	mov	r1, r3
 8004db2:	f7fb ff31 	bl	8000c18 <__aeabi_d2f>
 8004db6:	4603      	mov	r3, r0
 8004db8:	607b      	str	r3, [r7, #4]
	float temp = comp_data.temperature / 100.0;
 8004dba:	4b2d      	ldr	r3, [pc, #180]	@ (8004e70 <BME280_Get_Altitude+0xe0>)
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f7fb fbc8 	bl	8000554 <__aeabi_i2d>
 8004dc4:	f04f 0200 	mov.w	r2, #0
 8004dc8:	4b2a      	ldr	r3, [pc, #168]	@ (8004e74 <BME280_Get_Altitude+0xe4>)
 8004dca:	f7fb fd57 	bl	800087c <__aeabi_ddiv>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	4610      	mov	r0, r2
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	f7fb ff1f 	bl	8000c18 <__aeabi_d2f>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	603b      	str	r3, [r7, #0]
	alt = 44330 * (1 - pow((press / 1013.25),(1/5.255)));
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f7fb fbca 	bl	8000578 <__aeabi_f2d>
 8004de4:	a31c      	add	r3, pc, #112	@ (adr r3, 8004e58 <BME280_Get_Altitude+0xc8>)
 8004de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dea:	f7fb fd47 	bl	800087c <__aeabi_ddiv>
 8004dee:	4602      	mov	r2, r0
 8004df0:	460b      	mov	r3, r1
 8004df2:	ec43 2b17 	vmov	d7, r2, r3
 8004df6:	ed9f 1b1a 	vldr	d1, [pc, #104]	@ 8004e60 <BME280_Get_Altitude+0xd0>
 8004dfa:	eeb0 0a47 	vmov.f32	s0, s14
 8004dfe:	eef0 0a67 	vmov.f32	s1, s15
 8004e02:	f008 ffa1 	bl	800dd48 <pow>
 8004e06:	ec53 2b10 	vmov	r2, r3, d0
 8004e0a:	f04f 0000 	mov.w	r0, #0
 8004e0e:	491a      	ldr	r1, [pc, #104]	@ (8004e78 <BME280_Get_Altitude+0xe8>)
 8004e10:	f7fb fa52 	bl	80002b8 <__aeabi_dsub>
 8004e14:	4602      	mov	r2, r0
 8004e16:	460b      	mov	r3, r1
 8004e18:	4610      	mov	r0, r2
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	a312      	add	r3, pc, #72	@ (adr r3, 8004e68 <BME280_Get_Altitude+0xd8>)
 8004e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e22:	f7fb fc01 	bl	8000628 <__aeabi_dmul>
 8004e26:	4602      	mov	r2, r0
 8004e28:	460b      	mov	r3, r1
 8004e2a:	4610      	mov	r0, r2
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	f7fb fef3 	bl	8000c18 <__aeabi_d2f>
 8004e32:	4603      	mov	r3, r0
 8004e34:	4a11      	ldr	r2, [pc, #68]	@ (8004e7c <BME280_Get_Altitude+0xec>)
 8004e36:	6013      	str	r3, [r2, #0]
	//alt = ((pow((P0/press), (1/5.257))-1) * (temp + 273.15)) / 0.0065;

	return (alt);
 8004e38:	4b10      	ldr	r3, [pc, #64]	@ (8004e7c <BME280_Get_Altitude+0xec>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	ee07 3a90 	vmov	s15, r3
}
 8004e40:	eeb0 0a67 	vmov.f32	s0, s15
 8004e44:	3708      	adds	r7, #8
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	f3af 8000 	nop.w
 8004e50:	00000000 	.word	0x00000000
 8004e54:	40c38800 	.word	0x40c38800
 8004e58:	00000000 	.word	0x00000000
 8004e5c:	408faa00 	.word	0x408faa00
 8004e60:	ccd9456c 	.word	0xccd9456c
 8004e64:	3fc85b95 	.word	0x3fc85b95
 8004e68:	00000000 	.word	0x00000000
 8004e6c:	40e5a540 	.word	0x40e5a540
 8004e70:	20002504 	.word	0x20002504
 8004e74:	40590000 	.word	0x40590000
 8004e78:	3ff00000 	.word	0x3ff00000
 8004e7c:	200022ac 	.word	0x200022ac

08004e80 <user_i2c_read>:
int8_t user_i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af02      	add	r7, sp, #8
 8004e86:	603a      	str	r2, [r7, #0]
 8004e88:	461a      	mov	r2, r3
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	71fb      	strb	r3, [r7, #7]
 8004e8e:	460b      	mov	r3, r1
 8004e90:	71bb      	strb	r3, [r7, #6]
 8004e92:	4613      	mov	r3, r2
 8004e94:	80bb      	strh	r3, [r7, #4]
  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 8004e96:	79fb      	ldrb	r3, [r7, #7]
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	005b      	lsls	r3, r3, #1
 8004e9c:	b299      	uxth	r1, r3
 8004e9e:	1dba      	adds	r2, r7, #6
 8004ea0:	230a      	movs	r3, #10
 8004ea2:	9300      	str	r3, [sp, #0]
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	4811      	ldr	r0, [pc, #68]	@ (8004eec <user_i2c_read+0x6c>)
 8004ea8:	f002 f8ac 	bl	8007004 <HAL_I2C_Master_Transmit>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d002      	beq.n	8004eb8 <user_i2c_read+0x38>
 8004eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8004eb6:	e014      	b.n	8004ee2 <user_i2c_read+0x62>
  if(HAL_I2C_Master_Receive(&hi2c1, (id << 1) | 0x01, data, len, 10) != HAL_OK) return -1;
 8004eb8:	79fb      	ldrb	r3, [r7, #7]
 8004eba:	005b      	lsls	r3, r3, #1
 8004ebc:	b21b      	sxth	r3, r3
 8004ebe:	f043 0301 	orr.w	r3, r3, #1
 8004ec2:	b21b      	sxth	r3, r3
 8004ec4:	b299      	uxth	r1, r3
 8004ec6:	88bb      	ldrh	r3, [r7, #4]
 8004ec8:	220a      	movs	r2, #10
 8004eca:	9200      	str	r2, [sp, #0]
 8004ecc:	683a      	ldr	r2, [r7, #0]
 8004ece:	4807      	ldr	r0, [pc, #28]	@ (8004eec <user_i2c_read+0x6c>)
 8004ed0:	f002 f996 	bl	8007200 <HAL_I2C_Master_Receive>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d002      	beq.n	8004ee0 <user_i2c_read+0x60>
 8004eda:	f04f 33ff 	mov.w	r3, #4294967295
 8004ede:	e000      	b.n	8004ee2 <user_i2c_read+0x62>

  return 0;
 8004ee0:	2300      	movs	r3, #0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3708      	adds	r7, #8
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	200002a8 	.word	0x200002a8

08004ef0 <user_delay_ms>:

void user_delay_ms(uint32_t period)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  HAL_Delay(period);
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f000 ff0b 	bl	8005d14 <HAL_Delay>
}
 8004efe:	bf00      	nop
 8004f00:	3708      	adds	r7, #8
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
	...

08004f08 <user_i2c_write>:
int8_t user_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b086      	sub	sp, #24
 8004f0c:	af02      	add	r7, sp, #8
 8004f0e:	603a      	str	r2, [r7, #0]
 8004f10:	461a      	mov	r2, r3
 8004f12:	4603      	mov	r3, r0
 8004f14:	71fb      	strb	r3, [r7, #7]
 8004f16:	460b      	mov	r3, r1
 8004f18:	71bb      	strb	r3, [r7, #6]
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	80bb      	strh	r3, [r7, #4]
  int8_t *buf;
  buf = malloc(len +1);
 8004f1e:	88bb      	ldrh	r3, [r7, #4]
 8004f20:	3301      	adds	r3, #1
 8004f22:	4618      	mov	r0, r3
 8004f24:	f006 f910 	bl	800b148 <malloc>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	60fb      	str	r3, [r7, #12]
  buf[0] = reg_addr;
 8004f2c:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	701a      	strb	r2, [r3, #0]
  memcpy(buf +1, data, len);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	3301      	adds	r3, #1
 8004f38:	88ba      	ldrh	r2, [r7, #4]
 8004f3a:	6839      	ldr	r1, [r7, #0]
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f007 f972 	bl	800c226 <memcpy>

  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 8004f42:	79fb      	ldrb	r3, [r7, #7]
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	005b      	lsls	r3, r3, #1
 8004f48:	b299      	uxth	r1, r3
 8004f4a:	88bb      	ldrh	r3, [r7, #4]
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	f04f 32ff 	mov.w	r2, #4294967295
 8004f54:	9200      	str	r2, [sp, #0]
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	4808      	ldr	r0, [pc, #32]	@ (8004f7c <user_i2c_write+0x74>)
 8004f5a:	f002 f853 	bl	8007004 <HAL_I2C_Master_Transmit>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d002      	beq.n	8004f6a <user_i2c_write+0x62>
 8004f64:	f04f 33ff 	mov.w	r3, #4294967295
 8004f68:	e003      	b.n	8004f72 <user_i2c_write+0x6a>

  free(buf);
 8004f6a:	68f8      	ldr	r0, [r7, #12]
 8004f6c:	f006 f8f4 	bl	800b158 <free>
  return 0;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3710      	adds	r7, #16
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	200002a8 	.word	0x200002a8

08004f80 <union_converter>:

void union_converter(void)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b08e      	sub	sp, #56	@ 0x38
 8004f84:	af00      	add	r7, sp, #0
	 float2unit8 f2u8_gpsalt;
    f2u8_gpsalt.fVal=gps.altitude;
 8004f86:	4ba0      	ldr	r3, [pc, #640]	@ (8005208 <union_converter+0x288>)
 8004f88:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004f8c:	4610      	mov	r0, r2
 8004f8e:	4619      	mov	r1, r3
 8004f90:	f7fb fe42 	bl	8000c18 <__aeabi_d2f>
 8004f94:	4603      	mov	r3, r0
 8004f96:	62bb      	str	r3, [r7, #40]	@ 0x28
		 for(uint8_t i=0;i<4;i++)
 8004f98:	2300      	movs	r3, #0
 8004f9a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8004f9e:	e00f      	b.n	8004fc0 <union_converter+0x40>
		 {
			loratx[i+5]=f2u8_gpsalt.array[i];
 8004fa0:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8004fa4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004fa8:	3305      	adds	r3, #5
 8004faa:	3238      	adds	r2, #56	@ 0x38
 8004fac:	443a      	add	r2, r7
 8004fae:	f812 1c10 	ldrb.w	r1, [r2, #-16]
 8004fb2:	4a96      	ldr	r2, [pc, #600]	@ (800520c <union_converter+0x28c>)
 8004fb4:	54d1      	strb	r1, [r2, r3]
		 for(uint8_t i=0;i<4;i++)
 8004fb6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004fba:	3301      	adds	r3, #1
 8004fbc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8004fc0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004fc4:	2b03      	cmp	r3, #3
 8004fc6:	d9eb      	bls.n	8004fa0 <union_converter+0x20>
		 }

	 float2unit8 f2u8_latitude;
	 f2u8_latitude.fVal=gps.latitude;
 8004fc8:	4b8f      	ldr	r3, [pc, #572]	@ (8005208 <union_converter+0x288>)
 8004fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fce:	4610      	mov	r0, r2
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	f7fb fe21 	bl	8000c18 <__aeabi_d2f>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	627b      	str	r3, [r7, #36]	@ 0x24
		 for(uint8_t i=0;i<4;i++)
 8004fda:	2300      	movs	r3, #0
 8004fdc:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8004fe0:	e00f      	b.n	8005002 <union_converter+0x82>
		 {
			loratx[i+9]=f2u8_latitude.array[i];
 8004fe2:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8004fe6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8004fea:	3309      	adds	r3, #9
 8004fec:	3238      	adds	r2, #56	@ 0x38
 8004fee:	443a      	add	r2, r7
 8004ff0:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 8004ff4:	4a85      	ldr	r2, [pc, #532]	@ (800520c <union_converter+0x28c>)
 8004ff6:	54d1      	strb	r1, [r2, r3]
		 for(uint8_t i=0;i<4;i++)
 8004ff8:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8005002:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8005006:	2b03      	cmp	r3, #3
 8005008:	d9eb      	bls.n	8004fe2 <union_converter+0x62>
		 }

	 float2unit8 f2u8_longitude;
	 f2u8_longitude.fVal=gps.longitude;
 800500a:	4b7f      	ldr	r3, [pc, #508]	@ (8005208 <union_converter+0x288>)
 800500c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005010:	4610      	mov	r0, r2
 8005012:	4619      	mov	r1, r3
 8005014:	f7fb fe00 	bl	8000c18 <__aeabi_d2f>
 8005018:	4603      	mov	r3, r0
 800501a:	623b      	str	r3, [r7, #32]
		 for(uint8_t i=0;i<4;i++)
 800501c:	2300      	movs	r3, #0
 800501e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8005022:	e00f      	b.n	8005044 <union_converter+0xc4>
		 {
			loratx[i+13]=f2u8_longitude.array[i];
 8005024:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 8005028:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800502c:	330d      	adds	r3, #13
 800502e:	3238      	adds	r2, #56	@ 0x38
 8005030:	443a      	add	r2, r7
 8005032:	f812 1c18 	ldrb.w	r1, [r2, #-24]
 8005036:	4a75      	ldr	r2, [pc, #468]	@ (800520c <union_converter+0x28c>)
 8005038:	54d1      	strb	r1, [r2, r3]
		 for(uint8_t i=0;i<4;i++)
 800503a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800503e:	3301      	adds	r3, #1
 8005040:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8005044:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8005048:	2b03      	cmp	r3, #3
 800504a:	d9eb      	bls.n	8005024 <union_converter+0xa4>
		 }

	 float2unit8 f2u8_altitude;
	 f2u8_altitude.fVal=altitude;
 800504c:	4b70      	ldr	r3, [pc, #448]	@ (8005210 <union_converter+0x290>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	61fb      	str	r3, [r7, #28]
		 for(uint8_t i=0;i<4;i++)
 8005052:	2300      	movs	r3, #0
 8005054:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 8005058:	e00f      	b.n	800507a <union_converter+0xfa>
		 {
			loratx[i+17]=f2u8_altitude.array[i];
 800505a:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 800505e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8005062:	3311      	adds	r3, #17
 8005064:	3238      	adds	r2, #56	@ 0x38
 8005066:	443a      	add	r2, r7
 8005068:	f812 1c1c 	ldrb.w	r1, [r2, #-28]
 800506c:	4a67      	ldr	r2, [pc, #412]	@ (800520c <union_converter+0x28c>)
 800506e:	54d1      	strb	r1, [r2, r3]
		 for(uint8_t i=0;i<4;i++)
 8005070:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8005074:	3301      	adds	r3, #1
 8005076:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 800507a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800507e:	2b03      	cmp	r3, #3
 8005080:	d9eb      	bls.n	800505a <union_converter+0xda>
		 }
	 float2unit8 f2u8_speed;
	 f2u8_speed.fVal=speed;
 8005082:	4b64      	ldr	r3, [pc, #400]	@ (8005214 <union_converter+0x294>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	61bb      	str	r3, [r7, #24]
		 for(uint8_t i=0;i<4;i++)
 8005088:	2300      	movs	r3, #0
 800508a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800508e:	e00f      	b.n	80050b0 <union_converter+0x130>
		 {
			loratx[i+21]=f2u8_speed.array[i];
 8005090:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8005094:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005098:	3315      	adds	r3, #21
 800509a:	3238      	adds	r2, #56	@ 0x38
 800509c:	443a      	add	r2, r7
 800509e:	f812 1c20 	ldrb.w	r1, [r2, #-32]
 80050a2:	4a5a      	ldr	r2, [pc, #360]	@ (800520c <union_converter+0x28c>)
 80050a4:	54d1      	strb	r1, [r2, r3]
		 for(uint8_t i=0;i<4;i++)
 80050a6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80050aa:	3301      	adds	r3, #1
 80050ac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80050b0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80050b4:	2b03      	cmp	r3, #3
 80050b6:	d9eb      	bls.n	8005090 <union_converter+0x110>
		 }

	 float2unit8 f2u8_temp;
	 f2u8_temp.fVal=temperature;
 80050b8:	4b57      	ldr	r3, [pc, #348]	@ (8005218 <union_converter+0x298>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	617b      	str	r3, [r7, #20]
		 for(uint8_t i=0;i<4;i++)
 80050be:	2300      	movs	r3, #0
 80050c0:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 80050c4:	e00f      	b.n	80050e6 <union_converter+0x166>
		 {
			loratx[i+25]=f2u8_temp.array[i];
 80050c6:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 80050ca:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80050ce:	3319      	adds	r3, #25
 80050d0:	3238      	adds	r2, #56	@ 0x38
 80050d2:	443a      	add	r2, r7
 80050d4:	f812 1c24 	ldrb.w	r1, [r2, #-36]
 80050d8:	4a4c      	ldr	r2, [pc, #304]	@ (800520c <union_converter+0x28c>)
 80050da:	54d1      	strb	r1, [r2, r3]
		 for(uint8_t i=0;i<4;i++)
 80050dc:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80050e0:	3301      	adds	r3, #1
 80050e2:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 80050e6:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80050ea:	2b03      	cmp	r3, #3
 80050ec:	d9eb      	bls.n	80050c6 <union_converter+0x146>
		 }

	 float2unit8 f2u8_accx;
	 f2u8_accx.fVal=Lsm_Sensor.Accel_X;
 80050ee:	4b4b      	ldr	r3, [pc, #300]	@ (800521c <union_converter+0x29c>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	613b      	str	r3, [r7, #16]
		 for(uint8_t i=0;i<4;i++)
 80050f4:	2300      	movs	r3, #0
 80050f6:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 80050fa:	e00f      	b.n	800511c <union_converter+0x19c>
		 {
			loratx[i+29]=f2u8_accx.array[i];
 80050fc:	f897 2031 	ldrb.w	r2, [r7, #49]	@ 0x31
 8005100:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8005104:	331d      	adds	r3, #29
 8005106:	3238      	adds	r2, #56	@ 0x38
 8005108:	443a      	add	r2, r7
 800510a:	f812 1c28 	ldrb.w	r1, [r2, #-40]
 800510e:	4a3f      	ldr	r2, [pc, #252]	@ (800520c <union_converter+0x28c>)
 8005110:	54d1      	strb	r1, [r2, r3]
		 for(uint8_t i=0;i<4;i++)
 8005112:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8005116:	3301      	adds	r3, #1
 8005118:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 800511c:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8005120:	2b03      	cmp	r3, #3
 8005122:	d9eb      	bls.n	80050fc <union_converter+0x17c>
		 }

	 float2unit8 f2u8_accy;
	 f2u8_accy.fVal=Lsm_Sensor.Accel_Y;
 8005124:	4b3d      	ldr	r3, [pc, #244]	@ (800521c <union_converter+0x29c>)
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	60fb      	str	r3, [r7, #12]
	 	 for(uint8_t i=0;i<4;i++)
 800512a:	2300      	movs	r3, #0
 800512c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 8005130:	e00f      	b.n	8005152 <union_converter+0x1d2>
		 {
			loratx[i+33]=f2u8_accy.array[i];
 8005132:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8005136:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800513a:	3321      	adds	r3, #33	@ 0x21
 800513c:	3238      	adds	r2, #56	@ 0x38
 800513e:	443a      	add	r2, r7
 8005140:	f812 1c2c 	ldrb.w	r1, [r2, #-44]
 8005144:	4a31      	ldr	r2, [pc, #196]	@ (800520c <union_converter+0x28c>)
 8005146:	54d1      	strb	r1, [r2, r3]
	 	 for(uint8_t i=0;i<4;i++)
 8005148:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800514c:	3301      	adds	r3, #1
 800514e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 8005152:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8005156:	2b03      	cmp	r3, #3
 8005158:	d9eb      	bls.n	8005132 <union_converter+0x1b2>
		 }

	 float2unit8 f2u8_accz;
	 f2u8_accz.fVal=Lsm_Sensor.Accel_Z;
 800515a:	4b30      	ldr	r3, [pc, #192]	@ (800521c <union_converter+0x29c>)
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	60bb      	str	r3, [r7, #8]
	 	 for(uint8_t i=0;i<4;i++)
 8005160:	2300      	movs	r3, #0
 8005162:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8005166:	e00f      	b.n	8005188 <union_converter+0x208>
		 {
		    loratx[i+37]=f2u8_accz.array[i];
 8005168:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800516c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005170:	3325      	adds	r3, #37	@ 0x25
 8005172:	3238      	adds	r2, #56	@ 0x38
 8005174:	443a      	add	r2, r7
 8005176:	f812 1c30 	ldrb.w	r1, [r2, #-48]
 800517a:	4a24      	ldr	r2, [pc, #144]	@ (800520c <union_converter+0x28c>)
 800517c:	54d1      	strb	r1, [r2, r3]
	 	 for(uint8_t i=0;i<4;i++)
 800517e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005182:	3301      	adds	r3, #1
 8005184:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8005188:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800518c:	2b03      	cmp	r3, #3
 800518e:	d9eb      	bls.n	8005168 <union_converter+0x1e8>
		 }

	 float2unit8 f2u8_roll;
	 f2u8_roll.fVal=Lsm_Sensor.Roll;
 8005190:	4b22      	ldr	r3, [pc, #136]	@ (800521c <union_converter+0x29c>)
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	607b      	str	r3, [r7, #4]
		 for(uint8_t i=0;i<4;i++)
 8005196:	2300      	movs	r3, #0
 8005198:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800519c:	e00f      	b.n	80051be <union_converter+0x23e>
		 {
			loratx[i+41]=f2u8_roll.array[i];
 800519e:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 80051a2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80051a6:	3329      	adds	r3, #41	@ 0x29
 80051a8:	3238      	adds	r2, #56	@ 0x38
 80051aa:	443a      	add	r2, r7
 80051ac:	f812 1c34 	ldrb.w	r1, [r2, #-52]
 80051b0:	4a16      	ldr	r2, [pc, #88]	@ (800520c <union_converter+0x28c>)
 80051b2:	54d1      	strb	r1, [r2, r3]
		 for(uint8_t i=0;i<4;i++)
 80051b4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80051b8:	3301      	adds	r3, #1
 80051ba:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80051be:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80051c2:	2b03      	cmp	r3, #3
 80051c4:	d9eb      	bls.n	800519e <union_converter+0x21e>
		 }
	 float2unit8 f2u8_pitch;
	 f2u8_pitch.fVal=Lsm_Sensor.Pitch;
 80051c6:	4b15      	ldr	r3, [pc, #84]	@ (800521c <union_converter+0x29c>)
 80051c8:	69db      	ldr	r3, [r3, #28]
 80051ca:	603b      	str	r3, [r7, #0]
		 for(uint8_t i=0;i<4;i++)
 80051cc:	2300      	movs	r3, #0
 80051ce:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80051d2:	e00f      	b.n	80051f4 <union_converter+0x274>
		 {
			loratx[i+45]=f2u8_pitch.array[i];
 80051d4:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 80051d8:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80051dc:	332d      	adds	r3, #45	@ 0x2d
 80051de:	3238      	adds	r2, #56	@ 0x38
 80051e0:	443a      	add	r2, r7
 80051e2:	f812 1c38 	ldrb.w	r1, [r2, #-56]
 80051e6:	4a09      	ldr	r2, [pc, #36]	@ (800520c <union_converter+0x28c>)
 80051e8:	54d1      	strb	r1, [r2, r3]
		 for(uint8_t i=0;i<4;i++)
 80051ea:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80051ee:	3301      	adds	r3, #1
 80051f0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80051f4:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80051f8:	2b03      	cmp	r3, #3
 80051fa:	d9eb      	bls.n	80051d4 <union_converter+0x254>
		 }
}
 80051fc:	bf00      	nop
 80051fe:	bf00      	nop
 8005200:	3738      	adds	r7, #56	@ 0x38
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	200022d0 	.word	0x200022d0
 800520c:	2000224c 	.word	0x2000224c
 8005210:	200022a0 	.word	0x200022a0
 8005214:	200022b4 	.word	0x200022b4
 8005218:	20002298 	.word	0x20002298
 800521c:	20002380 	.word	0x20002380

08005220 <EGU_Buff_Load>:

void EGU_Buff_Load(void)
{
 8005220:	b480      	push	{r7}
 8005222:	af00      	add	r7, sp, #0
	loratx[52]=EGU_RX_BUFFER[29];//EGU HATA
 8005224:	4b2e      	ldr	r3, [pc, #184]	@ (80052e0 <EGU_Buff_Load+0xc0>)
 8005226:	7f5a      	ldrb	r2, [r3, #29]
 8005228:	4b2e      	ldr	r3, [pc, #184]	@ (80052e4 <EGU_Buff_Load+0xc4>)
 800522a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	loratx[53]=EGU_RX_BUFFER[30];//EGU AYRILMA TESPIT
 800522e:	4b2c      	ldr	r3, [pc, #176]	@ (80052e0 <EGU_Buff_Load+0xc0>)
 8005230:	7f9a      	ldrb	r2, [r3, #30]
 8005232:	4b2c      	ldr	r3, [pc, #176]	@ (80052e4 <EGU_Buff_Load+0xc4>)
 8005234:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	loratx[54]=EGU_RX_BUFFER[6];//EGU BATARYA-F
 8005238:	4b29      	ldr	r3, [pc, #164]	@ (80052e0 <EGU_Buff_Load+0xc0>)
 800523a:	799a      	ldrb	r2, [r3, #6]
 800523c:	4b29      	ldr	r3, [pc, #164]	@ (80052e4 <EGU_Buff_Load+0xc4>)
 800523e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	loratx[55]=EGU_RX_BUFFER[7];
 8005242:	4b27      	ldr	r3, [pc, #156]	@ (80052e0 <EGU_Buff_Load+0xc0>)
 8005244:	79da      	ldrb	r2, [r3, #7]
 8005246:	4b27      	ldr	r3, [pc, #156]	@ (80052e4 <EGU_Buff_Load+0xc4>)
 8005248:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
	loratx[56]=EGU_RX_BUFFER[8];
 800524c:	4b24      	ldr	r3, [pc, #144]	@ (80052e0 <EGU_Buff_Load+0xc0>)
 800524e:	7a1a      	ldrb	r2, [r3, #8]
 8005250:	4b24      	ldr	r3, [pc, #144]	@ (80052e4 <EGU_Buff_Load+0xc4>)
 8005252:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	loratx[57]=EGU_RX_BUFFER[9];
 8005256:	4b22      	ldr	r3, [pc, #136]	@ (80052e0 <EGU_Buff_Load+0xc0>)
 8005258:	7a5a      	ldrb	r2, [r3, #9]
 800525a:	4b22      	ldr	r3, [pc, #136]	@ (80052e4 <EGU_Buff_Load+0xc4>)
 800525c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
	loratx[58]=EGU_RX_BUFFER[22];//EGU ANGLE-F
 8005260:	4b1f      	ldr	r3, [pc, #124]	@ (80052e0 <EGU_Buff_Load+0xc0>)
 8005262:	7d9a      	ldrb	r2, [r3, #22]
 8005264:	4b1f      	ldr	r3, [pc, #124]	@ (80052e4 <EGU_Buff_Load+0xc4>)
 8005266:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
	loratx[59]=EGU_RX_BUFFER[23];
 800526a:	4b1d      	ldr	r3, [pc, #116]	@ (80052e0 <EGU_Buff_Load+0xc0>)
 800526c:	7dda      	ldrb	r2, [r3, #23]
 800526e:	4b1d      	ldr	r3, [pc, #116]	@ (80052e4 <EGU_Buff_Load+0xc4>)
 8005270:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
	loratx[60]=EGU_RX_BUFFER[24];
 8005274:	4b1a      	ldr	r3, [pc, #104]	@ (80052e0 <EGU_Buff_Load+0xc0>)
 8005276:	7e1a      	ldrb	r2, [r3, #24]
 8005278:	4b1a      	ldr	r3, [pc, #104]	@ (80052e4 <EGU_Buff_Load+0xc4>)
 800527a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	loratx[61]=EGU_RX_BUFFER[25];
 800527e:	4b18      	ldr	r3, [pc, #96]	@ (80052e0 <EGU_Buff_Load+0xc0>)
 8005280:	7e5a      	ldrb	r2, [r3, #25]
 8005282:	4b18      	ldr	r3, [pc, #96]	@ (80052e4 <EGU_Buff_Load+0xc4>)
 8005284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
	loratx[62]=EGU_RX_BUFFER[10];//EGU IRTIFA-F
 8005288:	4b15      	ldr	r3, [pc, #84]	@ (80052e0 <EGU_Buff_Load+0xc0>)
 800528a:	7a9a      	ldrb	r2, [r3, #10]
 800528c:	4b15      	ldr	r3, [pc, #84]	@ (80052e4 <EGU_Buff_Load+0xc4>)
 800528e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
	loratx[63]=EGU_RX_BUFFER[11];
 8005292:	4b13      	ldr	r3, [pc, #76]	@ (80052e0 <EGU_Buff_Load+0xc0>)
 8005294:	7ada      	ldrb	r2, [r3, #11]
 8005296:	4b13      	ldr	r3, [pc, #76]	@ (80052e4 <EGU_Buff_Load+0xc4>)
 8005298:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
	loratx[64]=EGU_RX_BUFFER[12];
 800529c:	4b10      	ldr	r3, [pc, #64]	@ (80052e0 <EGU_Buff_Load+0xc0>)
 800529e:	7b1a      	ldrb	r2, [r3, #12]
 80052a0:	4b10      	ldr	r3, [pc, #64]	@ (80052e4 <EGU_Buff_Load+0xc4>)
 80052a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	loratx[65]=EGU_RX_BUFFER[13];
 80052a6:	4b0e      	ldr	r3, [pc, #56]	@ (80052e0 <EGU_Buff_Load+0xc0>)
 80052a8:	7b5a      	ldrb	r2, [r3, #13]
 80052aa:	4b0e      	ldr	r3, [pc, #56]	@ (80052e4 <EGU_Buff_Load+0xc4>)
 80052ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
	loratx[66]=EGU_RX_BUFFER[26];//EGU UCUS BASLADIMI?
 80052b0:	4b0b      	ldr	r3, [pc, #44]	@ (80052e0 <EGU_Buff_Load+0xc0>)
 80052b2:	7e9a      	ldrb	r2, [r3, #26]
 80052b4:	4b0b      	ldr	r3, [pc, #44]	@ (80052e4 <EGU_Buff_Load+0xc4>)
 80052b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
	loratx[67]=EGU_RX_BUFFER[28];//STAGE AYRILDIMI?
 80052ba:	4b09      	ldr	r3, [pc, #36]	@ (80052e0 <EGU_Buff_Load+0xc0>)
 80052bc:	7f1a      	ldrb	r2, [r3, #28]
 80052be:	4b09      	ldr	r3, [pc, #36]	@ (80052e4 <EGU_Buff_Load+0xc4>)
 80052c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
	loratx[68]=EGU_RX_BUFFER[27];//MOTOR ATESLEME TALEBİ GELDİ Mİ?
 80052c4:	4b06      	ldr	r3, [pc, #24]	@ (80052e0 <EGU_Buff_Load+0xc0>)
 80052c6:	7eda      	ldrb	r2, [r3, #27]
 80052c8:	4b06      	ldr	r3, [pc, #24]	@ (80052e4 <EGU_Buff_Load+0xc4>)
 80052ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	loratx[69]='\n';
 80052ce:	4b05      	ldr	r3, [pc, #20]	@ (80052e4 <EGU_Buff_Load+0xc4>)
 80052d0:	220a      	movs	r2, #10
 80052d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

}
 80052d6:	bf00      	nop
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr
 80052e0:	20000584 	.word	0x20000584
 80052e4:	2000224c 	.word	0x2000224c

080052e8 <Buzzer>:



void Buzzer(int how_many , uint32_t how_long)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
	if((how_many %2) == 1) how_many++;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	f003 0301 	and.w	r3, r3, #1
 80052fa:	bfb8      	it	lt
 80052fc:	425b      	neglt	r3, r3
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d102      	bne.n	8005308 <Buzzer+0x20>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	3301      	adds	r3, #1
 8005306:	607b      	str	r3, [r7, #4]

	  for(uint8_t i=0;i<how_many; i++)
 8005308:	2300      	movs	r3, #0
 800530a:	73fb      	strb	r3, [r7, #15]
 800530c:	e013      	b.n	8005336 <Buzzer+0x4e>
	  {
	  	    HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_4);
 800530e:	2110      	movs	r1, #16
 8005310:	480d      	ldr	r0, [pc, #52]	@ (8005348 <Buzzer+0x60>)
 8005312:	f001 fd18 	bl	8006d46 <HAL_GPIO_TogglePin>
	  	    HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
 8005316:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800531a:	480c      	ldr	r0, [pc, #48]	@ (800534c <Buzzer+0x64>)
 800531c:	f001 fd13 	bl	8006d46 <HAL_GPIO_TogglePin>
	  	    HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_13);
 8005320:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005324:	4809      	ldr	r0, [pc, #36]	@ (800534c <Buzzer+0x64>)
 8005326:	f001 fd0e 	bl	8006d46 <HAL_GPIO_TogglePin>
	  		HAL_Delay(how_long);
 800532a:	6838      	ldr	r0, [r7, #0]
 800532c:	f000 fcf2 	bl	8005d14 <HAL_Delay>
	  for(uint8_t i=0;i<how_many; i++)
 8005330:	7bfb      	ldrb	r3, [r7, #15]
 8005332:	3301      	adds	r3, #1
 8005334:	73fb      	strb	r3, [r7, #15]
 8005336:	7bfb      	ldrb	r3, [r7, #15]
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	429a      	cmp	r2, r3
 800533c:	dce7      	bgt.n	800530e <Buzzer+0x26>


	  }
}
 800533e:	bf00      	nop
 8005340:	bf00      	nop
 8005342:	3710      	adds	r7, #16
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}
 8005348:	40020800 	.word	0x40020800
 800534c:	40020400 	.word	0x40020400

08005350 <Altitude_Offset>:

void Altitude_Offset()
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
	for(uint8_t i=0;i<5;i++)
 8005356:	2300      	movs	r3, #0
 8005358:	71fb      	strb	r3, [r7, #7]
 800535a:	e02b      	b.n	80053b4 <Altitude_Offset+0x64>
	{
		HAL_Delay(40);
 800535c:	2028      	movs	r0, #40	@ 0x28
 800535e:	f000 fcd9 	bl	8005d14 <HAL_Delay>
	  rslt = bme280_set_sensor_mode(BME280_FORCED_MODE, &dev);
 8005362:	4918      	ldr	r1, [pc, #96]	@ (80053c4 <Altitude_Offset+0x74>)
 8005364:	2001      	movs	r0, #1
 8005366:	f7fb ffee 	bl	8001346 <bme280_set_sensor_mode>
 800536a:	4603      	mov	r3, r0
 800536c:	461a      	mov	r2, r3
 800536e:	4b16      	ldr	r3, [pc, #88]	@ (80053c8 <Altitude_Offset+0x78>)
 8005370:	701a      	strb	r2, [r3, #0]
	  rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 8005372:	4a14      	ldr	r2, [pc, #80]	@ (80053c4 <Altitude_Offset+0x74>)
 8005374:	4915      	ldr	r1, [pc, #84]	@ (80053cc <Altitude_Offset+0x7c>)
 8005376:	2007      	movs	r0, #7
 8005378:	f7fc f861 	bl	800143e <bme280_get_sensor_data>
 800537c:	4603      	mov	r3, r0
 800537e:	461a      	mov	r2, r3
 8005380:	4b11      	ldr	r3, [pc, #68]	@ (80053c8 <Altitude_Offset+0x78>)
 8005382:	701a      	strb	r2, [r3, #0]
	  if(rslt == BME280_OK)
 8005384:	4b10      	ldr	r3, [pc, #64]	@ (80053c8 <Altitude_Offset+0x78>)
 8005386:	f993 3000 	ldrsb.w	r3, [r3]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d10f      	bne.n	80053ae <Altitude_Offset+0x5e>
	  { pressure = comp_data.pressure;
 800538e:	4b0f      	ldr	r3, [pc, #60]	@ (80053cc <Altitude_Offset+0x7c>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	ee07 3a90 	vmov	s15, r3
 8005396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800539a:	4b0d      	ldr	r3, [pc, #52]	@ (80053d0 <Altitude_Offset+0x80>)
 800539c:	edc3 7a00 	vstr	s15, [r3]
	    offset_altitude=BME280_Get_Altitude();
 80053a0:	f7ff fcf6 	bl	8004d90 <BME280_Get_Altitude>
 80053a4:	eef0 7a40 	vmov.f32	s15, s0
 80053a8:	4b0a      	ldr	r3, [pc, #40]	@ (80053d4 <Altitude_Offset+0x84>)
 80053aa:	edc3 7a00 	vstr	s15, [r3]
	for(uint8_t i=0;i<5;i++)
 80053ae:	79fb      	ldrb	r3, [r7, #7]
 80053b0:	3301      	adds	r3, #1
 80053b2:	71fb      	strb	r3, [r7, #7]
 80053b4:	79fb      	ldrb	r3, [r7, #7]
 80053b6:	2b04      	cmp	r3, #4
 80053b8:	d9d0      	bls.n	800535c <Altitude_Offset+0xc>
	  }
	}
}
 80053ba:	bf00      	nop
 80053bc:	bf00      	nop
 80053be:	3708      	adds	r7, #8
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	200024c4 	.word	0x200024c4
 80053c8:	20002510 	.word	0x20002510
 80053cc:	20002504 	.word	0x20002504
 80053d0:	200022a8 	.word	0x200022a8
 80053d4:	200022a4 	.word	0x200022a4

080053d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80053d8:	b480      	push	{r7}
 80053da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80053dc:	b672      	cpsid	i
}
 80053de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80053e0:	bf00      	nop
 80053e2:	e7fd      	b.n	80053e0 <Error_Handler+0x8>

080053e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053ea:	2300      	movs	r3, #0
 80053ec:	607b      	str	r3, [r7, #4]
 80053ee:	4b10      	ldr	r3, [pc, #64]	@ (8005430 <HAL_MspInit+0x4c>)
 80053f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053f2:	4a0f      	ldr	r2, [pc, #60]	@ (8005430 <HAL_MspInit+0x4c>)
 80053f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80053f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80053fa:	4b0d      	ldr	r3, [pc, #52]	@ (8005430 <HAL_MspInit+0x4c>)
 80053fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005402:	607b      	str	r3, [r7, #4]
 8005404:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005406:	2300      	movs	r3, #0
 8005408:	603b      	str	r3, [r7, #0]
 800540a:	4b09      	ldr	r3, [pc, #36]	@ (8005430 <HAL_MspInit+0x4c>)
 800540c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800540e:	4a08      	ldr	r2, [pc, #32]	@ (8005430 <HAL_MspInit+0x4c>)
 8005410:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005414:	6413      	str	r3, [r2, #64]	@ 0x40
 8005416:	4b06      	ldr	r3, [pc, #24]	@ (8005430 <HAL_MspInit+0x4c>)
 8005418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800541a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800541e:	603b      	str	r3, [r7, #0]
 8005420:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005422:	bf00      	nop
 8005424:	370c      	adds	r7, #12
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr
 800542e:	bf00      	nop
 8005430:	40023800 	.word	0x40023800

08005434 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b08a      	sub	sp, #40	@ 0x28
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800543c:	f107 0314 	add.w	r3, r7, #20
 8005440:	2200      	movs	r2, #0
 8005442:	601a      	str	r2, [r3, #0]
 8005444:	605a      	str	r2, [r3, #4]
 8005446:	609a      	str	r2, [r3, #8]
 8005448:	60da      	str	r2, [r3, #12]
 800544a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a1b      	ldr	r2, [pc, #108]	@ (80054c0 <HAL_ADC_MspInit+0x8c>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d12f      	bne.n	80054b6 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005456:	2300      	movs	r3, #0
 8005458:	613b      	str	r3, [r7, #16]
 800545a:	4b1a      	ldr	r3, [pc, #104]	@ (80054c4 <HAL_ADC_MspInit+0x90>)
 800545c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800545e:	4a19      	ldr	r2, [pc, #100]	@ (80054c4 <HAL_ADC_MspInit+0x90>)
 8005460:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005464:	6453      	str	r3, [r2, #68]	@ 0x44
 8005466:	4b17      	ldr	r3, [pc, #92]	@ (80054c4 <HAL_ADC_MspInit+0x90>)
 8005468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800546a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800546e:	613b      	str	r3, [r7, #16]
 8005470:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005472:	2300      	movs	r3, #0
 8005474:	60fb      	str	r3, [r7, #12]
 8005476:	4b13      	ldr	r3, [pc, #76]	@ (80054c4 <HAL_ADC_MspInit+0x90>)
 8005478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800547a:	4a12      	ldr	r2, [pc, #72]	@ (80054c4 <HAL_ADC_MspInit+0x90>)
 800547c:	f043 0304 	orr.w	r3, r3, #4
 8005480:	6313      	str	r3, [r2, #48]	@ 0x30
 8005482:	4b10      	ldr	r3, [pc, #64]	@ (80054c4 <HAL_ADC_MspInit+0x90>)
 8005484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005486:	f003 0304 	and.w	r3, r3, #4
 800548a:	60fb      	str	r3, [r7, #12]
 800548c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = ADC_VCC_Pin;
 800548e:	2304      	movs	r3, #4
 8005490:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005492:	2303      	movs	r3, #3
 8005494:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005496:	2300      	movs	r3, #0
 8005498:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_VCC_GPIO_Port, &GPIO_InitStruct);
 800549a:	f107 0314 	add.w	r3, r7, #20
 800549e:	4619      	mov	r1, r3
 80054a0:	4809      	ldr	r0, [pc, #36]	@ (80054c8 <HAL_ADC_MspInit+0x94>)
 80054a2:	f001 fa8b 	bl	80069bc <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80054a6:	2200      	movs	r2, #0
 80054a8:	2100      	movs	r1, #0
 80054aa:	2012      	movs	r0, #18
 80054ac:	f001 f9bd 	bl	800682a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80054b0:	2012      	movs	r0, #18
 80054b2:	f001 f9d6 	bl	8006862 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80054b6:	bf00      	nop
 80054b8:	3728      	adds	r7, #40	@ 0x28
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	40012000 	.word	0x40012000
 80054c4:	40023800 	.word	0x40023800
 80054c8:	40020800 	.word	0x40020800

080054cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b08a      	sub	sp, #40	@ 0x28
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054d4:	f107 0314 	add.w	r3, r7, #20
 80054d8:	2200      	movs	r2, #0
 80054da:	601a      	str	r2, [r3, #0]
 80054dc:	605a      	str	r2, [r3, #4]
 80054de:	609a      	str	r2, [r3, #8]
 80054e0:	60da      	str	r2, [r3, #12]
 80054e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a19      	ldr	r2, [pc, #100]	@ (8005550 <HAL_I2C_MspInit+0x84>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d12b      	bne.n	8005546 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054ee:	2300      	movs	r3, #0
 80054f0:	613b      	str	r3, [r7, #16]
 80054f2:	4b18      	ldr	r3, [pc, #96]	@ (8005554 <HAL_I2C_MspInit+0x88>)
 80054f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054f6:	4a17      	ldr	r2, [pc, #92]	@ (8005554 <HAL_I2C_MspInit+0x88>)
 80054f8:	f043 0302 	orr.w	r3, r3, #2
 80054fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80054fe:	4b15      	ldr	r3, [pc, #84]	@ (8005554 <HAL_I2C_MspInit+0x88>)
 8005500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005502:	f003 0302 	and.w	r3, r3, #2
 8005506:	613b      	str	r3, [r7, #16]
 8005508:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800550a:	23c0      	movs	r3, #192	@ 0xc0
 800550c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800550e:	2312      	movs	r3, #18
 8005510:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005512:	2300      	movs	r3, #0
 8005514:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005516:	2303      	movs	r3, #3
 8005518:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800551a:	2304      	movs	r3, #4
 800551c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800551e:	f107 0314 	add.w	r3, r7, #20
 8005522:	4619      	mov	r1, r3
 8005524:	480c      	ldr	r0, [pc, #48]	@ (8005558 <HAL_I2C_MspInit+0x8c>)
 8005526:	f001 fa49 	bl	80069bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800552a:	2300      	movs	r3, #0
 800552c:	60fb      	str	r3, [r7, #12]
 800552e:	4b09      	ldr	r3, [pc, #36]	@ (8005554 <HAL_I2C_MspInit+0x88>)
 8005530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005532:	4a08      	ldr	r2, [pc, #32]	@ (8005554 <HAL_I2C_MspInit+0x88>)
 8005534:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005538:	6413      	str	r3, [r2, #64]	@ 0x40
 800553a:	4b06      	ldr	r3, [pc, #24]	@ (8005554 <HAL_I2C_MspInit+0x88>)
 800553c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800553e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005542:	60fb      	str	r3, [r7, #12]
 8005544:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8005546:	bf00      	nop
 8005548:	3728      	adds	r7, #40	@ 0x28
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	40005400 	.word	0x40005400
 8005554:	40023800 	.word	0x40023800
 8005558:	40020400 	.word	0x40020400

0800555c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b08a      	sub	sp, #40	@ 0x28
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005564:	f107 0314 	add.w	r3, r7, #20
 8005568:	2200      	movs	r2, #0
 800556a:	601a      	str	r2, [r3, #0]
 800556c:	605a      	str	r2, [r3, #4]
 800556e:	609a      	str	r2, [r3, #8]
 8005570:	60da      	str	r2, [r3, #12]
 8005572:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a19      	ldr	r2, [pc, #100]	@ (80055e0 <HAL_SPI_MspInit+0x84>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d12b      	bne.n	80055d6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800557e:	2300      	movs	r3, #0
 8005580:	613b      	str	r3, [r7, #16]
 8005582:	4b18      	ldr	r3, [pc, #96]	@ (80055e4 <HAL_SPI_MspInit+0x88>)
 8005584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005586:	4a17      	ldr	r2, [pc, #92]	@ (80055e4 <HAL_SPI_MspInit+0x88>)
 8005588:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800558c:	6453      	str	r3, [r2, #68]	@ 0x44
 800558e:	4b15      	ldr	r3, [pc, #84]	@ (80055e4 <HAL_SPI_MspInit+0x88>)
 8005590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005592:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005596:	613b      	str	r3, [r7, #16]
 8005598:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800559a:	2300      	movs	r3, #0
 800559c:	60fb      	str	r3, [r7, #12]
 800559e:	4b11      	ldr	r3, [pc, #68]	@ (80055e4 <HAL_SPI_MspInit+0x88>)
 80055a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055a2:	4a10      	ldr	r2, [pc, #64]	@ (80055e4 <HAL_SPI_MspInit+0x88>)
 80055a4:	f043 0301 	orr.w	r3, r3, #1
 80055a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80055aa:	4b0e      	ldr	r3, [pc, #56]	@ (80055e4 <HAL_SPI_MspInit+0x88>)
 80055ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ae:	f003 0301 	and.w	r3, r3, #1
 80055b2:	60fb      	str	r3, [r7, #12]
 80055b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80055b6:	23e0      	movs	r3, #224	@ 0xe0
 80055b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055ba:	2302      	movs	r3, #2
 80055bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055be:	2300      	movs	r3, #0
 80055c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055c2:	2303      	movs	r3, #3
 80055c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80055c6:	2305      	movs	r3, #5
 80055c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055ca:	f107 0314 	add.w	r3, r7, #20
 80055ce:	4619      	mov	r1, r3
 80055d0:	4805      	ldr	r0, [pc, #20]	@ (80055e8 <HAL_SPI_MspInit+0x8c>)
 80055d2:	f001 f9f3 	bl	80069bc <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80055d6:	bf00      	nop
 80055d8:	3728      	adds	r7, #40	@ 0x28
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	40013000 	.word	0x40013000
 80055e4:	40023800 	.word	0x40023800
 80055e8:	40020000 	.word	0x40020000

080055ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b086      	sub	sp, #24
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a38      	ldr	r2, [pc, #224]	@ (80056dc <HAL_TIM_Base_MspInit+0xf0>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d116      	bne.n	800562c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80055fe:	2300      	movs	r3, #0
 8005600:	617b      	str	r3, [r7, #20]
 8005602:	4b37      	ldr	r3, [pc, #220]	@ (80056e0 <HAL_TIM_Base_MspInit+0xf4>)
 8005604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005606:	4a36      	ldr	r2, [pc, #216]	@ (80056e0 <HAL_TIM_Base_MspInit+0xf4>)
 8005608:	f043 0310 	orr.w	r3, r3, #16
 800560c:	6413      	str	r3, [r2, #64]	@ 0x40
 800560e:	4b34      	ldr	r3, [pc, #208]	@ (80056e0 <HAL_TIM_Base_MspInit+0xf4>)
 8005610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005612:	f003 0310 	and.w	r3, r3, #16
 8005616:	617b      	str	r3, [r7, #20]
 8005618:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800561a:	2200      	movs	r2, #0
 800561c:	2100      	movs	r1, #0
 800561e:	2036      	movs	r0, #54	@ 0x36
 8005620:	f001 f903 	bl	800682a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005624:	2036      	movs	r0, #54	@ 0x36
 8005626:	f001 f91c 	bl	8006862 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800562a:	e052      	b.n	80056d2 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM7)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a2c      	ldr	r2, [pc, #176]	@ (80056e4 <HAL_TIM_Base_MspInit+0xf8>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d116      	bne.n	8005664 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005636:	2300      	movs	r3, #0
 8005638:	613b      	str	r3, [r7, #16]
 800563a:	4b29      	ldr	r3, [pc, #164]	@ (80056e0 <HAL_TIM_Base_MspInit+0xf4>)
 800563c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800563e:	4a28      	ldr	r2, [pc, #160]	@ (80056e0 <HAL_TIM_Base_MspInit+0xf4>)
 8005640:	f043 0320 	orr.w	r3, r3, #32
 8005644:	6413      	str	r3, [r2, #64]	@ 0x40
 8005646:	4b26      	ldr	r3, [pc, #152]	@ (80056e0 <HAL_TIM_Base_MspInit+0xf4>)
 8005648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800564a:	f003 0320 	and.w	r3, r3, #32
 800564e:	613b      	str	r3, [r7, #16]
 8005650:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8005652:	2200      	movs	r2, #0
 8005654:	2100      	movs	r1, #0
 8005656:	2037      	movs	r0, #55	@ 0x37
 8005658:	f001 f8e7 	bl	800682a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800565c:	2037      	movs	r0, #55	@ 0x37
 800565e:	f001 f900 	bl	8006862 <HAL_NVIC_EnableIRQ>
}
 8005662:	e036      	b.n	80056d2 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM10)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a1f      	ldr	r2, [pc, #124]	@ (80056e8 <HAL_TIM_Base_MspInit+0xfc>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d116      	bne.n	800569c <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800566e:	2300      	movs	r3, #0
 8005670:	60fb      	str	r3, [r7, #12]
 8005672:	4b1b      	ldr	r3, [pc, #108]	@ (80056e0 <HAL_TIM_Base_MspInit+0xf4>)
 8005674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005676:	4a1a      	ldr	r2, [pc, #104]	@ (80056e0 <HAL_TIM_Base_MspInit+0xf4>)
 8005678:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800567c:	6453      	str	r3, [r2, #68]	@ 0x44
 800567e:	4b18      	ldr	r3, [pc, #96]	@ (80056e0 <HAL_TIM_Base_MspInit+0xf4>)
 8005680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005686:	60fb      	str	r3, [r7, #12]
 8005688:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800568a:	2200      	movs	r2, #0
 800568c:	2100      	movs	r1, #0
 800568e:	2019      	movs	r0, #25
 8005690:	f001 f8cb 	bl	800682a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005694:	2019      	movs	r0, #25
 8005696:	f001 f8e4 	bl	8006862 <HAL_NVIC_EnableIRQ>
}
 800569a:	e01a      	b.n	80056d2 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM11)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a12      	ldr	r2, [pc, #72]	@ (80056ec <HAL_TIM_Base_MspInit+0x100>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d115      	bne.n	80056d2 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80056a6:	2300      	movs	r3, #0
 80056a8:	60bb      	str	r3, [r7, #8]
 80056aa:	4b0d      	ldr	r3, [pc, #52]	@ (80056e0 <HAL_TIM_Base_MspInit+0xf4>)
 80056ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ae:	4a0c      	ldr	r2, [pc, #48]	@ (80056e0 <HAL_TIM_Base_MspInit+0xf4>)
 80056b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80056b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80056b6:	4b0a      	ldr	r3, [pc, #40]	@ (80056e0 <HAL_TIM_Base_MspInit+0xf4>)
 80056b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80056be:	60bb      	str	r3, [r7, #8]
 80056c0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80056c2:	2200      	movs	r2, #0
 80056c4:	2100      	movs	r1, #0
 80056c6:	201a      	movs	r0, #26
 80056c8:	f001 f8af 	bl	800682a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80056cc:	201a      	movs	r0, #26
 80056ce:	f001 f8c8 	bl	8006862 <HAL_NVIC_EnableIRQ>
}
 80056d2:	bf00      	nop
 80056d4:	3718      	adds	r7, #24
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	40001000 	.word	0x40001000
 80056e0:	40023800 	.word	0x40023800
 80056e4:	40001400 	.word	0x40001400
 80056e8:	40014400 	.word	0x40014400
 80056ec:	40014800 	.word	0x40014800

080056f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b090      	sub	sp, #64	@ 0x40
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80056fc:	2200      	movs	r2, #0
 80056fe:	601a      	str	r2, [r3, #0]
 8005700:	605a      	str	r2, [r3, #4]
 8005702:	609a      	str	r2, [r3, #8]
 8005704:	60da      	str	r2, [r3, #12]
 8005706:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a7f      	ldr	r2, [pc, #508]	@ (800590c <HAL_UART_MspInit+0x21c>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d12c      	bne.n	800576c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8005712:	2300      	movs	r3, #0
 8005714:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005716:	4b7e      	ldr	r3, [pc, #504]	@ (8005910 <HAL_UART_MspInit+0x220>)
 8005718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800571a:	4a7d      	ldr	r2, [pc, #500]	@ (8005910 <HAL_UART_MspInit+0x220>)
 800571c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005720:	6413      	str	r3, [r2, #64]	@ 0x40
 8005722:	4b7b      	ldr	r3, [pc, #492]	@ (8005910 <HAL_UART_MspInit+0x220>)
 8005724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005726:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800572a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800572c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800572e:	2300      	movs	r3, #0
 8005730:	627b      	str	r3, [r7, #36]	@ 0x24
 8005732:	4b77      	ldr	r3, [pc, #476]	@ (8005910 <HAL_UART_MspInit+0x220>)
 8005734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005736:	4a76      	ldr	r2, [pc, #472]	@ (8005910 <HAL_UART_MspInit+0x220>)
 8005738:	f043 0301 	orr.w	r3, r3, #1
 800573c:	6313      	str	r3, [r2, #48]	@ 0x30
 800573e:	4b74      	ldr	r3, [pc, #464]	@ (8005910 <HAL_UART_MspInit+0x220>)
 8005740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005742:	f003 0301 	and.w	r3, r3, #1
 8005746:	627b      	str	r3, [r7, #36]	@ 0x24
 8005748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800574a:	2303      	movs	r3, #3
 800574c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800574e:	2302      	movs	r3, #2
 8005750:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005752:	2300      	movs	r3, #0
 8005754:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005756:	2303      	movs	r3, #3
 8005758:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800575a:	2308      	movs	r3, #8
 800575c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800575e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005762:	4619      	mov	r1, r3
 8005764:	486b      	ldr	r0, [pc, #428]	@ (8005914 <HAL_UART_MspInit+0x224>)
 8005766:	f001 f929 	bl	80069bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800576a:	e0cb      	b.n	8005904 <HAL_UART_MspInit+0x214>
  else if(huart->Instance==USART2)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a69      	ldr	r2, [pc, #420]	@ (8005918 <HAL_UART_MspInit+0x228>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d134      	bne.n	80057e0 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005776:	2300      	movs	r3, #0
 8005778:	623b      	str	r3, [r7, #32]
 800577a:	4b65      	ldr	r3, [pc, #404]	@ (8005910 <HAL_UART_MspInit+0x220>)
 800577c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800577e:	4a64      	ldr	r2, [pc, #400]	@ (8005910 <HAL_UART_MspInit+0x220>)
 8005780:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005784:	6413      	str	r3, [r2, #64]	@ 0x40
 8005786:	4b62      	ldr	r3, [pc, #392]	@ (8005910 <HAL_UART_MspInit+0x220>)
 8005788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800578a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800578e:	623b      	str	r3, [r7, #32]
 8005790:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005792:	2300      	movs	r3, #0
 8005794:	61fb      	str	r3, [r7, #28]
 8005796:	4b5e      	ldr	r3, [pc, #376]	@ (8005910 <HAL_UART_MspInit+0x220>)
 8005798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800579a:	4a5d      	ldr	r2, [pc, #372]	@ (8005910 <HAL_UART_MspInit+0x220>)
 800579c:	f043 0301 	orr.w	r3, r3, #1
 80057a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80057a2:	4b5b      	ldr	r3, [pc, #364]	@ (8005910 <HAL_UART_MspInit+0x220>)
 80057a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057a6:	f003 0301 	and.w	r3, r3, #1
 80057aa:	61fb      	str	r3, [r7, #28]
 80057ac:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = TX2_GPS_Pin|RX2_GPS_Pin;
 80057ae:	230c      	movs	r3, #12
 80057b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057b2:	2302      	movs	r3, #2
 80057b4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057b6:	2300      	movs	r3, #0
 80057b8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057ba:	2303      	movs	r3, #3
 80057bc:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80057be:	2307      	movs	r3, #7
 80057c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057c2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80057c6:	4619      	mov	r1, r3
 80057c8:	4852      	ldr	r0, [pc, #328]	@ (8005914 <HAL_UART_MspInit+0x224>)
 80057ca:	f001 f8f7 	bl	80069bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80057ce:	2200      	movs	r2, #0
 80057d0:	2100      	movs	r1, #0
 80057d2:	2026      	movs	r0, #38	@ 0x26
 80057d4:	f001 f829 	bl	800682a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80057d8:	2026      	movs	r0, #38	@ 0x26
 80057da:	f001 f842 	bl	8006862 <HAL_NVIC_EnableIRQ>
}
 80057de:	e091      	b.n	8005904 <HAL_UART_MspInit+0x214>
  else if(huart->Instance==USART3)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a4d      	ldr	r2, [pc, #308]	@ (800591c <HAL_UART_MspInit+0x22c>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d153      	bne.n	8005892 <HAL_UART_MspInit+0x1a2>
    __HAL_RCC_USART3_CLK_ENABLE();
 80057ea:	2300      	movs	r3, #0
 80057ec:	61bb      	str	r3, [r7, #24]
 80057ee:	4b48      	ldr	r3, [pc, #288]	@ (8005910 <HAL_UART_MspInit+0x220>)
 80057f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057f2:	4a47      	ldr	r2, [pc, #284]	@ (8005910 <HAL_UART_MspInit+0x220>)
 80057f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80057f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80057fa:	4b45      	ldr	r3, [pc, #276]	@ (8005910 <HAL_UART_MspInit+0x220>)
 80057fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005802:	61bb      	str	r3, [r7, #24]
 8005804:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005806:	2300      	movs	r3, #0
 8005808:	617b      	str	r3, [r7, #20]
 800580a:	4b41      	ldr	r3, [pc, #260]	@ (8005910 <HAL_UART_MspInit+0x220>)
 800580c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800580e:	4a40      	ldr	r2, [pc, #256]	@ (8005910 <HAL_UART_MspInit+0x220>)
 8005810:	f043 0304 	orr.w	r3, r3, #4
 8005814:	6313      	str	r3, [r2, #48]	@ 0x30
 8005816:	4b3e      	ldr	r3, [pc, #248]	@ (8005910 <HAL_UART_MspInit+0x220>)
 8005818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800581a:	f003 0304 	and.w	r3, r3, #4
 800581e:	617b      	str	r3, [r7, #20]
 8005820:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005822:	2300      	movs	r3, #0
 8005824:	613b      	str	r3, [r7, #16]
 8005826:	4b3a      	ldr	r3, [pc, #232]	@ (8005910 <HAL_UART_MspInit+0x220>)
 8005828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800582a:	4a39      	ldr	r2, [pc, #228]	@ (8005910 <HAL_UART_MspInit+0x220>)
 800582c:	f043 0302 	orr.w	r3, r3, #2
 8005830:	6313      	str	r3, [r2, #48]	@ 0x30
 8005832:	4b37      	ldr	r3, [pc, #220]	@ (8005910 <HAL_UART_MspInit+0x220>)
 8005834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005836:	f003 0302 	and.w	r3, r3, #2
 800583a:	613b      	str	r3, [r7, #16]
 800583c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = RX3_LORA_Pin;
 800583e:	2320      	movs	r3, #32
 8005840:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005842:	2302      	movs	r3, #2
 8005844:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005846:	2300      	movs	r3, #0
 8005848:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800584a:	2303      	movs	r3, #3
 800584c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800584e:	2307      	movs	r3, #7
 8005850:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(RX3_LORA_GPIO_Port, &GPIO_InitStruct);
 8005852:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005856:	4619      	mov	r1, r3
 8005858:	4831      	ldr	r0, [pc, #196]	@ (8005920 <HAL_UART_MspInit+0x230>)
 800585a:	f001 f8af 	bl	80069bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TX3_LORA_Pin;
 800585e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005862:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005864:	2302      	movs	r3, #2
 8005866:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005868:	2300      	movs	r3, #0
 800586a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800586c:	2303      	movs	r3, #3
 800586e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005870:	2307      	movs	r3, #7
 8005872:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(TX3_LORA_GPIO_Port, &GPIO_InitStruct);
 8005874:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005878:	4619      	mov	r1, r3
 800587a:	482a      	ldr	r0, [pc, #168]	@ (8005924 <HAL_UART_MspInit+0x234>)
 800587c:	f001 f89e 	bl	80069bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8005880:	2200      	movs	r2, #0
 8005882:	2100      	movs	r1, #0
 8005884:	2027      	movs	r0, #39	@ 0x27
 8005886:	f000 ffd0 	bl	800682a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800588a:	2027      	movs	r0, #39	@ 0x27
 800588c:	f000 ffe9 	bl	8006862 <HAL_NVIC_EnableIRQ>
}
 8005890:	e038      	b.n	8005904 <HAL_UART_MspInit+0x214>
  else if(huart->Instance==USART6)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a24      	ldr	r2, [pc, #144]	@ (8005928 <HAL_UART_MspInit+0x238>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d133      	bne.n	8005904 <HAL_UART_MspInit+0x214>
    __HAL_RCC_USART6_CLK_ENABLE();
 800589c:	2300      	movs	r3, #0
 800589e:	60fb      	str	r3, [r7, #12]
 80058a0:	4b1b      	ldr	r3, [pc, #108]	@ (8005910 <HAL_UART_MspInit+0x220>)
 80058a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058a4:	4a1a      	ldr	r2, [pc, #104]	@ (8005910 <HAL_UART_MspInit+0x220>)
 80058a6:	f043 0320 	orr.w	r3, r3, #32
 80058aa:	6453      	str	r3, [r2, #68]	@ 0x44
 80058ac:	4b18      	ldr	r3, [pc, #96]	@ (8005910 <HAL_UART_MspInit+0x220>)
 80058ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058b0:	f003 0320 	and.w	r3, r3, #32
 80058b4:	60fb      	str	r3, [r7, #12]
 80058b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80058b8:	2300      	movs	r3, #0
 80058ba:	60bb      	str	r3, [r7, #8]
 80058bc:	4b14      	ldr	r3, [pc, #80]	@ (8005910 <HAL_UART_MspInit+0x220>)
 80058be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058c0:	4a13      	ldr	r2, [pc, #76]	@ (8005910 <HAL_UART_MspInit+0x220>)
 80058c2:	f043 0304 	orr.w	r3, r3, #4
 80058c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80058c8:	4b11      	ldr	r3, [pc, #68]	@ (8005910 <HAL_UART_MspInit+0x220>)
 80058ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058cc:	f003 0304 	and.w	r3, r3, #4
 80058d0:	60bb      	str	r3, [r7, #8]
 80058d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TX6_RS_Pin|RX6_RS_Pin;
 80058d4:	23c0      	movs	r3, #192	@ 0xc0
 80058d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058d8:	2302      	movs	r3, #2
 80058da:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058dc:	2300      	movs	r3, #0
 80058de:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058e0:	2303      	movs	r3, #3
 80058e2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80058e4:	2308      	movs	r3, #8
 80058e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80058e8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80058ec:	4619      	mov	r1, r3
 80058ee:	480c      	ldr	r0, [pc, #48]	@ (8005920 <HAL_UART_MspInit+0x230>)
 80058f0:	f001 f864 	bl	80069bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80058f4:	2200      	movs	r2, #0
 80058f6:	2100      	movs	r1, #0
 80058f8:	2047      	movs	r0, #71	@ 0x47
 80058fa:	f000 ff96 	bl	800682a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80058fe:	2047      	movs	r0, #71	@ 0x47
 8005900:	f000 ffaf 	bl	8006862 <HAL_NVIC_EnableIRQ>
}
 8005904:	bf00      	nop
 8005906:	3740      	adds	r7, #64	@ 0x40
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}
 800590c:	40004c00 	.word	0x40004c00
 8005910:	40023800 	.word	0x40023800
 8005914:	40020000 	.word	0x40020000
 8005918:	40004400 	.word	0x40004400
 800591c:	40004800 	.word	0x40004800
 8005920:	40020800 	.word	0x40020800
 8005924:	40020400 	.word	0x40020400
 8005928:	40011400 	.word	0x40011400

0800592c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800592c:	b480      	push	{r7}
 800592e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005930:	bf00      	nop
 8005932:	e7fd      	b.n	8005930 <NMI_Handler+0x4>

08005934 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005934:	b480      	push	{r7}
 8005936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005938:	bf00      	nop
 800593a:	e7fd      	b.n	8005938 <HardFault_Handler+0x4>

0800593c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800593c:	b480      	push	{r7}
 800593e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005940:	bf00      	nop
 8005942:	e7fd      	b.n	8005940 <MemManage_Handler+0x4>

08005944 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005944:	b480      	push	{r7}
 8005946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005948:	bf00      	nop
 800594a:	e7fd      	b.n	8005948 <BusFault_Handler+0x4>

0800594c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800594c:	b480      	push	{r7}
 800594e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005950:	bf00      	nop
 8005952:	e7fd      	b.n	8005950 <UsageFault_Handler+0x4>

08005954 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005954:	b480      	push	{r7}
 8005956:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005958:	bf00      	nop
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr

08005962 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005962:	b480      	push	{r7}
 8005964:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005966:	bf00      	nop
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005970:	b480      	push	{r7}
 8005972:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005974:	bf00      	nop
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr

0800597e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800597e:	b580      	push	{r7, lr}
 8005980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005982:	f000 f9a7 	bl	8005cd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005986:	bf00      	nop
 8005988:	bd80      	pop	{r7, pc}
	...

0800598c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005990:	4802      	ldr	r0, [pc, #8]	@ (800599c <ADC_IRQHandler+0x10>)
 8005992:	f000 fb05 	bl	8005fa0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8005996:	bf00      	nop
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	20000260 	.word	0x20000260

080059a0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80059a4:	4802      	ldr	r0, [pc, #8]	@ (80059b0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80059a6:	f003 ffec 	bl	8009982 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80059aa:	bf00      	nop
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	200003e4 	.word	0x200003e4

080059b4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80059b8:	4802      	ldr	r0, [pc, #8]	@ (80059c4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80059ba:	f003 ffe2 	bl	8009982 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80059be:	bf00      	nop
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	bf00      	nop
 80059c4:	2000042c 	.word	0x2000042c

080059c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80059cc:	4802      	ldr	r0, [pc, #8]	@ (80059d8 <USART2_IRQHandler+0x10>)
 80059ce:	f004 fb8d 	bl	800a0ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80059d2:	bf00      	nop
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	200004b8 	.word	0x200004b8

080059dc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80059e0:	4802      	ldr	r0, [pc, #8]	@ (80059ec <USART3_IRQHandler+0x10>)
 80059e2:	f004 fb83 	bl	800a0ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80059e6:	bf00      	nop
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	200004fc 	.word	0x200004fc

080059f0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80059f4:	4802      	ldr	r0, [pc, #8]	@ (8005a00 <TIM6_DAC_IRQHandler+0x10>)
 80059f6:	f003 ffc4 	bl	8009982 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80059fa:	bf00      	nop
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	20000354 	.word	0x20000354

08005a04 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005a08:	4802      	ldr	r0, [pc, #8]	@ (8005a14 <TIM7_IRQHandler+0x10>)
 8005a0a:	f003 ffba 	bl	8009982 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8005a0e:	bf00      	nop
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	2000039c 	.word	0x2000039c

08005a18 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8005a1c:	4802      	ldr	r0, [pc, #8]	@ (8005a28 <USART6_IRQHandler+0x10>)
 8005a1e:	f004 fb65 	bl	800a0ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8005a22:	bf00      	nop
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	bf00      	nop
 8005a28:	20000540 	.word	0x20000540

08005a2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	af00      	add	r7, sp, #0
  return 1;
 8005a30:	2301      	movs	r3, #1
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <_kill>:

int _kill(int pid, int sig)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005a46:	f006 fbc1 	bl	800c1cc <__errno>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	2216      	movs	r2, #22
 8005a4e:	601a      	str	r2, [r3, #0]
  return -1;
 8005a50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3708      	adds	r7, #8
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <_exit>:

void _exit (int status)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b082      	sub	sp, #8
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005a64:	f04f 31ff 	mov.w	r1, #4294967295
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f7ff ffe7 	bl	8005a3c <_kill>
  while (1) {}    /* Make sure we hang here */
 8005a6e:	bf00      	nop
 8005a70:	e7fd      	b.n	8005a6e <_exit+0x12>

08005a72 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005a72:	b580      	push	{r7, lr}
 8005a74:	b086      	sub	sp, #24
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	60f8      	str	r0, [r7, #12]
 8005a7a:	60b9      	str	r1, [r7, #8]
 8005a7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a7e:	2300      	movs	r3, #0
 8005a80:	617b      	str	r3, [r7, #20]
 8005a82:	e00a      	b.n	8005a9a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005a84:	f3af 8000 	nop.w
 8005a88:	4601      	mov	r1, r0
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	1c5a      	adds	r2, r3, #1
 8005a8e:	60ba      	str	r2, [r7, #8]
 8005a90:	b2ca      	uxtb	r2, r1
 8005a92:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	3301      	adds	r3, #1
 8005a98:	617b      	str	r3, [r7, #20]
 8005a9a:	697a      	ldr	r2, [r7, #20]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	dbf0      	blt.n	8005a84 <_read+0x12>
  }

  return len;
 8005aa2:	687b      	ldr	r3, [r7, #4]
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3718      	adds	r7, #24
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b086      	sub	sp, #24
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005ab8:	2300      	movs	r3, #0
 8005aba:	617b      	str	r3, [r7, #20]
 8005abc:	e009      	b.n	8005ad2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	1c5a      	adds	r2, r3, #1
 8005ac2:	60ba      	str	r2, [r7, #8]
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	3301      	adds	r3, #1
 8005ad0:	617b      	str	r3, [r7, #20]
 8005ad2:	697a      	ldr	r2, [r7, #20]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	dbf1      	blt.n	8005abe <_write+0x12>
  }
  return len;
 8005ada:	687b      	ldr	r3, [r7, #4]
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3718      	adds	r7, #24
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <_close>:

int _close(int file)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005aec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005b0c:	605a      	str	r2, [r3, #4]
  return 0;
 8005b0e:	2300      	movs	r3, #0
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	370c      	adds	r7, #12
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <_isatty>:

int _isatty(int file)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005b24:	2301      	movs	r3, #1
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	370c      	adds	r7, #12
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr

08005b32 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005b32:	b480      	push	{r7}
 8005b34:	b085      	sub	sp, #20
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	60f8      	str	r0, [r7, #12]
 8005b3a:	60b9      	str	r1, [r7, #8]
 8005b3c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005b3e:	2300      	movs	r3, #0
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3714      	adds	r7, #20
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b086      	sub	sp, #24
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005b54:	4a14      	ldr	r2, [pc, #80]	@ (8005ba8 <_sbrk+0x5c>)
 8005b56:	4b15      	ldr	r3, [pc, #84]	@ (8005bac <_sbrk+0x60>)
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005b60:	4b13      	ldr	r3, [pc, #76]	@ (8005bb0 <_sbrk+0x64>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d102      	bne.n	8005b6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005b68:	4b11      	ldr	r3, [pc, #68]	@ (8005bb0 <_sbrk+0x64>)
 8005b6a:	4a12      	ldr	r2, [pc, #72]	@ (8005bb4 <_sbrk+0x68>)
 8005b6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005b6e:	4b10      	ldr	r3, [pc, #64]	@ (8005bb0 <_sbrk+0x64>)
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4413      	add	r3, r2
 8005b76:	693a      	ldr	r2, [r7, #16]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d207      	bcs.n	8005b8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005b7c:	f006 fb26 	bl	800c1cc <__errno>
 8005b80:	4603      	mov	r3, r0
 8005b82:	220c      	movs	r2, #12
 8005b84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005b86:	f04f 33ff 	mov.w	r3, #4294967295
 8005b8a:	e009      	b.n	8005ba0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005b8c:	4b08      	ldr	r3, [pc, #32]	@ (8005bb0 <_sbrk+0x64>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005b92:	4b07      	ldr	r3, [pc, #28]	@ (8005bb0 <_sbrk+0x64>)
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4413      	add	r3, r2
 8005b9a:	4a05      	ldr	r2, [pc, #20]	@ (8005bb0 <_sbrk+0x64>)
 8005b9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3718      	adds	r7, #24
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	20020000 	.word	0x20020000
 8005bac:	00000400 	.word	0x00000400
 8005bb0:	20002514 	.word	0x20002514
 8005bb4:	20002680 	.word	0x20002680

08005bb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005bbc:	4b06      	ldr	r3, [pc, #24]	@ (8005bd8 <SystemInit+0x20>)
 8005bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bc2:	4a05      	ldr	r2, [pc, #20]	@ (8005bd8 <SystemInit+0x20>)
 8005bc4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005bc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005bcc:	bf00      	nop
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr
 8005bd6:	bf00      	nop
 8005bd8:	e000ed00 	.word	0xe000ed00

08005bdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005bdc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005c14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005be0:	480d      	ldr	r0, [pc, #52]	@ (8005c18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005be2:	490e      	ldr	r1, [pc, #56]	@ (8005c1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005be4:	4a0e      	ldr	r2, [pc, #56]	@ (8005c20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005be6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005be8:	e002      	b.n	8005bf0 <LoopCopyDataInit>

08005bea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005bea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005bec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005bee:	3304      	adds	r3, #4

08005bf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005bf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005bf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005bf4:	d3f9      	bcc.n	8005bea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005bf6:	4a0b      	ldr	r2, [pc, #44]	@ (8005c24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005bf8:	4c0b      	ldr	r4, [pc, #44]	@ (8005c28 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005bfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005bfc:	e001      	b.n	8005c02 <LoopFillZerobss>

08005bfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005bfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005c00:	3204      	adds	r2, #4

08005c02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005c02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005c04:	d3fb      	bcc.n	8005bfe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005c06:	f7ff ffd7 	bl	8005bb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005c0a:	f006 fae5 	bl	800c1d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005c0e:	f7fe f8a7 	bl	8003d60 <main>
  bx  lr    
 8005c12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005c14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005c18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005c1c:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 8005c20:	0800f3f0 	.word	0x0800f3f0
  ldr r2, =_sbss
 8005c24:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 8005c28:	2000267c 	.word	0x2000267c

08005c2c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005c2c:	e7fe      	b.n	8005c2c <CAN1_RX0_IRQHandler>
	...

08005c30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005c34:	4b0e      	ldr	r3, [pc, #56]	@ (8005c70 <HAL_Init+0x40>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a0d      	ldr	r2, [pc, #52]	@ (8005c70 <HAL_Init+0x40>)
 8005c3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005c3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005c40:	4b0b      	ldr	r3, [pc, #44]	@ (8005c70 <HAL_Init+0x40>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a0a      	ldr	r2, [pc, #40]	@ (8005c70 <HAL_Init+0x40>)
 8005c46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005c4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005c4c:	4b08      	ldr	r3, [pc, #32]	@ (8005c70 <HAL_Init+0x40>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a07      	ldr	r2, [pc, #28]	@ (8005c70 <HAL_Init+0x40>)
 8005c52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005c58:	2003      	movs	r0, #3
 8005c5a:	f000 fddb 	bl	8006814 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005c5e:	200f      	movs	r0, #15
 8005c60:	f000 f808 	bl	8005c74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005c64:	f7ff fbbe 	bl	80053e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	40023c00 	.word	0x40023c00

08005c74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b082      	sub	sp, #8
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005c7c:	4b12      	ldr	r3, [pc, #72]	@ (8005cc8 <HAL_InitTick+0x54>)
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	4b12      	ldr	r3, [pc, #72]	@ (8005ccc <HAL_InitTick+0x58>)
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	4619      	mov	r1, r3
 8005c86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005c8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c92:	4618      	mov	r0, r3
 8005c94:	f000 fdf3 	bl	800687e <HAL_SYSTICK_Config>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d001      	beq.n	8005ca2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e00e      	b.n	8005cc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2b0f      	cmp	r3, #15
 8005ca6:	d80a      	bhi.n	8005cbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005ca8:	2200      	movs	r2, #0
 8005caa:	6879      	ldr	r1, [r7, #4]
 8005cac:	f04f 30ff 	mov.w	r0, #4294967295
 8005cb0:	f000 fdbb 	bl	800682a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005cb4:	4a06      	ldr	r2, [pc, #24]	@ (8005cd0 <HAL_InitTick+0x5c>)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	e000      	b.n	8005cc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3708      	adds	r7, #8
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}
 8005cc8:	20000044 	.word	0x20000044
 8005ccc:	2000004c 	.word	0x2000004c
 8005cd0:	20000048 	.word	0x20000048

08005cd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005cd8:	4b06      	ldr	r3, [pc, #24]	@ (8005cf4 <HAL_IncTick+0x20>)
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	461a      	mov	r2, r3
 8005cde:	4b06      	ldr	r3, [pc, #24]	@ (8005cf8 <HAL_IncTick+0x24>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4413      	add	r3, r2
 8005ce4:	4a04      	ldr	r2, [pc, #16]	@ (8005cf8 <HAL_IncTick+0x24>)
 8005ce6:	6013      	str	r3, [r2, #0]
}
 8005ce8:	bf00      	nop
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr
 8005cf2:	bf00      	nop
 8005cf4:	2000004c 	.word	0x2000004c
 8005cf8:	20002518 	.word	0x20002518

08005cfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	af00      	add	r7, sp, #0
  return uwTick;
 8005d00:	4b03      	ldr	r3, [pc, #12]	@ (8005d10 <HAL_GetTick+0x14>)
 8005d02:	681b      	ldr	r3, [r3, #0]
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	20002518 	.word	0x20002518

08005d14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005d1c:	f7ff ffee 	bl	8005cfc <HAL_GetTick>
 8005d20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d2c:	d005      	beq.n	8005d3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8005d58 <HAL_Delay+0x44>)
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	461a      	mov	r2, r3
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	4413      	add	r3, r2
 8005d38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005d3a:	bf00      	nop
 8005d3c:	f7ff ffde 	bl	8005cfc <HAL_GetTick>
 8005d40:	4602      	mov	r2, r0
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	1ad3      	subs	r3, r2, r3
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d8f7      	bhi.n	8005d3c <HAL_Delay+0x28>
  {
  }
}
 8005d4c:	bf00      	nop
 8005d4e:	bf00      	nop
 8005d50:	3710      	adds	r7, #16
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	2000004c 	.word	0x2000004c

08005d5c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005d64:	2300      	movs	r3, #0
 8005d66:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d101      	bne.n	8005d72 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e033      	b.n	8005dda <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d109      	bne.n	8005d8e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f7ff fb5a 	bl	8005434 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d92:	f003 0310 	and.w	r3, r3, #16
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d118      	bne.n	8005dcc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d9e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005da2:	f023 0302 	bic.w	r3, r3, #2
 8005da6:	f043 0202 	orr.w	r2, r3, #2
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 fb5a 	bl	8006468 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dbe:	f023 0303 	bic.w	r3, r3, #3
 8005dc2:	f043 0201 	orr.w	r2, r3, #1
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	641a      	str	r2, [r3, #64]	@ 0x40
 8005dca:	e001      	b.n	8005dd0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3710      	adds	r7, #16
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
	...

08005de4 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b085      	sub	sp, #20
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005dec:	2300      	movs	r3, #0
 8005dee:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d101      	bne.n	8005dfe <HAL_ADC_Start_IT+0x1a>
 8005dfa:	2302      	movs	r3, #2
 8005dfc:	e0bd      	b.n	8005f7a <HAL_ADC_Start_IT+0x196>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2201      	movs	r2, #1
 8005e02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	f003 0301 	and.w	r3, r3, #1
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d018      	beq.n	8005e46 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	689a      	ldr	r2, [r3, #8]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f042 0201 	orr.w	r2, r2, #1
 8005e22:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005e24:	4b58      	ldr	r3, [pc, #352]	@ (8005f88 <HAL_ADC_Start_IT+0x1a4>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a58      	ldr	r2, [pc, #352]	@ (8005f8c <HAL_ADC_Start_IT+0x1a8>)
 8005e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e2e:	0c9a      	lsrs	r2, r3, #18
 8005e30:	4613      	mov	r3, r2
 8005e32:	005b      	lsls	r3, r3, #1
 8005e34:	4413      	add	r3, r2
 8005e36:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005e38:	e002      	b.n	8005e40 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	3b01      	subs	r3, #1
 8005e3e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d1f9      	bne.n	8005e3a <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	f003 0301 	and.w	r3, r3, #1
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	f040 8085 	bne.w	8005f60 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e5a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005e5e:	f023 0301 	bic.w	r3, r3, #1
 8005e62:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d007      	beq.n	8005e88 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e7c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005e80:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005e90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e94:	d106      	bne.n	8005ea4 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e9a:	f023 0206 	bic.w	r2, r3, #6
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	645a      	str	r2, [r3, #68]	@ 0x44
 8005ea2:	e002      	b.n	8005eaa <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005eb2:	4b37      	ldr	r3, [pc, #220]	@ (8005f90 <HAL_ADC_Start_IT+0x1ac>)
 8005eb4:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8005ebe:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	6812      	ldr	r2, [r2, #0]
 8005eca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005ece:	f043 0320 	orr.w	r3, r3, #32
 8005ed2:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	f003 031f 	and.w	r3, r3, #31
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d12a      	bne.n	8005f36 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a2b      	ldr	r2, [pc, #172]	@ (8005f94 <HAL_ADC_Start_IT+0x1b0>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d015      	beq.n	8005f16 <HAL_ADC_Start_IT+0x132>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a2a      	ldr	r2, [pc, #168]	@ (8005f98 <HAL_ADC_Start_IT+0x1b4>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d105      	bne.n	8005f00 <HAL_ADC_Start_IT+0x11c>
 8005ef4:	4b26      	ldr	r3, [pc, #152]	@ (8005f90 <HAL_ADC_Start_IT+0x1ac>)
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	f003 031f 	and.w	r3, r3, #31
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d00a      	beq.n	8005f16 <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a25      	ldr	r2, [pc, #148]	@ (8005f9c <HAL_ADC_Start_IT+0x1b8>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d136      	bne.n	8005f78 <HAL_ADC_Start_IT+0x194>
 8005f0a:	4b21      	ldr	r3, [pc, #132]	@ (8005f90 <HAL_ADC_Start_IT+0x1ac>)
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	f003 0310 	and.w	r3, r3, #16
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d130      	bne.n	8005f78 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d129      	bne.n	8005f78 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	689a      	ldr	r2, [r3, #8]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005f32:	609a      	str	r2, [r3, #8]
 8005f34:	e020      	b.n	8005f78 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a16      	ldr	r2, [pc, #88]	@ (8005f94 <HAL_ADC_Start_IT+0x1b0>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d11b      	bne.n	8005f78 <HAL_ADC_Start_IT+0x194>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d114      	bne.n	8005f78 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	689a      	ldr	r2, [r3, #8]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005f5c:	609a      	str	r2, [r3, #8]
 8005f5e:	e00b      	b.n	8005f78 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f64:	f043 0210 	orr.w	r2, r3, #16
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f70:	f043 0201 	orr.w	r2, r3, #1
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3714      	adds	r7, #20
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr
 8005f86:	bf00      	nop
 8005f88:	20000044 	.word	0x20000044
 8005f8c:	431bde83 	.word	0x431bde83
 8005f90:	40012300 	.word	0x40012300
 8005f94:	40012000 	.word	0x40012000
 8005f98:	40012100 	.word	0x40012100
 8005f9c:	40012200 	.word	0x40012200

08005fa0 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b086      	sub	sp, #24
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	617b      	str	r3, [r7, #20]
 8005fac:	2300      	movs	r3, #0
 8005fae:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f003 0302 	and.w	r3, r3, #2
 8005fc6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	f003 0320 	and.w	r3, r3, #32
 8005fce:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d049      	beq.n	800606a <HAL_ADC_IRQHandler+0xca>
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d046      	beq.n	800606a <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fe0:	f003 0310 	and.w	r3, r3, #16
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d105      	bne.n	8005ff4 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fec:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d12b      	bne.n	800605a <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006006:	2b00      	cmp	r3, #0
 8006008:	d127      	bne.n	800605a <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006010:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006014:	2b00      	cmp	r3, #0
 8006016:	d006      	beq.n	8006026 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006022:	2b00      	cmp	r3, #0
 8006024:	d119      	bne.n	800605a <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	685a      	ldr	r2, [r3, #4]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f022 0220 	bic.w	r2, r2, #32
 8006034:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800603a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006046:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800604a:	2b00      	cmp	r3, #0
 800604c:	d105      	bne.n	800605a <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006052:	f043 0201 	orr.w	r2, r3, #1
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f7fd fe62 	bl	8003d24 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f06f 0212 	mvn.w	r2, #18
 8006068:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f003 0304 	and.w	r3, r3, #4
 8006070:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006078:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d057      	beq.n	8006130 <HAL_ADC_IRQHandler+0x190>
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d054      	beq.n	8006130 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800608a:	f003 0310 	and.w	r3, r3, #16
 800608e:	2b00      	cmp	r3, #0
 8006090:	d105      	bne.n	800609e <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006096:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d139      	bne.n	8006120 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060b2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d006      	beq.n	80060c8 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d12b      	bne.n	8006120 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d124      	bne.n	8006120 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d11d      	bne.n	8006120 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d119      	bne.n	8006120 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	685a      	ldr	r2, [r3, #4]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80060fa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006100:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800610c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006110:	2b00      	cmp	r3, #0
 8006112:	d105      	bne.n	8006120 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006118:	f043 0201 	orr.w	r2, r3, #1
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f000 fa9d 	bl	8006660 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f06f 020c 	mvn.w	r2, #12
 800612e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f003 0301 	and.w	r3, r3, #1
 8006136:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800613e:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d017      	beq.n	8006176 <HAL_ADC_IRQHandler+0x1d6>
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d014      	beq.n	8006176 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f003 0301 	and.w	r3, r3, #1
 8006156:	2b01      	cmp	r3, #1
 8006158:	d10d      	bne.n	8006176 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800615e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 f837 	bl	80061da <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f06f 0201 	mvn.w	r2, #1
 8006174:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f003 0320 	and.w	r3, r3, #32
 800617c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006184:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d015      	beq.n	80061b8 <HAL_ADC_IRQHandler+0x218>
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d012      	beq.n	80061b8 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006196:	f043 0202 	orr.w	r2, r3, #2
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f06f 0220 	mvn.w	r2, #32
 80061a6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f000 f820 	bl	80061ee <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f06f 0220 	mvn.w	r2, #32
 80061b6:	601a      	str	r2, [r3, #0]
  }
}
 80061b8:	bf00      	nop
 80061ba:	3718      	adds	r7, #24
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80061c0:	b480      	push	{r7}
 80061c2:	b083      	sub	sp, #12
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	370c      	adds	r7, #12
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr

080061da <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80061da:	b480      	push	{r7}
 80061dc:	b083      	sub	sp, #12
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80061e2:	bf00      	nop
 80061e4:	370c      	adds	r7, #12
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr

080061ee <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80061ee:	b480      	push	{r7}
 80061f0:	b083      	sub	sp, #12
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80061f6:	bf00      	nop
 80061f8:	370c      	adds	r7, #12
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr
	...

08006204 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006204:	b480      	push	{r7}
 8006206:	b085      	sub	sp, #20
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800620e:	2300      	movs	r3, #0
 8006210:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006218:	2b01      	cmp	r3, #1
 800621a:	d101      	bne.n	8006220 <HAL_ADC_ConfigChannel+0x1c>
 800621c:	2302      	movs	r3, #2
 800621e:	e113      	b.n	8006448 <HAL_ADC_ConfigChannel+0x244>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2b09      	cmp	r3, #9
 800622e:	d925      	bls.n	800627c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	68d9      	ldr	r1, [r3, #12]
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	b29b      	uxth	r3, r3
 800623c:	461a      	mov	r2, r3
 800623e:	4613      	mov	r3, r2
 8006240:	005b      	lsls	r3, r3, #1
 8006242:	4413      	add	r3, r2
 8006244:	3b1e      	subs	r3, #30
 8006246:	2207      	movs	r2, #7
 8006248:	fa02 f303 	lsl.w	r3, r2, r3
 800624c:	43da      	mvns	r2, r3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	400a      	ands	r2, r1
 8006254:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	68d9      	ldr	r1, [r3, #12]
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	689a      	ldr	r2, [r3, #8]
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	b29b      	uxth	r3, r3
 8006266:	4618      	mov	r0, r3
 8006268:	4603      	mov	r3, r0
 800626a:	005b      	lsls	r3, r3, #1
 800626c:	4403      	add	r3, r0
 800626e:	3b1e      	subs	r3, #30
 8006270:	409a      	lsls	r2, r3
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	430a      	orrs	r2, r1
 8006278:	60da      	str	r2, [r3, #12]
 800627a:	e022      	b.n	80062c2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	6919      	ldr	r1, [r3, #16]
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	b29b      	uxth	r3, r3
 8006288:	461a      	mov	r2, r3
 800628a:	4613      	mov	r3, r2
 800628c:	005b      	lsls	r3, r3, #1
 800628e:	4413      	add	r3, r2
 8006290:	2207      	movs	r2, #7
 8006292:	fa02 f303 	lsl.w	r3, r2, r3
 8006296:	43da      	mvns	r2, r3
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	400a      	ands	r2, r1
 800629e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	6919      	ldr	r1, [r3, #16]
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	689a      	ldr	r2, [r3, #8]
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	4618      	mov	r0, r3
 80062b2:	4603      	mov	r3, r0
 80062b4:	005b      	lsls	r3, r3, #1
 80062b6:	4403      	add	r3, r0
 80062b8:	409a      	lsls	r2, r3
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	430a      	orrs	r2, r1
 80062c0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	2b06      	cmp	r3, #6
 80062c8:	d824      	bhi.n	8006314 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	685a      	ldr	r2, [r3, #4]
 80062d4:	4613      	mov	r3, r2
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	4413      	add	r3, r2
 80062da:	3b05      	subs	r3, #5
 80062dc:	221f      	movs	r2, #31
 80062de:	fa02 f303 	lsl.w	r3, r2, r3
 80062e2:	43da      	mvns	r2, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	400a      	ands	r2, r1
 80062ea:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	4618      	mov	r0, r3
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	685a      	ldr	r2, [r3, #4]
 80062fe:	4613      	mov	r3, r2
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	4413      	add	r3, r2
 8006304:	3b05      	subs	r3, #5
 8006306:	fa00 f203 	lsl.w	r2, r0, r3
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	430a      	orrs	r2, r1
 8006310:	635a      	str	r2, [r3, #52]	@ 0x34
 8006312:	e04c      	b.n	80063ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	2b0c      	cmp	r3, #12
 800631a:	d824      	bhi.n	8006366 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	685a      	ldr	r2, [r3, #4]
 8006326:	4613      	mov	r3, r2
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	4413      	add	r3, r2
 800632c:	3b23      	subs	r3, #35	@ 0x23
 800632e:	221f      	movs	r2, #31
 8006330:	fa02 f303 	lsl.w	r3, r2, r3
 8006334:	43da      	mvns	r2, r3
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	400a      	ands	r2, r1
 800633c:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	b29b      	uxth	r3, r3
 800634a:	4618      	mov	r0, r3
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	685a      	ldr	r2, [r3, #4]
 8006350:	4613      	mov	r3, r2
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	4413      	add	r3, r2
 8006356:	3b23      	subs	r3, #35	@ 0x23
 8006358:	fa00 f203 	lsl.w	r2, r0, r3
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	430a      	orrs	r2, r1
 8006362:	631a      	str	r2, [r3, #48]	@ 0x30
 8006364:	e023      	b.n	80063ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	685a      	ldr	r2, [r3, #4]
 8006370:	4613      	mov	r3, r2
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	4413      	add	r3, r2
 8006376:	3b41      	subs	r3, #65	@ 0x41
 8006378:	221f      	movs	r2, #31
 800637a:	fa02 f303 	lsl.w	r3, r2, r3
 800637e:	43da      	mvns	r2, r3
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	400a      	ands	r2, r1
 8006386:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	b29b      	uxth	r3, r3
 8006394:	4618      	mov	r0, r3
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	685a      	ldr	r2, [r3, #4]
 800639a:	4613      	mov	r3, r2
 800639c:	009b      	lsls	r3, r3, #2
 800639e:	4413      	add	r3, r2
 80063a0:	3b41      	subs	r3, #65	@ 0x41
 80063a2:	fa00 f203 	lsl.w	r2, r0, r3
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	430a      	orrs	r2, r1
 80063ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80063ae:	4b29      	ldr	r3, [pc, #164]	@ (8006454 <HAL_ADC_ConfigChannel+0x250>)
 80063b0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a28      	ldr	r2, [pc, #160]	@ (8006458 <HAL_ADC_ConfigChannel+0x254>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d10f      	bne.n	80063dc <HAL_ADC_ConfigChannel+0x1d8>
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2b12      	cmp	r3, #18
 80063c2:	d10b      	bne.n	80063dc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a1d      	ldr	r2, [pc, #116]	@ (8006458 <HAL_ADC_ConfigChannel+0x254>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d12b      	bne.n	800643e <HAL_ADC_ConfigChannel+0x23a>
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a1c      	ldr	r2, [pc, #112]	@ (800645c <HAL_ADC_ConfigChannel+0x258>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d003      	beq.n	80063f8 <HAL_ADC_ConfigChannel+0x1f4>
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2b11      	cmp	r3, #17
 80063f6:	d122      	bne.n	800643e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a11      	ldr	r2, [pc, #68]	@ (800645c <HAL_ADC_ConfigChannel+0x258>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d111      	bne.n	800643e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800641a:	4b11      	ldr	r3, [pc, #68]	@ (8006460 <HAL_ADC_ConfigChannel+0x25c>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a11      	ldr	r2, [pc, #68]	@ (8006464 <HAL_ADC_ConfigChannel+0x260>)
 8006420:	fba2 2303 	umull	r2, r3, r2, r3
 8006424:	0c9a      	lsrs	r2, r3, #18
 8006426:	4613      	mov	r3, r2
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	4413      	add	r3, r2
 800642c:	005b      	lsls	r3, r3, #1
 800642e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006430:	e002      	b.n	8006438 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	3b01      	subs	r3, #1
 8006436:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d1f9      	bne.n	8006432 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006446:	2300      	movs	r3, #0
}
 8006448:	4618      	mov	r0, r3
 800644a:	3714      	adds	r7, #20
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr
 8006454:	40012300 	.word	0x40012300
 8006458:	40012000 	.word	0x40012000
 800645c:	10000012 	.word	0x10000012
 8006460:	20000044 	.word	0x20000044
 8006464:	431bde83 	.word	0x431bde83

08006468 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006468:	b480      	push	{r7}
 800646a:	b085      	sub	sp, #20
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006470:	4b79      	ldr	r3, [pc, #484]	@ (8006658 <ADC_Init+0x1f0>)
 8006472:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	685a      	ldr	r2, [r3, #4]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	431a      	orrs	r2, r3
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	685a      	ldr	r2, [r3, #4]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800649c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	6859      	ldr	r1, [r3, #4]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	691b      	ldr	r3, [r3, #16]
 80064a8:	021a      	lsls	r2, r3, #8
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	430a      	orrs	r2, r1
 80064b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	685a      	ldr	r2, [r3, #4]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80064c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	6859      	ldr	r1, [r3, #4]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	689a      	ldr	r2, [r3, #8]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	430a      	orrs	r2, r1
 80064d2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	689a      	ldr	r2, [r3, #8]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80064e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	6899      	ldr	r1, [r3, #8]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	68da      	ldr	r2, [r3, #12]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	430a      	orrs	r2, r1
 80064f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064fa:	4a58      	ldr	r2, [pc, #352]	@ (800665c <ADC_Init+0x1f4>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d022      	beq.n	8006546 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	689a      	ldr	r2, [r3, #8]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800650e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	6899      	ldr	r1, [r3, #8]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	430a      	orrs	r2, r1
 8006520:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	689a      	ldr	r2, [r3, #8]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006530:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	6899      	ldr	r1, [r3, #8]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	430a      	orrs	r2, r1
 8006542:	609a      	str	r2, [r3, #8]
 8006544:	e00f      	b.n	8006566 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	689a      	ldr	r2, [r3, #8]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006554:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	689a      	ldr	r2, [r3, #8]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006564:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	689a      	ldr	r2, [r3, #8]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f022 0202 	bic.w	r2, r2, #2
 8006574:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	6899      	ldr	r1, [r3, #8]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	7e1b      	ldrb	r3, [r3, #24]
 8006580:	005a      	lsls	r2, r3, #1
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	430a      	orrs	r2, r1
 8006588:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d01b      	beq.n	80065cc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	685a      	ldr	r2, [r3, #4]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80065a2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	685a      	ldr	r2, [r3, #4]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80065b2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	6859      	ldr	r1, [r3, #4]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065be:	3b01      	subs	r3, #1
 80065c0:	035a      	lsls	r2, r3, #13
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	430a      	orrs	r2, r1
 80065c8:	605a      	str	r2, [r3, #4]
 80065ca:	e007      	b.n	80065dc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	685a      	ldr	r2, [r3, #4]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80065da:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80065ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	69db      	ldr	r3, [r3, #28]
 80065f6:	3b01      	subs	r3, #1
 80065f8:	051a      	lsls	r2, r3, #20
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	430a      	orrs	r2, r1
 8006600:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	689a      	ldr	r2, [r3, #8]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006610:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	6899      	ldr	r1, [r3, #8]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800661e:	025a      	lsls	r2, r3, #9
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	430a      	orrs	r2, r1
 8006626:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	689a      	ldr	r2, [r3, #8]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006636:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	6899      	ldr	r1, [r3, #8]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	695b      	ldr	r3, [r3, #20]
 8006642:	029a      	lsls	r2, r3, #10
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	430a      	orrs	r2, r1
 800664a:	609a      	str	r2, [r3, #8]
}
 800664c:	bf00      	nop
 800664e:	3714      	adds	r7, #20
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr
 8006658:	40012300 	.word	0x40012300
 800665c:	0f000001 	.word	0x0f000001

08006660 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006660:	b480      	push	{r7}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8006668:	bf00      	nop
 800666a:	370c      	adds	r7, #12
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr

08006674 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006674:	b480      	push	{r7}
 8006676:	b085      	sub	sp, #20
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f003 0307 	and.w	r3, r3, #7
 8006682:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006684:	4b0c      	ldr	r3, [pc, #48]	@ (80066b8 <__NVIC_SetPriorityGrouping+0x44>)
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800668a:	68ba      	ldr	r2, [r7, #8]
 800668c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006690:	4013      	ands	r3, r2
 8006692:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800669c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80066a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80066a6:	4a04      	ldr	r2, [pc, #16]	@ (80066b8 <__NVIC_SetPriorityGrouping+0x44>)
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	60d3      	str	r3, [r2, #12]
}
 80066ac:	bf00      	nop
 80066ae:	3714      	adds	r7, #20
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr
 80066b8:	e000ed00 	.word	0xe000ed00

080066bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80066bc:	b480      	push	{r7}
 80066be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80066c0:	4b04      	ldr	r3, [pc, #16]	@ (80066d4 <__NVIC_GetPriorityGrouping+0x18>)
 80066c2:	68db      	ldr	r3, [r3, #12]
 80066c4:	0a1b      	lsrs	r3, r3, #8
 80066c6:	f003 0307 	and.w	r3, r3, #7
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr
 80066d4:	e000ed00 	.word	0xe000ed00

080066d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	4603      	mov	r3, r0
 80066e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	db0b      	blt.n	8006702 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80066ea:	79fb      	ldrb	r3, [r7, #7]
 80066ec:	f003 021f 	and.w	r2, r3, #31
 80066f0:	4907      	ldr	r1, [pc, #28]	@ (8006710 <__NVIC_EnableIRQ+0x38>)
 80066f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066f6:	095b      	lsrs	r3, r3, #5
 80066f8:	2001      	movs	r0, #1
 80066fa:	fa00 f202 	lsl.w	r2, r0, r2
 80066fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006702:	bf00      	nop
 8006704:	370c      	adds	r7, #12
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop
 8006710:	e000e100 	.word	0xe000e100

08006714 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	4603      	mov	r3, r0
 800671c:	6039      	str	r1, [r7, #0]
 800671e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006724:	2b00      	cmp	r3, #0
 8006726:	db0a      	blt.n	800673e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	b2da      	uxtb	r2, r3
 800672c:	490c      	ldr	r1, [pc, #48]	@ (8006760 <__NVIC_SetPriority+0x4c>)
 800672e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006732:	0112      	lsls	r2, r2, #4
 8006734:	b2d2      	uxtb	r2, r2
 8006736:	440b      	add	r3, r1
 8006738:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800673c:	e00a      	b.n	8006754 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	b2da      	uxtb	r2, r3
 8006742:	4908      	ldr	r1, [pc, #32]	@ (8006764 <__NVIC_SetPriority+0x50>)
 8006744:	79fb      	ldrb	r3, [r7, #7]
 8006746:	f003 030f 	and.w	r3, r3, #15
 800674a:	3b04      	subs	r3, #4
 800674c:	0112      	lsls	r2, r2, #4
 800674e:	b2d2      	uxtb	r2, r2
 8006750:	440b      	add	r3, r1
 8006752:	761a      	strb	r2, [r3, #24]
}
 8006754:	bf00      	nop
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr
 8006760:	e000e100 	.word	0xe000e100
 8006764:	e000ed00 	.word	0xe000ed00

08006768 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006768:	b480      	push	{r7}
 800676a:	b089      	sub	sp, #36	@ 0x24
 800676c:	af00      	add	r7, sp, #0
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f003 0307 	and.w	r3, r3, #7
 800677a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	f1c3 0307 	rsb	r3, r3, #7
 8006782:	2b04      	cmp	r3, #4
 8006784:	bf28      	it	cs
 8006786:	2304      	movcs	r3, #4
 8006788:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800678a:	69fb      	ldr	r3, [r7, #28]
 800678c:	3304      	adds	r3, #4
 800678e:	2b06      	cmp	r3, #6
 8006790:	d902      	bls.n	8006798 <NVIC_EncodePriority+0x30>
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	3b03      	subs	r3, #3
 8006796:	e000      	b.n	800679a <NVIC_EncodePriority+0x32>
 8006798:	2300      	movs	r3, #0
 800679a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800679c:	f04f 32ff 	mov.w	r2, #4294967295
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	fa02 f303 	lsl.w	r3, r2, r3
 80067a6:	43da      	mvns	r2, r3
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	401a      	ands	r2, r3
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80067b0:	f04f 31ff 	mov.w	r1, #4294967295
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	fa01 f303 	lsl.w	r3, r1, r3
 80067ba:	43d9      	mvns	r1, r3
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80067c0:	4313      	orrs	r3, r2
         );
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3724      	adds	r7, #36	@ 0x24
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr
	...

080067d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b082      	sub	sp, #8
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	3b01      	subs	r3, #1
 80067dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80067e0:	d301      	bcc.n	80067e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80067e2:	2301      	movs	r3, #1
 80067e4:	e00f      	b.n	8006806 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80067e6:	4a0a      	ldr	r2, [pc, #40]	@ (8006810 <SysTick_Config+0x40>)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	3b01      	subs	r3, #1
 80067ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80067ee:	210f      	movs	r1, #15
 80067f0:	f04f 30ff 	mov.w	r0, #4294967295
 80067f4:	f7ff ff8e 	bl	8006714 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80067f8:	4b05      	ldr	r3, [pc, #20]	@ (8006810 <SysTick_Config+0x40>)
 80067fa:	2200      	movs	r2, #0
 80067fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80067fe:	4b04      	ldr	r3, [pc, #16]	@ (8006810 <SysTick_Config+0x40>)
 8006800:	2207      	movs	r2, #7
 8006802:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3708      	adds	r7, #8
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	e000e010 	.word	0xe000e010

08006814 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b082      	sub	sp, #8
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f7ff ff29 	bl	8006674 <__NVIC_SetPriorityGrouping>
}
 8006822:	bf00      	nop
 8006824:	3708      	adds	r7, #8
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}

0800682a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800682a:	b580      	push	{r7, lr}
 800682c:	b086      	sub	sp, #24
 800682e:	af00      	add	r7, sp, #0
 8006830:	4603      	mov	r3, r0
 8006832:	60b9      	str	r1, [r7, #8]
 8006834:	607a      	str	r2, [r7, #4]
 8006836:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006838:	2300      	movs	r3, #0
 800683a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800683c:	f7ff ff3e 	bl	80066bc <__NVIC_GetPriorityGrouping>
 8006840:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	68b9      	ldr	r1, [r7, #8]
 8006846:	6978      	ldr	r0, [r7, #20]
 8006848:	f7ff ff8e 	bl	8006768 <NVIC_EncodePriority>
 800684c:	4602      	mov	r2, r0
 800684e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006852:	4611      	mov	r1, r2
 8006854:	4618      	mov	r0, r3
 8006856:	f7ff ff5d 	bl	8006714 <__NVIC_SetPriority>
}
 800685a:	bf00      	nop
 800685c:	3718      	adds	r7, #24
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}

08006862 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006862:	b580      	push	{r7, lr}
 8006864:	b082      	sub	sp, #8
 8006866:	af00      	add	r7, sp, #0
 8006868:	4603      	mov	r3, r0
 800686a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800686c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006870:	4618      	mov	r0, r3
 8006872:	f7ff ff31 	bl	80066d8 <__NVIC_EnableIRQ>
}
 8006876:	bf00      	nop
 8006878:	3708      	adds	r7, #8
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}

0800687e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800687e:	b580      	push	{r7, lr}
 8006880:	b082      	sub	sp, #8
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f7ff ffa2 	bl	80067d0 <SysTick_Config>
 800688c:	4603      	mov	r3, r0
}
 800688e:	4618      	mov	r0, r3
 8006890:	3708      	adds	r7, #8
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}

08006896 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006896:	b580      	push	{r7, lr}
 8006898:	b084      	sub	sp, #16
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068a2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80068a4:	f7ff fa2a 	bl	8005cfc <HAL_GetTick>
 80068a8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	d008      	beq.n	80068c8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2280      	movs	r2, #128	@ 0x80
 80068ba:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	e052      	b.n	800696e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f022 0216 	bic.w	r2, r2, #22
 80068d6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	695a      	ldr	r2, [r3, #20]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80068e6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d103      	bne.n	80068f8 <HAL_DMA_Abort+0x62>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d007      	beq.n	8006908 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f022 0208 	bic.w	r2, r2, #8
 8006906:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f022 0201 	bic.w	r2, r2, #1
 8006916:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006918:	e013      	b.n	8006942 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800691a:	f7ff f9ef 	bl	8005cfc <HAL_GetTick>
 800691e:	4602      	mov	r2, r0
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	1ad3      	subs	r3, r2, r3
 8006924:	2b05      	cmp	r3, #5
 8006926:	d90c      	bls.n	8006942 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2220      	movs	r2, #32
 800692c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2203      	movs	r2, #3
 8006932:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800693e:	2303      	movs	r3, #3
 8006940:	e015      	b.n	800696e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f003 0301 	and.w	r3, r3, #1
 800694c:	2b00      	cmp	r3, #0
 800694e:	d1e4      	bne.n	800691a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006954:	223f      	movs	r2, #63	@ 0x3f
 8006956:	409a      	lsls	r2, r3
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	3710      	adds	r7, #16
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}

08006976 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006976:	b480      	push	{r7}
 8006978:	b083      	sub	sp, #12
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006984:	b2db      	uxtb	r3, r3
 8006986:	2b02      	cmp	r3, #2
 8006988:	d004      	beq.n	8006994 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2280      	movs	r2, #128	@ 0x80
 800698e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	e00c      	b.n	80069ae <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2205      	movs	r2, #5
 8006998:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f022 0201 	bic.w	r2, r2, #1
 80069aa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80069ac:	2300      	movs	r3, #0
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	370c      	adds	r7, #12
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr
	...

080069bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80069bc:	b480      	push	{r7}
 80069be:	b089      	sub	sp, #36	@ 0x24
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80069c6:	2300      	movs	r3, #0
 80069c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80069ca:	2300      	movs	r3, #0
 80069cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80069ce:	2300      	movs	r3, #0
 80069d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80069d2:	2300      	movs	r3, #0
 80069d4:	61fb      	str	r3, [r7, #28]
 80069d6:	e165      	b.n	8006ca4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80069d8:	2201      	movs	r2, #1
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	fa02 f303 	lsl.w	r3, r2, r3
 80069e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	697a      	ldr	r2, [r7, #20]
 80069e8:	4013      	ands	r3, r2
 80069ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80069ec:	693a      	ldr	r2, [r7, #16]
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	f040 8154 	bne.w	8006c9e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	f003 0303 	and.w	r3, r3, #3
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d005      	beq.n	8006a0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006a0a:	2b02      	cmp	r3, #2
 8006a0c:	d130      	bne.n	8006a70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	005b      	lsls	r3, r3, #1
 8006a18:	2203      	movs	r2, #3
 8006a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a1e:	43db      	mvns	r3, r3
 8006a20:	69ba      	ldr	r2, [r7, #24]
 8006a22:	4013      	ands	r3, r2
 8006a24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	68da      	ldr	r2, [r3, #12]
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	005b      	lsls	r3, r3, #1
 8006a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a32:	69ba      	ldr	r2, [r7, #24]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	69ba      	ldr	r2, [r7, #24]
 8006a3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006a44:	2201      	movs	r2, #1
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	fa02 f303 	lsl.w	r3, r2, r3
 8006a4c:	43db      	mvns	r3, r3
 8006a4e:	69ba      	ldr	r2, [r7, #24]
 8006a50:	4013      	ands	r3, r2
 8006a52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	091b      	lsrs	r3, r3, #4
 8006a5a:	f003 0201 	and.w	r2, r3, #1
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	fa02 f303 	lsl.w	r3, r2, r3
 8006a64:	69ba      	ldr	r2, [r7, #24]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	69ba      	ldr	r2, [r7, #24]
 8006a6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	f003 0303 	and.w	r3, r3, #3
 8006a78:	2b03      	cmp	r3, #3
 8006a7a:	d017      	beq.n	8006aac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	005b      	lsls	r3, r3, #1
 8006a86:	2203      	movs	r2, #3
 8006a88:	fa02 f303 	lsl.w	r3, r2, r3
 8006a8c:	43db      	mvns	r3, r3
 8006a8e:	69ba      	ldr	r2, [r7, #24]
 8006a90:	4013      	ands	r3, r2
 8006a92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	689a      	ldr	r2, [r3, #8]
 8006a98:	69fb      	ldr	r3, [r7, #28]
 8006a9a:	005b      	lsls	r3, r3, #1
 8006a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa0:	69ba      	ldr	r2, [r7, #24]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	69ba      	ldr	r2, [r7, #24]
 8006aaa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	f003 0303 	and.w	r3, r3, #3
 8006ab4:	2b02      	cmp	r3, #2
 8006ab6:	d123      	bne.n	8006b00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	08da      	lsrs	r2, r3, #3
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	3208      	adds	r2, #8
 8006ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	f003 0307 	and.w	r3, r3, #7
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	220f      	movs	r2, #15
 8006ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ad4:	43db      	mvns	r3, r3
 8006ad6:	69ba      	ldr	r2, [r7, #24]
 8006ad8:	4013      	ands	r3, r2
 8006ada:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	691a      	ldr	r2, [r3, #16]
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	f003 0307 	and.w	r3, r3, #7
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8006aec:	69ba      	ldr	r2, [r7, #24]
 8006aee:	4313      	orrs	r3, r2
 8006af0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006af2:	69fb      	ldr	r3, [r7, #28]
 8006af4:	08da      	lsrs	r2, r3, #3
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	3208      	adds	r2, #8
 8006afa:	69b9      	ldr	r1, [r7, #24]
 8006afc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	005b      	lsls	r3, r3, #1
 8006b0a:	2203      	movs	r2, #3
 8006b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b10:	43db      	mvns	r3, r3
 8006b12:	69ba      	ldr	r2, [r7, #24]
 8006b14:	4013      	ands	r3, r2
 8006b16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	f003 0203 	and.w	r2, r3, #3
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	005b      	lsls	r3, r3, #1
 8006b24:	fa02 f303 	lsl.w	r3, r2, r3
 8006b28:	69ba      	ldr	r2, [r7, #24]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	69ba      	ldr	r2, [r7, #24]
 8006b32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	f000 80ae 	beq.w	8006c9e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b42:	2300      	movs	r3, #0
 8006b44:	60fb      	str	r3, [r7, #12]
 8006b46:	4b5d      	ldr	r3, [pc, #372]	@ (8006cbc <HAL_GPIO_Init+0x300>)
 8006b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b4a:	4a5c      	ldr	r2, [pc, #368]	@ (8006cbc <HAL_GPIO_Init+0x300>)
 8006b4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006b50:	6453      	str	r3, [r2, #68]	@ 0x44
 8006b52:	4b5a      	ldr	r3, [pc, #360]	@ (8006cbc <HAL_GPIO_Init+0x300>)
 8006b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b5a:	60fb      	str	r3, [r7, #12]
 8006b5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006b5e:	4a58      	ldr	r2, [pc, #352]	@ (8006cc0 <HAL_GPIO_Init+0x304>)
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	089b      	lsrs	r3, r3, #2
 8006b64:	3302      	adds	r3, #2
 8006b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	f003 0303 	and.w	r3, r3, #3
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	220f      	movs	r2, #15
 8006b76:	fa02 f303 	lsl.w	r3, r2, r3
 8006b7a:	43db      	mvns	r3, r3
 8006b7c:	69ba      	ldr	r2, [r7, #24]
 8006b7e:	4013      	ands	r3, r2
 8006b80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a4f      	ldr	r2, [pc, #316]	@ (8006cc4 <HAL_GPIO_Init+0x308>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d025      	beq.n	8006bd6 <HAL_GPIO_Init+0x21a>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4a4e      	ldr	r2, [pc, #312]	@ (8006cc8 <HAL_GPIO_Init+0x30c>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d01f      	beq.n	8006bd2 <HAL_GPIO_Init+0x216>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4a4d      	ldr	r2, [pc, #308]	@ (8006ccc <HAL_GPIO_Init+0x310>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d019      	beq.n	8006bce <HAL_GPIO_Init+0x212>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a4c      	ldr	r2, [pc, #304]	@ (8006cd0 <HAL_GPIO_Init+0x314>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d013      	beq.n	8006bca <HAL_GPIO_Init+0x20e>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4a4b      	ldr	r2, [pc, #300]	@ (8006cd4 <HAL_GPIO_Init+0x318>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d00d      	beq.n	8006bc6 <HAL_GPIO_Init+0x20a>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4a4a      	ldr	r2, [pc, #296]	@ (8006cd8 <HAL_GPIO_Init+0x31c>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d007      	beq.n	8006bc2 <HAL_GPIO_Init+0x206>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4a49      	ldr	r2, [pc, #292]	@ (8006cdc <HAL_GPIO_Init+0x320>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d101      	bne.n	8006bbe <HAL_GPIO_Init+0x202>
 8006bba:	2306      	movs	r3, #6
 8006bbc:	e00c      	b.n	8006bd8 <HAL_GPIO_Init+0x21c>
 8006bbe:	2307      	movs	r3, #7
 8006bc0:	e00a      	b.n	8006bd8 <HAL_GPIO_Init+0x21c>
 8006bc2:	2305      	movs	r3, #5
 8006bc4:	e008      	b.n	8006bd8 <HAL_GPIO_Init+0x21c>
 8006bc6:	2304      	movs	r3, #4
 8006bc8:	e006      	b.n	8006bd8 <HAL_GPIO_Init+0x21c>
 8006bca:	2303      	movs	r3, #3
 8006bcc:	e004      	b.n	8006bd8 <HAL_GPIO_Init+0x21c>
 8006bce:	2302      	movs	r3, #2
 8006bd0:	e002      	b.n	8006bd8 <HAL_GPIO_Init+0x21c>
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e000      	b.n	8006bd8 <HAL_GPIO_Init+0x21c>
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	69fa      	ldr	r2, [r7, #28]
 8006bda:	f002 0203 	and.w	r2, r2, #3
 8006bde:	0092      	lsls	r2, r2, #2
 8006be0:	4093      	lsls	r3, r2
 8006be2:	69ba      	ldr	r2, [r7, #24]
 8006be4:	4313      	orrs	r3, r2
 8006be6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006be8:	4935      	ldr	r1, [pc, #212]	@ (8006cc0 <HAL_GPIO_Init+0x304>)
 8006bea:	69fb      	ldr	r3, [r7, #28]
 8006bec:	089b      	lsrs	r3, r3, #2
 8006bee:	3302      	adds	r3, #2
 8006bf0:	69ba      	ldr	r2, [r7, #24]
 8006bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006bf6:	4b3a      	ldr	r3, [pc, #232]	@ (8006ce0 <HAL_GPIO_Init+0x324>)
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	43db      	mvns	r3, r3
 8006c00:	69ba      	ldr	r2, [r7, #24]
 8006c02:	4013      	ands	r3, r2
 8006c04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d003      	beq.n	8006c1a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8006c12:	69ba      	ldr	r2, [r7, #24]
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006c1a:	4a31      	ldr	r2, [pc, #196]	@ (8006ce0 <HAL_GPIO_Init+0x324>)
 8006c1c:	69bb      	ldr	r3, [r7, #24]
 8006c1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006c20:	4b2f      	ldr	r3, [pc, #188]	@ (8006ce0 <HAL_GPIO_Init+0x324>)
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	43db      	mvns	r3, r3
 8006c2a:	69ba      	ldr	r2, [r7, #24]
 8006c2c:	4013      	ands	r3, r2
 8006c2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d003      	beq.n	8006c44 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8006c3c:	69ba      	ldr	r2, [r7, #24]
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	4313      	orrs	r3, r2
 8006c42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006c44:	4a26      	ldr	r2, [pc, #152]	@ (8006ce0 <HAL_GPIO_Init+0x324>)
 8006c46:	69bb      	ldr	r3, [r7, #24]
 8006c48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006c4a:	4b25      	ldr	r3, [pc, #148]	@ (8006ce0 <HAL_GPIO_Init+0x324>)
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	43db      	mvns	r3, r3
 8006c54:	69ba      	ldr	r2, [r7, #24]
 8006c56:	4013      	ands	r3, r2
 8006c58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d003      	beq.n	8006c6e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8006c66:	69ba      	ldr	r2, [r7, #24]
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006c6e:	4a1c      	ldr	r2, [pc, #112]	@ (8006ce0 <HAL_GPIO_Init+0x324>)
 8006c70:	69bb      	ldr	r3, [r7, #24]
 8006c72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006c74:	4b1a      	ldr	r3, [pc, #104]	@ (8006ce0 <HAL_GPIO_Init+0x324>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	43db      	mvns	r3, r3
 8006c7e:	69ba      	ldr	r2, [r7, #24]
 8006c80:	4013      	ands	r3, r2
 8006c82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d003      	beq.n	8006c98 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006c90:	69ba      	ldr	r2, [r7, #24]
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006c98:	4a11      	ldr	r2, [pc, #68]	@ (8006ce0 <HAL_GPIO_Init+0x324>)
 8006c9a:	69bb      	ldr	r3, [r7, #24]
 8006c9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006c9e:	69fb      	ldr	r3, [r7, #28]
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	61fb      	str	r3, [r7, #28]
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	2b0f      	cmp	r3, #15
 8006ca8:	f67f ae96 	bls.w	80069d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006cac:	bf00      	nop
 8006cae:	bf00      	nop
 8006cb0:	3724      	adds	r7, #36	@ 0x24
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr
 8006cba:	bf00      	nop
 8006cbc:	40023800 	.word	0x40023800
 8006cc0:	40013800 	.word	0x40013800
 8006cc4:	40020000 	.word	0x40020000
 8006cc8:	40020400 	.word	0x40020400
 8006ccc:	40020800 	.word	0x40020800
 8006cd0:	40020c00 	.word	0x40020c00
 8006cd4:	40021000 	.word	0x40021000
 8006cd8:	40021400 	.word	0x40021400
 8006cdc:	40021800 	.word	0x40021800
 8006ce0:	40013c00 	.word	0x40013c00

08006ce4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b085      	sub	sp, #20
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	460b      	mov	r3, r1
 8006cee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	691a      	ldr	r2, [r3, #16]
 8006cf4:	887b      	ldrh	r3, [r7, #2]
 8006cf6:	4013      	ands	r3, r2
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d002      	beq.n	8006d02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	73fb      	strb	r3, [r7, #15]
 8006d00:	e001      	b.n	8006d06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006d02:	2300      	movs	r3, #0
 8006d04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3714      	adds	r7, #20
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	460b      	mov	r3, r1
 8006d1e:	807b      	strh	r3, [r7, #2]
 8006d20:	4613      	mov	r3, r2
 8006d22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006d24:	787b      	ldrb	r3, [r7, #1]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d003      	beq.n	8006d32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006d2a:	887a      	ldrh	r2, [r7, #2]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006d30:	e003      	b.n	8006d3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006d32:	887b      	ldrh	r3, [r7, #2]
 8006d34:	041a      	lsls	r2, r3, #16
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	619a      	str	r2, [r3, #24]
}
 8006d3a:	bf00      	nop
 8006d3c:	370c      	adds	r7, #12
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr

08006d46 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006d46:	b480      	push	{r7}
 8006d48:	b085      	sub	sp, #20
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
 8006d4e:	460b      	mov	r3, r1
 8006d50:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	695b      	ldr	r3, [r3, #20]
 8006d56:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006d58:	887a      	ldrh	r2, [r7, #2]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	4013      	ands	r3, r2
 8006d5e:	041a      	lsls	r2, r3, #16
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	43d9      	mvns	r1, r3
 8006d64:	887b      	ldrh	r3, [r7, #2]
 8006d66:	400b      	ands	r3, r1
 8006d68:	431a      	orrs	r2, r3
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	619a      	str	r2, [r3, #24]
}
 8006d6e:	bf00      	nop
 8006d70:	3714      	adds	r7, #20
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr
	...

08006d7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b084      	sub	sp, #16
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d101      	bne.n	8006d8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e12b      	b.n	8006fe6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d94:	b2db      	uxtb	r3, r3
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d106      	bne.n	8006da8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f7fe fb92 	bl	80054cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2224      	movs	r2, #36	@ 0x24
 8006dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f022 0201 	bic.w	r2, r2, #1
 8006dbe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006dce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006dde:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006de0:	f001 fcf2 	bl	80087c8 <HAL_RCC_GetPCLK1Freq>
 8006de4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	4a81      	ldr	r2, [pc, #516]	@ (8006ff0 <HAL_I2C_Init+0x274>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d807      	bhi.n	8006e00 <HAL_I2C_Init+0x84>
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	4a80      	ldr	r2, [pc, #512]	@ (8006ff4 <HAL_I2C_Init+0x278>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	bf94      	ite	ls
 8006df8:	2301      	movls	r3, #1
 8006dfa:	2300      	movhi	r3, #0
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	e006      	b.n	8006e0e <HAL_I2C_Init+0x92>
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	4a7d      	ldr	r2, [pc, #500]	@ (8006ff8 <HAL_I2C_Init+0x27c>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	bf94      	ite	ls
 8006e08:	2301      	movls	r3, #1
 8006e0a:	2300      	movhi	r3, #0
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d001      	beq.n	8006e16 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	e0e7      	b.n	8006fe6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	4a78      	ldr	r2, [pc, #480]	@ (8006ffc <HAL_I2C_Init+0x280>)
 8006e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e1e:	0c9b      	lsrs	r3, r3, #18
 8006e20:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	68ba      	ldr	r2, [r7, #8]
 8006e32:	430a      	orrs	r2, r1
 8006e34:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	6a1b      	ldr	r3, [r3, #32]
 8006e3c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	4a6a      	ldr	r2, [pc, #424]	@ (8006ff0 <HAL_I2C_Init+0x274>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d802      	bhi.n	8006e50 <HAL_I2C_Init+0xd4>
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	3301      	adds	r3, #1
 8006e4e:	e009      	b.n	8006e64 <HAL_I2C_Init+0xe8>
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006e56:	fb02 f303 	mul.w	r3, r2, r3
 8006e5a:	4a69      	ldr	r2, [pc, #420]	@ (8007000 <HAL_I2C_Init+0x284>)
 8006e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8006e60:	099b      	lsrs	r3, r3, #6
 8006e62:	3301      	adds	r3, #1
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	6812      	ldr	r2, [r2, #0]
 8006e68:	430b      	orrs	r3, r1
 8006e6a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	69db      	ldr	r3, [r3, #28]
 8006e72:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006e76:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	495c      	ldr	r1, [pc, #368]	@ (8006ff0 <HAL_I2C_Init+0x274>)
 8006e80:	428b      	cmp	r3, r1
 8006e82:	d819      	bhi.n	8006eb8 <HAL_I2C_Init+0x13c>
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	1e59      	subs	r1, r3, #1
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	005b      	lsls	r3, r3, #1
 8006e8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006e92:	1c59      	adds	r1, r3, #1
 8006e94:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006e98:	400b      	ands	r3, r1
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d00a      	beq.n	8006eb4 <HAL_I2C_Init+0x138>
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	1e59      	subs	r1, r3, #1
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	005b      	lsls	r3, r3, #1
 8006ea8:	fbb1 f3f3 	udiv	r3, r1, r3
 8006eac:	3301      	adds	r3, #1
 8006eae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006eb2:	e051      	b.n	8006f58 <HAL_I2C_Init+0x1dc>
 8006eb4:	2304      	movs	r3, #4
 8006eb6:	e04f      	b.n	8006f58 <HAL_I2C_Init+0x1dc>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d111      	bne.n	8006ee4 <HAL_I2C_Init+0x168>
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	1e58      	subs	r0, r3, #1
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6859      	ldr	r1, [r3, #4]
 8006ec8:	460b      	mov	r3, r1
 8006eca:	005b      	lsls	r3, r3, #1
 8006ecc:	440b      	add	r3, r1
 8006ece:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	bf0c      	ite	eq
 8006edc:	2301      	moveq	r3, #1
 8006ede:	2300      	movne	r3, #0
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	e012      	b.n	8006f0a <HAL_I2C_Init+0x18e>
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	1e58      	subs	r0, r3, #1
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6859      	ldr	r1, [r3, #4]
 8006eec:	460b      	mov	r3, r1
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	440b      	add	r3, r1
 8006ef2:	0099      	lsls	r1, r3, #2
 8006ef4:	440b      	add	r3, r1
 8006ef6:	fbb0 f3f3 	udiv	r3, r0, r3
 8006efa:	3301      	adds	r3, #1
 8006efc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	bf0c      	ite	eq
 8006f04:	2301      	moveq	r3, #1
 8006f06:	2300      	movne	r3, #0
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d001      	beq.n	8006f12 <HAL_I2C_Init+0x196>
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e022      	b.n	8006f58 <HAL_I2C_Init+0x1dc>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d10e      	bne.n	8006f38 <HAL_I2C_Init+0x1bc>
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	1e58      	subs	r0, r3, #1
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6859      	ldr	r1, [r3, #4]
 8006f22:	460b      	mov	r3, r1
 8006f24:	005b      	lsls	r3, r3, #1
 8006f26:	440b      	add	r3, r1
 8006f28:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f36:	e00f      	b.n	8006f58 <HAL_I2C_Init+0x1dc>
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	1e58      	subs	r0, r3, #1
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6859      	ldr	r1, [r3, #4]
 8006f40:	460b      	mov	r3, r1
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	440b      	add	r3, r1
 8006f46:	0099      	lsls	r1, r3, #2
 8006f48:	440b      	add	r3, r1
 8006f4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f4e:	3301      	adds	r3, #1
 8006f50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f54:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006f58:	6879      	ldr	r1, [r7, #4]
 8006f5a:	6809      	ldr	r1, [r1, #0]
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	69da      	ldr	r2, [r3, #28]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6a1b      	ldr	r3, [r3, #32]
 8006f72:	431a      	orrs	r2, r3
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	430a      	orrs	r2, r1
 8006f7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	689b      	ldr	r3, [r3, #8]
 8006f82:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006f86:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	6911      	ldr	r1, [r2, #16]
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	68d2      	ldr	r2, [r2, #12]
 8006f92:	4311      	orrs	r1, r2
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	6812      	ldr	r2, [r2, #0]
 8006f98:	430b      	orrs	r3, r1
 8006f9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	695a      	ldr	r2, [r3, #20]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	699b      	ldr	r3, [r3, #24]
 8006fae:	431a      	orrs	r2, r3
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	430a      	orrs	r2, r1
 8006fb6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f042 0201 	orr.w	r2, r2, #1
 8006fc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2220      	movs	r2, #32
 8006fd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006fe4:	2300      	movs	r3, #0
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3710      	adds	r7, #16
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	bf00      	nop
 8006ff0:	000186a0 	.word	0x000186a0
 8006ff4:	001e847f 	.word	0x001e847f
 8006ff8:	003d08ff 	.word	0x003d08ff
 8006ffc:	431bde83 	.word	0x431bde83
 8007000:	10624dd3 	.word	0x10624dd3

08007004 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b088      	sub	sp, #32
 8007008:	af02      	add	r7, sp, #8
 800700a:	60f8      	str	r0, [r7, #12]
 800700c:	607a      	str	r2, [r7, #4]
 800700e:	461a      	mov	r2, r3
 8007010:	460b      	mov	r3, r1
 8007012:	817b      	strh	r3, [r7, #10]
 8007014:	4613      	mov	r3, r2
 8007016:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007018:	f7fe fe70 	bl	8005cfc <HAL_GetTick>
 800701c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007024:	b2db      	uxtb	r3, r3
 8007026:	2b20      	cmp	r3, #32
 8007028:	f040 80e0 	bne.w	80071ec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	9300      	str	r3, [sp, #0]
 8007030:	2319      	movs	r3, #25
 8007032:	2201      	movs	r2, #1
 8007034:	4970      	ldr	r1, [pc, #448]	@ (80071f8 <HAL_I2C_Master_Transmit+0x1f4>)
 8007036:	68f8      	ldr	r0, [r7, #12]
 8007038:	f001 f8f6 	bl	8008228 <I2C_WaitOnFlagUntilTimeout>
 800703c:	4603      	mov	r3, r0
 800703e:	2b00      	cmp	r3, #0
 8007040:	d001      	beq.n	8007046 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007042:	2302      	movs	r3, #2
 8007044:	e0d3      	b.n	80071ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800704c:	2b01      	cmp	r3, #1
 800704e:	d101      	bne.n	8007054 <HAL_I2C_Master_Transmit+0x50>
 8007050:	2302      	movs	r3, #2
 8007052:	e0cc      	b.n	80071ee <HAL_I2C_Master_Transmit+0x1ea>
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2201      	movs	r2, #1
 8007058:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f003 0301 	and.w	r3, r3, #1
 8007066:	2b01      	cmp	r3, #1
 8007068:	d007      	beq.n	800707a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f042 0201 	orr.w	r2, r2, #1
 8007078:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	681a      	ldr	r2, [r3, #0]
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007088:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2221      	movs	r2, #33	@ 0x21
 800708e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2210      	movs	r2, #16
 8007096:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2200      	movs	r2, #0
 800709e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	893a      	ldrh	r2, [r7, #8]
 80070aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070b0:	b29a      	uxth	r2, r3
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	4a50      	ldr	r2, [pc, #320]	@ (80071fc <HAL_I2C_Master_Transmit+0x1f8>)
 80070ba:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80070bc:	8979      	ldrh	r1, [r7, #10]
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	6a3a      	ldr	r2, [r7, #32]
 80070c2:	68f8      	ldr	r0, [r7, #12]
 80070c4:	f000 fde2 	bl	8007c8c <I2C_MasterRequestWrite>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d001      	beq.n	80070d2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	e08d      	b.n	80071ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070d2:	2300      	movs	r3, #0
 80070d4:	613b      	str	r3, [r7, #16]
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	695b      	ldr	r3, [r3, #20]
 80070dc:	613b      	str	r3, [r7, #16]
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	699b      	ldr	r3, [r3, #24]
 80070e4:	613b      	str	r3, [r7, #16]
 80070e6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80070e8:	e066      	b.n	80071b8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80070ea:	697a      	ldr	r2, [r7, #20]
 80070ec:	6a39      	ldr	r1, [r7, #32]
 80070ee:	68f8      	ldr	r0, [r7, #12]
 80070f0:	f001 f970 	bl	80083d4 <I2C_WaitOnTXEFlagUntilTimeout>
 80070f4:	4603      	mov	r3, r0
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d00d      	beq.n	8007116 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070fe:	2b04      	cmp	r3, #4
 8007100:	d107      	bne.n	8007112 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007110:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007112:	2301      	movs	r3, #1
 8007114:	e06b      	b.n	80071ee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800711a:	781a      	ldrb	r2, [r3, #0]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007126:	1c5a      	adds	r2, r3, #1
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007130:	b29b      	uxth	r3, r3
 8007132:	3b01      	subs	r3, #1
 8007134:	b29a      	uxth	r2, r3
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800713e:	3b01      	subs	r3, #1
 8007140:	b29a      	uxth	r2, r3
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	695b      	ldr	r3, [r3, #20]
 800714c:	f003 0304 	and.w	r3, r3, #4
 8007150:	2b04      	cmp	r3, #4
 8007152:	d11b      	bne.n	800718c <HAL_I2C_Master_Transmit+0x188>
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007158:	2b00      	cmp	r3, #0
 800715a:	d017      	beq.n	800718c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007160:	781a      	ldrb	r2, [r3, #0]
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800716c:	1c5a      	adds	r2, r3, #1
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007176:	b29b      	uxth	r3, r3
 8007178:	3b01      	subs	r3, #1
 800717a:	b29a      	uxth	r2, r3
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007184:	3b01      	subs	r3, #1
 8007186:	b29a      	uxth	r2, r3
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800718c:	697a      	ldr	r2, [r7, #20]
 800718e:	6a39      	ldr	r1, [r7, #32]
 8007190:	68f8      	ldr	r0, [r7, #12]
 8007192:	f001 f960 	bl	8008456 <I2C_WaitOnBTFFlagUntilTimeout>
 8007196:	4603      	mov	r3, r0
 8007198:	2b00      	cmp	r3, #0
 800719a:	d00d      	beq.n	80071b8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071a0:	2b04      	cmp	r3, #4
 80071a2:	d107      	bne.n	80071b4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80071b2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80071b4:	2301      	movs	r3, #1
 80071b6:	e01a      	b.n	80071ee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d194      	bne.n	80070ea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80071ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2220      	movs	r2, #32
 80071d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2200      	movs	r2, #0
 80071dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2200      	movs	r2, #0
 80071e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80071e8:	2300      	movs	r3, #0
 80071ea:	e000      	b.n	80071ee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80071ec:	2302      	movs	r3, #2
  }
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3718      	adds	r7, #24
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop
 80071f8:	00100002 	.word	0x00100002
 80071fc:	ffff0000 	.word	0xffff0000

08007200 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b08c      	sub	sp, #48	@ 0x30
 8007204:	af02      	add	r7, sp, #8
 8007206:	60f8      	str	r0, [r7, #12]
 8007208:	607a      	str	r2, [r7, #4]
 800720a:	461a      	mov	r2, r3
 800720c:	460b      	mov	r3, r1
 800720e:	817b      	strh	r3, [r7, #10]
 8007210:	4613      	mov	r3, r2
 8007212:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007214:	f7fe fd72 	bl	8005cfc <HAL_GetTick>
 8007218:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007220:	b2db      	uxtb	r3, r3
 8007222:	2b20      	cmp	r3, #32
 8007224:	f040 820b 	bne.w	800763e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800722a:	9300      	str	r3, [sp, #0]
 800722c:	2319      	movs	r3, #25
 800722e:	2201      	movs	r2, #1
 8007230:	497c      	ldr	r1, [pc, #496]	@ (8007424 <HAL_I2C_Master_Receive+0x224>)
 8007232:	68f8      	ldr	r0, [r7, #12]
 8007234:	f000 fff8 	bl	8008228 <I2C_WaitOnFlagUntilTimeout>
 8007238:	4603      	mov	r3, r0
 800723a:	2b00      	cmp	r3, #0
 800723c:	d001      	beq.n	8007242 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800723e:	2302      	movs	r3, #2
 8007240:	e1fe      	b.n	8007640 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007248:	2b01      	cmp	r3, #1
 800724a:	d101      	bne.n	8007250 <HAL_I2C_Master_Receive+0x50>
 800724c:	2302      	movs	r3, #2
 800724e:	e1f7      	b.n	8007640 <HAL_I2C_Master_Receive+0x440>
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2201      	movs	r2, #1
 8007254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f003 0301 	and.w	r3, r3, #1
 8007262:	2b01      	cmp	r3, #1
 8007264:	d007      	beq.n	8007276 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f042 0201 	orr.w	r2, r2, #1
 8007274:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007284:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2222      	movs	r2, #34	@ 0x22
 800728a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2210      	movs	r2, #16
 8007292:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2200      	movs	r2, #0
 800729a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	893a      	ldrh	r2, [r7, #8]
 80072a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072ac:	b29a      	uxth	r2, r3
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	4a5c      	ldr	r2, [pc, #368]	@ (8007428 <HAL_I2C_Master_Receive+0x228>)
 80072b6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80072b8:	8979      	ldrh	r1, [r7, #10]
 80072ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072be:	68f8      	ldr	r0, [r7, #12]
 80072c0:	f000 fd66 	bl	8007d90 <I2C_MasterRequestRead>
 80072c4:	4603      	mov	r3, r0
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d001      	beq.n	80072ce <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	e1b8      	b.n	8007640 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d113      	bne.n	80072fe <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072d6:	2300      	movs	r3, #0
 80072d8:	623b      	str	r3, [r7, #32]
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	695b      	ldr	r3, [r3, #20]
 80072e0:	623b      	str	r3, [r7, #32]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	699b      	ldr	r3, [r3, #24]
 80072e8:	623b      	str	r3, [r7, #32]
 80072ea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80072fa:	601a      	str	r2, [r3, #0]
 80072fc:	e18c      	b.n	8007618 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007302:	2b01      	cmp	r3, #1
 8007304:	d11b      	bne.n	800733e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007314:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007316:	2300      	movs	r3, #0
 8007318:	61fb      	str	r3, [r7, #28]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	695b      	ldr	r3, [r3, #20]
 8007320:	61fb      	str	r3, [r7, #28]
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	699b      	ldr	r3, [r3, #24]
 8007328:	61fb      	str	r3, [r7, #28]
 800732a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800733a:	601a      	str	r2, [r3, #0]
 800733c:	e16c      	b.n	8007618 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007342:	2b02      	cmp	r3, #2
 8007344:	d11b      	bne.n	800737e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007354:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007364:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007366:	2300      	movs	r3, #0
 8007368:	61bb      	str	r3, [r7, #24]
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	695b      	ldr	r3, [r3, #20]
 8007370:	61bb      	str	r3, [r7, #24]
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	699b      	ldr	r3, [r3, #24]
 8007378:	61bb      	str	r3, [r7, #24]
 800737a:	69bb      	ldr	r3, [r7, #24]
 800737c:	e14c      	b.n	8007618 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800738c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800738e:	2300      	movs	r3, #0
 8007390:	617b      	str	r3, [r7, #20]
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	695b      	ldr	r3, [r3, #20]
 8007398:	617b      	str	r3, [r7, #20]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	699b      	ldr	r3, [r3, #24]
 80073a0:	617b      	str	r3, [r7, #20]
 80073a2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80073a4:	e138      	b.n	8007618 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073aa:	2b03      	cmp	r3, #3
 80073ac:	f200 80f1 	bhi.w	8007592 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d123      	bne.n	8007400 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80073b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073ba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80073bc:	68f8      	ldr	r0, [r7, #12]
 80073be:	f001 f88b 	bl	80084d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80073c2:	4603      	mov	r3, r0
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d001      	beq.n	80073cc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	e139      	b.n	8007640 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	691a      	ldr	r2, [r3, #16]
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073d6:	b2d2      	uxtb	r2, r2
 80073d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073de:	1c5a      	adds	r2, r3, #1
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073e8:	3b01      	subs	r3, #1
 80073ea:	b29a      	uxth	r2, r3
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	3b01      	subs	r3, #1
 80073f8:	b29a      	uxth	r2, r3
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80073fe:	e10b      	b.n	8007618 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007404:	2b02      	cmp	r3, #2
 8007406:	d14e      	bne.n	80074a6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800740a:	9300      	str	r3, [sp, #0]
 800740c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800740e:	2200      	movs	r2, #0
 8007410:	4906      	ldr	r1, [pc, #24]	@ (800742c <HAL_I2C_Master_Receive+0x22c>)
 8007412:	68f8      	ldr	r0, [r7, #12]
 8007414:	f000 ff08 	bl	8008228 <I2C_WaitOnFlagUntilTimeout>
 8007418:	4603      	mov	r3, r0
 800741a:	2b00      	cmp	r3, #0
 800741c:	d008      	beq.n	8007430 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	e10e      	b.n	8007640 <HAL_I2C_Master_Receive+0x440>
 8007422:	bf00      	nop
 8007424:	00100002 	.word	0x00100002
 8007428:	ffff0000 	.word	0xffff0000
 800742c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	681a      	ldr	r2, [r3, #0]
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800743e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	691a      	ldr	r2, [r3, #16]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800744a:	b2d2      	uxtb	r2, r2
 800744c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007452:	1c5a      	adds	r2, r3, #1
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800745c:	3b01      	subs	r3, #1
 800745e:	b29a      	uxth	r2, r3
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007468:	b29b      	uxth	r3, r3
 800746a:	3b01      	subs	r3, #1
 800746c:	b29a      	uxth	r2, r3
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	691a      	ldr	r2, [r3, #16]
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800747c:	b2d2      	uxtb	r2, r2
 800747e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007484:	1c5a      	adds	r2, r3, #1
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800748e:	3b01      	subs	r3, #1
 8007490:	b29a      	uxth	r2, r3
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800749a:	b29b      	uxth	r3, r3
 800749c:	3b01      	subs	r3, #1
 800749e:	b29a      	uxth	r2, r3
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80074a4:	e0b8      	b.n	8007618 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80074a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a8:	9300      	str	r3, [sp, #0]
 80074aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ac:	2200      	movs	r2, #0
 80074ae:	4966      	ldr	r1, [pc, #408]	@ (8007648 <HAL_I2C_Master_Receive+0x448>)
 80074b0:	68f8      	ldr	r0, [r7, #12]
 80074b2:	f000 feb9 	bl	8008228 <I2C_WaitOnFlagUntilTimeout>
 80074b6:	4603      	mov	r3, r0
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d001      	beq.n	80074c0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80074bc:	2301      	movs	r3, #1
 80074be:	e0bf      	b.n	8007640 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	681a      	ldr	r2, [r3, #0]
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80074ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	691a      	ldr	r2, [r3, #16]
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074da:	b2d2      	uxtb	r2, r2
 80074dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074e2:	1c5a      	adds	r2, r3, #1
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074ec:	3b01      	subs	r3, #1
 80074ee:	b29a      	uxth	r2, r3
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	3b01      	subs	r3, #1
 80074fc:	b29a      	uxth	r2, r3
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007504:	9300      	str	r3, [sp, #0]
 8007506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007508:	2200      	movs	r2, #0
 800750a:	494f      	ldr	r1, [pc, #316]	@ (8007648 <HAL_I2C_Master_Receive+0x448>)
 800750c:	68f8      	ldr	r0, [r7, #12]
 800750e:	f000 fe8b 	bl	8008228 <I2C_WaitOnFlagUntilTimeout>
 8007512:	4603      	mov	r3, r0
 8007514:	2b00      	cmp	r3, #0
 8007516:	d001      	beq.n	800751c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8007518:	2301      	movs	r3, #1
 800751a:	e091      	b.n	8007640 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800752a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	691a      	ldr	r2, [r3, #16]
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007536:	b2d2      	uxtb	r2, r2
 8007538:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800753e:	1c5a      	adds	r2, r3, #1
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007548:	3b01      	subs	r3, #1
 800754a:	b29a      	uxth	r2, r3
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007554:	b29b      	uxth	r3, r3
 8007556:	3b01      	subs	r3, #1
 8007558:	b29a      	uxth	r2, r3
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	691a      	ldr	r2, [r3, #16]
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007568:	b2d2      	uxtb	r2, r2
 800756a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007570:	1c5a      	adds	r2, r3, #1
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800757a:	3b01      	subs	r3, #1
 800757c:	b29a      	uxth	r2, r3
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007586:	b29b      	uxth	r3, r3
 8007588:	3b01      	subs	r3, #1
 800758a:	b29a      	uxth	r2, r3
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007590:	e042      	b.n	8007618 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007592:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007594:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007596:	68f8      	ldr	r0, [r7, #12]
 8007598:	f000 ff9e 	bl	80084d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800759c:	4603      	mov	r3, r0
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d001      	beq.n	80075a6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	e04c      	b.n	8007640 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	691a      	ldr	r2, [r3, #16]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075b0:	b2d2      	uxtb	r2, r2
 80075b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075b8:	1c5a      	adds	r2, r3, #1
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075c2:	3b01      	subs	r3, #1
 80075c4:	b29a      	uxth	r2, r3
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	3b01      	subs	r3, #1
 80075d2:	b29a      	uxth	r2, r3
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	695b      	ldr	r3, [r3, #20]
 80075de:	f003 0304 	and.w	r3, r3, #4
 80075e2:	2b04      	cmp	r3, #4
 80075e4:	d118      	bne.n	8007618 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	691a      	ldr	r2, [r3, #16]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075f0:	b2d2      	uxtb	r2, r2
 80075f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075f8:	1c5a      	adds	r2, r3, #1
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007602:	3b01      	subs	r3, #1
 8007604:	b29a      	uxth	r2, r3
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800760e:	b29b      	uxth	r3, r3
 8007610:	3b01      	subs	r3, #1
 8007612:	b29a      	uxth	r2, r3
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800761c:	2b00      	cmp	r3, #0
 800761e:	f47f aec2 	bne.w	80073a6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2220      	movs	r2, #32
 8007626:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2200      	movs	r2, #0
 800762e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2200      	movs	r2, #0
 8007636:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800763a:	2300      	movs	r3, #0
 800763c:	e000      	b.n	8007640 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800763e:	2302      	movs	r3, #2
  }
}
 8007640:	4618      	mov	r0, r3
 8007642:	3728      	adds	r7, #40	@ 0x28
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}
 8007648:	00010004 	.word	0x00010004

0800764c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b088      	sub	sp, #32
 8007650:	af02      	add	r7, sp, #8
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	4608      	mov	r0, r1
 8007656:	4611      	mov	r1, r2
 8007658:	461a      	mov	r2, r3
 800765a:	4603      	mov	r3, r0
 800765c:	817b      	strh	r3, [r7, #10]
 800765e:	460b      	mov	r3, r1
 8007660:	813b      	strh	r3, [r7, #8]
 8007662:	4613      	mov	r3, r2
 8007664:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007666:	f7fe fb49 	bl	8005cfc <HAL_GetTick>
 800766a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007672:	b2db      	uxtb	r3, r3
 8007674:	2b20      	cmp	r3, #32
 8007676:	f040 80d9 	bne.w	800782c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	9300      	str	r3, [sp, #0]
 800767e:	2319      	movs	r3, #25
 8007680:	2201      	movs	r2, #1
 8007682:	496d      	ldr	r1, [pc, #436]	@ (8007838 <HAL_I2C_Mem_Write+0x1ec>)
 8007684:	68f8      	ldr	r0, [r7, #12]
 8007686:	f000 fdcf 	bl	8008228 <I2C_WaitOnFlagUntilTimeout>
 800768a:	4603      	mov	r3, r0
 800768c:	2b00      	cmp	r3, #0
 800768e:	d001      	beq.n	8007694 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007690:	2302      	movs	r3, #2
 8007692:	e0cc      	b.n	800782e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800769a:	2b01      	cmp	r3, #1
 800769c:	d101      	bne.n	80076a2 <HAL_I2C_Mem_Write+0x56>
 800769e:	2302      	movs	r3, #2
 80076a0:	e0c5      	b.n	800782e <HAL_I2C_Mem_Write+0x1e2>
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2201      	movs	r2, #1
 80076a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f003 0301 	and.w	r3, r3, #1
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d007      	beq.n	80076c8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	681a      	ldr	r2, [r3, #0]
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f042 0201 	orr.w	r2, r2, #1
 80076c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80076d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2221      	movs	r2, #33	@ 0x21
 80076dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2240      	movs	r2, #64	@ 0x40
 80076e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2200      	movs	r2, #0
 80076ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	6a3a      	ldr	r2, [r7, #32]
 80076f2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80076f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076fe:	b29a      	uxth	r2, r3
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	4a4d      	ldr	r2, [pc, #308]	@ (800783c <HAL_I2C_Mem_Write+0x1f0>)
 8007708:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800770a:	88f8      	ldrh	r0, [r7, #6]
 800770c:	893a      	ldrh	r2, [r7, #8]
 800770e:	8979      	ldrh	r1, [r7, #10]
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	9301      	str	r3, [sp, #4]
 8007714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007716:	9300      	str	r3, [sp, #0]
 8007718:	4603      	mov	r3, r0
 800771a:	68f8      	ldr	r0, [r7, #12]
 800771c:	f000 fc06 	bl	8007f2c <I2C_RequestMemoryWrite>
 8007720:	4603      	mov	r3, r0
 8007722:	2b00      	cmp	r3, #0
 8007724:	d052      	beq.n	80077cc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	e081      	b.n	800782e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800772a:	697a      	ldr	r2, [r7, #20]
 800772c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800772e:	68f8      	ldr	r0, [r7, #12]
 8007730:	f000 fe50 	bl	80083d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007734:	4603      	mov	r3, r0
 8007736:	2b00      	cmp	r3, #0
 8007738:	d00d      	beq.n	8007756 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800773e:	2b04      	cmp	r3, #4
 8007740:	d107      	bne.n	8007752 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007750:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007752:	2301      	movs	r3, #1
 8007754:	e06b      	b.n	800782e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800775a:	781a      	ldrb	r2, [r3, #0]
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007766:	1c5a      	adds	r2, r3, #1
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007770:	3b01      	subs	r3, #1
 8007772:	b29a      	uxth	r2, r3
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800777c:	b29b      	uxth	r3, r3
 800777e:	3b01      	subs	r3, #1
 8007780:	b29a      	uxth	r2, r3
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	695b      	ldr	r3, [r3, #20]
 800778c:	f003 0304 	and.w	r3, r3, #4
 8007790:	2b04      	cmp	r3, #4
 8007792:	d11b      	bne.n	80077cc <HAL_I2C_Mem_Write+0x180>
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007798:	2b00      	cmp	r3, #0
 800779a:	d017      	beq.n	80077cc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077a0:	781a      	ldrb	r2, [r3, #0]
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077ac:	1c5a      	adds	r2, r3, #1
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077b6:	3b01      	subs	r3, #1
 80077b8:	b29a      	uxth	r2, r3
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	3b01      	subs	r3, #1
 80077c6:	b29a      	uxth	r2, r3
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d1aa      	bne.n	800772a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80077d4:	697a      	ldr	r2, [r7, #20]
 80077d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80077d8:	68f8      	ldr	r0, [r7, #12]
 80077da:	f000 fe3c 	bl	8008456 <I2C_WaitOnBTFFlagUntilTimeout>
 80077de:	4603      	mov	r3, r0
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d00d      	beq.n	8007800 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077e8:	2b04      	cmp	r3, #4
 80077ea:	d107      	bne.n	80077fc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80077fa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80077fc:	2301      	movs	r3, #1
 80077fe:	e016      	b.n	800782e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	681a      	ldr	r2, [r3, #0]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800780e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2220      	movs	r2, #32
 8007814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2200      	movs	r2, #0
 800781c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2200      	movs	r2, #0
 8007824:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007828:	2300      	movs	r3, #0
 800782a:	e000      	b.n	800782e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800782c:	2302      	movs	r3, #2
  }
}
 800782e:	4618      	mov	r0, r3
 8007830:	3718      	adds	r7, #24
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
 8007836:	bf00      	nop
 8007838:	00100002 	.word	0x00100002
 800783c:	ffff0000 	.word	0xffff0000

08007840 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b08c      	sub	sp, #48	@ 0x30
 8007844:	af02      	add	r7, sp, #8
 8007846:	60f8      	str	r0, [r7, #12]
 8007848:	4608      	mov	r0, r1
 800784a:	4611      	mov	r1, r2
 800784c:	461a      	mov	r2, r3
 800784e:	4603      	mov	r3, r0
 8007850:	817b      	strh	r3, [r7, #10]
 8007852:	460b      	mov	r3, r1
 8007854:	813b      	strh	r3, [r7, #8]
 8007856:	4613      	mov	r3, r2
 8007858:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800785a:	f7fe fa4f 	bl	8005cfc <HAL_GetTick>
 800785e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007866:	b2db      	uxtb	r3, r3
 8007868:	2b20      	cmp	r3, #32
 800786a:	f040 8208 	bne.w	8007c7e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800786e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007870:	9300      	str	r3, [sp, #0]
 8007872:	2319      	movs	r3, #25
 8007874:	2201      	movs	r2, #1
 8007876:	497b      	ldr	r1, [pc, #492]	@ (8007a64 <HAL_I2C_Mem_Read+0x224>)
 8007878:	68f8      	ldr	r0, [r7, #12]
 800787a:	f000 fcd5 	bl	8008228 <I2C_WaitOnFlagUntilTimeout>
 800787e:	4603      	mov	r3, r0
 8007880:	2b00      	cmp	r3, #0
 8007882:	d001      	beq.n	8007888 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007884:	2302      	movs	r3, #2
 8007886:	e1fb      	b.n	8007c80 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800788e:	2b01      	cmp	r3, #1
 8007890:	d101      	bne.n	8007896 <HAL_I2C_Mem_Read+0x56>
 8007892:	2302      	movs	r3, #2
 8007894:	e1f4      	b.n	8007c80 <HAL_I2C_Mem_Read+0x440>
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2201      	movs	r2, #1
 800789a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f003 0301 	and.w	r3, r3, #1
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d007      	beq.n	80078bc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f042 0201 	orr.w	r2, r2, #1
 80078ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80078ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2222      	movs	r2, #34	@ 0x22
 80078d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2240      	movs	r2, #64	@ 0x40
 80078d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2200      	movs	r2, #0
 80078e0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078e6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80078ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078f2:	b29a      	uxth	r2, r3
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	4a5b      	ldr	r2, [pc, #364]	@ (8007a68 <HAL_I2C_Mem_Read+0x228>)
 80078fc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80078fe:	88f8      	ldrh	r0, [r7, #6]
 8007900:	893a      	ldrh	r2, [r7, #8]
 8007902:	8979      	ldrh	r1, [r7, #10]
 8007904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007906:	9301      	str	r3, [sp, #4]
 8007908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800790a:	9300      	str	r3, [sp, #0]
 800790c:	4603      	mov	r3, r0
 800790e:	68f8      	ldr	r0, [r7, #12]
 8007910:	f000 fba2 	bl	8008058 <I2C_RequestMemoryRead>
 8007914:	4603      	mov	r3, r0
 8007916:	2b00      	cmp	r3, #0
 8007918:	d001      	beq.n	800791e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800791a:	2301      	movs	r3, #1
 800791c:	e1b0      	b.n	8007c80 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007922:	2b00      	cmp	r3, #0
 8007924:	d113      	bne.n	800794e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007926:	2300      	movs	r3, #0
 8007928:	623b      	str	r3, [r7, #32]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	695b      	ldr	r3, [r3, #20]
 8007930:	623b      	str	r3, [r7, #32]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	699b      	ldr	r3, [r3, #24]
 8007938:	623b      	str	r3, [r7, #32]
 800793a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	681a      	ldr	r2, [r3, #0]
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800794a:	601a      	str	r2, [r3, #0]
 800794c:	e184      	b.n	8007c58 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007952:	2b01      	cmp	r3, #1
 8007954:	d11b      	bne.n	800798e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007964:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007966:	2300      	movs	r3, #0
 8007968:	61fb      	str	r3, [r7, #28]
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	695b      	ldr	r3, [r3, #20]
 8007970:	61fb      	str	r3, [r7, #28]
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	699b      	ldr	r3, [r3, #24]
 8007978:	61fb      	str	r3, [r7, #28]
 800797a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800798a:	601a      	str	r2, [r3, #0]
 800798c:	e164      	b.n	8007c58 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007992:	2b02      	cmp	r3, #2
 8007994:	d11b      	bne.n	80079ce <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80079a4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80079b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079b6:	2300      	movs	r3, #0
 80079b8:	61bb      	str	r3, [r7, #24]
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	695b      	ldr	r3, [r3, #20]
 80079c0:	61bb      	str	r3, [r7, #24]
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	699b      	ldr	r3, [r3, #24]
 80079c8:	61bb      	str	r3, [r7, #24]
 80079ca:	69bb      	ldr	r3, [r7, #24]
 80079cc:	e144      	b.n	8007c58 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079ce:	2300      	movs	r3, #0
 80079d0:	617b      	str	r3, [r7, #20]
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	695b      	ldr	r3, [r3, #20]
 80079d8:	617b      	str	r3, [r7, #20]
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	699b      	ldr	r3, [r3, #24]
 80079e0:	617b      	str	r3, [r7, #20]
 80079e2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80079e4:	e138      	b.n	8007c58 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079ea:	2b03      	cmp	r3, #3
 80079ec:	f200 80f1 	bhi.w	8007bd2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d123      	bne.n	8007a40 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80079f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079fa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80079fc:	68f8      	ldr	r0, [r7, #12]
 80079fe:	f000 fd6b 	bl	80084d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007a02:	4603      	mov	r3, r0
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d001      	beq.n	8007a0c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	e139      	b.n	8007c80 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	691a      	ldr	r2, [r3, #16]
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a16:	b2d2      	uxtb	r2, r2
 8007a18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a1e:	1c5a      	adds	r2, r3, #1
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a28:	3b01      	subs	r3, #1
 8007a2a:	b29a      	uxth	r2, r3
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	3b01      	subs	r3, #1
 8007a38:	b29a      	uxth	r2, r3
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007a3e:	e10b      	b.n	8007c58 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a44:	2b02      	cmp	r3, #2
 8007a46:	d14e      	bne.n	8007ae6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a4a:	9300      	str	r3, [sp, #0]
 8007a4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a4e:	2200      	movs	r2, #0
 8007a50:	4906      	ldr	r1, [pc, #24]	@ (8007a6c <HAL_I2C_Mem_Read+0x22c>)
 8007a52:	68f8      	ldr	r0, [r7, #12]
 8007a54:	f000 fbe8 	bl	8008228 <I2C_WaitOnFlagUntilTimeout>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d008      	beq.n	8007a70 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	e10e      	b.n	8007c80 <HAL_I2C_Mem_Read+0x440>
 8007a62:	bf00      	nop
 8007a64:	00100002 	.word	0x00100002
 8007a68:	ffff0000 	.word	0xffff0000
 8007a6c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	691a      	ldr	r2, [r3, #16]
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a8a:	b2d2      	uxtb	r2, r2
 8007a8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a92:	1c5a      	adds	r2, r3, #1
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a9c:	3b01      	subs	r3, #1
 8007a9e:	b29a      	uxth	r2, r3
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	3b01      	subs	r3, #1
 8007aac:	b29a      	uxth	r2, r3
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	691a      	ldr	r2, [r3, #16]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007abc:	b2d2      	uxtb	r2, r2
 8007abe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ac4:	1c5a      	adds	r2, r3, #1
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ace:	3b01      	subs	r3, #1
 8007ad0:	b29a      	uxth	r2, r3
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	3b01      	subs	r3, #1
 8007ade:	b29a      	uxth	r2, r3
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007ae4:	e0b8      	b.n	8007c58 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ae8:	9300      	str	r3, [sp, #0]
 8007aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aec:	2200      	movs	r2, #0
 8007aee:	4966      	ldr	r1, [pc, #408]	@ (8007c88 <HAL_I2C_Mem_Read+0x448>)
 8007af0:	68f8      	ldr	r0, [r7, #12]
 8007af2:	f000 fb99 	bl	8008228 <I2C_WaitOnFlagUntilTimeout>
 8007af6:	4603      	mov	r3, r0
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d001      	beq.n	8007b00 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007afc:	2301      	movs	r3, #1
 8007afe:	e0bf      	b.n	8007c80 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	681a      	ldr	r2, [r3, #0]
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007b0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	691a      	ldr	r2, [r3, #16]
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b1a:	b2d2      	uxtb	r2, r2
 8007b1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b22:	1c5a      	adds	r2, r3, #1
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b2c:	3b01      	subs	r3, #1
 8007b2e:	b29a      	uxth	r2, r3
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	3b01      	subs	r3, #1
 8007b3c:	b29a      	uxth	r2, r3
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b44:	9300      	str	r3, [sp, #0]
 8007b46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b48:	2200      	movs	r2, #0
 8007b4a:	494f      	ldr	r1, [pc, #316]	@ (8007c88 <HAL_I2C_Mem_Read+0x448>)
 8007b4c:	68f8      	ldr	r0, [r7, #12]
 8007b4e:	f000 fb6b 	bl	8008228 <I2C_WaitOnFlagUntilTimeout>
 8007b52:	4603      	mov	r3, r0
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d001      	beq.n	8007b5c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	e091      	b.n	8007c80 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007b6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	691a      	ldr	r2, [r3, #16]
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b76:	b2d2      	uxtb	r2, r2
 8007b78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b7e:	1c5a      	adds	r2, r3, #1
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b88:	3b01      	subs	r3, #1
 8007b8a:	b29a      	uxth	r2, r3
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	3b01      	subs	r3, #1
 8007b98:	b29a      	uxth	r2, r3
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	691a      	ldr	r2, [r3, #16]
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ba8:	b2d2      	uxtb	r2, r2
 8007baa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bb0:	1c5a      	adds	r2, r3, #1
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bba:	3b01      	subs	r3, #1
 8007bbc:	b29a      	uxth	r2, r3
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	3b01      	subs	r3, #1
 8007bca:	b29a      	uxth	r2, r3
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007bd0:	e042      	b.n	8007c58 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007bd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bd4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007bd6:	68f8      	ldr	r0, [r7, #12]
 8007bd8:	f000 fc7e 	bl	80084d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d001      	beq.n	8007be6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007be2:	2301      	movs	r3, #1
 8007be4:	e04c      	b.n	8007c80 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	691a      	ldr	r2, [r3, #16]
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bf0:	b2d2      	uxtb	r2, r2
 8007bf2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bf8:	1c5a      	adds	r2, r3, #1
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c02:	3b01      	subs	r3, #1
 8007c04:	b29a      	uxth	r2, r3
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	3b01      	subs	r3, #1
 8007c12:	b29a      	uxth	r2, r3
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	695b      	ldr	r3, [r3, #20]
 8007c1e:	f003 0304 	and.w	r3, r3, #4
 8007c22:	2b04      	cmp	r3, #4
 8007c24:	d118      	bne.n	8007c58 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	691a      	ldr	r2, [r3, #16]
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c30:	b2d2      	uxtb	r2, r2
 8007c32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c38:	1c5a      	adds	r2, r3, #1
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c42:	3b01      	subs	r3, #1
 8007c44:	b29a      	uxth	r2, r3
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	3b01      	subs	r3, #1
 8007c52:	b29a      	uxth	r2, r3
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	f47f aec2 	bne.w	80079e6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2220      	movs	r2, #32
 8007c66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2200      	movs	r2, #0
 8007c76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	e000      	b.n	8007c80 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007c7e:	2302      	movs	r3, #2
  }
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3728      	adds	r7, #40	@ 0x28
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}
 8007c88:	00010004 	.word	0x00010004

08007c8c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b088      	sub	sp, #32
 8007c90:	af02      	add	r7, sp, #8
 8007c92:	60f8      	str	r0, [r7, #12]
 8007c94:	607a      	str	r2, [r7, #4]
 8007c96:	603b      	str	r3, [r7, #0]
 8007c98:	460b      	mov	r3, r1
 8007c9a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ca0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	2b08      	cmp	r3, #8
 8007ca6:	d006      	beq.n	8007cb6 <I2C_MasterRequestWrite+0x2a>
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	d003      	beq.n	8007cb6 <I2C_MasterRequestWrite+0x2a>
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007cb4:	d108      	bne.n	8007cc8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007cc4:	601a      	str	r2, [r3, #0]
 8007cc6:	e00b      	b.n	8007ce0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ccc:	2b12      	cmp	r3, #18
 8007cce:	d107      	bne.n	8007ce0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007cde:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	9300      	str	r3, [sp, #0]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007cec:	68f8      	ldr	r0, [r7, #12]
 8007cee:	f000 fa9b 	bl	8008228 <I2C_WaitOnFlagUntilTimeout>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d00d      	beq.n	8007d14 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d06:	d103      	bne.n	8007d10 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007d0e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007d10:	2303      	movs	r3, #3
 8007d12:	e035      	b.n	8007d80 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	691b      	ldr	r3, [r3, #16]
 8007d18:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007d1c:	d108      	bne.n	8007d30 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007d1e:	897b      	ldrh	r3, [r7, #10]
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	461a      	mov	r2, r3
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007d2c:	611a      	str	r2, [r3, #16]
 8007d2e:	e01b      	b.n	8007d68 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007d30:	897b      	ldrh	r3, [r7, #10]
 8007d32:	11db      	asrs	r3, r3, #7
 8007d34:	b2db      	uxtb	r3, r3
 8007d36:	f003 0306 	and.w	r3, r3, #6
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	f063 030f 	orn	r3, r3, #15
 8007d40:	b2da      	uxtb	r2, r3
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	687a      	ldr	r2, [r7, #4]
 8007d4c:	490e      	ldr	r1, [pc, #56]	@ (8007d88 <I2C_MasterRequestWrite+0xfc>)
 8007d4e:	68f8      	ldr	r0, [r7, #12]
 8007d50:	f000 fac1 	bl	80082d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007d54:	4603      	mov	r3, r0
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d001      	beq.n	8007d5e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	e010      	b.n	8007d80 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007d5e:	897b      	ldrh	r3, [r7, #10]
 8007d60:	b2da      	uxtb	r2, r3
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	4907      	ldr	r1, [pc, #28]	@ (8007d8c <I2C_MasterRequestWrite+0x100>)
 8007d6e:	68f8      	ldr	r0, [r7, #12]
 8007d70:	f000 fab1 	bl	80082d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007d74:	4603      	mov	r3, r0
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d001      	beq.n	8007d7e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	e000      	b.n	8007d80 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007d7e:	2300      	movs	r3, #0
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3718      	adds	r7, #24
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}
 8007d88:	00010008 	.word	0x00010008
 8007d8c:	00010002 	.word	0x00010002

08007d90 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b088      	sub	sp, #32
 8007d94:	af02      	add	r7, sp, #8
 8007d96:	60f8      	str	r0, [r7, #12]
 8007d98:	607a      	str	r2, [r7, #4]
 8007d9a:	603b      	str	r3, [r7, #0]
 8007d9c:	460b      	mov	r3, r1
 8007d9e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007da4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	681a      	ldr	r2, [r3, #0]
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007db4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	2b08      	cmp	r3, #8
 8007dba:	d006      	beq.n	8007dca <I2C_MasterRequestRead+0x3a>
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d003      	beq.n	8007dca <I2C_MasterRequestRead+0x3a>
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007dc8:	d108      	bne.n	8007ddc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007dd8:	601a      	str	r2, [r3, #0]
 8007dda:	e00b      	b.n	8007df4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007de0:	2b11      	cmp	r3, #17
 8007de2:	d107      	bne.n	8007df4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	681a      	ldr	r2, [r3, #0]
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007df2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	9300      	str	r3, [sp, #0]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007e00:	68f8      	ldr	r0, [r7, #12]
 8007e02:	f000 fa11 	bl	8008228 <I2C_WaitOnFlagUntilTimeout>
 8007e06:	4603      	mov	r3, r0
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d00d      	beq.n	8007e28 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e1a:	d103      	bne.n	8007e24 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007e22:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007e24:	2303      	movs	r3, #3
 8007e26:	e079      	b.n	8007f1c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	691b      	ldr	r3, [r3, #16]
 8007e2c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007e30:	d108      	bne.n	8007e44 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007e32:	897b      	ldrh	r3, [r7, #10]
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	f043 0301 	orr.w	r3, r3, #1
 8007e3a:	b2da      	uxtb	r2, r3
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	611a      	str	r2, [r3, #16]
 8007e42:	e05f      	b.n	8007f04 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007e44:	897b      	ldrh	r3, [r7, #10]
 8007e46:	11db      	asrs	r3, r3, #7
 8007e48:	b2db      	uxtb	r3, r3
 8007e4a:	f003 0306 	and.w	r3, r3, #6
 8007e4e:	b2db      	uxtb	r3, r3
 8007e50:	f063 030f 	orn	r3, r3, #15
 8007e54:	b2da      	uxtb	r2, r3
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	4930      	ldr	r1, [pc, #192]	@ (8007f24 <I2C_MasterRequestRead+0x194>)
 8007e62:	68f8      	ldr	r0, [r7, #12]
 8007e64:	f000 fa37 	bl	80082d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d001      	beq.n	8007e72 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8007e6e:	2301      	movs	r3, #1
 8007e70:	e054      	b.n	8007f1c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007e72:	897b      	ldrh	r3, [r7, #10]
 8007e74:	b2da      	uxtb	r2, r3
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	687a      	ldr	r2, [r7, #4]
 8007e80:	4929      	ldr	r1, [pc, #164]	@ (8007f28 <I2C_MasterRequestRead+0x198>)
 8007e82:	68f8      	ldr	r0, [r7, #12]
 8007e84:	f000 fa27 	bl	80082d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d001      	beq.n	8007e92 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8007e8e:	2301      	movs	r3, #1
 8007e90:	e044      	b.n	8007f1c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e92:	2300      	movs	r3, #0
 8007e94:	613b      	str	r3, [r7, #16]
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	695b      	ldr	r3, [r3, #20]
 8007e9c:	613b      	str	r3, [r7, #16]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	699b      	ldr	r3, [r3, #24]
 8007ea4:	613b      	str	r3, [r7, #16]
 8007ea6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	681a      	ldr	r2, [r3, #0]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007eb6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	9300      	str	r3, [sp, #0]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007ec4:	68f8      	ldr	r0, [r7, #12]
 8007ec6:	f000 f9af 	bl	8008228 <I2C_WaitOnFlagUntilTimeout>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d00d      	beq.n	8007eec <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007eda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ede:	d103      	bne.n	8007ee8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007ee6:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8007ee8:	2303      	movs	r3, #3
 8007eea:	e017      	b.n	8007f1c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007eec:	897b      	ldrh	r3, [r7, #10]
 8007eee:	11db      	asrs	r3, r3, #7
 8007ef0:	b2db      	uxtb	r3, r3
 8007ef2:	f003 0306 	and.w	r3, r3, #6
 8007ef6:	b2db      	uxtb	r3, r3
 8007ef8:	f063 030e 	orn	r3, r3, #14
 8007efc:	b2da      	uxtb	r2, r3
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	687a      	ldr	r2, [r7, #4]
 8007f08:	4907      	ldr	r1, [pc, #28]	@ (8007f28 <I2C_MasterRequestRead+0x198>)
 8007f0a:	68f8      	ldr	r0, [r7, #12]
 8007f0c:	f000 f9e3 	bl	80082d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007f10:	4603      	mov	r3, r0
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d001      	beq.n	8007f1a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8007f16:	2301      	movs	r3, #1
 8007f18:	e000      	b.n	8007f1c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8007f1a:	2300      	movs	r3, #0
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3718      	adds	r7, #24
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}
 8007f24:	00010008 	.word	0x00010008
 8007f28:	00010002 	.word	0x00010002

08007f2c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b088      	sub	sp, #32
 8007f30:	af02      	add	r7, sp, #8
 8007f32:	60f8      	str	r0, [r7, #12]
 8007f34:	4608      	mov	r0, r1
 8007f36:	4611      	mov	r1, r2
 8007f38:	461a      	mov	r2, r3
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	817b      	strh	r3, [r7, #10]
 8007f3e:	460b      	mov	r3, r1
 8007f40:	813b      	strh	r3, [r7, #8]
 8007f42:	4613      	mov	r3, r2
 8007f44:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	681a      	ldr	r2, [r3, #0]
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007f54:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f58:	9300      	str	r3, [sp, #0]
 8007f5a:	6a3b      	ldr	r3, [r7, #32]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007f62:	68f8      	ldr	r0, [r7, #12]
 8007f64:	f000 f960 	bl	8008228 <I2C_WaitOnFlagUntilTimeout>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d00d      	beq.n	8007f8a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f7c:	d103      	bne.n	8007f86 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007f84:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007f86:	2303      	movs	r3, #3
 8007f88:	e05f      	b.n	800804a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007f8a:	897b      	ldrh	r3, [r7, #10]
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	461a      	mov	r2, r3
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007f98:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f9c:	6a3a      	ldr	r2, [r7, #32]
 8007f9e:	492d      	ldr	r1, [pc, #180]	@ (8008054 <I2C_RequestMemoryWrite+0x128>)
 8007fa0:	68f8      	ldr	r0, [r7, #12]
 8007fa2:	f000 f998 	bl	80082d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d001      	beq.n	8007fb0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007fac:	2301      	movs	r3, #1
 8007fae:	e04c      	b.n	800804a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	617b      	str	r3, [r7, #20]
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	695b      	ldr	r3, [r3, #20]
 8007fba:	617b      	str	r3, [r7, #20]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	699b      	ldr	r3, [r3, #24]
 8007fc2:	617b      	str	r3, [r7, #20]
 8007fc4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007fc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fc8:	6a39      	ldr	r1, [r7, #32]
 8007fca:	68f8      	ldr	r0, [r7, #12]
 8007fcc:	f000 fa02 	bl	80083d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d00d      	beq.n	8007ff2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fda:	2b04      	cmp	r3, #4
 8007fdc:	d107      	bne.n	8007fee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007fec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	e02b      	b.n	800804a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007ff2:	88fb      	ldrh	r3, [r7, #6]
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	d105      	bne.n	8008004 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007ff8:	893b      	ldrh	r3, [r7, #8]
 8007ffa:	b2da      	uxtb	r2, r3
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	611a      	str	r2, [r3, #16]
 8008002:	e021      	b.n	8008048 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008004:	893b      	ldrh	r3, [r7, #8]
 8008006:	0a1b      	lsrs	r3, r3, #8
 8008008:	b29b      	uxth	r3, r3
 800800a:	b2da      	uxtb	r2, r3
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008012:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008014:	6a39      	ldr	r1, [r7, #32]
 8008016:	68f8      	ldr	r0, [r7, #12]
 8008018:	f000 f9dc 	bl	80083d4 <I2C_WaitOnTXEFlagUntilTimeout>
 800801c:	4603      	mov	r3, r0
 800801e:	2b00      	cmp	r3, #0
 8008020:	d00d      	beq.n	800803e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008026:	2b04      	cmp	r3, #4
 8008028:	d107      	bne.n	800803a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	681a      	ldr	r2, [r3, #0]
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008038:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800803a:	2301      	movs	r3, #1
 800803c:	e005      	b.n	800804a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800803e:	893b      	ldrh	r3, [r7, #8]
 8008040:	b2da      	uxtb	r2, r3
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008048:	2300      	movs	r3, #0
}
 800804a:	4618      	mov	r0, r3
 800804c:	3718      	adds	r7, #24
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
 8008052:	bf00      	nop
 8008054:	00010002 	.word	0x00010002

08008058 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b088      	sub	sp, #32
 800805c:	af02      	add	r7, sp, #8
 800805e:	60f8      	str	r0, [r7, #12]
 8008060:	4608      	mov	r0, r1
 8008062:	4611      	mov	r1, r2
 8008064:	461a      	mov	r2, r3
 8008066:	4603      	mov	r3, r0
 8008068:	817b      	strh	r3, [r7, #10]
 800806a:	460b      	mov	r3, r1
 800806c:	813b      	strh	r3, [r7, #8]
 800806e:	4613      	mov	r3, r2
 8008070:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	681a      	ldr	r2, [r3, #0]
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008080:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	681a      	ldr	r2, [r3, #0]
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008090:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008094:	9300      	str	r3, [sp, #0]
 8008096:	6a3b      	ldr	r3, [r7, #32]
 8008098:	2200      	movs	r2, #0
 800809a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800809e:	68f8      	ldr	r0, [r7, #12]
 80080a0:	f000 f8c2 	bl	8008228 <I2C_WaitOnFlagUntilTimeout>
 80080a4:	4603      	mov	r3, r0
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d00d      	beq.n	80080c6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080b8:	d103      	bne.n	80080c2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80080c0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80080c2:	2303      	movs	r3, #3
 80080c4:	e0aa      	b.n	800821c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80080c6:	897b      	ldrh	r3, [r7, #10]
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	461a      	mov	r2, r3
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80080d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80080d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080d8:	6a3a      	ldr	r2, [r7, #32]
 80080da:	4952      	ldr	r1, [pc, #328]	@ (8008224 <I2C_RequestMemoryRead+0x1cc>)
 80080dc:	68f8      	ldr	r0, [r7, #12]
 80080de:	f000 f8fa 	bl	80082d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80080e2:	4603      	mov	r3, r0
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d001      	beq.n	80080ec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80080e8:	2301      	movs	r3, #1
 80080ea:	e097      	b.n	800821c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80080ec:	2300      	movs	r3, #0
 80080ee:	617b      	str	r3, [r7, #20]
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	695b      	ldr	r3, [r3, #20]
 80080f6:	617b      	str	r3, [r7, #20]
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	699b      	ldr	r3, [r3, #24]
 80080fe:	617b      	str	r3, [r7, #20]
 8008100:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008102:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008104:	6a39      	ldr	r1, [r7, #32]
 8008106:	68f8      	ldr	r0, [r7, #12]
 8008108:	f000 f964 	bl	80083d4 <I2C_WaitOnTXEFlagUntilTimeout>
 800810c:	4603      	mov	r3, r0
 800810e:	2b00      	cmp	r3, #0
 8008110:	d00d      	beq.n	800812e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008116:	2b04      	cmp	r3, #4
 8008118:	d107      	bne.n	800812a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	681a      	ldr	r2, [r3, #0]
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008128:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800812a:	2301      	movs	r3, #1
 800812c:	e076      	b.n	800821c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800812e:	88fb      	ldrh	r3, [r7, #6]
 8008130:	2b01      	cmp	r3, #1
 8008132:	d105      	bne.n	8008140 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008134:	893b      	ldrh	r3, [r7, #8]
 8008136:	b2da      	uxtb	r2, r3
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	611a      	str	r2, [r3, #16]
 800813e:	e021      	b.n	8008184 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008140:	893b      	ldrh	r3, [r7, #8]
 8008142:	0a1b      	lsrs	r3, r3, #8
 8008144:	b29b      	uxth	r3, r3
 8008146:	b2da      	uxtb	r2, r3
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800814e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008150:	6a39      	ldr	r1, [r7, #32]
 8008152:	68f8      	ldr	r0, [r7, #12]
 8008154:	f000 f93e 	bl	80083d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008158:	4603      	mov	r3, r0
 800815a:	2b00      	cmp	r3, #0
 800815c:	d00d      	beq.n	800817a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008162:	2b04      	cmp	r3, #4
 8008164:	d107      	bne.n	8008176 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008174:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008176:	2301      	movs	r3, #1
 8008178:	e050      	b.n	800821c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800817a:	893b      	ldrh	r3, [r7, #8]
 800817c:	b2da      	uxtb	r2, r3
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008184:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008186:	6a39      	ldr	r1, [r7, #32]
 8008188:	68f8      	ldr	r0, [r7, #12]
 800818a:	f000 f923 	bl	80083d4 <I2C_WaitOnTXEFlagUntilTimeout>
 800818e:	4603      	mov	r3, r0
 8008190:	2b00      	cmp	r3, #0
 8008192:	d00d      	beq.n	80081b0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008198:	2b04      	cmp	r3, #4
 800819a:	d107      	bne.n	80081ac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80081aa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80081ac:	2301      	movs	r3, #1
 80081ae:	e035      	b.n	800821c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80081be:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80081c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081c2:	9300      	str	r3, [sp, #0]
 80081c4:	6a3b      	ldr	r3, [r7, #32]
 80081c6:	2200      	movs	r2, #0
 80081c8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80081cc:	68f8      	ldr	r0, [r7, #12]
 80081ce:	f000 f82b 	bl	8008228 <I2C_WaitOnFlagUntilTimeout>
 80081d2:	4603      	mov	r3, r0
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d00d      	beq.n	80081f4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80081e6:	d103      	bne.n	80081f0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80081ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80081f0:	2303      	movs	r3, #3
 80081f2:	e013      	b.n	800821c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80081f4:	897b      	ldrh	r3, [r7, #10]
 80081f6:	b2db      	uxtb	r3, r3
 80081f8:	f043 0301 	orr.w	r3, r3, #1
 80081fc:	b2da      	uxtb	r2, r3
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008206:	6a3a      	ldr	r2, [r7, #32]
 8008208:	4906      	ldr	r1, [pc, #24]	@ (8008224 <I2C_RequestMemoryRead+0x1cc>)
 800820a:	68f8      	ldr	r0, [r7, #12]
 800820c:	f000 f863 	bl	80082d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008210:	4603      	mov	r3, r0
 8008212:	2b00      	cmp	r3, #0
 8008214:	d001      	beq.n	800821a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008216:	2301      	movs	r3, #1
 8008218:	e000      	b.n	800821c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800821a:	2300      	movs	r3, #0
}
 800821c:	4618      	mov	r0, r3
 800821e:	3718      	adds	r7, #24
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}
 8008224:	00010002 	.word	0x00010002

08008228 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b084      	sub	sp, #16
 800822c:	af00      	add	r7, sp, #0
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	60b9      	str	r1, [r7, #8]
 8008232:	603b      	str	r3, [r7, #0]
 8008234:	4613      	mov	r3, r2
 8008236:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008238:	e025      	b.n	8008286 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008240:	d021      	beq.n	8008286 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008242:	f7fd fd5b 	bl	8005cfc <HAL_GetTick>
 8008246:	4602      	mov	r2, r0
 8008248:	69bb      	ldr	r3, [r7, #24]
 800824a:	1ad3      	subs	r3, r2, r3
 800824c:	683a      	ldr	r2, [r7, #0]
 800824e:	429a      	cmp	r2, r3
 8008250:	d302      	bcc.n	8008258 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d116      	bne.n	8008286 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2200      	movs	r2, #0
 800825c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2220      	movs	r2, #32
 8008262:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2200      	movs	r2, #0
 800826a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008272:	f043 0220 	orr.w	r2, r3, #32
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2200      	movs	r2, #0
 800827e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8008282:	2301      	movs	r3, #1
 8008284:	e023      	b.n	80082ce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	0c1b      	lsrs	r3, r3, #16
 800828a:	b2db      	uxtb	r3, r3
 800828c:	2b01      	cmp	r3, #1
 800828e:	d10d      	bne.n	80082ac <I2C_WaitOnFlagUntilTimeout+0x84>
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	695b      	ldr	r3, [r3, #20]
 8008296:	43da      	mvns	r2, r3
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	4013      	ands	r3, r2
 800829c:	b29b      	uxth	r3, r3
 800829e:	2b00      	cmp	r3, #0
 80082a0:	bf0c      	ite	eq
 80082a2:	2301      	moveq	r3, #1
 80082a4:	2300      	movne	r3, #0
 80082a6:	b2db      	uxtb	r3, r3
 80082a8:	461a      	mov	r2, r3
 80082aa:	e00c      	b.n	80082c6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	699b      	ldr	r3, [r3, #24]
 80082b2:	43da      	mvns	r2, r3
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	4013      	ands	r3, r2
 80082b8:	b29b      	uxth	r3, r3
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	bf0c      	ite	eq
 80082be:	2301      	moveq	r3, #1
 80082c0:	2300      	movne	r3, #0
 80082c2:	b2db      	uxtb	r3, r3
 80082c4:	461a      	mov	r2, r3
 80082c6:	79fb      	ldrb	r3, [r7, #7]
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d0b6      	beq.n	800823a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80082cc:	2300      	movs	r3, #0
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3710      	adds	r7, #16
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}

080082d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80082d6:	b580      	push	{r7, lr}
 80082d8:	b084      	sub	sp, #16
 80082da:	af00      	add	r7, sp, #0
 80082dc:	60f8      	str	r0, [r7, #12]
 80082de:	60b9      	str	r1, [r7, #8]
 80082e0:	607a      	str	r2, [r7, #4]
 80082e2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80082e4:	e051      	b.n	800838a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	695b      	ldr	r3, [r3, #20]
 80082ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80082f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80082f4:	d123      	bne.n	800833e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	681a      	ldr	r2, [r3, #0]
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008304:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800830e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2200      	movs	r2, #0
 8008314:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2220      	movs	r2, #32
 800831a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	2200      	movs	r2, #0
 8008322:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800832a:	f043 0204 	orr.w	r2, r3, #4
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2200      	movs	r2, #0
 8008336:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800833a:	2301      	movs	r3, #1
 800833c:	e046      	b.n	80083cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008344:	d021      	beq.n	800838a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008346:	f7fd fcd9 	bl	8005cfc <HAL_GetTick>
 800834a:	4602      	mov	r2, r0
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	1ad3      	subs	r3, r2, r3
 8008350:	687a      	ldr	r2, [r7, #4]
 8008352:	429a      	cmp	r2, r3
 8008354:	d302      	bcc.n	800835c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d116      	bne.n	800838a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2200      	movs	r2, #0
 8008360:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2220      	movs	r2, #32
 8008366:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2200      	movs	r2, #0
 800836e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008376:	f043 0220 	orr.w	r2, r3, #32
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2200      	movs	r2, #0
 8008382:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8008386:	2301      	movs	r3, #1
 8008388:	e020      	b.n	80083cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	0c1b      	lsrs	r3, r3, #16
 800838e:	b2db      	uxtb	r3, r3
 8008390:	2b01      	cmp	r3, #1
 8008392:	d10c      	bne.n	80083ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	695b      	ldr	r3, [r3, #20]
 800839a:	43da      	mvns	r2, r3
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	4013      	ands	r3, r2
 80083a0:	b29b      	uxth	r3, r3
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	bf14      	ite	ne
 80083a6:	2301      	movne	r3, #1
 80083a8:	2300      	moveq	r3, #0
 80083aa:	b2db      	uxtb	r3, r3
 80083ac:	e00b      	b.n	80083c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	699b      	ldr	r3, [r3, #24]
 80083b4:	43da      	mvns	r2, r3
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	4013      	ands	r3, r2
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	2b00      	cmp	r3, #0
 80083be:	bf14      	ite	ne
 80083c0:	2301      	movne	r3, #1
 80083c2:	2300      	moveq	r3, #0
 80083c4:	b2db      	uxtb	r3, r3
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d18d      	bne.n	80082e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80083ca:	2300      	movs	r3, #0
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3710      	adds	r7, #16
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	60f8      	str	r0, [r7, #12]
 80083dc:	60b9      	str	r1, [r7, #8]
 80083de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80083e0:	e02d      	b.n	800843e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80083e2:	68f8      	ldr	r0, [r7, #12]
 80083e4:	f000 f8ce 	bl	8008584 <I2C_IsAcknowledgeFailed>
 80083e8:	4603      	mov	r3, r0
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d001      	beq.n	80083f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80083ee:	2301      	movs	r3, #1
 80083f0:	e02d      	b.n	800844e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083f8:	d021      	beq.n	800843e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083fa:	f7fd fc7f 	bl	8005cfc <HAL_GetTick>
 80083fe:	4602      	mov	r2, r0
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	1ad3      	subs	r3, r2, r3
 8008404:	68ba      	ldr	r2, [r7, #8]
 8008406:	429a      	cmp	r2, r3
 8008408:	d302      	bcc.n	8008410 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d116      	bne.n	800843e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	2200      	movs	r2, #0
 8008414:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	2220      	movs	r2, #32
 800841a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2200      	movs	r2, #0
 8008422:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800842a:	f043 0220 	orr.w	r2, r3, #32
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2200      	movs	r2, #0
 8008436:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800843a:	2301      	movs	r3, #1
 800843c:	e007      	b.n	800844e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	695b      	ldr	r3, [r3, #20]
 8008444:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008448:	2b80      	cmp	r3, #128	@ 0x80
 800844a:	d1ca      	bne.n	80083e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800844c:	2300      	movs	r3, #0
}
 800844e:	4618      	mov	r0, r3
 8008450:	3710      	adds	r7, #16
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}

08008456 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008456:	b580      	push	{r7, lr}
 8008458:	b084      	sub	sp, #16
 800845a:	af00      	add	r7, sp, #0
 800845c:	60f8      	str	r0, [r7, #12]
 800845e:	60b9      	str	r1, [r7, #8]
 8008460:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008462:	e02d      	b.n	80084c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008464:	68f8      	ldr	r0, [r7, #12]
 8008466:	f000 f88d 	bl	8008584 <I2C_IsAcknowledgeFailed>
 800846a:	4603      	mov	r3, r0
 800846c:	2b00      	cmp	r3, #0
 800846e:	d001      	beq.n	8008474 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008470:	2301      	movs	r3, #1
 8008472:	e02d      	b.n	80084d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800847a:	d021      	beq.n	80084c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800847c:	f7fd fc3e 	bl	8005cfc <HAL_GetTick>
 8008480:	4602      	mov	r2, r0
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	1ad3      	subs	r3, r2, r3
 8008486:	68ba      	ldr	r2, [r7, #8]
 8008488:	429a      	cmp	r2, r3
 800848a:	d302      	bcc.n	8008492 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d116      	bne.n	80084c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2200      	movs	r2, #0
 8008496:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2220      	movs	r2, #32
 800849c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084ac:	f043 0220 	orr.w	r2, r3, #32
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2200      	movs	r2, #0
 80084b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80084bc:	2301      	movs	r3, #1
 80084be:	e007      	b.n	80084d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	695b      	ldr	r3, [r3, #20]
 80084c6:	f003 0304 	and.w	r3, r3, #4
 80084ca:	2b04      	cmp	r3, #4
 80084cc:	d1ca      	bne.n	8008464 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80084ce:	2300      	movs	r3, #0
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3710      	adds	r7, #16
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	60f8      	str	r0, [r7, #12]
 80084e0:	60b9      	str	r1, [r7, #8]
 80084e2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80084e4:	e042      	b.n	800856c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	695b      	ldr	r3, [r3, #20]
 80084ec:	f003 0310 	and.w	r3, r3, #16
 80084f0:	2b10      	cmp	r3, #16
 80084f2:	d119      	bne.n	8008528 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f06f 0210 	mvn.w	r2, #16
 80084fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2200      	movs	r2, #0
 8008502:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	2220      	movs	r2, #32
 8008508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	2200      	movs	r2, #0
 8008510:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2200      	movs	r2, #0
 8008520:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008524:	2301      	movs	r3, #1
 8008526:	e029      	b.n	800857c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008528:	f7fd fbe8 	bl	8005cfc <HAL_GetTick>
 800852c:	4602      	mov	r2, r0
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	1ad3      	subs	r3, r2, r3
 8008532:	68ba      	ldr	r2, [r7, #8]
 8008534:	429a      	cmp	r2, r3
 8008536:	d302      	bcc.n	800853e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d116      	bne.n	800856c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2200      	movs	r2, #0
 8008542:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	2220      	movs	r2, #32
 8008548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2200      	movs	r2, #0
 8008550:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008558:	f043 0220 	orr.w	r2, r3, #32
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2200      	movs	r2, #0
 8008564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008568:	2301      	movs	r3, #1
 800856a:	e007      	b.n	800857c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	695b      	ldr	r3, [r3, #20]
 8008572:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008576:	2b40      	cmp	r3, #64	@ 0x40
 8008578:	d1b5      	bne.n	80084e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800857a:	2300      	movs	r3, #0
}
 800857c:	4618      	mov	r0, r3
 800857e:	3710      	adds	r7, #16
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}

08008584 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008584:	b480      	push	{r7}
 8008586:	b083      	sub	sp, #12
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	695b      	ldr	r3, [r3, #20]
 8008592:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008596:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800859a:	d11b      	bne.n	80085d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80085a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2200      	movs	r2, #0
 80085aa:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2220      	movs	r2, #32
 80085b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2200      	movs	r2, #0
 80085b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085c0:	f043 0204 	orr.w	r2, r3, #4
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2200      	movs	r2, #0
 80085cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80085d0:	2301      	movs	r3, #1
 80085d2:	e000      	b.n	80085d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80085d4:	2300      	movs	r3, #0
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	370c      	adds	r7, #12
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr
	...

080085e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b084      	sub	sp, #16
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d101      	bne.n	80085f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80085f4:	2301      	movs	r3, #1
 80085f6:	e0cc      	b.n	8008792 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80085f8:	4b68      	ldr	r3, [pc, #416]	@ (800879c <HAL_RCC_ClockConfig+0x1b8>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f003 030f 	and.w	r3, r3, #15
 8008600:	683a      	ldr	r2, [r7, #0]
 8008602:	429a      	cmp	r2, r3
 8008604:	d90c      	bls.n	8008620 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008606:	4b65      	ldr	r3, [pc, #404]	@ (800879c <HAL_RCC_ClockConfig+0x1b8>)
 8008608:	683a      	ldr	r2, [r7, #0]
 800860a:	b2d2      	uxtb	r2, r2
 800860c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800860e:	4b63      	ldr	r3, [pc, #396]	@ (800879c <HAL_RCC_ClockConfig+0x1b8>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f003 030f 	and.w	r3, r3, #15
 8008616:	683a      	ldr	r2, [r7, #0]
 8008618:	429a      	cmp	r2, r3
 800861a:	d001      	beq.n	8008620 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800861c:	2301      	movs	r3, #1
 800861e:	e0b8      	b.n	8008792 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f003 0302 	and.w	r3, r3, #2
 8008628:	2b00      	cmp	r3, #0
 800862a:	d020      	beq.n	800866e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f003 0304 	and.w	r3, r3, #4
 8008634:	2b00      	cmp	r3, #0
 8008636:	d005      	beq.n	8008644 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008638:	4b59      	ldr	r3, [pc, #356]	@ (80087a0 <HAL_RCC_ClockConfig+0x1bc>)
 800863a:	689b      	ldr	r3, [r3, #8]
 800863c:	4a58      	ldr	r2, [pc, #352]	@ (80087a0 <HAL_RCC_ClockConfig+0x1bc>)
 800863e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008642:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f003 0308 	and.w	r3, r3, #8
 800864c:	2b00      	cmp	r3, #0
 800864e:	d005      	beq.n	800865c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008650:	4b53      	ldr	r3, [pc, #332]	@ (80087a0 <HAL_RCC_ClockConfig+0x1bc>)
 8008652:	689b      	ldr	r3, [r3, #8]
 8008654:	4a52      	ldr	r2, [pc, #328]	@ (80087a0 <HAL_RCC_ClockConfig+0x1bc>)
 8008656:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800865a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800865c:	4b50      	ldr	r3, [pc, #320]	@ (80087a0 <HAL_RCC_ClockConfig+0x1bc>)
 800865e:	689b      	ldr	r3, [r3, #8]
 8008660:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	689b      	ldr	r3, [r3, #8]
 8008668:	494d      	ldr	r1, [pc, #308]	@ (80087a0 <HAL_RCC_ClockConfig+0x1bc>)
 800866a:	4313      	orrs	r3, r2
 800866c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f003 0301 	and.w	r3, r3, #1
 8008676:	2b00      	cmp	r3, #0
 8008678:	d044      	beq.n	8008704 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	2b01      	cmp	r3, #1
 8008680:	d107      	bne.n	8008692 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008682:	4b47      	ldr	r3, [pc, #284]	@ (80087a0 <HAL_RCC_ClockConfig+0x1bc>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800868a:	2b00      	cmp	r3, #0
 800868c:	d119      	bne.n	80086c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800868e:	2301      	movs	r3, #1
 8008690:	e07f      	b.n	8008792 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	2b02      	cmp	r3, #2
 8008698:	d003      	beq.n	80086a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800869e:	2b03      	cmp	r3, #3
 80086a0:	d107      	bne.n	80086b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80086a2:	4b3f      	ldr	r3, [pc, #252]	@ (80087a0 <HAL_RCC_ClockConfig+0x1bc>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d109      	bne.n	80086c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80086ae:	2301      	movs	r3, #1
 80086b0:	e06f      	b.n	8008792 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80086b2:	4b3b      	ldr	r3, [pc, #236]	@ (80087a0 <HAL_RCC_ClockConfig+0x1bc>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f003 0302 	and.w	r3, r3, #2
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d101      	bne.n	80086c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80086be:	2301      	movs	r3, #1
 80086c0:	e067      	b.n	8008792 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80086c2:	4b37      	ldr	r3, [pc, #220]	@ (80087a0 <HAL_RCC_ClockConfig+0x1bc>)
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	f023 0203 	bic.w	r2, r3, #3
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	4934      	ldr	r1, [pc, #208]	@ (80087a0 <HAL_RCC_ClockConfig+0x1bc>)
 80086d0:	4313      	orrs	r3, r2
 80086d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80086d4:	f7fd fb12 	bl	8005cfc <HAL_GetTick>
 80086d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80086da:	e00a      	b.n	80086f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80086dc:	f7fd fb0e 	bl	8005cfc <HAL_GetTick>
 80086e0:	4602      	mov	r2, r0
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	1ad3      	subs	r3, r2, r3
 80086e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d901      	bls.n	80086f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80086ee:	2303      	movs	r3, #3
 80086f0:	e04f      	b.n	8008792 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80086f2:	4b2b      	ldr	r3, [pc, #172]	@ (80087a0 <HAL_RCC_ClockConfig+0x1bc>)
 80086f4:	689b      	ldr	r3, [r3, #8]
 80086f6:	f003 020c 	and.w	r2, r3, #12
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	009b      	lsls	r3, r3, #2
 8008700:	429a      	cmp	r2, r3
 8008702:	d1eb      	bne.n	80086dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008704:	4b25      	ldr	r3, [pc, #148]	@ (800879c <HAL_RCC_ClockConfig+0x1b8>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f003 030f 	and.w	r3, r3, #15
 800870c:	683a      	ldr	r2, [r7, #0]
 800870e:	429a      	cmp	r2, r3
 8008710:	d20c      	bcs.n	800872c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008712:	4b22      	ldr	r3, [pc, #136]	@ (800879c <HAL_RCC_ClockConfig+0x1b8>)
 8008714:	683a      	ldr	r2, [r7, #0]
 8008716:	b2d2      	uxtb	r2, r2
 8008718:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800871a:	4b20      	ldr	r3, [pc, #128]	@ (800879c <HAL_RCC_ClockConfig+0x1b8>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f003 030f 	and.w	r3, r3, #15
 8008722:	683a      	ldr	r2, [r7, #0]
 8008724:	429a      	cmp	r2, r3
 8008726:	d001      	beq.n	800872c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008728:	2301      	movs	r3, #1
 800872a:	e032      	b.n	8008792 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f003 0304 	and.w	r3, r3, #4
 8008734:	2b00      	cmp	r3, #0
 8008736:	d008      	beq.n	800874a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008738:	4b19      	ldr	r3, [pc, #100]	@ (80087a0 <HAL_RCC_ClockConfig+0x1bc>)
 800873a:	689b      	ldr	r3, [r3, #8]
 800873c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	68db      	ldr	r3, [r3, #12]
 8008744:	4916      	ldr	r1, [pc, #88]	@ (80087a0 <HAL_RCC_ClockConfig+0x1bc>)
 8008746:	4313      	orrs	r3, r2
 8008748:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f003 0308 	and.w	r3, r3, #8
 8008752:	2b00      	cmp	r3, #0
 8008754:	d009      	beq.n	800876a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008756:	4b12      	ldr	r3, [pc, #72]	@ (80087a0 <HAL_RCC_ClockConfig+0x1bc>)
 8008758:	689b      	ldr	r3, [r3, #8]
 800875a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	691b      	ldr	r3, [r3, #16]
 8008762:	00db      	lsls	r3, r3, #3
 8008764:	490e      	ldr	r1, [pc, #56]	@ (80087a0 <HAL_RCC_ClockConfig+0x1bc>)
 8008766:	4313      	orrs	r3, r2
 8008768:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800876a:	f000 f855 	bl	8008818 <HAL_RCC_GetSysClockFreq>
 800876e:	4602      	mov	r2, r0
 8008770:	4b0b      	ldr	r3, [pc, #44]	@ (80087a0 <HAL_RCC_ClockConfig+0x1bc>)
 8008772:	689b      	ldr	r3, [r3, #8]
 8008774:	091b      	lsrs	r3, r3, #4
 8008776:	f003 030f 	and.w	r3, r3, #15
 800877a:	490a      	ldr	r1, [pc, #40]	@ (80087a4 <HAL_RCC_ClockConfig+0x1c0>)
 800877c:	5ccb      	ldrb	r3, [r1, r3]
 800877e:	fa22 f303 	lsr.w	r3, r2, r3
 8008782:	4a09      	ldr	r2, [pc, #36]	@ (80087a8 <HAL_RCC_ClockConfig+0x1c4>)
 8008784:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008786:	4b09      	ldr	r3, [pc, #36]	@ (80087ac <HAL_RCC_ClockConfig+0x1c8>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4618      	mov	r0, r3
 800878c:	f7fd fa72 	bl	8005c74 <HAL_InitTick>

  return HAL_OK;
 8008790:	2300      	movs	r3, #0
}
 8008792:	4618      	mov	r0, r3
 8008794:	3710      	adds	r7, #16
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}
 800879a:	bf00      	nop
 800879c:	40023c00 	.word	0x40023c00
 80087a0:	40023800 	.word	0x40023800
 80087a4:	0800efa8 	.word	0x0800efa8
 80087a8:	20000044 	.word	0x20000044
 80087ac:	20000048 	.word	0x20000048

080087b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80087b0:	b480      	push	{r7}
 80087b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80087b4:	4b03      	ldr	r3, [pc, #12]	@ (80087c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80087b6:	681b      	ldr	r3, [r3, #0]
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	46bd      	mov	sp, r7
 80087bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c0:	4770      	bx	lr
 80087c2:	bf00      	nop
 80087c4:	20000044 	.word	0x20000044

080087c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80087cc:	f7ff fff0 	bl	80087b0 <HAL_RCC_GetHCLKFreq>
 80087d0:	4602      	mov	r2, r0
 80087d2:	4b05      	ldr	r3, [pc, #20]	@ (80087e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80087d4:	689b      	ldr	r3, [r3, #8]
 80087d6:	0a9b      	lsrs	r3, r3, #10
 80087d8:	f003 0307 	and.w	r3, r3, #7
 80087dc:	4903      	ldr	r1, [pc, #12]	@ (80087ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80087de:	5ccb      	ldrb	r3, [r1, r3]
 80087e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	bd80      	pop	{r7, pc}
 80087e8:	40023800 	.word	0x40023800
 80087ec:	0800efb8 	.word	0x0800efb8

080087f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80087f4:	f7ff ffdc 	bl	80087b0 <HAL_RCC_GetHCLKFreq>
 80087f8:	4602      	mov	r2, r0
 80087fa:	4b05      	ldr	r3, [pc, #20]	@ (8008810 <HAL_RCC_GetPCLK2Freq+0x20>)
 80087fc:	689b      	ldr	r3, [r3, #8]
 80087fe:	0b5b      	lsrs	r3, r3, #13
 8008800:	f003 0307 	and.w	r3, r3, #7
 8008804:	4903      	ldr	r1, [pc, #12]	@ (8008814 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008806:	5ccb      	ldrb	r3, [r1, r3]
 8008808:	fa22 f303 	lsr.w	r3, r2, r3
}
 800880c:	4618      	mov	r0, r3
 800880e:	bd80      	pop	{r7, pc}
 8008810:	40023800 	.word	0x40023800
 8008814:	0800efb8 	.word	0x0800efb8

08008818 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008818:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800881c:	b0ae      	sub	sp, #184	@ 0xb8
 800881e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008820:	2300      	movs	r3, #0
 8008822:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8008826:	2300      	movs	r3, #0
 8008828:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800882c:	2300      	movs	r3, #0
 800882e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8008832:	2300      	movs	r3, #0
 8008834:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8008838:	2300      	movs	r3, #0
 800883a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800883e:	4bcb      	ldr	r3, [pc, #812]	@ (8008b6c <HAL_RCC_GetSysClockFreq+0x354>)
 8008840:	689b      	ldr	r3, [r3, #8]
 8008842:	f003 030c 	and.w	r3, r3, #12
 8008846:	2b0c      	cmp	r3, #12
 8008848:	f200 8206 	bhi.w	8008c58 <HAL_RCC_GetSysClockFreq+0x440>
 800884c:	a201      	add	r2, pc, #4	@ (adr r2, 8008854 <HAL_RCC_GetSysClockFreq+0x3c>)
 800884e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008852:	bf00      	nop
 8008854:	08008889 	.word	0x08008889
 8008858:	08008c59 	.word	0x08008c59
 800885c:	08008c59 	.word	0x08008c59
 8008860:	08008c59 	.word	0x08008c59
 8008864:	08008891 	.word	0x08008891
 8008868:	08008c59 	.word	0x08008c59
 800886c:	08008c59 	.word	0x08008c59
 8008870:	08008c59 	.word	0x08008c59
 8008874:	08008899 	.word	0x08008899
 8008878:	08008c59 	.word	0x08008c59
 800887c:	08008c59 	.word	0x08008c59
 8008880:	08008c59 	.word	0x08008c59
 8008884:	08008a89 	.word	0x08008a89
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008888:	4bb9      	ldr	r3, [pc, #740]	@ (8008b70 <HAL_RCC_GetSysClockFreq+0x358>)
 800888a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 800888e:	e1e7      	b.n	8008c60 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008890:	4bb8      	ldr	r3, [pc, #736]	@ (8008b74 <HAL_RCC_GetSysClockFreq+0x35c>)
 8008892:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8008896:	e1e3      	b.n	8008c60 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008898:	4bb4      	ldr	r3, [pc, #720]	@ (8008b6c <HAL_RCC_GetSysClockFreq+0x354>)
 800889a:	685b      	ldr	r3, [r3, #4]
 800889c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80088a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80088a4:	4bb1      	ldr	r3, [pc, #708]	@ (8008b6c <HAL_RCC_GetSysClockFreq+0x354>)
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d071      	beq.n	8008994 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80088b0:	4bae      	ldr	r3, [pc, #696]	@ (8008b6c <HAL_RCC_GetSysClockFreq+0x354>)
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	099b      	lsrs	r3, r3, #6
 80088b6:	2200      	movs	r2, #0
 80088b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80088bc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80088c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80088c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80088cc:	2300      	movs	r3, #0
 80088ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80088d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80088d6:	4622      	mov	r2, r4
 80088d8:	462b      	mov	r3, r5
 80088da:	f04f 0000 	mov.w	r0, #0
 80088de:	f04f 0100 	mov.w	r1, #0
 80088e2:	0159      	lsls	r1, r3, #5
 80088e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80088e8:	0150      	lsls	r0, r2, #5
 80088ea:	4602      	mov	r2, r0
 80088ec:	460b      	mov	r3, r1
 80088ee:	4621      	mov	r1, r4
 80088f0:	1a51      	subs	r1, r2, r1
 80088f2:	6439      	str	r1, [r7, #64]	@ 0x40
 80088f4:	4629      	mov	r1, r5
 80088f6:	eb63 0301 	sbc.w	r3, r3, r1
 80088fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80088fc:	f04f 0200 	mov.w	r2, #0
 8008900:	f04f 0300 	mov.w	r3, #0
 8008904:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8008908:	4649      	mov	r1, r9
 800890a:	018b      	lsls	r3, r1, #6
 800890c:	4641      	mov	r1, r8
 800890e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008912:	4641      	mov	r1, r8
 8008914:	018a      	lsls	r2, r1, #6
 8008916:	4641      	mov	r1, r8
 8008918:	1a51      	subs	r1, r2, r1
 800891a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800891c:	4649      	mov	r1, r9
 800891e:	eb63 0301 	sbc.w	r3, r3, r1
 8008922:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008924:	f04f 0200 	mov.w	r2, #0
 8008928:	f04f 0300 	mov.w	r3, #0
 800892c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8008930:	4649      	mov	r1, r9
 8008932:	00cb      	lsls	r3, r1, #3
 8008934:	4641      	mov	r1, r8
 8008936:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800893a:	4641      	mov	r1, r8
 800893c:	00ca      	lsls	r2, r1, #3
 800893e:	4610      	mov	r0, r2
 8008940:	4619      	mov	r1, r3
 8008942:	4603      	mov	r3, r0
 8008944:	4622      	mov	r2, r4
 8008946:	189b      	adds	r3, r3, r2
 8008948:	633b      	str	r3, [r7, #48]	@ 0x30
 800894a:	462b      	mov	r3, r5
 800894c:	460a      	mov	r2, r1
 800894e:	eb42 0303 	adc.w	r3, r2, r3
 8008952:	637b      	str	r3, [r7, #52]	@ 0x34
 8008954:	f04f 0200 	mov.w	r2, #0
 8008958:	f04f 0300 	mov.w	r3, #0
 800895c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8008960:	4629      	mov	r1, r5
 8008962:	024b      	lsls	r3, r1, #9
 8008964:	4621      	mov	r1, r4
 8008966:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800896a:	4621      	mov	r1, r4
 800896c:	024a      	lsls	r2, r1, #9
 800896e:	4610      	mov	r0, r2
 8008970:	4619      	mov	r1, r3
 8008972:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008976:	2200      	movs	r2, #0
 8008978:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800897c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008980:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8008984:	f7f8 f9e8 	bl	8000d58 <__aeabi_uldivmod>
 8008988:	4602      	mov	r2, r0
 800898a:	460b      	mov	r3, r1
 800898c:	4613      	mov	r3, r2
 800898e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008992:	e067      	b.n	8008a64 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008994:	4b75      	ldr	r3, [pc, #468]	@ (8008b6c <HAL_RCC_GetSysClockFreq+0x354>)
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	099b      	lsrs	r3, r3, #6
 800899a:	2200      	movs	r2, #0
 800899c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80089a0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80089a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80089a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089ac:	67bb      	str	r3, [r7, #120]	@ 0x78
 80089ae:	2300      	movs	r3, #0
 80089b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80089b2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80089b6:	4622      	mov	r2, r4
 80089b8:	462b      	mov	r3, r5
 80089ba:	f04f 0000 	mov.w	r0, #0
 80089be:	f04f 0100 	mov.w	r1, #0
 80089c2:	0159      	lsls	r1, r3, #5
 80089c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80089c8:	0150      	lsls	r0, r2, #5
 80089ca:	4602      	mov	r2, r0
 80089cc:	460b      	mov	r3, r1
 80089ce:	4621      	mov	r1, r4
 80089d0:	1a51      	subs	r1, r2, r1
 80089d2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80089d4:	4629      	mov	r1, r5
 80089d6:	eb63 0301 	sbc.w	r3, r3, r1
 80089da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80089dc:	f04f 0200 	mov.w	r2, #0
 80089e0:	f04f 0300 	mov.w	r3, #0
 80089e4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80089e8:	4649      	mov	r1, r9
 80089ea:	018b      	lsls	r3, r1, #6
 80089ec:	4641      	mov	r1, r8
 80089ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80089f2:	4641      	mov	r1, r8
 80089f4:	018a      	lsls	r2, r1, #6
 80089f6:	4641      	mov	r1, r8
 80089f8:	ebb2 0a01 	subs.w	sl, r2, r1
 80089fc:	4649      	mov	r1, r9
 80089fe:	eb63 0b01 	sbc.w	fp, r3, r1
 8008a02:	f04f 0200 	mov.w	r2, #0
 8008a06:	f04f 0300 	mov.w	r3, #0
 8008a0a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008a0e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008a12:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008a16:	4692      	mov	sl, r2
 8008a18:	469b      	mov	fp, r3
 8008a1a:	4623      	mov	r3, r4
 8008a1c:	eb1a 0303 	adds.w	r3, sl, r3
 8008a20:	623b      	str	r3, [r7, #32]
 8008a22:	462b      	mov	r3, r5
 8008a24:	eb4b 0303 	adc.w	r3, fp, r3
 8008a28:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a2a:	f04f 0200 	mov.w	r2, #0
 8008a2e:	f04f 0300 	mov.w	r3, #0
 8008a32:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8008a36:	4629      	mov	r1, r5
 8008a38:	028b      	lsls	r3, r1, #10
 8008a3a:	4621      	mov	r1, r4
 8008a3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008a40:	4621      	mov	r1, r4
 8008a42:	028a      	lsls	r2, r1, #10
 8008a44:	4610      	mov	r0, r2
 8008a46:	4619      	mov	r1, r3
 8008a48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	673b      	str	r3, [r7, #112]	@ 0x70
 8008a50:	677a      	str	r2, [r7, #116]	@ 0x74
 8008a52:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8008a56:	f7f8 f97f 	bl	8000d58 <__aeabi_uldivmod>
 8008a5a:	4602      	mov	r2, r0
 8008a5c:	460b      	mov	r3, r1
 8008a5e:	4613      	mov	r3, r2
 8008a60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008a64:	4b41      	ldr	r3, [pc, #260]	@ (8008b6c <HAL_RCC_GetSysClockFreq+0x354>)
 8008a66:	685b      	ldr	r3, [r3, #4]
 8008a68:	0c1b      	lsrs	r3, r3, #16
 8008a6a:	f003 0303 	and.w	r3, r3, #3
 8008a6e:	3301      	adds	r3, #1
 8008a70:	005b      	lsls	r3, r3, #1
 8008a72:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8008a76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008a7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a82:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8008a86:	e0eb      	b.n	8008c60 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008a88:	4b38      	ldr	r3, [pc, #224]	@ (8008b6c <HAL_RCC_GetSysClockFreq+0x354>)
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008a90:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008a94:	4b35      	ldr	r3, [pc, #212]	@ (8008b6c <HAL_RCC_GetSysClockFreq+0x354>)
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d06b      	beq.n	8008b78 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008aa0:	4b32      	ldr	r3, [pc, #200]	@ (8008b6c <HAL_RCC_GetSysClockFreq+0x354>)
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	099b      	lsrs	r3, r3, #6
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008aaa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008aac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ab2:	663b      	str	r3, [r7, #96]	@ 0x60
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	667b      	str	r3, [r7, #100]	@ 0x64
 8008ab8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8008abc:	4622      	mov	r2, r4
 8008abe:	462b      	mov	r3, r5
 8008ac0:	f04f 0000 	mov.w	r0, #0
 8008ac4:	f04f 0100 	mov.w	r1, #0
 8008ac8:	0159      	lsls	r1, r3, #5
 8008aca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008ace:	0150      	lsls	r0, r2, #5
 8008ad0:	4602      	mov	r2, r0
 8008ad2:	460b      	mov	r3, r1
 8008ad4:	4621      	mov	r1, r4
 8008ad6:	1a51      	subs	r1, r2, r1
 8008ad8:	61b9      	str	r1, [r7, #24]
 8008ada:	4629      	mov	r1, r5
 8008adc:	eb63 0301 	sbc.w	r3, r3, r1
 8008ae0:	61fb      	str	r3, [r7, #28]
 8008ae2:	f04f 0200 	mov.w	r2, #0
 8008ae6:	f04f 0300 	mov.w	r3, #0
 8008aea:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8008aee:	4659      	mov	r1, fp
 8008af0:	018b      	lsls	r3, r1, #6
 8008af2:	4651      	mov	r1, sl
 8008af4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008af8:	4651      	mov	r1, sl
 8008afa:	018a      	lsls	r2, r1, #6
 8008afc:	4651      	mov	r1, sl
 8008afe:	ebb2 0801 	subs.w	r8, r2, r1
 8008b02:	4659      	mov	r1, fp
 8008b04:	eb63 0901 	sbc.w	r9, r3, r1
 8008b08:	f04f 0200 	mov.w	r2, #0
 8008b0c:	f04f 0300 	mov.w	r3, #0
 8008b10:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008b14:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008b18:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008b1c:	4690      	mov	r8, r2
 8008b1e:	4699      	mov	r9, r3
 8008b20:	4623      	mov	r3, r4
 8008b22:	eb18 0303 	adds.w	r3, r8, r3
 8008b26:	613b      	str	r3, [r7, #16]
 8008b28:	462b      	mov	r3, r5
 8008b2a:	eb49 0303 	adc.w	r3, r9, r3
 8008b2e:	617b      	str	r3, [r7, #20]
 8008b30:	f04f 0200 	mov.w	r2, #0
 8008b34:	f04f 0300 	mov.w	r3, #0
 8008b38:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8008b3c:	4629      	mov	r1, r5
 8008b3e:	024b      	lsls	r3, r1, #9
 8008b40:	4621      	mov	r1, r4
 8008b42:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008b46:	4621      	mov	r1, r4
 8008b48:	024a      	lsls	r2, r1, #9
 8008b4a:	4610      	mov	r0, r2
 8008b4c:	4619      	mov	r1, r3
 8008b4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008b52:	2200      	movs	r2, #0
 8008b54:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008b56:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8008b58:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008b5c:	f7f8 f8fc 	bl	8000d58 <__aeabi_uldivmod>
 8008b60:	4602      	mov	r2, r0
 8008b62:	460b      	mov	r3, r1
 8008b64:	4613      	mov	r3, r2
 8008b66:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008b6a:	e065      	b.n	8008c38 <HAL_RCC_GetSysClockFreq+0x420>
 8008b6c:	40023800 	.word	0x40023800
 8008b70:	00f42400 	.word	0x00f42400
 8008b74:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008b78:	4b3d      	ldr	r3, [pc, #244]	@ (8008c70 <HAL_RCC_GetSysClockFreq+0x458>)
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	099b      	lsrs	r3, r3, #6
 8008b7e:	2200      	movs	r2, #0
 8008b80:	4618      	mov	r0, r3
 8008b82:	4611      	mov	r1, r2
 8008b84:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008b88:	653b      	str	r3, [r7, #80]	@ 0x50
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	657b      	str	r3, [r7, #84]	@ 0x54
 8008b8e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8008b92:	4642      	mov	r2, r8
 8008b94:	464b      	mov	r3, r9
 8008b96:	f04f 0000 	mov.w	r0, #0
 8008b9a:	f04f 0100 	mov.w	r1, #0
 8008b9e:	0159      	lsls	r1, r3, #5
 8008ba0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008ba4:	0150      	lsls	r0, r2, #5
 8008ba6:	4602      	mov	r2, r0
 8008ba8:	460b      	mov	r3, r1
 8008baa:	4641      	mov	r1, r8
 8008bac:	1a51      	subs	r1, r2, r1
 8008bae:	60b9      	str	r1, [r7, #8]
 8008bb0:	4649      	mov	r1, r9
 8008bb2:	eb63 0301 	sbc.w	r3, r3, r1
 8008bb6:	60fb      	str	r3, [r7, #12]
 8008bb8:	f04f 0200 	mov.w	r2, #0
 8008bbc:	f04f 0300 	mov.w	r3, #0
 8008bc0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8008bc4:	4659      	mov	r1, fp
 8008bc6:	018b      	lsls	r3, r1, #6
 8008bc8:	4651      	mov	r1, sl
 8008bca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008bce:	4651      	mov	r1, sl
 8008bd0:	018a      	lsls	r2, r1, #6
 8008bd2:	4651      	mov	r1, sl
 8008bd4:	1a54      	subs	r4, r2, r1
 8008bd6:	4659      	mov	r1, fp
 8008bd8:	eb63 0501 	sbc.w	r5, r3, r1
 8008bdc:	f04f 0200 	mov.w	r2, #0
 8008be0:	f04f 0300 	mov.w	r3, #0
 8008be4:	00eb      	lsls	r3, r5, #3
 8008be6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008bea:	00e2      	lsls	r2, r4, #3
 8008bec:	4614      	mov	r4, r2
 8008bee:	461d      	mov	r5, r3
 8008bf0:	4643      	mov	r3, r8
 8008bf2:	18e3      	adds	r3, r4, r3
 8008bf4:	603b      	str	r3, [r7, #0]
 8008bf6:	464b      	mov	r3, r9
 8008bf8:	eb45 0303 	adc.w	r3, r5, r3
 8008bfc:	607b      	str	r3, [r7, #4]
 8008bfe:	f04f 0200 	mov.w	r2, #0
 8008c02:	f04f 0300 	mov.w	r3, #0
 8008c06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008c0a:	4629      	mov	r1, r5
 8008c0c:	028b      	lsls	r3, r1, #10
 8008c0e:	4621      	mov	r1, r4
 8008c10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008c14:	4621      	mov	r1, r4
 8008c16:	028a      	lsls	r2, r1, #10
 8008c18:	4610      	mov	r0, r2
 8008c1a:	4619      	mov	r1, r3
 8008c1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c20:	2200      	movs	r2, #0
 8008c22:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c24:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8008c26:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008c2a:	f7f8 f895 	bl	8000d58 <__aeabi_uldivmod>
 8008c2e:	4602      	mov	r2, r0
 8008c30:	460b      	mov	r3, r1
 8008c32:	4613      	mov	r3, r2
 8008c34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8008c38:	4b0d      	ldr	r3, [pc, #52]	@ (8008c70 <HAL_RCC_GetSysClockFreq+0x458>)
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	0f1b      	lsrs	r3, r3, #28
 8008c3e:	f003 0307 	and.w	r3, r3, #7
 8008c42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8008c46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008c4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c52:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8008c56:	e003      	b.n	8008c60 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008c58:	4b06      	ldr	r3, [pc, #24]	@ (8008c74 <HAL_RCC_GetSysClockFreq+0x45c>)
 8008c5a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8008c5e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008c60:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	37b8      	adds	r7, #184	@ 0xb8
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c6e:	bf00      	nop
 8008c70:	40023800 	.word	0x40023800
 8008c74:	00f42400 	.word	0x00f42400

08008c78 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b086      	sub	sp, #24
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d101      	bne.n	8008c8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008c86:	2301      	movs	r3, #1
 8008c88:	e28d      	b.n	80091a6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f003 0301 	and.w	r3, r3, #1
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	f000 8083 	beq.w	8008d9e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008c98:	4b94      	ldr	r3, [pc, #592]	@ (8008eec <HAL_RCC_OscConfig+0x274>)
 8008c9a:	689b      	ldr	r3, [r3, #8]
 8008c9c:	f003 030c 	and.w	r3, r3, #12
 8008ca0:	2b04      	cmp	r3, #4
 8008ca2:	d019      	beq.n	8008cd8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008ca4:	4b91      	ldr	r3, [pc, #580]	@ (8008eec <HAL_RCC_OscConfig+0x274>)
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008cac:	2b08      	cmp	r3, #8
 8008cae:	d106      	bne.n	8008cbe <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008cb0:	4b8e      	ldr	r3, [pc, #568]	@ (8008eec <HAL_RCC_OscConfig+0x274>)
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008cb8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008cbc:	d00c      	beq.n	8008cd8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008cbe:	4b8b      	ldr	r3, [pc, #556]	@ (8008eec <HAL_RCC_OscConfig+0x274>)
 8008cc0:	689b      	ldr	r3, [r3, #8]
 8008cc2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008cc6:	2b0c      	cmp	r3, #12
 8008cc8:	d112      	bne.n	8008cf0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008cca:	4b88      	ldr	r3, [pc, #544]	@ (8008eec <HAL_RCC_OscConfig+0x274>)
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008cd2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008cd6:	d10b      	bne.n	8008cf0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008cd8:	4b84      	ldr	r3, [pc, #528]	@ (8008eec <HAL_RCC_OscConfig+0x274>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d05b      	beq.n	8008d9c <HAL_RCC_OscConfig+0x124>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d157      	bne.n	8008d9c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8008cec:	2301      	movs	r3, #1
 8008cee:	e25a      	b.n	80091a6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008cf8:	d106      	bne.n	8008d08 <HAL_RCC_OscConfig+0x90>
 8008cfa:	4b7c      	ldr	r3, [pc, #496]	@ (8008eec <HAL_RCC_OscConfig+0x274>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	4a7b      	ldr	r2, [pc, #492]	@ (8008eec <HAL_RCC_OscConfig+0x274>)
 8008d00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008d04:	6013      	str	r3, [r2, #0]
 8008d06:	e01d      	b.n	8008d44 <HAL_RCC_OscConfig+0xcc>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008d10:	d10c      	bne.n	8008d2c <HAL_RCC_OscConfig+0xb4>
 8008d12:	4b76      	ldr	r3, [pc, #472]	@ (8008eec <HAL_RCC_OscConfig+0x274>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a75      	ldr	r2, [pc, #468]	@ (8008eec <HAL_RCC_OscConfig+0x274>)
 8008d18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008d1c:	6013      	str	r3, [r2, #0]
 8008d1e:	4b73      	ldr	r3, [pc, #460]	@ (8008eec <HAL_RCC_OscConfig+0x274>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4a72      	ldr	r2, [pc, #456]	@ (8008eec <HAL_RCC_OscConfig+0x274>)
 8008d24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008d28:	6013      	str	r3, [r2, #0]
 8008d2a:	e00b      	b.n	8008d44 <HAL_RCC_OscConfig+0xcc>
 8008d2c:	4b6f      	ldr	r3, [pc, #444]	@ (8008eec <HAL_RCC_OscConfig+0x274>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a6e      	ldr	r2, [pc, #440]	@ (8008eec <HAL_RCC_OscConfig+0x274>)
 8008d32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008d36:	6013      	str	r3, [r2, #0]
 8008d38:	4b6c      	ldr	r3, [pc, #432]	@ (8008eec <HAL_RCC_OscConfig+0x274>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4a6b      	ldr	r2, [pc, #428]	@ (8008eec <HAL_RCC_OscConfig+0x274>)
 8008d3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008d42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d013      	beq.n	8008d74 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d4c:	f7fc ffd6 	bl	8005cfc <HAL_GetTick>
 8008d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d52:	e008      	b.n	8008d66 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008d54:	f7fc ffd2 	bl	8005cfc <HAL_GetTick>
 8008d58:	4602      	mov	r2, r0
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	1ad3      	subs	r3, r2, r3
 8008d5e:	2b64      	cmp	r3, #100	@ 0x64
 8008d60:	d901      	bls.n	8008d66 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8008d62:	2303      	movs	r3, #3
 8008d64:	e21f      	b.n	80091a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d66:	4b61      	ldr	r3, [pc, #388]	@ (8008eec <HAL_RCC_OscConfig+0x274>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d0f0      	beq.n	8008d54 <HAL_RCC_OscConfig+0xdc>
 8008d72:	e014      	b.n	8008d9e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d74:	f7fc ffc2 	bl	8005cfc <HAL_GetTick>
 8008d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008d7a:	e008      	b.n	8008d8e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008d7c:	f7fc ffbe 	bl	8005cfc <HAL_GetTick>
 8008d80:	4602      	mov	r2, r0
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	1ad3      	subs	r3, r2, r3
 8008d86:	2b64      	cmp	r3, #100	@ 0x64
 8008d88:	d901      	bls.n	8008d8e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8008d8a:	2303      	movs	r3, #3
 8008d8c:	e20b      	b.n	80091a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008d8e:	4b57      	ldr	r3, [pc, #348]	@ (8008eec <HAL_RCC_OscConfig+0x274>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d1f0      	bne.n	8008d7c <HAL_RCC_OscConfig+0x104>
 8008d9a:	e000      	b.n	8008d9e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f003 0302 	and.w	r3, r3, #2
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d06f      	beq.n	8008e8a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008daa:	4b50      	ldr	r3, [pc, #320]	@ (8008eec <HAL_RCC_OscConfig+0x274>)
 8008dac:	689b      	ldr	r3, [r3, #8]
 8008dae:	f003 030c 	and.w	r3, r3, #12
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d017      	beq.n	8008de6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008db6:	4b4d      	ldr	r3, [pc, #308]	@ (8008eec <HAL_RCC_OscConfig+0x274>)
 8008db8:	689b      	ldr	r3, [r3, #8]
 8008dba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008dbe:	2b08      	cmp	r3, #8
 8008dc0:	d105      	bne.n	8008dce <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008dc2:	4b4a      	ldr	r3, [pc, #296]	@ (8008eec <HAL_RCC_OscConfig+0x274>)
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d00b      	beq.n	8008de6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008dce:	4b47      	ldr	r3, [pc, #284]	@ (8008eec <HAL_RCC_OscConfig+0x274>)
 8008dd0:	689b      	ldr	r3, [r3, #8]
 8008dd2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008dd6:	2b0c      	cmp	r3, #12
 8008dd8:	d11c      	bne.n	8008e14 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008dda:	4b44      	ldr	r3, [pc, #272]	@ (8008eec <HAL_RCC_OscConfig+0x274>)
 8008ddc:	685b      	ldr	r3, [r3, #4]
 8008dde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d116      	bne.n	8008e14 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008de6:	4b41      	ldr	r3, [pc, #260]	@ (8008eec <HAL_RCC_OscConfig+0x274>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f003 0302 	and.w	r3, r3, #2
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d005      	beq.n	8008dfe <HAL_RCC_OscConfig+0x186>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	68db      	ldr	r3, [r3, #12]
 8008df6:	2b01      	cmp	r3, #1
 8008df8:	d001      	beq.n	8008dfe <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	e1d3      	b.n	80091a6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008dfe:	4b3b      	ldr	r3, [pc, #236]	@ (8008eec <HAL_RCC_OscConfig+0x274>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	691b      	ldr	r3, [r3, #16]
 8008e0a:	00db      	lsls	r3, r3, #3
 8008e0c:	4937      	ldr	r1, [pc, #220]	@ (8008eec <HAL_RCC_OscConfig+0x274>)
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008e12:	e03a      	b.n	8008e8a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	68db      	ldr	r3, [r3, #12]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d020      	beq.n	8008e5e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008e1c:	4b34      	ldr	r3, [pc, #208]	@ (8008ef0 <HAL_RCC_OscConfig+0x278>)
 8008e1e:	2201      	movs	r2, #1
 8008e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e22:	f7fc ff6b 	bl	8005cfc <HAL_GetTick>
 8008e26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e28:	e008      	b.n	8008e3c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008e2a:	f7fc ff67 	bl	8005cfc <HAL_GetTick>
 8008e2e:	4602      	mov	r2, r0
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	1ad3      	subs	r3, r2, r3
 8008e34:	2b02      	cmp	r3, #2
 8008e36:	d901      	bls.n	8008e3c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8008e38:	2303      	movs	r3, #3
 8008e3a:	e1b4      	b.n	80091a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e3c:	4b2b      	ldr	r3, [pc, #172]	@ (8008eec <HAL_RCC_OscConfig+0x274>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f003 0302 	and.w	r3, r3, #2
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d0f0      	beq.n	8008e2a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e48:	4b28      	ldr	r3, [pc, #160]	@ (8008eec <HAL_RCC_OscConfig+0x274>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	691b      	ldr	r3, [r3, #16]
 8008e54:	00db      	lsls	r3, r3, #3
 8008e56:	4925      	ldr	r1, [pc, #148]	@ (8008eec <HAL_RCC_OscConfig+0x274>)
 8008e58:	4313      	orrs	r3, r2
 8008e5a:	600b      	str	r3, [r1, #0]
 8008e5c:	e015      	b.n	8008e8a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008e5e:	4b24      	ldr	r3, [pc, #144]	@ (8008ef0 <HAL_RCC_OscConfig+0x278>)
 8008e60:	2200      	movs	r2, #0
 8008e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e64:	f7fc ff4a 	bl	8005cfc <HAL_GetTick>
 8008e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008e6a:	e008      	b.n	8008e7e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008e6c:	f7fc ff46 	bl	8005cfc <HAL_GetTick>
 8008e70:	4602      	mov	r2, r0
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	1ad3      	subs	r3, r2, r3
 8008e76:	2b02      	cmp	r3, #2
 8008e78:	d901      	bls.n	8008e7e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008e7a:	2303      	movs	r3, #3
 8008e7c:	e193      	b.n	80091a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008e7e:	4b1b      	ldr	r3, [pc, #108]	@ (8008eec <HAL_RCC_OscConfig+0x274>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f003 0302 	and.w	r3, r3, #2
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d1f0      	bne.n	8008e6c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f003 0308 	and.w	r3, r3, #8
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d036      	beq.n	8008f04 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	695b      	ldr	r3, [r3, #20]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d016      	beq.n	8008ecc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008e9e:	4b15      	ldr	r3, [pc, #84]	@ (8008ef4 <HAL_RCC_OscConfig+0x27c>)
 8008ea0:	2201      	movs	r2, #1
 8008ea2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ea4:	f7fc ff2a 	bl	8005cfc <HAL_GetTick>
 8008ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008eaa:	e008      	b.n	8008ebe <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008eac:	f7fc ff26 	bl	8005cfc <HAL_GetTick>
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	1ad3      	subs	r3, r2, r3
 8008eb6:	2b02      	cmp	r3, #2
 8008eb8:	d901      	bls.n	8008ebe <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8008eba:	2303      	movs	r3, #3
 8008ebc:	e173      	b.n	80091a6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008ebe:	4b0b      	ldr	r3, [pc, #44]	@ (8008eec <HAL_RCC_OscConfig+0x274>)
 8008ec0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ec2:	f003 0302 	and.w	r3, r3, #2
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d0f0      	beq.n	8008eac <HAL_RCC_OscConfig+0x234>
 8008eca:	e01b      	b.n	8008f04 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008ecc:	4b09      	ldr	r3, [pc, #36]	@ (8008ef4 <HAL_RCC_OscConfig+0x27c>)
 8008ece:	2200      	movs	r2, #0
 8008ed0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ed2:	f7fc ff13 	bl	8005cfc <HAL_GetTick>
 8008ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008ed8:	e00e      	b.n	8008ef8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008eda:	f7fc ff0f 	bl	8005cfc <HAL_GetTick>
 8008ede:	4602      	mov	r2, r0
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	1ad3      	subs	r3, r2, r3
 8008ee4:	2b02      	cmp	r3, #2
 8008ee6:	d907      	bls.n	8008ef8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8008ee8:	2303      	movs	r3, #3
 8008eea:	e15c      	b.n	80091a6 <HAL_RCC_OscConfig+0x52e>
 8008eec:	40023800 	.word	0x40023800
 8008ef0:	42470000 	.word	0x42470000
 8008ef4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008ef8:	4b8a      	ldr	r3, [pc, #552]	@ (8009124 <HAL_RCC_OscConfig+0x4ac>)
 8008efa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008efc:	f003 0302 	and.w	r3, r3, #2
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d1ea      	bne.n	8008eda <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f003 0304 	and.w	r3, r3, #4
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	f000 8097 	beq.w	8009040 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008f12:	2300      	movs	r3, #0
 8008f14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008f16:	4b83      	ldr	r3, [pc, #524]	@ (8009124 <HAL_RCC_OscConfig+0x4ac>)
 8008f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d10f      	bne.n	8008f42 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008f22:	2300      	movs	r3, #0
 8008f24:	60bb      	str	r3, [r7, #8]
 8008f26:	4b7f      	ldr	r3, [pc, #508]	@ (8009124 <HAL_RCC_OscConfig+0x4ac>)
 8008f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f2a:	4a7e      	ldr	r2, [pc, #504]	@ (8009124 <HAL_RCC_OscConfig+0x4ac>)
 8008f2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008f30:	6413      	str	r3, [r2, #64]	@ 0x40
 8008f32:	4b7c      	ldr	r3, [pc, #496]	@ (8009124 <HAL_RCC_OscConfig+0x4ac>)
 8008f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008f3a:	60bb      	str	r3, [r7, #8]
 8008f3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f42:	4b79      	ldr	r3, [pc, #484]	@ (8009128 <HAL_RCC_OscConfig+0x4b0>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d118      	bne.n	8008f80 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008f4e:	4b76      	ldr	r3, [pc, #472]	@ (8009128 <HAL_RCC_OscConfig+0x4b0>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4a75      	ldr	r2, [pc, #468]	@ (8009128 <HAL_RCC_OscConfig+0x4b0>)
 8008f54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008f58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008f5a:	f7fc fecf 	bl	8005cfc <HAL_GetTick>
 8008f5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f60:	e008      	b.n	8008f74 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f62:	f7fc fecb 	bl	8005cfc <HAL_GetTick>
 8008f66:	4602      	mov	r2, r0
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	1ad3      	subs	r3, r2, r3
 8008f6c:	2b02      	cmp	r3, #2
 8008f6e:	d901      	bls.n	8008f74 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8008f70:	2303      	movs	r3, #3
 8008f72:	e118      	b.n	80091a6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f74:	4b6c      	ldr	r3, [pc, #432]	@ (8009128 <HAL_RCC_OscConfig+0x4b0>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d0f0      	beq.n	8008f62 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	689b      	ldr	r3, [r3, #8]
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	d106      	bne.n	8008f96 <HAL_RCC_OscConfig+0x31e>
 8008f88:	4b66      	ldr	r3, [pc, #408]	@ (8009124 <HAL_RCC_OscConfig+0x4ac>)
 8008f8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f8c:	4a65      	ldr	r2, [pc, #404]	@ (8009124 <HAL_RCC_OscConfig+0x4ac>)
 8008f8e:	f043 0301 	orr.w	r3, r3, #1
 8008f92:	6713      	str	r3, [r2, #112]	@ 0x70
 8008f94:	e01c      	b.n	8008fd0 <HAL_RCC_OscConfig+0x358>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	689b      	ldr	r3, [r3, #8]
 8008f9a:	2b05      	cmp	r3, #5
 8008f9c:	d10c      	bne.n	8008fb8 <HAL_RCC_OscConfig+0x340>
 8008f9e:	4b61      	ldr	r3, [pc, #388]	@ (8009124 <HAL_RCC_OscConfig+0x4ac>)
 8008fa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fa2:	4a60      	ldr	r2, [pc, #384]	@ (8009124 <HAL_RCC_OscConfig+0x4ac>)
 8008fa4:	f043 0304 	orr.w	r3, r3, #4
 8008fa8:	6713      	str	r3, [r2, #112]	@ 0x70
 8008faa:	4b5e      	ldr	r3, [pc, #376]	@ (8009124 <HAL_RCC_OscConfig+0x4ac>)
 8008fac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fae:	4a5d      	ldr	r2, [pc, #372]	@ (8009124 <HAL_RCC_OscConfig+0x4ac>)
 8008fb0:	f043 0301 	orr.w	r3, r3, #1
 8008fb4:	6713      	str	r3, [r2, #112]	@ 0x70
 8008fb6:	e00b      	b.n	8008fd0 <HAL_RCC_OscConfig+0x358>
 8008fb8:	4b5a      	ldr	r3, [pc, #360]	@ (8009124 <HAL_RCC_OscConfig+0x4ac>)
 8008fba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fbc:	4a59      	ldr	r2, [pc, #356]	@ (8009124 <HAL_RCC_OscConfig+0x4ac>)
 8008fbe:	f023 0301 	bic.w	r3, r3, #1
 8008fc2:	6713      	str	r3, [r2, #112]	@ 0x70
 8008fc4:	4b57      	ldr	r3, [pc, #348]	@ (8009124 <HAL_RCC_OscConfig+0x4ac>)
 8008fc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fc8:	4a56      	ldr	r2, [pc, #344]	@ (8009124 <HAL_RCC_OscConfig+0x4ac>)
 8008fca:	f023 0304 	bic.w	r3, r3, #4
 8008fce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	689b      	ldr	r3, [r3, #8]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d015      	beq.n	8009004 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fd8:	f7fc fe90 	bl	8005cfc <HAL_GetTick>
 8008fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008fde:	e00a      	b.n	8008ff6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008fe0:	f7fc fe8c 	bl	8005cfc <HAL_GetTick>
 8008fe4:	4602      	mov	r2, r0
 8008fe6:	693b      	ldr	r3, [r7, #16]
 8008fe8:	1ad3      	subs	r3, r2, r3
 8008fea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d901      	bls.n	8008ff6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8008ff2:	2303      	movs	r3, #3
 8008ff4:	e0d7      	b.n	80091a6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ff6:	4b4b      	ldr	r3, [pc, #300]	@ (8009124 <HAL_RCC_OscConfig+0x4ac>)
 8008ff8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ffa:	f003 0302 	and.w	r3, r3, #2
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d0ee      	beq.n	8008fe0 <HAL_RCC_OscConfig+0x368>
 8009002:	e014      	b.n	800902e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009004:	f7fc fe7a 	bl	8005cfc <HAL_GetTick>
 8009008:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800900a:	e00a      	b.n	8009022 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800900c:	f7fc fe76 	bl	8005cfc <HAL_GetTick>
 8009010:	4602      	mov	r2, r0
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	1ad3      	subs	r3, r2, r3
 8009016:	f241 3288 	movw	r2, #5000	@ 0x1388
 800901a:	4293      	cmp	r3, r2
 800901c:	d901      	bls.n	8009022 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800901e:	2303      	movs	r3, #3
 8009020:	e0c1      	b.n	80091a6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009022:	4b40      	ldr	r3, [pc, #256]	@ (8009124 <HAL_RCC_OscConfig+0x4ac>)
 8009024:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009026:	f003 0302 	and.w	r3, r3, #2
 800902a:	2b00      	cmp	r3, #0
 800902c:	d1ee      	bne.n	800900c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800902e:	7dfb      	ldrb	r3, [r7, #23]
 8009030:	2b01      	cmp	r3, #1
 8009032:	d105      	bne.n	8009040 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009034:	4b3b      	ldr	r3, [pc, #236]	@ (8009124 <HAL_RCC_OscConfig+0x4ac>)
 8009036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009038:	4a3a      	ldr	r2, [pc, #232]	@ (8009124 <HAL_RCC_OscConfig+0x4ac>)
 800903a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800903e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	699b      	ldr	r3, [r3, #24]
 8009044:	2b00      	cmp	r3, #0
 8009046:	f000 80ad 	beq.w	80091a4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800904a:	4b36      	ldr	r3, [pc, #216]	@ (8009124 <HAL_RCC_OscConfig+0x4ac>)
 800904c:	689b      	ldr	r3, [r3, #8]
 800904e:	f003 030c 	and.w	r3, r3, #12
 8009052:	2b08      	cmp	r3, #8
 8009054:	d060      	beq.n	8009118 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	699b      	ldr	r3, [r3, #24]
 800905a:	2b02      	cmp	r3, #2
 800905c:	d145      	bne.n	80090ea <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800905e:	4b33      	ldr	r3, [pc, #204]	@ (800912c <HAL_RCC_OscConfig+0x4b4>)
 8009060:	2200      	movs	r2, #0
 8009062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009064:	f7fc fe4a 	bl	8005cfc <HAL_GetTick>
 8009068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800906a:	e008      	b.n	800907e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800906c:	f7fc fe46 	bl	8005cfc <HAL_GetTick>
 8009070:	4602      	mov	r2, r0
 8009072:	693b      	ldr	r3, [r7, #16]
 8009074:	1ad3      	subs	r3, r2, r3
 8009076:	2b02      	cmp	r3, #2
 8009078:	d901      	bls.n	800907e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800907a:	2303      	movs	r3, #3
 800907c:	e093      	b.n	80091a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800907e:	4b29      	ldr	r3, [pc, #164]	@ (8009124 <HAL_RCC_OscConfig+0x4ac>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009086:	2b00      	cmp	r3, #0
 8009088:	d1f0      	bne.n	800906c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	69da      	ldr	r2, [r3, #28]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6a1b      	ldr	r3, [r3, #32]
 8009092:	431a      	orrs	r2, r3
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009098:	019b      	lsls	r3, r3, #6
 800909a:	431a      	orrs	r2, r3
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090a0:	085b      	lsrs	r3, r3, #1
 80090a2:	3b01      	subs	r3, #1
 80090a4:	041b      	lsls	r3, r3, #16
 80090a6:	431a      	orrs	r2, r3
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090ac:	061b      	lsls	r3, r3, #24
 80090ae:	431a      	orrs	r2, r3
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090b4:	071b      	lsls	r3, r3, #28
 80090b6:	491b      	ldr	r1, [pc, #108]	@ (8009124 <HAL_RCC_OscConfig+0x4ac>)
 80090b8:	4313      	orrs	r3, r2
 80090ba:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80090bc:	4b1b      	ldr	r3, [pc, #108]	@ (800912c <HAL_RCC_OscConfig+0x4b4>)
 80090be:	2201      	movs	r2, #1
 80090c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090c2:	f7fc fe1b 	bl	8005cfc <HAL_GetTick>
 80090c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80090c8:	e008      	b.n	80090dc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80090ca:	f7fc fe17 	bl	8005cfc <HAL_GetTick>
 80090ce:	4602      	mov	r2, r0
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	1ad3      	subs	r3, r2, r3
 80090d4:	2b02      	cmp	r3, #2
 80090d6:	d901      	bls.n	80090dc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80090d8:	2303      	movs	r3, #3
 80090da:	e064      	b.n	80091a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80090dc:	4b11      	ldr	r3, [pc, #68]	@ (8009124 <HAL_RCC_OscConfig+0x4ac>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d0f0      	beq.n	80090ca <HAL_RCC_OscConfig+0x452>
 80090e8:	e05c      	b.n	80091a4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80090ea:	4b10      	ldr	r3, [pc, #64]	@ (800912c <HAL_RCC_OscConfig+0x4b4>)
 80090ec:	2200      	movs	r2, #0
 80090ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090f0:	f7fc fe04 	bl	8005cfc <HAL_GetTick>
 80090f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80090f6:	e008      	b.n	800910a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80090f8:	f7fc fe00 	bl	8005cfc <HAL_GetTick>
 80090fc:	4602      	mov	r2, r0
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	1ad3      	subs	r3, r2, r3
 8009102:	2b02      	cmp	r3, #2
 8009104:	d901      	bls.n	800910a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8009106:	2303      	movs	r3, #3
 8009108:	e04d      	b.n	80091a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800910a:	4b06      	ldr	r3, [pc, #24]	@ (8009124 <HAL_RCC_OscConfig+0x4ac>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009112:	2b00      	cmp	r3, #0
 8009114:	d1f0      	bne.n	80090f8 <HAL_RCC_OscConfig+0x480>
 8009116:	e045      	b.n	80091a4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	699b      	ldr	r3, [r3, #24]
 800911c:	2b01      	cmp	r3, #1
 800911e:	d107      	bne.n	8009130 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8009120:	2301      	movs	r3, #1
 8009122:	e040      	b.n	80091a6 <HAL_RCC_OscConfig+0x52e>
 8009124:	40023800 	.word	0x40023800
 8009128:	40007000 	.word	0x40007000
 800912c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009130:	4b1f      	ldr	r3, [pc, #124]	@ (80091b0 <HAL_RCC_OscConfig+0x538>)
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	699b      	ldr	r3, [r3, #24]
 800913a:	2b01      	cmp	r3, #1
 800913c:	d030      	beq.n	80091a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009148:	429a      	cmp	r2, r3
 800914a:	d129      	bne.n	80091a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009156:	429a      	cmp	r2, r3
 8009158:	d122      	bne.n	80091a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800915a:	68fa      	ldr	r2, [r7, #12]
 800915c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8009160:	4013      	ands	r3, r2
 8009162:	687a      	ldr	r2, [r7, #4]
 8009164:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009166:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009168:	4293      	cmp	r3, r2
 800916a:	d119      	bne.n	80091a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009176:	085b      	lsrs	r3, r3, #1
 8009178:	3b01      	subs	r3, #1
 800917a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800917c:	429a      	cmp	r2, r3
 800917e:	d10f      	bne.n	80091a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800918a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800918c:	429a      	cmp	r2, r3
 800918e:	d107      	bne.n	80091a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800919a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800919c:	429a      	cmp	r2, r3
 800919e:	d001      	beq.n	80091a4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80091a0:	2301      	movs	r3, #1
 80091a2:	e000      	b.n	80091a6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80091a4:	2300      	movs	r3, #0
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3718      	adds	r7, #24
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}
 80091ae:	bf00      	nop
 80091b0:	40023800 	.word	0x40023800

080091b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b082      	sub	sp, #8
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d101      	bne.n	80091c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80091c2:	2301      	movs	r3, #1
 80091c4:	e07b      	b.n	80092be <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d108      	bne.n	80091e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	685b      	ldr	r3, [r3, #4]
 80091d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80091d6:	d009      	beq.n	80091ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2200      	movs	r2, #0
 80091dc:	61da      	str	r2, [r3, #28]
 80091de:	e005      	b.n	80091ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2200      	movs	r2, #0
 80091e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2200      	movs	r2, #0
 80091ea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2200      	movs	r2, #0
 80091f0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80091f8:	b2db      	uxtb	r3, r3
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d106      	bne.n	800920c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2200      	movs	r2, #0
 8009202:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f7fc f9a8 	bl	800555c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2202      	movs	r2, #2
 8009210:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	681a      	ldr	r2, [r3, #0]
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009222:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	685b      	ldr	r3, [r3, #4]
 8009228:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	689b      	ldr	r3, [r3, #8]
 8009230:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009234:	431a      	orrs	r2, r3
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	68db      	ldr	r3, [r3, #12]
 800923a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800923e:	431a      	orrs	r2, r3
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	691b      	ldr	r3, [r3, #16]
 8009244:	f003 0302 	and.w	r3, r3, #2
 8009248:	431a      	orrs	r2, r3
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	695b      	ldr	r3, [r3, #20]
 800924e:	f003 0301 	and.w	r3, r3, #1
 8009252:	431a      	orrs	r2, r3
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	699b      	ldr	r3, [r3, #24]
 8009258:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800925c:	431a      	orrs	r2, r3
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	69db      	ldr	r3, [r3, #28]
 8009262:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009266:	431a      	orrs	r2, r3
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6a1b      	ldr	r3, [r3, #32]
 800926c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009270:	ea42 0103 	orr.w	r1, r2, r3
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009278:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	430a      	orrs	r2, r1
 8009282:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	699b      	ldr	r3, [r3, #24]
 8009288:	0c1b      	lsrs	r3, r3, #16
 800928a:	f003 0104 	and.w	r1, r3, #4
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009292:	f003 0210 	and.w	r2, r3, #16
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	430a      	orrs	r2, r1
 800929c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	69da      	ldr	r2, [r3, #28]
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80092ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2200      	movs	r2, #0
 80092b2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2201      	movs	r2, #1
 80092b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80092bc:	2300      	movs	r3, #0
}
 80092be:	4618      	mov	r0, r3
 80092c0:	3708      	adds	r7, #8
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}

080092c6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80092c6:	b580      	push	{r7, lr}
 80092c8:	b088      	sub	sp, #32
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	60f8      	str	r0, [r7, #12]
 80092ce:	60b9      	str	r1, [r7, #8]
 80092d0:	603b      	str	r3, [r7, #0]
 80092d2:	4613      	mov	r3, r2
 80092d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80092d6:	2300      	movs	r3, #0
 80092d8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80092e0:	2b01      	cmp	r3, #1
 80092e2:	d101      	bne.n	80092e8 <HAL_SPI_Transmit+0x22>
 80092e4:	2302      	movs	r3, #2
 80092e6:	e126      	b.n	8009536 <HAL_SPI_Transmit+0x270>
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	2201      	movs	r2, #1
 80092ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80092f0:	f7fc fd04 	bl	8005cfc <HAL_GetTick>
 80092f4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80092f6:	88fb      	ldrh	r3, [r7, #6]
 80092f8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009300:	b2db      	uxtb	r3, r3
 8009302:	2b01      	cmp	r3, #1
 8009304:	d002      	beq.n	800930c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009306:	2302      	movs	r3, #2
 8009308:	77fb      	strb	r3, [r7, #31]
    goto error;
 800930a:	e10b      	b.n	8009524 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d002      	beq.n	8009318 <HAL_SPI_Transmit+0x52>
 8009312:	88fb      	ldrh	r3, [r7, #6]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d102      	bne.n	800931e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009318:	2301      	movs	r3, #1
 800931a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800931c:	e102      	b.n	8009524 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	2203      	movs	r2, #3
 8009322:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	2200      	movs	r2, #0
 800932a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	68ba      	ldr	r2, [r7, #8]
 8009330:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	88fa      	ldrh	r2, [r7, #6]
 8009336:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	88fa      	ldrh	r2, [r7, #6]
 800933c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	2200      	movs	r2, #0
 8009342:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	2200      	movs	r2, #0
 8009348:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	2200      	movs	r2, #0
 800934e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	2200      	movs	r2, #0
 8009354:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	2200      	movs	r2, #0
 800935a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	689b      	ldr	r3, [r3, #8]
 8009360:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009364:	d10f      	bne.n	8009386 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	681a      	ldr	r2, [r3, #0]
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009374:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	681a      	ldr	r2, [r3, #0]
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009384:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009390:	2b40      	cmp	r3, #64	@ 0x40
 8009392:	d007      	beq.n	80093a4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	681a      	ldr	r2, [r3, #0]
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80093a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	68db      	ldr	r3, [r3, #12]
 80093a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80093ac:	d14b      	bne.n	8009446 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	685b      	ldr	r3, [r3, #4]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d002      	beq.n	80093bc <HAL_SPI_Transmit+0xf6>
 80093b6:	8afb      	ldrh	r3, [r7, #22]
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	d13e      	bne.n	800943a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093c0:	881a      	ldrh	r2, [r3, #0]
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093cc:	1c9a      	adds	r2, r3, #2
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80093d6:	b29b      	uxth	r3, r3
 80093d8:	3b01      	subs	r3, #1
 80093da:	b29a      	uxth	r2, r3
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80093e0:	e02b      	b.n	800943a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	689b      	ldr	r3, [r3, #8]
 80093e8:	f003 0302 	and.w	r3, r3, #2
 80093ec:	2b02      	cmp	r3, #2
 80093ee:	d112      	bne.n	8009416 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093f4:	881a      	ldrh	r2, [r3, #0]
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009400:	1c9a      	adds	r2, r3, #2
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800940a:	b29b      	uxth	r3, r3
 800940c:	3b01      	subs	r3, #1
 800940e:	b29a      	uxth	r2, r3
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	86da      	strh	r2, [r3, #54]	@ 0x36
 8009414:	e011      	b.n	800943a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009416:	f7fc fc71 	bl	8005cfc <HAL_GetTick>
 800941a:	4602      	mov	r2, r0
 800941c:	69bb      	ldr	r3, [r7, #24]
 800941e:	1ad3      	subs	r3, r2, r3
 8009420:	683a      	ldr	r2, [r7, #0]
 8009422:	429a      	cmp	r2, r3
 8009424:	d803      	bhi.n	800942e <HAL_SPI_Transmit+0x168>
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800942c:	d102      	bne.n	8009434 <HAL_SPI_Transmit+0x16e>
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d102      	bne.n	800943a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8009434:	2303      	movs	r3, #3
 8009436:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009438:	e074      	b.n	8009524 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800943e:	b29b      	uxth	r3, r3
 8009440:	2b00      	cmp	r3, #0
 8009442:	d1ce      	bne.n	80093e2 <HAL_SPI_Transmit+0x11c>
 8009444:	e04c      	b.n	80094e0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	685b      	ldr	r3, [r3, #4]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d002      	beq.n	8009454 <HAL_SPI_Transmit+0x18e>
 800944e:	8afb      	ldrh	r3, [r7, #22]
 8009450:	2b01      	cmp	r3, #1
 8009452:	d140      	bne.n	80094d6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	330c      	adds	r3, #12
 800945e:	7812      	ldrb	r2, [r2, #0]
 8009460:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009466:	1c5a      	adds	r2, r3, #1
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009470:	b29b      	uxth	r3, r3
 8009472:	3b01      	subs	r3, #1
 8009474:	b29a      	uxth	r2, r3
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800947a:	e02c      	b.n	80094d6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	689b      	ldr	r3, [r3, #8]
 8009482:	f003 0302 	and.w	r3, r3, #2
 8009486:	2b02      	cmp	r3, #2
 8009488:	d113      	bne.n	80094b2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	330c      	adds	r3, #12
 8009494:	7812      	ldrb	r2, [r2, #0]
 8009496:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800949c:	1c5a      	adds	r2, r3, #1
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80094a6:	b29b      	uxth	r3, r3
 80094a8:	3b01      	subs	r3, #1
 80094aa:	b29a      	uxth	r2, r3
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	86da      	strh	r2, [r3, #54]	@ 0x36
 80094b0:	e011      	b.n	80094d6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80094b2:	f7fc fc23 	bl	8005cfc <HAL_GetTick>
 80094b6:	4602      	mov	r2, r0
 80094b8:	69bb      	ldr	r3, [r7, #24]
 80094ba:	1ad3      	subs	r3, r2, r3
 80094bc:	683a      	ldr	r2, [r7, #0]
 80094be:	429a      	cmp	r2, r3
 80094c0:	d803      	bhi.n	80094ca <HAL_SPI_Transmit+0x204>
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094c8:	d102      	bne.n	80094d0 <HAL_SPI_Transmit+0x20a>
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d102      	bne.n	80094d6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80094d0:	2303      	movs	r3, #3
 80094d2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80094d4:	e026      	b.n	8009524 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80094da:	b29b      	uxth	r3, r3
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d1cd      	bne.n	800947c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80094e0:	69ba      	ldr	r2, [r7, #24]
 80094e2:	6839      	ldr	r1, [r7, #0]
 80094e4:	68f8      	ldr	r0, [r7, #12]
 80094e6:	f000 f8b3 	bl	8009650 <SPI_EndRxTxTransaction>
 80094ea:	4603      	mov	r3, r0
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d002      	beq.n	80094f6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	2220      	movs	r2, #32
 80094f4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	689b      	ldr	r3, [r3, #8]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d10a      	bne.n	8009514 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80094fe:	2300      	movs	r3, #0
 8009500:	613b      	str	r3, [r7, #16]
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	68db      	ldr	r3, [r3, #12]
 8009508:	613b      	str	r3, [r7, #16]
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	689b      	ldr	r3, [r3, #8]
 8009510:	613b      	str	r3, [r7, #16]
 8009512:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009518:	2b00      	cmp	r3, #0
 800951a:	d002      	beq.n	8009522 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800951c:	2301      	movs	r3, #1
 800951e:	77fb      	strb	r3, [r7, #31]
 8009520:	e000      	b.n	8009524 <HAL_SPI_Transmit+0x25e>
  }

error:
 8009522:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2201      	movs	r2, #1
 8009528:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	2200      	movs	r2, #0
 8009530:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8009534:	7ffb      	ldrb	r3, [r7, #31]
}
 8009536:	4618      	mov	r0, r3
 8009538:	3720      	adds	r7, #32
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}
	...

08009540 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b088      	sub	sp, #32
 8009544:	af00      	add	r7, sp, #0
 8009546:	60f8      	str	r0, [r7, #12]
 8009548:	60b9      	str	r1, [r7, #8]
 800954a:	603b      	str	r3, [r7, #0]
 800954c:	4613      	mov	r3, r2
 800954e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009550:	f7fc fbd4 	bl	8005cfc <HAL_GetTick>
 8009554:	4602      	mov	r2, r0
 8009556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009558:	1a9b      	subs	r3, r3, r2
 800955a:	683a      	ldr	r2, [r7, #0]
 800955c:	4413      	add	r3, r2
 800955e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009560:	f7fc fbcc 	bl	8005cfc <HAL_GetTick>
 8009564:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009566:	4b39      	ldr	r3, [pc, #228]	@ (800964c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	015b      	lsls	r3, r3, #5
 800956c:	0d1b      	lsrs	r3, r3, #20
 800956e:	69fa      	ldr	r2, [r7, #28]
 8009570:	fb02 f303 	mul.w	r3, r2, r3
 8009574:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009576:	e054      	b.n	8009622 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800957e:	d050      	beq.n	8009622 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009580:	f7fc fbbc 	bl	8005cfc <HAL_GetTick>
 8009584:	4602      	mov	r2, r0
 8009586:	69bb      	ldr	r3, [r7, #24]
 8009588:	1ad3      	subs	r3, r2, r3
 800958a:	69fa      	ldr	r2, [r7, #28]
 800958c:	429a      	cmp	r2, r3
 800958e:	d902      	bls.n	8009596 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009590:	69fb      	ldr	r3, [r7, #28]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d13d      	bne.n	8009612 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	685a      	ldr	r2, [r3, #4]
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80095a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	685b      	ldr	r3, [r3, #4]
 80095aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80095ae:	d111      	bne.n	80095d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	689b      	ldr	r3, [r3, #8]
 80095b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80095b8:	d004      	beq.n	80095c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	689b      	ldr	r3, [r3, #8]
 80095be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80095c2:	d107      	bne.n	80095d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	681a      	ldr	r2, [r3, #0]
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80095d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80095dc:	d10f      	bne.n	80095fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	681a      	ldr	r2, [r3, #0]
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80095ec:	601a      	str	r2, [r3, #0]
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	681a      	ldr	r2, [r3, #0]
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80095fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2201      	movs	r2, #1
 8009602:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2200      	movs	r2, #0
 800960a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800960e:	2303      	movs	r3, #3
 8009610:	e017      	b.n	8009642 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d101      	bne.n	800961c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009618:	2300      	movs	r3, #0
 800961a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800961c:	697b      	ldr	r3, [r7, #20]
 800961e:	3b01      	subs	r3, #1
 8009620:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	689a      	ldr	r2, [r3, #8]
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	4013      	ands	r3, r2
 800962c:	68ba      	ldr	r2, [r7, #8]
 800962e:	429a      	cmp	r2, r3
 8009630:	bf0c      	ite	eq
 8009632:	2301      	moveq	r3, #1
 8009634:	2300      	movne	r3, #0
 8009636:	b2db      	uxtb	r3, r3
 8009638:	461a      	mov	r2, r3
 800963a:	79fb      	ldrb	r3, [r7, #7]
 800963c:	429a      	cmp	r2, r3
 800963e:	d19b      	bne.n	8009578 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009640:	2300      	movs	r3, #0
}
 8009642:	4618      	mov	r0, r3
 8009644:	3720      	adds	r7, #32
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}
 800964a:	bf00      	nop
 800964c:	20000044 	.word	0x20000044

08009650 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b088      	sub	sp, #32
 8009654:	af02      	add	r7, sp, #8
 8009656:	60f8      	str	r0, [r7, #12]
 8009658:	60b9      	str	r1, [r7, #8]
 800965a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800965c:	4b1b      	ldr	r3, [pc, #108]	@ (80096cc <SPI_EndRxTxTransaction+0x7c>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4a1b      	ldr	r2, [pc, #108]	@ (80096d0 <SPI_EndRxTxTransaction+0x80>)
 8009662:	fba2 2303 	umull	r2, r3, r2, r3
 8009666:	0d5b      	lsrs	r3, r3, #21
 8009668:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800966c:	fb02 f303 	mul.w	r3, r2, r3
 8009670:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	685b      	ldr	r3, [r3, #4]
 8009676:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800967a:	d112      	bne.n	80096a2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	9300      	str	r3, [sp, #0]
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	2200      	movs	r2, #0
 8009684:	2180      	movs	r1, #128	@ 0x80
 8009686:	68f8      	ldr	r0, [r7, #12]
 8009688:	f7ff ff5a 	bl	8009540 <SPI_WaitFlagStateUntilTimeout>
 800968c:	4603      	mov	r3, r0
 800968e:	2b00      	cmp	r3, #0
 8009690:	d016      	beq.n	80096c0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009696:	f043 0220 	orr.w	r2, r3, #32
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800969e:	2303      	movs	r3, #3
 80096a0:	e00f      	b.n	80096c2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d00a      	beq.n	80096be <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	3b01      	subs	r3, #1
 80096ac:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	689b      	ldr	r3, [r3, #8]
 80096b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096b8:	2b80      	cmp	r3, #128	@ 0x80
 80096ba:	d0f2      	beq.n	80096a2 <SPI_EndRxTxTransaction+0x52>
 80096bc:	e000      	b.n	80096c0 <SPI_EndRxTxTransaction+0x70>
        break;
 80096be:	bf00      	nop
  }

  return HAL_OK;
 80096c0:	2300      	movs	r3, #0
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	3718      	adds	r7, #24
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}
 80096ca:	bf00      	nop
 80096cc:	20000044 	.word	0x20000044
 80096d0:	165e9f81 	.word	0x165e9f81

080096d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b082      	sub	sp, #8
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d101      	bne.n	80096e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80096e2:	2301      	movs	r3, #1
 80096e4:	e041      	b.n	800976a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80096ec:	b2db      	uxtb	r3, r3
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d106      	bne.n	8009700 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2200      	movs	r2, #0
 80096f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f7fb ff76 	bl	80055ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2202      	movs	r2, #2
 8009704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681a      	ldr	r2, [r3, #0]
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	3304      	adds	r3, #4
 8009710:	4619      	mov	r1, r3
 8009712:	4610      	mov	r0, r2
 8009714:	f000 fa66 	bl	8009be4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2201      	movs	r2, #1
 800971c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2201      	movs	r2, #1
 8009724:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2201      	movs	r2, #1
 800972c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2201      	movs	r2, #1
 8009734:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2201      	movs	r2, #1
 800973c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2201      	movs	r2, #1
 8009744:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2201      	movs	r2, #1
 800974c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2201      	movs	r2, #1
 8009754:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2201      	movs	r2, #1
 800975c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2201      	movs	r2, #1
 8009764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009768:	2300      	movs	r3, #0
}
 800976a:	4618      	mov	r0, r3
 800976c:	3708      	adds	r7, #8
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}
	...

08009774 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009774:	b480      	push	{r7}
 8009776:	b085      	sub	sp, #20
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009782:	b2db      	uxtb	r3, r3
 8009784:	2b01      	cmp	r3, #1
 8009786:	d001      	beq.n	800978c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009788:	2301      	movs	r3, #1
 800978a:	e046      	b.n	800981a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2202      	movs	r2, #2
 8009790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	4a23      	ldr	r2, [pc, #140]	@ (8009828 <HAL_TIM_Base_Start+0xb4>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d022      	beq.n	80097e4 <HAL_TIM_Base_Start+0x70>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097a6:	d01d      	beq.n	80097e4 <HAL_TIM_Base_Start+0x70>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	4a1f      	ldr	r2, [pc, #124]	@ (800982c <HAL_TIM_Base_Start+0xb8>)
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d018      	beq.n	80097e4 <HAL_TIM_Base_Start+0x70>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	4a1e      	ldr	r2, [pc, #120]	@ (8009830 <HAL_TIM_Base_Start+0xbc>)
 80097b8:	4293      	cmp	r3, r2
 80097ba:	d013      	beq.n	80097e4 <HAL_TIM_Base_Start+0x70>
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4a1c      	ldr	r2, [pc, #112]	@ (8009834 <HAL_TIM_Base_Start+0xc0>)
 80097c2:	4293      	cmp	r3, r2
 80097c4:	d00e      	beq.n	80097e4 <HAL_TIM_Base_Start+0x70>
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	4a1b      	ldr	r2, [pc, #108]	@ (8009838 <HAL_TIM_Base_Start+0xc4>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d009      	beq.n	80097e4 <HAL_TIM_Base_Start+0x70>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	4a19      	ldr	r2, [pc, #100]	@ (800983c <HAL_TIM_Base_Start+0xc8>)
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d004      	beq.n	80097e4 <HAL_TIM_Base_Start+0x70>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	4a18      	ldr	r2, [pc, #96]	@ (8009840 <HAL_TIM_Base_Start+0xcc>)
 80097e0:	4293      	cmp	r3, r2
 80097e2:	d111      	bne.n	8009808 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	689b      	ldr	r3, [r3, #8]
 80097ea:	f003 0307 	and.w	r3, r3, #7
 80097ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	2b06      	cmp	r3, #6
 80097f4:	d010      	beq.n	8009818 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	681a      	ldr	r2, [r3, #0]
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f042 0201 	orr.w	r2, r2, #1
 8009804:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009806:	e007      	b.n	8009818 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	681a      	ldr	r2, [r3, #0]
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f042 0201 	orr.w	r2, r2, #1
 8009816:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009818:	2300      	movs	r3, #0
}
 800981a:	4618      	mov	r0, r3
 800981c:	3714      	adds	r7, #20
 800981e:	46bd      	mov	sp, r7
 8009820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009824:	4770      	bx	lr
 8009826:	bf00      	nop
 8009828:	40010000 	.word	0x40010000
 800982c:	40000400 	.word	0x40000400
 8009830:	40000800 	.word	0x40000800
 8009834:	40000c00 	.word	0x40000c00
 8009838:	40010400 	.word	0x40010400
 800983c:	40014000 	.word	0x40014000
 8009840:	40001800 	.word	0x40001800

08009844 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009844:	b480      	push	{r7}
 8009846:	b085      	sub	sp, #20
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009852:	b2db      	uxtb	r3, r3
 8009854:	2b01      	cmp	r3, #1
 8009856:	d001      	beq.n	800985c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009858:	2301      	movs	r3, #1
 800985a:	e04e      	b.n	80098fa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2202      	movs	r2, #2
 8009860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	68da      	ldr	r2, [r3, #12]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f042 0201 	orr.w	r2, r2, #1
 8009872:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	4a23      	ldr	r2, [pc, #140]	@ (8009908 <HAL_TIM_Base_Start_IT+0xc4>)
 800987a:	4293      	cmp	r3, r2
 800987c:	d022      	beq.n	80098c4 <HAL_TIM_Base_Start_IT+0x80>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009886:	d01d      	beq.n	80098c4 <HAL_TIM_Base_Start_IT+0x80>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	4a1f      	ldr	r2, [pc, #124]	@ (800990c <HAL_TIM_Base_Start_IT+0xc8>)
 800988e:	4293      	cmp	r3, r2
 8009890:	d018      	beq.n	80098c4 <HAL_TIM_Base_Start_IT+0x80>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	4a1e      	ldr	r2, [pc, #120]	@ (8009910 <HAL_TIM_Base_Start_IT+0xcc>)
 8009898:	4293      	cmp	r3, r2
 800989a:	d013      	beq.n	80098c4 <HAL_TIM_Base_Start_IT+0x80>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4a1c      	ldr	r2, [pc, #112]	@ (8009914 <HAL_TIM_Base_Start_IT+0xd0>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d00e      	beq.n	80098c4 <HAL_TIM_Base_Start_IT+0x80>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	4a1b      	ldr	r2, [pc, #108]	@ (8009918 <HAL_TIM_Base_Start_IT+0xd4>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d009      	beq.n	80098c4 <HAL_TIM_Base_Start_IT+0x80>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	4a19      	ldr	r2, [pc, #100]	@ (800991c <HAL_TIM_Base_Start_IT+0xd8>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d004      	beq.n	80098c4 <HAL_TIM_Base_Start_IT+0x80>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	4a18      	ldr	r2, [pc, #96]	@ (8009920 <HAL_TIM_Base_Start_IT+0xdc>)
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d111      	bne.n	80098e8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	689b      	ldr	r3, [r3, #8]
 80098ca:	f003 0307 	and.w	r3, r3, #7
 80098ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	2b06      	cmp	r3, #6
 80098d4:	d010      	beq.n	80098f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	681a      	ldr	r2, [r3, #0]
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f042 0201 	orr.w	r2, r2, #1
 80098e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098e6:	e007      	b.n	80098f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	681a      	ldr	r2, [r3, #0]
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f042 0201 	orr.w	r2, r2, #1
 80098f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80098f8:	2300      	movs	r3, #0
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3714      	adds	r7, #20
 80098fe:	46bd      	mov	sp, r7
 8009900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009904:	4770      	bx	lr
 8009906:	bf00      	nop
 8009908:	40010000 	.word	0x40010000
 800990c:	40000400 	.word	0x40000400
 8009910:	40000800 	.word	0x40000800
 8009914:	40000c00 	.word	0x40000c00
 8009918:	40010400 	.word	0x40010400
 800991c:	40014000 	.word	0x40014000
 8009920:	40001800 	.word	0x40001800

08009924 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009924:	b480      	push	{r7}
 8009926:	b083      	sub	sp, #12
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	68da      	ldr	r2, [r3, #12]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f022 0201 	bic.w	r2, r2, #1
 800993a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	6a1a      	ldr	r2, [r3, #32]
 8009942:	f241 1311 	movw	r3, #4369	@ 0x1111
 8009946:	4013      	ands	r3, r2
 8009948:	2b00      	cmp	r3, #0
 800994a:	d10f      	bne.n	800996c <HAL_TIM_Base_Stop_IT+0x48>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	6a1a      	ldr	r2, [r3, #32]
 8009952:	f240 4344 	movw	r3, #1092	@ 0x444
 8009956:	4013      	ands	r3, r2
 8009958:	2b00      	cmp	r3, #0
 800995a:	d107      	bne.n	800996c <HAL_TIM_Base_Stop_IT+0x48>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	681a      	ldr	r2, [r3, #0]
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f022 0201 	bic.w	r2, r2, #1
 800996a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2201      	movs	r2, #1
 8009970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8009974:	2300      	movs	r3, #0
}
 8009976:	4618      	mov	r0, r3
 8009978:	370c      	adds	r7, #12
 800997a:	46bd      	mov	sp, r7
 800997c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009980:	4770      	bx	lr

08009982 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009982:	b580      	push	{r7, lr}
 8009984:	b082      	sub	sp, #8
 8009986:	af00      	add	r7, sp, #0
 8009988:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	691b      	ldr	r3, [r3, #16]
 8009990:	f003 0302 	and.w	r3, r3, #2
 8009994:	2b02      	cmp	r3, #2
 8009996:	d122      	bne.n	80099de <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	68db      	ldr	r3, [r3, #12]
 800999e:	f003 0302 	and.w	r3, r3, #2
 80099a2:	2b02      	cmp	r3, #2
 80099a4:	d11b      	bne.n	80099de <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f06f 0202 	mvn.w	r2, #2
 80099ae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2201      	movs	r2, #1
 80099b4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	699b      	ldr	r3, [r3, #24]
 80099bc:	f003 0303 	and.w	r3, r3, #3
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d003      	beq.n	80099cc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f000 f8ee 	bl	8009ba6 <HAL_TIM_IC_CaptureCallback>
 80099ca:	e005      	b.n	80099d8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f000 f8e0 	bl	8009b92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f000 f8f1 	bl	8009bba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2200      	movs	r2, #0
 80099dc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	691b      	ldr	r3, [r3, #16]
 80099e4:	f003 0304 	and.w	r3, r3, #4
 80099e8:	2b04      	cmp	r3, #4
 80099ea:	d122      	bne.n	8009a32 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	68db      	ldr	r3, [r3, #12]
 80099f2:	f003 0304 	and.w	r3, r3, #4
 80099f6:	2b04      	cmp	r3, #4
 80099f8:	d11b      	bne.n	8009a32 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f06f 0204 	mvn.w	r2, #4
 8009a02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2202      	movs	r2, #2
 8009a08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	699b      	ldr	r3, [r3, #24]
 8009a10:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d003      	beq.n	8009a20 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f000 f8c4 	bl	8009ba6 <HAL_TIM_IC_CaptureCallback>
 8009a1e:	e005      	b.n	8009a2c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f000 f8b6 	bl	8009b92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f000 f8c7 	bl	8009bba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	691b      	ldr	r3, [r3, #16]
 8009a38:	f003 0308 	and.w	r3, r3, #8
 8009a3c:	2b08      	cmp	r3, #8
 8009a3e:	d122      	bne.n	8009a86 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	68db      	ldr	r3, [r3, #12]
 8009a46:	f003 0308 	and.w	r3, r3, #8
 8009a4a:	2b08      	cmp	r3, #8
 8009a4c:	d11b      	bne.n	8009a86 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f06f 0208 	mvn.w	r2, #8
 8009a56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2204      	movs	r2, #4
 8009a5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	69db      	ldr	r3, [r3, #28]
 8009a64:	f003 0303 	and.w	r3, r3, #3
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d003      	beq.n	8009a74 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f000 f89a 	bl	8009ba6 <HAL_TIM_IC_CaptureCallback>
 8009a72:	e005      	b.n	8009a80 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f000 f88c 	bl	8009b92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f000 f89d 	bl	8009bba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2200      	movs	r2, #0
 8009a84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	691b      	ldr	r3, [r3, #16]
 8009a8c:	f003 0310 	and.w	r3, r3, #16
 8009a90:	2b10      	cmp	r3, #16
 8009a92:	d122      	bne.n	8009ada <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	68db      	ldr	r3, [r3, #12]
 8009a9a:	f003 0310 	and.w	r3, r3, #16
 8009a9e:	2b10      	cmp	r3, #16
 8009aa0:	d11b      	bne.n	8009ada <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f06f 0210 	mvn.w	r2, #16
 8009aaa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2208      	movs	r2, #8
 8009ab0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	69db      	ldr	r3, [r3, #28]
 8009ab8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d003      	beq.n	8009ac8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f000 f870 	bl	8009ba6 <HAL_TIM_IC_CaptureCallback>
 8009ac6:	e005      	b.n	8009ad4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f000 f862 	bl	8009b92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f000 f873 	bl	8009bba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	691b      	ldr	r3, [r3, #16]
 8009ae0:	f003 0301 	and.w	r3, r3, #1
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	d10e      	bne.n	8009b06 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	68db      	ldr	r3, [r3, #12]
 8009aee:	f003 0301 	and.w	r3, r3, #1
 8009af2:	2b01      	cmp	r3, #1
 8009af4:	d107      	bne.n	8009b06 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f06f 0201 	mvn.w	r2, #1
 8009afe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f7fa f8c7 	bl	8003c94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	691b      	ldr	r3, [r3, #16]
 8009b0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b10:	2b80      	cmp	r3, #128	@ 0x80
 8009b12:	d10e      	bne.n	8009b32 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	68db      	ldr	r3, [r3, #12]
 8009b1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b1e:	2b80      	cmp	r3, #128	@ 0x80
 8009b20:	d107      	bne.n	8009b32 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009b2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f000 f97f 	bl	8009e30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	691b      	ldr	r3, [r3, #16]
 8009b38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b3c:	2b40      	cmp	r3, #64	@ 0x40
 8009b3e:	d10e      	bne.n	8009b5e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	68db      	ldr	r3, [r3, #12]
 8009b46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b4a:	2b40      	cmp	r3, #64	@ 0x40
 8009b4c:	d107      	bne.n	8009b5e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009b56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f000 f838 	bl	8009bce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	691b      	ldr	r3, [r3, #16]
 8009b64:	f003 0320 	and.w	r3, r3, #32
 8009b68:	2b20      	cmp	r3, #32
 8009b6a:	d10e      	bne.n	8009b8a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	68db      	ldr	r3, [r3, #12]
 8009b72:	f003 0320 	and.w	r3, r3, #32
 8009b76:	2b20      	cmp	r3, #32
 8009b78:	d107      	bne.n	8009b8a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f06f 0220 	mvn.w	r2, #32
 8009b82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f000 f949 	bl	8009e1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009b8a:	bf00      	nop
 8009b8c:	3708      	adds	r7, #8
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}

08009b92 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009b92:	b480      	push	{r7}
 8009b94:	b083      	sub	sp, #12
 8009b96:	af00      	add	r7, sp, #0
 8009b98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009b9a:	bf00      	nop
 8009b9c:	370c      	adds	r7, #12
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba4:	4770      	bx	lr

08009ba6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009ba6:	b480      	push	{r7}
 8009ba8:	b083      	sub	sp, #12
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009bae:	bf00      	nop
 8009bb0:	370c      	adds	r7, #12
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb8:	4770      	bx	lr

08009bba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009bba:	b480      	push	{r7}
 8009bbc:	b083      	sub	sp, #12
 8009bbe:	af00      	add	r7, sp, #0
 8009bc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009bc2:	bf00      	nop
 8009bc4:	370c      	adds	r7, #12
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bcc:	4770      	bx	lr

08009bce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009bce:	b480      	push	{r7}
 8009bd0:	b083      	sub	sp, #12
 8009bd2:	af00      	add	r7, sp, #0
 8009bd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009bd6:	bf00      	nop
 8009bd8:	370c      	adds	r7, #12
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be0:	4770      	bx	lr
	...

08009be4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009be4:	b480      	push	{r7}
 8009be6:	b085      	sub	sp, #20
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
 8009bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	4a40      	ldr	r2, [pc, #256]	@ (8009cf8 <TIM_Base_SetConfig+0x114>)
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d013      	beq.n	8009c24 <TIM_Base_SetConfig+0x40>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c02:	d00f      	beq.n	8009c24 <TIM_Base_SetConfig+0x40>
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	4a3d      	ldr	r2, [pc, #244]	@ (8009cfc <TIM_Base_SetConfig+0x118>)
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	d00b      	beq.n	8009c24 <TIM_Base_SetConfig+0x40>
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	4a3c      	ldr	r2, [pc, #240]	@ (8009d00 <TIM_Base_SetConfig+0x11c>)
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d007      	beq.n	8009c24 <TIM_Base_SetConfig+0x40>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	4a3b      	ldr	r2, [pc, #236]	@ (8009d04 <TIM_Base_SetConfig+0x120>)
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d003      	beq.n	8009c24 <TIM_Base_SetConfig+0x40>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	4a3a      	ldr	r2, [pc, #232]	@ (8009d08 <TIM_Base_SetConfig+0x124>)
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d108      	bne.n	8009c36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	685b      	ldr	r3, [r3, #4]
 8009c30:	68fa      	ldr	r2, [r7, #12]
 8009c32:	4313      	orrs	r3, r2
 8009c34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	4a2f      	ldr	r2, [pc, #188]	@ (8009cf8 <TIM_Base_SetConfig+0x114>)
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	d02b      	beq.n	8009c96 <TIM_Base_SetConfig+0xb2>
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c44:	d027      	beq.n	8009c96 <TIM_Base_SetConfig+0xb2>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	4a2c      	ldr	r2, [pc, #176]	@ (8009cfc <TIM_Base_SetConfig+0x118>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d023      	beq.n	8009c96 <TIM_Base_SetConfig+0xb2>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	4a2b      	ldr	r2, [pc, #172]	@ (8009d00 <TIM_Base_SetConfig+0x11c>)
 8009c52:	4293      	cmp	r3, r2
 8009c54:	d01f      	beq.n	8009c96 <TIM_Base_SetConfig+0xb2>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	4a2a      	ldr	r2, [pc, #168]	@ (8009d04 <TIM_Base_SetConfig+0x120>)
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	d01b      	beq.n	8009c96 <TIM_Base_SetConfig+0xb2>
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	4a29      	ldr	r2, [pc, #164]	@ (8009d08 <TIM_Base_SetConfig+0x124>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d017      	beq.n	8009c96 <TIM_Base_SetConfig+0xb2>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	4a28      	ldr	r2, [pc, #160]	@ (8009d0c <TIM_Base_SetConfig+0x128>)
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d013      	beq.n	8009c96 <TIM_Base_SetConfig+0xb2>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	4a27      	ldr	r2, [pc, #156]	@ (8009d10 <TIM_Base_SetConfig+0x12c>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d00f      	beq.n	8009c96 <TIM_Base_SetConfig+0xb2>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	4a26      	ldr	r2, [pc, #152]	@ (8009d14 <TIM_Base_SetConfig+0x130>)
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	d00b      	beq.n	8009c96 <TIM_Base_SetConfig+0xb2>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	4a25      	ldr	r2, [pc, #148]	@ (8009d18 <TIM_Base_SetConfig+0x134>)
 8009c82:	4293      	cmp	r3, r2
 8009c84:	d007      	beq.n	8009c96 <TIM_Base_SetConfig+0xb2>
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	4a24      	ldr	r2, [pc, #144]	@ (8009d1c <TIM_Base_SetConfig+0x138>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d003      	beq.n	8009c96 <TIM_Base_SetConfig+0xb2>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	4a23      	ldr	r2, [pc, #140]	@ (8009d20 <TIM_Base_SetConfig+0x13c>)
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d108      	bne.n	8009ca8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009c9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	68db      	ldr	r3, [r3, #12]
 8009ca2:	68fa      	ldr	r2, [r7, #12]
 8009ca4:	4313      	orrs	r3, r2
 8009ca6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	695b      	ldr	r3, [r3, #20]
 8009cb2:	4313      	orrs	r3, r2
 8009cb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	68fa      	ldr	r2, [r7, #12]
 8009cba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	689a      	ldr	r2, [r3, #8]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	681a      	ldr	r2, [r3, #0]
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	4a0a      	ldr	r2, [pc, #40]	@ (8009cf8 <TIM_Base_SetConfig+0x114>)
 8009cd0:	4293      	cmp	r3, r2
 8009cd2:	d003      	beq.n	8009cdc <TIM_Base_SetConfig+0xf8>
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	4a0c      	ldr	r2, [pc, #48]	@ (8009d08 <TIM_Base_SetConfig+0x124>)
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d103      	bne.n	8009ce4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	691a      	ldr	r2, [r3, #16]
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	615a      	str	r2, [r3, #20]
}
 8009cea:	bf00      	nop
 8009cec:	3714      	adds	r7, #20
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf4:	4770      	bx	lr
 8009cf6:	bf00      	nop
 8009cf8:	40010000 	.word	0x40010000
 8009cfc:	40000400 	.word	0x40000400
 8009d00:	40000800 	.word	0x40000800
 8009d04:	40000c00 	.word	0x40000c00
 8009d08:	40010400 	.word	0x40010400
 8009d0c:	40014000 	.word	0x40014000
 8009d10:	40014400 	.word	0x40014400
 8009d14:	40014800 	.word	0x40014800
 8009d18:	40001800 	.word	0x40001800
 8009d1c:	40001c00 	.word	0x40001c00
 8009d20:	40002000 	.word	0x40002000

08009d24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009d24:	b480      	push	{r7}
 8009d26:	b085      	sub	sp, #20
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
 8009d2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009d34:	2b01      	cmp	r3, #1
 8009d36:	d101      	bne.n	8009d3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009d38:	2302      	movs	r3, #2
 8009d3a:	e05a      	b.n	8009df2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2201      	movs	r2, #1
 8009d40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2202      	movs	r2, #2
 8009d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	685b      	ldr	r3, [r3, #4]
 8009d52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	689b      	ldr	r3, [r3, #8]
 8009d5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	68fa      	ldr	r2, [r7, #12]
 8009d6a:	4313      	orrs	r3, r2
 8009d6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	68fa      	ldr	r2, [r7, #12]
 8009d74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	4a21      	ldr	r2, [pc, #132]	@ (8009e00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d022      	beq.n	8009dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d88:	d01d      	beq.n	8009dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	4a1d      	ldr	r2, [pc, #116]	@ (8009e04 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009d90:	4293      	cmp	r3, r2
 8009d92:	d018      	beq.n	8009dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	4a1b      	ldr	r2, [pc, #108]	@ (8009e08 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d013      	beq.n	8009dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	4a1a      	ldr	r2, [pc, #104]	@ (8009e0c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009da4:	4293      	cmp	r3, r2
 8009da6:	d00e      	beq.n	8009dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	4a18      	ldr	r2, [pc, #96]	@ (8009e10 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d009      	beq.n	8009dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	4a17      	ldr	r2, [pc, #92]	@ (8009e14 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009db8:	4293      	cmp	r3, r2
 8009dba:	d004      	beq.n	8009dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4a15      	ldr	r2, [pc, #84]	@ (8009e18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d10c      	bne.n	8009de0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009dcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	685b      	ldr	r3, [r3, #4]
 8009dd2:	68ba      	ldr	r2, [r7, #8]
 8009dd4:	4313      	orrs	r3, r2
 8009dd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	68ba      	ldr	r2, [r7, #8]
 8009dde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2201      	movs	r2, #1
 8009de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2200      	movs	r2, #0
 8009dec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009df0:	2300      	movs	r3, #0
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	3714      	adds	r7, #20
 8009df6:	46bd      	mov	sp, r7
 8009df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfc:	4770      	bx	lr
 8009dfe:	bf00      	nop
 8009e00:	40010000 	.word	0x40010000
 8009e04:	40000400 	.word	0x40000400
 8009e08:	40000800 	.word	0x40000800
 8009e0c:	40000c00 	.word	0x40000c00
 8009e10:	40010400 	.word	0x40010400
 8009e14:	40014000 	.word	0x40014000
 8009e18:	40001800 	.word	0x40001800

08009e1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b083      	sub	sp, #12
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009e24:	bf00      	nop
 8009e26:	370c      	adds	r7, #12
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2e:	4770      	bx	lr

08009e30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009e30:	b480      	push	{r7}
 8009e32:	b083      	sub	sp, #12
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009e38:	bf00      	nop
 8009e3a:	370c      	adds	r7, #12
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e42:	4770      	bx	lr

08009e44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b082      	sub	sp, #8
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d101      	bne.n	8009e56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009e52:	2301      	movs	r3, #1
 8009e54:	e03f      	b.n	8009ed6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009e5c:	b2db      	uxtb	r3, r3
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d106      	bne.n	8009e70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2200      	movs	r2, #0
 8009e66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f7fb fc40 	bl	80056f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2224      	movs	r2, #36	@ 0x24
 8009e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	68da      	ldr	r2, [r3, #12]
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009e86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f000 fe23 	bl	800aad4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	691a      	ldr	r2, [r3, #16]
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009e9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	695a      	ldr	r2, [r3, #20]
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009eac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	68da      	ldr	r2, [r3, #12]
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009ebc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2220      	movs	r2, #32
 8009ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2220      	movs	r2, #32
 8009ed0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8009ed4:	2300      	movs	r3, #0
}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	3708      	adds	r7, #8
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}

08009ede <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009ede:	b580      	push	{r7, lr}
 8009ee0:	b08a      	sub	sp, #40	@ 0x28
 8009ee2:	af02      	add	r7, sp, #8
 8009ee4:	60f8      	str	r0, [r7, #12]
 8009ee6:	60b9      	str	r1, [r7, #8]
 8009ee8:	603b      	str	r3, [r7, #0]
 8009eea:	4613      	mov	r3, r2
 8009eec:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009ef8:	b2db      	uxtb	r3, r3
 8009efa:	2b20      	cmp	r3, #32
 8009efc:	d17c      	bne.n	8009ff8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d002      	beq.n	8009f0a <HAL_UART_Transmit+0x2c>
 8009f04:	88fb      	ldrh	r3, [r7, #6]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d101      	bne.n	8009f0e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	e075      	b.n	8009ffa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009f14:	2b01      	cmp	r3, #1
 8009f16:	d101      	bne.n	8009f1c <HAL_UART_Transmit+0x3e>
 8009f18:	2302      	movs	r3, #2
 8009f1a:	e06e      	b.n	8009ffa <HAL_UART_Transmit+0x11c>
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	2201      	movs	r2, #1
 8009f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	2200      	movs	r2, #0
 8009f28:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	2221      	movs	r2, #33	@ 0x21
 8009f2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009f32:	f7fb fee3 	bl	8005cfc <HAL_GetTick>
 8009f36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	88fa      	ldrh	r2, [r7, #6]
 8009f3c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	88fa      	ldrh	r2, [r7, #6]
 8009f42:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	689b      	ldr	r3, [r3, #8]
 8009f48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f4c:	d108      	bne.n	8009f60 <HAL_UART_Transmit+0x82>
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	691b      	ldr	r3, [r3, #16]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d104      	bne.n	8009f60 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009f56:	2300      	movs	r3, #0
 8009f58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	61bb      	str	r3, [r7, #24]
 8009f5e:	e003      	b.n	8009f68 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009f64:	2300      	movs	r3, #0
 8009f66:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8009f70:	e02a      	b.n	8009fc8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	9300      	str	r3, [sp, #0]
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	2180      	movs	r1, #128	@ 0x80
 8009f7c:	68f8      	ldr	r0, [r7, #12]
 8009f7e:	f000 fb63 	bl	800a648 <UART_WaitOnFlagUntilTimeout>
 8009f82:	4603      	mov	r3, r0
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d001      	beq.n	8009f8c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009f88:	2303      	movs	r3, #3
 8009f8a:	e036      	b.n	8009ffa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009f8c:	69fb      	ldr	r3, [r7, #28]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d10b      	bne.n	8009faa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009f92:	69bb      	ldr	r3, [r7, #24]
 8009f94:	881b      	ldrh	r3, [r3, #0]
 8009f96:	461a      	mov	r2, r3
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009fa0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009fa2:	69bb      	ldr	r3, [r7, #24]
 8009fa4:	3302      	adds	r3, #2
 8009fa6:	61bb      	str	r3, [r7, #24]
 8009fa8:	e007      	b.n	8009fba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009faa:	69fb      	ldr	r3, [r7, #28]
 8009fac:	781a      	ldrb	r2, [r3, #0]
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009fb4:	69fb      	ldr	r3, [r7, #28]
 8009fb6:	3301      	adds	r3, #1
 8009fb8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009fbe:	b29b      	uxth	r3, r3
 8009fc0:	3b01      	subs	r3, #1
 8009fc2:	b29a      	uxth	r2, r3
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009fcc:	b29b      	uxth	r3, r3
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d1cf      	bne.n	8009f72 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	9300      	str	r3, [sp, #0]
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	2140      	movs	r1, #64	@ 0x40
 8009fdc:	68f8      	ldr	r0, [r7, #12]
 8009fde:	f000 fb33 	bl	800a648 <UART_WaitOnFlagUntilTimeout>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d001      	beq.n	8009fec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009fe8:	2303      	movs	r3, #3
 8009fea:	e006      	b.n	8009ffa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	2220      	movs	r2, #32
 8009ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	e000      	b.n	8009ffa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009ff8:	2302      	movs	r3, #2
  }
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3720      	adds	r7, #32
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}

0800a002 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a002:	b480      	push	{r7}
 800a004:	b085      	sub	sp, #20
 800a006:	af00      	add	r7, sp, #0
 800a008:	60f8      	str	r0, [r7, #12]
 800a00a:	60b9      	str	r1, [r7, #8]
 800a00c:	4613      	mov	r3, r2
 800a00e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a016:	b2db      	uxtb	r3, r3
 800a018:	2b20      	cmp	r3, #32
 800a01a:	d130      	bne.n	800a07e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d002      	beq.n	800a028 <HAL_UART_Transmit_IT+0x26>
 800a022:	88fb      	ldrh	r3, [r7, #6]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d101      	bne.n	800a02c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800a028:	2301      	movs	r3, #1
 800a02a:	e029      	b.n	800a080 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a032:	2b01      	cmp	r3, #1
 800a034:	d101      	bne.n	800a03a <HAL_UART_Transmit_IT+0x38>
 800a036:	2302      	movs	r3, #2
 800a038:	e022      	b.n	800a080 <HAL_UART_Transmit_IT+0x7e>
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	2201      	movs	r2, #1
 800a03e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->pTxBuffPtr = pData;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	68ba      	ldr	r2, [r7, #8]
 800a046:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	88fa      	ldrh	r2, [r7, #6]
 800a04c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	88fa      	ldrh	r2, [r7, #6]
 800a052:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	2200      	movs	r2, #0
 800a058:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	2221      	movs	r2, #33	@ 0x21
 800a05e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2200      	movs	r2, #0
 800a066:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	68da      	ldr	r2, [r3, #12]
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a078:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800a07a:	2300      	movs	r3, #0
 800a07c:	e000      	b.n	800a080 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800a07e:	2302      	movs	r3, #2
  }
}
 800a080:	4618      	mov	r0, r3
 800a082:	3714      	adds	r7, #20
 800a084:	46bd      	mov	sp, r7
 800a086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08a:	4770      	bx	lr

0800a08c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b084      	sub	sp, #16
 800a090:	af00      	add	r7, sp, #0
 800a092:	60f8      	str	r0, [r7, #12]
 800a094:	60b9      	str	r1, [r7, #8]
 800a096:	4613      	mov	r3, r2
 800a098:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a0a0:	b2db      	uxtb	r3, r3
 800a0a2:	2b20      	cmp	r3, #32
 800a0a4:	d11d      	bne.n	800a0e2 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d002      	beq.n	800a0b2 <HAL_UART_Receive_IT+0x26>
 800a0ac:	88fb      	ldrh	r3, [r7, #6]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d101      	bne.n	800a0b6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	e016      	b.n	800a0e4 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a0bc:	2b01      	cmp	r3, #1
 800a0be:	d101      	bne.n	800a0c4 <HAL_UART_Receive_IT+0x38>
 800a0c0:	2302      	movs	r3, #2
 800a0c2:	e00f      	b.n	800a0e4 <HAL_UART_Receive_IT+0x58>
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	2201      	movs	r2, #1
 800a0c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a0d2:	88fb      	ldrh	r3, [r7, #6]
 800a0d4:	461a      	mov	r2, r3
 800a0d6:	68b9      	ldr	r1, [r7, #8]
 800a0d8:	68f8      	ldr	r0, [r7, #12]
 800a0da:	f000 fb23 	bl	800a724 <UART_Start_Receive_IT>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	e000      	b.n	800a0e4 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a0e2:	2302      	movs	r3, #2
  }
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3710      	adds	r7, #16
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}

0800a0ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b0ba      	sub	sp, #232	@ 0xe8
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	68db      	ldr	r3, [r3, #12]
 800a104:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	695b      	ldr	r3, [r3, #20]
 800a10e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800a112:	2300      	movs	r3, #0
 800a114:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800a118:	2300      	movs	r3, #0
 800a11a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a11e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a122:	f003 030f 	and.w	r3, r3, #15
 800a126:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800a12a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d10f      	bne.n	800a152 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a136:	f003 0320 	and.w	r3, r3, #32
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d009      	beq.n	800a152 <HAL_UART_IRQHandler+0x66>
 800a13e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a142:	f003 0320 	and.w	r3, r3, #32
 800a146:	2b00      	cmp	r3, #0
 800a148:	d003      	beq.n	800a152 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f000 fc07 	bl	800a95e <UART_Receive_IT>
      return;
 800a150:	e256      	b.n	800a600 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a152:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a156:	2b00      	cmp	r3, #0
 800a158:	f000 80de 	beq.w	800a318 <HAL_UART_IRQHandler+0x22c>
 800a15c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a160:	f003 0301 	and.w	r3, r3, #1
 800a164:	2b00      	cmp	r3, #0
 800a166:	d106      	bne.n	800a176 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a16c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800a170:	2b00      	cmp	r3, #0
 800a172:	f000 80d1 	beq.w	800a318 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a17a:	f003 0301 	and.w	r3, r3, #1
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d00b      	beq.n	800a19a <HAL_UART_IRQHandler+0xae>
 800a182:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a186:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d005      	beq.n	800a19a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a192:	f043 0201 	orr.w	r2, r3, #1
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a19a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a19e:	f003 0304 	and.w	r3, r3, #4
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d00b      	beq.n	800a1be <HAL_UART_IRQHandler+0xd2>
 800a1a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a1aa:	f003 0301 	and.w	r3, r3, #1
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d005      	beq.n	800a1be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1b6:	f043 0202 	orr.w	r2, r3, #2
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a1be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1c2:	f003 0302 	and.w	r3, r3, #2
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d00b      	beq.n	800a1e2 <HAL_UART_IRQHandler+0xf6>
 800a1ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a1ce:	f003 0301 	and.w	r3, r3, #1
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d005      	beq.n	800a1e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1da:	f043 0204 	orr.w	r2, r3, #4
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a1e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1e6:	f003 0308 	and.w	r3, r3, #8
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d011      	beq.n	800a212 <HAL_UART_IRQHandler+0x126>
 800a1ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a1f2:	f003 0320 	and.w	r3, r3, #32
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d105      	bne.n	800a206 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a1fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a1fe:	f003 0301 	and.w	r3, r3, #1
 800a202:	2b00      	cmp	r3, #0
 800a204:	d005      	beq.n	800a212 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a20a:	f043 0208 	orr.w	r2, r3, #8
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a216:	2b00      	cmp	r3, #0
 800a218:	f000 81ed 	beq.w	800a5f6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a21c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a220:	f003 0320 	and.w	r3, r3, #32
 800a224:	2b00      	cmp	r3, #0
 800a226:	d008      	beq.n	800a23a <HAL_UART_IRQHandler+0x14e>
 800a228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a22c:	f003 0320 	and.w	r3, r3, #32
 800a230:	2b00      	cmp	r3, #0
 800a232:	d002      	beq.n	800a23a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f000 fb92 	bl	800a95e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	695b      	ldr	r3, [r3, #20]
 800a240:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a244:	2b40      	cmp	r3, #64	@ 0x40
 800a246:	bf0c      	ite	eq
 800a248:	2301      	moveq	r3, #1
 800a24a:	2300      	movne	r3, #0
 800a24c:	b2db      	uxtb	r3, r3
 800a24e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a256:	f003 0308 	and.w	r3, r3, #8
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d103      	bne.n	800a266 <HAL_UART_IRQHandler+0x17a>
 800a25e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a262:	2b00      	cmp	r3, #0
 800a264:	d04f      	beq.n	800a306 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f000 fa9a 	bl	800a7a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	695b      	ldr	r3, [r3, #20]
 800a272:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a276:	2b40      	cmp	r3, #64	@ 0x40
 800a278:	d141      	bne.n	800a2fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	3314      	adds	r3, #20
 800a280:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a284:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a288:	e853 3f00 	ldrex	r3, [r3]
 800a28c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a290:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a294:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a298:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	3314      	adds	r3, #20
 800a2a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a2a6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a2aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a2b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a2b6:	e841 2300 	strex	r3, r2, [r1]
 800a2ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a2be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d1d9      	bne.n	800a27a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d013      	beq.n	800a2f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2d2:	4a7d      	ldr	r2, [pc, #500]	@ (800a4c8 <HAL_UART_IRQHandler+0x3dc>)
 800a2d4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f7fc fb4b 	bl	8006976 <HAL_DMA_Abort_IT>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d016      	beq.n	800a314 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a2ec:	687a      	ldr	r2, [r7, #4]
 800a2ee:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800a2f0:	4610      	mov	r0, r2
 800a2f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2f4:	e00e      	b.n	800a314 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f000 f990 	bl	800a61c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2fc:	e00a      	b.n	800a314 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f000 f98c 	bl	800a61c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a304:	e006      	b.n	800a314 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f000 f988 	bl	800a61c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2200      	movs	r2, #0
 800a310:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 800a312:	e170      	b.n	800a5f6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a314:	bf00      	nop
    return;
 800a316:	e16e      	b.n	800a5f6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a31c:	2b01      	cmp	r3, #1
 800a31e:	f040 814a 	bne.w	800a5b6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a326:	f003 0310 	and.w	r3, r3, #16
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	f000 8143 	beq.w	800a5b6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a334:	f003 0310 	and.w	r3, r3, #16
 800a338:	2b00      	cmp	r3, #0
 800a33a:	f000 813c 	beq.w	800a5b6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a33e:	2300      	movs	r3, #0
 800a340:	60bb      	str	r3, [r7, #8]
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	60bb      	str	r3, [r7, #8]
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	685b      	ldr	r3, [r3, #4]
 800a350:	60bb      	str	r3, [r7, #8]
 800a352:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	695b      	ldr	r3, [r3, #20]
 800a35a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a35e:	2b40      	cmp	r3, #64	@ 0x40
 800a360:	f040 80b4 	bne.w	800a4cc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	685b      	ldr	r3, [r3, #4]
 800a36c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a370:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a374:	2b00      	cmp	r3, #0
 800a376:	f000 8140 	beq.w	800a5fa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a37e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a382:	429a      	cmp	r2, r3
 800a384:	f080 8139 	bcs.w	800a5fa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a38e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a394:	69db      	ldr	r3, [r3, #28]
 800a396:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a39a:	f000 8088 	beq.w	800a4ae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	330c      	adds	r3, #12
 800a3a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a3ac:	e853 3f00 	ldrex	r3, [r3]
 800a3b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a3b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a3b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a3bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	330c      	adds	r3, #12
 800a3c6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800a3ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a3ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a3d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a3da:	e841 2300 	strex	r3, r2, [r1]
 800a3de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a3e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d1d9      	bne.n	800a39e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	3314      	adds	r3, #20
 800a3f0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a3f4:	e853 3f00 	ldrex	r3, [r3]
 800a3f8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a3fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a3fc:	f023 0301 	bic.w	r3, r3, #1
 800a400:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	3314      	adds	r3, #20
 800a40a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a40e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a412:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a414:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a416:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a41a:	e841 2300 	strex	r3, r2, [r1]
 800a41e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a420:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a422:	2b00      	cmp	r3, #0
 800a424:	d1e1      	bne.n	800a3ea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	3314      	adds	r3, #20
 800a42c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a42e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a430:	e853 3f00 	ldrex	r3, [r3]
 800a434:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a436:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a438:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a43c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	3314      	adds	r3, #20
 800a446:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a44a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a44c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a44e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a450:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a452:	e841 2300 	strex	r3, r2, [r1]
 800a456:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a458:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d1e3      	bne.n	800a426 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2220      	movs	r2, #32
 800a462:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2200      	movs	r2, #0
 800a46a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	330c      	adds	r3, #12
 800a472:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a474:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a476:	e853 3f00 	ldrex	r3, [r3]
 800a47a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a47c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a47e:	f023 0310 	bic.w	r3, r3, #16
 800a482:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	330c      	adds	r3, #12
 800a48c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800a490:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a492:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a494:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a496:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a498:	e841 2300 	strex	r3, r2, [r1]
 800a49c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a49e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d1e3      	bne.n	800a46c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f7fc f9f4 	bl	8006896 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a4b6:	b29b      	uxth	r3, r3
 800a4b8:	1ad3      	subs	r3, r2, r3
 800a4ba:	b29b      	uxth	r3, r3
 800a4bc:	4619      	mov	r1, r3
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f000 f8b6 	bl	800a630 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a4c4:	e099      	b.n	800a5fa <HAL_UART_IRQHandler+0x50e>
 800a4c6:	bf00      	nop
 800a4c8:	0800a867 	.word	0x0800a867
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a4d4:	b29b      	uxth	r3, r3
 800a4d6:	1ad3      	subs	r3, r2, r3
 800a4d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a4e0:	b29b      	uxth	r3, r3
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	f000 808b 	beq.w	800a5fe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a4e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	f000 8086 	beq.w	800a5fe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	330c      	adds	r3, #12
 800a4f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4fc:	e853 3f00 	ldrex	r3, [r3]
 800a500:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a502:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a504:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a508:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	330c      	adds	r3, #12
 800a512:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800a516:	647a      	str	r2, [r7, #68]	@ 0x44
 800a518:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a51a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a51c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a51e:	e841 2300 	strex	r3, r2, [r1]
 800a522:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a524:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a526:	2b00      	cmp	r3, #0
 800a528:	d1e3      	bne.n	800a4f2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	3314      	adds	r3, #20
 800a530:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a534:	e853 3f00 	ldrex	r3, [r3]
 800a538:	623b      	str	r3, [r7, #32]
   return(result);
 800a53a:	6a3b      	ldr	r3, [r7, #32]
 800a53c:	f023 0301 	bic.w	r3, r3, #1
 800a540:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	3314      	adds	r3, #20
 800a54a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a54e:	633a      	str	r2, [r7, #48]	@ 0x30
 800a550:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a552:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a554:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a556:	e841 2300 	strex	r3, r2, [r1]
 800a55a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a55c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d1e3      	bne.n	800a52a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2220      	movs	r2, #32
 800a566:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2200      	movs	r2, #0
 800a56e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	330c      	adds	r3, #12
 800a576:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a578:	693b      	ldr	r3, [r7, #16]
 800a57a:	e853 3f00 	ldrex	r3, [r3]
 800a57e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	f023 0310 	bic.w	r3, r3, #16
 800a586:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	330c      	adds	r3, #12
 800a590:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800a594:	61fa      	str	r2, [r7, #28]
 800a596:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a598:	69b9      	ldr	r1, [r7, #24]
 800a59a:	69fa      	ldr	r2, [r7, #28]
 800a59c:	e841 2300 	strex	r3, r2, [r1]
 800a5a0:	617b      	str	r3, [r7, #20]
   return(result);
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d1e3      	bne.n	800a570 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a5a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a5ac:	4619      	mov	r1, r3
 800a5ae:	6878      	ldr	r0, [r7, #4]
 800a5b0:	f000 f83e 	bl	800a630 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a5b4:	e023      	b.n	800a5fe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a5b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d009      	beq.n	800a5d6 <HAL_UART_IRQHandler+0x4ea>
 800a5c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d003      	beq.n	800a5d6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f000 f95d 	bl	800a88e <UART_Transmit_IT>
    return;
 800a5d4:	e014      	b.n	800a600 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a5d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d00e      	beq.n	800a600 <HAL_UART_IRQHandler+0x514>
 800a5e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d008      	beq.n	800a600 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f000 f99d 	bl	800a92e <UART_EndTransmit_IT>
    return;
 800a5f4:	e004      	b.n	800a600 <HAL_UART_IRQHandler+0x514>
    return;
 800a5f6:	bf00      	nop
 800a5f8:	e002      	b.n	800a600 <HAL_UART_IRQHandler+0x514>
      return;
 800a5fa:	bf00      	nop
 800a5fc:	e000      	b.n	800a600 <HAL_UART_IRQHandler+0x514>
      return;
 800a5fe:	bf00      	nop
  }
}
 800a600:	37e8      	adds	r7, #232	@ 0xe8
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}
 800a606:	bf00      	nop

0800a608 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a608:	b480      	push	{r7}
 800a60a:	b083      	sub	sp, #12
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a610:	bf00      	nop
 800a612:	370c      	adds	r7, #12
 800a614:	46bd      	mov	sp, r7
 800a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61a:	4770      	bx	lr

0800a61c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b083      	sub	sp, #12
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a624:	bf00      	nop
 800a626:	370c      	adds	r7, #12
 800a628:	46bd      	mov	sp, r7
 800a62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62e:	4770      	bx	lr

0800a630 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a630:	b480      	push	{r7}
 800a632:	b083      	sub	sp, #12
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
 800a638:	460b      	mov	r3, r1
 800a63a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a63c:	bf00      	nop
 800a63e:	370c      	adds	r7, #12
 800a640:	46bd      	mov	sp, r7
 800a642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a646:	4770      	bx	lr

0800a648 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b090      	sub	sp, #64	@ 0x40
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	60f8      	str	r0, [r7, #12]
 800a650:	60b9      	str	r1, [r7, #8]
 800a652:	603b      	str	r3, [r7, #0]
 800a654:	4613      	mov	r3, r2
 800a656:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a658:	e050      	b.n	800a6fc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a65a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a65c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a660:	d04c      	beq.n	800a6fc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a662:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a664:	2b00      	cmp	r3, #0
 800a666:	d007      	beq.n	800a678 <UART_WaitOnFlagUntilTimeout+0x30>
 800a668:	f7fb fb48 	bl	8005cfc <HAL_GetTick>
 800a66c:	4602      	mov	r2, r0
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	1ad3      	subs	r3, r2, r3
 800a672:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a674:	429a      	cmp	r2, r3
 800a676:	d241      	bcs.n	800a6fc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	330c      	adds	r3, #12
 800a67e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a682:	e853 3f00 	ldrex	r3, [r3]
 800a686:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a68a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800a68e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	330c      	adds	r3, #12
 800a696:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a698:	637a      	str	r2, [r7, #52]	@ 0x34
 800a69a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a69c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a69e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a6a0:	e841 2300 	strex	r3, r2, [r1]
 800a6a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a6a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d1e5      	bne.n	800a678 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	3314      	adds	r3, #20
 800a6b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6b4:	697b      	ldr	r3, [r7, #20]
 800a6b6:	e853 3f00 	ldrex	r3, [r3]
 800a6ba:	613b      	str	r3, [r7, #16]
   return(result);
 800a6bc:	693b      	ldr	r3, [r7, #16]
 800a6be:	f023 0301 	bic.w	r3, r3, #1
 800a6c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	3314      	adds	r3, #20
 800a6ca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a6cc:	623a      	str	r2, [r7, #32]
 800a6ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6d0:	69f9      	ldr	r1, [r7, #28]
 800a6d2:	6a3a      	ldr	r2, [r7, #32]
 800a6d4:	e841 2300 	strex	r3, r2, [r1]
 800a6d8:	61bb      	str	r3, [r7, #24]
   return(result);
 800a6da:	69bb      	ldr	r3, [r7, #24]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d1e5      	bne.n	800a6ac <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	2220      	movs	r2, #32
 800a6e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	2220      	movs	r2, #32
 800a6ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 800a6f8:	2303      	movs	r3, #3
 800a6fa:	e00f      	b.n	800a71c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	681a      	ldr	r2, [r3, #0]
 800a702:	68bb      	ldr	r3, [r7, #8]
 800a704:	4013      	ands	r3, r2
 800a706:	68ba      	ldr	r2, [r7, #8]
 800a708:	429a      	cmp	r2, r3
 800a70a:	bf0c      	ite	eq
 800a70c:	2301      	moveq	r3, #1
 800a70e:	2300      	movne	r3, #0
 800a710:	b2db      	uxtb	r3, r3
 800a712:	461a      	mov	r2, r3
 800a714:	79fb      	ldrb	r3, [r7, #7]
 800a716:	429a      	cmp	r2, r3
 800a718:	d09f      	beq.n	800a65a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a71a:	2300      	movs	r3, #0
}
 800a71c:	4618      	mov	r0, r3
 800a71e:	3740      	adds	r7, #64	@ 0x40
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}

0800a724 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a724:	b480      	push	{r7}
 800a726:	b085      	sub	sp, #20
 800a728:	af00      	add	r7, sp, #0
 800a72a:	60f8      	str	r0, [r7, #12]
 800a72c:	60b9      	str	r1, [r7, #8]
 800a72e:	4613      	mov	r3, r2
 800a730:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	68ba      	ldr	r2, [r7, #8]
 800a736:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	88fa      	ldrh	r2, [r7, #6]
 800a73c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	88fa      	ldrh	r2, [r7, #6]
 800a742:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	2200      	movs	r2, #0
 800a748:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	2222      	movs	r2, #34	@ 0x22
 800a74e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	2200      	movs	r2, #0
 800a756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	691b      	ldr	r3, [r3, #16]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d007      	beq.n	800a772 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	68da      	ldr	r2, [r3, #12]
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a770:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	695a      	ldr	r2, [r3, #20]
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f042 0201 	orr.w	r2, r2, #1
 800a780:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	68da      	ldr	r2, [r3, #12]
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f042 0220 	orr.w	r2, r2, #32
 800a790:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a792:	2300      	movs	r3, #0
}
 800a794:	4618      	mov	r0, r3
 800a796:	3714      	adds	r7, #20
 800a798:	46bd      	mov	sp, r7
 800a79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79e:	4770      	bx	lr

0800a7a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	b095      	sub	sp, #84	@ 0x54
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	330c      	adds	r3, #12
 800a7ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7b2:	e853 3f00 	ldrex	r3, [r3]
 800a7b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a7b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a7be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	330c      	adds	r3, #12
 800a7c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a7c8:	643a      	str	r2, [r7, #64]	@ 0x40
 800a7ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a7ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a7d0:	e841 2300 	strex	r3, r2, [r1]
 800a7d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a7d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d1e5      	bne.n	800a7a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	3314      	adds	r3, #20
 800a7e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7e4:	6a3b      	ldr	r3, [r7, #32]
 800a7e6:	e853 3f00 	ldrex	r3, [r3]
 800a7ea:	61fb      	str	r3, [r7, #28]
   return(result);
 800a7ec:	69fb      	ldr	r3, [r7, #28]
 800a7ee:	f023 0301 	bic.w	r3, r3, #1
 800a7f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	3314      	adds	r3, #20
 800a7fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a7fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a7fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a800:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a802:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a804:	e841 2300 	strex	r3, r2, [r1]
 800a808:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a80a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d1e5      	bne.n	800a7dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a814:	2b01      	cmp	r3, #1
 800a816:	d119      	bne.n	800a84c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	330c      	adds	r3, #12
 800a81e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	e853 3f00 	ldrex	r3, [r3]
 800a826:	60bb      	str	r3, [r7, #8]
   return(result);
 800a828:	68bb      	ldr	r3, [r7, #8]
 800a82a:	f023 0310 	bic.w	r3, r3, #16
 800a82e:	647b      	str	r3, [r7, #68]	@ 0x44
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	330c      	adds	r3, #12
 800a836:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a838:	61ba      	str	r2, [r7, #24]
 800a83a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a83c:	6979      	ldr	r1, [r7, #20]
 800a83e:	69ba      	ldr	r2, [r7, #24]
 800a840:	e841 2300 	strex	r3, r2, [r1]
 800a844:	613b      	str	r3, [r7, #16]
   return(result);
 800a846:	693b      	ldr	r3, [r7, #16]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d1e5      	bne.n	800a818 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2220      	movs	r2, #32
 800a850:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2200      	movs	r2, #0
 800a858:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a85a:	bf00      	nop
 800a85c:	3754      	adds	r7, #84	@ 0x54
 800a85e:	46bd      	mov	sp, r7
 800a860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a864:	4770      	bx	lr

0800a866 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a866:	b580      	push	{r7, lr}
 800a868:	b084      	sub	sp, #16
 800a86a:	af00      	add	r7, sp, #0
 800a86c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a872:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	2200      	movs	r2, #0
 800a878:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	2200      	movs	r2, #0
 800a87e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a880:	68f8      	ldr	r0, [r7, #12]
 800a882:	f7ff fecb 	bl	800a61c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a886:	bf00      	nop
 800a888:	3710      	adds	r7, #16
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}

0800a88e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a88e:	b480      	push	{r7}
 800a890:	b085      	sub	sp, #20
 800a892:	af00      	add	r7, sp, #0
 800a894:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a89c:	b2db      	uxtb	r3, r3
 800a89e:	2b21      	cmp	r3, #33	@ 0x21
 800a8a0:	d13e      	bne.n	800a920 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	689b      	ldr	r3, [r3, #8]
 800a8a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a8aa:	d114      	bne.n	800a8d6 <UART_Transmit_IT+0x48>
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	691b      	ldr	r3, [r3, #16]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d110      	bne.n	800a8d6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6a1b      	ldr	r3, [r3, #32]
 800a8b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	881b      	ldrh	r3, [r3, #0]
 800a8be:	461a      	mov	r2, r3
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a8c8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6a1b      	ldr	r3, [r3, #32]
 800a8ce:	1c9a      	adds	r2, r3, #2
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	621a      	str	r2, [r3, #32]
 800a8d4:	e008      	b.n	800a8e8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6a1b      	ldr	r3, [r3, #32]
 800a8da:	1c59      	adds	r1, r3, #1
 800a8dc:	687a      	ldr	r2, [r7, #4]
 800a8de:	6211      	str	r1, [r2, #32]
 800a8e0:	781a      	ldrb	r2, [r3, #0]
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a8ec:	b29b      	uxth	r3, r3
 800a8ee:	3b01      	subs	r3, #1
 800a8f0:	b29b      	uxth	r3, r3
 800a8f2:	687a      	ldr	r2, [r7, #4]
 800a8f4:	4619      	mov	r1, r3
 800a8f6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d10f      	bne.n	800a91c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	68da      	ldr	r2, [r3, #12]
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a90a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	68da      	ldr	r2, [r3, #12]
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a91a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a91c:	2300      	movs	r3, #0
 800a91e:	e000      	b.n	800a922 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a920:	2302      	movs	r3, #2
  }
}
 800a922:	4618      	mov	r0, r3
 800a924:	3714      	adds	r7, #20
 800a926:	46bd      	mov	sp, r7
 800a928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92c:	4770      	bx	lr

0800a92e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a92e:	b580      	push	{r7, lr}
 800a930:	b082      	sub	sp, #8
 800a932:	af00      	add	r7, sp, #0
 800a934:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	68da      	ldr	r2, [r3, #12]
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a944:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2220      	movs	r2, #32
 800a94a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f7ff fe5a 	bl	800a608 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a954:	2300      	movs	r3, #0
}
 800a956:	4618      	mov	r0, r3
 800a958:	3708      	adds	r7, #8
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}

0800a95e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a95e:	b580      	push	{r7, lr}
 800a960:	b08c      	sub	sp, #48	@ 0x30
 800a962:	af00      	add	r7, sp, #0
 800a964:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a96c:	b2db      	uxtb	r3, r3
 800a96e:	2b22      	cmp	r3, #34	@ 0x22
 800a970:	f040 80ab 	bne.w	800aaca <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	689b      	ldr	r3, [r3, #8]
 800a978:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a97c:	d117      	bne.n	800a9ae <UART_Receive_IT+0x50>
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	691b      	ldr	r3, [r3, #16]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d113      	bne.n	800a9ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a986:	2300      	movs	r3, #0
 800a988:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a98e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	685b      	ldr	r3, [r3, #4]
 800a996:	b29b      	uxth	r3, r3
 800a998:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a99c:	b29a      	uxth	r2, r3
 800a99e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9a6:	1c9a      	adds	r2, r3, #2
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	629a      	str	r2, [r3, #40]	@ 0x28
 800a9ac:	e026      	b.n	800a9fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	689b      	ldr	r3, [r3, #8]
 800a9bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a9c0:	d007      	beq.n	800a9d2 <UART_Receive_IT+0x74>
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	689b      	ldr	r3, [r3, #8]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d10a      	bne.n	800a9e0 <UART_Receive_IT+0x82>
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	691b      	ldr	r3, [r3, #16]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d106      	bne.n	800a9e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	685b      	ldr	r3, [r3, #4]
 800a9d8:	b2da      	uxtb	r2, r3
 800a9da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9dc:	701a      	strb	r2, [r3, #0]
 800a9de:	e008      	b.n	800a9f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	685b      	ldr	r3, [r3, #4]
 800a9e6:	b2db      	uxtb	r3, r3
 800a9e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a9ec:	b2da      	uxtb	r2, r3
 800a9ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9f6:	1c5a      	adds	r2, r3, #1
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800aa00:	b29b      	uxth	r3, r3
 800aa02:	3b01      	subs	r3, #1
 800aa04:	b29b      	uxth	r3, r3
 800aa06:	687a      	ldr	r2, [r7, #4]
 800aa08:	4619      	mov	r1, r3
 800aa0a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d15a      	bne.n	800aac6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	68da      	ldr	r2, [r3, #12]
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	f022 0220 	bic.w	r2, r2, #32
 800aa1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	68da      	ldr	r2, [r3, #12]
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800aa2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	695a      	ldr	r2, [r3, #20]
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f022 0201 	bic.w	r2, r2, #1
 800aa3e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2220      	movs	r2, #32
 800aa44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa4c:	2b01      	cmp	r3, #1
 800aa4e:	d135      	bne.n	800aabc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2200      	movs	r2, #0
 800aa54:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	330c      	adds	r3, #12
 800aa5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa5e:	697b      	ldr	r3, [r7, #20]
 800aa60:	e853 3f00 	ldrex	r3, [r3]
 800aa64:	613b      	str	r3, [r7, #16]
   return(result);
 800aa66:	693b      	ldr	r3, [r7, #16]
 800aa68:	f023 0310 	bic.w	r3, r3, #16
 800aa6c:	627b      	str	r3, [r7, #36]	@ 0x24
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	330c      	adds	r3, #12
 800aa74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa76:	623a      	str	r2, [r7, #32]
 800aa78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa7a:	69f9      	ldr	r1, [r7, #28]
 800aa7c:	6a3a      	ldr	r2, [r7, #32]
 800aa7e:	e841 2300 	strex	r3, r2, [r1]
 800aa82:	61bb      	str	r3, [r7, #24]
   return(result);
 800aa84:	69bb      	ldr	r3, [r7, #24]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d1e5      	bne.n	800aa56 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f003 0310 	and.w	r3, r3, #16
 800aa94:	2b10      	cmp	r3, #16
 800aa96:	d10a      	bne.n	800aaae <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800aa98:	2300      	movs	r3, #0
 800aa9a:	60fb      	str	r3, [r7, #12]
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	60fb      	str	r3, [r7, #12]
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	685b      	ldr	r3, [r3, #4]
 800aaaa:	60fb      	str	r3, [r7, #12]
 800aaac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800aab2:	4619      	mov	r1, r3
 800aab4:	6878      	ldr	r0, [r7, #4]
 800aab6:	f7ff fdbb 	bl	800a630 <HAL_UARTEx_RxEventCallback>
 800aaba:	e002      	b.n	800aac2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f7f9 f87f 	bl	8003bc0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800aac2:	2300      	movs	r3, #0
 800aac4:	e002      	b.n	800aacc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800aac6:	2300      	movs	r3, #0
 800aac8:	e000      	b.n	800aacc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800aaca:	2302      	movs	r3, #2
  }
}
 800aacc:	4618      	mov	r0, r3
 800aace:	3730      	adds	r7, #48	@ 0x30
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}

0800aad4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aad4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aad8:	b0c0      	sub	sp, #256	@ 0x100
 800aada:	af00      	add	r7, sp, #0
 800aadc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	691b      	ldr	r3, [r3, #16]
 800aae8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800aaec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aaf0:	68d9      	ldr	r1, [r3, #12]
 800aaf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aaf6:	681a      	ldr	r2, [r3, #0]
 800aaf8:	ea40 0301 	orr.w	r3, r0, r1
 800aafc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800aafe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab02:	689a      	ldr	r2, [r3, #8]
 800ab04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab08:	691b      	ldr	r3, [r3, #16]
 800ab0a:	431a      	orrs	r2, r3
 800ab0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab10:	695b      	ldr	r3, [r3, #20]
 800ab12:	431a      	orrs	r2, r3
 800ab14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab18:	69db      	ldr	r3, [r3, #28]
 800ab1a:	4313      	orrs	r3, r2
 800ab1c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ab20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	68db      	ldr	r3, [r3, #12]
 800ab28:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800ab2c:	f021 010c 	bic.w	r1, r1, #12
 800ab30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab34:	681a      	ldr	r2, [r3, #0]
 800ab36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800ab3a:	430b      	orrs	r3, r1
 800ab3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ab3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	695b      	ldr	r3, [r3, #20]
 800ab46:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800ab4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab4e:	6999      	ldr	r1, [r3, #24]
 800ab50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab54:	681a      	ldr	r2, [r3, #0]
 800ab56:	ea40 0301 	orr.w	r3, r0, r1
 800ab5a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ab5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab60:	681a      	ldr	r2, [r3, #0]
 800ab62:	4b8f      	ldr	r3, [pc, #572]	@ (800ada0 <UART_SetConfig+0x2cc>)
 800ab64:	429a      	cmp	r2, r3
 800ab66:	d005      	beq.n	800ab74 <UART_SetConfig+0xa0>
 800ab68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab6c:	681a      	ldr	r2, [r3, #0]
 800ab6e:	4b8d      	ldr	r3, [pc, #564]	@ (800ada4 <UART_SetConfig+0x2d0>)
 800ab70:	429a      	cmp	r2, r3
 800ab72:	d104      	bne.n	800ab7e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ab74:	f7fd fe3c 	bl	80087f0 <HAL_RCC_GetPCLK2Freq>
 800ab78:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800ab7c:	e003      	b.n	800ab86 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ab7e:	f7fd fe23 	bl	80087c8 <HAL_RCC_GetPCLK1Freq>
 800ab82:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ab86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab8a:	69db      	ldr	r3, [r3, #28]
 800ab8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ab90:	f040 810c 	bne.w	800adac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ab94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ab98:	2200      	movs	r2, #0
 800ab9a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ab9e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800aba2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800aba6:	4622      	mov	r2, r4
 800aba8:	462b      	mov	r3, r5
 800abaa:	1891      	adds	r1, r2, r2
 800abac:	65b9      	str	r1, [r7, #88]	@ 0x58
 800abae:	415b      	adcs	r3, r3
 800abb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800abb2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800abb6:	4621      	mov	r1, r4
 800abb8:	eb12 0801 	adds.w	r8, r2, r1
 800abbc:	4629      	mov	r1, r5
 800abbe:	eb43 0901 	adc.w	r9, r3, r1
 800abc2:	f04f 0200 	mov.w	r2, #0
 800abc6:	f04f 0300 	mov.w	r3, #0
 800abca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800abce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800abd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800abd6:	4690      	mov	r8, r2
 800abd8:	4699      	mov	r9, r3
 800abda:	4623      	mov	r3, r4
 800abdc:	eb18 0303 	adds.w	r3, r8, r3
 800abe0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800abe4:	462b      	mov	r3, r5
 800abe6:	eb49 0303 	adc.w	r3, r9, r3
 800abea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800abee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800abf2:	685b      	ldr	r3, [r3, #4]
 800abf4:	2200      	movs	r2, #0
 800abf6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800abfa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800abfe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800ac02:	460b      	mov	r3, r1
 800ac04:	18db      	adds	r3, r3, r3
 800ac06:	653b      	str	r3, [r7, #80]	@ 0x50
 800ac08:	4613      	mov	r3, r2
 800ac0a:	eb42 0303 	adc.w	r3, r2, r3
 800ac0e:	657b      	str	r3, [r7, #84]	@ 0x54
 800ac10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800ac14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800ac18:	f7f6 f89e 	bl	8000d58 <__aeabi_uldivmod>
 800ac1c:	4602      	mov	r2, r0
 800ac1e:	460b      	mov	r3, r1
 800ac20:	4b61      	ldr	r3, [pc, #388]	@ (800ada8 <UART_SetConfig+0x2d4>)
 800ac22:	fba3 2302 	umull	r2, r3, r3, r2
 800ac26:	095b      	lsrs	r3, r3, #5
 800ac28:	011c      	lsls	r4, r3, #4
 800ac2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ac2e:	2200      	movs	r2, #0
 800ac30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ac34:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800ac38:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800ac3c:	4642      	mov	r2, r8
 800ac3e:	464b      	mov	r3, r9
 800ac40:	1891      	adds	r1, r2, r2
 800ac42:	64b9      	str	r1, [r7, #72]	@ 0x48
 800ac44:	415b      	adcs	r3, r3
 800ac46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ac48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800ac4c:	4641      	mov	r1, r8
 800ac4e:	eb12 0a01 	adds.w	sl, r2, r1
 800ac52:	4649      	mov	r1, r9
 800ac54:	eb43 0b01 	adc.w	fp, r3, r1
 800ac58:	f04f 0200 	mov.w	r2, #0
 800ac5c:	f04f 0300 	mov.w	r3, #0
 800ac60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ac64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ac68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ac6c:	4692      	mov	sl, r2
 800ac6e:	469b      	mov	fp, r3
 800ac70:	4643      	mov	r3, r8
 800ac72:	eb1a 0303 	adds.w	r3, sl, r3
 800ac76:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ac7a:	464b      	mov	r3, r9
 800ac7c:	eb4b 0303 	adc.w	r3, fp, r3
 800ac80:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800ac84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac88:	685b      	ldr	r3, [r3, #4]
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ac90:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800ac94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800ac98:	460b      	mov	r3, r1
 800ac9a:	18db      	adds	r3, r3, r3
 800ac9c:	643b      	str	r3, [r7, #64]	@ 0x40
 800ac9e:	4613      	mov	r3, r2
 800aca0:	eb42 0303 	adc.w	r3, r2, r3
 800aca4:	647b      	str	r3, [r7, #68]	@ 0x44
 800aca6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800acaa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800acae:	f7f6 f853 	bl	8000d58 <__aeabi_uldivmod>
 800acb2:	4602      	mov	r2, r0
 800acb4:	460b      	mov	r3, r1
 800acb6:	4611      	mov	r1, r2
 800acb8:	4b3b      	ldr	r3, [pc, #236]	@ (800ada8 <UART_SetConfig+0x2d4>)
 800acba:	fba3 2301 	umull	r2, r3, r3, r1
 800acbe:	095b      	lsrs	r3, r3, #5
 800acc0:	2264      	movs	r2, #100	@ 0x64
 800acc2:	fb02 f303 	mul.w	r3, r2, r3
 800acc6:	1acb      	subs	r3, r1, r3
 800acc8:	00db      	lsls	r3, r3, #3
 800acca:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800acce:	4b36      	ldr	r3, [pc, #216]	@ (800ada8 <UART_SetConfig+0x2d4>)
 800acd0:	fba3 2302 	umull	r2, r3, r3, r2
 800acd4:	095b      	lsrs	r3, r3, #5
 800acd6:	005b      	lsls	r3, r3, #1
 800acd8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800acdc:	441c      	add	r4, r3
 800acde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ace2:	2200      	movs	r2, #0
 800ace4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ace8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800acec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800acf0:	4642      	mov	r2, r8
 800acf2:	464b      	mov	r3, r9
 800acf4:	1891      	adds	r1, r2, r2
 800acf6:	63b9      	str	r1, [r7, #56]	@ 0x38
 800acf8:	415b      	adcs	r3, r3
 800acfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800acfc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800ad00:	4641      	mov	r1, r8
 800ad02:	1851      	adds	r1, r2, r1
 800ad04:	6339      	str	r1, [r7, #48]	@ 0x30
 800ad06:	4649      	mov	r1, r9
 800ad08:	414b      	adcs	r3, r1
 800ad0a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad0c:	f04f 0200 	mov.w	r2, #0
 800ad10:	f04f 0300 	mov.w	r3, #0
 800ad14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800ad18:	4659      	mov	r1, fp
 800ad1a:	00cb      	lsls	r3, r1, #3
 800ad1c:	4651      	mov	r1, sl
 800ad1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ad22:	4651      	mov	r1, sl
 800ad24:	00ca      	lsls	r2, r1, #3
 800ad26:	4610      	mov	r0, r2
 800ad28:	4619      	mov	r1, r3
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	4642      	mov	r2, r8
 800ad2e:	189b      	adds	r3, r3, r2
 800ad30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ad34:	464b      	mov	r3, r9
 800ad36:	460a      	mov	r2, r1
 800ad38:	eb42 0303 	adc.w	r3, r2, r3
 800ad3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ad40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad44:	685b      	ldr	r3, [r3, #4]
 800ad46:	2200      	movs	r2, #0
 800ad48:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ad4c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800ad50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800ad54:	460b      	mov	r3, r1
 800ad56:	18db      	adds	r3, r3, r3
 800ad58:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ad5a:	4613      	mov	r3, r2
 800ad5c:	eb42 0303 	adc.w	r3, r2, r3
 800ad60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ad62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800ad66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800ad6a:	f7f5 fff5 	bl	8000d58 <__aeabi_uldivmod>
 800ad6e:	4602      	mov	r2, r0
 800ad70:	460b      	mov	r3, r1
 800ad72:	4b0d      	ldr	r3, [pc, #52]	@ (800ada8 <UART_SetConfig+0x2d4>)
 800ad74:	fba3 1302 	umull	r1, r3, r3, r2
 800ad78:	095b      	lsrs	r3, r3, #5
 800ad7a:	2164      	movs	r1, #100	@ 0x64
 800ad7c:	fb01 f303 	mul.w	r3, r1, r3
 800ad80:	1ad3      	subs	r3, r2, r3
 800ad82:	00db      	lsls	r3, r3, #3
 800ad84:	3332      	adds	r3, #50	@ 0x32
 800ad86:	4a08      	ldr	r2, [pc, #32]	@ (800ada8 <UART_SetConfig+0x2d4>)
 800ad88:	fba2 2303 	umull	r2, r3, r2, r3
 800ad8c:	095b      	lsrs	r3, r3, #5
 800ad8e:	f003 0207 	and.w	r2, r3, #7
 800ad92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	4422      	add	r2, r4
 800ad9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ad9c:	e106      	b.n	800afac <UART_SetConfig+0x4d8>
 800ad9e:	bf00      	nop
 800ada0:	40011000 	.word	0x40011000
 800ada4:	40011400 	.word	0x40011400
 800ada8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800adac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800adb0:	2200      	movs	r2, #0
 800adb2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800adb6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800adba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800adbe:	4642      	mov	r2, r8
 800adc0:	464b      	mov	r3, r9
 800adc2:	1891      	adds	r1, r2, r2
 800adc4:	6239      	str	r1, [r7, #32]
 800adc6:	415b      	adcs	r3, r3
 800adc8:	627b      	str	r3, [r7, #36]	@ 0x24
 800adca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800adce:	4641      	mov	r1, r8
 800add0:	1854      	adds	r4, r2, r1
 800add2:	4649      	mov	r1, r9
 800add4:	eb43 0501 	adc.w	r5, r3, r1
 800add8:	f04f 0200 	mov.w	r2, #0
 800addc:	f04f 0300 	mov.w	r3, #0
 800ade0:	00eb      	lsls	r3, r5, #3
 800ade2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ade6:	00e2      	lsls	r2, r4, #3
 800ade8:	4614      	mov	r4, r2
 800adea:	461d      	mov	r5, r3
 800adec:	4643      	mov	r3, r8
 800adee:	18e3      	adds	r3, r4, r3
 800adf0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800adf4:	464b      	mov	r3, r9
 800adf6:	eb45 0303 	adc.w	r3, r5, r3
 800adfa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800adfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae02:	685b      	ldr	r3, [r3, #4]
 800ae04:	2200      	movs	r2, #0
 800ae06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ae0a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800ae0e:	f04f 0200 	mov.w	r2, #0
 800ae12:	f04f 0300 	mov.w	r3, #0
 800ae16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800ae1a:	4629      	mov	r1, r5
 800ae1c:	008b      	lsls	r3, r1, #2
 800ae1e:	4621      	mov	r1, r4
 800ae20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ae24:	4621      	mov	r1, r4
 800ae26:	008a      	lsls	r2, r1, #2
 800ae28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800ae2c:	f7f5 ff94 	bl	8000d58 <__aeabi_uldivmod>
 800ae30:	4602      	mov	r2, r0
 800ae32:	460b      	mov	r3, r1
 800ae34:	4b60      	ldr	r3, [pc, #384]	@ (800afb8 <UART_SetConfig+0x4e4>)
 800ae36:	fba3 2302 	umull	r2, r3, r3, r2
 800ae3a:	095b      	lsrs	r3, r3, #5
 800ae3c:	011c      	lsls	r4, r3, #4
 800ae3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ae42:	2200      	movs	r2, #0
 800ae44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ae48:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800ae4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800ae50:	4642      	mov	r2, r8
 800ae52:	464b      	mov	r3, r9
 800ae54:	1891      	adds	r1, r2, r2
 800ae56:	61b9      	str	r1, [r7, #24]
 800ae58:	415b      	adcs	r3, r3
 800ae5a:	61fb      	str	r3, [r7, #28]
 800ae5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ae60:	4641      	mov	r1, r8
 800ae62:	1851      	adds	r1, r2, r1
 800ae64:	6139      	str	r1, [r7, #16]
 800ae66:	4649      	mov	r1, r9
 800ae68:	414b      	adcs	r3, r1
 800ae6a:	617b      	str	r3, [r7, #20]
 800ae6c:	f04f 0200 	mov.w	r2, #0
 800ae70:	f04f 0300 	mov.w	r3, #0
 800ae74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ae78:	4659      	mov	r1, fp
 800ae7a:	00cb      	lsls	r3, r1, #3
 800ae7c:	4651      	mov	r1, sl
 800ae7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ae82:	4651      	mov	r1, sl
 800ae84:	00ca      	lsls	r2, r1, #3
 800ae86:	4610      	mov	r0, r2
 800ae88:	4619      	mov	r1, r3
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	4642      	mov	r2, r8
 800ae8e:	189b      	adds	r3, r3, r2
 800ae90:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ae94:	464b      	mov	r3, r9
 800ae96:	460a      	mov	r2, r1
 800ae98:	eb42 0303 	adc.w	r3, r2, r3
 800ae9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800aea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aea4:	685b      	ldr	r3, [r3, #4]
 800aea6:	2200      	movs	r2, #0
 800aea8:	67bb      	str	r3, [r7, #120]	@ 0x78
 800aeaa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800aeac:	f04f 0200 	mov.w	r2, #0
 800aeb0:	f04f 0300 	mov.w	r3, #0
 800aeb4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800aeb8:	4649      	mov	r1, r9
 800aeba:	008b      	lsls	r3, r1, #2
 800aebc:	4641      	mov	r1, r8
 800aebe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aec2:	4641      	mov	r1, r8
 800aec4:	008a      	lsls	r2, r1, #2
 800aec6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800aeca:	f7f5 ff45 	bl	8000d58 <__aeabi_uldivmod>
 800aece:	4602      	mov	r2, r0
 800aed0:	460b      	mov	r3, r1
 800aed2:	4611      	mov	r1, r2
 800aed4:	4b38      	ldr	r3, [pc, #224]	@ (800afb8 <UART_SetConfig+0x4e4>)
 800aed6:	fba3 2301 	umull	r2, r3, r3, r1
 800aeda:	095b      	lsrs	r3, r3, #5
 800aedc:	2264      	movs	r2, #100	@ 0x64
 800aede:	fb02 f303 	mul.w	r3, r2, r3
 800aee2:	1acb      	subs	r3, r1, r3
 800aee4:	011b      	lsls	r3, r3, #4
 800aee6:	3332      	adds	r3, #50	@ 0x32
 800aee8:	4a33      	ldr	r2, [pc, #204]	@ (800afb8 <UART_SetConfig+0x4e4>)
 800aeea:	fba2 2303 	umull	r2, r3, r2, r3
 800aeee:	095b      	lsrs	r3, r3, #5
 800aef0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800aef4:	441c      	add	r4, r3
 800aef6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800aefa:	2200      	movs	r2, #0
 800aefc:	673b      	str	r3, [r7, #112]	@ 0x70
 800aefe:	677a      	str	r2, [r7, #116]	@ 0x74
 800af00:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800af04:	4642      	mov	r2, r8
 800af06:	464b      	mov	r3, r9
 800af08:	1891      	adds	r1, r2, r2
 800af0a:	60b9      	str	r1, [r7, #8]
 800af0c:	415b      	adcs	r3, r3
 800af0e:	60fb      	str	r3, [r7, #12]
 800af10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800af14:	4641      	mov	r1, r8
 800af16:	1851      	adds	r1, r2, r1
 800af18:	6039      	str	r1, [r7, #0]
 800af1a:	4649      	mov	r1, r9
 800af1c:	414b      	adcs	r3, r1
 800af1e:	607b      	str	r3, [r7, #4]
 800af20:	f04f 0200 	mov.w	r2, #0
 800af24:	f04f 0300 	mov.w	r3, #0
 800af28:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800af2c:	4659      	mov	r1, fp
 800af2e:	00cb      	lsls	r3, r1, #3
 800af30:	4651      	mov	r1, sl
 800af32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800af36:	4651      	mov	r1, sl
 800af38:	00ca      	lsls	r2, r1, #3
 800af3a:	4610      	mov	r0, r2
 800af3c:	4619      	mov	r1, r3
 800af3e:	4603      	mov	r3, r0
 800af40:	4642      	mov	r2, r8
 800af42:	189b      	adds	r3, r3, r2
 800af44:	66bb      	str	r3, [r7, #104]	@ 0x68
 800af46:	464b      	mov	r3, r9
 800af48:	460a      	mov	r2, r1
 800af4a:	eb42 0303 	adc.w	r3, r2, r3
 800af4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800af50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af54:	685b      	ldr	r3, [r3, #4]
 800af56:	2200      	movs	r2, #0
 800af58:	663b      	str	r3, [r7, #96]	@ 0x60
 800af5a:	667a      	str	r2, [r7, #100]	@ 0x64
 800af5c:	f04f 0200 	mov.w	r2, #0
 800af60:	f04f 0300 	mov.w	r3, #0
 800af64:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800af68:	4649      	mov	r1, r9
 800af6a:	008b      	lsls	r3, r1, #2
 800af6c:	4641      	mov	r1, r8
 800af6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800af72:	4641      	mov	r1, r8
 800af74:	008a      	lsls	r2, r1, #2
 800af76:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800af7a:	f7f5 feed 	bl	8000d58 <__aeabi_uldivmod>
 800af7e:	4602      	mov	r2, r0
 800af80:	460b      	mov	r3, r1
 800af82:	4b0d      	ldr	r3, [pc, #52]	@ (800afb8 <UART_SetConfig+0x4e4>)
 800af84:	fba3 1302 	umull	r1, r3, r3, r2
 800af88:	095b      	lsrs	r3, r3, #5
 800af8a:	2164      	movs	r1, #100	@ 0x64
 800af8c:	fb01 f303 	mul.w	r3, r1, r3
 800af90:	1ad3      	subs	r3, r2, r3
 800af92:	011b      	lsls	r3, r3, #4
 800af94:	3332      	adds	r3, #50	@ 0x32
 800af96:	4a08      	ldr	r2, [pc, #32]	@ (800afb8 <UART_SetConfig+0x4e4>)
 800af98:	fba2 2303 	umull	r2, r3, r2, r3
 800af9c:	095b      	lsrs	r3, r3, #5
 800af9e:	f003 020f 	and.w	r2, r3, #15
 800afa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	4422      	add	r2, r4
 800afaa:	609a      	str	r2, [r3, #8]
}
 800afac:	bf00      	nop
 800afae:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800afb2:	46bd      	mov	sp, r7
 800afb4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800afb8:	51eb851f 	.word	0x51eb851f

0800afbc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800afc0:	4904      	ldr	r1, [pc, #16]	@ (800afd4 <MX_FATFS_Init+0x18>)
 800afc2:	4805      	ldr	r0, [pc, #20]	@ (800afd8 <MX_FATFS_Init+0x1c>)
 800afc4:	f000 f8b0 	bl	800b128 <FATFS_LinkDriver>
 800afc8:	4603      	mov	r3, r0
 800afca:	461a      	mov	r2, r3
 800afcc:	4b03      	ldr	r3, [pc, #12]	@ (800afdc <MX_FATFS_Init+0x20>)
 800afce:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800afd0:	bf00      	nop
 800afd2:	bd80      	pop	{r7, pc}
 800afd4:	20002520 	.word	0x20002520
 800afd8:	20000050 	.word	0x20000050
 800afdc:	2000251c 	.word	0x2000251c

0800afe0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800afe0:	b480      	push	{r7}
 800afe2:	b083      	sub	sp, #12
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	4603      	mov	r3, r0
 800afe8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800afea:	4b06      	ldr	r3, [pc, #24]	@ (800b004 <USER_initialize+0x24>)
 800afec:	2201      	movs	r2, #1
 800afee:	701a      	strb	r2, [r3, #0]
    return Stat;
 800aff0:	4b04      	ldr	r3, [pc, #16]	@ (800b004 <USER_initialize+0x24>)
 800aff2:	781b      	ldrb	r3, [r3, #0]
 800aff4:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	370c      	adds	r7, #12
 800affa:	46bd      	mov	sp, r7
 800affc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b000:	4770      	bx	lr
 800b002:	bf00      	nop
 800b004:	2000004d 	.word	0x2000004d

0800b008 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800b008:	b480      	push	{r7}
 800b00a:	b083      	sub	sp, #12
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	4603      	mov	r3, r0
 800b010:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800b012:	4b06      	ldr	r3, [pc, #24]	@ (800b02c <USER_status+0x24>)
 800b014:	2201      	movs	r2, #1
 800b016:	701a      	strb	r2, [r3, #0]
    return Stat;
 800b018:	4b04      	ldr	r3, [pc, #16]	@ (800b02c <USER_status+0x24>)
 800b01a:	781b      	ldrb	r3, [r3, #0]
 800b01c:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800b01e:	4618      	mov	r0, r3
 800b020:	370c      	adds	r7, #12
 800b022:	46bd      	mov	sp, r7
 800b024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b028:	4770      	bx	lr
 800b02a:	bf00      	nop
 800b02c:	2000004d 	.word	0x2000004d

0800b030 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800b030:	b480      	push	{r7}
 800b032:	b085      	sub	sp, #20
 800b034:	af00      	add	r7, sp, #0
 800b036:	60b9      	str	r1, [r7, #8]
 800b038:	607a      	str	r2, [r7, #4]
 800b03a:	603b      	str	r3, [r7, #0]
 800b03c:	4603      	mov	r3, r0
 800b03e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800b040:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800b042:	4618      	mov	r0, r3
 800b044:	3714      	adds	r7, #20
 800b046:	46bd      	mov	sp, r7
 800b048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04c:	4770      	bx	lr

0800b04e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800b04e:	b480      	push	{r7}
 800b050:	b085      	sub	sp, #20
 800b052:	af00      	add	r7, sp, #0
 800b054:	60b9      	str	r1, [r7, #8]
 800b056:	607a      	str	r2, [r7, #4]
 800b058:	603b      	str	r3, [r7, #0]
 800b05a:	4603      	mov	r3, r0
 800b05c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800b05e:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800b060:	4618      	mov	r0, r3
 800b062:	3714      	adds	r7, #20
 800b064:	46bd      	mov	sp, r7
 800b066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06a:	4770      	bx	lr

0800b06c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800b06c:	b480      	push	{r7}
 800b06e:	b085      	sub	sp, #20
 800b070:	af00      	add	r7, sp, #0
 800b072:	4603      	mov	r3, r0
 800b074:	603a      	str	r2, [r7, #0]
 800b076:	71fb      	strb	r3, [r7, #7]
 800b078:	460b      	mov	r3, r1
 800b07a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800b07c:	2301      	movs	r3, #1
 800b07e:	73fb      	strb	r3, [r7, #15]
    return res;
 800b080:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800b082:	4618      	mov	r0, r3
 800b084:	3714      	adds	r7, #20
 800b086:	46bd      	mov	sp, r7
 800b088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08c:	4770      	bx	lr
	...

0800b090 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b090:	b480      	push	{r7}
 800b092:	b087      	sub	sp, #28
 800b094:	af00      	add	r7, sp, #0
 800b096:	60f8      	str	r0, [r7, #12]
 800b098:	60b9      	str	r1, [r7, #8]
 800b09a:	4613      	mov	r3, r2
 800b09c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b09e:	2301      	movs	r3, #1
 800b0a0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b0a6:	4b1f      	ldr	r3, [pc, #124]	@ (800b124 <FATFS_LinkDriverEx+0x94>)
 800b0a8:	7a5b      	ldrb	r3, [r3, #9]
 800b0aa:	b2db      	uxtb	r3, r3
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d131      	bne.n	800b114 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b0b0:	4b1c      	ldr	r3, [pc, #112]	@ (800b124 <FATFS_LinkDriverEx+0x94>)
 800b0b2:	7a5b      	ldrb	r3, [r3, #9]
 800b0b4:	b2db      	uxtb	r3, r3
 800b0b6:	461a      	mov	r2, r3
 800b0b8:	4b1a      	ldr	r3, [pc, #104]	@ (800b124 <FATFS_LinkDriverEx+0x94>)
 800b0ba:	2100      	movs	r1, #0
 800b0bc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b0be:	4b19      	ldr	r3, [pc, #100]	@ (800b124 <FATFS_LinkDriverEx+0x94>)
 800b0c0:	7a5b      	ldrb	r3, [r3, #9]
 800b0c2:	b2db      	uxtb	r3, r3
 800b0c4:	4a17      	ldr	r2, [pc, #92]	@ (800b124 <FATFS_LinkDriverEx+0x94>)
 800b0c6:	009b      	lsls	r3, r3, #2
 800b0c8:	4413      	add	r3, r2
 800b0ca:	68fa      	ldr	r2, [r7, #12]
 800b0cc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b0ce:	4b15      	ldr	r3, [pc, #84]	@ (800b124 <FATFS_LinkDriverEx+0x94>)
 800b0d0:	7a5b      	ldrb	r3, [r3, #9]
 800b0d2:	b2db      	uxtb	r3, r3
 800b0d4:	461a      	mov	r2, r3
 800b0d6:	4b13      	ldr	r3, [pc, #76]	@ (800b124 <FATFS_LinkDriverEx+0x94>)
 800b0d8:	4413      	add	r3, r2
 800b0da:	79fa      	ldrb	r2, [r7, #7]
 800b0dc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b0de:	4b11      	ldr	r3, [pc, #68]	@ (800b124 <FATFS_LinkDriverEx+0x94>)
 800b0e0:	7a5b      	ldrb	r3, [r3, #9]
 800b0e2:	b2db      	uxtb	r3, r3
 800b0e4:	1c5a      	adds	r2, r3, #1
 800b0e6:	b2d1      	uxtb	r1, r2
 800b0e8:	4a0e      	ldr	r2, [pc, #56]	@ (800b124 <FATFS_LinkDriverEx+0x94>)
 800b0ea:	7251      	strb	r1, [r2, #9]
 800b0ec:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b0ee:	7dbb      	ldrb	r3, [r7, #22]
 800b0f0:	3330      	adds	r3, #48	@ 0x30
 800b0f2:	b2da      	uxtb	r2, r3
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b0f8:	68bb      	ldr	r3, [r7, #8]
 800b0fa:	3301      	adds	r3, #1
 800b0fc:	223a      	movs	r2, #58	@ 0x3a
 800b0fe:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	3302      	adds	r3, #2
 800b104:	222f      	movs	r2, #47	@ 0x2f
 800b106:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	3303      	adds	r3, #3
 800b10c:	2200      	movs	r2, #0
 800b10e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b110:	2300      	movs	r3, #0
 800b112:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b114:	7dfb      	ldrb	r3, [r7, #23]
}
 800b116:	4618      	mov	r0, r3
 800b118:	371c      	adds	r7, #28
 800b11a:	46bd      	mov	sp, r7
 800b11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b120:	4770      	bx	lr
 800b122:	bf00      	nop
 800b124:	20002524 	.word	0x20002524

0800b128 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b082      	sub	sp, #8
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
 800b130:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b132:	2200      	movs	r2, #0
 800b134:	6839      	ldr	r1, [r7, #0]
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f7ff ffaa 	bl	800b090 <FATFS_LinkDriverEx>
 800b13c:	4603      	mov	r3, r0
}
 800b13e:	4618      	mov	r0, r3
 800b140:	3708      	adds	r7, #8
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}
	...

0800b148 <malloc>:
 800b148:	4b02      	ldr	r3, [pc, #8]	@ (800b154 <malloc+0xc>)
 800b14a:	4601      	mov	r1, r0
 800b14c:	6818      	ldr	r0, [r3, #0]
 800b14e:	f000 b82d 	b.w	800b1ac <_malloc_r>
 800b152:	bf00      	nop
 800b154:	200001dc 	.word	0x200001dc

0800b158 <free>:
 800b158:	4b02      	ldr	r3, [pc, #8]	@ (800b164 <free+0xc>)
 800b15a:	4601      	mov	r1, r0
 800b15c:	6818      	ldr	r0, [r3, #0]
 800b15e:	f001 b87b 	b.w	800c258 <_free_r>
 800b162:	bf00      	nop
 800b164:	200001dc 	.word	0x200001dc

0800b168 <sbrk_aligned>:
 800b168:	b570      	push	{r4, r5, r6, lr}
 800b16a:	4e0f      	ldr	r6, [pc, #60]	@ (800b1a8 <sbrk_aligned+0x40>)
 800b16c:	460c      	mov	r4, r1
 800b16e:	6831      	ldr	r1, [r6, #0]
 800b170:	4605      	mov	r5, r0
 800b172:	b911      	cbnz	r1, 800b17a <sbrk_aligned+0x12>
 800b174:	f001 f808 	bl	800c188 <_sbrk_r>
 800b178:	6030      	str	r0, [r6, #0]
 800b17a:	4621      	mov	r1, r4
 800b17c:	4628      	mov	r0, r5
 800b17e:	f001 f803 	bl	800c188 <_sbrk_r>
 800b182:	1c43      	adds	r3, r0, #1
 800b184:	d103      	bne.n	800b18e <sbrk_aligned+0x26>
 800b186:	f04f 34ff 	mov.w	r4, #4294967295
 800b18a:	4620      	mov	r0, r4
 800b18c:	bd70      	pop	{r4, r5, r6, pc}
 800b18e:	1cc4      	adds	r4, r0, #3
 800b190:	f024 0403 	bic.w	r4, r4, #3
 800b194:	42a0      	cmp	r0, r4
 800b196:	d0f8      	beq.n	800b18a <sbrk_aligned+0x22>
 800b198:	1a21      	subs	r1, r4, r0
 800b19a:	4628      	mov	r0, r5
 800b19c:	f000 fff4 	bl	800c188 <_sbrk_r>
 800b1a0:	3001      	adds	r0, #1
 800b1a2:	d1f2      	bne.n	800b18a <sbrk_aligned+0x22>
 800b1a4:	e7ef      	b.n	800b186 <sbrk_aligned+0x1e>
 800b1a6:	bf00      	nop
 800b1a8:	20002530 	.word	0x20002530

0800b1ac <_malloc_r>:
 800b1ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1b0:	1ccd      	adds	r5, r1, #3
 800b1b2:	f025 0503 	bic.w	r5, r5, #3
 800b1b6:	3508      	adds	r5, #8
 800b1b8:	2d0c      	cmp	r5, #12
 800b1ba:	bf38      	it	cc
 800b1bc:	250c      	movcc	r5, #12
 800b1be:	2d00      	cmp	r5, #0
 800b1c0:	4606      	mov	r6, r0
 800b1c2:	db01      	blt.n	800b1c8 <_malloc_r+0x1c>
 800b1c4:	42a9      	cmp	r1, r5
 800b1c6:	d904      	bls.n	800b1d2 <_malloc_r+0x26>
 800b1c8:	230c      	movs	r3, #12
 800b1ca:	6033      	str	r3, [r6, #0]
 800b1cc:	2000      	movs	r0, #0
 800b1ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b2a8 <_malloc_r+0xfc>
 800b1d6:	f000 f869 	bl	800b2ac <__malloc_lock>
 800b1da:	f8d8 3000 	ldr.w	r3, [r8]
 800b1de:	461c      	mov	r4, r3
 800b1e0:	bb44      	cbnz	r4, 800b234 <_malloc_r+0x88>
 800b1e2:	4629      	mov	r1, r5
 800b1e4:	4630      	mov	r0, r6
 800b1e6:	f7ff ffbf 	bl	800b168 <sbrk_aligned>
 800b1ea:	1c43      	adds	r3, r0, #1
 800b1ec:	4604      	mov	r4, r0
 800b1ee:	d158      	bne.n	800b2a2 <_malloc_r+0xf6>
 800b1f0:	f8d8 4000 	ldr.w	r4, [r8]
 800b1f4:	4627      	mov	r7, r4
 800b1f6:	2f00      	cmp	r7, #0
 800b1f8:	d143      	bne.n	800b282 <_malloc_r+0xd6>
 800b1fa:	2c00      	cmp	r4, #0
 800b1fc:	d04b      	beq.n	800b296 <_malloc_r+0xea>
 800b1fe:	6823      	ldr	r3, [r4, #0]
 800b200:	4639      	mov	r1, r7
 800b202:	4630      	mov	r0, r6
 800b204:	eb04 0903 	add.w	r9, r4, r3
 800b208:	f000 ffbe 	bl	800c188 <_sbrk_r>
 800b20c:	4581      	cmp	r9, r0
 800b20e:	d142      	bne.n	800b296 <_malloc_r+0xea>
 800b210:	6821      	ldr	r1, [r4, #0]
 800b212:	1a6d      	subs	r5, r5, r1
 800b214:	4629      	mov	r1, r5
 800b216:	4630      	mov	r0, r6
 800b218:	f7ff ffa6 	bl	800b168 <sbrk_aligned>
 800b21c:	3001      	adds	r0, #1
 800b21e:	d03a      	beq.n	800b296 <_malloc_r+0xea>
 800b220:	6823      	ldr	r3, [r4, #0]
 800b222:	442b      	add	r3, r5
 800b224:	6023      	str	r3, [r4, #0]
 800b226:	f8d8 3000 	ldr.w	r3, [r8]
 800b22a:	685a      	ldr	r2, [r3, #4]
 800b22c:	bb62      	cbnz	r2, 800b288 <_malloc_r+0xdc>
 800b22e:	f8c8 7000 	str.w	r7, [r8]
 800b232:	e00f      	b.n	800b254 <_malloc_r+0xa8>
 800b234:	6822      	ldr	r2, [r4, #0]
 800b236:	1b52      	subs	r2, r2, r5
 800b238:	d420      	bmi.n	800b27c <_malloc_r+0xd0>
 800b23a:	2a0b      	cmp	r2, #11
 800b23c:	d917      	bls.n	800b26e <_malloc_r+0xc2>
 800b23e:	1961      	adds	r1, r4, r5
 800b240:	42a3      	cmp	r3, r4
 800b242:	6025      	str	r5, [r4, #0]
 800b244:	bf18      	it	ne
 800b246:	6059      	strne	r1, [r3, #4]
 800b248:	6863      	ldr	r3, [r4, #4]
 800b24a:	bf08      	it	eq
 800b24c:	f8c8 1000 	streq.w	r1, [r8]
 800b250:	5162      	str	r2, [r4, r5]
 800b252:	604b      	str	r3, [r1, #4]
 800b254:	4630      	mov	r0, r6
 800b256:	f000 f82f 	bl	800b2b8 <__malloc_unlock>
 800b25a:	f104 000b 	add.w	r0, r4, #11
 800b25e:	1d23      	adds	r3, r4, #4
 800b260:	f020 0007 	bic.w	r0, r0, #7
 800b264:	1ac2      	subs	r2, r0, r3
 800b266:	bf1c      	itt	ne
 800b268:	1a1b      	subne	r3, r3, r0
 800b26a:	50a3      	strne	r3, [r4, r2]
 800b26c:	e7af      	b.n	800b1ce <_malloc_r+0x22>
 800b26e:	6862      	ldr	r2, [r4, #4]
 800b270:	42a3      	cmp	r3, r4
 800b272:	bf0c      	ite	eq
 800b274:	f8c8 2000 	streq.w	r2, [r8]
 800b278:	605a      	strne	r2, [r3, #4]
 800b27a:	e7eb      	b.n	800b254 <_malloc_r+0xa8>
 800b27c:	4623      	mov	r3, r4
 800b27e:	6864      	ldr	r4, [r4, #4]
 800b280:	e7ae      	b.n	800b1e0 <_malloc_r+0x34>
 800b282:	463c      	mov	r4, r7
 800b284:	687f      	ldr	r7, [r7, #4]
 800b286:	e7b6      	b.n	800b1f6 <_malloc_r+0x4a>
 800b288:	461a      	mov	r2, r3
 800b28a:	685b      	ldr	r3, [r3, #4]
 800b28c:	42a3      	cmp	r3, r4
 800b28e:	d1fb      	bne.n	800b288 <_malloc_r+0xdc>
 800b290:	2300      	movs	r3, #0
 800b292:	6053      	str	r3, [r2, #4]
 800b294:	e7de      	b.n	800b254 <_malloc_r+0xa8>
 800b296:	230c      	movs	r3, #12
 800b298:	6033      	str	r3, [r6, #0]
 800b29a:	4630      	mov	r0, r6
 800b29c:	f000 f80c 	bl	800b2b8 <__malloc_unlock>
 800b2a0:	e794      	b.n	800b1cc <_malloc_r+0x20>
 800b2a2:	6005      	str	r5, [r0, #0]
 800b2a4:	e7d6      	b.n	800b254 <_malloc_r+0xa8>
 800b2a6:	bf00      	nop
 800b2a8:	20002534 	.word	0x20002534

0800b2ac <__malloc_lock>:
 800b2ac:	4801      	ldr	r0, [pc, #4]	@ (800b2b4 <__malloc_lock+0x8>)
 800b2ae:	f000 bfb8 	b.w	800c222 <__retarget_lock_acquire_recursive>
 800b2b2:	bf00      	nop
 800b2b4:	20002678 	.word	0x20002678

0800b2b8 <__malloc_unlock>:
 800b2b8:	4801      	ldr	r0, [pc, #4]	@ (800b2c0 <__malloc_unlock+0x8>)
 800b2ba:	f000 bfb3 	b.w	800c224 <__retarget_lock_release_recursive>
 800b2be:	bf00      	nop
 800b2c0:	20002678 	.word	0x20002678

0800b2c4 <sulp>:
 800b2c4:	b570      	push	{r4, r5, r6, lr}
 800b2c6:	4604      	mov	r4, r0
 800b2c8:	460d      	mov	r5, r1
 800b2ca:	ec45 4b10 	vmov	d0, r4, r5
 800b2ce:	4616      	mov	r6, r2
 800b2d0:	f001 fecc 	bl	800d06c <__ulp>
 800b2d4:	ec51 0b10 	vmov	r0, r1, d0
 800b2d8:	b17e      	cbz	r6, 800b2fa <sulp+0x36>
 800b2da:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b2de:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	dd09      	ble.n	800b2fa <sulp+0x36>
 800b2e6:	051b      	lsls	r3, r3, #20
 800b2e8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b2ec:	2400      	movs	r4, #0
 800b2ee:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b2f2:	4622      	mov	r2, r4
 800b2f4:	462b      	mov	r3, r5
 800b2f6:	f7f5 f997 	bl	8000628 <__aeabi_dmul>
 800b2fa:	ec41 0b10 	vmov	d0, r0, r1
 800b2fe:	bd70      	pop	{r4, r5, r6, pc}

0800b300 <_strtod_l>:
 800b300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b304:	b09f      	sub	sp, #124	@ 0x7c
 800b306:	460c      	mov	r4, r1
 800b308:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b30a:	2200      	movs	r2, #0
 800b30c:	921a      	str	r2, [sp, #104]	@ 0x68
 800b30e:	9005      	str	r0, [sp, #20]
 800b310:	f04f 0a00 	mov.w	sl, #0
 800b314:	f04f 0b00 	mov.w	fp, #0
 800b318:	460a      	mov	r2, r1
 800b31a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b31c:	7811      	ldrb	r1, [r2, #0]
 800b31e:	292b      	cmp	r1, #43	@ 0x2b
 800b320:	d04a      	beq.n	800b3b8 <_strtod_l+0xb8>
 800b322:	d838      	bhi.n	800b396 <_strtod_l+0x96>
 800b324:	290d      	cmp	r1, #13
 800b326:	d832      	bhi.n	800b38e <_strtod_l+0x8e>
 800b328:	2908      	cmp	r1, #8
 800b32a:	d832      	bhi.n	800b392 <_strtod_l+0x92>
 800b32c:	2900      	cmp	r1, #0
 800b32e:	d03b      	beq.n	800b3a8 <_strtod_l+0xa8>
 800b330:	2200      	movs	r2, #0
 800b332:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b334:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b336:	782a      	ldrb	r2, [r5, #0]
 800b338:	2a30      	cmp	r2, #48	@ 0x30
 800b33a:	f040 80b3 	bne.w	800b4a4 <_strtod_l+0x1a4>
 800b33e:	786a      	ldrb	r2, [r5, #1]
 800b340:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b344:	2a58      	cmp	r2, #88	@ 0x58
 800b346:	d16e      	bne.n	800b426 <_strtod_l+0x126>
 800b348:	9302      	str	r3, [sp, #8]
 800b34a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b34c:	9301      	str	r3, [sp, #4]
 800b34e:	ab1a      	add	r3, sp, #104	@ 0x68
 800b350:	9300      	str	r3, [sp, #0]
 800b352:	4a8e      	ldr	r2, [pc, #568]	@ (800b58c <_strtod_l+0x28c>)
 800b354:	9805      	ldr	r0, [sp, #20]
 800b356:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b358:	a919      	add	r1, sp, #100	@ 0x64
 800b35a:	f001 f82f 	bl	800c3bc <__gethex>
 800b35e:	f010 060f 	ands.w	r6, r0, #15
 800b362:	4604      	mov	r4, r0
 800b364:	d005      	beq.n	800b372 <_strtod_l+0x72>
 800b366:	2e06      	cmp	r6, #6
 800b368:	d128      	bne.n	800b3bc <_strtod_l+0xbc>
 800b36a:	3501      	adds	r5, #1
 800b36c:	2300      	movs	r3, #0
 800b36e:	9519      	str	r5, [sp, #100]	@ 0x64
 800b370:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b372:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b374:	2b00      	cmp	r3, #0
 800b376:	f040 858e 	bne.w	800be96 <_strtod_l+0xb96>
 800b37a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b37c:	b1cb      	cbz	r3, 800b3b2 <_strtod_l+0xb2>
 800b37e:	4652      	mov	r2, sl
 800b380:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800b384:	ec43 2b10 	vmov	d0, r2, r3
 800b388:	b01f      	add	sp, #124	@ 0x7c
 800b38a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b38e:	2920      	cmp	r1, #32
 800b390:	d1ce      	bne.n	800b330 <_strtod_l+0x30>
 800b392:	3201      	adds	r2, #1
 800b394:	e7c1      	b.n	800b31a <_strtod_l+0x1a>
 800b396:	292d      	cmp	r1, #45	@ 0x2d
 800b398:	d1ca      	bne.n	800b330 <_strtod_l+0x30>
 800b39a:	2101      	movs	r1, #1
 800b39c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b39e:	1c51      	adds	r1, r2, #1
 800b3a0:	9119      	str	r1, [sp, #100]	@ 0x64
 800b3a2:	7852      	ldrb	r2, [r2, #1]
 800b3a4:	2a00      	cmp	r2, #0
 800b3a6:	d1c5      	bne.n	800b334 <_strtod_l+0x34>
 800b3a8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b3aa:	9419      	str	r4, [sp, #100]	@ 0x64
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	f040 8570 	bne.w	800be92 <_strtod_l+0xb92>
 800b3b2:	4652      	mov	r2, sl
 800b3b4:	465b      	mov	r3, fp
 800b3b6:	e7e5      	b.n	800b384 <_strtod_l+0x84>
 800b3b8:	2100      	movs	r1, #0
 800b3ba:	e7ef      	b.n	800b39c <_strtod_l+0x9c>
 800b3bc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b3be:	b13a      	cbz	r2, 800b3d0 <_strtod_l+0xd0>
 800b3c0:	2135      	movs	r1, #53	@ 0x35
 800b3c2:	a81c      	add	r0, sp, #112	@ 0x70
 800b3c4:	f001 ff4c 	bl	800d260 <__copybits>
 800b3c8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b3ca:	9805      	ldr	r0, [sp, #20]
 800b3cc:	f001 fb1a 	bl	800ca04 <_Bfree>
 800b3d0:	3e01      	subs	r6, #1
 800b3d2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b3d4:	2e04      	cmp	r6, #4
 800b3d6:	d806      	bhi.n	800b3e6 <_strtod_l+0xe6>
 800b3d8:	e8df f006 	tbb	[pc, r6]
 800b3dc:	201d0314 	.word	0x201d0314
 800b3e0:	14          	.byte	0x14
 800b3e1:	00          	.byte	0x00
 800b3e2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b3e6:	05e1      	lsls	r1, r4, #23
 800b3e8:	bf48      	it	mi
 800b3ea:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b3ee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b3f2:	0d1b      	lsrs	r3, r3, #20
 800b3f4:	051b      	lsls	r3, r3, #20
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d1bb      	bne.n	800b372 <_strtod_l+0x72>
 800b3fa:	f000 fee7 	bl	800c1cc <__errno>
 800b3fe:	2322      	movs	r3, #34	@ 0x22
 800b400:	6003      	str	r3, [r0, #0]
 800b402:	e7b6      	b.n	800b372 <_strtod_l+0x72>
 800b404:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b408:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b40c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b410:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b414:	e7e7      	b.n	800b3e6 <_strtod_l+0xe6>
 800b416:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800b594 <_strtod_l+0x294>
 800b41a:	e7e4      	b.n	800b3e6 <_strtod_l+0xe6>
 800b41c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b420:	f04f 3aff 	mov.w	sl, #4294967295
 800b424:	e7df      	b.n	800b3e6 <_strtod_l+0xe6>
 800b426:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b428:	1c5a      	adds	r2, r3, #1
 800b42a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b42c:	785b      	ldrb	r3, [r3, #1]
 800b42e:	2b30      	cmp	r3, #48	@ 0x30
 800b430:	d0f9      	beq.n	800b426 <_strtod_l+0x126>
 800b432:	2b00      	cmp	r3, #0
 800b434:	d09d      	beq.n	800b372 <_strtod_l+0x72>
 800b436:	2301      	movs	r3, #1
 800b438:	9309      	str	r3, [sp, #36]	@ 0x24
 800b43a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b43c:	930c      	str	r3, [sp, #48]	@ 0x30
 800b43e:	2300      	movs	r3, #0
 800b440:	9308      	str	r3, [sp, #32]
 800b442:	930a      	str	r3, [sp, #40]	@ 0x28
 800b444:	461f      	mov	r7, r3
 800b446:	220a      	movs	r2, #10
 800b448:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b44a:	7805      	ldrb	r5, [r0, #0]
 800b44c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b450:	b2d9      	uxtb	r1, r3
 800b452:	2909      	cmp	r1, #9
 800b454:	d928      	bls.n	800b4a8 <_strtod_l+0x1a8>
 800b456:	494e      	ldr	r1, [pc, #312]	@ (800b590 <_strtod_l+0x290>)
 800b458:	2201      	movs	r2, #1
 800b45a:	f000 fe4e 	bl	800c0fa <strncmp>
 800b45e:	2800      	cmp	r0, #0
 800b460:	d032      	beq.n	800b4c8 <_strtod_l+0x1c8>
 800b462:	2000      	movs	r0, #0
 800b464:	462a      	mov	r2, r5
 800b466:	4681      	mov	r9, r0
 800b468:	463d      	mov	r5, r7
 800b46a:	4603      	mov	r3, r0
 800b46c:	2a65      	cmp	r2, #101	@ 0x65
 800b46e:	d001      	beq.n	800b474 <_strtod_l+0x174>
 800b470:	2a45      	cmp	r2, #69	@ 0x45
 800b472:	d114      	bne.n	800b49e <_strtod_l+0x19e>
 800b474:	b91d      	cbnz	r5, 800b47e <_strtod_l+0x17e>
 800b476:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b478:	4302      	orrs	r2, r0
 800b47a:	d095      	beq.n	800b3a8 <_strtod_l+0xa8>
 800b47c:	2500      	movs	r5, #0
 800b47e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b480:	1c62      	adds	r2, r4, #1
 800b482:	9219      	str	r2, [sp, #100]	@ 0x64
 800b484:	7862      	ldrb	r2, [r4, #1]
 800b486:	2a2b      	cmp	r2, #43	@ 0x2b
 800b488:	d077      	beq.n	800b57a <_strtod_l+0x27a>
 800b48a:	2a2d      	cmp	r2, #45	@ 0x2d
 800b48c:	d07b      	beq.n	800b586 <_strtod_l+0x286>
 800b48e:	f04f 0c00 	mov.w	ip, #0
 800b492:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b496:	2909      	cmp	r1, #9
 800b498:	f240 8082 	bls.w	800b5a0 <_strtod_l+0x2a0>
 800b49c:	9419      	str	r4, [sp, #100]	@ 0x64
 800b49e:	f04f 0800 	mov.w	r8, #0
 800b4a2:	e0a2      	b.n	800b5ea <_strtod_l+0x2ea>
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	e7c7      	b.n	800b438 <_strtod_l+0x138>
 800b4a8:	2f08      	cmp	r7, #8
 800b4aa:	bfd5      	itete	le
 800b4ac:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800b4ae:	9908      	ldrgt	r1, [sp, #32]
 800b4b0:	fb02 3301 	mlale	r3, r2, r1, r3
 800b4b4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800b4b8:	f100 0001 	add.w	r0, r0, #1
 800b4bc:	bfd4      	ite	le
 800b4be:	930a      	strle	r3, [sp, #40]	@ 0x28
 800b4c0:	9308      	strgt	r3, [sp, #32]
 800b4c2:	3701      	adds	r7, #1
 800b4c4:	9019      	str	r0, [sp, #100]	@ 0x64
 800b4c6:	e7bf      	b.n	800b448 <_strtod_l+0x148>
 800b4c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b4ca:	1c5a      	adds	r2, r3, #1
 800b4cc:	9219      	str	r2, [sp, #100]	@ 0x64
 800b4ce:	785a      	ldrb	r2, [r3, #1]
 800b4d0:	b37f      	cbz	r7, 800b532 <_strtod_l+0x232>
 800b4d2:	4681      	mov	r9, r0
 800b4d4:	463d      	mov	r5, r7
 800b4d6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b4da:	2b09      	cmp	r3, #9
 800b4dc:	d912      	bls.n	800b504 <_strtod_l+0x204>
 800b4de:	2301      	movs	r3, #1
 800b4e0:	e7c4      	b.n	800b46c <_strtod_l+0x16c>
 800b4e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b4e4:	1c5a      	adds	r2, r3, #1
 800b4e6:	9219      	str	r2, [sp, #100]	@ 0x64
 800b4e8:	785a      	ldrb	r2, [r3, #1]
 800b4ea:	3001      	adds	r0, #1
 800b4ec:	2a30      	cmp	r2, #48	@ 0x30
 800b4ee:	d0f8      	beq.n	800b4e2 <_strtod_l+0x1e2>
 800b4f0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b4f4:	2b08      	cmp	r3, #8
 800b4f6:	f200 84d3 	bhi.w	800bea0 <_strtod_l+0xba0>
 800b4fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b4fc:	930c      	str	r3, [sp, #48]	@ 0x30
 800b4fe:	4681      	mov	r9, r0
 800b500:	2000      	movs	r0, #0
 800b502:	4605      	mov	r5, r0
 800b504:	3a30      	subs	r2, #48	@ 0x30
 800b506:	f100 0301 	add.w	r3, r0, #1
 800b50a:	d02a      	beq.n	800b562 <_strtod_l+0x262>
 800b50c:	4499      	add	r9, r3
 800b50e:	eb00 0c05 	add.w	ip, r0, r5
 800b512:	462b      	mov	r3, r5
 800b514:	210a      	movs	r1, #10
 800b516:	4563      	cmp	r3, ip
 800b518:	d10d      	bne.n	800b536 <_strtod_l+0x236>
 800b51a:	1c69      	adds	r1, r5, #1
 800b51c:	4401      	add	r1, r0
 800b51e:	4428      	add	r0, r5
 800b520:	2808      	cmp	r0, #8
 800b522:	dc16      	bgt.n	800b552 <_strtod_l+0x252>
 800b524:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b526:	230a      	movs	r3, #10
 800b528:	fb03 2300 	mla	r3, r3, r0, r2
 800b52c:	930a      	str	r3, [sp, #40]	@ 0x28
 800b52e:	2300      	movs	r3, #0
 800b530:	e018      	b.n	800b564 <_strtod_l+0x264>
 800b532:	4638      	mov	r0, r7
 800b534:	e7da      	b.n	800b4ec <_strtod_l+0x1ec>
 800b536:	2b08      	cmp	r3, #8
 800b538:	f103 0301 	add.w	r3, r3, #1
 800b53c:	dc03      	bgt.n	800b546 <_strtod_l+0x246>
 800b53e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b540:	434e      	muls	r6, r1
 800b542:	960a      	str	r6, [sp, #40]	@ 0x28
 800b544:	e7e7      	b.n	800b516 <_strtod_l+0x216>
 800b546:	2b10      	cmp	r3, #16
 800b548:	bfde      	ittt	le
 800b54a:	9e08      	ldrle	r6, [sp, #32]
 800b54c:	434e      	mulle	r6, r1
 800b54e:	9608      	strle	r6, [sp, #32]
 800b550:	e7e1      	b.n	800b516 <_strtod_l+0x216>
 800b552:	280f      	cmp	r0, #15
 800b554:	dceb      	bgt.n	800b52e <_strtod_l+0x22e>
 800b556:	9808      	ldr	r0, [sp, #32]
 800b558:	230a      	movs	r3, #10
 800b55a:	fb03 2300 	mla	r3, r3, r0, r2
 800b55e:	9308      	str	r3, [sp, #32]
 800b560:	e7e5      	b.n	800b52e <_strtod_l+0x22e>
 800b562:	4629      	mov	r1, r5
 800b564:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b566:	1c50      	adds	r0, r2, #1
 800b568:	9019      	str	r0, [sp, #100]	@ 0x64
 800b56a:	7852      	ldrb	r2, [r2, #1]
 800b56c:	4618      	mov	r0, r3
 800b56e:	460d      	mov	r5, r1
 800b570:	e7b1      	b.n	800b4d6 <_strtod_l+0x1d6>
 800b572:	f04f 0900 	mov.w	r9, #0
 800b576:	2301      	movs	r3, #1
 800b578:	e77d      	b.n	800b476 <_strtod_l+0x176>
 800b57a:	f04f 0c00 	mov.w	ip, #0
 800b57e:	1ca2      	adds	r2, r4, #2
 800b580:	9219      	str	r2, [sp, #100]	@ 0x64
 800b582:	78a2      	ldrb	r2, [r4, #2]
 800b584:	e785      	b.n	800b492 <_strtod_l+0x192>
 800b586:	f04f 0c01 	mov.w	ip, #1
 800b58a:	e7f8      	b.n	800b57e <_strtod_l+0x27e>
 800b58c:	0800efe4 	.word	0x0800efe4
 800b590:	0800efc0 	.word	0x0800efc0
 800b594:	7ff00000 	.word	0x7ff00000
 800b598:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b59a:	1c51      	adds	r1, r2, #1
 800b59c:	9119      	str	r1, [sp, #100]	@ 0x64
 800b59e:	7852      	ldrb	r2, [r2, #1]
 800b5a0:	2a30      	cmp	r2, #48	@ 0x30
 800b5a2:	d0f9      	beq.n	800b598 <_strtod_l+0x298>
 800b5a4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b5a8:	2908      	cmp	r1, #8
 800b5aa:	f63f af78 	bhi.w	800b49e <_strtod_l+0x19e>
 800b5ae:	3a30      	subs	r2, #48	@ 0x30
 800b5b0:	920e      	str	r2, [sp, #56]	@ 0x38
 800b5b2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b5b4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b5b6:	f04f 080a 	mov.w	r8, #10
 800b5ba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b5bc:	1c56      	adds	r6, r2, #1
 800b5be:	9619      	str	r6, [sp, #100]	@ 0x64
 800b5c0:	7852      	ldrb	r2, [r2, #1]
 800b5c2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b5c6:	f1be 0f09 	cmp.w	lr, #9
 800b5ca:	d939      	bls.n	800b640 <_strtod_l+0x340>
 800b5cc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b5ce:	1a76      	subs	r6, r6, r1
 800b5d0:	2e08      	cmp	r6, #8
 800b5d2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b5d6:	dc03      	bgt.n	800b5e0 <_strtod_l+0x2e0>
 800b5d8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b5da:	4588      	cmp	r8, r1
 800b5dc:	bfa8      	it	ge
 800b5de:	4688      	movge	r8, r1
 800b5e0:	f1bc 0f00 	cmp.w	ip, #0
 800b5e4:	d001      	beq.n	800b5ea <_strtod_l+0x2ea>
 800b5e6:	f1c8 0800 	rsb	r8, r8, #0
 800b5ea:	2d00      	cmp	r5, #0
 800b5ec:	d14e      	bne.n	800b68c <_strtod_l+0x38c>
 800b5ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b5f0:	4308      	orrs	r0, r1
 800b5f2:	f47f aebe 	bne.w	800b372 <_strtod_l+0x72>
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	f47f aed6 	bne.w	800b3a8 <_strtod_l+0xa8>
 800b5fc:	2a69      	cmp	r2, #105	@ 0x69
 800b5fe:	d028      	beq.n	800b652 <_strtod_l+0x352>
 800b600:	dc25      	bgt.n	800b64e <_strtod_l+0x34e>
 800b602:	2a49      	cmp	r2, #73	@ 0x49
 800b604:	d025      	beq.n	800b652 <_strtod_l+0x352>
 800b606:	2a4e      	cmp	r2, #78	@ 0x4e
 800b608:	f47f aece 	bne.w	800b3a8 <_strtod_l+0xa8>
 800b60c:	499b      	ldr	r1, [pc, #620]	@ (800b87c <_strtod_l+0x57c>)
 800b60e:	a819      	add	r0, sp, #100	@ 0x64
 800b610:	f001 f8f6 	bl	800c800 <__match>
 800b614:	2800      	cmp	r0, #0
 800b616:	f43f aec7 	beq.w	800b3a8 <_strtod_l+0xa8>
 800b61a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b61c:	781b      	ldrb	r3, [r3, #0]
 800b61e:	2b28      	cmp	r3, #40	@ 0x28
 800b620:	d12e      	bne.n	800b680 <_strtod_l+0x380>
 800b622:	4997      	ldr	r1, [pc, #604]	@ (800b880 <_strtod_l+0x580>)
 800b624:	aa1c      	add	r2, sp, #112	@ 0x70
 800b626:	a819      	add	r0, sp, #100	@ 0x64
 800b628:	f001 f8fe 	bl	800c828 <__hexnan>
 800b62c:	2805      	cmp	r0, #5
 800b62e:	d127      	bne.n	800b680 <_strtod_l+0x380>
 800b630:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b632:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b636:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b63a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b63e:	e698      	b.n	800b372 <_strtod_l+0x72>
 800b640:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b642:	fb08 2101 	mla	r1, r8, r1, r2
 800b646:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b64a:	920e      	str	r2, [sp, #56]	@ 0x38
 800b64c:	e7b5      	b.n	800b5ba <_strtod_l+0x2ba>
 800b64e:	2a6e      	cmp	r2, #110	@ 0x6e
 800b650:	e7da      	b.n	800b608 <_strtod_l+0x308>
 800b652:	498c      	ldr	r1, [pc, #560]	@ (800b884 <_strtod_l+0x584>)
 800b654:	a819      	add	r0, sp, #100	@ 0x64
 800b656:	f001 f8d3 	bl	800c800 <__match>
 800b65a:	2800      	cmp	r0, #0
 800b65c:	f43f aea4 	beq.w	800b3a8 <_strtod_l+0xa8>
 800b660:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b662:	4989      	ldr	r1, [pc, #548]	@ (800b888 <_strtod_l+0x588>)
 800b664:	3b01      	subs	r3, #1
 800b666:	a819      	add	r0, sp, #100	@ 0x64
 800b668:	9319      	str	r3, [sp, #100]	@ 0x64
 800b66a:	f001 f8c9 	bl	800c800 <__match>
 800b66e:	b910      	cbnz	r0, 800b676 <_strtod_l+0x376>
 800b670:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b672:	3301      	adds	r3, #1
 800b674:	9319      	str	r3, [sp, #100]	@ 0x64
 800b676:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800b898 <_strtod_l+0x598>
 800b67a:	f04f 0a00 	mov.w	sl, #0
 800b67e:	e678      	b.n	800b372 <_strtod_l+0x72>
 800b680:	4882      	ldr	r0, [pc, #520]	@ (800b88c <_strtod_l+0x58c>)
 800b682:	f000 fde1 	bl	800c248 <nan>
 800b686:	ec5b ab10 	vmov	sl, fp, d0
 800b68a:	e672      	b.n	800b372 <_strtod_l+0x72>
 800b68c:	eba8 0309 	sub.w	r3, r8, r9
 800b690:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b692:	9309      	str	r3, [sp, #36]	@ 0x24
 800b694:	2f00      	cmp	r7, #0
 800b696:	bf08      	it	eq
 800b698:	462f      	moveq	r7, r5
 800b69a:	2d10      	cmp	r5, #16
 800b69c:	462c      	mov	r4, r5
 800b69e:	bfa8      	it	ge
 800b6a0:	2410      	movge	r4, #16
 800b6a2:	f7f4 ff47 	bl	8000534 <__aeabi_ui2d>
 800b6a6:	2d09      	cmp	r5, #9
 800b6a8:	4682      	mov	sl, r0
 800b6aa:	468b      	mov	fp, r1
 800b6ac:	dc13      	bgt.n	800b6d6 <_strtod_l+0x3d6>
 800b6ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	f43f ae5e 	beq.w	800b372 <_strtod_l+0x72>
 800b6b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6b8:	dd78      	ble.n	800b7ac <_strtod_l+0x4ac>
 800b6ba:	2b16      	cmp	r3, #22
 800b6bc:	dc5f      	bgt.n	800b77e <_strtod_l+0x47e>
 800b6be:	4974      	ldr	r1, [pc, #464]	@ (800b890 <_strtod_l+0x590>)
 800b6c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b6c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b6c8:	4652      	mov	r2, sl
 800b6ca:	465b      	mov	r3, fp
 800b6cc:	f7f4 ffac 	bl	8000628 <__aeabi_dmul>
 800b6d0:	4682      	mov	sl, r0
 800b6d2:	468b      	mov	fp, r1
 800b6d4:	e64d      	b.n	800b372 <_strtod_l+0x72>
 800b6d6:	4b6e      	ldr	r3, [pc, #440]	@ (800b890 <_strtod_l+0x590>)
 800b6d8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b6dc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b6e0:	f7f4 ffa2 	bl	8000628 <__aeabi_dmul>
 800b6e4:	4682      	mov	sl, r0
 800b6e6:	9808      	ldr	r0, [sp, #32]
 800b6e8:	468b      	mov	fp, r1
 800b6ea:	f7f4 ff23 	bl	8000534 <__aeabi_ui2d>
 800b6ee:	4602      	mov	r2, r0
 800b6f0:	460b      	mov	r3, r1
 800b6f2:	4650      	mov	r0, sl
 800b6f4:	4659      	mov	r1, fp
 800b6f6:	f7f4 fde1 	bl	80002bc <__adddf3>
 800b6fa:	2d0f      	cmp	r5, #15
 800b6fc:	4682      	mov	sl, r0
 800b6fe:	468b      	mov	fp, r1
 800b700:	ddd5      	ble.n	800b6ae <_strtod_l+0x3ae>
 800b702:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b704:	1b2c      	subs	r4, r5, r4
 800b706:	441c      	add	r4, r3
 800b708:	2c00      	cmp	r4, #0
 800b70a:	f340 8096 	ble.w	800b83a <_strtod_l+0x53a>
 800b70e:	f014 030f 	ands.w	r3, r4, #15
 800b712:	d00a      	beq.n	800b72a <_strtod_l+0x42a>
 800b714:	495e      	ldr	r1, [pc, #376]	@ (800b890 <_strtod_l+0x590>)
 800b716:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b71a:	4652      	mov	r2, sl
 800b71c:	465b      	mov	r3, fp
 800b71e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b722:	f7f4 ff81 	bl	8000628 <__aeabi_dmul>
 800b726:	4682      	mov	sl, r0
 800b728:	468b      	mov	fp, r1
 800b72a:	f034 040f 	bics.w	r4, r4, #15
 800b72e:	d073      	beq.n	800b818 <_strtod_l+0x518>
 800b730:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b734:	dd48      	ble.n	800b7c8 <_strtod_l+0x4c8>
 800b736:	2400      	movs	r4, #0
 800b738:	46a0      	mov	r8, r4
 800b73a:	940a      	str	r4, [sp, #40]	@ 0x28
 800b73c:	46a1      	mov	r9, r4
 800b73e:	9a05      	ldr	r2, [sp, #20]
 800b740:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800b898 <_strtod_l+0x598>
 800b744:	2322      	movs	r3, #34	@ 0x22
 800b746:	6013      	str	r3, [r2, #0]
 800b748:	f04f 0a00 	mov.w	sl, #0
 800b74c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b74e:	2b00      	cmp	r3, #0
 800b750:	f43f ae0f 	beq.w	800b372 <_strtod_l+0x72>
 800b754:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b756:	9805      	ldr	r0, [sp, #20]
 800b758:	f001 f954 	bl	800ca04 <_Bfree>
 800b75c:	9805      	ldr	r0, [sp, #20]
 800b75e:	4649      	mov	r1, r9
 800b760:	f001 f950 	bl	800ca04 <_Bfree>
 800b764:	9805      	ldr	r0, [sp, #20]
 800b766:	4641      	mov	r1, r8
 800b768:	f001 f94c 	bl	800ca04 <_Bfree>
 800b76c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b76e:	9805      	ldr	r0, [sp, #20]
 800b770:	f001 f948 	bl	800ca04 <_Bfree>
 800b774:	9805      	ldr	r0, [sp, #20]
 800b776:	4621      	mov	r1, r4
 800b778:	f001 f944 	bl	800ca04 <_Bfree>
 800b77c:	e5f9      	b.n	800b372 <_strtod_l+0x72>
 800b77e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b780:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b784:	4293      	cmp	r3, r2
 800b786:	dbbc      	blt.n	800b702 <_strtod_l+0x402>
 800b788:	4c41      	ldr	r4, [pc, #260]	@ (800b890 <_strtod_l+0x590>)
 800b78a:	f1c5 050f 	rsb	r5, r5, #15
 800b78e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b792:	4652      	mov	r2, sl
 800b794:	465b      	mov	r3, fp
 800b796:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b79a:	f7f4 ff45 	bl	8000628 <__aeabi_dmul>
 800b79e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7a0:	1b5d      	subs	r5, r3, r5
 800b7a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b7a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b7aa:	e78f      	b.n	800b6cc <_strtod_l+0x3cc>
 800b7ac:	3316      	adds	r3, #22
 800b7ae:	dba8      	blt.n	800b702 <_strtod_l+0x402>
 800b7b0:	4b37      	ldr	r3, [pc, #220]	@ (800b890 <_strtod_l+0x590>)
 800b7b2:	eba9 0808 	sub.w	r8, r9, r8
 800b7b6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b7ba:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b7be:	4650      	mov	r0, sl
 800b7c0:	4659      	mov	r1, fp
 800b7c2:	f7f5 f85b 	bl	800087c <__aeabi_ddiv>
 800b7c6:	e783      	b.n	800b6d0 <_strtod_l+0x3d0>
 800b7c8:	4b32      	ldr	r3, [pc, #200]	@ (800b894 <_strtod_l+0x594>)
 800b7ca:	9308      	str	r3, [sp, #32]
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	1124      	asrs	r4, r4, #4
 800b7d0:	4650      	mov	r0, sl
 800b7d2:	4659      	mov	r1, fp
 800b7d4:	461e      	mov	r6, r3
 800b7d6:	2c01      	cmp	r4, #1
 800b7d8:	dc21      	bgt.n	800b81e <_strtod_l+0x51e>
 800b7da:	b10b      	cbz	r3, 800b7e0 <_strtod_l+0x4e0>
 800b7dc:	4682      	mov	sl, r0
 800b7de:	468b      	mov	fp, r1
 800b7e0:	492c      	ldr	r1, [pc, #176]	@ (800b894 <_strtod_l+0x594>)
 800b7e2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b7e6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b7ea:	4652      	mov	r2, sl
 800b7ec:	465b      	mov	r3, fp
 800b7ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b7f2:	f7f4 ff19 	bl	8000628 <__aeabi_dmul>
 800b7f6:	4b28      	ldr	r3, [pc, #160]	@ (800b898 <_strtod_l+0x598>)
 800b7f8:	460a      	mov	r2, r1
 800b7fa:	400b      	ands	r3, r1
 800b7fc:	4927      	ldr	r1, [pc, #156]	@ (800b89c <_strtod_l+0x59c>)
 800b7fe:	428b      	cmp	r3, r1
 800b800:	4682      	mov	sl, r0
 800b802:	d898      	bhi.n	800b736 <_strtod_l+0x436>
 800b804:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b808:	428b      	cmp	r3, r1
 800b80a:	bf86      	itte	hi
 800b80c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800b8a0 <_strtod_l+0x5a0>
 800b810:	f04f 3aff 	movhi.w	sl, #4294967295
 800b814:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b818:	2300      	movs	r3, #0
 800b81a:	9308      	str	r3, [sp, #32]
 800b81c:	e07a      	b.n	800b914 <_strtod_l+0x614>
 800b81e:	07e2      	lsls	r2, r4, #31
 800b820:	d505      	bpl.n	800b82e <_strtod_l+0x52e>
 800b822:	9b08      	ldr	r3, [sp, #32]
 800b824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b828:	f7f4 fefe 	bl	8000628 <__aeabi_dmul>
 800b82c:	2301      	movs	r3, #1
 800b82e:	9a08      	ldr	r2, [sp, #32]
 800b830:	3208      	adds	r2, #8
 800b832:	3601      	adds	r6, #1
 800b834:	1064      	asrs	r4, r4, #1
 800b836:	9208      	str	r2, [sp, #32]
 800b838:	e7cd      	b.n	800b7d6 <_strtod_l+0x4d6>
 800b83a:	d0ed      	beq.n	800b818 <_strtod_l+0x518>
 800b83c:	4264      	negs	r4, r4
 800b83e:	f014 020f 	ands.w	r2, r4, #15
 800b842:	d00a      	beq.n	800b85a <_strtod_l+0x55a>
 800b844:	4b12      	ldr	r3, [pc, #72]	@ (800b890 <_strtod_l+0x590>)
 800b846:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b84a:	4650      	mov	r0, sl
 800b84c:	4659      	mov	r1, fp
 800b84e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b852:	f7f5 f813 	bl	800087c <__aeabi_ddiv>
 800b856:	4682      	mov	sl, r0
 800b858:	468b      	mov	fp, r1
 800b85a:	1124      	asrs	r4, r4, #4
 800b85c:	d0dc      	beq.n	800b818 <_strtod_l+0x518>
 800b85e:	2c1f      	cmp	r4, #31
 800b860:	dd20      	ble.n	800b8a4 <_strtod_l+0x5a4>
 800b862:	2400      	movs	r4, #0
 800b864:	46a0      	mov	r8, r4
 800b866:	940a      	str	r4, [sp, #40]	@ 0x28
 800b868:	46a1      	mov	r9, r4
 800b86a:	9a05      	ldr	r2, [sp, #20]
 800b86c:	2322      	movs	r3, #34	@ 0x22
 800b86e:	f04f 0a00 	mov.w	sl, #0
 800b872:	f04f 0b00 	mov.w	fp, #0
 800b876:	6013      	str	r3, [r2, #0]
 800b878:	e768      	b.n	800b74c <_strtod_l+0x44c>
 800b87a:	bf00      	nop
 800b87c:	0800efcb 	.word	0x0800efcb
 800b880:	0800efd0 	.word	0x0800efd0
 800b884:	0800efc2 	.word	0x0800efc2
 800b888:	0800efc5 	.word	0x0800efc5
 800b88c:	0800f344 	.word	0x0800f344
 800b890:	0800f140 	.word	0x0800f140
 800b894:	0800f118 	.word	0x0800f118
 800b898:	7ff00000 	.word	0x7ff00000
 800b89c:	7ca00000 	.word	0x7ca00000
 800b8a0:	7fefffff 	.word	0x7fefffff
 800b8a4:	f014 0310 	ands.w	r3, r4, #16
 800b8a8:	bf18      	it	ne
 800b8aa:	236a      	movne	r3, #106	@ 0x6a
 800b8ac:	4ea9      	ldr	r6, [pc, #676]	@ (800bb54 <_strtod_l+0x854>)
 800b8ae:	9308      	str	r3, [sp, #32]
 800b8b0:	4650      	mov	r0, sl
 800b8b2:	4659      	mov	r1, fp
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	07e2      	lsls	r2, r4, #31
 800b8b8:	d504      	bpl.n	800b8c4 <_strtod_l+0x5c4>
 800b8ba:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b8be:	f7f4 feb3 	bl	8000628 <__aeabi_dmul>
 800b8c2:	2301      	movs	r3, #1
 800b8c4:	1064      	asrs	r4, r4, #1
 800b8c6:	f106 0608 	add.w	r6, r6, #8
 800b8ca:	d1f4      	bne.n	800b8b6 <_strtod_l+0x5b6>
 800b8cc:	b10b      	cbz	r3, 800b8d2 <_strtod_l+0x5d2>
 800b8ce:	4682      	mov	sl, r0
 800b8d0:	468b      	mov	fp, r1
 800b8d2:	9b08      	ldr	r3, [sp, #32]
 800b8d4:	b1b3      	cbz	r3, 800b904 <_strtod_l+0x604>
 800b8d6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b8da:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	4659      	mov	r1, fp
 800b8e2:	dd0f      	ble.n	800b904 <_strtod_l+0x604>
 800b8e4:	2b1f      	cmp	r3, #31
 800b8e6:	dd55      	ble.n	800b994 <_strtod_l+0x694>
 800b8e8:	2b34      	cmp	r3, #52	@ 0x34
 800b8ea:	bfde      	ittt	le
 800b8ec:	f04f 33ff 	movle.w	r3, #4294967295
 800b8f0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b8f4:	4093      	lslle	r3, r2
 800b8f6:	f04f 0a00 	mov.w	sl, #0
 800b8fa:	bfcc      	ite	gt
 800b8fc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b900:	ea03 0b01 	andle.w	fp, r3, r1
 800b904:	2200      	movs	r2, #0
 800b906:	2300      	movs	r3, #0
 800b908:	4650      	mov	r0, sl
 800b90a:	4659      	mov	r1, fp
 800b90c:	f7f5 f8f4 	bl	8000af8 <__aeabi_dcmpeq>
 800b910:	2800      	cmp	r0, #0
 800b912:	d1a6      	bne.n	800b862 <_strtod_l+0x562>
 800b914:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b916:	9300      	str	r3, [sp, #0]
 800b918:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b91a:	9805      	ldr	r0, [sp, #20]
 800b91c:	462b      	mov	r3, r5
 800b91e:	463a      	mov	r2, r7
 800b920:	f001 f8d8 	bl	800cad4 <__s2b>
 800b924:	900a      	str	r0, [sp, #40]	@ 0x28
 800b926:	2800      	cmp	r0, #0
 800b928:	f43f af05 	beq.w	800b736 <_strtod_l+0x436>
 800b92c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b92e:	2a00      	cmp	r2, #0
 800b930:	eba9 0308 	sub.w	r3, r9, r8
 800b934:	bfa8      	it	ge
 800b936:	2300      	movge	r3, #0
 800b938:	9312      	str	r3, [sp, #72]	@ 0x48
 800b93a:	2400      	movs	r4, #0
 800b93c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b940:	9316      	str	r3, [sp, #88]	@ 0x58
 800b942:	46a0      	mov	r8, r4
 800b944:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b946:	9805      	ldr	r0, [sp, #20]
 800b948:	6859      	ldr	r1, [r3, #4]
 800b94a:	f001 f81b 	bl	800c984 <_Balloc>
 800b94e:	4681      	mov	r9, r0
 800b950:	2800      	cmp	r0, #0
 800b952:	f43f aef4 	beq.w	800b73e <_strtod_l+0x43e>
 800b956:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b958:	691a      	ldr	r2, [r3, #16]
 800b95a:	3202      	adds	r2, #2
 800b95c:	f103 010c 	add.w	r1, r3, #12
 800b960:	0092      	lsls	r2, r2, #2
 800b962:	300c      	adds	r0, #12
 800b964:	f000 fc5f 	bl	800c226 <memcpy>
 800b968:	ec4b ab10 	vmov	d0, sl, fp
 800b96c:	9805      	ldr	r0, [sp, #20]
 800b96e:	aa1c      	add	r2, sp, #112	@ 0x70
 800b970:	a91b      	add	r1, sp, #108	@ 0x6c
 800b972:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b976:	f001 fbe9 	bl	800d14c <__d2b>
 800b97a:	901a      	str	r0, [sp, #104]	@ 0x68
 800b97c:	2800      	cmp	r0, #0
 800b97e:	f43f aede 	beq.w	800b73e <_strtod_l+0x43e>
 800b982:	9805      	ldr	r0, [sp, #20]
 800b984:	2101      	movs	r1, #1
 800b986:	f001 f93b 	bl	800cc00 <__i2b>
 800b98a:	4680      	mov	r8, r0
 800b98c:	b948      	cbnz	r0, 800b9a2 <_strtod_l+0x6a2>
 800b98e:	f04f 0800 	mov.w	r8, #0
 800b992:	e6d4      	b.n	800b73e <_strtod_l+0x43e>
 800b994:	f04f 32ff 	mov.w	r2, #4294967295
 800b998:	fa02 f303 	lsl.w	r3, r2, r3
 800b99c:	ea03 0a0a 	and.w	sl, r3, sl
 800b9a0:	e7b0      	b.n	800b904 <_strtod_l+0x604>
 800b9a2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b9a4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b9a6:	2d00      	cmp	r5, #0
 800b9a8:	bfab      	itete	ge
 800b9aa:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b9ac:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b9ae:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b9b0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b9b2:	bfac      	ite	ge
 800b9b4:	18ef      	addge	r7, r5, r3
 800b9b6:	1b5e      	sublt	r6, r3, r5
 800b9b8:	9b08      	ldr	r3, [sp, #32]
 800b9ba:	1aed      	subs	r5, r5, r3
 800b9bc:	4415      	add	r5, r2
 800b9be:	4b66      	ldr	r3, [pc, #408]	@ (800bb58 <_strtod_l+0x858>)
 800b9c0:	3d01      	subs	r5, #1
 800b9c2:	429d      	cmp	r5, r3
 800b9c4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b9c8:	da50      	bge.n	800ba6c <_strtod_l+0x76c>
 800b9ca:	1b5b      	subs	r3, r3, r5
 800b9cc:	2b1f      	cmp	r3, #31
 800b9ce:	eba2 0203 	sub.w	r2, r2, r3
 800b9d2:	f04f 0101 	mov.w	r1, #1
 800b9d6:	dc3d      	bgt.n	800ba54 <_strtod_l+0x754>
 800b9d8:	fa01 f303 	lsl.w	r3, r1, r3
 800b9dc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b9de:	2300      	movs	r3, #0
 800b9e0:	9310      	str	r3, [sp, #64]	@ 0x40
 800b9e2:	18bd      	adds	r5, r7, r2
 800b9e4:	9b08      	ldr	r3, [sp, #32]
 800b9e6:	42af      	cmp	r7, r5
 800b9e8:	4416      	add	r6, r2
 800b9ea:	441e      	add	r6, r3
 800b9ec:	463b      	mov	r3, r7
 800b9ee:	bfa8      	it	ge
 800b9f0:	462b      	movge	r3, r5
 800b9f2:	42b3      	cmp	r3, r6
 800b9f4:	bfa8      	it	ge
 800b9f6:	4633      	movge	r3, r6
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	bfc2      	ittt	gt
 800b9fc:	1aed      	subgt	r5, r5, r3
 800b9fe:	1af6      	subgt	r6, r6, r3
 800ba00:	1aff      	subgt	r7, r7, r3
 800ba02:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	dd16      	ble.n	800ba36 <_strtod_l+0x736>
 800ba08:	4641      	mov	r1, r8
 800ba0a:	9805      	ldr	r0, [sp, #20]
 800ba0c:	461a      	mov	r2, r3
 800ba0e:	f001 f9b7 	bl	800cd80 <__pow5mult>
 800ba12:	4680      	mov	r8, r0
 800ba14:	2800      	cmp	r0, #0
 800ba16:	d0ba      	beq.n	800b98e <_strtod_l+0x68e>
 800ba18:	4601      	mov	r1, r0
 800ba1a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ba1c:	9805      	ldr	r0, [sp, #20]
 800ba1e:	f001 f905 	bl	800cc2c <__multiply>
 800ba22:	900e      	str	r0, [sp, #56]	@ 0x38
 800ba24:	2800      	cmp	r0, #0
 800ba26:	f43f ae8a 	beq.w	800b73e <_strtod_l+0x43e>
 800ba2a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ba2c:	9805      	ldr	r0, [sp, #20]
 800ba2e:	f000 ffe9 	bl	800ca04 <_Bfree>
 800ba32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba34:	931a      	str	r3, [sp, #104]	@ 0x68
 800ba36:	2d00      	cmp	r5, #0
 800ba38:	dc1d      	bgt.n	800ba76 <_strtod_l+0x776>
 800ba3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	dd23      	ble.n	800ba88 <_strtod_l+0x788>
 800ba40:	4649      	mov	r1, r9
 800ba42:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ba44:	9805      	ldr	r0, [sp, #20]
 800ba46:	f001 f99b 	bl	800cd80 <__pow5mult>
 800ba4a:	4681      	mov	r9, r0
 800ba4c:	b9e0      	cbnz	r0, 800ba88 <_strtod_l+0x788>
 800ba4e:	f04f 0900 	mov.w	r9, #0
 800ba52:	e674      	b.n	800b73e <_strtod_l+0x43e>
 800ba54:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800ba58:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800ba5c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800ba60:	35e2      	adds	r5, #226	@ 0xe2
 800ba62:	fa01 f305 	lsl.w	r3, r1, r5
 800ba66:	9310      	str	r3, [sp, #64]	@ 0x40
 800ba68:	9113      	str	r1, [sp, #76]	@ 0x4c
 800ba6a:	e7ba      	b.n	800b9e2 <_strtod_l+0x6e2>
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	9310      	str	r3, [sp, #64]	@ 0x40
 800ba70:	2301      	movs	r3, #1
 800ba72:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ba74:	e7b5      	b.n	800b9e2 <_strtod_l+0x6e2>
 800ba76:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ba78:	9805      	ldr	r0, [sp, #20]
 800ba7a:	462a      	mov	r2, r5
 800ba7c:	f001 f9da 	bl	800ce34 <__lshift>
 800ba80:	901a      	str	r0, [sp, #104]	@ 0x68
 800ba82:	2800      	cmp	r0, #0
 800ba84:	d1d9      	bne.n	800ba3a <_strtod_l+0x73a>
 800ba86:	e65a      	b.n	800b73e <_strtod_l+0x43e>
 800ba88:	2e00      	cmp	r6, #0
 800ba8a:	dd07      	ble.n	800ba9c <_strtod_l+0x79c>
 800ba8c:	4649      	mov	r1, r9
 800ba8e:	9805      	ldr	r0, [sp, #20]
 800ba90:	4632      	mov	r2, r6
 800ba92:	f001 f9cf 	bl	800ce34 <__lshift>
 800ba96:	4681      	mov	r9, r0
 800ba98:	2800      	cmp	r0, #0
 800ba9a:	d0d8      	beq.n	800ba4e <_strtod_l+0x74e>
 800ba9c:	2f00      	cmp	r7, #0
 800ba9e:	dd08      	ble.n	800bab2 <_strtod_l+0x7b2>
 800baa0:	4641      	mov	r1, r8
 800baa2:	9805      	ldr	r0, [sp, #20]
 800baa4:	463a      	mov	r2, r7
 800baa6:	f001 f9c5 	bl	800ce34 <__lshift>
 800baaa:	4680      	mov	r8, r0
 800baac:	2800      	cmp	r0, #0
 800baae:	f43f ae46 	beq.w	800b73e <_strtod_l+0x43e>
 800bab2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bab4:	9805      	ldr	r0, [sp, #20]
 800bab6:	464a      	mov	r2, r9
 800bab8:	f001 fa44 	bl	800cf44 <__mdiff>
 800babc:	4604      	mov	r4, r0
 800babe:	2800      	cmp	r0, #0
 800bac0:	f43f ae3d 	beq.w	800b73e <_strtod_l+0x43e>
 800bac4:	68c3      	ldr	r3, [r0, #12]
 800bac6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bac8:	2300      	movs	r3, #0
 800baca:	60c3      	str	r3, [r0, #12]
 800bacc:	4641      	mov	r1, r8
 800bace:	f001 fa1d 	bl	800cf0c <__mcmp>
 800bad2:	2800      	cmp	r0, #0
 800bad4:	da46      	bge.n	800bb64 <_strtod_l+0x864>
 800bad6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bad8:	ea53 030a 	orrs.w	r3, r3, sl
 800badc:	d16c      	bne.n	800bbb8 <_strtod_l+0x8b8>
 800bade:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d168      	bne.n	800bbb8 <_strtod_l+0x8b8>
 800bae6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800baea:	0d1b      	lsrs	r3, r3, #20
 800baec:	051b      	lsls	r3, r3, #20
 800baee:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800baf2:	d961      	bls.n	800bbb8 <_strtod_l+0x8b8>
 800baf4:	6963      	ldr	r3, [r4, #20]
 800baf6:	b913      	cbnz	r3, 800bafe <_strtod_l+0x7fe>
 800baf8:	6923      	ldr	r3, [r4, #16]
 800bafa:	2b01      	cmp	r3, #1
 800bafc:	dd5c      	ble.n	800bbb8 <_strtod_l+0x8b8>
 800bafe:	4621      	mov	r1, r4
 800bb00:	2201      	movs	r2, #1
 800bb02:	9805      	ldr	r0, [sp, #20]
 800bb04:	f001 f996 	bl	800ce34 <__lshift>
 800bb08:	4641      	mov	r1, r8
 800bb0a:	4604      	mov	r4, r0
 800bb0c:	f001 f9fe 	bl	800cf0c <__mcmp>
 800bb10:	2800      	cmp	r0, #0
 800bb12:	dd51      	ble.n	800bbb8 <_strtod_l+0x8b8>
 800bb14:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bb18:	9a08      	ldr	r2, [sp, #32]
 800bb1a:	0d1b      	lsrs	r3, r3, #20
 800bb1c:	051b      	lsls	r3, r3, #20
 800bb1e:	2a00      	cmp	r2, #0
 800bb20:	d06b      	beq.n	800bbfa <_strtod_l+0x8fa>
 800bb22:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bb26:	d868      	bhi.n	800bbfa <_strtod_l+0x8fa>
 800bb28:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800bb2c:	f67f ae9d 	bls.w	800b86a <_strtod_l+0x56a>
 800bb30:	4b0a      	ldr	r3, [pc, #40]	@ (800bb5c <_strtod_l+0x85c>)
 800bb32:	4650      	mov	r0, sl
 800bb34:	4659      	mov	r1, fp
 800bb36:	2200      	movs	r2, #0
 800bb38:	f7f4 fd76 	bl	8000628 <__aeabi_dmul>
 800bb3c:	4b08      	ldr	r3, [pc, #32]	@ (800bb60 <_strtod_l+0x860>)
 800bb3e:	400b      	ands	r3, r1
 800bb40:	4682      	mov	sl, r0
 800bb42:	468b      	mov	fp, r1
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	f47f ae05 	bne.w	800b754 <_strtod_l+0x454>
 800bb4a:	9a05      	ldr	r2, [sp, #20]
 800bb4c:	2322      	movs	r3, #34	@ 0x22
 800bb4e:	6013      	str	r3, [r2, #0]
 800bb50:	e600      	b.n	800b754 <_strtod_l+0x454>
 800bb52:	bf00      	nop
 800bb54:	0800eff8 	.word	0x0800eff8
 800bb58:	fffffc02 	.word	0xfffffc02
 800bb5c:	39500000 	.word	0x39500000
 800bb60:	7ff00000 	.word	0x7ff00000
 800bb64:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800bb68:	d165      	bne.n	800bc36 <_strtod_l+0x936>
 800bb6a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bb6c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bb70:	b35a      	cbz	r2, 800bbca <_strtod_l+0x8ca>
 800bb72:	4a9f      	ldr	r2, [pc, #636]	@ (800bdf0 <_strtod_l+0xaf0>)
 800bb74:	4293      	cmp	r3, r2
 800bb76:	d12b      	bne.n	800bbd0 <_strtod_l+0x8d0>
 800bb78:	9b08      	ldr	r3, [sp, #32]
 800bb7a:	4651      	mov	r1, sl
 800bb7c:	b303      	cbz	r3, 800bbc0 <_strtod_l+0x8c0>
 800bb7e:	4b9d      	ldr	r3, [pc, #628]	@ (800bdf4 <_strtod_l+0xaf4>)
 800bb80:	465a      	mov	r2, fp
 800bb82:	4013      	ands	r3, r2
 800bb84:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800bb88:	f04f 32ff 	mov.w	r2, #4294967295
 800bb8c:	d81b      	bhi.n	800bbc6 <_strtod_l+0x8c6>
 800bb8e:	0d1b      	lsrs	r3, r3, #20
 800bb90:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bb94:	fa02 f303 	lsl.w	r3, r2, r3
 800bb98:	4299      	cmp	r1, r3
 800bb9a:	d119      	bne.n	800bbd0 <_strtod_l+0x8d0>
 800bb9c:	4b96      	ldr	r3, [pc, #600]	@ (800bdf8 <_strtod_l+0xaf8>)
 800bb9e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bba0:	429a      	cmp	r2, r3
 800bba2:	d102      	bne.n	800bbaa <_strtod_l+0x8aa>
 800bba4:	3101      	adds	r1, #1
 800bba6:	f43f adca 	beq.w	800b73e <_strtod_l+0x43e>
 800bbaa:	4b92      	ldr	r3, [pc, #584]	@ (800bdf4 <_strtod_l+0xaf4>)
 800bbac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bbae:	401a      	ands	r2, r3
 800bbb0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800bbb4:	f04f 0a00 	mov.w	sl, #0
 800bbb8:	9b08      	ldr	r3, [sp, #32]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d1b8      	bne.n	800bb30 <_strtod_l+0x830>
 800bbbe:	e5c9      	b.n	800b754 <_strtod_l+0x454>
 800bbc0:	f04f 33ff 	mov.w	r3, #4294967295
 800bbc4:	e7e8      	b.n	800bb98 <_strtod_l+0x898>
 800bbc6:	4613      	mov	r3, r2
 800bbc8:	e7e6      	b.n	800bb98 <_strtod_l+0x898>
 800bbca:	ea53 030a 	orrs.w	r3, r3, sl
 800bbce:	d0a1      	beq.n	800bb14 <_strtod_l+0x814>
 800bbd0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bbd2:	b1db      	cbz	r3, 800bc0c <_strtod_l+0x90c>
 800bbd4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bbd6:	4213      	tst	r3, r2
 800bbd8:	d0ee      	beq.n	800bbb8 <_strtod_l+0x8b8>
 800bbda:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bbdc:	9a08      	ldr	r2, [sp, #32]
 800bbde:	4650      	mov	r0, sl
 800bbe0:	4659      	mov	r1, fp
 800bbe2:	b1bb      	cbz	r3, 800bc14 <_strtod_l+0x914>
 800bbe4:	f7ff fb6e 	bl	800b2c4 <sulp>
 800bbe8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bbec:	ec53 2b10 	vmov	r2, r3, d0
 800bbf0:	f7f4 fb64 	bl	80002bc <__adddf3>
 800bbf4:	4682      	mov	sl, r0
 800bbf6:	468b      	mov	fp, r1
 800bbf8:	e7de      	b.n	800bbb8 <_strtod_l+0x8b8>
 800bbfa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800bbfe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bc02:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bc06:	f04f 3aff 	mov.w	sl, #4294967295
 800bc0a:	e7d5      	b.n	800bbb8 <_strtod_l+0x8b8>
 800bc0c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bc0e:	ea13 0f0a 	tst.w	r3, sl
 800bc12:	e7e1      	b.n	800bbd8 <_strtod_l+0x8d8>
 800bc14:	f7ff fb56 	bl	800b2c4 <sulp>
 800bc18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bc1c:	ec53 2b10 	vmov	r2, r3, d0
 800bc20:	f7f4 fb4a 	bl	80002b8 <__aeabi_dsub>
 800bc24:	2200      	movs	r2, #0
 800bc26:	2300      	movs	r3, #0
 800bc28:	4682      	mov	sl, r0
 800bc2a:	468b      	mov	fp, r1
 800bc2c:	f7f4 ff64 	bl	8000af8 <__aeabi_dcmpeq>
 800bc30:	2800      	cmp	r0, #0
 800bc32:	d0c1      	beq.n	800bbb8 <_strtod_l+0x8b8>
 800bc34:	e619      	b.n	800b86a <_strtod_l+0x56a>
 800bc36:	4641      	mov	r1, r8
 800bc38:	4620      	mov	r0, r4
 800bc3a:	f001 fadf 	bl	800d1fc <__ratio>
 800bc3e:	ec57 6b10 	vmov	r6, r7, d0
 800bc42:	2200      	movs	r2, #0
 800bc44:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800bc48:	4630      	mov	r0, r6
 800bc4a:	4639      	mov	r1, r7
 800bc4c:	f7f4 ff68 	bl	8000b20 <__aeabi_dcmple>
 800bc50:	2800      	cmp	r0, #0
 800bc52:	d06f      	beq.n	800bd34 <_strtod_l+0xa34>
 800bc54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d17a      	bne.n	800bd50 <_strtod_l+0xa50>
 800bc5a:	f1ba 0f00 	cmp.w	sl, #0
 800bc5e:	d158      	bne.n	800bd12 <_strtod_l+0xa12>
 800bc60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bc62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d15a      	bne.n	800bd20 <_strtod_l+0xa20>
 800bc6a:	4b64      	ldr	r3, [pc, #400]	@ (800bdfc <_strtod_l+0xafc>)
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	4630      	mov	r0, r6
 800bc70:	4639      	mov	r1, r7
 800bc72:	f7f4 ff4b 	bl	8000b0c <__aeabi_dcmplt>
 800bc76:	2800      	cmp	r0, #0
 800bc78:	d159      	bne.n	800bd2e <_strtod_l+0xa2e>
 800bc7a:	4630      	mov	r0, r6
 800bc7c:	4639      	mov	r1, r7
 800bc7e:	4b60      	ldr	r3, [pc, #384]	@ (800be00 <_strtod_l+0xb00>)
 800bc80:	2200      	movs	r2, #0
 800bc82:	f7f4 fcd1 	bl	8000628 <__aeabi_dmul>
 800bc86:	4606      	mov	r6, r0
 800bc88:	460f      	mov	r7, r1
 800bc8a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800bc8e:	9606      	str	r6, [sp, #24]
 800bc90:	9307      	str	r3, [sp, #28]
 800bc92:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bc96:	4d57      	ldr	r5, [pc, #348]	@ (800bdf4 <_strtod_l+0xaf4>)
 800bc98:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bc9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bc9e:	401d      	ands	r5, r3
 800bca0:	4b58      	ldr	r3, [pc, #352]	@ (800be04 <_strtod_l+0xb04>)
 800bca2:	429d      	cmp	r5, r3
 800bca4:	f040 80b2 	bne.w	800be0c <_strtod_l+0xb0c>
 800bca8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bcaa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800bcae:	ec4b ab10 	vmov	d0, sl, fp
 800bcb2:	f001 f9db 	bl	800d06c <__ulp>
 800bcb6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bcba:	ec51 0b10 	vmov	r0, r1, d0
 800bcbe:	f7f4 fcb3 	bl	8000628 <__aeabi_dmul>
 800bcc2:	4652      	mov	r2, sl
 800bcc4:	465b      	mov	r3, fp
 800bcc6:	f7f4 faf9 	bl	80002bc <__adddf3>
 800bcca:	460b      	mov	r3, r1
 800bccc:	4949      	ldr	r1, [pc, #292]	@ (800bdf4 <_strtod_l+0xaf4>)
 800bcce:	4a4e      	ldr	r2, [pc, #312]	@ (800be08 <_strtod_l+0xb08>)
 800bcd0:	4019      	ands	r1, r3
 800bcd2:	4291      	cmp	r1, r2
 800bcd4:	4682      	mov	sl, r0
 800bcd6:	d942      	bls.n	800bd5e <_strtod_l+0xa5e>
 800bcd8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bcda:	4b47      	ldr	r3, [pc, #284]	@ (800bdf8 <_strtod_l+0xaf8>)
 800bcdc:	429a      	cmp	r2, r3
 800bcde:	d103      	bne.n	800bce8 <_strtod_l+0x9e8>
 800bce0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bce2:	3301      	adds	r3, #1
 800bce4:	f43f ad2b 	beq.w	800b73e <_strtod_l+0x43e>
 800bce8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800bdf8 <_strtod_l+0xaf8>
 800bcec:	f04f 3aff 	mov.w	sl, #4294967295
 800bcf0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bcf2:	9805      	ldr	r0, [sp, #20]
 800bcf4:	f000 fe86 	bl	800ca04 <_Bfree>
 800bcf8:	9805      	ldr	r0, [sp, #20]
 800bcfa:	4649      	mov	r1, r9
 800bcfc:	f000 fe82 	bl	800ca04 <_Bfree>
 800bd00:	9805      	ldr	r0, [sp, #20]
 800bd02:	4641      	mov	r1, r8
 800bd04:	f000 fe7e 	bl	800ca04 <_Bfree>
 800bd08:	9805      	ldr	r0, [sp, #20]
 800bd0a:	4621      	mov	r1, r4
 800bd0c:	f000 fe7a 	bl	800ca04 <_Bfree>
 800bd10:	e618      	b.n	800b944 <_strtod_l+0x644>
 800bd12:	f1ba 0f01 	cmp.w	sl, #1
 800bd16:	d103      	bne.n	800bd20 <_strtod_l+0xa20>
 800bd18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	f43f ada5 	beq.w	800b86a <_strtod_l+0x56a>
 800bd20:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800bdd0 <_strtod_l+0xad0>
 800bd24:	4f35      	ldr	r7, [pc, #212]	@ (800bdfc <_strtod_l+0xafc>)
 800bd26:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bd2a:	2600      	movs	r6, #0
 800bd2c:	e7b1      	b.n	800bc92 <_strtod_l+0x992>
 800bd2e:	4f34      	ldr	r7, [pc, #208]	@ (800be00 <_strtod_l+0xb00>)
 800bd30:	2600      	movs	r6, #0
 800bd32:	e7aa      	b.n	800bc8a <_strtod_l+0x98a>
 800bd34:	4b32      	ldr	r3, [pc, #200]	@ (800be00 <_strtod_l+0xb00>)
 800bd36:	4630      	mov	r0, r6
 800bd38:	4639      	mov	r1, r7
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	f7f4 fc74 	bl	8000628 <__aeabi_dmul>
 800bd40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd42:	4606      	mov	r6, r0
 800bd44:	460f      	mov	r7, r1
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d09f      	beq.n	800bc8a <_strtod_l+0x98a>
 800bd4a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800bd4e:	e7a0      	b.n	800bc92 <_strtod_l+0x992>
 800bd50:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800bdd8 <_strtod_l+0xad8>
 800bd54:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bd58:	ec57 6b17 	vmov	r6, r7, d7
 800bd5c:	e799      	b.n	800bc92 <_strtod_l+0x992>
 800bd5e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800bd62:	9b08      	ldr	r3, [sp, #32]
 800bd64:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d1c1      	bne.n	800bcf0 <_strtod_l+0x9f0>
 800bd6c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bd70:	0d1b      	lsrs	r3, r3, #20
 800bd72:	051b      	lsls	r3, r3, #20
 800bd74:	429d      	cmp	r5, r3
 800bd76:	d1bb      	bne.n	800bcf0 <_strtod_l+0x9f0>
 800bd78:	4630      	mov	r0, r6
 800bd7a:	4639      	mov	r1, r7
 800bd7c:	f7f5 f804 	bl	8000d88 <__aeabi_d2lz>
 800bd80:	f7f4 fc24 	bl	80005cc <__aeabi_l2d>
 800bd84:	4602      	mov	r2, r0
 800bd86:	460b      	mov	r3, r1
 800bd88:	4630      	mov	r0, r6
 800bd8a:	4639      	mov	r1, r7
 800bd8c:	f7f4 fa94 	bl	80002b8 <__aeabi_dsub>
 800bd90:	460b      	mov	r3, r1
 800bd92:	4602      	mov	r2, r0
 800bd94:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800bd98:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800bd9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd9e:	ea46 060a 	orr.w	r6, r6, sl
 800bda2:	431e      	orrs	r6, r3
 800bda4:	d06f      	beq.n	800be86 <_strtod_l+0xb86>
 800bda6:	a30e      	add	r3, pc, #56	@ (adr r3, 800bde0 <_strtod_l+0xae0>)
 800bda8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdac:	f7f4 feae 	bl	8000b0c <__aeabi_dcmplt>
 800bdb0:	2800      	cmp	r0, #0
 800bdb2:	f47f accf 	bne.w	800b754 <_strtod_l+0x454>
 800bdb6:	a30c      	add	r3, pc, #48	@ (adr r3, 800bde8 <_strtod_l+0xae8>)
 800bdb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdbc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bdc0:	f7f4 fec2 	bl	8000b48 <__aeabi_dcmpgt>
 800bdc4:	2800      	cmp	r0, #0
 800bdc6:	d093      	beq.n	800bcf0 <_strtod_l+0x9f0>
 800bdc8:	e4c4      	b.n	800b754 <_strtod_l+0x454>
 800bdca:	bf00      	nop
 800bdcc:	f3af 8000 	nop.w
 800bdd0:	00000000 	.word	0x00000000
 800bdd4:	bff00000 	.word	0xbff00000
 800bdd8:	00000000 	.word	0x00000000
 800bddc:	3ff00000 	.word	0x3ff00000
 800bde0:	94a03595 	.word	0x94a03595
 800bde4:	3fdfffff 	.word	0x3fdfffff
 800bde8:	35afe535 	.word	0x35afe535
 800bdec:	3fe00000 	.word	0x3fe00000
 800bdf0:	000fffff 	.word	0x000fffff
 800bdf4:	7ff00000 	.word	0x7ff00000
 800bdf8:	7fefffff 	.word	0x7fefffff
 800bdfc:	3ff00000 	.word	0x3ff00000
 800be00:	3fe00000 	.word	0x3fe00000
 800be04:	7fe00000 	.word	0x7fe00000
 800be08:	7c9fffff 	.word	0x7c9fffff
 800be0c:	9b08      	ldr	r3, [sp, #32]
 800be0e:	b323      	cbz	r3, 800be5a <_strtod_l+0xb5a>
 800be10:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800be14:	d821      	bhi.n	800be5a <_strtod_l+0xb5a>
 800be16:	a328      	add	r3, pc, #160	@ (adr r3, 800beb8 <_strtod_l+0xbb8>)
 800be18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be1c:	4630      	mov	r0, r6
 800be1e:	4639      	mov	r1, r7
 800be20:	f7f4 fe7e 	bl	8000b20 <__aeabi_dcmple>
 800be24:	b1a0      	cbz	r0, 800be50 <_strtod_l+0xb50>
 800be26:	4639      	mov	r1, r7
 800be28:	4630      	mov	r0, r6
 800be2a:	f7f4 fed5 	bl	8000bd8 <__aeabi_d2uiz>
 800be2e:	2801      	cmp	r0, #1
 800be30:	bf38      	it	cc
 800be32:	2001      	movcc	r0, #1
 800be34:	f7f4 fb7e 	bl	8000534 <__aeabi_ui2d>
 800be38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be3a:	4606      	mov	r6, r0
 800be3c:	460f      	mov	r7, r1
 800be3e:	b9fb      	cbnz	r3, 800be80 <_strtod_l+0xb80>
 800be40:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800be44:	9014      	str	r0, [sp, #80]	@ 0x50
 800be46:	9315      	str	r3, [sp, #84]	@ 0x54
 800be48:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800be4c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800be50:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800be52:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800be56:	1b5b      	subs	r3, r3, r5
 800be58:	9311      	str	r3, [sp, #68]	@ 0x44
 800be5a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800be5e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800be62:	f001 f903 	bl	800d06c <__ulp>
 800be66:	4650      	mov	r0, sl
 800be68:	ec53 2b10 	vmov	r2, r3, d0
 800be6c:	4659      	mov	r1, fp
 800be6e:	f7f4 fbdb 	bl	8000628 <__aeabi_dmul>
 800be72:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800be76:	f7f4 fa21 	bl	80002bc <__adddf3>
 800be7a:	4682      	mov	sl, r0
 800be7c:	468b      	mov	fp, r1
 800be7e:	e770      	b.n	800bd62 <_strtod_l+0xa62>
 800be80:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800be84:	e7e0      	b.n	800be48 <_strtod_l+0xb48>
 800be86:	a30e      	add	r3, pc, #56	@ (adr r3, 800bec0 <_strtod_l+0xbc0>)
 800be88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be8c:	f7f4 fe3e 	bl	8000b0c <__aeabi_dcmplt>
 800be90:	e798      	b.n	800bdc4 <_strtod_l+0xac4>
 800be92:	2300      	movs	r3, #0
 800be94:	930b      	str	r3, [sp, #44]	@ 0x2c
 800be96:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800be98:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800be9a:	6013      	str	r3, [r2, #0]
 800be9c:	f7ff ba6d 	b.w	800b37a <_strtod_l+0x7a>
 800bea0:	2a65      	cmp	r2, #101	@ 0x65
 800bea2:	f43f ab66 	beq.w	800b572 <_strtod_l+0x272>
 800bea6:	2a45      	cmp	r2, #69	@ 0x45
 800bea8:	f43f ab63 	beq.w	800b572 <_strtod_l+0x272>
 800beac:	2301      	movs	r3, #1
 800beae:	f7ff bb9e 	b.w	800b5ee <_strtod_l+0x2ee>
 800beb2:	bf00      	nop
 800beb4:	f3af 8000 	nop.w
 800beb8:	ffc00000 	.word	0xffc00000
 800bebc:	41dfffff 	.word	0x41dfffff
 800bec0:	94a03595 	.word	0x94a03595
 800bec4:	3fcfffff 	.word	0x3fcfffff

0800bec8 <strtod>:
 800bec8:	460a      	mov	r2, r1
 800beca:	4601      	mov	r1, r0
 800becc:	4802      	ldr	r0, [pc, #8]	@ (800bed8 <strtod+0x10>)
 800bece:	4b03      	ldr	r3, [pc, #12]	@ (800bedc <strtod+0x14>)
 800bed0:	6800      	ldr	r0, [r0, #0]
 800bed2:	f7ff ba15 	b.w	800b300 <_strtod_l>
 800bed6:	bf00      	nop
 800bed8:	200001dc 	.word	0x200001dc
 800bedc:	20000070 	.word	0x20000070

0800bee0 <std>:
 800bee0:	2300      	movs	r3, #0
 800bee2:	b510      	push	{r4, lr}
 800bee4:	4604      	mov	r4, r0
 800bee6:	e9c0 3300 	strd	r3, r3, [r0]
 800beea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800beee:	6083      	str	r3, [r0, #8]
 800bef0:	8181      	strh	r1, [r0, #12]
 800bef2:	6643      	str	r3, [r0, #100]	@ 0x64
 800bef4:	81c2      	strh	r2, [r0, #14]
 800bef6:	6183      	str	r3, [r0, #24]
 800bef8:	4619      	mov	r1, r3
 800befa:	2208      	movs	r2, #8
 800befc:	305c      	adds	r0, #92	@ 0x5c
 800befe:	f000 f8f4 	bl	800c0ea <memset>
 800bf02:	4b0d      	ldr	r3, [pc, #52]	@ (800bf38 <std+0x58>)
 800bf04:	6263      	str	r3, [r4, #36]	@ 0x24
 800bf06:	4b0d      	ldr	r3, [pc, #52]	@ (800bf3c <std+0x5c>)
 800bf08:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bf0a:	4b0d      	ldr	r3, [pc, #52]	@ (800bf40 <std+0x60>)
 800bf0c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bf0e:	4b0d      	ldr	r3, [pc, #52]	@ (800bf44 <std+0x64>)
 800bf10:	6323      	str	r3, [r4, #48]	@ 0x30
 800bf12:	4b0d      	ldr	r3, [pc, #52]	@ (800bf48 <std+0x68>)
 800bf14:	6224      	str	r4, [r4, #32]
 800bf16:	429c      	cmp	r4, r3
 800bf18:	d006      	beq.n	800bf28 <std+0x48>
 800bf1a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bf1e:	4294      	cmp	r4, r2
 800bf20:	d002      	beq.n	800bf28 <std+0x48>
 800bf22:	33d0      	adds	r3, #208	@ 0xd0
 800bf24:	429c      	cmp	r4, r3
 800bf26:	d105      	bne.n	800bf34 <std+0x54>
 800bf28:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bf2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf30:	f000 b976 	b.w	800c220 <__retarget_lock_init_recursive>
 800bf34:	bd10      	pop	{r4, pc}
 800bf36:	bf00      	nop
 800bf38:	0800c065 	.word	0x0800c065
 800bf3c:	0800c087 	.word	0x0800c087
 800bf40:	0800c0bf 	.word	0x0800c0bf
 800bf44:	0800c0e3 	.word	0x0800c0e3
 800bf48:	20002538 	.word	0x20002538

0800bf4c <stdio_exit_handler>:
 800bf4c:	4a02      	ldr	r2, [pc, #8]	@ (800bf58 <stdio_exit_handler+0xc>)
 800bf4e:	4903      	ldr	r1, [pc, #12]	@ (800bf5c <stdio_exit_handler+0x10>)
 800bf50:	4803      	ldr	r0, [pc, #12]	@ (800bf60 <stdio_exit_handler+0x14>)
 800bf52:	f000 b869 	b.w	800c028 <_fwalk_sglue>
 800bf56:	bf00      	nop
 800bf58:	20000064 	.word	0x20000064
 800bf5c:	0800d40d 	.word	0x0800d40d
 800bf60:	200001e0 	.word	0x200001e0

0800bf64 <cleanup_stdio>:
 800bf64:	6841      	ldr	r1, [r0, #4]
 800bf66:	4b0c      	ldr	r3, [pc, #48]	@ (800bf98 <cleanup_stdio+0x34>)
 800bf68:	4299      	cmp	r1, r3
 800bf6a:	b510      	push	{r4, lr}
 800bf6c:	4604      	mov	r4, r0
 800bf6e:	d001      	beq.n	800bf74 <cleanup_stdio+0x10>
 800bf70:	f001 fa4c 	bl	800d40c <_fflush_r>
 800bf74:	68a1      	ldr	r1, [r4, #8]
 800bf76:	4b09      	ldr	r3, [pc, #36]	@ (800bf9c <cleanup_stdio+0x38>)
 800bf78:	4299      	cmp	r1, r3
 800bf7a:	d002      	beq.n	800bf82 <cleanup_stdio+0x1e>
 800bf7c:	4620      	mov	r0, r4
 800bf7e:	f001 fa45 	bl	800d40c <_fflush_r>
 800bf82:	68e1      	ldr	r1, [r4, #12]
 800bf84:	4b06      	ldr	r3, [pc, #24]	@ (800bfa0 <cleanup_stdio+0x3c>)
 800bf86:	4299      	cmp	r1, r3
 800bf88:	d004      	beq.n	800bf94 <cleanup_stdio+0x30>
 800bf8a:	4620      	mov	r0, r4
 800bf8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf90:	f001 ba3c 	b.w	800d40c <_fflush_r>
 800bf94:	bd10      	pop	{r4, pc}
 800bf96:	bf00      	nop
 800bf98:	20002538 	.word	0x20002538
 800bf9c:	200025a0 	.word	0x200025a0
 800bfa0:	20002608 	.word	0x20002608

0800bfa4 <global_stdio_init.part.0>:
 800bfa4:	b510      	push	{r4, lr}
 800bfa6:	4b0b      	ldr	r3, [pc, #44]	@ (800bfd4 <global_stdio_init.part.0+0x30>)
 800bfa8:	4c0b      	ldr	r4, [pc, #44]	@ (800bfd8 <global_stdio_init.part.0+0x34>)
 800bfaa:	4a0c      	ldr	r2, [pc, #48]	@ (800bfdc <global_stdio_init.part.0+0x38>)
 800bfac:	601a      	str	r2, [r3, #0]
 800bfae:	4620      	mov	r0, r4
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	2104      	movs	r1, #4
 800bfb4:	f7ff ff94 	bl	800bee0 <std>
 800bfb8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bfbc:	2201      	movs	r2, #1
 800bfbe:	2109      	movs	r1, #9
 800bfc0:	f7ff ff8e 	bl	800bee0 <std>
 800bfc4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bfc8:	2202      	movs	r2, #2
 800bfca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bfce:	2112      	movs	r1, #18
 800bfd0:	f7ff bf86 	b.w	800bee0 <std>
 800bfd4:	20002670 	.word	0x20002670
 800bfd8:	20002538 	.word	0x20002538
 800bfdc:	0800bf4d 	.word	0x0800bf4d

0800bfe0 <__sfp_lock_acquire>:
 800bfe0:	4801      	ldr	r0, [pc, #4]	@ (800bfe8 <__sfp_lock_acquire+0x8>)
 800bfe2:	f000 b91e 	b.w	800c222 <__retarget_lock_acquire_recursive>
 800bfe6:	bf00      	nop
 800bfe8:	20002679 	.word	0x20002679

0800bfec <__sfp_lock_release>:
 800bfec:	4801      	ldr	r0, [pc, #4]	@ (800bff4 <__sfp_lock_release+0x8>)
 800bfee:	f000 b919 	b.w	800c224 <__retarget_lock_release_recursive>
 800bff2:	bf00      	nop
 800bff4:	20002679 	.word	0x20002679

0800bff8 <__sinit>:
 800bff8:	b510      	push	{r4, lr}
 800bffa:	4604      	mov	r4, r0
 800bffc:	f7ff fff0 	bl	800bfe0 <__sfp_lock_acquire>
 800c000:	6a23      	ldr	r3, [r4, #32]
 800c002:	b11b      	cbz	r3, 800c00c <__sinit+0x14>
 800c004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c008:	f7ff bff0 	b.w	800bfec <__sfp_lock_release>
 800c00c:	4b04      	ldr	r3, [pc, #16]	@ (800c020 <__sinit+0x28>)
 800c00e:	6223      	str	r3, [r4, #32]
 800c010:	4b04      	ldr	r3, [pc, #16]	@ (800c024 <__sinit+0x2c>)
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d1f5      	bne.n	800c004 <__sinit+0xc>
 800c018:	f7ff ffc4 	bl	800bfa4 <global_stdio_init.part.0>
 800c01c:	e7f2      	b.n	800c004 <__sinit+0xc>
 800c01e:	bf00      	nop
 800c020:	0800bf65 	.word	0x0800bf65
 800c024:	20002670 	.word	0x20002670

0800c028 <_fwalk_sglue>:
 800c028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c02c:	4607      	mov	r7, r0
 800c02e:	4688      	mov	r8, r1
 800c030:	4614      	mov	r4, r2
 800c032:	2600      	movs	r6, #0
 800c034:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c038:	f1b9 0901 	subs.w	r9, r9, #1
 800c03c:	d505      	bpl.n	800c04a <_fwalk_sglue+0x22>
 800c03e:	6824      	ldr	r4, [r4, #0]
 800c040:	2c00      	cmp	r4, #0
 800c042:	d1f7      	bne.n	800c034 <_fwalk_sglue+0xc>
 800c044:	4630      	mov	r0, r6
 800c046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c04a:	89ab      	ldrh	r3, [r5, #12]
 800c04c:	2b01      	cmp	r3, #1
 800c04e:	d907      	bls.n	800c060 <_fwalk_sglue+0x38>
 800c050:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c054:	3301      	adds	r3, #1
 800c056:	d003      	beq.n	800c060 <_fwalk_sglue+0x38>
 800c058:	4629      	mov	r1, r5
 800c05a:	4638      	mov	r0, r7
 800c05c:	47c0      	blx	r8
 800c05e:	4306      	orrs	r6, r0
 800c060:	3568      	adds	r5, #104	@ 0x68
 800c062:	e7e9      	b.n	800c038 <_fwalk_sglue+0x10>

0800c064 <__sread>:
 800c064:	b510      	push	{r4, lr}
 800c066:	460c      	mov	r4, r1
 800c068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c06c:	f000 f87a 	bl	800c164 <_read_r>
 800c070:	2800      	cmp	r0, #0
 800c072:	bfab      	itete	ge
 800c074:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c076:	89a3      	ldrhlt	r3, [r4, #12]
 800c078:	181b      	addge	r3, r3, r0
 800c07a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c07e:	bfac      	ite	ge
 800c080:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c082:	81a3      	strhlt	r3, [r4, #12]
 800c084:	bd10      	pop	{r4, pc}

0800c086 <__swrite>:
 800c086:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c08a:	461f      	mov	r7, r3
 800c08c:	898b      	ldrh	r3, [r1, #12]
 800c08e:	05db      	lsls	r3, r3, #23
 800c090:	4605      	mov	r5, r0
 800c092:	460c      	mov	r4, r1
 800c094:	4616      	mov	r6, r2
 800c096:	d505      	bpl.n	800c0a4 <__swrite+0x1e>
 800c098:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c09c:	2302      	movs	r3, #2
 800c09e:	2200      	movs	r2, #0
 800c0a0:	f000 f84e 	bl	800c140 <_lseek_r>
 800c0a4:	89a3      	ldrh	r3, [r4, #12]
 800c0a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c0aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c0ae:	81a3      	strh	r3, [r4, #12]
 800c0b0:	4632      	mov	r2, r6
 800c0b2:	463b      	mov	r3, r7
 800c0b4:	4628      	mov	r0, r5
 800c0b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c0ba:	f000 b875 	b.w	800c1a8 <_write_r>

0800c0be <__sseek>:
 800c0be:	b510      	push	{r4, lr}
 800c0c0:	460c      	mov	r4, r1
 800c0c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0c6:	f000 f83b 	bl	800c140 <_lseek_r>
 800c0ca:	1c43      	adds	r3, r0, #1
 800c0cc:	89a3      	ldrh	r3, [r4, #12]
 800c0ce:	bf15      	itete	ne
 800c0d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c0d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c0d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c0da:	81a3      	strheq	r3, [r4, #12]
 800c0dc:	bf18      	it	ne
 800c0de:	81a3      	strhne	r3, [r4, #12]
 800c0e0:	bd10      	pop	{r4, pc}

0800c0e2 <__sclose>:
 800c0e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0e6:	f000 b81b 	b.w	800c120 <_close_r>

0800c0ea <memset>:
 800c0ea:	4402      	add	r2, r0
 800c0ec:	4603      	mov	r3, r0
 800c0ee:	4293      	cmp	r3, r2
 800c0f0:	d100      	bne.n	800c0f4 <memset+0xa>
 800c0f2:	4770      	bx	lr
 800c0f4:	f803 1b01 	strb.w	r1, [r3], #1
 800c0f8:	e7f9      	b.n	800c0ee <memset+0x4>

0800c0fa <strncmp>:
 800c0fa:	b510      	push	{r4, lr}
 800c0fc:	b16a      	cbz	r2, 800c11a <strncmp+0x20>
 800c0fe:	3901      	subs	r1, #1
 800c100:	1884      	adds	r4, r0, r2
 800c102:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c106:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c10a:	429a      	cmp	r2, r3
 800c10c:	d103      	bne.n	800c116 <strncmp+0x1c>
 800c10e:	42a0      	cmp	r0, r4
 800c110:	d001      	beq.n	800c116 <strncmp+0x1c>
 800c112:	2a00      	cmp	r2, #0
 800c114:	d1f5      	bne.n	800c102 <strncmp+0x8>
 800c116:	1ad0      	subs	r0, r2, r3
 800c118:	bd10      	pop	{r4, pc}
 800c11a:	4610      	mov	r0, r2
 800c11c:	e7fc      	b.n	800c118 <strncmp+0x1e>
	...

0800c120 <_close_r>:
 800c120:	b538      	push	{r3, r4, r5, lr}
 800c122:	4d06      	ldr	r5, [pc, #24]	@ (800c13c <_close_r+0x1c>)
 800c124:	2300      	movs	r3, #0
 800c126:	4604      	mov	r4, r0
 800c128:	4608      	mov	r0, r1
 800c12a:	602b      	str	r3, [r5, #0]
 800c12c:	f7f9 fcda 	bl	8005ae4 <_close>
 800c130:	1c43      	adds	r3, r0, #1
 800c132:	d102      	bne.n	800c13a <_close_r+0x1a>
 800c134:	682b      	ldr	r3, [r5, #0]
 800c136:	b103      	cbz	r3, 800c13a <_close_r+0x1a>
 800c138:	6023      	str	r3, [r4, #0]
 800c13a:	bd38      	pop	{r3, r4, r5, pc}
 800c13c:	20002674 	.word	0x20002674

0800c140 <_lseek_r>:
 800c140:	b538      	push	{r3, r4, r5, lr}
 800c142:	4d07      	ldr	r5, [pc, #28]	@ (800c160 <_lseek_r+0x20>)
 800c144:	4604      	mov	r4, r0
 800c146:	4608      	mov	r0, r1
 800c148:	4611      	mov	r1, r2
 800c14a:	2200      	movs	r2, #0
 800c14c:	602a      	str	r2, [r5, #0]
 800c14e:	461a      	mov	r2, r3
 800c150:	f7f9 fcef 	bl	8005b32 <_lseek>
 800c154:	1c43      	adds	r3, r0, #1
 800c156:	d102      	bne.n	800c15e <_lseek_r+0x1e>
 800c158:	682b      	ldr	r3, [r5, #0]
 800c15a:	b103      	cbz	r3, 800c15e <_lseek_r+0x1e>
 800c15c:	6023      	str	r3, [r4, #0]
 800c15e:	bd38      	pop	{r3, r4, r5, pc}
 800c160:	20002674 	.word	0x20002674

0800c164 <_read_r>:
 800c164:	b538      	push	{r3, r4, r5, lr}
 800c166:	4d07      	ldr	r5, [pc, #28]	@ (800c184 <_read_r+0x20>)
 800c168:	4604      	mov	r4, r0
 800c16a:	4608      	mov	r0, r1
 800c16c:	4611      	mov	r1, r2
 800c16e:	2200      	movs	r2, #0
 800c170:	602a      	str	r2, [r5, #0]
 800c172:	461a      	mov	r2, r3
 800c174:	f7f9 fc7d 	bl	8005a72 <_read>
 800c178:	1c43      	adds	r3, r0, #1
 800c17a:	d102      	bne.n	800c182 <_read_r+0x1e>
 800c17c:	682b      	ldr	r3, [r5, #0]
 800c17e:	b103      	cbz	r3, 800c182 <_read_r+0x1e>
 800c180:	6023      	str	r3, [r4, #0]
 800c182:	bd38      	pop	{r3, r4, r5, pc}
 800c184:	20002674 	.word	0x20002674

0800c188 <_sbrk_r>:
 800c188:	b538      	push	{r3, r4, r5, lr}
 800c18a:	4d06      	ldr	r5, [pc, #24]	@ (800c1a4 <_sbrk_r+0x1c>)
 800c18c:	2300      	movs	r3, #0
 800c18e:	4604      	mov	r4, r0
 800c190:	4608      	mov	r0, r1
 800c192:	602b      	str	r3, [r5, #0]
 800c194:	f7f9 fcda 	bl	8005b4c <_sbrk>
 800c198:	1c43      	adds	r3, r0, #1
 800c19a:	d102      	bne.n	800c1a2 <_sbrk_r+0x1a>
 800c19c:	682b      	ldr	r3, [r5, #0]
 800c19e:	b103      	cbz	r3, 800c1a2 <_sbrk_r+0x1a>
 800c1a0:	6023      	str	r3, [r4, #0]
 800c1a2:	bd38      	pop	{r3, r4, r5, pc}
 800c1a4:	20002674 	.word	0x20002674

0800c1a8 <_write_r>:
 800c1a8:	b538      	push	{r3, r4, r5, lr}
 800c1aa:	4d07      	ldr	r5, [pc, #28]	@ (800c1c8 <_write_r+0x20>)
 800c1ac:	4604      	mov	r4, r0
 800c1ae:	4608      	mov	r0, r1
 800c1b0:	4611      	mov	r1, r2
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	602a      	str	r2, [r5, #0]
 800c1b6:	461a      	mov	r2, r3
 800c1b8:	f7f9 fc78 	bl	8005aac <_write>
 800c1bc:	1c43      	adds	r3, r0, #1
 800c1be:	d102      	bne.n	800c1c6 <_write_r+0x1e>
 800c1c0:	682b      	ldr	r3, [r5, #0]
 800c1c2:	b103      	cbz	r3, 800c1c6 <_write_r+0x1e>
 800c1c4:	6023      	str	r3, [r4, #0]
 800c1c6:	bd38      	pop	{r3, r4, r5, pc}
 800c1c8:	20002674 	.word	0x20002674

0800c1cc <__errno>:
 800c1cc:	4b01      	ldr	r3, [pc, #4]	@ (800c1d4 <__errno+0x8>)
 800c1ce:	6818      	ldr	r0, [r3, #0]
 800c1d0:	4770      	bx	lr
 800c1d2:	bf00      	nop
 800c1d4:	200001dc 	.word	0x200001dc

0800c1d8 <__libc_init_array>:
 800c1d8:	b570      	push	{r4, r5, r6, lr}
 800c1da:	4d0d      	ldr	r5, [pc, #52]	@ (800c210 <__libc_init_array+0x38>)
 800c1dc:	4c0d      	ldr	r4, [pc, #52]	@ (800c214 <__libc_init_array+0x3c>)
 800c1de:	1b64      	subs	r4, r4, r5
 800c1e0:	10a4      	asrs	r4, r4, #2
 800c1e2:	2600      	movs	r6, #0
 800c1e4:	42a6      	cmp	r6, r4
 800c1e6:	d109      	bne.n	800c1fc <__libc_init_array+0x24>
 800c1e8:	4d0b      	ldr	r5, [pc, #44]	@ (800c218 <__libc_init_array+0x40>)
 800c1ea:	4c0c      	ldr	r4, [pc, #48]	@ (800c21c <__libc_init_array+0x44>)
 800c1ec:	f002 feac 	bl	800ef48 <_init>
 800c1f0:	1b64      	subs	r4, r4, r5
 800c1f2:	10a4      	asrs	r4, r4, #2
 800c1f4:	2600      	movs	r6, #0
 800c1f6:	42a6      	cmp	r6, r4
 800c1f8:	d105      	bne.n	800c206 <__libc_init_array+0x2e>
 800c1fa:	bd70      	pop	{r4, r5, r6, pc}
 800c1fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800c200:	4798      	blx	r3
 800c202:	3601      	adds	r6, #1
 800c204:	e7ee      	b.n	800c1e4 <__libc_init_array+0xc>
 800c206:	f855 3b04 	ldr.w	r3, [r5], #4
 800c20a:	4798      	blx	r3
 800c20c:	3601      	adds	r6, #1
 800c20e:	e7f2      	b.n	800c1f6 <__libc_init_array+0x1e>
 800c210:	0800f3e8 	.word	0x0800f3e8
 800c214:	0800f3e8 	.word	0x0800f3e8
 800c218:	0800f3e8 	.word	0x0800f3e8
 800c21c:	0800f3ec 	.word	0x0800f3ec

0800c220 <__retarget_lock_init_recursive>:
 800c220:	4770      	bx	lr

0800c222 <__retarget_lock_acquire_recursive>:
 800c222:	4770      	bx	lr

0800c224 <__retarget_lock_release_recursive>:
 800c224:	4770      	bx	lr

0800c226 <memcpy>:
 800c226:	440a      	add	r2, r1
 800c228:	4291      	cmp	r1, r2
 800c22a:	f100 33ff 	add.w	r3, r0, #4294967295
 800c22e:	d100      	bne.n	800c232 <memcpy+0xc>
 800c230:	4770      	bx	lr
 800c232:	b510      	push	{r4, lr}
 800c234:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c238:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c23c:	4291      	cmp	r1, r2
 800c23e:	d1f9      	bne.n	800c234 <memcpy+0xe>
 800c240:	bd10      	pop	{r4, pc}
 800c242:	0000      	movs	r0, r0
 800c244:	0000      	movs	r0, r0
	...

0800c248 <nan>:
 800c248:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c250 <nan+0x8>
 800c24c:	4770      	bx	lr
 800c24e:	bf00      	nop
 800c250:	00000000 	.word	0x00000000
 800c254:	7ff80000 	.word	0x7ff80000

0800c258 <_free_r>:
 800c258:	b538      	push	{r3, r4, r5, lr}
 800c25a:	4605      	mov	r5, r0
 800c25c:	2900      	cmp	r1, #0
 800c25e:	d041      	beq.n	800c2e4 <_free_r+0x8c>
 800c260:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c264:	1f0c      	subs	r4, r1, #4
 800c266:	2b00      	cmp	r3, #0
 800c268:	bfb8      	it	lt
 800c26a:	18e4      	addlt	r4, r4, r3
 800c26c:	f7ff f81e 	bl	800b2ac <__malloc_lock>
 800c270:	4a1d      	ldr	r2, [pc, #116]	@ (800c2e8 <_free_r+0x90>)
 800c272:	6813      	ldr	r3, [r2, #0]
 800c274:	b933      	cbnz	r3, 800c284 <_free_r+0x2c>
 800c276:	6063      	str	r3, [r4, #4]
 800c278:	6014      	str	r4, [r2, #0]
 800c27a:	4628      	mov	r0, r5
 800c27c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c280:	f7ff b81a 	b.w	800b2b8 <__malloc_unlock>
 800c284:	42a3      	cmp	r3, r4
 800c286:	d908      	bls.n	800c29a <_free_r+0x42>
 800c288:	6820      	ldr	r0, [r4, #0]
 800c28a:	1821      	adds	r1, r4, r0
 800c28c:	428b      	cmp	r3, r1
 800c28e:	bf01      	itttt	eq
 800c290:	6819      	ldreq	r1, [r3, #0]
 800c292:	685b      	ldreq	r3, [r3, #4]
 800c294:	1809      	addeq	r1, r1, r0
 800c296:	6021      	streq	r1, [r4, #0]
 800c298:	e7ed      	b.n	800c276 <_free_r+0x1e>
 800c29a:	461a      	mov	r2, r3
 800c29c:	685b      	ldr	r3, [r3, #4]
 800c29e:	b10b      	cbz	r3, 800c2a4 <_free_r+0x4c>
 800c2a0:	42a3      	cmp	r3, r4
 800c2a2:	d9fa      	bls.n	800c29a <_free_r+0x42>
 800c2a4:	6811      	ldr	r1, [r2, #0]
 800c2a6:	1850      	adds	r0, r2, r1
 800c2a8:	42a0      	cmp	r0, r4
 800c2aa:	d10b      	bne.n	800c2c4 <_free_r+0x6c>
 800c2ac:	6820      	ldr	r0, [r4, #0]
 800c2ae:	4401      	add	r1, r0
 800c2b0:	1850      	adds	r0, r2, r1
 800c2b2:	4283      	cmp	r3, r0
 800c2b4:	6011      	str	r1, [r2, #0]
 800c2b6:	d1e0      	bne.n	800c27a <_free_r+0x22>
 800c2b8:	6818      	ldr	r0, [r3, #0]
 800c2ba:	685b      	ldr	r3, [r3, #4]
 800c2bc:	6053      	str	r3, [r2, #4]
 800c2be:	4408      	add	r0, r1
 800c2c0:	6010      	str	r0, [r2, #0]
 800c2c2:	e7da      	b.n	800c27a <_free_r+0x22>
 800c2c4:	d902      	bls.n	800c2cc <_free_r+0x74>
 800c2c6:	230c      	movs	r3, #12
 800c2c8:	602b      	str	r3, [r5, #0]
 800c2ca:	e7d6      	b.n	800c27a <_free_r+0x22>
 800c2cc:	6820      	ldr	r0, [r4, #0]
 800c2ce:	1821      	adds	r1, r4, r0
 800c2d0:	428b      	cmp	r3, r1
 800c2d2:	bf04      	itt	eq
 800c2d4:	6819      	ldreq	r1, [r3, #0]
 800c2d6:	685b      	ldreq	r3, [r3, #4]
 800c2d8:	6063      	str	r3, [r4, #4]
 800c2da:	bf04      	itt	eq
 800c2dc:	1809      	addeq	r1, r1, r0
 800c2de:	6021      	streq	r1, [r4, #0]
 800c2e0:	6054      	str	r4, [r2, #4]
 800c2e2:	e7ca      	b.n	800c27a <_free_r+0x22>
 800c2e4:	bd38      	pop	{r3, r4, r5, pc}
 800c2e6:	bf00      	nop
 800c2e8:	20002534 	.word	0x20002534

0800c2ec <rshift>:
 800c2ec:	6903      	ldr	r3, [r0, #16]
 800c2ee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c2f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c2f6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c2fa:	f100 0414 	add.w	r4, r0, #20
 800c2fe:	dd45      	ble.n	800c38c <rshift+0xa0>
 800c300:	f011 011f 	ands.w	r1, r1, #31
 800c304:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c308:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c30c:	d10c      	bne.n	800c328 <rshift+0x3c>
 800c30e:	f100 0710 	add.w	r7, r0, #16
 800c312:	4629      	mov	r1, r5
 800c314:	42b1      	cmp	r1, r6
 800c316:	d334      	bcc.n	800c382 <rshift+0x96>
 800c318:	1a9b      	subs	r3, r3, r2
 800c31a:	009b      	lsls	r3, r3, #2
 800c31c:	1eea      	subs	r2, r5, #3
 800c31e:	4296      	cmp	r6, r2
 800c320:	bf38      	it	cc
 800c322:	2300      	movcc	r3, #0
 800c324:	4423      	add	r3, r4
 800c326:	e015      	b.n	800c354 <rshift+0x68>
 800c328:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c32c:	f1c1 0820 	rsb	r8, r1, #32
 800c330:	40cf      	lsrs	r7, r1
 800c332:	f105 0e04 	add.w	lr, r5, #4
 800c336:	46a1      	mov	r9, r4
 800c338:	4576      	cmp	r6, lr
 800c33a:	46f4      	mov	ip, lr
 800c33c:	d815      	bhi.n	800c36a <rshift+0x7e>
 800c33e:	1a9a      	subs	r2, r3, r2
 800c340:	0092      	lsls	r2, r2, #2
 800c342:	3a04      	subs	r2, #4
 800c344:	3501      	adds	r5, #1
 800c346:	42ae      	cmp	r6, r5
 800c348:	bf38      	it	cc
 800c34a:	2200      	movcc	r2, #0
 800c34c:	18a3      	adds	r3, r4, r2
 800c34e:	50a7      	str	r7, [r4, r2]
 800c350:	b107      	cbz	r7, 800c354 <rshift+0x68>
 800c352:	3304      	adds	r3, #4
 800c354:	1b1a      	subs	r2, r3, r4
 800c356:	42a3      	cmp	r3, r4
 800c358:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c35c:	bf08      	it	eq
 800c35e:	2300      	moveq	r3, #0
 800c360:	6102      	str	r2, [r0, #16]
 800c362:	bf08      	it	eq
 800c364:	6143      	streq	r3, [r0, #20]
 800c366:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c36a:	f8dc c000 	ldr.w	ip, [ip]
 800c36e:	fa0c fc08 	lsl.w	ip, ip, r8
 800c372:	ea4c 0707 	orr.w	r7, ip, r7
 800c376:	f849 7b04 	str.w	r7, [r9], #4
 800c37a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c37e:	40cf      	lsrs	r7, r1
 800c380:	e7da      	b.n	800c338 <rshift+0x4c>
 800c382:	f851 cb04 	ldr.w	ip, [r1], #4
 800c386:	f847 cf04 	str.w	ip, [r7, #4]!
 800c38a:	e7c3      	b.n	800c314 <rshift+0x28>
 800c38c:	4623      	mov	r3, r4
 800c38e:	e7e1      	b.n	800c354 <rshift+0x68>

0800c390 <__hexdig_fun>:
 800c390:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c394:	2b09      	cmp	r3, #9
 800c396:	d802      	bhi.n	800c39e <__hexdig_fun+0xe>
 800c398:	3820      	subs	r0, #32
 800c39a:	b2c0      	uxtb	r0, r0
 800c39c:	4770      	bx	lr
 800c39e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c3a2:	2b05      	cmp	r3, #5
 800c3a4:	d801      	bhi.n	800c3aa <__hexdig_fun+0x1a>
 800c3a6:	3847      	subs	r0, #71	@ 0x47
 800c3a8:	e7f7      	b.n	800c39a <__hexdig_fun+0xa>
 800c3aa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c3ae:	2b05      	cmp	r3, #5
 800c3b0:	d801      	bhi.n	800c3b6 <__hexdig_fun+0x26>
 800c3b2:	3827      	subs	r0, #39	@ 0x27
 800c3b4:	e7f1      	b.n	800c39a <__hexdig_fun+0xa>
 800c3b6:	2000      	movs	r0, #0
 800c3b8:	4770      	bx	lr
	...

0800c3bc <__gethex>:
 800c3bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3c0:	b085      	sub	sp, #20
 800c3c2:	468a      	mov	sl, r1
 800c3c4:	9302      	str	r3, [sp, #8]
 800c3c6:	680b      	ldr	r3, [r1, #0]
 800c3c8:	9001      	str	r0, [sp, #4]
 800c3ca:	4690      	mov	r8, r2
 800c3cc:	1c9c      	adds	r4, r3, #2
 800c3ce:	46a1      	mov	r9, r4
 800c3d0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c3d4:	2830      	cmp	r0, #48	@ 0x30
 800c3d6:	d0fa      	beq.n	800c3ce <__gethex+0x12>
 800c3d8:	eba9 0303 	sub.w	r3, r9, r3
 800c3dc:	f1a3 0b02 	sub.w	fp, r3, #2
 800c3e0:	f7ff ffd6 	bl	800c390 <__hexdig_fun>
 800c3e4:	4605      	mov	r5, r0
 800c3e6:	2800      	cmp	r0, #0
 800c3e8:	d168      	bne.n	800c4bc <__gethex+0x100>
 800c3ea:	49a0      	ldr	r1, [pc, #640]	@ (800c66c <__gethex+0x2b0>)
 800c3ec:	2201      	movs	r2, #1
 800c3ee:	4648      	mov	r0, r9
 800c3f0:	f7ff fe83 	bl	800c0fa <strncmp>
 800c3f4:	4607      	mov	r7, r0
 800c3f6:	2800      	cmp	r0, #0
 800c3f8:	d167      	bne.n	800c4ca <__gethex+0x10e>
 800c3fa:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c3fe:	4626      	mov	r6, r4
 800c400:	f7ff ffc6 	bl	800c390 <__hexdig_fun>
 800c404:	2800      	cmp	r0, #0
 800c406:	d062      	beq.n	800c4ce <__gethex+0x112>
 800c408:	4623      	mov	r3, r4
 800c40a:	7818      	ldrb	r0, [r3, #0]
 800c40c:	2830      	cmp	r0, #48	@ 0x30
 800c40e:	4699      	mov	r9, r3
 800c410:	f103 0301 	add.w	r3, r3, #1
 800c414:	d0f9      	beq.n	800c40a <__gethex+0x4e>
 800c416:	f7ff ffbb 	bl	800c390 <__hexdig_fun>
 800c41a:	fab0 f580 	clz	r5, r0
 800c41e:	096d      	lsrs	r5, r5, #5
 800c420:	f04f 0b01 	mov.w	fp, #1
 800c424:	464a      	mov	r2, r9
 800c426:	4616      	mov	r6, r2
 800c428:	3201      	adds	r2, #1
 800c42a:	7830      	ldrb	r0, [r6, #0]
 800c42c:	f7ff ffb0 	bl	800c390 <__hexdig_fun>
 800c430:	2800      	cmp	r0, #0
 800c432:	d1f8      	bne.n	800c426 <__gethex+0x6a>
 800c434:	498d      	ldr	r1, [pc, #564]	@ (800c66c <__gethex+0x2b0>)
 800c436:	2201      	movs	r2, #1
 800c438:	4630      	mov	r0, r6
 800c43a:	f7ff fe5e 	bl	800c0fa <strncmp>
 800c43e:	2800      	cmp	r0, #0
 800c440:	d13f      	bne.n	800c4c2 <__gethex+0x106>
 800c442:	b944      	cbnz	r4, 800c456 <__gethex+0x9a>
 800c444:	1c74      	adds	r4, r6, #1
 800c446:	4622      	mov	r2, r4
 800c448:	4616      	mov	r6, r2
 800c44a:	3201      	adds	r2, #1
 800c44c:	7830      	ldrb	r0, [r6, #0]
 800c44e:	f7ff ff9f 	bl	800c390 <__hexdig_fun>
 800c452:	2800      	cmp	r0, #0
 800c454:	d1f8      	bne.n	800c448 <__gethex+0x8c>
 800c456:	1ba4      	subs	r4, r4, r6
 800c458:	00a7      	lsls	r7, r4, #2
 800c45a:	7833      	ldrb	r3, [r6, #0]
 800c45c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c460:	2b50      	cmp	r3, #80	@ 0x50
 800c462:	d13e      	bne.n	800c4e2 <__gethex+0x126>
 800c464:	7873      	ldrb	r3, [r6, #1]
 800c466:	2b2b      	cmp	r3, #43	@ 0x2b
 800c468:	d033      	beq.n	800c4d2 <__gethex+0x116>
 800c46a:	2b2d      	cmp	r3, #45	@ 0x2d
 800c46c:	d034      	beq.n	800c4d8 <__gethex+0x11c>
 800c46e:	1c71      	adds	r1, r6, #1
 800c470:	2400      	movs	r4, #0
 800c472:	7808      	ldrb	r0, [r1, #0]
 800c474:	f7ff ff8c 	bl	800c390 <__hexdig_fun>
 800c478:	1e43      	subs	r3, r0, #1
 800c47a:	b2db      	uxtb	r3, r3
 800c47c:	2b18      	cmp	r3, #24
 800c47e:	d830      	bhi.n	800c4e2 <__gethex+0x126>
 800c480:	f1a0 0210 	sub.w	r2, r0, #16
 800c484:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c488:	f7ff ff82 	bl	800c390 <__hexdig_fun>
 800c48c:	f100 3cff 	add.w	ip, r0, #4294967295
 800c490:	fa5f fc8c 	uxtb.w	ip, ip
 800c494:	f1bc 0f18 	cmp.w	ip, #24
 800c498:	f04f 030a 	mov.w	r3, #10
 800c49c:	d91e      	bls.n	800c4dc <__gethex+0x120>
 800c49e:	b104      	cbz	r4, 800c4a2 <__gethex+0xe6>
 800c4a0:	4252      	negs	r2, r2
 800c4a2:	4417      	add	r7, r2
 800c4a4:	f8ca 1000 	str.w	r1, [sl]
 800c4a8:	b1ed      	cbz	r5, 800c4e6 <__gethex+0x12a>
 800c4aa:	f1bb 0f00 	cmp.w	fp, #0
 800c4ae:	bf0c      	ite	eq
 800c4b0:	2506      	moveq	r5, #6
 800c4b2:	2500      	movne	r5, #0
 800c4b4:	4628      	mov	r0, r5
 800c4b6:	b005      	add	sp, #20
 800c4b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4bc:	2500      	movs	r5, #0
 800c4be:	462c      	mov	r4, r5
 800c4c0:	e7b0      	b.n	800c424 <__gethex+0x68>
 800c4c2:	2c00      	cmp	r4, #0
 800c4c4:	d1c7      	bne.n	800c456 <__gethex+0x9a>
 800c4c6:	4627      	mov	r7, r4
 800c4c8:	e7c7      	b.n	800c45a <__gethex+0x9e>
 800c4ca:	464e      	mov	r6, r9
 800c4cc:	462f      	mov	r7, r5
 800c4ce:	2501      	movs	r5, #1
 800c4d0:	e7c3      	b.n	800c45a <__gethex+0x9e>
 800c4d2:	2400      	movs	r4, #0
 800c4d4:	1cb1      	adds	r1, r6, #2
 800c4d6:	e7cc      	b.n	800c472 <__gethex+0xb6>
 800c4d8:	2401      	movs	r4, #1
 800c4da:	e7fb      	b.n	800c4d4 <__gethex+0x118>
 800c4dc:	fb03 0002 	mla	r0, r3, r2, r0
 800c4e0:	e7ce      	b.n	800c480 <__gethex+0xc4>
 800c4e2:	4631      	mov	r1, r6
 800c4e4:	e7de      	b.n	800c4a4 <__gethex+0xe8>
 800c4e6:	eba6 0309 	sub.w	r3, r6, r9
 800c4ea:	3b01      	subs	r3, #1
 800c4ec:	4629      	mov	r1, r5
 800c4ee:	2b07      	cmp	r3, #7
 800c4f0:	dc0a      	bgt.n	800c508 <__gethex+0x14c>
 800c4f2:	9801      	ldr	r0, [sp, #4]
 800c4f4:	f000 fa46 	bl	800c984 <_Balloc>
 800c4f8:	4604      	mov	r4, r0
 800c4fa:	b940      	cbnz	r0, 800c50e <__gethex+0x152>
 800c4fc:	4b5c      	ldr	r3, [pc, #368]	@ (800c670 <__gethex+0x2b4>)
 800c4fe:	4602      	mov	r2, r0
 800c500:	21e4      	movs	r1, #228	@ 0xe4
 800c502:	485c      	ldr	r0, [pc, #368]	@ (800c674 <__gethex+0x2b8>)
 800c504:	f000 ffaa 	bl	800d45c <__assert_func>
 800c508:	3101      	adds	r1, #1
 800c50a:	105b      	asrs	r3, r3, #1
 800c50c:	e7ef      	b.n	800c4ee <__gethex+0x132>
 800c50e:	f100 0a14 	add.w	sl, r0, #20
 800c512:	2300      	movs	r3, #0
 800c514:	4655      	mov	r5, sl
 800c516:	469b      	mov	fp, r3
 800c518:	45b1      	cmp	r9, r6
 800c51a:	d337      	bcc.n	800c58c <__gethex+0x1d0>
 800c51c:	f845 bb04 	str.w	fp, [r5], #4
 800c520:	eba5 050a 	sub.w	r5, r5, sl
 800c524:	10ad      	asrs	r5, r5, #2
 800c526:	6125      	str	r5, [r4, #16]
 800c528:	4658      	mov	r0, fp
 800c52a:	f000 fb1d 	bl	800cb68 <__hi0bits>
 800c52e:	016d      	lsls	r5, r5, #5
 800c530:	f8d8 6000 	ldr.w	r6, [r8]
 800c534:	1a2d      	subs	r5, r5, r0
 800c536:	42b5      	cmp	r5, r6
 800c538:	dd54      	ble.n	800c5e4 <__gethex+0x228>
 800c53a:	1bad      	subs	r5, r5, r6
 800c53c:	4629      	mov	r1, r5
 800c53e:	4620      	mov	r0, r4
 800c540:	f000 feb1 	bl	800d2a6 <__any_on>
 800c544:	4681      	mov	r9, r0
 800c546:	b178      	cbz	r0, 800c568 <__gethex+0x1ac>
 800c548:	1e6b      	subs	r3, r5, #1
 800c54a:	1159      	asrs	r1, r3, #5
 800c54c:	f003 021f 	and.w	r2, r3, #31
 800c550:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c554:	f04f 0901 	mov.w	r9, #1
 800c558:	fa09 f202 	lsl.w	r2, r9, r2
 800c55c:	420a      	tst	r2, r1
 800c55e:	d003      	beq.n	800c568 <__gethex+0x1ac>
 800c560:	454b      	cmp	r3, r9
 800c562:	dc36      	bgt.n	800c5d2 <__gethex+0x216>
 800c564:	f04f 0902 	mov.w	r9, #2
 800c568:	4629      	mov	r1, r5
 800c56a:	4620      	mov	r0, r4
 800c56c:	f7ff febe 	bl	800c2ec <rshift>
 800c570:	442f      	add	r7, r5
 800c572:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c576:	42bb      	cmp	r3, r7
 800c578:	da42      	bge.n	800c600 <__gethex+0x244>
 800c57a:	9801      	ldr	r0, [sp, #4]
 800c57c:	4621      	mov	r1, r4
 800c57e:	f000 fa41 	bl	800ca04 <_Bfree>
 800c582:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c584:	2300      	movs	r3, #0
 800c586:	6013      	str	r3, [r2, #0]
 800c588:	25a3      	movs	r5, #163	@ 0xa3
 800c58a:	e793      	b.n	800c4b4 <__gethex+0xf8>
 800c58c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c590:	2a2e      	cmp	r2, #46	@ 0x2e
 800c592:	d012      	beq.n	800c5ba <__gethex+0x1fe>
 800c594:	2b20      	cmp	r3, #32
 800c596:	d104      	bne.n	800c5a2 <__gethex+0x1e6>
 800c598:	f845 bb04 	str.w	fp, [r5], #4
 800c59c:	f04f 0b00 	mov.w	fp, #0
 800c5a0:	465b      	mov	r3, fp
 800c5a2:	7830      	ldrb	r0, [r6, #0]
 800c5a4:	9303      	str	r3, [sp, #12]
 800c5a6:	f7ff fef3 	bl	800c390 <__hexdig_fun>
 800c5aa:	9b03      	ldr	r3, [sp, #12]
 800c5ac:	f000 000f 	and.w	r0, r0, #15
 800c5b0:	4098      	lsls	r0, r3
 800c5b2:	ea4b 0b00 	orr.w	fp, fp, r0
 800c5b6:	3304      	adds	r3, #4
 800c5b8:	e7ae      	b.n	800c518 <__gethex+0x15c>
 800c5ba:	45b1      	cmp	r9, r6
 800c5bc:	d8ea      	bhi.n	800c594 <__gethex+0x1d8>
 800c5be:	492b      	ldr	r1, [pc, #172]	@ (800c66c <__gethex+0x2b0>)
 800c5c0:	9303      	str	r3, [sp, #12]
 800c5c2:	2201      	movs	r2, #1
 800c5c4:	4630      	mov	r0, r6
 800c5c6:	f7ff fd98 	bl	800c0fa <strncmp>
 800c5ca:	9b03      	ldr	r3, [sp, #12]
 800c5cc:	2800      	cmp	r0, #0
 800c5ce:	d1e1      	bne.n	800c594 <__gethex+0x1d8>
 800c5d0:	e7a2      	b.n	800c518 <__gethex+0x15c>
 800c5d2:	1ea9      	subs	r1, r5, #2
 800c5d4:	4620      	mov	r0, r4
 800c5d6:	f000 fe66 	bl	800d2a6 <__any_on>
 800c5da:	2800      	cmp	r0, #0
 800c5dc:	d0c2      	beq.n	800c564 <__gethex+0x1a8>
 800c5de:	f04f 0903 	mov.w	r9, #3
 800c5e2:	e7c1      	b.n	800c568 <__gethex+0x1ac>
 800c5e4:	da09      	bge.n	800c5fa <__gethex+0x23e>
 800c5e6:	1b75      	subs	r5, r6, r5
 800c5e8:	4621      	mov	r1, r4
 800c5ea:	9801      	ldr	r0, [sp, #4]
 800c5ec:	462a      	mov	r2, r5
 800c5ee:	f000 fc21 	bl	800ce34 <__lshift>
 800c5f2:	1b7f      	subs	r7, r7, r5
 800c5f4:	4604      	mov	r4, r0
 800c5f6:	f100 0a14 	add.w	sl, r0, #20
 800c5fa:	f04f 0900 	mov.w	r9, #0
 800c5fe:	e7b8      	b.n	800c572 <__gethex+0x1b6>
 800c600:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c604:	42bd      	cmp	r5, r7
 800c606:	dd6f      	ble.n	800c6e8 <__gethex+0x32c>
 800c608:	1bed      	subs	r5, r5, r7
 800c60a:	42ae      	cmp	r6, r5
 800c60c:	dc34      	bgt.n	800c678 <__gethex+0x2bc>
 800c60e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c612:	2b02      	cmp	r3, #2
 800c614:	d022      	beq.n	800c65c <__gethex+0x2a0>
 800c616:	2b03      	cmp	r3, #3
 800c618:	d024      	beq.n	800c664 <__gethex+0x2a8>
 800c61a:	2b01      	cmp	r3, #1
 800c61c:	d115      	bne.n	800c64a <__gethex+0x28e>
 800c61e:	42ae      	cmp	r6, r5
 800c620:	d113      	bne.n	800c64a <__gethex+0x28e>
 800c622:	2e01      	cmp	r6, #1
 800c624:	d10b      	bne.n	800c63e <__gethex+0x282>
 800c626:	9a02      	ldr	r2, [sp, #8]
 800c628:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c62c:	6013      	str	r3, [r2, #0]
 800c62e:	2301      	movs	r3, #1
 800c630:	6123      	str	r3, [r4, #16]
 800c632:	f8ca 3000 	str.w	r3, [sl]
 800c636:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c638:	2562      	movs	r5, #98	@ 0x62
 800c63a:	601c      	str	r4, [r3, #0]
 800c63c:	e73a      	b.n	800c4b4 <__gethex+0xf8>
 800c63e:	1e71      	subs	r1, r6, #1
 800c640:	4620      	mov	r0, r4
 800c642:	f000 fe30 	bl	800d2a6 <__any_on>
 800c646:	2800      	cmp	r0, #0
 800c648:	d1ed      	bne.n	800c626 <__gethex+0x26a>
 800c64a:	9801      	ldr	r0, [sp, #4]
 800c64c:	4621      	mov	r1, r4
 800c64e:	f000 f9d9 	bl	800ca04 <_Bfree>
 800c652:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c654:	2300      	movs	r3, #0
 800c656:	6013      	str	r3, [r2, #0]
 800c658:	2550      	movs	r5, #80	@ 0x50
 800c65a:	e72b      	b.n	800c4b4 <__gethex+0xf8>
 800c65c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d1f3      	bne.n	800c64a <__gethex+0x28e>
 800c662:	e7e0      	b.n	800c626 <__gethex+0x26a>
 800c664:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c666:	2b00      	cmp	r3, #0
 800c668:	d1dd      	bne.n	800c626 <__gethex+0x26a>
 800c66a:	e7ee      	b.n	800c64a <__gethex+0x28e>
 800c66c:	0800efc0 	.word	0x0800efc0
 800c670:	0800f028 	.word	0x0800f028
 800c674:	0800f039 	.word	0x0800f039
 800c678:	1e6f      	subs	r7, r5, #1
 800c67a:	f1b9 0f00 	cmp.w	r9, #0
 800c67e:	d130      	bne.n	800c6e2 <__gethex+0x326>
 800c680:	b127      	cbz	r7, 800c68c <__gethex+0x2d0>
 800c682:	4639      	mov	r1, r7
 800c684:	4620      	mov	r0, r4
 800c686:	f000 fe0e 	bl	800d2a6 <__any_on>
 800c68a:	4681      	mov	r9, r0
 800c68c:	117a      	asrs	r2, r7, #5
 800c68e:	2301      	movs	r3, #1
 800c690:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c694:	f007 071f 	and.w	r7, r7, #31
 800c698:	40bb      	lsls	r3, r7
 800c69a:	4213      	tst	r3, r2
 800c69c:	4629      	mov	r1, r5
 800c69e:	4620      	mov	r0, r4
 800c6a0:	bf18      	it	ne
 800c6a2:	f049 0902 	orrne.w	r9, r9, #2
 800c6a6:	f7ff fe21 	bl	800c2ec <rshift>
 800c6aa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c6ae:	1b76      	subs	r6, r6, r5
 800c6b0:	2502      	movs	r5, #2
 800c6b2:	f1b9 0f00 	cmp.w	r9, #0
 800c6b6:	d047      	beq.n	800c748 <__gethex+0x38c>
 800c6b8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c6bc:	2b02      	cmp	r3, #2
 800c6be:	d015      	beq.n	800c6ec <__gethex+0x330>
 800c6c0:	2b03      	cmp	r3, #3
 800c6c2:	d017      	beq.n	800c6f4 <__gethex+0x338>
 800c6c4:	2b01      	cmp	r3, #1
 800c6c6:	d109      	bne.n	800c6dc <__gethex+0x320>
 800c6c8:	f019 0f02 	tst.w	r9, #2
 800c6cc:	d006      	beq.n	800c6dc <__gethex+0x320>
 800c6ce:	f8da 3000 	ldr.w	r3, [sl]
 800c6d2:	ea49 0903 	orr.w	r9, r9, r3
 800c6d6:	f019 0f01 	tst.w	r9, #1
 800c6da:	d10e      	bne.n	800c6fa <__gethex+0x33e>
 800c6dc:	f045 0510 	orr.w	r5, r5, #16
 800c6e0:	e032      	b.n	800c748 <__gethex+0x38c>
 800c6e2:	f04f 0901 	mov.w	r9, #1
 800c6e6:	e7d1      	b.n	800c68c <__gethex+0x2d0>
 800c6e8:	2501      	movs	r5, #1
 800c6ea:	e7e2      	b.n	800c6b2 <__gethex+0x2f6>
 800c6ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c6ee:	f1c3 0301 	rsb	r3, r3, #1
 800c6f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c6f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d0f0      	beq.n	800c6dc <__gethex+0x320>
 800c6fa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c6fe:	f104 0314 	add.w	r3, r4, #20
 800c702:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c706:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c70a:	f04f 0c00 	mov.w	ip, #0
 800c70e:	4618      	mov	r0, r3
 800c710:	f853 2b04 	ldr.w	r2, [r3], #4
 800c714:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c718:	d01b      	beq.n	800c752 <__gethex+0x396>
 800c71a:	3201      	adds	r2, #1
 800c71c:	6002      	str	r2, [r0, #0]
 800c71e:	2d02      	cmp	r5, #2
 800c720:	f104 0314 	add.w	r3, r4, #20
 800c724:	d13c      	bne.n	800c7a0 <__gethex+0x3e4>
 800c726:	f8d8 2000 	ldr.w	r2, [r8]
 800c72a:	3a01      	subs	r2, #1
 800c72c:	42b2      	cmp	r2, r6
 800c72e:	d109      	bne.n	800c744 <__gethex+0x388>
 800c730:	1171      	asrs	r1, r6, #5
 800c732:	2201      	movs	r2, #1
 800c734:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c738:	f006 061f 	and.w	r6, r6, #31
 800c73c:	fa02 f606 	lsl.w	r6, r2, r6
 800c740:	421e      	tst	r6, r3
 800c742:	d13a      	bne.n	800c7ba <__gethex+0x3fe>
 800c744:	f045 0520 	orr.w	r5, r5, #32
 800c748:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c74a:	601c      	str	r4, [r3, #0]
 800c74c:	9b02      	ldr	r3, [sp, #8]
 800c74e:	601f      	str	r7, [r3, #0]
 800c750:	e6b0      	b.n	800c4b4 <__gethex+0xf8>
 800c752:	4299      	cmp	r1, r3
 800c754:	f843 cc04 	str.w	ip, [r3, #-4]
 800c758:	d8d9      	bhi.n	800c70e <__gethex+0x352>
 800c75a:	68a3      	ldr	r3, [r4, #8]
 800c75c:	459b      	cmp	fp, r3
 800c75e:	db17      	blt.n	800c790 <__gethex+0x3d4>
 800c760:	6861      	ldr	r1, [r4, #4]
 800c762:	9801      	ldr	r0, [sp, #4]
 800c764:	3101      	adds	r1, #1
 800c766:	f000 f90d 	bl	800c984 <_Balloc>
 800c76a:	4681      	mov	r9, r0
 800c76c:	b918      	cbnz	r0, 800c776 <__gethex+0x3ba>
 800c76e:	4b1a      	ldr	r3, [pc, #104]	@ (800c7d8 <__gethex+0x41c>)
 800c770:	4602      	mov	r2, r0
 800c772:	2184      	movs	r1, #132	@ 0x84
 800c774:	e6c5      	b.n	800c502 <__gethex+0x146>
 800c776:	6922      	ldr	r2, [r4, #16]
 800c778:	3202      	adds	r2, #2
 800c77a:	f104 010c 	add.w	r1, r4, #12
 800c77e:	0092      	lsls	r2, r2, #2
 800c780:	300c      	adds	r0, #12
 800c782:	f7ff fd50 	bl	800c226 <memcpy>
 800c786:	4621      	mov	r1, r4
 800c788:	9801      	ldr	r0, [sp, #4]
 800c78a:	f000 f93b 	bl	800ca04 <_Bfree>
 800c78e:	464c      	mov	r4, r9
 800c790:	6923      	ldr	r3, [r4, #16]
 800c792:	1c5a      	adds	r2, r3, #1
 800c794:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c798:	6122      	str	r2, [r4, #16]
 800c79a:	2201      	movs	r2, #1
 800c79c:	615a      	str	r2, [r3, #20]
 800c79e:	e7be      	b.n	800c71e <__gethex+0x362>
 800c7a0:	6922      	ldr	r2, [r4, #16]
 800c7a2:	455a      	cmp	r2, fp
 800c7a4:	dd0b      	ble.n	800c7be <__gethex+0x402>
 800c7a6:	2101      	movs	r1, #1
 800c7a8:	4620      	mov	r0, r4
 800c7aa:	f7ff fd9f 	bl	800c2ec <rshift>
 800c7ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c7b2:	3701      	adds	r7, #1
 800c7b4:	42bb      	cmp	r3, r7
 800c7b6:	f6ff aee0 	blt.w	800c57a <__gethex+0x1be>
 800c7ba:	2501      	movs	r5, #1
 800c7bc:	e7c2      	b.n	800c744 <__gethex+0x388>
 800c7be:	f016 061f 	ands.w	r6, r6, #31
 800c7c2:	d0fa      	beq.n	800c7ba <__gethex+0x3fe>
 800c7c4:	4453      	add	r3, sl
 800c7c6:	f1c6 0620 	rsb	r6, r6, #32
 800c7ca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c7ce:	f000 f9cb 	bl	800cb68 <__hi0bits>
 800c7d2:	42b0      	cmp	r0, r6
 800c7d4:	dbe7      	blt.n	800c7a6 <__gethex+0x3ea>
 800c7d6:	e7f0      	b.n	800c7ba <__gethex+0x3fe>
 800c7d8:	0800f028 	.word	0x0800f028

0800c7dc <L_shift>:
 800c7dc:	f1c2 0208 	rsb	r2, r2, #8
 800c7e0:	0092      	lsls	r2, r2, #2
 800c7e2:	b570      	push	{r4, r5, r6, lr}
 800c7e4:	f1c2 0620 	rsb	r6, r2, #32
 800c7e8:	6843      	ldr	r3, [r0, #4]
 800c7ea:	6804      	ldr	r4, [r0, #0]
 800c7ec:	fa03 f506 	lsl.w	r5, r3, r6
 800c7f0:	432c      	orrs	r4, r5
 800c7f2:	40d3      	lsrs	r3, r2
 800c7f4:	6004      	str	r4, [r0, #0]
 800c7f6:	f840 3f04 	str.w	r3, [r0, #4]!
 800c7fa:	4288      	cmp	r0, r1
 800c7fc:	d3f4      	bcc.n	800c7e8 <L_shift+0xc>
 800c7fe:	bd70      	pop	{r4, r5, r6, pc}

0800c800 <__match>:
 800c800:	b530      	push	{r4, r5, lr}
 800c802:	6803      	ldr	r3, [r0, #0]
 800c804:	3301      	adds	r3, #1
 800c806:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c80a:	b914      	cbnz	r4, 800c812 <__match+0x12>
 800c80c:	6003      	str	r3, [r0, #0]
 800c80e:	2001      	movs	r0, #1
 800c810:	bd30      	pop	{r4, r5, pc}
 800c812:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c816:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c81a:	2d19      	cmp	r5, #25
 800c81c:	bf98      	it	ls
 800c81e:	3220      	addls	r2, #32
 800c820:	42a2      	cmp	r2, r4
 800c822:	d0f0      	beq.n	800c806 <__match+0x6>
 800c824:	2000      	movs	r0, #0
 800c826:	e7f3      	b.n	800c810 <__match+0x10>

0800c828 <__hexnan>:
 800c828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c82c:	680b      	ldr	r3, [r1, #0]
 800c82e:	6801      	ldr	r1, [r0, #0]
 800c830:	115e      	asrs	r6, r3, #5
 800c832:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c836:	f013 031f 	ands.w	r3, r3, #31
 800c83a:	b087      	sub	sp, #28
 800c83c:	bf18      	it	ne
 800c83e:	3604      	addne	r6, #4
 800c840:	2500      	movs	r5, #0
 800c842:	1f37      	subs	r7, r6, #4
 800c844:	4682      	mov	sl, r0
 800c846:	4690      	mov	r8, r2
 800c848:	9301      	str	r3, [sp, #4]
 800c84a:	f846 5c04 	str.w	r5, [r6, #-4]
 800c84e:	46b9      	mov	r9, r7
 800c850:	463c      	mov	r4, r7
 800c852:	9502      	str	r5, [sp, #8]
 800c854:	46ab      	mov	fp, r5
 800c856:	784a      	ldrb	r2, [r1, #1]
 800c858:	1c4b      	adds	r3, r1, #1
 800c85a:	9303      	str	r3, [sp, #12]
 800c85c:	b342      	cbz	r2, 800c8b0 <__hexnan+0x88>
 800c85e:	4610      	mov	r0, r2
 800c860:	9105      	str	r1, [sp, #20]
 800c862:	9204      	str	r2, [sp, #16]
 800c864:	f7ff fd94 	bl	800c390 <__hexdig_fun>
 800c868:	2800      	cmp	r0, #0
 800c86a:	d151      	bne.n	800c910 <__hexnan+0xe8>
 800c86c:	9a04      	ldr	r2, [sp, #16]
 800c86e:	9905      	ldr	r1, [sp, #20]
 800c870:	2a20      	cmp	r2, #32
 800c872:	d818      	bhi.n	800c8a6 <__hexnan+0x7e>
 800c874:	9b02      	ldr	r3, [sp, #8]
 800c876:	459b      	cmp	fp, r3
 800c878:	dd13      	ble.n	800c8a2 <__hexnan+0x7a>
 800c87a:	454c      	cmp	r4, r9
 800c87c:	d206      	bcs.n	800c88c <__hexnan+0x64>
 800c87e:	2d07      	cmp	r5, #7
 800c880:	dc04      	bgt.n	800c88c <__hexnan+0x64>
 800c882:	462a      	mov	r2, r5
 800c884:	4649      	mov	r1, r9
 800c886:	4620      	mov	r0, r4
 800c888:	f7ff ffa8 	bl	800c7dc <L_shift>
 800c88c:	4544      	cmp	r4, r8
 800c88e:	d952      	bls.n	800c936 <__hexnan+0x10e>
 800c890:	2300      	movs	r3, #0
 800c892:	f1a4 0904 	sub.w	r9, r4, #4
 800c896:	f844 3c04 	str.w	r3, [r4, #-4]
 800c89a:	f8cd b008 	str.w	fp, [sp, #8]
 800c89e:	464c      	mov	r4, r9
 800c8a0:	461d      	mov	r5, r3
 800c8a2:	9903      	ldr	r1, [sp, #12]
 800c8a4:	e7d7      	b.n	800c856 <__hexnan+0x2e>
 800c8a6:	2a29      	cmp	r2, #41	@ 0x29
 800c8a8:	d157      	bne.n	800c95a <__hexnan+0x132>
 800c8aa:	3102      	adds	r1, #2
 800c8ac:	f8ca 1000 	str.w	r1, [sl]
 800c8b0:	f1bb 0f00 	cmp.w	fp, #0
 800c8b4:	d051      	beq.n	800c95a <__hexnan+0x132>
 800c8b6:	454c      	cmp	r4, r9
 800c8b8:	d206      	bcs.n	800c8c8 <__hexnan+0xa0>
 800c8ba:	2d07      	cmp	r5, #7
 800c8bc:	dc04      	bgt.n	800c8c8 <__hexnan+0xa0>
 800c8be:	462a      	mov	r2, r5
 800c8c0:	4649      	mov	r1, r9
 800c8c2:	4620      	mov	r0, r4
 800c8c4:	f7ff ff8a 	bl	800c7dc <L_shift>
 800c8c8:	4544      	cmp	r4, r8
 800c8ca:	d936      	bls.n	800c93a <__hexnan+0x112>
 800c8cc:	f1a8 0204 	sub.w	r2, r8, #4
 800c8d0:	4623      	mov	r3, r4
 800c8d2:	f853 1b04 	ldr.w	r1, [r3], #4
 800c8d6:	f842 1f04 	str.w	r1, [r2, #4]!
 800c8da:	429f      	cmp	r7, r3
 800c8dc:	d2f9      	bcs.n	800c8d2 <__hexnan+0xaa>
 800c8de:	1b3b      	subs	r3, r7, r4
 800c8e0:	f023 0303 	bic.w	r3, r3, #3
 800c8e4:	3304      	adds	r3, #4
 800c8e6:	3401      	adds	r4, #1
 800c8e8:	3e03      	subs	r6, #3
 800c8ea:	42b4      	cmp	r4, r6
 800c8ec:	bf88      	it	hi
 800c8ee:	2304      	movhi	r3, #4
 800c8f0:	4443      	add	r3, r8
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	f843 2b04 	str.w	r2, [r3], #4
 800c8f8:	429f      	cmp	r7, r3
 800c8fa:	d2fb      	bcs.n	800c8f4 <__hexnan+0xcc>
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	b91b      	cbnz	r3, 800c908 <__hexnan+0xe0>
 800c900:	4547      	cmp	r7, r8
 800c902:	d128      	bne.n	800c956 <__hexnan+0x12e>
 800c904:	2301      	movs	r3, #1
 800c906:	603b      	str	r3, [r7, #0]
 800c908:	2005      	movs	r0, #5
 800c90a:	b007      	add	sp, #28
 800c90c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c910:	3501      	adds	r5, #1
 800c912:	2d08      	cmp	r5, #8
 800c914:	f10b 0b01 	add.w	fp, fp, #1
 800c918:	dd06      	ble.n	800c928 <__hexnan+0x100>
 800c91a:	4544      	cmp	r4, r8
 800c91c:	d9c1      	bls.n	800c8a2 <__hexnan+0x7a>
 800c91e:	2300      	movs	r3, #0
 800c920:	f844 3c04 	str.w	r3, [r4, #-4]
 800c924:	2501      	movs	r5, #1
 800c926:	3c04      	subs	r4, #4
 800c928:	6822      	ldr	r2, [r4, #0]
 800c92a:	f000 000f 	and.w	r0, r0, #15
 800c92e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c932:	6020      	str	r0, [r4, #0]
 800c934:	e7b5      	b.n	800c8a2 <__hexnan+0x7a>
 800c936:	2508      	movs	r5, #8
 800c938:	e7b3      	b.n	800c8a2 <__hexnan+0x7a>
 800c93a:	9b01      	ldr	r3, [sp, #4]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d0dd      	beq.n	800c8fc <__hexnan+0xd4>
 800c940:	f1c3 0320 	rsb	r3, r3, #32
 800c944:	f04f 32ff 	mov.w	r2, #4294967295
 800c948:	40da      	lsrs	r2, r3
 800c94a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c94e:	4013      	ands	r3, r2
 800c950:	f846 3c04 	str.w	r3, [r6, #-4]
 800c954:	e7d2      	b.n	800c8fc <__hexnan+0xd4>
 800c956:	3f04      	subs	r7, #4
 800c958:	e7d0      	b.n	800c8fc <__hexnan+0xd4>
 800c95a:	2004      	movs	r0, #4
 800c95c:	e7d5      	b.n	800c90a <__hexnan+0xe2>

0800c95e <__ascii_mbtowc>:
 800c95e:	b082      	sub	sp, #8
 800c960:	b901      	cbnz	r1, 800c964 <__ascii_mbtowc+0x6>
 800c962:	a901      	add	r1, sp, #4
 800c964:	b142      	cbz	r2, 800c978 <__ascii_mbtowc+0x1a>
 800c966:	b14b      	cbz	r3, 800c97c <__ascii_mbtowc+0x1e>
 800c968:	7813      	ldrb	r3, [r2, #0]
 800c96a:	600b      	str	r3, [r1, #0]
 800c96c:	7812      	ldrb	r2, [r2, #0]
 800c96e:	1e10      	subs	r0, r2, #0
 800c970:	bf18      	it	ne
 800c972:	2001      	movne	r0, #1
 800c974:	b002      	add	sp, #8
 800c976:	4770      	bx	lr
 800c978:	4610      	mov	r0, r2
 800c97a:	e7fb      	b.n	800c974 <__ascii_mbtowc+0x16>
 800c97c:	f06f 0001 	mvn.w	r0, #1
 800c980:	e7f8      	b.n	800c974 <__ascii_mbtowc+0x16>
	...

0800c984 <_Balloc>:
 800c984:	b570      	push	{r4, r5, r6, lr}
 800c986:	69c6      	ldr	r6, [r0, #28]
 800c988:	4604      	mov	r4, r0
 800c98a:	460d      	mov	r5, r1
 800c98c:	b976      	cbnz	r6, 800c9ac <_Balloc+0x28>
 800c98e:	2010      	movs	r0, #16
 800c990:	f7fe fbda 	bl	800b148 <malloc>
 800c994:	4602      	mov	r2, r0
 800c996:	61e0      	str	r0, [r4, #28]
 800c998:	b920      	cbnz	r0, 800c9a4 <_Balloc+0x20>
 800c99a:	4b18      	ldr	r3, [pc, #96]	@ (800c9fc <_Balloc+0x78>)
 800c99c:	4818      	ldr	r0, [pc, #96]	@ (800ca00 <_Balloc+0x7c>)
 800c99e:	216b      	movs	r1, #107	@ 0x6b
 800c9a0:	f000 fd5c 	bl	800d45c <__assert_func>
 800c9a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c9a8:	6006      	str	r6, [r0, #0]
 800c9aa:	60c6      	str	r6, [r0, #12]
 800c9ac:	69e6      	ldr	r6, [r4, #28]
 800c9ae:	68f3      	ldr	r3, [r6, #12]
 800c9b0:	b183      	cbz	r3, 800c9d4 <_Balloc+0x50>
 800c9b2:	69e3      	ldr	r3, [r4, #28]
 800c9b4:	68db      	ldr	r3, [r3, #12]
 800c9b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c9ba:	b9b8      	cbnz	r0, 800c9ec <_Balloc+0x68>
 800c9bc:	2101      	movs	r1, #1
 800c9be:	fa01 f605 	lsl.w	r6, r1, r5
 800c9c2:	1d72      	adds	r2, r6, #5
 800c9c4:	0092      	lsls	r2, r2, #2
 800c9c6:	4620      	mov	r0, r4
 800c9c8:	f000 fd66 	bl	800d498 <_calloc_r>
 800c9cc:	b160      	cbz	r0, 800c9e8 <_Balloc+0x64>
 800c9ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c9d2:	e00e      	b.n	800c9f2 <_Balloc+0x6e>
 800c9d4:	2221      	movs	r2, #33	@ 0x21
 800c9d6:	2104      	movs	r1, #4
 800c9d8:	4620      	mov	r0, r4
 800c9da:	f000 fd5d 	bl	800d498 <_calloc_r>
 800c9de:	69e3      	ldr	r3, [r4, #28]
 800c9e0:	60f0      	str	r0, [r6, #12]
 800c9e2:	68db      	ldr	r3, [r3, #12]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d1e4      	bne.n	800c9b2 <_Balloc+0x2e>
 800c9e8:	2000      	movs	r0, #0
 800c9ea:	bd70      	pop	{r4, r5, r6, pc}
 800c9ec:	6802      	ldr	r2, [r0, #0]
 800c9ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c9f8:	e7f7      	b.n	800c9ea <_Balloc+0x66>
 800c9fa:	bf00      	nop
 800c9fc:	0800f099 	.word	0x0800f099
 800ca00:	0800f0b0 	.word	0x0800f0b0

0800ca04 <_Bfree>:
 800ca04:	b570      	push	{r4, r5, r6, lr}
 800ca06:	69c6      	ldr	r6, [r0, #28]
 800ca08:	4605      	mov	r5, r0
 800ca0a:	460c      	mov	r4, r1
 800ca0c:	b976      	cbnz	r6, 800ca2c <_Bfree+0x28>
 800ca0e:	2010      	movs	r0, #16
 800ca10:	f7fe fb9a 	bl	800b148 <malloc>
 800ca14:	4602      	mov	r2, r0
 800ca16:	61e8      	str	r0, [r5, #28]
 800ca18:	b920      	cbnz	r0, 800ca24 <_Bfree+0x20>
 800ca1a:	4b09      	ldr	r3, [pc, #36]	@ (800ca40 <_Bfree+0x3c>)
 800ca1c:	4809      	ldr	r0, [pc, #36]	@ (800ca44 <_Bfree+0x40>)
 800ca1e:	218f      	movs	r1, #143	@ 0x8f
 800ca20:	f000 fd1c 	bl	800d45c <__assert_func>
 800ca24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ca28:	6006      	str	r6, [r0, #0]
 800ca2a:	60c6      	str	r6, [r0, #12]
 800ca2c:	b13c      	cbz	r4, 800ca3e <_Bfree+0x3a>
 800ca2e:	69eb      	ldr	r3, [r5, #28]
 800ca30:	6862      	ldr	r2, [r4, #4]
 800ca32:	68db      	ldr	r3, [r3, #12]
 800ca34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ca38:	6021      	str	r1, [r4, #0]
 800ca3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ca3e:	bd70      	pop	{r4, r5, r6, pc}
 800ca40:	0800f099 	.word	0x0800f099
 800ca44:	0800f0b0 	.word	0x0800f0b0

0800ca48 <__multadd>:
 800ca48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca4c:	690d      	ldr	r5, [r1, #16]
 800ca4e:	4607      	mov	r7, r0
 800ca50:	460c      	mov	r4, r1
 800ca52:	461e      	mov	r6, r3
 800ca54:	f101 0c14 	add.w	ip, r1, #20
 800ca58:	2000      	movs	r0, #0
 800ca5a:	f8dc 3000 	ldr.w	r3, [ip]
 800ca5e:	b299      	uxth	r1, r3
 800ca60:	fb02 6101 	mla	r1, r2, r1, r6
 800ca64:	0c1e      	lsrs	r6, r3, #16
 800ca66:	0c0b      	lsrs	r3, r1, #16
 800ca68:	fb02 3306 	mla	r3, r2, r6, r3
 800ca6c:	b289      	uxth	r1, r1
 800ca6e:	3001      	adds	r0, #1
 800ca70:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ca74:	4285      	cmp	r5, r0
 800ca76:	f84c 1b04 	str.w	r1, [ip], #4
 800ca7a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ca7e:	dcec      	bgt.n	800ca5a <__multadd+0x12>
 800ca80:	b30e      	cbz	r6, 800cac6 <__multadd+0x7e>
 800ca82:	68a3      	ldr	r3, [r4, #8]
 800ca84:	42ab      	cmp	r3, r5
 800ca86:	dc19      	bgt.n	800cabc <__multadd+0x74>
 800ca88:	6861      	ldr	r1, [r4, #4]
 800ca8a:	4638      	mov	r0, r7
 800ca8c:	3101      	adds	r1, #1
 800ca8e:	f7ff ff79 	bl	800c984 <_Balloc>
 800ca92:	4680      	mov	r8, r0
 800ca94:	b928      	cbnz	r0, 800caa2 <__multadd+0x5a>
 800ca96:	4602      	mov	r2, r0
 800ca98:	4b0c      	ldr	r3, [pc, #48]	@ (800cacc <__multadd+0x84>)
 800ca9a:	480d      	ldr	r0, [pc, #52]	@ (800cad0 <__multadd+0x88>)
 800ca9c:	21ba      	movs	r1, #186	@ 0xba
 800ca9e:	f000 fcdd 	bl	800d45c <__assert_func>
 800caa2:	6922      	ldr	r2, [r4, #16]
 800caa4:	3202      	adds	r2, #2
 800caa6:	f104 010c 	add.w	r1, r4, #12
 800caaa:	0092      	lsls	r2, r2, #2
 800caac:	300c      	adds	r0, #12
 800caae:	f7ff fbba 	bl	800c226 <memcpy>
 800cab2:	4621      	mov	r1, r4
 800cab4:	4638      	mov	r0, r7
 800cab6:	f7ff ffa5 	bl	800ca04 <_Bfree>
 800caba:	4644      	mov	r4, r8
 800cabc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cac0:	3501      	adds	r5, #1
 800cac2:	615e      	str	r6, [r3, #20]
 800cac4:	6125      	str	r5, [r4, #16]
 800cac6:	4620      	mov	r0, r4
 800cac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cacc:	0800f028 	.word	0x0800f028
 800cad0:	0800f0b0 	.word	0x0800f0b0

0800cad4 <__s2b>:
 800cad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cad8:	460c      	mov	r4, r1
 800cada:	4615      	mov	r5, r2
 800cadc:	461f      	mov	r7, r3
 800cade:	2209      	movs	r2, #9
 800cae0:	3308      	adds	r3, #8
 800cae2:	4606      	mov	r6, r0
 800cae4:	fb93 f3f2 	sdiv	r3, r3, r2
 800cae8:	2100      	movs	r1, #0
 800caea:	2201      	movs	r2, #1
 800caec:	429a      	cmp	r2, r3
 800caee:	db09      	blt.n	800cb04 <__s2b+0x30>
 800caf0:	4630      	mov	r0, r6
 800caf2:	f7ff ff47 	bl	800c984 <_Balloc>
 800caf6:	b940      	cbnz	r0, 800cb0a <__s2b+0x36>
 800caf8:	4602      	mov	r2, r0
 800cafa:	4b19      	ldr	r3, [pc, #100]	@ (800cb60 <__s2b+0x8c>)
 800cafc:	4819      	ldr	r0, [pc, #100]	@ (800cb64 <__s2b+0x90>)
 800cafe:	21d3      	movs	r1, #211	@ 0xd3
 800cb00:	f000 fcac 	bl	800d45c <__assert_func>
 800cb04:	0052      	lsls	r2, r2, #1
 800cb06:	3101      	adds	r1, #1
 800cb08:	e7f0      	b.n	800caec <__s2b+0x18>
 800cb0a:	9b08      	ldr	r3, [sp, #32]
 800cb0c:	6143      	str	r3, [r0, #20]
 800cb0e:	2d09      	cmp	r5, #9
 800cb10:	f04f 0301 	mov.w	r3, #1
 800cb14:	6103      	str	r3, [r0, #16]
 800cb16:	dd16      	ble.n	800cb46 <__s2b+0x72>
 800cb18:	f104 0909 	add.w	r9, r4, #9
 800cb1c:	46c8      	mov	r8, r9
 800cb1e:	442c      	add	r4, r5
 800cb20:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cb24:	4601      	mov	r1, r0
 800cb26:	3b30      	subs	r3, #48	@ 0x30
 800cb28:	220a      	movs	r2, #10
 800cb2a:	4630      	mov	r0, r6
 800cb2c:	f7ff ff8c 	bl	800ca48 <__multadd>
 800cb30:	45a0      	cmp	r8, r4
 800cb32:	d1f5      	bne.n	800cb20 <__s2b+0x4c>
 800cb34:	f1a5 0408 	sub.w	r4, r5, #8
 800cb38:	444c      	add	r4, r9
 800cb3a:	1b2d      	subs	r5, r5, r4
 800cb3c:	1963      	adds	r3, r4, r5
 800cb3e:	42bb      	cmp	r3, r7
 800cb40:	db04      	blt.n	800cb4c <__s2b+0x78>
 800cb42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb46:	340a      	adds	r4, #10
 800cb48:	2509      	movs	r5, #9
 800cb4a:	e7f6      	b.n	800cb3a <__s2b+0x66>
 800cb4c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cb50:	4601      	mov	r1, r0
 800cb52:	3b30      	subs	r3, #48	@ 0x30
 800cb54:	220a      	movs	r2, #10
 800cb56:	4630      	mov	r0, r6
 800cb58:	f7ff ff76 	bl	800ca48 <__multadd>
 800cb5c:	e7ee      	b.n	800cb3c <__s2b+0x68>
 800cb5e:	bf00      	nop
 800cb60:	0800f028 	.word	0x0800f028
 800cb64:	0800f0b0 	.word	0x0800f0b0

0800cb68 <__hi0bits>:
 800cb68:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cb6c:	4603      	mov	r3, r0
 800cb6e:	bf36      	itet	cc
 800cb70:	0403      	lslcc	r3, r0, #16
 800cb72:	2000      	movcs	r0, #0
 800cb74:	2010      	movcc	r0, #16
 800cb76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cb7a:	bf3c      	itt	cc
 800cb7c:	021b      	lslcc	r3, r3, #8
 800cb7e:	3008      	addcc	r0, #8
 800cb80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cb84:	bf3c      	itt	cc
 800cb86:	011b      	lslcc	r3, r3, #4
 800cb88:	3004      	addcc	r0, #4
 800cb8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cb8e:	bf3c      	itt	cc
 800cb90:	009b      	lslcc	r3, r3, #2
 800cb92:	3002      	addcc	r0, #2
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	db05      	blt.n	800cba4 <__hi0bits+0x3c>
 800cb98:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cb9c:	f100 0001 	add.w	r0, r0, #1
 800cba0:	bf08      	it	eq
 800cba2:	2020      	moveq	r0, #32
 800cba4:	4770      	bx	lr

0800cba6 <__lo0bits>:
 800cba6:	6803      	ldr	r3, [r0, #0]
 800cba8:	4602      	mov	r2, r0
 800cbaa:	f013 0007 	ands.w	r0, r3, #7
 800cbae:	d00b      	beq.n	800cbc8 <__lo0bits+0x22>
 800cbb0:	07d9      	lsls	r1, r3, #31
 800cbb2:	d421      	bmi.n	800cbf8 <__lo0bits+0x52>
 800cbb4:	0798      	lsls	r0, r3, #30
 800cbb6:	bf49      	itett	mi
 800cbb8:	085b      	lsrmi	r3, r3, #1
 800cbba:	089b      	lsrpl	r3, r3, #2
 800cbbc:	2001      	movmi	r0, #1
 800cbbe:	6013      	strmi	r3, [r2, #0]
 800cbc0:	bf5c      	itt	pl
 800cbc2:	6013      	strpl	r3, [r2, #0]
 800cbc4:	2002      	movpl	r0, #2
 800cbc6:	4770      	bx	lr
 800cbc8:	b299      	uxth	r1, r3
 800cbca:	b909      	cbnz	r1, 800cbd0 <__lo0bits+0x2a>
 800cbcc:	0c1b      	lsrs	r3, r3, #16
 800cbce:	2010      	movs	r0, #16
 800cbd0:	b2d9      	uxtb	r1, r3
 800cbd2:	b909      	cbnz	r1, 800cbd8 <__lo0bits+0x32>
 800cbd4:	3008      	adds	r0, #8
 800cbd6:	0a1b      	lsrs	r3, r3, #8
 800cbd8:	0719      	lsls	r1, r3, #28
 800cbda:	bf04      	itt	eq
 800cbdc:	091b      	lsreq	r3, r3, #4
 800cbde:	3004      	addeq	r0, #4
 800cbe0:	0799      	lsls	r1, r3, #30
 800cbe2:	bf04      	itt	eq
 800cbe4:	089b      	lsreq	r3, r3, #2
 800cbe6:	3002      	addeq	r0, #2
 800cbe8:	07d9      	lsls	r1, r3, #31
 800cbea:	d403      	bmi.n	800cbf4 <__lo0bits+0x4e>
 800cbec:	085b      	lsrs	r3, r3, #1
 800cbee:	f100 0001 	add.w	r0, r0, #1
 800cbf2:	d003      	beq.n	800cbfc <__lo0bits+0x56>
 800cbf4:	6013      	str	r3, [r2, #0]
 800cbf6:	4770      	bx	lr
 800cbf8:	2000      	movs	r0, #0
 800cbfa:	4770      	bx	lr
 800cbfc:	2020      	movs	r0, #32
 800cbfe:	4770      	bx	lr

0800cc00 <__i2b>:
 800cc00:	b510      	push	{r4, lr}
 800cc02:	460c      	mov	r4, r1
 800cc04:	2101      	movs	r1, #1
 800cc06:	f7ff febd 	bl	800c984 <_Balloc>
 800cc0a:	4602      	mov	r2, r0
 800cc0c:	b928      	cbnz	r0, 800cc1a <__i2b+0x1a>
 800cc0e:	4b05      	ldr	r3, [pc, #20]	@ (800cc24 <__i2b+0x24>)
 800cc10:	4805      	ldr	r0, [pc, #20]	@ (800cc28 <__i2b+0x28>)
 800cc12:	f240 1145 	movw	r1, #325	@ 0x145
 800cc16:	f000 fc21 	bl	800d45c <__assert_func>
 800cc1a:	2301      	movs	r3, #1
 800cc1c:	6144      	str	r4, [r0, #20]
 800cc1e:	6103      	str	r3, [r0, #16]
 800cc20:	bd10      	pop	{r4, pc}
 800cc22:	bf00      	nop
 800cc24:	0800f028 	.word	0x0800f028
 800cc28:	0800f0b0 	.word	0x0800f0b0

0800cc2c <__multiply>:
 800cc2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc30:	4614      	mov	r4, r2
 800cc32:	690a      	ldr	r2, [r1, #16]
 800cc34:	6923      	ldr	r3, [r4, #16]
 800cc36:	429a      	cmp	r2, r3
 800cc38:	bfa8      	it	ge
 800cc3a:	4623      	movge	r3, r4
 800cc3c:	460f      	mov	r7, r1
 800cc3e:	bfa4      	itt	ge
 800cc40:	460c      	movge	r4, r1
 800cc42:	461f      	movge	r7, r3
 800cc44:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800cc48:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800cc4c:	68a3      	ldr	r3, [r4, #8]
 800cc4e:	6861      	ldr	r1, [r4, #4]
 800cc50:	eb0a 0609 	add.w	r6, sl, r9
 800cc54:	42b3      	cmp	r3, r6
 800cc56:	b085      	sub	sp, #20
 800cc58:	bfb8      	it	lt
 800cc5a:	3101      	addlt	r1, #1
 800cc5c:	f7ff fe92 	bl	800c984 <_Balloc>
 800cc60:	b930      	cbnz	r0, 800cc70 <__multiply+0x44>
 800cc62:	4602      	mov	r2, r0
 800cc64:	4b44      	ldr	r3, [pc, #272]	@ (800cd78 <__multiply+0x14c>)
 800cc66:	4845      	ldr	r0, [pc, #276]	@ (800cd7c <__multiply+0x150>)
 800cc68:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cc6c:	f000 fbf6 	bl	800d45c <__assert_func>
 800cc70:	f100 0514 	add.w	r5, r0, #20
 800cc74:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cc78:	462b      	mov	r3, r5
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	4543      	cmp	r3, r8
 800cc7e:	d321      	bcc.n	800ccc4 <__multiply+0x98>
 800cc80:	f107 0114 	add.w	r1, r7, #20
 800cc84:	f104 0214 	add.w	r2, r4, #20
 800cc88:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800cc8c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800cc90:	9302      	str	r3, [sp, #8]
 800cc92:	1b13      	subs	r3, r2, r4
 800cc94:	3b15      	subs	r3, #21
 800cc96:	f023 0303 	bic.w	r3, r3, #3
 800cc9a:	3304      	adds	r3, #4
 800cc9c:	f104 0715 	add.w	r7, r4, #21
 800cca0:	42ba      	cmp	r2, r7
 800cca2:	bf38      	it	cc
 800cca4:	2304      	movcc	r3, #4
 800cca6:	9301      	str	r3, [sp, #4]
 800cca8:	9b02      	ldr	r3, [sp, #8]
 800ccaa:	9103      	str	r1, [sp, #12]
 800ccac:	428b      	cmp	r3, r1
 800ccae:	d80c      	bhi.n	800ccca <__multiply+0x9e>
 800ccb0:	2e00      	cmp	r6, #0
 800ccb2:	dd03      	ble.n	800ccbc <__multiply+0x90>
 800ccb4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d05b      	beq.n	800cd74 <__multiply+0x148>
 800ccbc:	6106      	str	r6, [r0, #16]
 800ccbe:	b005      	add	sp, #20
 800ccc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccc4:	f843 2b04 	str.w	r2, [r3], #4
 800ccc8:	e7d8      	b.n	800cc7c <__multiply+0x50>
 800ccca:	f8b1 a000 	ldrh.w	sl, [r1]
 800ccce:	f1ba 0f00 	cmp.w	sl, #0
 800ccd2:	d024      	beq.n	800cd1e <__multiply+0xf2>
 800ccd4:	f104 0e14 	add.w	lr, r4, #20
 800ccd8:	46a9      	mov	r9, r5
 800ccda:	f04f 0c00 	mov.w	ip, #0
 800ccde:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cce2:	f8d9 3000 	ldr.w	r3, [r9]
 800cce6:	fa1f fb87 	uxth.w	fp, r7
 800ccea:	b29b      	uxth	r3, r3
 800ccec:	fb0a 330b 	mla	r3, sl, fp, r3
 800ccf0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ccf4:	f8d9 7000 	ldr.w	r7, [r9]
 800ccf8:	4463      	add	r3, ip
 800ccfa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ccfe:	fb0a c70b 	mla	r7, sl, fp, ip
 800cd02:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800cd06:	b29b      	uxth	r3, r3
 800cd08:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cd0c:	4572      	cmp	r2, lr
 800cd0e:	f849 3b04 	str.w	r3, [r9], #4
 800cd12:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cd16:	d8e2      	bhi.n	800ccde <__multiply+0xb2>
 800cd18:	9b01      	ldr	r3, [sp, #4]
 800cd1a:	f845 c003 	str.w	ip, [r5, r3]
 800cd1e:	9b03      	ldr	r3, [sp, #12]
 800cd20:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cd24:	3104      	adds	r1, #4
 800cd26:	f1b9 0f00 	cmp.w	r9, #0
 800cd2a:	d021      	beq.n	800cd70 <__multiply+0x144>
 800cd2c:	682b      	ldr	r3, [r5, #0]
 800cd2e:	f104 0c14 	add.w	ip, r4, #20
 800cd32:	46ae      	mov	lr, r5
 800cd34:	f04f 0a00 	mov.w	sl, #0
 800cd38:	f8bc b000 	ldrh.w	fp, [ip]
 800cd3c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800cd40:	fb09 770b 	mla	r7, r9, fp, r7
 800cd44:	4457      	add	r7, sl
 800cd46:	b29b      	uxth	r3, r3
 800cd48:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cd4c:	f84e 3b04 	str.w	r3, [lr], #4
 800cd50:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cd54:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cd58:	f8be 3000 	ldrh.w	r3, [lr]
 800cd5c:	fb09 330a 	mla	r3, r9, sl, r3
 800cd60:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800cd64:	4562      	cmp	r2, ip
 800cd66:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cd6a:	d8e5      	bhi.n	800cd38 <__multiply+0x10c>
 800cd6c:	9f01      	ldr	r7, [sp, #4]
 800cd6e:	51eb      	str	r3, [r5, r7]
 800cd70:	3504      	adds	r5, #4
 800cd72:	e799      	b.n	800cca8 <__multiply+0x7c>
 800cd74:	3e01      	subs	r6, #1
 800cd76:	e79b      	b.n	800ccb0 <__multiply+0x84>
 800cd78:	0800f028 	.word	0x0800f028
 800cd7c:	0800f0b0 	.word	0x0800f0b0

0800cd80 <__pow5mult>:
 800cd80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd84:	4615      	mov	r5, r2
 800cd86:	f012 0203 	ands.w	r2, r2, #3
 800cd8a:	4607      	mov	r7, r0
 800cd8c:	460e      	mov	r6, r1
 800cd8e:	d007      	beq.n	800cda0 <__pow5mult+0x20>
 800cd90:	4c25      	ldr	r4, [pc, #148]	@ (800ce28 <__pow5mult+0xa8>)
 800cd92:	3a01      	subs	r2, #1
 800cd94:	2300      	movs	r3, #0
 800cd96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cd9a:	f7ff fe55 	bl	800ca48 <__multadd>
 800cd9e:	4606      	mov	r6, r0
 800cda0:	10ad      	asrs	r5, r5, #2
 800cda2:	d03d      	beq.n	800ce20 <__pow5mult+0xa0>
 800cda4:	69fc      	ldr	r4, [r7, #28]
 800cda6:	b97c      	cbnz	r4, 800cdc8 <__pow5mult+0x48>
 800cda8:	2010      	movs	r0, #16
 800cdaa:	f7fe f9cd 	bl	800b148 <malloc>
 800cdae:	4602      	mov	r2, r0
 800cdb0:	61f8      	str	r0, [r7, #28]
 800cdb2:	b928      	cbnz	r0, 800cdc0 <__pow5mult+0x40>
 800cdb4:	4b1d      	ldr	r3, [pc, #116]	@ (800ce2c <__pow5mult+0xac>)
 800cdb6:	481e      	ldr	r0, [pc, #120]	@ (800ce30 <__pow5mult+0xb0>)
 800cdb8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cdbc:	f000 fb4e 	bl	800d45c <__assert_func>
 800cdc0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cdc4:	6004      	str	r4, [r0, #0]
 800cdc6:	60c4      	str	r4, [r0, #12]
 800cdc8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cdcc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cdd0:	b94c      	cbnz	r4, 800cde6 <__pow5mult+0x66>
 800cdd2:	f240 2171 	movw	r1, #625	@ 0x271
 800cdd6:	4638      	mov	r0, r7
 800cdd8:	f7ff ff12 	bl	800cc00 <__i2b>
 800cddc:	2300      	movs	r3, #0
 800cdde:	f8c8 0008 	str.w	r0, [r8, #8]
 800cde2:	4604      	mov	r4, r0
 800cde4:	6003      	str	r3, [r0, #0]
 800cde6:	f04f 0900 	mov.w	r9, #0
 800cdea:	07eb      	lsls	r3, r5, #31
 800cdec:	d50a      	bpl.n	800ce04 <__pow5mult+0x84>
 800cdee:	4631      	mov	r1, r6
 800cdf0:	4622      	mov	r2, r4
 800cdf2:	4638      	mov	r0, r7
 800cdf4:	f7ff ff1a 	bl	800cc2c <__multiply>
 800cdf8:	4631      	mov	r1, r6
 800cdfa:	4680      	mov	r8, r0
 800cdfc:	4638      	mov	r0, r7
 800cdfe:	f7ff fe01 	bl	800ca04 <_Bfree>
 800ce02:	4646      	mov	r6, r8
 800ce04:	106d      	asrs	r5, r5, #1
 800ce06:	d00b      	beq.n	800ce20 <__pow5mult+0xa0>
 800ce08:	6820      	ldr	r0, [r4, #0]
 800ce0a:	b938      	cbnz	r0, 800ce1c <__pow5mult+0x9c>
 800ce0c:	4622      	mov	r2, r4
 800ce0e:	4621      	mov	r1, r4
 800ce10:	4638      	mov	r0, r7
 800ce12:	f7ff ff0b 	bl	800cc2c <__multiply>
 800ce16:	6020      	str	r0, [r4, #0]
 800ce18:	f8c0 9000 	str.w	r9, [r0]
 800ce1c:	4604      	mov	r4, r0
 800ce1e:	e7e4      	b.n	800cdea <__pow5mult+0x6a>
 800ce20:	4630      	mov	r0, r6
 800ce22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce26:	bf00      	nop
 800ce28:	0800f10c 	.word	0x0800f10c
 800ce2c:	0800f099 	.word	0x0800f099
 800ce30:	0800f0b0 	.word	0x0800f0b0

0800ce34 <__lshift>:
 800ce34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce38:	460c      	mov	r4, r1
 800ce3a:	6849      	ldr	r1, [r1, #4]
 800ce3c:	6923      	ldr	r3, [r4, #16]
 800ce3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ce42:	68a3      	ldr	r3, [r4, #8]
 800ce44:	4607      	mov	r7, r0
 800ce46:	4691      	mov	r9, r2
 800ce48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ce4c:	f108 0601 	add.w	r6, r8, #1
 800ce50:	42b3      	cmp	r3, r6
 800ce52:	db0b      	blt.n	800ce6c <__lshift+0x38>
 800ce54:	4638      	mov	r0, r7
 800ce56:	f7ff fd95 	bl	800c984 <_Balloc>
 800ce5a:	4605      	mov	r5, r0
 800ce5c:	b948      	cbnz	r0, 800ce72 <__lshift+0x3e>
 800ce5e:	4602      	mov	r2, r0
 800ce60:	4b28      	ldr	r3, [pc, #160]	@ (800cf04 <__lshift+0xd0>)
 800ce62:	4829      	ldr	r0, [pc, #164]	@ (800cf08 <__lshift+0xd4>)
 800ce64:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ce68:	f000 faf8 	bl	800d45c <__assert_func>
 800ce6c:	3101      	adds	r1, #1
 800ce6e:	005b      	lsls	r3, r3, #1
 800ce70:	e7ee      	b.n	800ce50 <__lshift+0x1c>
 800ce72:	2300      	movs	r3, #0
 800ce74:	f100 0114 	add.w	r1, r0, #20
 800ce78:	f100 0210 	add.w	r2, r0, #16
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	4553      	cmp	r3, sl
 800ce80:	db33      	blt.n	800ceea <__lshift+0xb6>
 800ce82:	6920      	ldr	r0, [r4, #16]
 800ce84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ce88:	f104 0314 	add.w	r3, r4, #20
 800ce8c:	f019 091f 	ands.w	r9, r9, #31
 800ce90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ce94:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ce98:	d02b      	beq.n	800cef2 <__lshift+0xbe>
 800ce9a:	f1c9 0e20 	rsb	lr, r9, #32
 800ce9e:	468a      	mov	sl, r1
 800cea0:	2200      	movs	r2, #0
 800cea2:	6818      	ldr	r0, [r3, #0]
 800cea4:	fa00 f009 	lsl.w	r0, r0, r9
 800cea8:	4310      	orrs	r0, r2
 800ceaa:	f84a 0b04 	str.w	r0, [sl], #4
 800ceae:	f853 2b04 	ldr.w	r2, [r3], #4
 800ceb2:	459c      	cmp	ip, r3
 800ceb4:	fa22 f20e 	lsr.w	r2, r2, lr
 800ceb8:	d8f3      	bhi.n	800cea2 <__lshift+0x6e>
 800ceba:	ebac 0304 	sub.w	r3, ip, r4
 800cebe:	3b15      	subs	r3, #21
 800cec0:	f023 0303 	bic.w	r3, r3, #3
 800cec4:	3304      	adds	r3, #4
 800cec6:	f104 0015 	add.w	r0, r4, #21
 800ceca:	4584      	cmp	ip, r0
 800cecc:	bf38      	it	cc
 800cece:	2304      	movcc	r3, #4
 800ced0:	50ca      	str	r2, [r1, r3]
 800ced2:	b10a      	cbz	r2, 800ced8 <__lshift+0xa4>
 800ced4:	f108 0602 	add.w	r6, r8, #2
 800ced8:	3e01      	subs	r6, #1
 800ceda:	4638      	mov	r0, r7
 800cedc:	612e      	str	r6, [r5, #16]
 800cede:	4621      	mov	r1, r4
 800cee0:	f7ff fd90 	bl	800ca04 <_Bfree>
 800cee4:	4628      	mov	r0, r5
 800cee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ceea:	f842 0f04 	str.w	r0, [r2, #4]!
 800ceee:	3301      	adds	r3, #1
 800cef0:	e7c5      	b.n	800ce7e <__lshift+0x4a>
 800cef2:	3904      	subs	r1, #4
 800cef4:	f853 2b04 	ldr.w	r2, [r3], #4
 800cef8:	f841 2f04 	str.w	r2, [r1, #4]!
 800cefc:	459c      	cmp	ip, r3
 800cefe:	d8f9      	bhi.n	800cef4 <__lshift+0xc0>
 800cf00:	e7ea      	b.n	800ced8 <__lshift+0xa4>
 800cf02:	bf00      	nop
 800cf04:	0800f028 	.word	0x0800f028
 800cf08:	0800f0b0 	.word	0x0800f0b0

0800cf0c <__mcmp>:
 800cf0c:	690a      	ldr	r2, [r1, #16]
 800cf0e:	4603      	mov	r3, r0
 800cf10:	6900      	ldr	r0, [r0, #16]
 800cf12:	1a80      	subs	r0, r0, r2
 800cf14:	b530      	push	{r4, r5, lr}
 800cf16:	d10e      	bne.n	800cf36 <__mcmp+0x2a>
 800cf18:	3314      	adds	r3, #20
 800cf1a:	3114      	adds	r1, #20
 800cf1c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cf20:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cf24:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cf28:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cf2c:	4295      	cmp	r5, r2
 800cf2e:	d003      	beq.n	800cf38 <__mcmp+0x2c>
 800cf30:	d205      	bcs.n	800cf3e <__mcmp+0x32>
 800cf32:	f04f 30ff 	mov.w	r0, #4294967295
 800cf36:	bd30      	pop	{r4, r5, pc}
 800cf38:	42a3      	cmp	r3, r4
 800cf3a:	d3f3      	bcc.n	800cf24 <__mcmp+0x18>
 800cf3c:	e7fb      	b.n	800cf36 <__mcmp+0x2a>
 800cf3e:	2001      	movs	r0, #1
 800cf40:	e7f9      	b.n	800cf36 <__mcmp+0x2a>
	...

0800cf44 <__mdiff>:
 800cf44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf48:	4689      	mov	r9, r1
 800cf4a:	4606      	mov	r6, r0
 800cf4c:	4611      	mov	r1, r2
 800cf4e:	4648      	mov	r0, r9
 800cf50:	4614      	mov	r4, r2
 800cf52:	f7ff ffdb 	bl	800cf0c <__mcmp>
 800cf56:	1e05      	subs	r5, r0, #0
 800cf58:	d112      	bne.n	800cf80 <__mdiff+0x3c>
 800cf5a:	4629      	mov	r1, r5
 800cf5c:	4630      	mov	r0, r6
 800cf5e:	f7ff fd11 	bl	800c984 <_Balloc>
 800cf62:	4602      	mov	r2, r0
 800cf64:	b928      	cbnz	r0, 800cf72 <__mdiff+0x2e>
 800cf66:	4b3f      	ldr	r3, [pc, #252]	@ (800d064 <__mdiff+0x120>)
 800cf68:	f240 2137 	movw	r1, #567	@ 0x237
 800cf6c:	483e      	ldr	r0, [pc, #248]	@ (800d068 <__mdiff+0x124>)
 800cf6e:	f000 fa75 	bl	800d45c <__assert_func>
 800cf72:	2301      	movs	r3, #1
 800cf74:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cf78:	4610      	mov	r0, r2
 800cf7a:	b003      	add	sp, #12
 800cf7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf80:	bfbc      	itt	lt
 800cf82:	464b      	movlt	r3, r9
 800cf84:	46a1      	movlt	r9, r4
 800cf86:	4630      	mov	r0, r6
 800cf88:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cf8c:	bfba      	itte	lt
 800cf8e:	461c      	movlt	r4, r3
 800cf90:	2501      	movlt	r5, #1
 800cf92:	2500      	movge	r5, #0
 800cf94:	f7ff fcf6 	bl	800c984 <_Balloc>
 800cf98:	4602      	mov	r2, r0
 800cf9a:	b918      	cbnz	r0, 800cfa4 <__mdiff+0x60>
 800cf9c:	4b31      	ldr	r3, [pc, #196]	@ (800d064 <__mdiff+0x120>)
 800cf9e:	f240 2145 	movw	r1, #581	@ 0x245
 800cfa2:	e7e3      	b.n	800cf6c <__mdiff+0x28>
 800cfa4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cfa8:	6926      	ldr	r6, [r4, #16]
 800cfaa:	60c5      	str	r5, [r0, #12]
 800cfac:	f109 0310 	add.w	r3, r9, #16
 800cfb0:	f109 0514 	add.w	r5, r9, #20
 800cfb4:	f104 0e14 	add.w	lr, r4, #20
 800cfb8:	f100 0b14 	add.w	fp, r0, #20
 800cfbc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cfc0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cfc4:	9301      	str	r3, [sp, #4]
 800cfc6:	46d9      	mov	r9, fp
 800cfc8:	f04f 0c00 	mov.w	ip, #0
 800cfcc:	9b01      	ldr	r3, [sp, #4]
 800cfce:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cfd2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cfd6:	9301      	str	r3, [sp, #4]
 800cfd8:	fa1f f38a 	uxth.w	r3, sl
 800cfdc:	4619      	mov	r1, r3
 800cfde:	b283      	uxth	r3, r0
 800cfe0:	1acb      	subs	r3, r1, r3
 800cfe2:	0c00      	lsrs	r0, r0, #16
 800cfe4:	4463      	add	r3, ip
 800cfe6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cfea:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cfee:	b29b      	uxth	r3, r3
 800cff0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cff4:	4576      	cmp	r6, lr
 800cff6:	f849 3b04 	str.w	r3, [r9], #4
 800cffa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cffe:	d8e5      	bhi.n	800cfcc <__mdiff+0x88>
 800d000:	1b33      	subs	r3, r6, r4
 800d002:	3b15      	subs	r3, #21
 800d004:	f023 0303 	bic.w	r3, r3, #3
 800d008:	3415      	adds	r4, #21
 800d00a:	3304      	adds	r3, #4
 800d00c:	42a6      	cmp	r6, r4
 800d00e:	bf38      	it	cc
 800d010:	2304      	movcc	r3, #4
 800d012:	441d      	add	r5, r3
 800d014:	445b      	add	r3, fp
 800d016:	461e      	mov	r6, r3
 800d018:	462c      	mov	r4, r5
 800d01a:	4544      	cmp	r4, r8
 800d01c:	d30e      	bcc.n	800d03c <__mdiff+0xf8>
 800d01e:	f108 0103 	add.w	r1, r8, #3
 800d022:	1b49      	subs	r1, r1, r5
 800d024:	f021 0103 	bic.w	r1, r1, #3
 800d028:	3d03      	subs	r5, #3
 800d02a:	45a8      	cmp	r8, r5
 800d02c:	bf38      	it	cc
 800d02e:	2100      	movcc	r1, #0
 800d030:	440b      	add	r3, r1
 800d032:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d036:	b191      	cbz	r1, 800d05e <__mdiff+0x11a>
 800d038:	6117      	str	r7, [r2, #16]
 800d03a:	e79d      	b.n	800cf78 <__mdiff+0x34>
 800d03c:	f854 1b04 	ldr.w	r1, [r4], #4
 800d040:	46e6      	mov	lr, ip
 800d042:	0c08      	lsrs	r0, r1, #16
 800d044:	fa1c fc81 	uxtah	ip, ip, r1
 800d048:	4471      	add	r1, lr
 800d04a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d04e:	b289      	uxth	r1, r1
 800d050:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d054:	f846 1b04 	str.w	r1, [r6], #4
 800d058:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d05c:	e7dd      	b.n	800d01a <__mdiff+0xd6>
 800d05e:	3f01      	subs	r7, #1
 800d060:	e7e7      	b.n	800d032 <__mdiff+0xee>
 800d062:	bf00      	nop
 800d064:	0800f028 	.word	0x0800f028
 800d068:	0800f0b0 	.word	0x0800f0b0

0800d06c <__ulp>:
 800d06c:	b082      	sub	sp, #8
 800d06e:	ed8d 0b00 	vstr	d0, [sp]
 800d072:	9a01      	ldr	r2, [sp, #4]
 800d074:	4b0f      	ldr	r3, [pc, #60]	@ (800d0b4 <__ulp+0x48>)
 800d076:	4013      	ands	r3, r2
 800d078:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	dc08      	bgt.n	800d092 <__ulp+0x26>
 800d080:	425b      	negs	r3, r3
 800d082:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d086:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d08a:	da04      	bge.n	800d096 <__ulp+0x2a>
 800d08c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d090:	4113      	asrs	r3, r2
 800d092:	2200      	movs	r2, #0
 800d094:	e008      	b.n	800d0a8 <__ulp+0x3c>
 800d096:	f1a2 0314 	sub.w	r3, r2, #20
 800d09a:	2b1e      	cmp	r3, #30
 800d09c:	bfda      	itte	le
 800d09e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d0a2:	40da      	lsrle	r2, r3
 800d0a4:	2201      	movgt	r2, #1
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	4619      	mov	r1, r3
 800d0aa:	4610      	mov	r0, r2
 800d0ac:	ec41 0b10 	vmov	d0, r0, r1
 800d0b0:	b002      	add	sp, #8
 800d0b2:	4770      	bx	lr
 800d0b4:	7ff00000 	.word	0x7ff00000

0800d0b8 <__b2d>:
 800d0b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0bc:	6906      	ldr	r6, [r0, #16]
 800d0be:	f100 0814 	add.w	r8, r0, #20
 800d0c2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d0c6:	1f37      	subs	r7, r6, #4
 800d0c8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d0cc:	4610      	mov	r0, r2
 800d0ce:	f7ff fd4b 	bl	800cb68 <__hi0bits>
 800d0d2:	f1c0 0320 	rsb	r3, r0, #32
 800d0d6:	280a      	cmp	r0, #10
 800d0d8:	600b      	str	r3, [r1, #0]
 800d0da:	491b      	ldr	r1, [pc, #108]	@ (800d148 <__b2d+0x90>)
 800d0dc:	dc15      	bgt.n	800d10a <__b2d+0x52>
 800d0de:	f1c0 0c0b 	rsb	ip, r0, #11
 800d0e2:	fa22 f30c 	lsr.w	r3, r2, ip
 800d0e6:	45b8      	cmp	r8, r7
 800d0e8:	ea43 0501 	orr.w	r5, r3, r1
 800d0ec:	bf34      	ite	cc
 800d0ee:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d0f2:	2300      	movcs	r3, #0
 800d0f4:	3015      	adds	r0, #21
 800d0f6:	fa02 f000 	lsl.w	r0, r2, r0
 800d0fa:	fa23 f30c 	lsr.w	r3, r3, ip
 800d0fe:	4303      	orrs	r3, r0
 800d100:	461c      	mov	r4, r3
 800d102:	ec45 4b10 	vmov	d0, r4, r5
 800d106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d10a:	45b8      	cmp	r8, r7
 800d10c:	bf3a      	itte	cc
 800d10e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d112:	f1a6 0708 	subcc.w	r7, r6, #8
 800d116:	2300      	movcs	r3, #0
 800d118:	380b      	subs	r0, #11
 800d11a:	d012      	beq.n	800d142 <__b2d+0x8a>
 800d11c:	f1c0 0120 	rsb	r1, r0, #32
 800d120:	fa23 f401 	lsr.w	r4, r3, r1
 800d124:	4082      	lsls	r2, r0
 800d126:	4322      	orrs	r2, r4
 800d128:	4547      	cmp	r7, r8
 800d12a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d12e:	bf8c      	ite	hi
 800d130:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d134:	2200      	movls	r2, #0
 800d136:	4083      	lsls	r3, r0
 800d138:	40ca      	lsrs	r2, r1
 800d13a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d13e:	4313      	orrs	r3, r2
 800d140:	e7de      	b.n	800d100 <__b2d+0x48>
 800d142:	ea42 0501 	orr.w	r5, r2, r1
 800d146:	e7db      	b.n	800d100 <__b2d+0x48>
 800d148:	3ff00000 	.word	0x3ff00000

0800d14c <__d2b>:
 800d14c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d150:	460f      	mov	r7, r1
 800d152:	2101      	movs	r1, #1
 800d154:	ec59 8b10 	vmov	r8, r9, d0
 800d158:	4616      	mov	r6, r2
 800d15a:	f7ff fc13 	bl	800c984 <_Balloc>
 800d15e:	4604      	mov	r4, r0
 800d160:	b930      	cbnz	r0, 800d170 <__d2b+0x24>
 800d162:	4602      	mov	r2, r0
 800d164:	4b23      	ldr	r3, [pc, #140]	@ (800d1f4 <__d2b+0xa8>)
 800d166:	4824      	ldr	r0, [pc, #144]	@ (800d1f8 <__d2b+0xac>)
 800d168:	f240 310f 	movw	r1, #783	@ 0x30f
 800d16c:	f000 f976 	bl	800d45c <__assert_func>
 800d170:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d174:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d178:	b10d      	cbz	r5, 800d17e <__d2b+0x32>
 800d17a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d17e:	9301      	str	r3, [sp, #4]
 800d180:	f1b8 0300 	subs.w	r3, r8, #0
 800d184:	d023      	beq.n	800d1ce <__d2b+0x82>
 800d186:	4668      	mov	r0, sp
 800d188:	9300      	str	r3, [sp, #0]
 800d18a:	f7ff fd0c 	bl	800cba6 <__lo0bits>
 800d18e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d192:	b1d0      	cbz	r0, 800d1ca <__d2b+0x7e>
 800d194:	f1c0 0320 	rsb	r3, r0, #32
 800d198:	fa02 f303 	lsl.w	r3, r2, r3
 800d19c:	430b      	orrs	r3, r1
 800d19e:	40c2      	lsrs	r2, r0
 800d1a0:	6163      	str	r3, [r4, #20]
 800d1a2:	9201      	str	r2, [sp, #4]
 800d1a4:	9b01      	ldr	r3, [sp, #4]
 800d1a6:	61a3      	str	r3, [r4, #24]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	bf0c      	ite	eq
 800d1ac:	2201      	moveq	r2, #1
 800d1ae:	2202      	movne	r2, #2
 800d1b0:	6122      	str	r2, [r4, #16]
 800d1b2:	b1a5      	cbz	r5, 800d1de <__d2b+0x92>
 800d1b4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d1b8:	4405      	add	r5, r0
 800d1ba:	603d      	str	r5, [r7, #0]
 800d1bc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d1c0:	6030      	str	r0, [r6, #0]
 800d1c2:	4620      	mov	r0, r4
 800d1c4:	b003      	add	sp, #12
 800d1c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d1ca:	6161      	str	r1, [r4, #20]
 800d1cc:	e7ea      	b.n	800d1a4 <__d2b+0x58>
 800d1ce:	a801      	add	r0, sp, #4
 800d1d0:	f7ff fce9 	bl	800cba6 <__lo0bits>
 800d1d4:	9b01      	ldr	r3, [sp, #4]
 800d1d6:	6163      	str	r3, [r4, #20]
 800d1d8:	3020      	adds	r0, #32
 800d1da:	2201      	movs	r2, #1
 800d1dc:	e7e8      	b.n	800d1b0 <__d2b+0x64>
 800d1de:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d1e2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d1e6:	6038      	str	r0, [r7, #0]
 800d1e8:	6918      	ldr	r0, [r3, #16]
 800d1ea:	f7ff fcbd 	bl	800cb68 <__hi0bits>
 800d1ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d1f2:	e7e5      	b.n	800d1c0 <__d2b+0x74>
 800d1f4:	0800f028 	.word	0x0800f028
 800d1f8:	0800f0b0 	.word	0x0800f0b0

0800d1fc <__ratio>:
 800d1fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d200:	b085      	sub	sp, #20
 800d202:	e9cd 1000 	strd	r1, r0, [sp]
 800d206:	a902      	add	r1, sp, #8
 800d208:	f7ff ff56 	bl	800d0b8 <__b2d>
 800d20c:	9800      	ldr	r0, [sp, #0]
 800d20e:	a903      	add	r1, sp, #12
 800d210:	ec55 4b10 	vmov	r4, r5, d0
 800d214:	f7ff ff50 	bl	800d0b8 <__b2d>
 800d218:	9b01      	ldr	r3, [sp, #4]
 800d21a:	6919      	ldr	r1, [r3, #16]
 800d21c:	9b00      	ldr	r3, [sp, #0]
 800d21e:	691b      	ldr	r3, [r3, #16]
 800d220:	1ac9      	subs	r1, r1, r3
 800d222:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d226:	1a9b      	subs	r3, r3, r2
 800d228:	ec5b ab10 	vmov	sl, fp, d0
 800d22c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d230:	2b00      	cmp	r3, #0
 800d232:	bfce      	itee	gt
 800d234:	462a      	movgt	r2, r5
 800d236:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d23a:	465a      	movle	r2, fp
 800d23c:	462f      	mov	r7, r5
 800d23e:	46d9      	mov	r9, fp
 800d240:	bfcc      	ite	gt
 800d242:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d246:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d24a:	464b      	mov	r3, r9
 800d24c:	4652      	mov	r2, sl
 800d24e:	4620      	mov	r0, r4
 800d250:	4639      	mov	r1, r7
 800d252:	f7f3 fb13 	bl	800087c <__aeabi_ddiv>
 800d256:	ec41 0b10 	vmov	d0, r0, r1
 800d25a:	b005      	add	sp, #20
 800d25c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d260 <__copybits>:
 800d260:	3901      	subs	r1, #1
 800d262:	b570      	push	{r4, r5, r6, lr}
 800d264:	1149      	asrs	r1, r1, #5
 800d266:	6914      	ldr	r4, [r2, #16]
 800d268:	3101      	adds	r1, #1
 800d26a:	f102 0314 	add.w	r3, r2, #20
 800d26e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d272:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d276:	1f05      	subs	r5, r0, #4
 800d278:	42a3      	cmp	r3, r4
 800d27a:	d30c      	bcc.n	800d296 <__copybits+0x36>
 800d27c:	1aa3      	subs	r3, r4, r2
 800d27e:	3b11      	subs	r3, #17
 800d280:	f023 0303 	bic.w	r3, r3, #3
 800d284:	3211      	adds	r2, #17
 800d286:	42a2      	cmp	r2, r4
 800d288:	bf88      	it	hi
 800d28a:	2300      	movhi	r3, #0
 800d28c:	4418      	add	r0, r3
 800d28e:	2300      	movs	r3, #0
 800d290:	4288      	cmp	r0, r1
 800d292:	d305      	bcc.n	800d2a0 <__copybits+0x40>
 800d294:	bd70      	pop	{r4, r5, r6, pc}
 800d296:	f853 6b04 	ldr.w	r6, [r3], #4
 800d29a:	f845 6f04 	str.w	r6, [r5, #4]!
 800d29e:	e7eb      	b.n	800d278 <__copybits+0x18>
 800d2a0:	f840 3b04 	str.w	r3, [r0], #4
 800d2a4:	e7f4      	b.n	800d290 <__copybits+0x30>

0800d2a6 <__any_on>:
 800d2a6:	f100 0214 	add.w	r2, r0, #20
 800d2aa:	6900      	ldr	r0, [r0, #16]
 800d2ac:	114b      	asrs	r3, r1, #5
 800d2ae:	4298      	cmp	r0, r3
 800d2b0:	b510      	push	{r4, lr}
 800d2b2:	db11      	blt.n	800d2d8 <__any_on+0x32>
 800d2b4:	dd0a      	ble.n	800d2cc <__any_on+0x26>
 800d2b6:	f011 011f 	ands.w	r1, r1, #31
 800d2ba:	d007      	beq.n	800d2cc <__any_on+0x26>
 800d2bc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d2c0:	fa24 f001 	lsr.w	r0, r4, r1
 800d2c4:	fa00 f101 	lsl.w	r1, r0, r1
 800d2c8:	428c      	cmp	r4, r1
 800d2ca:	d10b      	bne.n	800d2e4 <__any_on+0x3e>
 800d2cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d2d0:	4293      	cmp	r3, r2
 800d2d2:	d803      	bhi.n	800d2dc <__any_on+0x36>
 800d2d4:	2000      	movs	r0, #0
 800d2d6:	bd10      	pop	{r4, pc}
 800d2d8:	4603      	mov	r3, r0
 800d2da:	e7f7      	b.n	800d2cc <__any_on+0x26>
 800d2dc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d2e0:	2900      	cmp	r1, #0
 800d2e2:	d0f5      	beq.n	800d2d0 <__any_on+0x2a>
 800d2e4:	2001      	movs	r0, #1
 800d2e6:	e7f6      	b.n	800d2d6 <__any_on+0x30>

0800d2e8 <__ascii_wctomb>:
 800d2e8:	4603      	mov	r3, r0
 800d2ea:	4608      	mov	r0, r1
 800d2ec:	b141      	cbz	r1, 800d300 <__ascii_wctomb+0x18>
 800d2ee:	2aff      	cmp	r2, #255	@ 0xff
 800d2f0:	d904      	bls.n	800d2fc <__ascii_wctomb+0x14>
 800d2f2:	228a      	movs	r2, #138	@ 0x8a
 800d2f4:	601a      	str	r2, [r3, #0]
 800d2f6:	f04f 30ff 	mov.w	r0, #4294967295
 800d2fa:	4770      	bx	lr
 800d2fc:	700a      	strb	r2, [r1, #0]
 800d2fe:	2001      	movs	r0, #1
 800d300:	4770      	bx	lr
	...

0800d304 <__sflush_r>:
 800d304:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d30c:	0716      	lsls	r6, r2, #28
 800d30e:	4605      	mov	r5, r0
 800d310:	460c      	mov	r4, r1
 800d312:	d454      	bmi.n	800d3be <__sflush_r+0xba>
 800d314:	684b      	ldr	r3, [r1, #4]
 800d316:	2b00      	cmp	r3, #0
 800d318:	dc02      	bgt.n	800d320 <__sflush_r+0x1c>
 800d31a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	dd48      	ble.n	800d3b2 <__sflush_r+0xae>
 800d320:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d322:	2e00      	cmp	r6, #0
 800d324:	d045      	beq.n	800d3b2 <__sflush_r+0xae>
 800d326:	2300      	movs	r3, #0
 800d328:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d32c:	682f      	ldr	r7, [r5, #0]
 800d32e:	6a21      	ldr	r1, [r4, #32]
 800d330:	602b      	str	r3, [r5, #0]
 800d332:	d030      	beq.n	800d396 <__sflush_r+0x92>
 800d334:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d336:	89a3      	ldrh	r3, [r4, #12]
 800d338:	0759      	lsls	r1, r3, #29
 800d33a:	d505      	bpl.n	800d348 <__sflush_r+0x44>
 800d33c:	6863      	ldr	r3, [r4, #4]
 800d33e:	1ad2      	subs	r2, r2, r3
 800d340:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d342:	b10b      	cbz	r3, 800d348 <__sflush_r+0x44>
 800d344:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d346:	1ad2      	subs	r2, r2, r3
 800d348:	2300      	movs	r3, #0
 800d34a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d34c:	6a21      	ldr	r1, [r4, #32]
 800d34e:	4628      	mov	r0, r5
 800d350:	47b0      	blx	r6
 800d352:	1c43      	adds	r3, r0, #1
 800d354:	89a3      	ldrh	r3, [r4, #12]
 800d356:	d106      	bne.n	800d366 <__sflush_r+0x62>
 800d358:	6829      	ldr	r1, [r5, #0]
 800d35a:	291d      	cmp	r1, #29
 800d35c:	d82b      	bhi.n	800d3b6 <__sflush_r+0xb2>
 800d35e:	4a2a      	ldr	r2, [pc, #168]	@ (800d408 <__sflush_r+0x104>)
 800d360:	410a      	asrs	r2, r1
 800d362:	07d6      	lsls	r6, r2, #31
 800d364:	d427      	bmi.n	800d3b6 <__sflush_r+0xb2>
 800d366:	2200      	movs	r2, #0
 800d368:	6062      	str	r2, [r4, #4]
 800d36a:	04d9      	lsls	r1, r3, #19
 800d36c:	6922      	ldr	r2, [r4, #16]
 800d36e:	6022      	str	r2, [r4, #0]
 800d370:	d504      	bpl.n	800d37c <__sflush_r+0x78>
 800d372:	1c42      	adds	r2, r0, #1
 800d374:	d101      	bne.n	800d37a <__sflush_r+0x76>
 800d376:	682b      	ldr	r3, [r5, #0]
 800d378:	b903      	cbnz	r3, 800d37c <__sflush_r+0x78>
 800d37a:	6560      	str	r0, [r4, #84]	@ 0x54
 800d37c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d37e:	602f      	str	r7, [r5, #0]
 800d380:	b1b9      	cbz	r1, 800d3b2 <__sflush_r+0xae>
 800d382:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d386:	4299      	cmp	r1, r3
 800d388:	d002      	beq.n	800d390 <__sflush_r+0x8c>
 800d38a:	4628      	mov	r0, r5
 800d38c:	f7fe ff64 	bl	800c258 <_free_r>
 800d390:	2300      	movs	r3, #0
 800d392:	6363      	str	r3, [r4, #52]	@ 0x34
 800d394:	e00d      	b.n	800d3b2 <__sflush_r+0xae>
 800d396:	2301      	movs	r3, #1
 800d398:	4628      	mov	r0, r5
 800d39a:	47b0      	blx	r6
 800d39c:	4602      	mov	r2, r0
 800d39e:	1c50      	adds	r0, r2, #1
 800d3a0:	d1c9      	bne.n	800d336 <__sflush_r+0x32>
 800d3a2:	682b      	ldr	r3, [r5, #0]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d0c6      	beq.n	800d336 <__sflush_r+0x32>
 800d3a8:	2b1d      	cmp	r3, #29
 800d3aa:	d001      	beq.n	800d3b0 <__sflush_r+0xac>
 800d3ac:	2b16      	cmp	r3, #22
 800d3ae:	d11e      	bne.n	800d3ee <__sflush_r+0xea>
 800d3b0:	602f      	str	r7, [r5, #0]
 800d3b2:	2000      	movs	r0, #0
 800d3b4:	e022      	b.n	800d3fc <__sflush_r+0xf8>
 800d3b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d3ba:	b21b      	sxth	r3, r3
 800d3bc:	e01b      	b.n	800d3f6 <__sflush_r+0xf2>
 800d3be:	690f      	ldr	r7, [r1, #16]
 800d3c0:	2f00      	cmp	r7, #0
 800d3c2:	d0f6      	beq.n	800d3b2 <__sflush_r+0xae>
 800d3c4:	0793      	lsls	r3, r2, #30
 800d3c6:	680e      	ldr	r6, [r1, #0]
 800d3c8:	bf08      	it	eq
 800d3ca:	694b      	ldreq	r3, [r1, #20]
 800d3cc:	600f      	str	r7, [r1, #0]
 800d3ce:	bf18      	it	ne
 800d3d0:	2300      	movne	r3, #0
 800d3d2:	eba6 0807 	sub.w	r8, r6, r7
 800d3d6:	608b      	str	r3, [r1, #8]
 800d3d8:	f1b8 0f00 	cmp.w	r8, #0
 800d3dc:	dde9      	ble.n	800d3b2 <__sflush_r+0xae>
 800d3de:	6a21      	ldr	r1, [r4, #32]
 800d3e0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d3e2:	4643      	mov	r3, r8
 800d3e4:	463a      	mov	r2, r7
 800d3e6:	4628      	mov	r0, r5
 800d3e8:	47b0      	blx	r6
 800d3ea:	2800      	cmp	r0, #0
 800d3ec:	dc08      	bgt.n	800d400 <__sflush_r+0xfc>
 800d3ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d3f6:	81a3      	strh	r3, [r4, #12]
 800d3f8:	f04f 30ff 	mov.w	r0, #4294967295
 800d3fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d400:	4407      	add	r7, r0
 800d402:	eba8 0800 	sub.w	r8, r8, r0
 800d406:	e7e7      	b.n	800d3d8 <__sflush_r+0xd4>
 800d408:	dfbffffe 	.word	0xdfbffffe

0800d40c <_fflush_r>:
 800d40c:	b538      	push	{r3, r4, r5, lr}
 800d40e:	690b      	ldr	r3, [r1, #16]
 800d410:	4605      	mov	r5, r0
 800d412:	460c      	mov	r4, r1
 800d414:	b913      	cbnz	r3, 800d41c <_fflush_r+0x10>
 800d416:	2500      	movs	r5, #0
 800d418:	4628      	mov	r0, r5
 800d41a:	bd38      	pop	{r3, r4, r5, pc}
 800d41c:	b118      	cbz	r0, 800d426 <_fflush_r+0x1a>
 800d41e:	6a03      	ldr	r3, [r0, #32]
 800d420:	b90b      	cbnz	r3, 800d426 <_fflush_r+0x1a>
 800d422:	f7fe fde9 	bl	800bff8 <__sinit>
 800d426:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d0f3      	beq.n	800d416 <_fflush_r+0xa>
 800d42e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d430:	07d0      	lsls	r0, r2, #31
 800d432:	d404      	bmi.n	800d43e <_fflush_r+0x32>
 800d434:	0599      	lsls	r1, r3, #22
 800d436:	d402      	bmi.n	800d43e <_fflush_r+0x32>
 800d438:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d43a:	f7fe fef2 	bl	800c222 <__retarget_lock_acquire_recursive>
 800d43e:	4628      	mov	r0, r5
 800d440:	4621      	mov	r1, r4
 800d442:	f7ff ff5f 	bl	800d304 <__sflush_r>
 800d446:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d448:	07da      	lsls	r2, r3, #31
 800d44a:	4605      	mov	r5, r0
 800d44c:	d4e4      	bmi.n	800d418 <_fflush_r+0xc>
 800d44e:	89a3      	ldrh	r3, [r4, #12]
 800d450:	059b      	lsls	r3, r3, #22
 800d452:	d4e1      	bmi.n	800d418 <_fflush_r+0xc>
 800d454:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d456:	f7fe fee5 	bl	800c224 <__retarget_lock_release_recursive>
 800d45a:	e7dd      	b.n	800d418 <_fflush_r+0xc>

0800d45c <__assert_func>:
 800d45c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d45e:	4614      	mov	r4, r2
 800d460:	461a      	mov	r2, r3
 800d462:	4b09      	ldr	r3, [pc, #36]	@ (800d488 <__assert_func+0x2c>)
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	4605      	mov	r5, r0
 800d468:	68d8      	ldr	r0, [r3, #12]
 800d46a:	b954      	cbnz	r4, 800d482 <__assert_func+0x26>
 800d46c:	4b07      	ldr	r3, [pc, #28]	@ (800d48c <__assert_func+0x30>)
 800d46e:	461c      	mov	r4, r3
 800d470:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d474:	9100      	str	r1, [sp, #0]
 800d476:	462b      	mov	r3, r5
 800d478:	4905      	ldr	r1, [pc, #20]	@ (800d490 <__assert_func+0x34>)
 800d47a:	f000 f821 	bl	800d4c0 <fiprintf>
 800d47e:	f000 f831 	bl	800d4e4 <abort>
 800d482:	4b04      	ldr	r3, [pc, #16]	@ (800d494 <__assert_func+0x38>)
 800d484:	e7f4      	b.n	800d470 <__assert_func+0x14>
 800d486:	bf00      	nop
 800d488:	200001dc 	.word	0x200001dc
 800d48c:	0800f344 	.word	0x0800f344
 800d490:	0800f316 	.word	0x0800f316
 800d494:	0800f309 	.word	0x0800f309

0800d498 <_calloc_r>:
 800d498:	b570      	push	{r4, r5, r6, lr}
 800d49a:	fba1 5402 	umull	r5, r4, r1, r2
 800d49e:	b93c      	cbnz	r4, 800d4b0 <_calloc_r+0x18>
 800d4a0:	4629      	mov	r1, r5
 800d4a2:	f7fd fe83 	bl	800b1ac <_malloc_r>
 800d4a6:	4606      	mov	r6, r0
 800d4a8:	b928      	cbnz	r0, 800d4b6 <_calloc_r+0x1e>
 800d4aa:	2600      	movs	r6, #0
 800d4ac:	4630      	mov	r0, r6
 800d4ae:	bd70      	pop	{r4, r5, r6, pc}
 800d4b0:	220c      	movs	r2, #12
 800d4b2:	6002      	str	r2, [r0, #0]
 800d4b4:	e7f9      	b.n	800d4aa <_calloc_r+0x12>
 800d4b6:	462a      	mov	r2, r5
 800d4b8:	4621      	mov	r1, r4
 800d4ba:	f7fe fe16 	bl	800c0ea <memset>
 800d4be:	e7f5      	b.n	800d4ac <_calloc_r+0x14>

0800d4c0 <fiprintf>:
 800d4c0:	b40e      	push	{r1, r2, r3}
 800d4c2:	b503      	push	{r0, r1, lr}
 800d4c4:	4601      	mov	r1, r0
 800d4c6:	ab03      	add	r3, sp, #12
 800d4c8:	4805      	ldr	r0, [pc, #20]	@ (800d4e0 <fiprintf+0x20>)
 800d4ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4ce:	6800      	ldr	r0, [r0, #0]
 800d4d0:	9301      	str	r3, [sp, #4]
 800d4d2:	f000 f837 	bl	800d544 <_vfiprintf_r>
 800d4d6:	b002      	add	sp, #8
 800d4d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d4dc:	b003      	add	sp, #12
 800d4de:	4770      	bx	lr
 800d4e0:	200001dc 	.word	0x200001dc

0800d4e4 <abort>:
 800d4e4:	b508      	push	{r3, lr}
 800d4e6:	2006      	movs	r0, #6
 800d4e8:	f000 fb8e 	bl	800dc08 <raise>
 800d4ec:	2001      	movs	r0, #1
 800d4ee:	f7f8 fab5 	bl	8005a5c <_exit>

0800d4f2 <__sfputc_r>:
 800d4f2:	6893      	ldr	r3, [r2, #8]
 800d4f4:	3b01      	subs	r3, #1
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	b410      	push	{r4}
 800d4fa:	6093      	str	r3, [r2, #8]
 800d4fc:	da08      	bge.n	800d510 <__sfputc_r+0x1e>
 800d4fe:	6994      	ldr	r4, [r2, #24]
 800d500:	42a3      	cmp	r3, r4
 800d502:	db01      	blt.n	800d508 <__sfputc_r+0x16>
 800d504:	290a      	cmp	r1, #10
 800d506:	d103      	bne.n	800d510 <__sfputc_r+0x1e>
 800d508:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d50c:	f000 bac0 	b.w	800da90 <__swbuf_r>
 800d510:	6813      	ldr	r3, [r2, #0]
 800d512:	1c58      	adds	r0, r3, #1
 800d514:	6010      	str	r0, [r2, #0]
 800d516:	7019      	strb	r1, [r3, #0]
 800d518:	4608      	mov	r0, r1
 800d51a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d51e:	4770      	bx	lr

0800d520 <__sfputs_r>:
 800d520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d522:	4606      	mov	r6, r0
 800d524:	460f      	mov	r7, r1
 800d526:	4614      	mov	r4, r2
 800d528:	18d5      	adds	r5, r2, r3
 800d52a:	42ac      	cmp	r4, r5
 800d52c:	d101      	bne.n	800d532 <__sfputs_r+0x12>
 800d52e:	2000      	movs	r0, #0
 800d530:	e007      	b.n	800d542 <__sfputs_r+0x22>
 800d532:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d536:	463a      	mov	r2, r7
 800d538:	4630      	mov	r0, r6
 800d53a:	f7ff ffda 	bl	800d4f2 <__sfputc_r>
 800d53e:	1c43      	adds	r3, r0, #1
 800d540:	d1f3      	bne.n	800d52a <__sfputs_r+0xa>
 800d542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d544 <_vfiprintf_r>:
 800d544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d548:	460d      	mov	r5, r1
 800d54a:	b09d      	sub	sp, #116	@ 0x74
 800d54c:	4614      	mov	r4, r2
 800d54e:	4698      	mov	r8, r3
 800d550:	4606      	mov	r6, r0
 800d552:	b118      	cbz	r0, 800d55c <_vfiprintf_r+0x18>
 800d554:	6a03      	ldr	r3, [r0, #32]
 800d556:	b90b      	cbnz	r3, 800d55c <_vfiprintf_r+0x18>
 800d558:	f7fe fd4e 	bl	800bff8 <__sinit>
 800d55c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d55e:	07d9      	lsls	r1, r3, #31
 800d560:	d405      	bmi.n	800d56e <_vfiprintf_r+0x2a>
 800d562:	89ab      	ldrh	r3, [r5, #12]
 800d564:	059a      	lsls	r2, r3, #22
 800d566:	d402      	bmi.n	800d56e <_vfiprintf_r+0x2a>
 800d568:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d56a:	f7fe fe5a 	bl	800c222 <__retarget_lock_acquire_recursive>
 800d56e:	89ab      	ldrh	r3, [r5, #12]
 800d570:	071b      	lsls	r3, r3, #28
 800d572:	d501      	bpl.n	800d578 <_vfiprintf_r+0x34>
 800d574:	692b      	ldr	r3, [r5, #16]
 800d576:	b99b      	cbnz	r3, 800d5a0 <_vfiprintf_r+0x5c>
 800d578:	4629      	mov	r1, r5
 800d57a:	4630      	mov	r0, r6
 800d57c:	f000 fac6 	bl	800db0c <__swsetup_r>
 800d580:	b170      	cbz	r0, 800d5a0 <_vfiprintf_r+0x5c>
 800d582:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d584:	07dc      	lsls	r4, r3, #31
 800d586:	d504      	bpl.n	800d592 <_vfiprintf_r+0x4e>
 800d588:	f04f 30ff 	mov.w	r0, #4294967295
 800d58c:	b01d      	add	sp, #116	@ 0x74
 800d58e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d592:	89ab      	ldrh	r3, [r5, #12]
 800d594:	0598      	lsls	r0, r3, #22
 800d596:	d4f7      	bmi.n	800d588 <_vfiprintf_r+0x44>
 800d598:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d59a:	f7fe fe43 	bl	800c224 <__retarget_lock_release_recursive>
 800d59e:	e7f3      	b.n	800d588 <_vfiprintf_r+0x44>
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d5a4:	2320      	movs	r3, #32
 800d5a6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d5aa:	f8cd 800c 	str.w	r8, [sp, #12]
 800d5ae:	2330      	movs	r3, #48	@ 0x30
 800d5b0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d760 <_vfiprintf_r+0x21c>
 800d5b4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d5b8:	f04f 0901 	mov.w	r9, #1
 800d5bc:	4623      	mov	r3, r4
 800d5be:	469a      	mov	sl, r3
 800d5c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d5c4:	b10a      	cbz	r2, 800d5ca <_vfiprintf_r+0x86>
 800d5c6:	2a25      	cmp	r2, #37	@ 0x25
 800d5c8:	d1f9      	bne.n	800d5be <_vfiprintf_r+0x7a>
 800d5ca:	ebba 0b04 	subs.w	fp, sl, r4
 800d5ce:	d00b      	beq.n	800d5e8 <_vfiprintf_r+0xa4>
 800d5d0:	465b      	mov	r3, fp
 800d5d2:	4622      	mov	r2, r4
 800d5d4:	4629      	mov	r1, r5
 800d5d6:	4630      	mov	r0, r6
 800d5d8:	f7ff ffa2 	bl	800d520 <__sfputs_r>
 800d5dc:	3001      	adds	r0, #1
 800d5de:	f000 80a7 	beq.w	800d730 <_vfiprintf_r+0x1ec>
 800d5e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d5e4:	445a      	add	r2, fp
 800d5e6:	9209      	str	r2, [sp, #36]	@ 0x24
 800d5e8:	f89a 3000 	ldrb.w	r3, [sl]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	f000 809f 	beq.w	800d730 <_vfiprintf_r+0x1ec>
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	f04f 32ff 	mov.w	r2, #4294967295
 800d5f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d5fc:	f10a 0a01 	add.w	sl, sl, #1
 800d600:	9304      	str	r3, [sp, #16]
 800d602:	9307      	str	r3, [sp, #28]
 800d604:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d608:	931a      	str	r3, [sp, #104]	@ 0x68
 800d60a:	4654      	mov	r4, sl
 800d60c:	2205      	movs	r2, #5
 800d60e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d612:	4853      	ldr	r0, [pc, #332]	@ (800d760 <_vfiprintf_r+0x21c>)
 800d614:	f7f2 fdfc 	bl	8000210 <memchr>
 800d618:	9a04      	ldr	r2, [sp, #16]
 800d61a:	b9d8      	cbnz	r0, 800d654 <_vfiprintf_r+0x110>
 800d61c:	06d1      	lsls	r1, r2, #27
 800d61e:	bf44      	itt	mi
 800d620:	2320      	movmi	r3, #32
 800d622:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d626:	0713      	lsls	r3, r2, #28
 800d628:	bf44      	itt	mi
 800d62a:	232b      	movmi	r3, #43	@ 0x2b
 800d62c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d630:	f89a 3000 	ldrb.w	r3, [sl]
 800d634:	2b2a      	cmp	r3, #42	@ 0x2a
 800d636:	d015      	beq.n	800d664 <_vfiprintf_r+0x120>
 800d638:	9a07      	ldr	r2, [sp, #28]
 800d63a:	4654      	mov	r4, sl
 800d63c:	2000      	movs	r0, #0
 800d63e:	f04f 0c0a 	mov.w	ip, #10
 800d642:	4621      	mov	r1, r4
 800d644:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d648:	3b30      	subs	r3, #48	@ 0x30
 800d64a:	2b09      	cmp	r3, #9
 800d64c:	d94b      	bls.n	800d6e6 <_vfiprintf_r+0x1a2>
 800d64e:	b1b0      	cbz	r0, 800d67e <_vfiprintf_r+0x13a>
 800d650:	9207      	str	r2, [sp, #28]
 800d652:	e014      	b.n	800d67e <_vfiprintf_r+0x13a>
 800d654:	eba0 0308 	sub.w	r3, r0, r8
 800d658:	fa09 f303 	lsl.w	r3, r9, r3
 800d65c:	4313      	orrs	r3, r2
 800d65e:	9304      	str	r3, [sp, #16]
 800d660:	46a2      	mov	sl, r4
 800d662:	e7d2      	b.n	800d60a <_vfiprintf_r+0xc6>
 800d664:	9b03      	ldr	r3, [sp, #12]
 800d666:	1d19      	adds	r1, r3, #4
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	9103      	str	r1, [sp, #12]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	bfbb      	ittet	lt
 800d670:	425b      	neglt	r3, r3
 800d672:	f042 0202 	orrlt.w	r2, r2, #2
 800d676:	9307      	strge	r3, [sp, #28]
 800d678:	9307      	strlt	r3, [sp, #28]
 800d67a:	bfb8      	it	lt
 800d67c:	9204      	strlt	r2, [sp, #16]
 800d67e:	7823      	ldrb	r3, [r4, #0]
 800d680:	2b2e      	cmp	r3, #46	@ 0x2e
 800d682:	d10a      	bne.n	800d69a <_vfiprintf_r+0x156>
 800d684:	7863      	ldrb	r3, [r4, #1]
 800d686:	2b2a      	cmp	r3, #42	@ 0x2a
 800d688:	d132      	bne.n	800d6f0 <_vfiprintf_r+0x1ac>
 800d68a:	9b03      	ldr	r3, [sp, #12]
 800d68c:	1d1a      	adds	r2, r3, #4
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	9203      	str	r2, [sp, #12]
 800d692:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d696:	3402      	adds	r4, #2
 800d698:	9305      	str	r3, [sp, #20]
 800d69a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d770 <_vfiprintf_r+0x22c>
 800d69e:	7821      	ldrb	r1, [r4, #0]
 800d6a0:	2203      	movs	r2, #3
 800d6a2:	4650      	mov	r0, sl
 800d6a4:	f7f2 fdb4 	bl	8000210 <memchr>
 800d6a8:	b138      	cbz	r0, 800d6ba <_vfiprintf_r+0x176>
 800d6aa:	9b04      	ldr	r3, [sp, #16]
 800d6ac:	eba0 000a 	sub.w	r0, r0, sl
 800d6b0:	2240      	movs	r2, #64	@ 0x40
 800d6b2:	4082      	lsls	r2, r0
 800d6b4:	4313      	orrs	r3, r2
 800d6b6:	3401      	adds	r4, #1
 800d6b8:	9304      	str	r3, [sp, #16]
 800d6ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6be:	4829      	ldr	r0, [pc, #164]	@ (800d764 <_vfiprintf_r+0x220>)
 800d6c0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d6c4:	2206      	movs	r2, #6
 800d6c6:	f7f2 fda3 	bl	8000210 <memchr>
 800d6ca:	2800      	cmp	r0, #0
 800d6cc:	d03f      	beq.n	800d74e <_vfiprintf_r+0x20a>
 800d6ce:	4b26      	ldr	r3, [pc, #152]	@ (800d768 <_vfiprintf_r+0x224>)
 800d6d0:	bb1b      	cbnz	r3, 800d71a <_vfiprintf_r+0x1d6>
 800d6d2:	9b03      	ldr	r3, [sp, #12]
 800d6d4:	3307      	adds	r3, #7
 800d6d6:	f023 0307 	bic.w	r3, r3, #7
 800d6da:	3308      	adds	r3, #8
 800d6dc:	9303      	str	r3, [sp, #12]
 800d6de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6e0:	443b      	add	r3, r7
 800d6e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d6e4:	e76a      	b.n	800d5bc <_vfiprintf_r+0x78>
 800d6e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800d6ea:	460c      	mov	r4, r1
 800d6ec:	2001      	movs	r0, #1
 800d6ee:	e7a8      	b.n	800d642 <_vfiprintf_r+0xfe>
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	3401      	adds	r4, #1
 800d6f4:	9305      	str	r3, [sp, #20]
 800d6f6:	4619      	mov	r1, r3
 800d6f8:	f04f 0c0a 	mov.w	ip, #10
 800d6fc:	4620      	mov	r0, r4
 800d6fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d702:	3a30      	subs	r2, #48	@ 0x30
 800d704:	2a09      	cmp	r2, #9
 800d706:	d903      	bls.n	800d710 <_vfiprintf_r+0x1cc>
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d0c6      	beq.n	800d69a <_vfiprintf_r+0x156>
 800d70c:	9105      	str	r1, [sp, #20]
 800d70e:	e7c4      	b.n	800d69a <_vfiprintf_r+0x156>
 800d710:	fb0c 2101 	mla	r1, ip, r1, r2
 800d714:	4604      	mov	r4, r0
 800d716:	2301      	movs	r3, #1
 800d718:	e7f0      	b.n	800d6fc <_vfiprintf_r+0x1b8>
 800d71a:	ab03      	add	r3, sp, #12
 800d71c:	9300      	str	r3, [sp, #0]
 800d71e:	462a      	mov	r2, r5
 800d720:	4b12      	ldr	r3, [pc, #72]	@ (800d76c <_vfiprintf_r+0x228>)
 800d722:	a904      	add	r1, sp, #16
 800d724:	4630      	mov	r0, r6
 800d726:	f3af 8000 	nop.w
 800d72a:	4607      	mov	r7, r0
 800d72c:	1c78      	adds	r0, r7, #1
 800d72e:	d1d6      	bne.n	800d6de <_vfiprintf_r+0x19a>
 800d730:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d732:	07d9      	lsls	r1, r3, #31
 800d734:	d405      	bmi.n	800d742 <_vfiprintf_r+0x1fe>
 800d736:	89ab      	ldrh	r3, [r5, #12]
 800d738:	059a      	lsls	r2, r3, #22
 800d73a:	d402      	bmi.n	800d742 <_vfiprintf_r+0x1fe>
 800d73c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d73e:	f7fe fd71 	bl	800c224 <__retarget_lock_release_recursive>
 800d742:	89ab      	ldrh	r3, [r5, #12]
 800d744:	065b      	lsls	r3, r3, #25
 800d746:	f53f af1f 	bmi.w	800d588 <_vfiprintf_r+0x44>
 800d74a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d74c:	e71e      	b.n	800d58c <_vfiprintf_r+0x48>
 800d74e:	ab03      	add	r3, sp, #12
 800d750:	9300      	str	r3, [sp, #0]
 800d752:	462a      	mov	r2, r5
 800d754:	4b05      	ldr	r3, [pc, #20]	@ (800d76c <_vfiprintf_r+0x228>)
 800d756:	a904      	add	r1, sp, #16
 800d758:	4630      	mov	r0, r6
 800d75a:	f000 f879 	bl	800d850 <_printf_i>
 800d75e:	e7e4      	b.n	800d72a <_vfiprintf_r+0x1e6>
 800d760:	0800f345 	.word	0x0800f345
 800d764:	0800f34f 	.word	0x0800f34f
 800d768:	00000000 	.word	0x00000000
 800d76c:	0800d521 	.word	0x0800d521
 800d770:	0800f34b 	.word	0x0800f34b

0800d774 <_printf_common>:
 800d774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d778:	4616      	mov	r6, r2
 800d77a:	4698      	mov	r8, r3
 800d77c:	688a      	ldr	r2, [r1, #8]
 800d77e:	690b      	ldr	r3, [r1, #16]
 800d780:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d784:	4293      	cmp	r3, r2
 800d786:	bfb8      	it	lt
 800d788:	4613      	movlt	r3, r2
 800d78a:	6033      	str	r3, [r6, #0]
 800d78c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d790:	4607      	mov	r7, r0
 800d792:	460c      	mov	r4, r1
 800d794:	b10a      	cbz	r2, 800d79a <_printf_common+0x26>
 800d796:	3301      	adds	r3, #1
 800d798:	6033      	str	r3, [r6, #0]
 800d79a:	6823      	ldr	r3, [r4, #0]
 800d79c:	0699      	lsls	r1, r3, #26
 800d79e:	bf42      	ittt	mi
 800d7a0:	6833      	ldrmi	r3, [r6, #0]
 800d7a2:	3302      	addmi	r3, #2
 800d7a4:	6033      	strmi	r3, [r6, #0]
 800d7a6:	6825      	ldr	r5, [r4, #0]
 800d7a8:	f015 0506 	ands.w	r5, r5, #6
 800d7ac:	d106      	bne.n	800d7bc <_printf_common+0x48>
 800d7ae:	f104 0a19 	add.w	sl, r4, #25
 800d7b2:	68e3      	ldr	r3, [r4, #12]
 800d7b4:	6832      	ldr	r2, [r6, #0]
 800d7b6:	1a9b      	subs	r3, r3, r2
 800d7b8:	42ab      	cmp	r3, r5
 800d7ba:	dc26      	bgt.n	800d80a <_printf_common+0x96>
 800d7bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d7c0:	6822      	ldr	r2, [r4, #0]
 800d7c2:	3b00      	subs	r3, #0
 800d7c4:	bf18      	it	ne
 800d7c6:	2301      	movne	r3, #1
 800d7c8:	0692      	lsls	r2, r2, #26
 800d7ca:	d42b      	bmi.n	800d824 <_printf_common+0xb0>
 800d7cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d7d0:	4641      	mov	r1, r8
 800d7d2:	4638      	mov	r0, r7
 800d7d4:	47c8      	blx	r9
 800d7d6:	3001      	adds	r0, #1
 800d7d8:	d01e      	beq.n	800d818 <_printf_common+0xa4>
 800d7da:	6823      	ldr	r3, [r4, #0]
 800d7dc:	6922      	ldr	r2, [r4, #16]
 800d7de:	f003 0306 	and.w	r3, r3, #6
 800d7e2:	2b04      	cmp	r3, #4
 800d7e4:	bf02      	ittt	eq
 800d7e6:	68e5      	ldreq	r5, [r4, #12]
 800d7e8:	6833      	ldreq	r3, [r6, #0]
 800d7ea:	1aed      	subeq	r5, r5, r3
 800d7ec:	68a3      	ldr	r3, [r4, #8]
 800d7ee:	bf0c      	ite	eq
 800d7f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d7f4:	2500      	movne	r5, #0
 800d7f6:	4293      	cmp	r3, r2
 800d7f8:	bfc4      	itt	gt
 800d7fa:	1a9b      	subgt	r3, r3, r2
 800d7fc:	18ed      	addgt	r5, r5, r3
 800d7fe:	2600      	movs	r6, #0
 800d800:	341a      	adds	r4, #26
 800d802:	42b5      	cmp	r5, r6
 800d804:	d11a      	bne.n	800d83c <_printf_common+0xc8>
 800d806:	2000      	movs	r0, #0
 800d808:	e008      	b.n	800d81c <_printf_common+0xa8>
 800d80a:	2301      	movs	r3, #1
 800d80c:	4652      	mov	r2, sl
 800d80e:	4641      	mov	r1, r8
 800d810:	4638      	mov	r0, r7
 800d812:	47c8      	blx	r9
 800d814:	3001      	adds	r0, #1
 800d816:	d103      	bne.n	800d820 <_printf_common+0xac>
 800d818:	f04f 30ff 	mov.w	r0, #4294967295
 800d81c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d820:	3501      	adds	r5, #1
 800d822:	e7c6      	b.n	800d7b2 <_printf_common+0x3e>
 800d824:	18e1      	adds	r1, r4, r3
 800d826:	1c5a      	adds	r2, r3, #1
 800d828:	2030      	movs	r0, #48	@ 0x30
 800d82a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d82e:	4422      	add	r2, r4
 800d830:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d834:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d838:	3302      	adds	r3, #2
 800d83a:	e7c7      	b.n	800d7cc <_printf_common+0x58>
 800d83c:	2301      	movs	r3, #1
 800d83e:	4622      	mov	r2, r4
 800d840:	4641      	mov	r1, r8
 800d842:	4638      	mov	r0, r7
 800d844:	47c8      	blx	r9
 800d846:	3001      	adds	r0, #1
 800d848:	d0e6      	beq.n	800d818 <_printf_common+0xa4>
 800d84a:	3601      	adds	r6, #1
 800d84c:	e7d9      	b.n	800d802 <_printf_common+0x8e>
	...

0800d850 <_printf_i>:
 800d850:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d854:	7e0f      	ldrb	r7, [r1, #24]
 800d856:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d858:	2f78      	cmp	r7, #120	@ 0x78
 800d85a:	4691      	mov	r9, r2
 800d85c:	4680      	mov	r8, r0
 800d85e:	460c      	mov	r4, r1
 800d860:	469a      	mov	sl, r3
 800d862:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d866:	d807      	bhi.n	800d878 <_printf_i+0x28>
 800d868:	2f62      	cmp	r7, #98	@ 0x62
 800d86a:	d80a      	bhi.n	800d882 <_printf_i+0x32>
 800d86c:	2f00      	cmp	r7, #0
 800d86e:	f000 80d2 	beq.w	800da16 <_printf_i+0x1c6>
 800d872:	2f58      	cmp	r7, #88	@ 0x58
 800d874:	f000 80b9 	beq.w	800d9ea <_printf_i+0x19a>
 800d878:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d87c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d880:	e03a      	b.n	800d8f8 <_printf_i+0xa8>
 800d882:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d886:	2b15      	cmp	r3, #21
 800d888:	d8f6      	bhi.n	800d878 <_printf_i+0x28>
 800d88a:	a101      	add	r1, pc, #4	@ (adr r1, 800d890 <_printf_i+0x40>)
 800d88c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d890:	0800d8e9 	.word	0x0800d8e9
 800d894:	0800d8fd 	.word	0x0800d8fd
 800d898:	0800d879 	.word	0x0800d879
 800d89c:	0800d879 	.word	0x0800d879
 800d8a0:	0800d879 	.word	0x0800d879
 800d8a4:	0800d879 	.word	0x0800d879
 800d8a8:	0800d8fd 	.word	0x0800d8fd
 800d8ac:	0800d879 	.word	0x0800d879
 800d8b0:	0800d879 	.word	0x0800d879
 800d8b4:	0800d879 	.word	0x0800d879
 800d8b8:	0800d879 	.word	0x0800d879
 800d8bc:	0800d9fd 	.word	0x0800d9fd
 800d8c0:	0800d927 	.word	0x0800d927
 800d8c4:	0800d9b7 	.word	0x0800d9b7
 800d8c8:	0800d879 	.word	0x0800d879
 800d8cc:	0800d879 	.word	0x0800d879
 800d8d0:	0800da1f 	.word	0x0800da1f
 800d8d4:	0800d879 	.word	0x0800d879
 800d8d8:	0800d927 	.word	0x0800d927
 800d8dc:	0800d879 	.word	0x0800d879
 800d8e0:	0800d879 	.word	0x0800d879
 800d8e4:	0800d9bf 	.word	0x0800d9bf
 800d8e8:	6833      	ldr	r3, [r6, #0]
 800d8ea:	1d1a      	adds	r2, r3, #4
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	6032      	str	r2, [r6, #0]
 800d8f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d8f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d8f8:	2301      	movs	r3, #1
 800d8fa:	e09d      	b.n	800da38 <_printf_i+0x1e8>
 800d8fc:	6833      	ldr	r3, [r6, #0]
 800d8fe:	6820      	ldr	r0, [r4, #0]
 800d900:	1d19      	adds	r1, r3, #4
 800d902:	6031      	str	r1, [r6, #0]
 800d904:	0606      	lsls	r6, r0, #24
 800d906:	d501      	bpl.n	800d90c <_printf_i+0xbc>
 800d908:	681d      	ldr	r5, [r3, #0]
 800d90a:	e003      	b.n	800d914 <_printf_i+0xc4>
 800d90c:	0645      	lsls	r5, r0, #25
 800d90e:	d5fb      	bpl.n	800d908 <_printf_i+0xb8>
 800d910:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d914:	2d00      	cmp	r5, #0
 800d916:	da03      	bge.n	800d920 <_printf_i+0xd0>
 800d918:	232d      	movs	r3, #45	@ 0x2d
 800d91a:	426d      	negs	r5, r5
 800d91c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d920:	4859      	ldr	r0, [pc, #356]	@ (800da88 <_printf_i+0x238>)
 800d922:	230a      	movs	r3, #10
 800d924:	e011      	b.n	800d94a <_printf_i+0xfa>
 800d926:	6821      	ldr	r1, [r4, #0]
 800d928:	6833      	ldr	r3, [r6, #0]
 800d92a:	0608      	lsls	r0, r1, #24
 800d92c:	f853 5b04 	ldr.w	r5, [r3], #4
 800d930:	d402      	bmi.n	800d938 <_printf_i+0xe8>
 800d932:	0649      	lsls	r1, r1, #25
 800d934:	bf48      	it	mi
 800d936:	b2ad      	uxthmi	r5, r5
 800d938:	2f6f      	cmp	r7, #111	@ 0x6f
 800d93a:	4853      	ldr	r0, [pc, #332]	@ (800da88 <_printf_i+0x238>)
 800d93c:	6033      	str	r3, [r6, #0]
 800d93e:	bf14      	ite	ne
 800d940:	230a      	movne	r3, #10
 800d942:	2308      	moveq	r3, #8
 800d944:	2100      	movs	r1, #0
 800d946:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d94a:	6866      	ldr	r6, [r4, #4]
 800d94c:	60a6      	str	r6, [r4, #8]
 800d94e:	2e00      	cmp	r6, #0
 800d950:	bfa2      	ittt	ge
 800d952:	6821      	ldrge	r1, [r4, #0]
 800d954:	f021 0104 	bicge.w	r1, r1, #4
 800d958:	6021      	strge	r1, [r4, #0]
 800d95a:	b90d      	cbnz	r5, 800d960 <_printf_i+0x110>
 800d95c:	2e00      	cmp	r6, #0
 800d95e:	d04b      	beq.n	800d9f8 <_printf_i+0x1a8>
 800d960:	4616      	mov	r6, r2
 800d962:	fbb5 f1f3 	udiv	r1, r5, r3
 800d966:	fb03 5711 	mls	r7, r3, r1, r5
 800d96a:	5dc7      	ldrb	r7, [r0, r7]
 800d96c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d970:	462f      	mov	r7, r5
 800d972:	42bb      	cmp	r3, r7
 800d974:	460d      	mov	r5, r1
 800d976:	d9f4      	bls.n	800d962 <_printf_i+0x112>
 800d978:	2b08      	cmp	r3, #8
 800d97a:	d10b      	bne.n	800d994 <_printf_i+0x144>
 800d97c:	6823      	ldr	r3, [r4, #0]
 800d97e:	07df      	lsls	r7, r3, #31
 800d980:	d508      	bpl.n	800d994 <_printf_i+0x144>
 800d982:	6923      	ldr	r3, [r4, #16]
 800d984:	6861      	ldr	r1, [r4, #4]
 800d986:	4299      	cmp	r1, r3
 800d988:	bfde      	ittt	le
 800d98a:	2330      	movle	r3, #48	@ 0x30
 800d98c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d990:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d994:	1b92      	subs	r2, r2, r6
 800d996:	6122      	str	r2, [r4, #16]
 800d998:	f8cd a000 	str.w	sl, [sp]
 800d99c:	464b      	mov	r3, r9
 800d99e:	aa03      	add	r2, sp, #12
 800d9a0:	4621      	mov	r1, r4
 800d9a2:	4640      	mov	r0, r8
 800d9a4:	f7ff fee6 	bl	800d774 <_printf_common>
 800d9a8:	3001      	adds	r0, #1
 800d9aa:	d14a      	bne.n	800da42 <_printf_i+0x1f2>
 800d9ac:	f04f 30ff 	mov.w	r0, #4294967295
 800d9b0:	b004      	add	sp, #16
 800d9b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9b6:	6823      	ldr	r3, [r4, #0]
 800d9b8:	f043 0320 	orr.w	r3, r3, #32
 800d9bc:	6023      	str	r3, [r4, #0]
 800d9be:	4833      	ldr	r0, [pc, #204]	@ (800da8c <_printf_i+0x23c>)
 800d9c0:	2778      	movs	r7, #120	@ 0x78
 800d9c2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d9c6:	6823      	ldr	r3, [r4, #0]
 800d9c8:	6831      	ldr	r1, [r6, #0]
 800d9ca:	061f      	lsls	r7, r3, #24
 800d9cc:	f851 5b04 	ldr.w	r5, [r1], #4
 800d9d0:	d402      	bmi.n	800d9d8 <_printf_i+0x188>
 800d9d2:	065f      	lsls	r7, r3, #25
 800d9d4:	bf48      	it	mi
 800d9d6:	b2ad      	uxthmi	r5, r5
 800d9d8:	6031      	str	r1, [r6, #0]
 800d9da:	07d9      	lsls	r1, r3, #31
 800d9dc:	bf44      	itt	mi
 800d9de:	f043 0320 	orrmi.w	r3, r3, #32
 800d9e2:	6023      	strmi	r3, [r4, #0]
 800d9e4:	b11d      	cbz	r5, 800d9ee <_printf_i+0x19e>
 800d9e6:	2310      	movs	r3, #16
 800d9e8:	e7ac      	b.n	800d944 <_printf_i+0xf4>
 800d9ea:	4827      	ldr	r0, [pc, #156]	@ (800da88 <_printf_i+0x238>)
 800d9ec:	e7e9      	b.n	800d9c2 <_printf_i+0x172>
 800d9ee:	6823      	ldr	r3, [r4, #0]
 800d9f0:	f023 0320 	bic.w	r3, r3, #32
 800d9f4:	6023      	str	r3, [r4, #0]
 800d9f6:	e7f6      	b.n	800d9e6 <_printf_i+0x196>
 800d9f8:	4616      	mov	r6, r2
 800d9fa:	e7bd      	b.n	800d978 <_printf_i+0x128>
 800d9fc:	6833      	ldr	r3, [r6, #0]
 800d9fe:	6825      	ldr	r5, [r4, #0]
 800da00:	6961      	ldr	r1, [r4, #20]
 800da02:	1d18      	adds	r0, r3, #4
 800da04:	6030      	str	r0, [r6, #0]
 800da06:	062e      	lsls	r6, r5, #24
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	d501      	bpl.n	800da10 <_printf_i+0x1c0>
 800da0c:	6019      	str	r1, [r3, #0]
 800da0e:	e002      	b.n	800da16 <_printf_i+0x1c6>
 800da10:	0668      	lsls	r0, r5, #25
 800da12:	d5fb      	bpl.n	800da0c <_printf_i+0x1bc>
 800da14:	8019      	strh	r1, [r3, #0]
 800da16:	2300      	movs	r3, #0
 800da18:	6123      	str	r3, [r4, #16]
 800da1a:	4616      	mov	r6, r2
 800da1c:	e7bc      	b.n	800d998 <_printf_i+0x148>
 800da1e:	6833      	ldr	r3, [r6, #0]
 800da20:	1d1a      	adds	r2, r3, #4
 800da22:	6032      	str	r2, [r6, #0]
 800da24:	681e      	ldr	r6, [r3, #0]
 800da26:	6862      	ldr	r2, [r4, #4]
 800da28:	2100      	movs	r1, #0
 800da2a:	4630      	mov	r0, r6
 800da2c:	f7f2 fbf0 	bl	8000210 <memchr>
 800da30:	b108      	cbz	r0, 800da36 <_printf_i+0x1e6>
 800da32:	1b80      	subs	r0, r0, r6
 800da34:	6060      	str	r0, [r4, #4]
 800da36:	6863      	ldr	r3, [r4, #4]
 800da38:	6123      	str	r3, [r4, #16]
 800da3a:	2300      	movs	r3, #0
 800da3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800da40:	e7aa      	b.n	800d998 <_printf_i+0x148>
 800da42:	6923      	ldr	r3, [r4, #16]
 800da44:	4632      	mov	r2, r6
 800da46:	4649      	mov	r1, r9
 800da48:	4640      	mov	r0, r8
 800da4a:	47d0      	blx	sl
 800da4c:	3001      	adds	r0, #1
 800da4e:	d0ad      	beq.n	800d9ac <_printf_i+0x15c>
 800da50:	6823      	ldr	r3, [r4, #0]
 800da52:	079b      	lsls	r3, r3, #30
 800da54:	d413      	bmi.n	800da7e <_printf_i+0x22e>
 800da56:	68e0      	ldr	r0, [r4, #12]
 800da58:	9b03      	ldr	r3, [sp, #12]
 800da5a:	4298      	cmp	r0, r3
 800da5c:	bfb8      	it	lt
 800da5e:	4618      	movlt	r0, r3
 800da60:	e7a6      	b.n	800d9b0 <_printf_i+0x160>
 800da62:	2301      	movs	r3, #1
 800da64:	4632      	mov	r2, r6
 800da66:	4649      	mov	r1, r9
 800da68:	4640      	mov	r0, r8
 800da6a:	47d0      	blx	sl
 800da6c:	3001      	adds	r0, #1
 800da6e:	d09d      	beq.n	800d9ac <_printf_i+0x15c>
 800da70:	3501      	adds	r5, #1
 800da72:	68e3      	ldr	r3, [r4, #12]
 800da74:	9903      	ldr	r1, [sp, #12]
 800da76:	1a5b      	subs	r3, r3, r1
 800da78:	42ab      	cmp	r3, r5
 800da7a:	dcf2      	bgt.n	800da62 <_printf_i+0x212>
 800da7c:	e7eb      	b.n	800da56 <_printf_i+0x206>
 800da7e:	2500      	movs	r5, #0
 800da80:	f104 0619 	add.w	r6, r4, #25
 800da84:	e7f5      	b.n	800da72 <_printf_i+0x222>
 800da86:	bf00      	nop
 800da88:	0800f356 	.word	0x0800f356
 800da8c:	0800f367 	.word	0x0800f367

0800da90 <__swbuf_r>:
 800da90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da92:	460e      	mov	r6, r1
 800da94:	4614      	mov	r4, r2
 800da96:	4605      	mov	r5, r0
 800da98:	b118      	cbz	r0, 800daa2 <__swbuf_r+0x12>
 800da9a:	6a03      	ldr	r3, [r0, #32]
 800da9c:	b90b      	cbnz	r3, 800daa2 <__swbuf_r+0x12>
 800da9e:	f7fe faab 	bl	800bff8 <__sinit>
 800daa2:	69a3      	ldr	r3, [r4, #24]
 800daa4:	60a3      	str	r3, [r4, #8]
 800daa6:	89a3      	ldrh	r3, [r4, #12]
 800daa8:	071a      	lsls	r2, r3, #28
 800daaa:	d501      	bpl.n	800dab0 <__swbuf_r+0x20>
 800daac:	6923      	ldr	r3, [r4, #16]
 800daae:	b943      	cbnz	r3, 800dac2 <__swbuf_r+0x32>
 800dab0:	4621      	mov	r1, r4
 800dab2:	4628      	mov	r0, r5
 800dab4:	f000 f82a 	bl	800db0c <__swsetup_r>
 800dab8:	b118      	cbz	r0, 800dac2 <__swbuf_r+0x32>
 800daba:	f04f 37ff 	mov.w	r7, #4294967295
 800dabe:	4638      	mov	r0, r7
 800dac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dac2:	6823      	ldr	r3, [r4, #0]
 800dac4:	6922      	ldr	r2, [r4, #16]
 800dac6:	1a98      	subs	r0, r3, r2
 800dac8:	6963      	ldr	r3, [r4, #20]
 800daca:	b2f6      	uxtb	r6, r6
 800dacc:	4283      	cmp	r3, r0
 800dace:	4637      	mov	r7, r6
 800dad0:	dc05      	bgt.n	800dade <__swbuf_r+0x4e>
 800dad2:	4621      	mov	r1, r4
 800dad4:	4628      	mov	r0, r5
 800dad6:	f7ff fc99 	bl	800d40c <_fflush_r>
 800dada:	2800      	cmp	r0, #0
 800dadc:	d1ed      	bne.n	800daba <__swbuf_r+0x2a>
 800dade:	68a3      	ldr	r3, [r4, #8]
 800dae0:	3b01      	subs	r3, #1
 800dae2:	60a3      	str	r3, [r4, #8]
 800dae4:	6823      	ldr	r3, [r4, #0]
 800dae6:	1c5a      	adds	r2, r3, #1
 800dae8:	6022      	str	r2, [r4, #0]
 800daea:	701e      	strb	r6, [r3, #0]
 800daec:	6962      	ldr	r2, [r4, #20]
 800daee:	1c43      	adds	r3, r0, #1
 800daf0:	429a      	cmp	r2, r3
 800daf2:	d004      	beq.n	800dafe <__swbuf_r+0x6e>
 800daf4:	89a3      	ldrh	r3, [r4, #12]
 800daf6:	07db      	lsls	r3, r3, #31
 800daf8:	d5e1      	bpl.n	800dabe <__swbuf_r+0x2e>
 800dafa:	2e0a      	cmp	r6, #10
 800dafc:	d1df      	bne.n	800dabe <__swbuf_r+0x2e>
 800dafe:	4621      	mov	r1, r4
 800db00:	4628      	mov	r0, r5
 800db02:	f7ff fc83 	bl	800d40c <_fflush_r>
 800db06:	2800      	cmp	r0, #0
 800db08:	d0d9      	beq.n	800dabe <__swbuf_r+0x2e>
 800db0a:	e7d6      	b.n	800daba <__swbuf_r+0x2a>

0800db0c <__swsetup_r>:
 800db0c:	b538      	push	{r3, r4, r5, lr}
 800db0e:	4b29      	ldr	r3, [pc, #164]	@ (800dbb4 <__swsetup_r+0xa8>)
 800db10:	4605      	mov	r5, r0
 800db12:	6818      	ldr	r0, [r3, #0]
 800db14:	460c      	mov	r4, r1
 800db16:	b118      	cbz	r0, 800db20 <__swsetup_r+0x14>
 800db18:	6a03      	ldr	r3, [r0, #32]
 800db1a:	b90b      	cbnz	r3, 800db20 <__swsetup_r+0x14>
 800db1c:	f7fe fa6c 	bl	800bff8 <__sinit>
 800db20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db24:	0719      	lsls	r1, r3, #28
 800db26:	d422      	bmi.n	800db6e <__swsetup_r+0x62>
 800db28:	06da      	lsls	r2, r3, #27
 800db2a:	d407      	bmi.n	800db3c <__swsetup_r+0x30>
 800db2c:	2209      	movs	r2, #9
 800db2e:	602a      	str	r2, [r5, #0]
 800db30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db34:	81a3      	strh	r3, [r4, #12]
 800db36:	f04f 30ff 	mov.w	r0, #4294967295
 800db3a:	e033      	b.n	800dba4 <__swsetup_r+0x98>
 800db3c:	0758      	lsls	r0, r3, #29
 800db3e:	d512      	bpl.n	800db66 <__swsetup_r+0x5a>
 800db40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800db42:	b141      	cbz	r1, 800db56 <__swsetup_r+0x4a>
 800db44:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800db48:	4299      	cmp	r1, r3
 800db4a:	d002      	beq.n	800db52 <__swsetup_r+0x46>
 800db4c:	4628      	mov	r0, r5
 800db4e:	f7fe fb83 	bl	800c258 <_free_r>
 800db52:	2300      	movs	r3, #0
 800db54:	6363      	str	r3, [r4, #52]	@ 0x34
 800db56:	89a3      	ldrh	r3, [r4, #12]
 800db58:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800db5c:	81a3      	strh	r3, [r4, #12]
 800db5e:	2300      	movs	r3, #0
 800db60:	6063      	str	r3, [r4, #4]
 800db62:	6923      	ldr	r3, [r4, #16]
 800db64:	6023      	str	r3, [r4, #0]
 800db66:	89a3      	ldrh	r3, [r4, #12]
 800db68:	f043 0308 	orr.w	r3, r3, #8
 800db6c:	81a3      	strh	r3, [r4, #12]
 800db6e:	6923      	ldr	r3, [r4, #16]
 800db70:	b94b      	cbnz	r3, 800db86 <__swsetup_r+0x7a>
 800db72:	89a3      	ldrh	r3, [r4, #12]
 800db74:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800db78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800db7c:	d003      	beq.n	800db86 <__swsetup_r+0x7a>
 800db7e:	4621      	mov	r1, r4
 800db80:	4628      	mov	r0, r5
 800db82:	f000 f883 	bl	800dc8c <__smakebuf_r>
 800db86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db8a:	f013 0201 	ands.w	r2, r3, #1
 800db8e:	d00a      	beq.n	800dba6 <__swsetup_r+0x9a>
 800db90:	2200      	movs	r2, #0
 800db92:	60a2      	str	r2, [r4, #8]
 800db94:	6962      	ldr	r2, [r4, #20]
 800db96:	4252      	negs	r2, r2
 800db98:	61a2      	str	r2, [r4, #24]
 800db9a:	6922      	ldr	r2, [r4, #16]
 800db9c:	b942      	cbnz	r2, 800dbb0 <__swsetup_r+0xa4>
 800db9e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800dba2:	d1c5      	bne.n	800db30 <__swsetup_r+0x24>
 800dba4:	bd38      	pop	{r3, r4, r5, pc}
 800dba6:	0799      	lsls	r1, r3, #30
 800dba8:	bf58      	it	pl
 800dbaa:	6962      	ldrpl	r2, [r4, #20]
 800dbac:	60a2      	str	r2, [r4, #8]
 800dbae:	e7f4      	b.n	800db9a <__swsetup_r+0x8e>
 800dbb0:	2000      	movs	r0, #0
 800dbb2:	e7f7      	b.n	800dba4 <__swsetup_r+0x98>
 800dbb4:	200001dc 	.word	0x200001dc

0800dbb8 <_raise_r>:
 800dbb8:	291f      	cmp	r1, #31
 800dbba:	b538      	push	{r3, r4, r5, lr}
 800dbbc:	4605      	mov	r5, r0
 800dbbe:	460c      	mov	r4, r1
 800dbc0:	d904      	bls.n	800dbcc <_raise_r+0x14>
 800dbc2:	2316      	movs	r3, #22
 800dbc4:	6003      	str	r3, [r0, #0]
 800dbc6:	f04f 30ff 	mov.w	r0, #4294967295
 800dbca:	bd38      	pop	{r3, r4, r5, pc}
 800dbcc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800dbce:	b112      	cbz	r2, 800dbd6 <_raise_r+0x1e>
 800dbd0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dbd4:	b94b      	cbnz	r3, 800dbea <_raise_r+0x32>
 800dbd6:	4628      	mov	r0, r5
 800dbd8:	f000 f830 	bl	800dc3c <_getpid_r>
 800dbdc:	4622      	mov	r2, r4
 800dbde:	4601      	mov	r1, r0
 800dbe0:	4628      	mov	r0, r5
 800dbe2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dbe6:	f000 b817 	b.w	800dc18 <_kill_r>
 800dbea:	2b01      	cmp	r3, #1
 800dbec:	d00a      	beq.n	800dc04 <_raise_r+0x4c>
 800dbee:	1c59      	adds	r1, r3, #1
 800dbf0:	d103      	bne.n	800dbfa <_raise_r+0x42>
 800dbf2:	2316      	movs	r3, #22
 800dbf4:	6003      	str	r3, [r0, #0]
 800dbf6:	2001      	movs	r0, #1
 800dbf8:	e7e7      	b.n	800dbca <_raise_r+0x12>
 800dbfa:	2100      	movs	r1, #0
 800dbfc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800dc00:	4620      	mov	r0, r4
 800dc02:	4798      	blx	r3
 800dc04:	2000      	movs	r0, #0
 800dc06:	e7e0      	b.n	800dbca <_raise_r+0x12>

0800dc08 <raise>:
 800dc08:	4b02      	ldr	r3, [pc, #8]	@ (800dc14 <raise+0xc>)
 800dc0a:	4601      	mov	r1, r0
 800dc0c:	6818      	ldr	r0, [r3, #0]
 800dc0e:	f7ff bfd3 	b.w	800dbb8 <_raise_r>
 800dc12:	bf00      	nop
 800dc14:	200001dc 	.word	0x200001dc

0800dc18 <_kill_r>:
 800dc18:	b538      	push	{r3, r4, r5, lr}
 800dc1a:	4d07      	ldr	r5, [pc, #28]	@ (800dc38 <_kill_r+0x20>)
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	4604      	mov	r4, r0
 800dc20:	4608      	mov	r0, r1
 800dc22:	4611      	mov	r1, r2
 800dc24:	602b      	str	r3, [r5, #0]
 800dc26:	f7f7 ff09 	bl	8005a3c <_kill>
 800dc2a:	1c43      	adds	r3, r0, #1
 800dc2c:	d102      	bne.n	800dc34 <_kill_r+0x1c>
 800dc2e:	682b      	ldr	r3, [r5, #0]
 800dc30:	b103      	cbz	r3, 800dc34 <_kill_r+0x1c>
 800dc32:	6023      	str	r3, [r4, #0]
 800dc34:	bd38      	pop	{r3, r4, r5, pc}
 800dc36:	bf00      	nop
 800dc38:	20002674 	.word	0x20002674

0800dc3c <_getpid_r>:
 800dc3c:	f7f7 bef6 	b.w	8005a2c <_getpid>

0800dc40 <__swhatbuf_r>:
 800dc40:	b570      	push	{r4, r5, r6, lr}
 800dc42:	460c      	mov	r4, r1
 800dc44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc48:	2900      	cmp	r1, #0
 800dc4a:	b096      	sub	sp, #88	@ 0x58
 800dc4c:	4615      	mov	r5, r2
 800dc4e:	461e      	mov	r6, r3
 800dc50:	da0d      	bge.n	800dc6e <__swhatbuf_r+0x2e>
 800dc52:	89a3      	ldrh	r3, [r4, #12]
 800dc54:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800dc58:	f04f 0100 	mov.w	r1, #0
 800dc5c:	bf14      	ite	ne
 800dc5e:	2340      	movne	r3, #64	@ 0x40
 800dc60:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800dc64:	2000      	movs	r0, #0
 800dc66:	6031      	str	r1, [r6, #0]
 800dc68:	602b      	str	r3, [r5, #0]
 800dc6a:	b016      	add	sp, #88	@ 0x58
 800dc6c:	bd70      	pop	{r4, r5, r6, pc}
 800dc6e:	466a      	mov	r2, sp
 800dc70:	f000 f848 	bl	800dd04 <_fstat_r>
 800dc74:	2800      	cmp	r0, #0
 800dc76:	dbec      	blt.n	800dc52 <__swhatbuf_r+0x12>
 800dc78:	9901      	ldr	r1, [sp, #4]
 800dc7a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800dc7e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800dc82:	4259      	negs	r1, r3
 800dc84:	4159      	adcs	r1, r3
 800dc86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dc8a:	e7eb      	b.n	800dc64 <__swhatbuf_r+0x24>

0800dc8c <__smakebuf_r>:
 800dc8c:	898b      	ldrh	r3, [r1, #12]
 800dc8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dc90:	079d      	lsls	r5, r3, #30
 800dc92:	4606      	mov	r6, r0
 800dc94:	460c      	mov	r4, r1
 800dc96:	d507      	bpl.n	800dca8 <__smakebuf_r+0x1c>
 800dc98:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800dc9c:	6023      	str	r3, [r4, #0]
 800dc9e:	6123      	str	r3, [r4, #16]
 800dca0:	2301      	movs	r3, #1
 800dca2:	6163      	str	r3, [r4, #20]
 800dca4:	b003      	add	sp, #12
 800dca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dca8:	ab01      	add	r3, sp, #4
 800dcaa:	466a      	mov	r2, sp
 800dcac:	f7ff ffc8 	bl	800dc40 <__swhatbuf_r>
 800dcb0:	9f00      	ldr	r7, [sp, #0]
 800dcb2:	4605      	mov	r5, r0
 800dcb4:	4639      	mov	r1, r7
 800dcb6:	4630      	mov	r0, r6
 800dcb8:	f7fd fa78 	bl	800b1ac <_malloc_r>
 800dcbc:	b948      	cbnz	r0, 800dcd2 <__smakebuf_r+0x46>
 800dcbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dcc2:	059a      	lsls	r2, r3, #22
 800dcc4:	d4ee      	bmi.n	800dca4 <__smakebuf_r+0x18>
 800dcc6:	f023 0303 	bic.w	r3, r3, #3
 800dcca:	f043 0302 	orr.w	r3, r3, #2
 800dcce:	81a3      	strh	r3, [r4, #12]
 800dcd0:	e7e2      	b.n	800dc98 <__smakebuf_r+0xc>
 800dcd2:	89a3      	ldrh	r3, [r4, #12]
 800dcd4:	6020      	str	r0, [r4, #0]
 800dcd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dcda:	81a3      	strh	r3, [r4, #12]
 800dcdc:	9b01      	ldr	r3, [sp, #4]
 800dcde:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800dce2:	b15b      	cbz	r3, 800dcfc <__smakebuf_r+0x70>
 800dce4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dce8:	4630      	mov	r0, r6
 800dcea:	f000 f81d 	bl	800dd28 <_isatty_r>
 800dcee:	b128      	cbz	r0, 800dcfc <__smakebuf_r+0x70>
 800dcf0:	89a3      	ldrh	r3, [r4, #12]
 800dcf2:	f023 0303 	bic.w	r3, r3, #3
 800dcf6:	f043 0301 	orr.w	r3, r3, #1
 800dcfa:	81a3      	strh	r3, [r4, #12]
 800dcfc:	89a3      	ldrh	r3, [r4, #12]
 800dcfe:	431d      	orrs	r5, r3
 800dd00:	81a5      	strh	r5, [r4, #12]
 800dd02:	e7cf      	b.n	800dca4 <__smakebuf_r+0x18>

0800dd04 <_fstat_r>:
 800dd04:	b538      	push	{r3, r4, r5, lr}
 800dd06:	4d07      	ldr	r5, [pc, #28]	@ (800dd24 <_fstat_r+0x20>)
 800dd08:	2300      	movs	r3, #0
 800dd0a:	4604      	mov	r4, r0
 800dd0c:	4608      	mov	r0, r1
 800dd0e:	4611      	mov	r1, r2
 800dd10:	602b      	str	r3, [r5, #0]
 800dd12:	f7f7 fef3 	bl	8005afc <_fstat>
 800dd16:	1c43      	adds	r3, r0, #1
 800dd18:	d102      	bne.n	800dd20 <_fstat_r+0x1c>
 800dd1a:	682b      	ldr	r3, [r5, #0]
 800dd1c:	b103      	cbz	r3, 800dd20 <_fstat_r+0x1c>
 800dd1e:	6023      	str	r3, [r4, #0]
 800dd20:	bd38      	pop	{r3, r4, r5, pc}
 800dd22:	bf00      	nop
 800dd24:	20002674 	.word	0x20002674

0800dd28 <_isatty_r>:
 800dd28:	b538      	push	{r3, r4, r5, lr}
 800dd2a:	4d06      	ldr	r5, [pc, #24]	@ (800dd44 <_isatty_r+0x1c>)
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	4604      	mov	r4, r0
 800dd30:	4608      	mov	r0, r1
 800dd32:	602b      	str	r3, [r5, #0]
 800dd34:	f7f7 fef2 	bl	8005b1c <_isatty>
 800dd38:	1c43      	adds	r3, r0, #1
 800dd3a:	d102      	bne.n	800dd42 <_isatty_r+0x1a>
 800dd3c:	682b      	ldr	r3, [r5, #0]
 800dd3e:	b103      	cbz	r3, 800dd42 <_isatty_r+0x1a>
 800dd40:	6023      	str	r3, [r4, #0]
 800dd42:	bd38      	pop	{r3, r4, r5, pc}
 800dd44:	20002674 	.word	0x20002674

0800dd48 <pow>:
 800dd48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd4a:	ed2d 8b02 	vpush	{d8}
 800dd4e:	eeb0 8a40 	vmov.f32	s16, s0
 800dd52:	eef0 8a60 	vmov.f32	s17, s1
 800dd56:	ec55 4b11 	vmov	r4, r5, d1
 800dd5a:	f000 f971 	bl	800e040 <__ieee754_pow>
 800dd5e:	4622      	mov	r2, r4
 800dd60:	462b      	mov	r3, r5
 800dd62:	4620      	mov	r0, r4
 800dd64:	4629      	mov	r1, r5
 800dd66:	ec57 6b10 	vmov	r6, r7, d0
 800dd6a:	f7f2 fef7 	bl	8000b5c <__aeabi_dcmpun>
 800dd6e:	2800      	cmp	r0, #0
 800dd70:	d13b      	bne.n	800ddea <pow+0xa2>
 800dd72:	ec51 0b18 	vmov	r0, r1, d8
 800dd76:	2200      	movs	r2, #0
 800dd78:	2300      	movs	r3, #0
 800dd7a:	f7f2 febd 	bl	8000af8 <__aeabi_dcmpeq>
 800dd7e:	b1b8      	cbz	r0, 800ddb0 <pow+0x68>
 800dd80:	2200      	movs	r2, #0
 800dd82:	2300      	movs	r3, #0
 800dd84:	4620      	mov	r0, r4
 800dd86:	4629      	mov	r1, r5
 800dd88:	f7f2 feb6 	bl	8000af8 <__aeabi_dcmpeq>
 800dd8c:	2800      	cmp	r0, #0
 800dd8e:	d146      	bne.n	800de1e <pow+0xd6>
 800dd90:	ec45 4b10 	vmov	d0, r4, r5
 800dd94:	f000 f868 	bl	800de68 <finite>
 800dd98:	b338      	cbz	r0, 800ddea <pow+0xa2>
 800dd9a:	2200      	movs	r2, #0
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	4620      	mov	r0, r4
 800dda0:	4629      	mov	r1, r5
 800dda2:	f7f2 feb3 	bl	8000b0c <__aeabi_dcmplt>
 800dda6:	b300      	cbz	r0, 800ddea <pow+0xa2>
 800dda8:	f7fe fa10 	bl	800c1cc <__errno>
 800ddac:	2322      	movs	r3, #34	@ 0x22
 800ddae:	e01b      	b.n	800dde8 <pow+0xa0>
 800ddb0:	ec47 6b10 	vmov	d0, r6, r7
 800ddb4:	f000 f858 	bl	800de68 <finite>
 800ddb8:	b9e0      	cbnz	r0, 800ddf4 <pow+0xac>
 800ddba:	eeb0 0a48 	vmov.f32	s0, s16
 800ddbe:	eef0 0a68 	vmov.f32	s1, s17
 800ddc2:	f000 f851 	bl	800de68 <finite>
 800ddc6:	b1a8      	cbz	r0, 800ddf4 <pow+0xac>
 800ddc8:	ec45 4b10 	vmov	d0, r4, r5
 800ddcc:	f000 f84c 	bl	800de68 <finite>
 800ddd0:	b180      	cbz	r0, 800ddf4 <pow+0xac>
 800ddd2:	4632      	mov	r2, r6
 800ddd4:	463b      	mov	r3, r7
 800ddd6:	4630      	mov	r0, r6
 800ddd8:	4639      	mov	r1, r7
 800ddda:	f7f2 febf 	bl	8000b5c <__aeabi_dcmpun>
 800ddde:	2800      	cmp	r0, #0
 800dde0:	d0e2      	beq.n	800dda8 <pow+0x60>
 800dde2:	f7fe f9f3 	bl	800c1cc <__errno>
 800dde6:	2321      	movs	r3, #33	@ 0x21
 800dde8:	6003      	str	r3, [r0, #0]
 800ddea:	ecbd 8b02 	vpop	{d8}
 800ddee:	ec47 6b10 	vmov	d0, r6, r7
 800ddf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ddf4:	2200      	movs	r2, #0
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	4630      	mov	r0, r6
 800ddfa:	4639      	mov	r1, r7
 800ddfc:	f7f2 fe7c 	bl	8000af8 <__aeabi_dcmpeq>
 800de00:	2800      	cmp	r0, #0
 800de02:	d0f2      	beq.n	800ddea <pow+0xa2>
 800de04:	eeb0 0a48 	vmov.f32	s0, s16
 800de08:	eef0 0a68 	vmov.f32	s1, s17
 800de0c:	f000 f82c 	bl	800de68 <finite>
 800de10:	2800      	cmp	r0, #0
 800de12:	d0ea      	beq.n	800ddea <pow+0xa2>
 800de14:	ec45 4b10 	vmov	d0, r4, r5
 800de18:	f000 f826 	bl	800de68 <finite>
 800de1c:	e7c3      	b.n	800dda6 <pow+0x5e>
 800de1e:	4f01      	ldr	r7, [pc, #4]	@ (800de24 <pow+0xdc>)
 800de20:	2600      	movs	r6, #0
 800de22:	e7e2      	b.n	800ddea <pow+0xa2>
 800de24:	3ff00000 	.word	0x3ff00000

0800de28 <atan2f>:
 800de28:	f000 be56 	b.w	800ead8 <__ieee754_atan2f>

0800de2c <sqrtf>:
 800de2c:	b508      	push	{r3, lr}
 800de2e:	ed2d 8b02 	vpush	{d8}
 800de32:	eeb0 8a40 	vmov.f32	s16, s0
 800de36:	f000 f8fd 	bl	800e034 <__ieee754_sqrtf>
 800de3a:	eeb4 8a48 	vcmp.f32	s16, s16
 800de3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de42:	d60c      	bvs.n	800de5e <sqrtf+0x32>
 800de44:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800de64 <sqrtf+0x38>
 800de48:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800de4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de50:	d505      	bpl.n	800de5e <sqrtf+0x32>
 800de52:	f7fe f9bb 	bl	800c1cc <__errno>
 800de56:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800de5a:	2321      	movs	r3, #33	@ 0x21
 800de5c:	6003      	str	r3, [r0, #0]
 800de5e:	ecbd 8b02 	vpop	{d8}
 800de62:	bd08      	pop	{r3, pc}
 800de64:	00000000 	.word	0x00000000

0800de68 <finite>:
 800de68:	b082      	sub	sp, #8
 800de6a:	ed8d 0b00 	vstr	d0, [sp]
 800de6e:	9801      	ldr	r0, [sp, #4]
 800de70:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800de74:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800de78:	0fc0      	lsrs	r0, r0, #31
 800de7a:	b002      	add	sp, #8
 800de7c:	4770      	bx	lr
	...

0800de80 <__ieee754_sqrt>:
 800de80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de84:	4a68      	ldr	r2, [pc, #416]	@ (800e028 <__ieee754_sqrt+0x1a8>)
 800de86:	ec55 4b10 	vmov	r4, r5, d0
 800de8a:	43aa      	bics	r2, r5
 800de8c:	462b      	mov	r3, r5
 800de8e:	4621      	mov	r1, r4
 800de90:	d110      	bne.n	800deb4 <__ieee754_sqrt+0x34>
 800de92:	4622      	mov	r2, r4
 800de94:	4620      	mov	r0, r4
 800de96:	4629      	mov	r1, r5
 800de98:	f7f2 fbc6 	bl	8000628 <__aeabi_dmul>
 800de9c:	4602      	mov	r2, r0
 800de9e:	460b      	mov	r3, r1
 800dea0:	4620      	mov	r0, r4
 800dea2:	4629      	mov	r1, r5
 800dea4:	f7f2 fa0a 	bl	80002bc <__adddf3>
 800dea8:	4604      	mov	r4, r0
 800deaa:	460d      	mov	r5, r1
 800deac:	ec45 4b10 	vmov	d0, r4, r5
 800deb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800deb4:	2d00      	cmp	r5, #0
 800deb6:	dc0e      	bgt.n	800ded6 <__ieee754_sqrt+0x56>
 800deb8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800debc:	4322      	orrs	r2, r4
 800debe:	d0f5      	beq.n	800deac <__ieee754_sqrt+0x2c>
 800dec0:	b19d      	cbz	r5, 800deea <__ieee754_sqrt+0x6a>
 800dec2:	4622      	mov	r2, r4
 800dec4:	4620      	mov	r0, r4
 800dec6:	4629      	mov	r1, r5
 800dec8:	f7f2 f9f6 	bl	80002b8 <__aeabi_dsub>
 800decc:	4602      	mov	r2, r0
 800dece:	460b      	mov	r3, r1
 800ded0:	f7f2 fcd4 	bl	800087c <__aeabi_ddiv>
 800ded4:	e7e8      	b.n	800dea8 <__ieee754_sqrt+0x28>
 800ded6:	152a      	asrs	r2, r5, #20
 800ded8:	d115      	bne.n	800df06 <__ieee754_sqrt+0x86>
 800deda:	2000      	movs	r0, #0
 800dedc:	e009      	b.n	800def2 <__ieee754_sqrt+0x72>
 800dede:	0acb      	lsrs	r3, r1, #11
 800dee0:	3a15      	subs	r2, #21
 800dee2:	0549      	lsls	r1, r1, #21
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d0fa      	beq.n	800dede <__ieee754_sqrt+0x5e>
 800dee8:	e7f7      	b.n	800deda <__ieee754_sqrt+0x5a>
 800deea:	462a      	mov	r2, r5
 800deec:	e7fa      	b.n	800dee4 <__ieee754_sqrt+0x64>
 800deee:	005b      	lsls	r3, r3, #1
 800def0:	3001      	adds	r0, #1
 800def2:	02dc      	lsls	r4, r3, #11
 800def4:	d5fb      	bpl.n	800deee <__ieee754_sqrt+0x6e>
 800def6:	1e44      	subs	r4, r0, #1
 800def8:	1b12      	subs	r2, r2, r4
 800defa:	f1c0 0420 	rsb	r4, r0, #32
 800defe:	fa21 f404 	lsr.w	r4, r1, r4
 800df02:	4323      	orrs	r3, r4
 800df04:	4081      	lsls	r1, r0
 800df06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800df0a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800df0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800df12:	07d2      	lsls	r2, r2, #31
 800df14:	bf5c      	itt	pl
 800df16:	005b      	lslpl	r3, r3, #1
 800df18:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800df1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800df20:	bf58      	it	pl
 800df22:	0049      	lslpl	r1, r1, #1
 800df24:	2600      	movs	r6, #0
 800df26:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800df2a:	106d      	asrs	r5, r5, #1
 800df2c:	0049      	lsls	r1, r1, #1
 800df2e:	2016      	movs	r0, #22
 800df30:	4632      	mov	r2, r6
 800df32:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800df36:	1917      	adds	r7, r2, r4
 800df38:	429f      	cmp	r7, r3
 800df3a:	bfde      	ittt	le
 800df3c:	193a      	addle	r2, r7, r4
 800df3e:	1bdb      	suble	r3, r3, r7
 800df40:	1936      	addle	r6, r6, r4
 800df42:	0fcf      	lsrs	r7, r1, #31
 800df44:	3801      	subs	r0, #1
 800df46:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800df4a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800df4e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800df52:	d1f0      	bne.n	800df36 <__ieee754_sqrt+0xb6>
 800df54:	4604      	mov	r4, r0
 800df56:	2720      	movs	r7, #32
 800df58:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800df5c:	429a      	cmp	r2, r3
 800df5e:	eb00 0e0c 	add.w	lr, r0, ip
 800df62:	db02      	blt.n	800df6a <__ieee754_sqrt+0xea>
 800df64:	d113      	bne.n	800df8e <__ieee754_sqrt+0x10e>
 800df66:	458e      	cmp	lr, r1
 800df68:	d811      	bhi.n	800df8e <__ieee754_sqrt+0x10e>
 800df6a:	f1be 0f00 	cmp.w	lr, #0
 800df6e:	eb0e 000c 	add.w	r0, lr, ip
 800df72:	da42      	bge.n	800dffa <__ieee754_sqrt+0x17a>
 800df74:	2800      	cmp	r0, #0
 800df76:	db40      	blt.n	800dffa <__ieee754_sqrt+0x17a>
 800df78:	f102 0801 	add.w	r8, r2, #1
 800df7c:	1a9b      	subs	r3, r3, r2
 800df7e:	458e      	cmp	lr, r1
 800df80:	bf88      	it	hi
 800df82:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800df86:	eba1 010e 	sub.w	r1, r1, lr
 800df8a:	4464      	add	r4, ip
 800df8c:	4642      	mov	r2, r8
 800df8e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800df92:	3f01      	subs	r7, #1
 800df94:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800df98:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800df9c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800dfa0:	d1dc      	bne.n	800df5c <__ieee754_sqrt+0xdc>
 800dfa2:	4319      	orrs	r1, r3
 800dfa4:	d01b      	beq.n	800dfde <__ieee754_sqrt+0x15e>
 800dfa6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800e02c <__ieee754_sqrt+0x1ac>
 800dfaa:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800e030 <__ieee754_sqrt+0x1b0>
 800dfae:	e9da 0100 	ldrd	r0, r1, [sl]
 800dfb2:	e9db 2300 	ldrd	r2, r3, [fp]
 800dfb6:	f7f2 f97f 	bl	80002b8 <__aeabi_dsub>
 800dfba:	e9da 8900 	ldrd	r8, r9, [sl]
 800dfbe:	4602      	mov	r2, r0
 800dfc0:	460b      	mov	r3, r1
 800dfc2:	4640      	mov	r0, r8
 800dfc4:	4649      	mov	r1, r9
 800dfc6:	f7f2 fdab 	bl	8000b20 <__aeabi_dcmple>
 800dfca:	b140      	cbz	r0, 800dfde <__ieee754_sqrt+0x15e>
 800dfcc:	f1b4 3fff 	cmp.w	r4, #4294967295
 800dfd0:	e9da 0100 	ldrd	r0, r1, [sl]
 800dfd4:	e9db 2300 	ldrd	r2, r3, [fp]
 800dfd8:	d111      	bne.n	800dffe <__ieee754_sqrt+0x17e>
 800dfda:	3601      	adds	r6, #1
 800dfdc:	463c      	mov	r4, r7
 800dfde:	1072      	asrs	r2, r6, #1
 800dfe0:	0863      	lsrs	r3, r4, #1
 800dfe2:	07f1      	lsls	r1, r6, #31
 800dfe4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800dfe8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800dfec:	bf48      	it	mi
 800dfee:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800dff2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800dff6:	4618      	mov	r0, r3
 800dff8:	e756      	b.n	800dea8 <__ieee754_sqrt+0x28>
 800dffa:	4690      	mov	r8, r2
 800dffc:	e7be      	b.n	800df7c <__ieee754_sqrt+0xfc>
 800dffe:	f7f2 f95d 	bl	80002bc <__adddf3>
 800e002:	e9da 8900 	ldrd	r8, r9, [sl]
 800e006:	4602      	mov	r2, r0
 800e008:	460b      	mov	r3, r1
 800e00a:	4640      	mov	r0, r8
 800e00c:	4649      	mov	r1, r9
 800e00e:	f7f2 fd7d 	bl	8000b0c <__aeabi_dcmplt>
 800e012:	b120      	cbz	r0, 800e01e <__ieee754_sqrt+0x19e>
 800e014:	1ca0      	adds	r0, r4, #2
 800e016:	bf08      	it	eq
 800e018:	3601      	addeq	r6, #1
 800e01a:	3402      	adds	r4, #2
 800e01c:	e7df      	b.n	800dfde <__ieee754_sqrt+0x15e>
 800e01e:	1c63      	adds	r3, r4, #1
 800e020:	f023 0401 	bic.w	r4, r3, #1
 800e024:	e7db      	b.n	800dfde <__ieee754_sqrt+0x15e>
 800e026:	bf00      	nop
 800e028:	7ff00000 	.word	0x7ff00000
 800e02c:	20000238 	.word	0x20000238
 800e030:	20000230 	.word	0x20000230

0800e034 <__ieee754_sqrtf>:
 800e034:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800e038:	4770      	bx	lr
 800e03a:	0000      	movs	r0, r0
 800e03c:	0000      	movs	r0, r0
	...

0800e040 <__ieee754_pow>:
 800e040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e044:	b091      	sub	sp, #68	@ 0x44
 800e046:	ed8d 1b00 	vstr	d1, [sp]
 800e04a:	e9dd 1900 	ldrd	r1, r9, [sp]
 800e04e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800e052:	ea5a 0001 	orrs.w	r0, sl, r1
 800e056:	ec57 6b10 	vmov	r6, r7, d0
 800e05a:	d113      	bne.n	800e084 <__ieee754_pow+0x44>
 800e05c:	19b3      	adds	r3, r6, r6
 800e05e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800e062:	4152      	adcs	r2, r2
 800e064:	4298      	cmp	r0, r3
 800e066:	4b98      	ldr	r3, [pc, #608]	@ (800e2c8 <__ieee754_pow+0x288>)
 800e068:	4193      	sbcs	r3, r2
 800e06a:	f080 84ea 	bcs.w	800ea42 <__ieee754_pow+0xa02>
 800e06e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e072:	4630      	mov	r0, r6
 800e074:	4639      	mov	r1, r7
 800e076:	f7f2 f921 	bl	80002bc <__adddf3>
 800e07a:	ec41 0b10 	vmov	d0, r0, r1
 800e07e:	b011      	add	sp, #68	@ 0x44
 800e080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e084:	4a91      	ldr	r2, [pc, #580]	@ (800e2cc <__ieee754_pow+0x28c>)
 800e086:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800e08a:	4590      	cmp	r8, r2
 800e08c:	463d      	mov	r5, r7
 800e08e:	4633      	mov	r3, r6
 800e090:	d806      	bhi.n	800e0a0 <__ieee754_pow+0x60>
 800e092:	d101      	bne.n	800e098 <__ieee754_pow+0x58>
 800e094:	2e00      	cmp	r6, #0
 800e096:	d1ea      	bne.n	800e06e <__ieee754_pow+0x2e>
 800e098:	4592      	cmp	sl, r2
 800e09a:	d801      	bhi.n	800e0a0 <__ieee754_pow+0x60>
 800e09c:	d10e      	bne.n	800e0bc <__ieee754_pow+0x7c>
 800e09e:	b169      	cbz	r1, 800e0bc <__ieee754_pow+0x7c>
 800e0a0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800e0a4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800e0a8:	431d      	orrs	r5, r3
 800e0aa:	d1e0      	bne.n	800e06e <__ieee754_pow+0x2e>
 800e0ac:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e0b0:	18db      	adds	r3, r3, r3
 800e0b2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800e0b6:	4152      	adcs	r2, r2
 800e0b8:	429d      	cmp	r5, r3
 800e0ba:	e7d4      	b.n	800e066 <__ieee754_pow+0x26>
 800e0bc:	2d00      	cmp	r5, #0
 800e0be:	46c3      	mov	fp, r8
 800e0c0:	da3a      	bge.n	800e138 <__ieee754_pow+0xf8>
 800e0c2:	4a83      	ldr	r2, [pc, #524]	@ (800e2d0 <__ieee754_pow+0x290>)
 800e0c4:	4592      	cmp	sl, r2
 800e0c6:	d84d      	bhi.n	800e164 <__ieee754_pow+0x124>
 800e0c8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800e0cc:	4592      	cmp	sl, r2
 800e0ce:	f240 84c7 	bls.w	800ea60 <__ieee754_pow+0xa20>
 800e0d2:	ea4f 522a 	mov.w	r2, sl, asr #20
 800e0d6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800e0da:	2a14      	cmp	r2, #20
 800e0dc:	dd0f      	ble.n	800e0fe <__ieee754_pow+0xbe>
 800e0de:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800e0e2:	fa21 f402 	lsr.w	r4, r1, r2
 800e0e6:	fa04 f202 	lsl.w	r2, r4, r2
 800e0ea:	428a      	cmp	r2, r1
 800e0ec:	f040 84b8 	bne.w	800ea60 <__ieee754_pow+0xa20>
 800e0f0:	f004 0401 	and.w	r4, r4, #1
 800e0f4:	f1c4 0402 	rsb	r4, r4, #2
 800e0f8:	2900      	cmp	r1, #0
 800e0fa:	d158      	bne.n	800e1ae <__ieee754_pow+0x16e>
 800e0fc:	e00e      	b.n	800e11c <__ieee754_pow+0xdc>
 800e0fe:	2900      	cmp	r1, #0
 800e100:	d154      	bne.n	800e1ac <__ieee754_pow+0x16c>
 800e102:	f1c2 0214 	rsb	r2, r2, #20
 800e106:	fa4a f402 	asr.w	r4, sl, r2
 800e10a:	fa04 f202 	lsl.w	r2, r4, r2
 800e10e:	4552      	cmp	r2, sl
 800e110:	f040 84a3 	bne.w	800ea5a <__ieee754_pow+0xa1a>
 800e114:	f004 0401 	and.w	r4, r4, #1
 800e118:	f1c4 0402 	rsb	r4, r4, #2
 800e11c:	4a6d      	ldr	r2, [pc, #436]	@ (800e2d4 <__ieee754_pow+0x294>)
 800e11e:	4592      	cmp	sl, r2
 800e120:	d12e      	bne.n	800e180 <__ieee754_pow+0x140>
 800e122:	f1b9 0f00 	cmp.w	r9, #0
 800e126:	f280 8494 	bge.w	800ea52 <__ieee754_pow+0xa12>
 800e12a:	496a      	ldr	r1, [pc, #424]	@ (800e2d4 <__ieee754_pow+0x294>)
 800e12c:	4632      	mov	r2, r6
 800e12e:	463b      	mov	r3, r7
 800e130:	2000      	movs	r0, #0
 800e132:	f7f2 fba3 	bl	800087c <__aeabi_ddiv>
 800e136:	e7a0      	b.n	800e07a <__ieee754_pow+0x3a>
 800e138:	2400      	movs	r4, #0
 800e13a:	bbc1      	cbnz	r1, 800e1ae <__ieee754_pow+0x16e>
 800e13c:	4a63      	ldr	r2, [pc, #396]	@ (800e2cc <__ieee754_pow+0x28c>)
 800e13e:	4592      	cmp	sl, r2
 800e140:	d1ec      	bne.n	800e11c <__ieee754_pow+0xdc>
 800e142:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800e146:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800e14a:	431a      	orrs	r2, r3
 800e14c:	f000 8479 	beq.w	800ea42 <__ieee754_pow+0xa02>
 800e150:	4b61      	ldr	r3, [pc, #388]	@ (800e2d8 <__ieee754_pow+0x298>)
 800e152:	4598      	cmp	r8, r3
 800e154:	d908      	bls.n	800e168 <__ieee754_pow+0x128>
 800e156:	f1b9 0f00 	cmp.w	r9, #0
 800e15a:	f2c0 8476 	blt.w	800ea4a <__ieee754_pow+0xa0a>
 800e15e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e162:	e78a      	b.n	800e07a <__ieee754_pow+0x3a>
 800e164:	2402      	movs	r4, #2
 800e166:	e7e8      	b.n	800e13a <__ieee754_pow+0xfa>
 800e168:	f1b9 0f00 	cmp.w	r9, #0
 800e16c:	f04f 0000 	mov.w	r0, #0
 800e170:	f04f 0100 	mov.w	r1, #0
 800e174:	da81      	bge.n	800e07a <__ieee754_pow+0x3a>
 800e176:	e9dd 0300 	ldrd	r0, r3, [sp]
 800e17a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800e17e:	e77c      	b.n	800e07a <__ieee754_pow+0x3a>
 800e180:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800e184:	d106      	bne.n	800e194 <__ieee754_pow+0x154>
 800e186:	4632      	mov	r2, r6
 800e188:	463b      	mov	r3, r7
 800e18a:	4630      	mov	r0, r6
 800e18c:	4639      	mov	r1, r7
 800e18e:	f7f2 fa4b 	bl	8000628 <__aeabi_dmul>
 800e192:	e772      	b.n	800e07a <__ieee754_pow+0x3a>
 800e194:	4a51      	ldr	r2, [pc, #324]	@ (800e2dc <__ieee754_pow+0x29c>)
 800e196:	4591      	cmp	r9, r2
 800e198:	d109      	bne.n	800e1ae <__ieee754_pow+0x16e>
 800e19a:	2d00      	cmp	r5, #0
 800e19c:	db07      	blt.n	800e1ae <__ieee754_pow+0x16e>
 800e19e:	ec47 6b10 	vmov	d0, r6, r7
 800e1a2:	b011      	add	sp, #68	@ 0x44
 800e1a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1a8:	f7ff be6a 	b.w	800de80 <__ieee754_sqrt>
 800e1ac:	2400      	movs	r4, #0
 800e1ae:	ec47 6b10 	vmov	d0, r6, r7
 800e1b2:	9302      	str	r3, [sp, #8]
 800e1b4:	f000 fc88 	bl	800eac8 <fabs>
 800e1b8:	9b02      	ldr	r3, [sp, #8]
 800e1ba:	ec51 0b10 	vmov	r0, r1, d0
 800e1be:	bb53      	cbnz	r3, 800e216 <__ieee754_pow+0x1d6>
 800e1c0:	4b44      	ldr	r3, [pc, #272]	@ (800e2d4 <__ieee754_pow+0x294>)
 800e1c2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800e1c6:	429a      	cmp	r2, r3
 800e1c8:	d002      	beq.n	800e1d0 <__ieee754_pow+0x190>
 800e1ca:	f1b8 0f00 	cmp.w	r8, #0
 800e1ce:	d122      	bne.n	800e216 <__ieee754_pow+0x1d6>
 800e1d0:	f1b9 0f00 	cmp.w	r9, #0
 800e1d4:	da05      	bge.n	800e1e2 <__ieee754_pow+0x1a2>
 800e1d6:	4602      	mov	r2, r0
 800e1d8:	460b      	mov	r3, r1
 800e1da:	2000      	movs	r0, #0
 800e1dc:	493d      	ldr	r1, [pc, #244]	@ (800e2d4 <__ieee754_pow+0x294>)
 800e1de:	f7f2 fb4d 	bl	800087c <__aeabi_ddiv>
 800e1e2:	2d00      	cmp	r5, #0
 800e1e4:	f6bf af49 	bge.w	800e07a <__ieee754_pow+0x3a>
 800e1e8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800e1ec:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800e1f0:	ea58 0804 	orrs.w	r8, r8, r4
 800e1f4:	d108      	bne.n	800e208 <__ieee754_pow+0x1c8>
 800e1f6:	4602      	mov	r2, r0
 800e1f8:	460b      	mov	r3, r1
 800e1fa:	4610      	mov	r0, r2
 800e1fc:	4619      	mov	r1, r3
 800e1fe:	f7f2 f85b 	bl	80002b8 <__aeabi_dsub>
 800e202:	4602      	mov	r2, r0
 800e204:	460b      	mov	r3, r1
 800e206:	e794      	b.n	800e132 <__ieee754_pow+0xf2>
 800e208:	2c01      	cmp	r4, #1
 800e20a:	f47f af36 	bne.w	800e07a <__ieee754_pow+0x3a>
 800e20e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e212:	4619      	mov	r1, r3
 800e214:	e731      	b.n	800e07a <__ieee754_pow+0x3a>
 800e216:	0feb      	lsrs	r3, r5, #31
 800e218:	3b01      	subs	r3, #1
 800e21a:	ea53 0204 	orrs.w	r2, r3, r4
 800e21e:	d102      	bne.n	800e226 <__ieee754_pow+0x1e6>
 800e220:	4632      	mov	r2, r6
 800e222:	463b      	mov	r3, r7
 800e224:	e7e9      	b.n	800e1fa <__ieee754_pow+0x1ba>
 800e226:	3c01      	subs	r4, #1
 800e228:	431c      	orrs	r4, r3
 800e22a:	d016      	beq.n	800e25a <__ieee754_pow+0x21a>
 800e22c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800e2b8 <__ieee754_pow+0x278>
 800e230:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800e234:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e238:	f240 8112 	bls.w	800e460 <__ieee754_pow+0x420>
 800e23c:	4b28      	ldr	r3, [pc, #160]	@ (800e2e0 <__ieee754_pow+0x2a0>)
 800e23e:	459a      	cmp	sl, r3
 800e240:	4b25      	ldr	r3, [pc, #148]	@ (800e2d8 <__ieee754_pow+0x298>)
 800e242:	d916      	bls.n	800e272 <__ieee754_pow+0x232>
 800e244:	4598      	cmp	r8, r3
 800e246:	d80b      	bhi.n	800e260 <__ieee754_pow+0x220>
 800e248:	f1b9 0f00 	cmp.w	r9, #0
 800e24c:	da0b      	bge.n	800e266 <__ieee754_pow+0x226>
 800e24e:	2000      	movs	r0, #0
 800e250:	b011      	add	sp, #68	@ 0x44
 800e252:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e256:	f000 be6f 	b.w	800ef38 <__math_oflow>
 800e25a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800e2c0 <__ieee754_pow+0x280>
 800e25e:	e7e7      	b.n	800e230 <__ieee754_pow+0x1f0>
 800e260:	f1b9 0f00 	cmp.w	r9, #0
 800e264:	dcf3      	bgt.n	800e24e <__ieee754_pow+0x20e>
 800e266:	2000      	movs	r0, #0
 800e268:	b011      	add	sp, #68	@ 0x44
 800e26a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e26e:	f000 be5b 	b.w	800ef28 <__math_uflow>
 800e272:	4598      	cmp	r8, r3
 800e274:	d20c      	bcs.n	800e290 <__ieee754_pow+0x250>
 800e276:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e27a:	2200      	movs	r2, #0
 800e27c:	2300      	movs	r3, #0
 800e27e:	f7f2 fc45 	bl	8000b0c <__aeabi_dcmplt>
 800e282:	3800      	subs	r0, #0
 800e284:	bf18      	it	ne
 800e286:	2001      	movne	r0, #1
 800e288:	f1b9 0f00 	cmp.w	r9, #0
 800e28c:	daec      	bge.n	800e268 <__ieee754_pow+0x228>
 800e28e:	e7df      	b.n	800e250 <__ieee754_pow+0x210>
 800e290:	4b10      	ldr	r3, [pc, #64]	@ (800e2d4 <__ieee754_pow+0x294>)
 800e292:	4598      	cmp	r8, r3
 800e294:	f04f 0200 	mov.w	r2, #0
 800e298:	d924      	bls.n	800e2e4 <__ieee754_pow+0x2a4>
 800e29a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e29e:	2300      	movs	r3, #0
 800e2a0:	f7f2 fc34 	bl	8000b0c <__aeabi_dcmplt>
 800e2a4:	3800      	subs	r0, #0
 800e2a6:	bf18      	it	ne
 800e2a8:	2001      	movne	r0, #1
 800e2aa:	f1b9 0f00 	cmp.w	r9, #0
 800e2ae:	dccf      	bgt.n	800e250 <__ieee754_pow+0x210>
 800e2b0:	e7da      	b.n	800e268 <__ieee754_pow+0x228>
 800e2b2:	bf00      	nop
 800e2b4:	f3af 8000 	nop.w
 800e2b8:	00000000 	.word	0x00000000
 800e2bc:	3ff00000 	.word	0x3ff00000
 800e2c0:	00000000 	.word	0x00000000
 800e2c4:	bff00000 	.word	0xbff00000
 800e2c8:	fff00000 	.word	0xfff00000
 800e2cc:	7ff00000 	.word	0x7ff00000
 800e2d0:	433fffff 	.word	0x433fffff
 800e2d4:	3ff00000 	.word	0x3ff00000
 800e2d8:	3fefffff 	.word	0x3fefffff
 800e2dc:	3fe00000 	.word	0x3fe00000
 800e2e0:	43f00000 	.word	0x43f00000
 800e2e4:	4b5a      	ldr	r3, [pc, #360]	@ (800e450 <__ieee754_pow+0x410>)
 800e2e6:	f7f1 ffe7 	bl	80002b8 <__aeabi_dsub>
 800e2ea:	a351      	add	r3, pc, #324	@ (adr r3, 800e430 <__ieee754_pow+0x3f0>)
 800e2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2f0:	4604      	mov	r4, r0
 800e2f2:	460d      	mov	r5, r1
 800e2f4:	f7f2 f998 	bl	8000628 <__aeabi_dmul>
 800e2f8:	a34f      	add	r3, pc, #316	@ (adr r3, 800e438 <__ieee754_pow+0x3f8>)
 800e2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2fe:	4606      	mov	r6, r0
 800e300:	460f      	mov	r7, r1
 800e302:	4620      	mov	r0, r4
 800e304:	4629      	mov	r1, r5
 800e306:	f7f2 f98f 	bl	8000628 <__aeabi_dmul>
 800e30a:	4b52      	ldr	r3, [pc, #328]	@ (800e454 <__ieee754_pow+0x414>)
 800e30c:	4682      	mov	sl, r0
 800e30e:	468b      	mov	fp, r1
 800e310:	2200      	movs	r2, #0
 800e312:	4620      	mov	r0, r4
 800e314:	4629      	mov	r1, r5
 800e316:	f7f2 f987 	bl	8000628 <__aeabi_dmul>
 800e31a:	4602      	mov	r2, r0
 800e31c:	460b      	mov	r3, r1
 800e31e:	a148      	add	r1, pc, #288	@ (adr r1, 800e440 <__ieee754_pow+0x400>)
 800e320:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e324:	f7f1 ffc8 	bl	80002b8 <__aeabi_dsub>
 800e328:	4622      	mov	r2, r4
 800e32a:	462b      	mov	r3, r5
 800e32c:	f7f2 f97c 	bl	8000628 <__aeabi_dmul>
 800e330:	4602      	mov	r2, r0
 800e332:	460b      	mov	r3, r1
 800e334:	2000      	movs	r0, #0
 800e336:	4948      	ldr	r1, [pc, #288]	@ (800e458 <__ieee754_pow+0x418>)
 800e338:	f7f1 ffbe 	bl	80002b8 <__aeabi_dsub>
 800e33c:	4622      	mov	r2, r4
 800e33e:	4680      	mov	r8, r0
 800e340:	4689      	mov	r9, r1
 800e342:	462b      	mov	r3, r5
 800e344:	4620      	mov	r0, r4
 800e346:	4629      	mov	r1, r5
 800e348:	f7f2 f96e 	bl	8000628 <__aeabi_dmul>
 800e34c:	4602      	mov	r2, r0
 800e34e:	460b      	mov	r3, r1
 800e350:	4640      	mov	r0, r8
 800e352:	4649      	mov	r1, r9
 800e354:	f7f2 f968 	bl	8000628 <__aeabi_dmul>
 800e358:	a33b      	add	r3, pc, #236	@ (adr r3, 800e448 <__ieee754_pow+0x408>)
 800e35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e35e:	f7f2 f963 	bl	8000628 <__aeabi_dmul>
 800e362:	4602      	mov	r2, r0
 800e364:	460b      	mov	r3, r1
 800e366:	4650      	mov	r0, sl
 800e368:	4659      	mov	r1, fp
 800e36a:	f7f1 ffa5 	bl	80002b8 <__aeabi_dsub>
 800e36e:	4602      	mov	r2, r0
 800e370:	460b      	mov	r3, r1
 800e372:	4680      	mov	r8, r0
 800e374:	4689      	mov	r9, r1
 800e376:	4630      	mov	r0, r6
 800e378:	4639      	mov	r1, r7
 800e37a:	f7f1 ff9f 	bl	80002bc <__adddf3>
 800e37e:	2400      	movs	r4, #0
 800e380:	4632      	mov	r2, r6
 800e382:	463b      	mov	r3, r7
 800e384:	4620      	mov	r0, r4
 800e386:	460d      	mov	r5, r1
 800e388:	f7f1 ff96 	bl	80002b8 <__aeabi_dsub>
 800e38c:	4602      	mov	r2, r0
 800e38e:	460b      	mov	r3, r1
 800e390:	4640      	mov	r0, r8
 800e392:	4649      	mov	r1, r9
 800e394:	f7f1 ff90 	bl	80002b8 <__aeabi_dsub>
 800e398:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e39c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e3a0:	2300      	movs	r3, #0
 800e3a2:	9304      	str	r3, [sp, #16]
 800e3a4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800e3a8:	4606      	mov	r6, r0
 800e3aa:	460f      	mov	r7, r1
 800e3ac:	4652      	mov	r2, sl
 800e3ae:	465b      	mov	r3, fp
 800e3b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e3b4:	f7f1 ff80 	bl	80002b8 <__aeabi_dsub>
 800e3b8:	4622      	mov	r2, r4
 800e3ba:	462b      	mov	r3, r5
 800e3bc:	f7f2 f934 	bl	8000628 <__aeabi_dmul>
 800e3c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e3c4:	4680      	mov	r8, r0
 800e3c6:	4689      	mov	r9, r1
 800e3c8:	4630      	mov	r0, r6
 800e3ca:	4639      	mov	r1, r7
 800e3cc:	f7f2 f92c 	bl	8000628 <__aeabi_dmul>
 800e3d0:	4602      	mov	r2, r0
 800e3d2:	460b      	mov	r3, r1
 800e3d4:	4640      	mov	r0, r8
 800e3d6:	4649      	mov	r1, r9
 800e3d8:	f7f1 ff70 	bl	80002bc <__adddf3>
 800e3dc:	4652      	mov	r2, sl
 800e3de:	465b      	mov	r3, fp
 800e3e0:	4606      	mov	r6, r0
 800e3e2:	460f      	mov	r7, r1
 800e3e4:	4620      	mov	r0, r4
 800e3e6:	4629      	mov	r1, r5
 800e3e8:	f7f2 f91e 	bl	8000628 <__aeabi_dmul>
 800e3ec:	460b      	mov	r3, r1
 800e3ee:	4602      	mov	r2, r0
 800e3f0:	4680      	mov	r8, r0
 800e3f2:	4689      	mov	r9, r1
 800e3f4:	4630      	mov	r0, r6
 800e3f6:	4639      	mov	r1, r7
 800e3f8:	f7f1 ff60 	bl	80002bc <__adddf3>
 800e3fc:	4b17      	ldr	r3, [pc, #92]	@ (800e45c <__ieee754_pow+0x41c>)
 800e3fe:	4299      	cmp	r1, r3
 800e400:	4604      	mov	r4, r0
 800e402:	460d      	mov	r5, r1
 800e404:	468a      	mov	sl, r1
 800e406:	468b      	mov	fp, r1
 800e408:	f340 82ef 	ble.w	800e9ea <__ieee754_pow+0x9aa>
 800e40c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800e410:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800e414:	4303      	orrs	r3, r0
 800e416:	f000 81e8 	beq.w	800e7ea <__ieee754_pow+0x7aa>
 800e41a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e41e:	2200      	movs	r2, #0
 800e420:	2300      	movs	r3, #0
 800e422:	f7f2 fb73 	bl	8000b0c <__aeabi_dcmplt>
 800e426:	3800      	subs	r0, #0
 800e428:	bf18      	it	ne
 800e42a:	2001      	movne	r0, #1
 800e42c:	e710      	b.n	800e250 <__ieee754_pow+0x210>
 800e42e:	bf00      	nop
 800e430:	60000000 	.word	0x60000000
 800e434:	3ff71547 	.word	0x3ff71547
 800e438:	f85ddf44 	.word	0xf85ddf44
 800e43c:	3e54ae0b 	.word	0x3e54ae0b
 800e440:	55555555 	.word	0x55555555
 800e444:	3fd55555 	.word	0x3fd55555
 800e448:	652b82fe 	.word	0x652b82fe
 800e44c:	3ff71547 	.word	0x3ff71547
 800e450:	3ff00000 	.word	0x3ff00000
 800e454:	3fd00000 	.word	0x3fd00000
 800e458:	3fe00000 	.word	0x3fe00000
 800e45c:	408fffff 	.word	0x408fffff
 800e460:	4bd5      	ldr	r3, [pc, #852]	@ (800e7b8 <__ieee754_pow+0x778>)
 800e462:	402b      	ands	r3, r5
 800e464:	2200      	movs	r2, #0
 800e466:	b92b      	cbnz	r3, 800e474 <__ieee754_pow+0x434>
 800e468:	4bd4      	ldr	r3, [pc, #848]	@ (800e7bc <__ieee754_pow+0x77c>)
 800e46a:	f7f2 f8dd 	bl	8000628 <__aeabi_dmul>
 800e46e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800e472:	468b      	mov	fp, r1
 800e474:	ea4f 532b 	mov.w	r3, fp, asr #20
 800e478:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800e47c:	4413      	add	r3, r2
 800e47e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e480:	4bcf      	ldr	r3, [pc, #828]	@ (800e7c0 <__ieee754_pow+0x780>)
 800e482:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800e486:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800e48a:	459b      	cmp	fp, r3
 800e48c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e490:	dd08      	ble.n	800e4a4 <__ieee754_pow+0x464>
 800e492:	4bcc      	ldr	r3, [pc, #816]	@ (800e7c4 <__ieee754_pow+0x784>)
 800e494:	459b      	cmp	fp, r3
 800e496:	f340 81a5 	ble.w	800e7e4 <__ieee754_pow+0x7a4>
 800e49a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e49c:	3301      	adds	r3, #1
 800e49e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e4a0:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800e4a4:	f04f 0a00 	mov.w	sl, #0
 800e4a8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800e4ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e4ae:	4bc6      	ldr	r3, [pc, #792]	@ (800e7c8 <__ieee754_pow+0x788>)
 800e4b0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e4b4:	ed93 7b00 	vldr	d7, [r3]
 800e4b8:	4629      	mov	r1, r5
 800e4ba:	ec53 2b17 	vmov	r2, r3, d7
 800e4be:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e4c2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e4c6:	f7f1 fef7 	bl	80002b8 <__aeabi_dsub>
 800e4ca:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e4ce:	4606      	mov	r6, r0
 800e4d0:	460f      	mov	r7, r1
 800e4d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e4d6:	f7f1 fef1 	bl	80002bc <__adddf3>
 800e4da:	4602      	mov	r2, r0
 800e4dc:	460b      	mov	r3, r1
 800e4de:	2000      	movs	r0, #0
 800e4e0:	49ba      	ldr	r1, [pc, #744]	@ (800e7cc <__ieee754_pow+0x78c>)
 800e4e2:	f7f2 f9cb 	bl	800087c <__aeabi_ddiv>
 800e4e6:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800e4ea:	4602      	mov	r2, r0
 800e4ec:	460b      	mov	r3, r1
 800e4ee:	4630      	mov	r0, r6
 800e4f0:	4639      	mov	r1, r7
 800e4f2:	f7f2 f899 	bl	8000628 <__aeabi_dmul>
 800e4f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e4fa:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800e4fe:	106d      	asrs	r5, r5, #1
 800e500:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800e504:	f04f 0b00 	mov.w	fp, #0
 800e508:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800e50c:	4661      	mov	r1, ip
 800e50e:	2200      	movs	r2, #0
 800e510:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800e514:	4658      	mov	r0, fp
 800e516:	46e1      	mov	r9, ip
 800e518:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800e51c:	4614      	mov	r4, r2
 800e51e:	461d      	mov	r5, r3
 800e520:	f7f2 f882 	bl	8000628 <__aeabi_dmul>
 800e524:	4602      	mov	r2, r0
 800e526:	460b      	mov	r3, r1
 800e528:	4630      	mov	r0, r6
 800e52a:	4639      	mov	r1, r7
 800e52c:	f7f1 fec4 	bl	80002b8 <__aeabi_dsub>
 800e530:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e534:	4606      	mov	r6, r0
 800e536:	460f      	mov	r7, r1
 800e538:	4620      	mov	r0, r4
 800e53a:	4629      	mov	r1, r5
 800e53c:	f7f1 febc 	bl	80002b8 <__aeabi_dsub>
 800e540:	4602      	mov	r2, r0
 800e542:	460b      	mov	r3, r1
 800e544:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e548:	f7f1 feb6 	bl	80002b8 <__aeabi_dsub>
 800e54c:	465a      	mov	r2, fp
 800e54e:	464b      	mov	r3, r9
 800e550:	f7f2 f86a 	bl	8000628 <__aeabi_dmul>
 800e554:	4602      	mov	r2, r0
 800e556:	460b      	mov	r3, r1
 800e558:	4630      	mov	r0, r6
 800e55a:	4639      	mov	r1, r7
 800e55c:	f7f1 feac 	bl	80002b8 <__aeabi_dsub>
 800e560:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e564:	f7f2 f860 	bl	8000628 <__aeabi_dmul>
 800e568:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e56c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e570:	4610      	mov	r0, r2
 800e572:	4619      	mov	r1, r3
 800e574:	f7f2 f858 	bl	8000628 <__aeabi_dmul>
 800e578:	a37d      	add	r3, pc, #500	@ (adr r3, 800e770 <__ieee754_pow+0x730>)
 800e57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e57e:	4604      	mov	r4, r0
 800e580:	460d      	mov	r5, r1
 800e582:	f7f2 f851 	bl	8000628 <__aeabi_dmul>
 800e586:	a37c      	add	r3, pc, #496	@ (adr r3, 800e778 <__ieee754_pow+0x738>)
 800e588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e58c:	f7f1 fe96 	bl	80002bc <__adddf3>
 800e590:	4622      	mov	r2, r4
 800e592:	462b      	mov	r3, r5
 800e594:	f7f2 f848 	bl	8000628 <__aeabi_dmul>
 800e598:	a379      	add	r3, pc, #484	@ (adr r3, 800e780 <__ieee754_pow+0x740>)
 800e59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e59e:	f7f1 fe8d 	bl	80002bc <__adddf3>
 800e5a2:	4622      	mov	r2, r4
 800e5a4:	462b      	mov	r3, r5
 800e5a6:	f7f2 f83f 	bl	8000628 <__aeabi_dmul>
 800e5aa:	a377      	add	r3, pc, #476	@ (adr r3, 800e788 <__ieee754_pow+0x748>)
 800e5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5b0:	f7f1 fe84 	bl	80002bc <__adddf3>
 800e5b4:	4622      	mov	r2, r4
 800e5b6:	462b      	mov	r3, r5
 800e5b8:	f7f2 f836 	bl	8000628 <__aeabi_dmul>
 800e5bc:	a374      	add	r3, pc, #464	@ (adr r3, 800e790 <__ieee754_pow+0x750>)
 800e5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5c2:	f7f1 fe7b 	bl	80002bc <__adddf3>
 800e5c6:	4622      	mov	r2, r4
 800e5c8:	462b      	mov	r3, r5
 800e5ca:	f7f2 f82d 	bl	8000628 <__aeabi_dmul>
 800e5ce:	a372      	add	r3, pc, #456	@ (adr r3, 800e798 <__ieee754_pow+0x758>)
 800e5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5d4:	f7f1 fe72 	bl	80002bc <__adddf3>
 800e5d8:	4622      	mov	r2, r4
 800e5da:	4606      	mov	r6, r0
 800e5dc:	460f      	mov	r7, r1
 800e5de:	462b      	mov	r3, r5
 800e5e0:	4620      	mov	r0, r4
 800e5e2:	4629      	mov	r1, r5
 800e5e4:	f7f2 f820 	bl	8000628 <__aeabi_dmul>
 800e5e8:	4602      	mov	r2, r0
 800e5ea:	460b      	mov	r3, r1
 800e5ec:	4630      	mov	r0, r6
 800e5ee:	4639      	mov	r1, r7
 800e5f0:	f7f2 f81a 	bl	8000628 <__aeabi_dmul>
 800e5f4:	465a      	mov	r2, fp
 800e5f6:	4604      	mov	r4, r0
 800e5f8:	460d      	mov	r5, r1
 800e5fa:	464b      	mov	r3, r9
 800e5fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e600:	f7f1 fe5c 	bl	80002bc <__adddf3>
 800e604:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e608:	f7f2 f80e 	bl	8000628 <__aeabi_dmul>
 800e60c:	4622      	mov	r2, r4
 800e60e:	462b      	mov	r3, r5
 800e610:	f7f1 fe54 	bl	80002bc <__adddf3>
 800e614:	465a      	mov	r2, fp
 800e616:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e61a:	464b      	mov	r3, r9
 800e61c:	4658      	mov	r0, fp
 800e61e:	4649      	mov	r1, r9
 800e620:	f7f2 f802 	bl	8000628 <__aeabi_dmul>
 800e624:	4b6a      	ldr	r3, [pc, #424]	@ (800e7d0 <__ieee754_pow+0x790>)
 800e626:	2200      	movs	r2, #0
 800e628:	4606      	mov	r6, r0
 800e62a:	460f      	mov	r7, r1
 800e62c:	f7f1 fe46 	bl	80002bc <__adddf3>
 800e630:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e634:	f7f1 fe42 	bl	80002bc <__adddf3>
 800e638:	46d8      	mov	r8, fp
 800e63a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800e63e:	460d      	mov	r5, r1
 800e640:	465a      	mov	r2, fp
 800e642:	460b      	mov	r3, r1
 800e644:	4640      	mov	r0, r8
 800e646:	4649      	mov	r1, r9
 800e648:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800e64c:	f7f1 ffec 	bl	8000628 <__aeabi_dmul>
 800e650:	465c      	mov	r4, fp
 800e652:	4680      	mov	r8, r0
 800e654:	4689      	mov	r9, r1
 800e656:	4b5e      	ldr	r3, [pc, #376]	@ (800e7d0 <__ieee754_pow+0x790>)
 800e658:	2200      	movs	r2, #0
 800e65a:	4620      	mov	r0, r4
 800e65c:	4629      	mov	r1, r5
 800e65e:	f7f1 fe2b 	bl	80002b8 <__aeabi_dsub>
 800e662:	4632      	mov	r2, r6
 800e664:	463b      	mov	r3, r7
 800e666:	f7f1 fe27 	bl	80002b8 <__aeabi_dsub>
 800e66a:	4602      	mov	r2, r0
 800e66c:	460b      	mov	r3, r1
 800e66e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e672:	f7f1 fe21 	bl	80002b8 <__aeabi_dsub>
 800e676:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e67a:	f7f1 ffd5 	bl	8000628 <__aeabi_dmul>
 800e67e:	4622      	mov	r2, r4
 800e680:	4606      	mov	r6, r0
 800e682:	460f      	mov	r7, r1
 800e684:	462b      	mov	r3, r5
 800e686:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e68a:	f7f1 ffcd 	bl	8000628 <__aeabi_dmul>
 800e68e:	4602      	mov	r2, r0
 800e690:	460b      	mov	r3, r1
 800e692:	4630      	mov	r0, r6
 800e694:	4639      	mov	r1, r7
 800e696:	f7f1 fe11 	bl	80002bc <__adddf3>
 800e69a:	4606      	mov	r6, r0
 800e69c:	460f      	mov	r7, r1
 800e69e:	4602      	mov	r2, r0
 800e6a0:	460b      	mov	r3, r1
 800e6a2:	4640      	mov	r0, r8
 800e6a4:	4649      	mov	r1, r9
 800e6a6:	f7f1 fe09 	bl	80002bc <__adddf3>
 800e6aa:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800e6ae:	a33c      	add	r3, pc, #240	@ (adr r3, 800e7a0 <__ieee754_pow+0x760>)
 800e6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6b4:	4658      	mov	r0, fp
 800e6b6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800e6ba:	460d      	mov	r5, r1
 800e6bc:	f7f1 ffb4 	bl	8000628 <__aeabi_dmul>
 800e6c0:	465c      	mov	r4, fp
 800e6c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e6c6:	4642      	mov	r2, r8
 800e6c8:	464b      	mov	r3, r9
 800e6ca:	4620      	mov	r0, r4
 800e6cc:	4629      	mov	r1, r5
 800e6ce:	f7f1 fdf3 	bl	80002b8 <__aeabi_dsub>
 800e6d2:	4602      	mov	r2, r0
 800e6d4:	460b      	mov	r3, r1
 800e6d6:	4630      	mov	r0, r6
 800e6d8:	4639      	mov	r1, r7
 800e6da:	f7f1 fded 	bl	80002b8 <__aeabi_dsub>
 800e6de:	a332      	add	r3, pc, #200	@ (adr r3, 800e7a8 <__ieee754_pow+0x768>)
 800e6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6e4:	f7f1 ffa0 	bl	8000628 <__aeabi_dmul>
 800e6e8:	a331      	add	r3, pc, #196	@ (adr r3, 800e7b0 <__ieee754_pow+0x770>)
 800e6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6ee:	4606      	mov	r6, r0
 800e6f0:	460f      	mov	r7, r1
 800e6f2:	4620      	mov	r0, r4
 800e6f4:	4629      	mov	r1, r5
 800e6f6:	f7f1 ff97 	bl	8000628 <__aeabi_dmul>
 800e6fa:	4602      	mov	r2, r0
 800e6fc:	460b      	mov	r3, r1
 800e6fe:	4630      	mov	r0, r6
 800e700:	4639      	mov	r1, r7
 800e702:	f7f1 fddb 	bl	80002bc <__adddf3>
 800e706:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e708:	4b32      	ldr	r3, [pc, #200]	@ (800e7d4 <__ieee754_pow+0x794>)
 800e70a:	4413      	add	r3, r2
 800e70c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e710:	f7f1 fdd4 	bl	80002bc <__adddf3>
 800e714:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e718:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e71a:	f7f1 ff1b 	bl	8000554 <__aeabi_i2d>
 800e71e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e720:	4b2d      	ldr	r3, [pc, #180]	@ (800e7d8 <__ieee754_pow+0x798>)
 800e722:	4413      	add	r3, r2
 800e724:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e728:	4606      	mov	r6, r0
 800e72a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e72e:	460f      	mov	r7, r1
 800e730:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e734:	f7f1 fdc2 	bl	80002bc <__adddf3>
 800e738:	4642      	mov	r2, r8
 800e73a:	464b      	mov	r3, r9
 800e73c:	f7f1 fdbe 	bl	80002bc <__adddf3>
 800e740:	4632      	mov	r2, r6
 800e742:	463b      	mov	r3, r7
 800e744:	f7f1 fdba 	bl	80002bc <__adddf3>
 800e748:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800e74c:	4632      	mov	r2, r6
 800e74e:	463b      	mov	r3, r7
 800e750:	4658      	mov	r0, fp
 800e752:	460d      	mov	r5, r1
 800e754:	f7f1 fdb0 	bl	80002b8 <__aeabi_dsub>
 800e758:	4642      	mov	r2, r8
 800e75a:	464b      	mov	r3, r9
 800e75c:	f7f1 fdac 	bl	80002b8 <__aeabi_dsub>
 800e760:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e764:	f7f1 fda8 	bl	80002b8 <__aeabi_dsub>
 800e768:	465c      	mov	r4, fp
 800e76a:	4602      	mov	r2, r0
 800e76c:	e036      	b.n	800e7dc <__ieee754_pow+0x79c>
 800e76e:	bf00      	nop
 800e770:	4a454eef 	.word	0x4a454eef
 800e774:	3fca7e28 	.word	0x3fca7e28
 800e778:	93c9db65 	.word	0x93c9db65
 800e77c:	3fcd864a 	.word	0x3fcd864a
 800e780:	a91d4101 	.word	0xa91d4101
 800e784:	3fd17460 	.word	0x3fd17460
 800e788:	518f264d 	.word	0x518f264d
 800e78c:	3fd55555 	.word	0x3fd55555
 800e790:	db6fabff 	.word	0xdb6fabff
 800e794:	3fdb6db6 	.word	0x3fdb6db6
 800e798:	33333303 	.word	0x33333303
 800e79c:	3fe33333 	.word	0x3fe33333
 800e7a0:	e0000000 	.word	0xe0000000
 800e7a4:	3feec709 	.word	0x3feec709
 800e7a8:	dc3a03fd 	.word	0xdc3a03fd
 800e7ac:	3feec709 	.word	0x3feec709
 800e7b0:	145b01f5 	.word	0x145b01f5
 800e7b4:	be3e2fe0 	.word	0xbe3e2fe0
 800e7b8:	7ff00000 	.word	0x7ff00000
 800e7bc:	43400000 	.word	0x43400000
 800e7c0:	0003988e 	.word	0x0003988e
 800e7c4:	000bb679 	.word	0x000bb679
 800e7c8:	0800f398 	.word	0x0800f398
 800e7cc:	3ff00000 	.word	0x3ff00000
 800e7d0:	40080000 	.word	0x40080000
 800e7d4:	0800f378 	.word	0x0800f378
 800e7d8:	0800f388 	.word	0x0800f388
 800e7dc:	460b      	mov	r3, r1
 800e7de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e7e2:	e5d7      	b.n	800e394 <__ieee754_pow+0x354>
 800e7e4:	f04f 0a01 	mov.w	sl, #1
 800e7e8:	e65e      	b.n	800e4a8 <__ieee754_pow+0x468>
 800e7ea:	a3b4      	add	r3, pc, #720	@ (adr r3, 800eabc <__ieee754_pow+0xa7c>)
 800e7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7f0:	4630      	mov	r0, r6
 800e7f2:	4639      	mov	r1, r7
 800e7f4:	f7f1 fd62 	bl	80002bc <__adddf3>
 800e7f8:	4642      	mov	r2, r8
 800e7fa:	e9cd 0100 	strd	r0, r1, [sp]
 800e7fe:	464b      	mov	r3, r9
 800e800:	4620      	mov	r0, r4
 800e802:	4629      	mov	r1, r5
 800e804:	f7f1 fd58 	bl	80002b8 <__aeabi_dsub>
 800e808:	4602      	mov	r2, r0
 800e80a:	460b      	mov	r3, r1
 800e80c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e810:	f7f2 f99a 	bl	8000b48 <__aeabi_dcmpgt>
 800e814:	2800      	cmp	r0, #0
 800e816:	f47f ae00 	bne.w	800e41a <__ieee754_pow+0x3da>
 800e81a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800e81e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800e822:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800e826:	fa43 fa0a 	asr.w	sl, r3, sl
 800e82a:	44da      	add	sl, fp
 800e82c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800e830:	489d      	ldr	r0, [pc, #628]	@ (800eaa8 <__ieee754_pow+0xa68>)
 800e832:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800e836:	4108      	asrs	r0, r1
 800e838:	ea00 030a 	and.w	r3, r0, sl
 800e83c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800e840:	f1c1 0114 	rsb	r1, r1, #20
 800e844:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800e848:	fa4a fa01 	asr.w	sl, sl, r1
 800e84c:	f1bb 0f00 	cmp.w	fp, #0
 800e850:	4640      	mov	r0, r8
 800e852:	4649      	mov	r1, r9
 800e854:	f04f 0200 	mov.w	r2, #0
 800e858:	bfb8      	it	lt
 800e85a:	f1ca 0a00 	rsblt	sl, sl, #0
 800e85e:	f7f1 fd2b 	bl	80002b8 <__aeabi_dsub>
 800e862:	4680      	mov	r8, r0
 800e864:	4689      	mov	r9, r1
 800e866:	4632      	mov	r2, r6
 800e868:	463b      	mov	r3, r7
 800e86a:	4640      	mov	r0, r8
 800e86c:	4649      	mov	r1, r9
 800e86e:	f7f1 fd25 	bl	80002bc <__adddf3>
 800e872:	2400      	movs	r4, #0
 800e874:	a37c      	add	r3, pc, #496	@ (adr r3, 800ea68 <__ieee754_pow+0xa28>)
 800e876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e87a:	4620      	mov	r0, r4
 800e87c:	460d      	mov	r5, r1
 800e87e:	f7f1 fed3 	bl	8000628 <__aeabi_dmul>
 800e882:	4642      	mov	r2, r8
 800e884:	e9cd 0100 	strd	r0, r1, [sp]
 800e888:	464b      	mov	r3, r9
 800e88a:	4620      	mov	r0, r4
 800e88c:	4629      	mov	r1, r5
 800e88e:	f7f1 fd13 	bl	80002b8 <__aeabi_dsub>
 800e892:	4602      	mov	r2, r0
 800e894:	460b      	mov	r3, r1
 800e896:	4630      	mov	r0, r6
 800e898:	4639      	mov	r1, r7
 800e89a:	f7f1 fd0d 	bl	80002b8 <__aeabi_dsub>
 800e89e:	a374      	add	r3, pc, #464	@ (adr r3, 800ea70 <__ieee754_pow+0xa30>)
 800e8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8a4:	f7f1 fec0 	bl	8000628 <__aeabi_dmul>
 800e8a8:	a373      	add	r3, pc, #460	@ (adr r3, 800ea78 <__ieee754_pow+0xa38>)
 800e8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8ae:	4680      	mov	r8, r0
 800e8b0:	4689      	mov	r9, r1
 800e8b2:	4620      	mov	r0, r4
 800e8b4:	4629      	mov	r1, r5
 800e8b6:	f7f1 feb7 	bl	8000628 <__aeabi_dmul>
 800e8ba:	4602      	mov	r2, r0
 800e8bc:	460b      	mov	r3, r1
 800e8be:	4640      	mov	r0, r8
 800e8c0:	4649      	mov	r1, r9
 800e8c2:	f7f1 fcfb 	bl	80002bc <__adddf3>
 800e8c6:	4604      	mov	r4, r0
 800e8c8:	460d      	mov	r5, r1
 800e8ca:	4602      	mov	r2, r0
 800e8cc:	460b      	mov	r3, r1
 800e8ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e8d2:	f7f1 fcf3 	bl	80002bc <__adddf3>
 800e8d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e8da:	4680      	mov	r8, r0
 800e8dc:	4689      	mov	r9, r1
 800e8de:	f7f1 fceb 	bl	80002b8 <__aeabi_dsub>
 800e8e2:	4602      	mov	r2, r0
 800e8e4:	460b      	mov	r3, r1
 800e8e6:	4620      	mov	r0, r4
 800e8e8:	4629      	mov	r1, r5
 800e8ea:	f7f1 fce5 	bl	80002b8 <__aeabi_dsub>
 800e8ee:	4642      	mov	r2, r8
 800e8f0:	4606      	mov	r6, r0
 800e8f2:	460f      	mov	r7, r1
 800e8f4:	464b      	mov	r3, r9
 800e8f6:	4640      	mov	r0, r8
 800e8f8:	4649      	mov	r1, r9
 800e8fa:	f7f1 fe95 	bl	8000628 <__aeabi_dmul>
 800e8fe:	a360      	add	r3, pc, #384	@ (adr r3, 800ea80 <__ieee754_pow+0xa40>)
 800e900:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e904:	4604      	mov	r4, r0
 800e906:	460d      	mov	r5, r1
 800e908:	f7f1 fe8e 	bl	8000628 <__aeabi_dmul>
 800e90c:	a35e      	add	r3, pc, #376	@ (adr r3, 800ea88 <__ieee754_pow+0xa48>)
 800e90e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e912:	f7f1 fcd1 	bl	80002b8 <__aeabi_dsub>
 800e916:	4622      	mov	r2, r4
 800e918:	462b      	mov	r3, r5
 800e91a:	f7f1 fe85 	bl	8000628 <__aeabi_dmul>
 800e91e:	a35c      	add	r3, pc, #368	@ (adr r3, 800ea90 <__ieee754_pow+0xa50>)
 800e920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e924:	f7f1 fcca 	bl	80002bc <__adddf3>
 800e928:	4622      	mov	r2, r4
 800e92a:	462b      	mov	r3, r5
 800e92c:	f7f1 fe7c 	bl	8000628 <__aeabi_dmul>
 800e930:	a359      	add	r3, pc, #356	@ (adr r3, 800ea98 <__ieee754_pow+0xa58>)
 800e932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e936:	f7f1 fcbf 	bl	80002b8 <__aeabi_dsub>
 800e93a:	4622      	mov	r2, r4
 800e93c:	462b      	mov	r3, r5
 800e93e:	f7f1 fe73 	bl	8000628 <__aeabi_dmul>
 800e942:	a357      	add	r3, pc, #348	@ (adr r3, 800eaa0 <__ieee754_pow+0xa60>)
 800e944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e948:	f7f1 fcb8 	bl	80002bc <__adddf3>
 800e94c:	4622      	mov	r2, r4
 800e94e:	462b      	mov	r3, r5
 800e950:	f7f1 fe6a 	bl	8000628 <__aeabi_dmul>
 800e954:	4602      	mov	r2, r0
 800e956:	460b      	mov	r3, r1
 800e958:	4640      	mov	r0, r8
 800e95a:	4649      	mov	r1, r9
 800e95c:	f7f1 fcac 	bl	80002b8 <__aeabi_dsub>
 800e960:	4604      	mov	r4, r0
 800e962:	460d      	mov	r5, r1
 800e964:	4602      	mov	r2, r0
 800e966:	460b      	mov	r3, r1
 800e968:	4640      	mov	r0, r8
 800e96a:	4649      	mov	r1, r9
 800e96c:	f7f1 fe5c 	bl	8000628 <__aeabi_dmul>
 800e970:	2200      	movs	r2, #0
 800e972:	e9cd 0100 	strd	r0, r1, [sp]
 800e976:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e97a:	4620      	mov	r0, r4
 800e97c:	4629      	mov	r1, r5
 800e97e:	f7f1 fc9b 	bl	80002b8 <__aeabi_dsub>
 800e982:	4602      	mov	r2, r0
 800e984:	460b      	mov	r3, r1
 800e986:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e98a:	f7f1 ff77 	bl	800087c <__aeabi_ddiv>
 800e98e:	4632      	mov	r2, r6
 800e990:	4604      	mov	r4, r0
 800e992:	460d      	mov	r5, r1
 800e994:	463b      	mov	r3, r7
 800e996:	4640      	mov	r0, r8
 800e998:	4649      	mov	r1, r9
 800e99a:	f7f1 fe45 	bl	8000628 <__aeabi_dmul>
 800e99e:	4632      	mov	r2, r6
 800e9a0:	463b      	mov	r3, r7
 800e9a2:	f7f1 fc8b 	bl	80002bc <__adddf3>
 800e9a6:	4602      	mov	r2, r0
 800e9a8:	460b      	mov	r3, r1
 800e9aa:	4620      	mov	r0, r4
 800e9ac:	4629      	mov	r1, r5
 800e9ae:	f7f1 fc83 	bl	80002b8 <__aeabi_dsub>
 800e9b2:	4642      	mov	r2, r8
 800e9b4:	464b      	mov	r3, r9
 800e9b6:	f7f1 fc7f 	bl	80002b8 <__aeabi_dsub>
 800e9ba:	460b      	mov	r3, r1
 800e9bc:	4602      	mov	r2, r0
 800e9be:	493b      	ldr	r1, [pc, #236]	@ (800eaac <__ieee754_pow+0xa6c>)
 800e9c0:	2000      	movs	r0, #0
 800e9c2:	f7f1 fc79 	bl	80002b8 <__aeabi_dsub>
 800e9c6:	ec41 0b10 	vmov	d0, r0, r1
 800e9ca:	ee10 3a90 	vmov	r3, s1
 800e9ce:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800e9d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e9d6:	da30      	bge.n	800ea3a <__ieee754_pow+0x9fa>
 800e9d8:	4650      	mov	r0, sl
 800e9da:	f000 f9f9 	bl	800edd0 <scalbn>
 800e9de:	ec51 0b10 	vmov	r0, r1, d0
 800e9e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e9e6:	f7ff bbd2 	b.w	800e18e <__ieee754_pow+0x14e>
 800e9ea:	4c31      	ldr	r4, [pc, #196]	@ (800eab0 <__ieee754_pow+0xa70>)
 800e9ec:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e9f0:	42a3      	cmp	r3, r4
 800e9f2:	d91a      	bls.n	800ea2a <__ieee754_pow+0x9ea>
 800e9f4:	4b2f      	ldr	r3, [pc, #188]	@ (800eab4 <__ieee754_pow+0xa74>)
 800e9f6:	440b      	add	r3, r1
 800e9f8:	4303      	orrs	r3, r0
 800e9fa:	d009      	beq.n	800ea10 <__ieee754_pow+0x9d0>
 800e9fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ea00:	2200      	movs	r2, #0
 800ea02:	2300      	movs	r3, #0
 800ea04:	f7f2 f882 	bl	8000b0c <__aeabi_dcmplt>
 800ea08:	3800      	subs	r0, #0
 800ea0a:	bf18      	it	ne
 800ea0c:	2001      	movne	r0, #1
 800ea0e:	e42b      	b.n	800e268 <__ieee754_pow+0x228>
 800ea10:	4642      	mov	r2, r8
 800ea12:	464b      	mov	r3, r9
 800ea14:	f7f1 fc50 	bl	80002b8 <__aeabi_dsub>
 800ea18:	4632      	mov	r2, r6
 800ea1a:	463b      	mov	r3, r7
 800ea1c:	f7f2 f88a 	bl	8000b34 <__aeabi_dcmpge>
 800ea20:	2800      	cmp	r0, #0
 800ea22:	d1eb      	bne.n	800e9fc <__ieee754_pow+0x9bc>
 800ea24:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800eac4 <__ieee754_pow+0xa84>
 800ea28:	e6f7      	b.n	800e81a <__ieee754_pow+0x7da>
 800ea2a:	469a      	mov	sl, r3
 800ea2c:	4b22      	ldr	r3, [pc, #136]	@ (800eab8 <__ieee754_pow+0xa78>)
 800ea2e:	459a      	cmp	sl, r3
 800ea30:	f63f aef3 	bhi.w	800e81a <__ieee754_pow+0x7da>
 800ea34:	f8dd a010 	ldr.w	sl, [sp, #16]
 800ea38:	e715      	b.n	800e866 <__ieee754_pow+0x826>
 800ea3a:	ec51 0b10 	vmov	r0, r1, d0
 800ea3e:	4619      	mov	r1, r3
 800ea40:	e7cf      	b.n	800e9e2 <__ieee754_pow+0x9a2>
 800ea42:	491a      	ldr	r1, [pc, #104]	@ (800eaac <__ieee754_pow+0xa6c>)
 800ea44:	2000      	movs	r0, #0
 800ea46:	f7ff bb18 	b.w	800e07a <__ieee754_pow+0x3a>
 800ea4a:	2000      	movs	r0, #0
 800ea4c:	2100      	movs	r1, #0
 800ea4e:	f7ff bb14 	b.w	800e07a <__ieee754_pow+0x3a>
 800ea52:	4630      	mov	r0, r6
 800ea54:	4639      	mov	r1, r7
 800ea56:	f7ff bb10 	b.w	800e07a <__ieee754_pow+0x3a>
 800ea5a:	460c      	mov	r4, r1
 800ea5c:	f7ff bb5e 	b.w	800e11c <__ieee754_pow+0xdc>
 800ea60:	2400      	movs	r4, #0
 800ea62:	f7ff bb49 	b.w	800e0f8 <__ieee754_pow+0xb8>
 800ea66:	bf00      	nop
 800ea68:	00000000 	.word	0x00000000
 800ea6c:	3fe62e43 	.word	0x3fe62e43
 800ea70:	fefa39ef 	.word	0xfefa39ef
 800ea74:	3fe62e42 	.word	0x3fe62e42
 800ea78:	0ca86c39 	.word	0x0ca86c39
 800ea7c:	be205c61 	.word	0xbe205c61
 800ea80:	72bea4d0 	.word	0x72bea4d0
 800ea84:	3e663769 	.word	0x3e663769
 800ea88:	c5d26bf1 	.word	0xc5d26bf1
 800ea8c:	3ebbbd41 	.word	0x3ebbbd41
 800ea90:	af25de2c 	.word	0xaf25de2c
 800ea94:	3f11566a 	.word	0x3f11566a
 800ea98:	16bebd93 	.word	0x16bebd93
 800ea9c:	3f66c16c 	.word	0x3f66c16c
 800eaa0:	5555553e 	.word	0x5555553e
 800eaa4:	3fc55555 	.word	0x3fc55555
 800eaa8:	fff00000 	.word	0xfff00000
 800eaac:	3ff00000 	.word	0x3ff00000
 800eab0:	4090cbff 	.word	0x4090cbff
 800eab4:	3f6f3400 	.word	0x3f6f3400
 800eab8:	3fe00000 	.word	0x3fe00000
 800eabc:	652b82fe 	.word	0x652b82fe
 800eac0:	3c971547 	.word	0x3c971547
 800eac4:	4090cc00 	.word	0x4090cc00

0800eac8 <fabs>:
 800eac8:	ec51 0b10 	vmov	r0, r1, d0
 800eacc:	4602      	mov	r2, r0
 800eace:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ead2:	ec43 2b10 	vmov	d0, r2, r3
 800ead6:	4770      	bx	lr

0800ead8 <__ieee754_atan2f>:
 800ead8:	ee10 2a90 	vmov	r2, s1
 800eadc:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800eae0:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800eae4:	b510      	push	{r4, lr}
 800eae6:	eef0 7a40 	vmov.f32	s15, s0
 800eaea:	d806      	bhi.n	800eafa <__ieee754_atan2f+0x22>
 800eaec:	ee10 0a10 	vmov	r0, s0
 800eaf0:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800eaf4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800eaf8:	d904      	bls.n	800eb04 <__ieee754_atan2f+0x2c>
 800eafa:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800eafe:	eeb0 0a67 	vmov.f32	s0, s15
 800eb02:	bd10      	pop	{r4, pc}
 800eb04:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800eb08:	d103      	bne.n	800eb12 <__ieee754_atan2f+0x3a>
 800eb0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb0e:	f000 b883 	b.w	800ec18 <atanf>
 800eb12:	1794      	asrs	r4, r2, #30
 800eb14:	f004 0402 	and.w	r4, r4, #2
 800eb18:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800eb1c:	b943      	cbnz	r3, 800eb30 <__ieee754_atan2f+0x58>
 800eb1e:	2c02      	cmp	r4, #2
 800eb20:	d05e      	beq.n	800ebe0 <__ieee754_atan2f+0x108>
 800eb22:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800ebf4 <__ieee754_atan2f+0x11c>
 800eb26:	2c03      	cmp	r4, #3
 800eb28:	bf08      	it	eq
 800eb2a:	eef0 7a47 	vmoveq.f32	s15, s14
 800eb2e:	e7e6      	b.n	800eafe <__ieee754_atan2f+0x26>
 800eb30:	b941      	cbnz	r1, 800eb44 <__ieee754_atan2f+0x6c>
 800eb32:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800ebf8 <__ieee754_atan2f+0x120>
 800eb36:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800ebfc <__ieee754_atan2f+0x124>
 800eb3a:	2800      	cmp	r0, #0
 800eb3c:	bfb8      	it	lt
 800eb3e:	eef0 7a47 	vmovlt.f32	s15, s14
 800eb42:	e7dc      	b.n	800eafe <__ieee754_atan2f+0x26>
 800eb44:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800eb48:	d110      	bne.n	800eb6c <__ieee754_atan2f+0x94>
 800eb4a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800eb4e:	f104 34ff 	add.w	r4, r4, #4294967295
 800eb52:	d107      	bne.n	800eb64 <__ieee754_atan2f+0x8c>
 800eb54:	2c02      	cmp	r4, #2
 800eb56:	d846      	bhi.n	800ebe6 <__ieee754_atan2f+0x10e>
 800eb58:	4b29      	ldr	r3, [pc, #164]	@ (800ec00 <__ieee754_atan2f+0x128>)
 800eb5a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800eb5e:	edd3 7a00 	vldr	s15, [r3]
 800eb62:	e7cc      	b.n	800eafe <__ieee754_atan2f+0x26>
 800eb64:	2c02      	cmp	r4, #2
 800eb66:	d841      	bhi.n	800ebec <__ieee754_atan2f+0x114>
 800eb68:	4b26      	ldr	r3, [pc, #152]	@ (800ec04 <__ieee754_atan2f+0x12c>)
 800eb6a:	e7f6      	b.n	800eb5a <__ieee754_atan2f+0x82>
 800eb6c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800eb70:	d0df      	beq.n	800eb32 <__ieee754_atan2f+0x5a>
 800eb72:	1a5b      	subs	r3, r3, r1
 800eb74:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800eb78:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800eb7c:	da1a      	bge.n	800ebb4 <__ieee754_atan2f+0xdc>
 800eb7e:	2a00      	cmp	r2, #0
 800eb80:	da01      	bge.n	800eb86 <__ieee754_atan2f+0xae>
 800eb82:	313c      	adds	r1, #60	@ 0x3c
 800eb84:	db19      	blt.n	800ebba <__ieee754_atan2f+0xe2>
 800eb86:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800eb8a:	f000 f919 	bl	800edc0 <fabsf>
 800eb8e:	f000 f843 	bl	800ec18 <atanf>
 800eb92:	eef0 7a40 	vmov.f32	s15, s0
 800eb96:	2c01      	cmp	r4, #1
 800eb98:	d012      	beq.n	800ebc0 <__ieee754_atan2f+0xe8>
 800eb9a:	2c02      	cmp	r4, #2
 800eb9c:	d017      	beq.n	800ebce <__ieee754_atan2f+0xf6>
 800eb9e:	2c00      	cmp	r4, #0
 800eba0:	d0ad      	beq.n	800eafe <__ieee754_atan2f+0x26>
 800eba2:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800ec08 <__ieee754_atan2f+0x130>
 800eba6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ebaa:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800ec0c <__ieee754_atan2f+0x134>
 800ebae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ebb2:	e7a4      	b.n	800eafe <__ieee754_atan2f+0x26>
 800ebb4:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800ebf8 <__ieee754_atan2f+0x120>
 800ebb8:	e7ed      	b.n	800eb96 <__ieee754_atan2f+0xbe>
 800ebba:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800ec10 <__ieee754_atan2f+0x138>
 800ebbe:	e7ea      	b.n	800eb96 <__ieee754_atan2f+0xbe>
 800ebc0:	ee17 3a90 	vmov	r3, s15
 800ebc4:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800ebc8:	ee07 3a90 	vmov	s15, r3
 800ebcc:	e797      	b.n	800eafe <__ieee754_atan2f+0x26>
 800ebce:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800ec08 <__ieee754_atan2f+0x130>
 800ebd2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ebd6:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800ec0c <__ieee754_atan2f+0x134>
 800ebda:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ebde:	e78e      	b.n	800eafe <__ieee754_atan2f+0x26>
 800ebe0:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800ec0c <__ieee754_atan2f+0x134>
 800ebe4:	e78b      	b.n	800eafe <__ieee754_atan2f+0x26>
 800ebe6:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800ec14 <__ieee754_atan2f+0x13c>
 800ebea:	e788      	b.n	800eafe <__ieee754_atan2f+0x26>
 800ebec:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800ec10 <__ieee754_atan2f+0x138>
 800ebf0:	e785      	b.n	800eafe <__ieee754_atan2f+0x26>
 800ebf2:	bf00      	nop
 800ebf4:	c0490fdb 	.word	0xc0490fdb
 800ebf8:	3fc90fdb 	.word	0x3fc90fdb
 800ebfc:	bfc90fdb 	.word	0xbfc90fdb
 800ec00:	0800f3b4 	.word	0x0800f3b4
 800ec04:	0800f3a8 	.word	0x0800f3a8
 800ec08:	33bbbd2e 	.word	0x33bbbd2e
 800ec0c:	40490fdb 	.word	0x40490fdb
 800ec10:	00000000 	.word	0x00000000
 800ec14:	3f490fdb 	.word	0x3f490fdb

0800ec18 <atanf>:
 800ec18:	b538      	push	{r3, r4, r5, lr}
 800ec1a:	ee10 5a10 	vmov	r5, s0
 800ec1e:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800ec22:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800ec26:	eef0 7a40 	vmov.f32	s15, s0
 800ec2a:	d310      	bcc.n	800ec4e <atanf+0x36>
 800ec2c:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800ec30:	d904      	bls.n	800ec3c <atanf+0x24>
 800ec32:	ee70 7a00 	vadd.f32	s15, s0, s0
 800ec36:	eeb0 0a67 	vmov.f32	s0, s15
 800ec3a:	bd38      	pop	{r3, r4, r5, pc}
 800ec3c:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800ed74 <atanf+0x15c>
 800ec40:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800ed78 <atanf+0x160>
 800ec44:	2d00      	cmp	r5, #0
 800ec46:	bfc8      	it	gt
 800ec48:	eef0 7a47 	vmovgt.f32	s15, s14
 800ec4c:	e7f3      	b.n	800ec36 <atanf+0x1e>
 800ec4e:	4b4b      	ldr	r3, [pc, #300]	@ (800ed7c <atanf+0x164>)
 800ec50:	429c      	cmp	r4, r3
 800ec52:	d810      	bhi.n	800ec76 <atanf+0x5e>
 800ec54:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800ec58:	d20a      	bcs.n	800ec70 <atanf+0x58>
 800ec5a:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800ed80 <atanf+0x168>
 800ec5e:	ee30 7a07 	vadd.f32	s14, s0, s14
 800ec62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ec66:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800ec6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec6e:	dce2      	bgt.n	800ec36 <atanf+0x1e>
 800ec70:	f04f 33ff 	mov.w	r3, #4294967295
 800ec74:	e013      	b.n	800ec9e <atanf+0x86>
 800ec76:	f000 f8a3 	bl	800edc0 <fabsf>
 800ec7a:	4b42      	ldr	r3, [pc, #264]	@ (800ed84 <atanf+0x16c>)
 800ec7c:	429c      	cmp	r4, r3
 800ec7e:	d84f      	bhi.n	800ed20 <atanf+0x108>
 800ec80:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800ec84:	429c      	cmp	r4, r3
 800ec86:	d841      	bhi.n	800ed0c <atanf+0xf4>
 800ec88:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800ec8c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800ec90:	eea0 7a27 	vfma.f32	s14, s0, s15
 800ec94:	2300      	movs	r3, #0
 800ec96:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ec9a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ec9e:	1c5a      	adds	r2, r3, #1
 800eca0:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800eca4:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800ed88 <atanf+0x170>
 800eca8:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800ed8c <atanf+0x174>
 800ecac:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800ed90 <atanf+0x178>
 800ecb0:	ee66 6a06 	vmul.f32	s13, s12, s12
 800ecb4:	eee6 5a87 	vfma.f32	s11, s13, s14
 800ecb8:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800ed94 <atanf+0x17c>
 800ecbc:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800ecc0:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800ed98 <atanf+0x180>
 800ecc4:	eee7 5a26 	vfma.f32	s11, s14, s13
 800ecc8:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800ed9c <atanf+0x184>
 800eccc:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800ecd0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800eda0 <atanf+0x188>
 800ecd4:	eee7 5a26 	vfma.f32	s11, s14, s13
 800ecd8:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800eda4 <atanf+0x18c>
 800ecdc:	eea6 5a87 	vfma.f32	s10, s13, s14
 800ece0:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800eda8 <atanf+0x190>
 800ece4:	eea5 7a26 	vfma.f32	s14, s10, s13
 800ece8:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800edac <atanf+0x194>
 800ecec:	eea7 5a26 	vfma.f32	s10, s14, s13
 800ecf0:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800edb0 <atanf+0x198>
 800ecf4:	eea5 7a26 	vfma.f32	s14, s10, s13
 800ecf8:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ecfc:	eea5 7a86 	vfma.f32	s14, s11, s12
 800ed00:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ed04:	d121      	bne.n	800ed4a <atanf+0x132>
 800ed06:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ed0a:	e794      	b.n	800ec36 <atanf+0x1e>
 800ed0c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800ed10:	ee30 7a67 	vsub.f32	s14, s0, s15
 800ed14:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ed18:	2301      	movs	r3, #1
 800ed1a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ed1e:	e7be      	b.n	800ec9e <atanf+0x86>
 800ed20:	4b24      	ldr	r3, [pc, #144]	@ (800edb4 <atanf+0x19c>)
 800ed22:	429c      	cmp	r4, r3
 800ed24:	d80b      	bhi.n	800ed3e <atanf+0x126>
 800ed26:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800ed2a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ed2e:	eea0 7a27 	vfma.f32	s14, s0, s15
 800ed32:	2302      	movs	r3, #2
 800ed34:	ee70 6a67 	vsub.f32	s13, s0, s15
 800ed38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ed3c:	e7af      	b.n	800ec9e <atanf+0x86>
 800ed3e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800ed42:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ed46:	2303      	movs	r3, #3
 800ed48:	e7a9      	b.n	800ec9e <atanf+0x86>
 800ed4a:	4a1b      	ldr	r2, [pc, #108]	@ (800edb8 <atanf+0x1a0>)
 800ed4c:	491b      	ldr	r1, [pc, #108]	@ (800edbc <atanf+0x1a4>)
 800ed4e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800ed52:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800ed56:	edd3 6a00 	vldr	s13, [r3]
 800ed5a:	ee37 7a66 	vsub.f32	s14, s14, s13
 800ed5e:	2d00      	cmp	r5, #0
 800ed60:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ed64:	edd2 7a00 	vldr	s15, [r2]
 800ed68:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ed6c:	bfb8      	it	lt
 800ed6e:	eef1 7a67 	vneglt.f32	s15, s15
 800ed72:	e760      	b.n	800ec36 <atanf+0x1e>
 800ed74:	bfc90fdb 	.word	0xbfc90fdb
 800ed78:	3fc90fdb 	.word	0x3fc90fdb
 800ed7c:	3edfffff 	.word	0x3edfffff
 800ed80:	7149f2ca 	.word	0x7149f2ca
 800ed84:	3f97ffff 	.word	0x3f97ffff
 800ed88:	3c8569d7 	.word	0x3c8569d7
 800ed8c:	3d4bda59 	.word	0x3d4bda59
 800ed90:	bd6ef16b 	.word	0xbd6ef16b
 800ed94:	3d886b35 	.word	0x3d886b35
 800ed98:	3dba2e6e 	.word	0x3dba2e6e
 800ed9c:	3e124925 	.word	0x3e124925
 800eda0:	3eaaaaab 	.word	0x3eaaaaab
 800eda4:	bd15a221 	.word	0xbd15a221
 800eda8:	bd9d8795 	.word	0xbd9d8795
 800edac:	bde38e38 	.word	0xbde38e38
 800edb0:	be4ccccd 	.word	0xbe4ccccd
 800edb4:	401bffff 	.word	0x401bffff
 800edb8:	0800f3d0 	.word	0x0800f3d0
 800edbc:	0800f3c0 	.word	0x0800f3c0

0800edc0 <fabsf>:
 800edc0:	ee10 3a10 	vmov	r3, s0
 800edc4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800edc8:	ee00 3a10 	vmov	s0, r3
 800edcc:	4770      	bx	lr
	...

0800edd0 <scalbn>:
 800edd0:	b570      	push	{r4, r5, r6, lr}
 800edd2:	ec55 4b10 	vmov	r4, r5, d0
 800edd6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800edda:	4606      	mov	r6, r0
 800eddc:	462b      	mov	r3, r5
 800edde:	b991      	cbnz	r1, 800ee06 <scalbn+0x36>
 800ede0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800ede4:	4323      	orrs	r3, r4
 800ede6:	d03d      	beq.n	800ee64 <scalbn+0x94>
 800ede8:	4b35      	ldr	r3, [pc, #212]	@ (800eec0 <scalbn+0xf0>)
 800edea:	4620      	mov	r0, r4
 800edec:	4629      	mov	r1, r5
 800edee:	2200      	movs	r2, #0
 800edf0:	f7f1 fc1a 	bl	8000628 <__aeabi_dmul>
 800edf4:	4b33      	ldr	r3, [pc, #204]	@ (800eec4 <scalbn+0xf4>)
 800edf6:	429e      	cmp	r6, r3
 800edf8:	4604      	mov	r4, r0
 800edfa:	460d      	mov	r5, r1
 800edfc:	da0f      	bge.n	800ee1e <scalbn+0x4e>
 800edfe:	a328      	add	r3, pc, #160	@ (adr r3, 800eea0 <scalbn+0xd0>)
 800ee00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee04:	e01e      	b.n	800ee44 <scalbn+0x74>
 800ee06:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800ee0a:	4291      	cmp	r1, r2
 800ee0c:	d10b      	bne.n	800ee26 <scalbn+0x56>
 800ee0e:	4622      	mov	r2, r4
 800ee10:	4620      	mov	r0, r4
 800ee12:	4629      	mov	r1, r5
 800ee14:	f7f1 fa52 	bl	80002bc <__adddf3>
 800ee18:	4604      	mov	r4, r0
 800ee1a:	460d      	mov	r5, r1
 800ee1c:	e022      	b.n	800ee64 <scalbn+0x94>
 800ee1e:	460b      	mov	r3, r1
 800ee20:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800ee24:	3936      	subs	r1, #54	@ 0x36
 800ee26:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800ee2a:	4296      	cmp	r6, r2
 800ee2c:	dd0d      	ble.n	800ee4a <scalbn+0x7a>
 800ee2e:	2d00      	cmp	r5, #0
 800ee30:	a11d      	add	r1, pc, #116	@ (adr r1, 800eea8 <scalbn+0xd8>)
 800ee32:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ee36:	da02      	bge.n	800ee3e <scalbn+0x6e>
 800ee38:	a11d      	add	r1, pc, #116	@ (adr r1, 800eeb0 <scalbn+0xe0>)
 800ee3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ee3e:	a31a      	add	r3, pc, #104	@ (adr r3, 800eea8 <scalbn+0xd8>)
 800ee40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee44:	f7f1 fbf0 	bl	8000628 <__aeabi_dmul>
 800ee48:	e7e6      	b.n	800ee18 <scalbn+0x48>
 800ee4a:	1872      	adds	r2, r6, r1
 800ee4c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800ee50:	428a      	cmp	r2, r1
 800ee52:	dcec      	bgt.n	800ee2e <scalbn+0x5e>
 800ee54:	2a00      	cmp	r2, #0
 800ee56:	dd08      	ble.n	800ee6a <scalbn+0x9a>
 800ee58:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ee5c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800ee60:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ee64:	ec45 4b10 	vmov	d0, r4, r5
 800ee68:	bd70      	pop	{r4, r5, r6, pc}
 800ee6a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800ee6e:	da08      	bge.n	800ee82 <scalbn+0xb2>
 800ee70:	2d00      	cmp	r5, #0
 800ee72:	a10b      	add	r1, pc, #44	@ (adr r1, 800eea0 <scalbn+0xd0>)
 800ee74:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ee78:	dac1      	bge.n	800edfe <scalbn+0x2e>
 800ee7a:	a10f      	add	r1, pc, #60	@ (adr r1, 800eeb8 <scalbn+0xe8>)
 800ee7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ee80:	e7bd      	b.n	800edfe <scalbn+0x2e>
 800ee82:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ee86:	3236      	adds	r2, #54	@ 0x36
 800ee88:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800ee8c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ee90:	4620      	mov	r0, r4
 800ee92:	4b0d      	ldr	r3, [pc, #52]	@ (800eec8 <scalbn+0xf8>)
 800ee94:	4629      	mov	r1, r5
 800ee96:	2200      	movs	r2, #0
 800ee98:	e7d4      	b.n	800ee44 <scalbn+0x74>
 800ee9a:	bf00      	nop
 800ee9c:	f3af 8000 	nop.w
 800eea0:	c2f8f359 	.word	0xc2f8f359
 800eea4:	01a56e1f 	.word	0x01a56e1f
 800eea8:	8800759c 	.word	0x8800759c
 800eeac:	7e37e43c 	.word	0x7e37e43c
 800eeb0:	8800759c 	.word	0x8800759c
 800eeb4:	fe37e43c 	.word	0xfe37e43c
 800eeb8:	c2f8f359 	.word	0xc2f8f359
 800eebc:	81a56e1f 	.word	0x81a56e1f
 800eec0:	43500000 	.word	0x43500000
 800eec4:	ffff3cb0 	.word	0xffff3cb0
 800eec8:	3c900000 	.word	0x3c900000

0800eecc <with_errno>:
 800eecc:	b510      	push	{r4, lr}
 800eece:	ed2d 8b02 	vpush	{d8}
 800eed2:	eeb0 8a40 	vmov.f32	s16, s0
 800eed6:	eef0 8a60 	vmov.f32	s17, s1
 800eeda:	4604      	mov	r4, r0
 800eedc:	f7fd f976 	bl	800c1cc <__errno>
 800eee0:	eeb0 0a48 	vmov.f32	s0, s16
 800eee4:	eef0 0a68 	vmov.f32	s1, s17
 800eee8:	ecbd 8b02 	vpop	{d8}
 800eeec:	6004      	str	r4, [r0, #0]
 800eeee:	bd10      	pop	{r4, pc}

0800eef0 <xflow>:
 800eef0:	4603      	mov	r3, r0
 800eef2:	b507      	push	{r0, r1, r2, lr}
 800eef4:	ec51 0b10 	vmov	r0, r1, d0
 800eef8:	b183      	cbz	r3, 800ef1c <xflow+0x2c>
 800eefa:	4602      	mov	r2, r0
 800eefc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ef00:	e9cd 2300 	strd	r2, r3, [sp]
 800ef04:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ef08:	f7f1 fb8e 	bl	8000628 <__aeabi_dmul>
 800ef0c:	ec41 0b10 	vmov	d0, r0, r1
 800ef10:	2022      	movs	r0, #34	@ 0x22
 800ef12:	b003      	add	sp, #12
 800ef14:	f85d eb04 	ldr.w	lr, [sp], #4
 800ef18:	f7ff bfd8 	b.w	800eecc <with_errno>
 800ef1c:	4602      	mov	r2, r0
 800ef1e:	460b      	mov	r3, r1
 800ef20:	e7ee      	b.n	800ef00 <xflow+0x10>
 800ef22:	0000      	movs	r0, r0
 800ef24:	0000      	movs	r0, r0
	...

0800ef28 <__math_uflow>:
 800ef28:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ef30 <__math_uflow+0x8>
 800ef2c:	f7ff bfe0 	b.w	800eef0 <xflow>
 800ef30:	00000000 	.word	0x00000000
 800ef34:	10000000 	.word	0x10000000

0800ef38 <__math_oflow>:
 800ef38:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ef40 <__math_oflow+0x8>
 800ef3c:	f7ff bfd8 	b.w	800eef0 <xflow>
 800ef40:	00000000 	.word	0x00000000
 800ef44:	70000000 	.word	0x70000000

0800ef48 <_init>:
 800ef48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef4a:	bf00      	nop
 800ef4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef4e:	bc08      	pop	{r3}
 800ef50:	469e      	mov	lr, r3
 800ef52:	4770      	bx	lr

0800ef54 <_fini>:
 800ef54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef56:	bf00      	nop
 800ef58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef5a:	bc08      	pop	{r3}
 800ef5c:	469e      	mov	lr, r3
 800ef5e:	4770      	bx	lr
