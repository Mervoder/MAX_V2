
max.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f0a8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  0800f278  0800f278  00010278  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f700  0800f700  00011200  2**0
                  CONTENTS
  4 .ARM          00000008  0800f700  0800f700  00010700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f708  0800f708  00011200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f708  0800f708  00010708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f70c  0800f70c  0001070c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800f710  00011000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000025d4  20000200  0800f910  00011200  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200027d4  0800f910  000117d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011200  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001936c  00000000  00000000  00011230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003798  00000000  00000000  0002a59c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001730  00000000  00000000  0002dd38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000122f  00000000  00000000  0002f468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026c34  00000000  00000000  00030697  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e6bb  00000000  00000000  000572cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e72f2  00000000  00000000  00075986  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015cc78  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000779c  00000000  00000000  0015ccbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00164458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000200 	.word	0x20000200
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f260 	.word	0x0800f260

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000204 	.word	0x20000204
 800020c:	0800f260 	.word	0x0800f260

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_ldivmod>:
 8000cb8:	b97b      	cbnz	r3, 8000cda <__aeabi_ldivmod+0x22>
 8000cba:	b972      	cbnz	r2, 8000cda <__aeabi_ldivmod+0x22>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bfbe      	ittt	lt
 8000cc0:	2000      	movlt	r0, #0
 8000cc2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000cc6:	e006      	blt.n	8000cd6 <__aeabi_ldivmod+0x1e>
 8000cc8:	bf08      	it	eq
 8000cca:	2800      	cmpeq	r0, #0
 8000ccc:	bf1c      	itt	ne
 8000cce:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000cd2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd6:	f000 b9eb 	b.w	80010b0 <__aeabi_idiv0>
 8000cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	db09      	blt.n	8000cfa <__aeabi_ldivmod+0x42>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db1a      	blt.n	8000d20 <__aeabi_ldivmod+0x68>
 8000cea:	f000 f883 	bl	8000df4 <__udivmoddi4>
 8000cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf6:	b004      	add	sp, #16
 8000cf8:	4770      	bx	lr
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db1b      	blt.n	8000d3c <__aeabi_ldivmod+0x84>
 8000d04:	f000 f876 	bl	8000df4 <__udivmoddi4>
 8000d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d10:	b004      	add	sp, #16
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	4252      	negs	r2, r2
 8000d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f865 	bl	8000df4 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4240      	negs	r0, r0
 8000d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3a:	4770      	bx	lr
 8000d3c:	4252      	negs	r2, r2
 8000d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d42:	f000 f857 	bl	8000df4 <__udivmoddi4>
 8000d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d4e:	b004      	add	sp, #16
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_uldivmod>:
 8000d58:	b953      	cbnz	r3, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5a:	b94a      	cbnz	r2, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5c:	2900      	cmp	r1, #0
 8000d5e:	bf08      	it	eq
 8000d60:	2800      	cmpeq	r0, #0
 8000d62:	bf1c      	itt	ne
 8000d64:	f04f 31ff 	movne.w	r1, #4294967295
 8000d68:	f04f 30ff 	movne.w	r0, #4294967295
 8000d6c:	f000 b9a0 	b.w	80010b0 <__aeabi_idiv0>
 8000d70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d78:	f000 f83c 	bl	8000df4 <__udivmoddi4>
 8000d7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d84:	b004      	add	sp, #16
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_d2lz>:
 8000d88:	b538      	push	{r3, r4, r5, lr}
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	4604      	mov	r4, r0
 8000d90:	460d      	mov	r5, r1
 8000d92:	f7ff febb 	bl	8000b0c <__aeabi_dcmplt>
 8000d96:	b928      	cbnz	r0, 8000da4 <__aeabi_d2lz+0x1c>
 8000d98:	4620      	mov	r0, r4
 8000d9a:	4629      	mov	r1, r5
 8000d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000da0:	f000 b80a 	b.w	8000db8 <__aeabi_d2ulz>
 8000da4:	4620      	mov	r0, r4
 8000da6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000daa:	f000 f805 	bl	8000db8 <__aeabi_d2ulz>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	bd38      	pop	{r3, r4, r5, pc}
 8000db6:	bf00      	nop

08000db8 <__aeabi_d2ulz>:
 8000db8:	b5d0      	push	{r4, r6, r7, lr}
 8000dba:	4b0c      	ldr	r3, [pc, #48]	@ (8000dec <__aeabi_d2ulz+0x34>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	4606      	mov	r6, r0
 8000dc0:	460f      	mov	r7, r1
 8000dc2:	f7ff fc31 	bl	8000628 <__aeabi_dmul>
 8000dc6:	f7ff ff07 	bl	8000bd8 <__aeabi_d2uiz>
 8000dca:	4604      	mov	r4, r0
 8000dcc:	f7ff fbb2 	bl	8000534 <__aeabi_ui2d>
 8000dd0:	4b07      	ldr	r3, [pc, #28]	@ (8000df0 <__aeabi_d2ulz+0x38>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f7ff fc28 	bl	8000628 <__aeabi_dmul>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4630      	mov	r0, r6
 8000dde:	4639      	mov	r1, r7
 8000de0:	f7ff fa6a 	bl	80002b8 <__aeabi_dsub>
 8000de4:	f7ff fef8 	bl	8000bd8 <__aeabi_d2uiz>
 8000de8:	4621      	mov	r1, r4
 8000dea:	bdd0      	pop	{r4, r6, r7, pc}
 8000dec:	3df00000 	.word	0x3df00000
 8000df0:	41f00000 	.word	0x41f00000

08000df4 <__udivmoddi4>:
 8000df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df8:	9d08      	ldr	r5, [sp, #32]
 8000dfa:	460c      	mov	r4, r1
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d14e      	bne.n	8000e9e <__udivmoddi4+0xaa>
 8000e00:	4694      	mov	ip, r2
 8000e02:	458c      	cmp	ip, r1
 8000e04:	4686      	mov	lr, r0
 8000e06:	fab2 f282 	clz	r2, r2
 8000e0a:	d962      	bls.n	8000ed2 <__udivmoddi4+0xde>
 8000e0c:	b14a      	cbz	r2, 8000e22 <__udivmoddi4+0x2e>
 8000e0e:	f1c2 0320 	rsb	r3, r2, #32
 8000e12:	4091      	lsls	r1, r2
 8000e14:	fa20 f303 	lsr.w	r3, r0, r3
 8000e18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1c:	4319      	orrs	r1, r3
 8000e1e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e26:	fa1f f68c 	uxth.w	r6, ip
 8000e2a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e2e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e32:	fb07 1114 	mls	r1, r7, r4, r1
 8000e36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e3a:	fb04 f106 	mul.w	r1, r4, r6
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d90a      	bls.n	8000e58 <__udivmoddi4+0x64>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e4a:	f080 8112 	bcs.w	8001072 <__udivmoddi4+0x27e>
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	f240 810f 	bls.w	8001072 <__udivmoddi4+0x27e>
 8000e54:	3c02      	subs	r4, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1a59      	subs	r1, r3, r1
 8000e5a:	fa1f f38e 	uxth.w	r3, lr
 8000e5e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e62:	fb07 1110 	mls	r1, r7, r0, r1
 8000e66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e6a:	fb00 f606 	mul.w	r6, r0, r6
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	d90a      	bls.n	8000e88 <__udivmoddi4+0x94>
 8000e72:	eb1c 0303 	adds.w	r3, ip, r3
 8000e76:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e7a:	f080 80fc 	bcs.w	8001076 <__udivmoddi4+0x282>
 8000e7e:	429e      	cmp	r6, r3
 8000e80:	f240 80f9 	bls.w	8001076 <__udivmoddi4+0x282>
 8000e84:	4463      	add	r3, ip
 8000e86:	3802      	subs	r0, #2
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e8e:	2100      	movs	r1, #0
 8000e90:	b11d      	cbz	r5, 8000e9a <__udivmoddi4+0xa6>
 8000e92:	40d3      	lsrs	r3, r2
 8000e94:	2200      	movs	r2, #0
 8000e96:	e9c5 3200 	strd	r3, r2, [r5]
 8000e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9e:	428b      	cmp	r3, r1
 8000ea0:	d905      	bls.n	8000eae <__udivmoddi4+0xba>
 8000ea2:	b10d      	cbz	r5, 8000ea8 <__udivmoddi4+0xb4>
 8000ea4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e7f5      	b.n	8000e9a <__udivmoddi4+0xa6>
 8000eae:	fab3 f183 	clz	r1, r3
 8000eb2:	2900      	cmp	r1, #0
 8000eb4:	d146      	bne.n	8000f44 <__udivmoddi4+0x150>
 8000eb6:	42a3      	cmp	r3, r4
 8000eb8:	d302      	bcc.n	8000ec0 <__udivmoddi4+0xcc>
 8000eba:	4290      	cmp	r0, r2
 8000ebc:	f0c0 80f0 	bcc.w	80010a0 <__udivmoddi4+0x2ac>
 8000ec0:	1a86      	subs	r6, r0, r2
 8000ec2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ec6:	2001      	movs	r0, #1
 8000ec8:	2d00      	cmp	r5, #0
 8000eca:	d0e6      	beq.n	8000e9a <__udivmoddi4+0xa6>
 8000ecc:	e9c5 6300 	strd	r6, r3, [r5]
 8000ed0:	e7e3      	b.n	8000e9a <__udivmoddi4+0xa6>
 8000ed2:	2a00      	cmp	r2, #0
 8000ed4:	f040 8090 	bne.w	8000ff8 <__udivmoddi4+0x204>
 8000ed8:	eba1 040c 	sub.w	r4, r1, ip
 8000edc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee0:	fa1f f78c 	uxth.w	r7, ip
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000eea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000eee:	fb08 4416 	mls	r4, r8, r6, r4
 8000ef2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ef6:	fb07 f006 	mul.w	r0, r7, r6
 8000efa:	4298      	cmp	r0, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x11c>
 8000efe:	eb1c 0303 	adds.w	r3, ip, r3
 8000f02:	f106 34ff 	add.w	r4, r6, #4294967295
 8000f06:	d202      	bcs.n	8000f0e <__udivmoddi4+0x11a>
 8000f08:	4298      	cmp	r0, r3
 8000f0a:	f200 80cd 	bhi.w	80010a8 <__udivmoddi4+0x2b4>
 8000f0e:	4626      	mov	r6, r4
 8000f10:	1a1c      	subs	r4, r3, r0
 8000f12:	fa1f f38e 	uxth.w	r3, lr
 8000f16:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f1a:	fb08 4410 	mls	r4, r8, r0, r4
 8000f1e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f22:	fb00 f707 	mul.w	r7, r0, r7
 8000f26:	429f      	cmp	r7, r3
 8000f28:	d908      	bls.n	8000f3c <__udivmoddi4+0x148>
 8000f2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f2e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f32:	d202      	bcs.n	8000f3a <__udivmoddi4+0x146>
 8000f34:	429f      	cmp	r7, r3
 8000f36:	f200 80b0 	bhi.w	800109a <__udivmoddi4+0x2a6>
 8000f3a:	4620      	mov	r0, r4
 8000f3c:	1bdb      	subs	r3, r3, r7
 8000f3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f42:	e7a5      	b.n	8000e90 <__udivmoddi4+0x9c>
 8000f44:	f1c1 0620 	rsb	r6, r1, #32
 8000f48:	408b      	lsls	r3, r1
 8000f4a:	fa22 f706 	lsr.w	r7, r2, r6
 8000f4e:	431f      	orrs	r7, r3
 8000f50:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f54:	fa04 f301 	lsl.w	r3, r4, r1
 8000f58:	ea43 030c 	orr.w	r3, r3, ip
 8000f5c:	40f4      	lsrs	r4, r6
 8000f5e:	fa00 f801 	lsl.w	r8, r0, r1
 8000f62:	0c38      	lsrs	r0, r7, #16
 8000f64:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f68:	fbb4 fef0 	udiv	lr, r4, r0
 8000f6c:	fa1f fc87 	uxth.w	ip, r7
 8000f70:	fb00 441e 	mls	r4, r0, lr, r4
 8000f74:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f78:	fb0e f90c 	mul.w	r9, lr, ip
 8000f7c:	45a1      	cmp	r9, r4
 8000f7e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f82:	d90a      	bls.n	8000f9a <__udivmoddi4+0x1a6>
 8000f84:	193c      	adds	r4, r7, r4
 8000f86:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f8a:	f080 8084 	bcs.w	8001096 <__udivmoddi4+0x2a2>
 8000f8e:	45a1      	cmp	r9, r4
 8000f90:	f240 8081 	bls.w	8001096 <__udivmoddi4+0x2a2>
 8000f94:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f98:	443c      	add	r4, r7
 8000f9a:	eba4 0409 	sub.w	r4, r4, r9
 8000f9e:	fa1f f983 	uxth.w	r9, r3
 8000fa2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000fa6:	fb00 4413 	mls	r4, r0, r3, r4
 8000faa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fae:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fb2:	45a4      	cmp	ip, r4
 8000fb4:	d907      	bls.n	8000fc6 <__udivmoddi4+0x1d2>
 8000fb6:	193c      	adds	r4, r7, r4
 8000fb8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000fbc:	d267      	bcs.n	800108e <__udivmoddi4+0x29a>
 8000fbe:	45a4      	cmp	ip, r4
 8000fc0:	d965      	bls.n	800108e <__udivmoddi4+0x29a>
 8000fc2:	3b02      	subs	r3, #2
 8000fc4:	443c      	add	r4, r7
 8000fc6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000fca:	fba0 9302 	umull	r9, r3, r0, r2
 8000fce:	eba4 040c 	sub.w	r4, r4, ip
 8000fd2:	429c      	cmp	r4, r3
 8000fd4:	46ce      	mov	lr, r9
 8000fd6:	469c      	mov	ip, r3
 8000fd8:	d351      	bcc.n	800107e <__udivmoddi4+0x28a>
 8000fda:	d04e      	beq.n	800107a <__udivmoddi4+0x286>
 8000fdc:	b155      	cbz	r5, 8000ff4 <__udivmoddi4+0x200>
 8000fde:	ebb8 030e 	subs.w	r3, r8, lr
 8000fe2:	eb64 040c 	sbc.w	r4, r4, ip
 8000fe6:	fa04 f606 	lsl.w	r6, r4, r6
 8000fea:	40cb      	lsrs	r3, r1
 8000fec:	431e      	orrs	r6, r3
 8000fee:	40cc      	lsrs	r4, r1
 8000ff0:	e9c5 6400 	strd	r6, r4, [r5]
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	e750      	b.n	8000e9a <__udivmoddi4+0xa6>
 8000ff8:	f1c2 0320 	rsb	r3, r2, #32
 8000ffc:	fa20 f103 	lsr.w	r1, r0, r3
 8001000:	fa0c fc02 	lsl.w	ip, ip, r2
 8001004:	fa24 f303 	lsr.w	r3, r4, r3
 8001008:	4094      	lsls	r4, r2
 800100a:	430c      	orrs	r4, r1
 800100c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001010:	fa00 fe02 	lsl.w	lr, r0, r2
 8001014:	fa1f f78c 	uxth.w	r7, ip
 8001018:	fbb3 f0f8 	udiv	r0, r3, r8
 800101c:	fb08 3110 	mls	r1, r8, r0, r3
 8001020:	0c23      	lsrs	r3, r4, #16
 8001022:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001026:	fb00 f107 	mul.w	r1, r0, r7
 800102a:	4299      	cmp	r1, r3
 800102c:	d908      	bls.n	8001040 <__udivmoddi4+0x24c>
 800102e:	eb1c 0303 	adds.w	r3, ip, r3
 8001032:	f100 36ff 	add.w	r6, r0, #4294967295
 8001036:	d22c      	bcs.n	8001092 <__udivmoddi4+0x29e>
 8001038:	4299      	cmp	r1, r3
 800103a:	d92a      	bls.n	8001092 <__udivmoddi4+0x29e>
 800103c:	3802      	subs	r0, #2
 800103e:	4463      	add	r3, ip
 8001040:	1a5b      	subs	r3, r3, r1
 8001042:	b2a4      	uxth	r4, r4
 8001044:	fbb3 f1f8 	udiv	r1, r3, r8
 8001048:	fb08 3311 	mls	r3, r8, r1, r3
 800104c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001050:	fb01 f307 	mul.w	r3, r1, r7
 8001054:	42a3      	cmp	r3, r4
 8001056:	d908      	bls.n	800106a <__udivmoddi4+0x276>
 8001058:	eb1c 0404 	adds.w	r4, ip, r4
 800105c:	f101 36ff 	add.w	r6, r1, #4294967295
 8001060:	d213      	bcs.n	800108a <__udivmoddi4+0x296>
 8001062:	42a3      	cmp	r3, r4
 8001064:	d911      	bls.n	800108a <__udivmoddi4+0x296>
 8001066:	3902      	subs	r1, #2
 8001068:	4464      	add	r4, ip
 800106a:	1ae4      	subs	r4, r4, r3
 800106c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001070:	e739      	b.n	8000ee6 <__udivmoddi4+0xf2>
 8001072:	4604      	mov	r4, r0
 8001074:	e6f0      	b.n	8000e58 <__udivmoddi4+0x64>
 8001076:	4608      	mov	r0, r1
 8001078:	e706      	b.n	8000e88 <__udivmoddi4+0x94>
 800107a:	45c8      	cmp	r8, r9
 800107c:	d2ae      	bcs.n	8000fdc <__udivmoddi4+0x1e8>
 800107e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001082:	eb63 0c07 	sbc.w	ip, r3, r7
 8001086:	3801      	subs	r0, #1
 8001088:	e7a8      	b.n	8000fdc <__udivmoddi4+0x1e8>
 800108a:	4631      	mov	r1, r6
 800108c:	e7ed      	b.n	800106a <__udivmoddi4+0x276>
 800108e:	4603      	mov	r3, r0
 8001090:	e799      	b.n	8000fc6 <__udivmoddi4+0x1d2>
 8001092:	4630      	mov	r0, r6
 8001094:	e7d4      	b.n	8001040 <__udivmoddi4+0x24c>
 8001096:	46d6      	mov	lr, sl
 8001098:	e77f      	b.n	8000f9a <__udivmoddi4+0x1a6>
 800109a:	4463      	add	r3, ip
 800109c:	3802      	subs	r0, #2
 800109e:	e74d      	b.n	8000f3c <__udivmoddi4+0x148>
 80010a0:	4606      	mov	r6, r0
 80010a2:	4623      	mov	r3, r4
 80010a4:	4608      	mov	r0, r1
 80010a6:	e70f      	b.n	8000ec8 <__udivmoddi4+0xd4>
 80010a8:	3e02      	subs	r6, #2
 80010aa:	4463      	add	r3, ip
 80010ac:	e730      	b.n	8000f10 <__udivmoddi4+0x11c>
 80010ae:	bf00      	nop

080010b0 <__aeabi_idiv0>:
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop

080010b4 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	/* chip id read try count */
	uint8_t try_count = 5;
 80010bc:	2305      	movs	r3, #5
 80010be:	73bb      	strb	r3, [r7, #14]
	uint8_t chip_id = 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f001 facb 	bl	8002660 <null_ptr_check>
 80010ca:	4603      	mov	r3, r0
 80010cc:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt ==  BME280_OK) {
 80010ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d133      	bne.n	800113e <bme280_init+0x8a>
		while (try_count) {
 80010d6:	e028      	b.n	800112a <bme280_init+0x76>
			/* Read the chip-id of bme280 sensor */
			rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 80010d8:	f107 010d 	add.w	r1, r7, #13
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2201      	movs	r2, #1
 80010e0:	20d0      	movs	r0, #208	@ 0xd0
 80010e2:	f000 f832 	bl	800114a <bme280_get_regs>
 80010e6:	4603      	mov	r3, r0
 80010e8:	73fb      	strb	r3, [r7, #15]
			/* Check for chip id validity */
			if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID)) {
 80010ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d114      	bne.n	800111c <bme280_init+0x68>
 80010f2:	7b7b      	ldrb	r3, [r7, #13]
 80010f4:	2b60      	cmp	r3, #96	@ 0x60
 80010f6:	d111      	bne.n	800111c <bme280_init+0x68>
				dev->chip_id = chip_id;
 80010f8:	7b7a      	ldrb	r2, [r7, #13]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	701a      	strb	r2, [r3, #0]
				/* Reset the sensor */
				rslt = bme280_soft_reset(dev);
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f000 f978 	bl	80013f4 <bme280_soft_reset>
 8001104:	4603      	mov	r3, r0
 8001106:	73fb      	strb	r3, [r7, #15]
				if (rslt == BME280_OK) {
 8001108:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d110      	bne.n	8001132 <bme280_init+0x7e>
					/* Read the calibration data */
					rslt = get_calib_data(dev);
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f001 f919 	bl	8002348 <get_calib_data>
 8001116:	4603      	mov	r3, r0
 8001118:	73fb      	strb	r3, [r7, #15]
				}
				break;
 800111a:	e00a      	b.n	8001132 <bme280_init+0x7e>
			}
			/* Wait for 1 ms */
			dev->delay_ms(1);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	2001      	movs	r0, #1
 8001122:	4798      	blx	r3
			--try_count;
 8001124:	7bbb      	ldrb	r3, [r7, #14]
 8001126:	3b01      	subs	r3, #1
 8001128:	73bb      	strb	r3, [r7, #14]
		while (try_count) {
 800112a:	7bbb      	ldrb	r3, [r7, #14]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d1d3      	bne.n	80010d8 <bme280_init+0x24>
 8001130:	e000      	b.n	8001134 <bme280_init+0x80>
				break;
 8001132:	bf00      	nop
		}
		/* Chip id check failed */
		if (!try_count)
 8001134:	7bbb      	ldrb	r3, [r7, #14]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d101      	bne.n	800113e <bme280_init+0x8a>
			rslt = BME280_E_DEV_NOT_FOUND;
 800113a:	23fe      	movs	r3, #254	@ 0xfe
 800113c:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 800113e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001142:	4618      	mov	r0, r3
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 800114a:	b590      	push	{r4, r7, lr}
 800114c:	b087      	sub	sp, #28
 800114e:	af00      	add	r7, sp, #0
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607b      	str	r3, [r7, #4]
 8001154:	4603      	mov	r3, r0
 8001156:	73fb      	strb	r3, [r7, #15]
 8001158:	4613      	mov	r3, r2
 800115a:	81bb      	strh	r3, [r7, #12]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f001 fa7f 	bl	8002660 <null_ptr_check>
 8001162:	4603      	mov	r3, r0
 8001164:	75fb      	strb	r3, [r7, #23]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8001166:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d117      	bne.n	800119e <bme280_get_regs+0x54>
		/* If interface selected is SPI */
		if (dev->intf != BME280_I2C_INTF)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	789b      	ldrb	r3, [r3, #2]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d003      	beq.n	800117e <bme280_get_regs+0x34>
			reg_addr = reg_addr | 0x80;
 8001176:	7bfb      	ldrb	r3, [r7, #15]
 8001178:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800117c:	73fb      	strb	r3, [r7, #15]
		/* Read the data  */
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	685c      	ldr	r4, [r3, #4]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	7858      	ldrb	r0, [r3, #1]
 8001186:	89bb      	ldrh	r3, [r7, #12]
 8001188:	7bf9      	ldrb	r1, [r7, #15]
 800118a:	68ba      	ldr	r2, [r7, #8]
 800118c:	47a0      	blx	r4
 800118e:	4603      	mov	r3, r0
 8001190:	75fb      	strb	r3, [r7, #23]
		/* Check for communication error */
		if (rslt != BME280_OK)
 8001192:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <bme280_get_regs+0x54>
			rslt = BME280_E_COMM_FAIL;
 800119a:	23fc      	movs	r3, #252	@ 0xfc
 800119c:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800119e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	371c      	adds	r7, #28
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd90      	pop	{r4, r7, pc}

080011aa <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 80011aa:	b590      	push	{r4, r7, lr}
 80011ac:	b08d      	sub	sp, #52	@ 0x34
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	60f8      	str	r0, [r7, #12]
 80011b2:	60b9      	str	r1, [r7, #8]
 80011b4:	603b      	str	r3, [r7, #0]
 80011b6:	4613      	mov	r3, r2
 80011b8:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

	if (len > 10)
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	2b0a      	cmp	r3, #10
 80011be:	d901      	bls.n	80011c4 <bme280_set_regs+0x1a>
		len = 10;
 80011c0:	230a      	movs	r3, #10
 80011c2:	71fb      	strb	r3, [r7, #7]

	uint16_t temp_len;
	uint8_t reg_addr_cnt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80011c4:	6838      	ldr	r0, [r7, #0]
 80011c6:	f001 fa4b 	bl	8002660 <null_ptr_check>
 80011ca:	4603      	mov	r3, r0
 80011cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	/* Check for arguments validity */
	if ((rslt ==  BME280_OK) && (reg_addr != NULL) && (reg_data != NULL)) {
 80011d0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d156      	bne.n	8001286 <bme280_set_regs+0xdc>
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d053      	beq.n	8001286 <bme280_set_regs+0xdc>
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d050      	beq.n	8001286 <bme280_set_regs+0xdc>
		if (len != 0) {
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d049      	beq.n	800127e <bme280_set_regs+0xd4>
			temp_buff[0] = reg_data[0];
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	753b      	strb	r3, [r7, #20]
			/* If interface selected is SPI */
			if (dev->intf != BME280_I2C_INTF) {
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	789b      	ldrb	r3, [r3, #2]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d01a      	beq.n	800122e <bme280_set_regs+0x84>
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80011f8:	2300      	movs	r3, #0
 80011fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80011fe:	e011      	b.n	8001224 <bme280_set_regs+0x7a>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8001200:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001204:	68fa      	ldr	r2, [r7, #12]
 8001206:	4413      	add	r3, r2
 8001208:	781a      	ldrb	r2, [r3, #0]
 800120a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800120e:	68f9      	ldr	r1, [r7, #12]
 8001210:	440b      	add	r3, r1
 8001212:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001216:	b2d2      	uxtb	r2, r2
 8001218:	701a      	strb	r2, [r3, #0]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800121a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800121e:	3301      	adds	r3, #1
 8001220:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001224:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	429a      	cmp	r2, r3
 800122c:	d3e8      	bcc.n	8001200 <bme280_set_regs+0x56>
			}
			/* Burst write mode */
			if (len > 1) {
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d90d      	bls.n	8001250 <bme280_set_regs+0xa6>
				/* Interleave register address w.r.t data for
				burst write*/
				interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	f107 0114 	add.w	r1, r7, #20
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	68f8      	ldr	r0, [r7, #12]
 800123e:	f001 f8c8 	bl	80023d2 <interleave_reg_addr>
				temp_len = ((len * 2) - 1);
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	b29b      	uxth	r3, r3
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	b29b      	uxth	r3, r3
 800124a:	3b01      	subs	r3, #1
 800124c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800124e:	e001      	b.n	8001254 <bme280_set_regs+0xaa>
			} else {
				temp_len = len;
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	85bb      	strh	r3, [r7, #44]	@ 0x2c
			}
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	689c      	ldr	r4, [r3, #8]
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	7858      	ldrb	r0, [r3, #1]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	7819      	ldrb	r1, [r3, #0]
 8001260:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001262:	f107 0214 	add.w	r2, r7, #20
 8001266:	47a0      	blx	r4
 8001268:	4603      	mov	r3, r0
 800126a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			/* Check for communication error */
			if (rslt != BME280_OK)
 800126e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8001272:	2b00      	cmp	r3, #0
 8001274:	d00b      	beq.n	800128e <bme280_set_regs+0xe4>
				rslt = BME280_E_COMM_FAIL;
 8001276:	23fc      	movs	r3, #252	@ 0xfc
 8001278:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (len != 0) {
 800127c:	e007      	b.n	800128e <bme280_set_regs+0xe4>
		} else {
			rslt = BME280_E_INVALID_LEN;
 800127e:	23fd      	movs	r3, #253	@ 0xfd
 8001280:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (len != 0) {
 8001284:	e003      	b.n	800128e <bme280_set_regs+0xe4>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8001286:	23ff      	movs	r3, #255	@ 0xff
 8001288:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800128c:	e000      	b.n	8001290 <bme280_set_regs+0xe6>
		if (len != 0) {
 800128e:	bf00      	nop
	}


	return rslt;
 8001290:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8001294:	4618      	mov	r0, r3
 8001296:	3734      	adds	r7, #52	@ 0x34
 8001298:	46bd      	mov	sp, r7
 800129a:	bd90      	pop	{r4, r7, pc}

0800129c <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	6039      	str	r1, [r7, #0]
 80012a6:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t sensor_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80012a8:	6838      	ldr	r0, [r7, #0]
 80012aa:	f001 f9d9 	bl	8002660 <null_ptr_check>
 80012ae:	4603      	mov	r3, r0
 80012b0:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 80012b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d13f      	bne.n	800133a <bme280_set_sensor_settings+0x9e>
		rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 80012ba:	f107 030e 	add.w	r3, r7, #14
 80012be:	6839      	ldr	r1, [r7, #0]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f000 f874 	bl	80013ae <bme280_get_sensor_mode>
 80012c6:	4603      	mov	r3, r0
 80012c8:	73fb      	strb	r3, [r7, #15]
		if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 80012ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d107      	bne.n	80012e2 <bme280_set_sensor_settings+0x46>
 80012d2:	7bbb      	ldrb	r3, [r7, #14]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d004      	beq.n	80012e2 <bme280_set_sensor_settings+0x46>
			rslt = put_device_to_sleep(dev);
 80012d8:	6838      	ldr	r0, [r7, #0]
 80012da:	f000 fb36 	bl	800194a <put_device_to_sleep>
 80012de:	4603      	mov	r3, r0
 80012e0:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK) {
 80012e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d127      	bne.n	800133a <bme280_set_sensor_settings+0x9e>
			/* Check if user wants to change oversampling
			   settings */
			if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	4619      	mov	r1, r3
 80012ee:	2007      	movs	r0, #7
 80012f0:	f001 f99a 	bl	8002628 <are_settings_changed>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d009      	beq.n	800130e <bme280_set_sensor_settings+0x72>
				rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	683a      	ldr	r2, [r7, #0]
 8001304:	4618      	mov	r0, r3
 8001306:	f000 f972 	bl	80015ee <set_osr_settings>
 800130a:	4603      	mov	r3, r0
 800130c:	73fb      	strb	r3, [r7, #15]
			/* Check if user wants to change filter and/or
			   standby settings */
			if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 800130e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d111      	bne.n	800133a <bme280_set_sensor_settings+0x9e>
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	4619      	mov	r1, r3
 800131a:	2018      	movs	r0, #24
 800131c:	f001 f984 	bl	8002628 <are_settings_changed>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d009      	beq.n	800133a <bme280_set_sensor_settings+0x9e>
				rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	683a      	ldr	r2, [r7, #0]
 8001330:	4618      	mov	r0, r3
 8001332:	f000 f9f9 	bl	8001728 <set_filter_standby_settings>
 8001336:	4603      	mov	r3, r0
 8001338:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
 800133a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800133e:	4618      	mov	r0, r3
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b084      	sub	sp, #16
 800134a:	af00      	add	r7, sp, #0
 800134c:	4603      	mov	r3, r0
 800134e:	6039      	str	r1, [r7, #0]
 8001350:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t last_set_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001352:	6838      	ldr	r0, [r7, #0]
 8001354:	f001 f984 	bl	8002660 <null_ptr_check>
 8001358:	4603      	mov	r3, r0
 800135a:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 800135c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d11e      	bne.n	80013a2 <bme280_set_sensor_mode+0x5c>
		rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 8001364:	f107 030e 	add.w	r3, r7, #14
 8001368:	6839      	ldr	r1, [r7, #0]
 800136a:	4618      	mov	r0, r3
 800136c:	f000 f81f 	bl	80013ae <bme280_get_sensor_mode>
 8001370:	4603      	mov	r3, r0
 8001372:	73fb      	strb	r3, [r7, #15]
		/* If the sensor is not in sleep mode put the device to sleep
		   mode */
		if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 8001374:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d107      	bne.n	800138c <bme280_set_sensor_mode+0x46>
 800137c:	7bbb      	ldrb	r3, [r7, #14]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d004      	beq.n	800138c <bme280_set_sensor_mode+0x46>
			rslt = put_device_to_sleep(dev);
 8001382:	6838      	ldr	r0, [r7, #0]
 8001384:	f000 fae1 	bl	800194a <put_device_to_sleep>
 8001388:	4603      	mov	r3, r0
 800138a:	73fb      	strb	r3, [r7, #15]
		/* Set the power mode */
		if (rslt == BME280_OK)
 800138c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d106      	bne.n	80013a2 <bme280_set_sensor_mode+0x5c>
			rslt = write_power_mode(sensor_mode, dev);
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	6839      	ldr	r1, [r7, #0]
 8001398:	4618      	mov	r0, r3
 800139a:	f000 faa3 	bl	80018e4 <write_power_mode>
 800139e:	4603      	mov	r3, r0
 80013a0:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80013a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b084      	sub	sp, #16
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
 80013b6:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80013b8:	6838      	ldr	r0, [r7, #0]
 80013ba:	f001 f951 	bl	8002660 <null_ptr_check>
 80013be:	4603      	mov	r3, r0
 80013c0:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 80013c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d10e      	bne.n	80013e8 <bme280_get_sensor_mode+0x3a>
		/* Read the power mode register */
		rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	2201      	movs	r2, #1
 80013ce:	6879      	ldr	r1, [r7, #4]
 80013d0:	20f4      	movs	r0, #244	@ 0xf4
 80013d2:	f7ff feba 	bl	800114a <bme280_get_regs>
 80013d6:	4603      	mov	r3, r0
 80013d8:	73fb      	strb	r3, [r7, #15]
		/* Assign the power mode in the device structure */
		*sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	f003 0303 	and.w	r3, r3, #3
 80013e2:	b2da      	uxtb	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
 80013e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3710      	adds	r7, #16
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_RESET_ADDR;
 80013fc:	23e0      	movs	r3, #224	@ 0xe0
 80013fe:	73bb      	strb	r3, [r7, #14]
	/* 0xB6 is the soft reset command */
	uint8_t soft_rst_cmd = 0xB6;
 8001400:	23b6      	movs	r3, #182	@ 0xb6
 8001402:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f001 f92b 	bl	8002660 <null_ptr_check>
 800140a:	4603      	mov	r3, r0
 800140c:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 800140e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d10d      	bne.n	8001432 <bme280_soft_reset+0x3e>
		/* Write the soft reset command in the sensor */
		rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001416:	f107 010d 	add.w	r1, r7, #13
 800141a:	f107 000e 	add.w	r0, r7, #14
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2201      	movs	r2, #1
 8001422:	f7ff fec2 	bl	80011aa <bme280_set_regs>
 8001426:	4603      	mov	r3, r0
 8001428:	73fb      	strb	r3, [r7, #15]
		/* As per data sheet, startup time is 2 ms. */
		dev->delay_ms(2);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	68db      	ldr	r3, [r3, #12]
 800142e:	2002      	movs	r0, #2
 8001430:	4798      	blx	r3
	}

	return rslt;
 8001432:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001436:	4618      	mov	r0, r3
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b08a      	sub	sp, #40	@ 0x28
 8001442:	af00      	add	r7, sp, #0
 8001444:	4603      	mov	r3, r0
 8001446:	60b9      	str	r1, [r7, #8]
 8001448:	607a      	str	r2, [r7, #4]
 800144a:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	/* Array to store the pressure, temperature and humidity data read from
	the sensor */
	uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
 800144c:	2300      	movs	r3, #0
 800144e:	61fb      	str	r3, [r7, #28]
 8001450:	2300      	movs	r3, #0
 8001452:	623b      	str	r3, [r7, #32]
	struct bme280_uncomp_data uncomp_data = {0};
 8001454:	f107 0310 	add.w	r3, r7, #16
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f001 f8fd 	bl	8002660 <null_ptr_check>
 8001466:	4603      	mov	r3, r0
 8001468:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if ((rslt == BME280_OK) && (comp_data != NULL)) {
 800146c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001470:	2b00      	cmp	r3, #0
 8001472:	d124      	bne.n	80014be <bme280_get_sensor_data+0x80>
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d021      	beq.n	80014be <bme280_get_sensor_data+0x80>
		/* Read the pressure and temperature data from the sensor */
		rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 800147a:	f107 011c 	add.w	r1, r7, #28
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2208      	movs	r2, #8
 8001482:	20f7      	movs	r0, #247	@ 0xf7
 8001484:	f7ff fe61 	bl	800114a <bme280_get_regs>
 8001488:	4603      	mov	r3, r0
 800148a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		if (rslt == BME280_OK) {
 800148e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001492:	2b00      	cmp	r3, #0
 8001494:	d116      	bne.n	80014c4 <bme280_get_sensor_data+0x86>
			/* Parse the read data from the sensor */
			bme280_parse_sensor_data(reg_data, &uncomp_data);
 8001496:	f107 0210 	add.w	r2, r7, #16
 800149a:	f107 031c 	add.w	r3, r7, #28
 800149e:	4611      	mov	r1, r2
 80014a0:	4618      	mov	r0, r3
 80014a2:	f000 f815 	bl	80014d0 <bme280_parse_sensor_data>
			/* Compensate the pressure and/or temperature and/or
			   humidity data from the sensor */
			rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	3310      	adds	r3, #16
 80014aa:	f107 0110 	add.w	r1, r7, #16
 80014ae:	7bf8      	ldrb	r0, [r7, #15]
 80014b0:	68ba      	ldr	r2, [r7, #8]
 80014b2:	f000 f853 	bl	800155c <bme280_compensate_data>
 80014b6:	4603      	mov	r3, r0
 80014b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (rslt == BME280_OK) {
 80014bc:	e002      	b.n	80014c4 <bme280_get_sensor_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 80014be:	23ff      	movs	r3, #255	@ 0xff
 80014c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	return rslt;
 80014c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3728      	adds	r7, #40	@ 0x28
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b087      	sub	sp, #28
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
	uint32_t data_xlsb;
	uint32_t data_lsb;
	uint32_t data_msb;

	/* Store the parsed register values for pressure data */
	data_msb = (uint32_t)reg_data[0] << 12;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	031b      	lsls	r3, r3, #12
 80014e0:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[1] << 4;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	3301      	adds	r3, #1
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	011b      	lsls	r3, r3, #4
 80014ea:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[2] >> 4;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3302      	adds	r3, #2
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	091b      	lsrs	r3, r3, #4
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	60fb      	str	r3, [r7, #12]
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 80014f8:	697a      	ldr	r2, [r7, #20]
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	431a      	orrs	r2, r3
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	431a      	orrs	r2, r3
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	601a      	str	r2, [r3, #0]

	/* Store the parsed register values for temperature data */
	data_msb = (uint32_t)reg_data[3] << 12;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	3303      	adds	r3, #3
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	031b      	lsls	r3, r3, #12
 800150e:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[4] << 4;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3304      	adds	r3, #4
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	011b      	lsls	r3, r3, #4
 8001518:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[5] >> 4;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	3305      	adds	r3, #5
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	091b      	lsrs	r3, r3, #4
 8001522:	b2db      	uxtb	r3, r3
 8001524:	60fb      	str	r3, [r7, #12]
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8001526:	697a      	ldr	r2, [r7, #20]
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	431a      	orrs	r2, r3
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	431a      	orrs	r2, r3
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	605a      	str	r2, [r3, #4]

	/* Store the parsed register values for temperature data */
	data_lsb = (uint32_t)reg_data[6] << 8;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3306      	adds	r3, #6
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	021b      	lsls	r3, r3, #8
 800153c:	613b      	str	r3, [r7, #16]
	data_msb = (uint32_t)reg_data[7];
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	3307      	adds	r3, #7
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	617b      	str	r3, [r7, #20]
	uncomp_data->humidity = data_msb | data_lsb;
 8001546:	697a      	ldr	r2, [r7, #20]
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	431a      	orrs	r2, r3
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	609a      	str	r2, [r3, #8]
}
 8001550:	bf00      	nop
 8001552:	371c      	adds	r7, #28
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <bme280_compensate_data>:
 * temperature and/or humidity data according to the component selected
 * by the user.
 */
int8_t bme280_compensate_data(uint8_t sensor_comp, const struct bme280_uncomp_data *uncomp_data,
				     struct bme280_data *comp_data, struct bme280_calib_data *calib_data)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0
 8001562:	60b9      	str	r1, [r7, #8]
 8001564:	607a      	str	r2, [r7, #4]
 8001566:	603b      	str	r3, [r7, #0]
 8001568:	4603      	mov	r3, r0
 800156a:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_OK;
 800156c:	2300      	movs	r3, #0
 800156e:	75fb      	strb	r3, [r7, #23]

	if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL)) {
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d033      	beq.n	80015de <bme280_compensate_data+0x82>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d030      	beq.n	80015de <bme280_compensate_data+0x82>
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d02d      	beq.n	80015de <bme280_compensate_data+0x82>
		/* Initialize to zero */
		comp_data->temperature = 0;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	605a      	str	r2, [r3, #4]
		comp_data->pressure = 0;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
		comp_data->humidity = 0;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
		/* If pressure or temperature component is selected */
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
 8001594:	7bfb      	ldrb	r3, [r7, #15]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	2b00      	cmp	r3, #0
 800159c:	d006      	beq.n	80015ac <bme280_compensate_data+0x50>
			/* Compensate the temperature data */
			comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 800159e:	6839      	ldr	r1, [r7, #0]
 80015a0:	68b8      	ldr	r0, [r7, #8]
 80015a2:	f000 fa1f 	bl	80019e4 <compensate_temperature>
 80015a6:	4602      	mov	r2, r0
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	605a      	str	r2, [r3, #4]
		}
		if (sensor_comp & BME280_PRESS) {
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d006      	beq.n	80015c4 <bme280_compensate_data+0x68>
			/* Compensate the pressure data */
			comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 80015b6:	6839      	ldr	r1, [r7, #0]
 80015b8:	68b8      	ldr	r0, [r7, #8]
 80015ba:	f000 fa75 	bl	8001aa8 <compensate_pressure>
 80015be:	4602      	mov	r2, r0
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	601a      	str	r2, [r3, #0]
		}
		if (sensor_comp & BME280_HUM) {
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
 80015c6:	f003 0304 	and.w	r3, r3, #4
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d009      	beq.n	80015e2 <bme280_compensate_data+0x86>
			/* Compensate the humidity data */
			comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 80015ce:	6839      	ldr	r1, [r7, #0]
 80015d0:	68b8      	ldr	r0, [r7, #8]
 80015d2:	f000 fe0d 	bl	80021f0 <compensate_humidity>
 80015d6:	4602      	mov	r2, r0
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	609a      	str	r2, [r3, #8]
		if (sensor_comp & BME280_HUM) {
 80015dc:	e001      	b.n	80015e2 <bme280_compensate_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 80015de:	23ff      	movs	r3, #255	@ 0xff
 80015e0:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80015e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3718      	adds	r7, #24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <set_osr_settings>:
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings,
				const struct bme280_dev *dev)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b086      	sub	sp, #24
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	4603      	mov	r3, r0
 80015f6:	60b9      	str	r1, [r7, #8]
 80015f8:	607a      	str	r2, [r7, #4]
 80015fa:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 80015fc:	2301      	movs	r3, #1
 80015fe:	75fb      	strb	r3, [r7, #23]

	if (desired_settings & BME280_OSR_HUM_SEL)
 8001600:	7bfb      	ldrb	r3, [r7, #15]
 8001602:	f003 0304 	and.w	r3, r3, #4
 8001606:	2b00      	cmp	r3, #0
 8001608:	d005      	beq.n	8001616 <set_osr_settings+0x28>
		rslt = set_osr_humidity_settings(settings, dev);
 800160a:	6879      	ldr	r1, [r7, #4]
 800160c:	68b8      	ldr	r0, [r7, #8]
 800160e:	f000 f815 	bl	800163c <set_osr_humidity_settings>
 8001612:	4603      	mov	r3, r0
 8001614:	75fb      	strb	r3, [r7, #23]
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 8001616:	7bfb      	ldrb	r3, [r7, #15]
 8001618:	f003 0303 	and.w	r3, r3, #3
 800161c:	2b00      	cmp	r3, #0
 800161e:	d007      	beq.n	8001630 <set_osr_settings+0x42>
		rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 8001620:	7bfb      	ldrb	r3, [r7, #15]
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	68b9      	ldr	r1, [r7, #8]
 8001626:	4618      	mov	r0, r3
 8001628:	f000 f842 	bl	80016b0 <set_osr_press_temp_settings>
 800162c:	4603      	mov	r3, r0
 800162e:	75fb      	strb	r3, [r7, #23]

	return rslt;
 8001630:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001634:	4618      	mov	r0, r3
 8001636:	3718      	adds	r7, #24
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t ctrl_hum;
	uint8_t ctrl_meas;
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 8001646:	23f2      	movs	r3, #242	@ 0xf2
 8001648:	733b      	strb	r3, [r7, #12]

	ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	789b      	ldrb	r3, [r3, #2]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	b2db      	uxtb	r3, r3
 8001654:	73bb      	strb	r3, [r7, #14]
	/* Write the humidity control value in the register */
	rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 8001656:	f107 010e 	add.w	r1, r7, #14
 800165a:	f107 000c 	add.w	r0, r7, #12
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	2201      	movs	r2, #1
 8001662:	f7ff fda2 	bl	80011aa <bme280_set_regs>
 8001666:	4603      	mov	r3, r0
 8001668:	73fb      	strb	r3, [r7, #15]
	/* Humidity related changes will be only effective after a
	   write operation to ctrl_meas register */
	if (rslt == BME280_OK) {
 800166a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d118      	bne.n	80016a4 <set_osr_humidity_settings+0x68>
		reg_addr = BME280_CTRL_MEAS_ADDR;
 8001672:	23f4      	movs	r3, #244	@ 0xf4
 8001674:	733b      	strb	r3, [r7, #12]
		rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 8001676:	7b38      	ldrb	r0, [r7, #12]
 8001678:	f107 010d 	add.w	r1, r7, #13
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	2201      	movs	r2, #1
 8001680:	f7ff fd63 	bl	800114a <bme280_get_regs>
 8001684:	4603      	mov	r3, r0
 8001686:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK)
 8001688:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d109      	bne.n	80016a4 <set_osr_humidity_settings+0x68>
			rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 8001690:	f107 010d 	add.w	r1, r7, #13
 8001694:	f107 000c 	add.w	r0, r7, #12
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	2201      	movs	r2, #1
 800169c:	f7ff fd85 	bl	80011aa <bme280_set_regs>
 80016a0:	4603      	mov	r3, r0
 80016a2:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80016a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3710      	adds	r7, #16
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <set_osr_press_temp_settings>:
 * @brief This API sets the pressure and/or temperature oversampling settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
 80016bc:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 80016be:	23f4      	movs	r3, #244	@ 0xf4
 80016c0:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 80016c2:	7db8      	ldrb	r0, [r7, #22]
 80016c4:	f107 0115 	add.w	r1, r7, #21
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2201      	movs	r2, #1
 80016cc:	f7ff fd3d 	bl	800114a <bme280_get_regs>
 80016d0:	4603      	mov	r3, r0
 80016d2:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 80016d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d11f      	bne.n	800171c <set_osr_press_temp_settings+0x6c>
		if (desired_settings & BME280_OSR_PRESS_SEL)
 80016dc:	7bfb      	ldrb	r3, [r7, #15]
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d005      	beq.n	80016f2 <set_osr_press_temp_settings+0x42>
			fill_osr_press_settings(&reg_data, settings);
 80016e6:	f107 0315 	add.w	r3, r7, #21
 80016ea:	68b9      	ldr	r1, [r7, #8]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f000 f88e 	bl	800180e <fill_osr_press_settings>
		if (desired_settings & BME280_OSR_TEMP_SEL)
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
 80016f4:	f003 0302 	and.w	r3, r3, #2
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d005      	beq.n	8001708 <set_osr_press_temp_settings+0x58>
			fill_osr_temp_settings(&reg_data, settings);
 80016fc:	f107 0315 	add.w	r3, r7, #21
 8001700:	68b9      	ldr	r1, [r7, #8]
 8001702:	4618      	mov	r0, r3
 8001704:	f000 f8a0 	bl	8001848 <fill_osr_temp_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8001708:	f107 0115 	add.w	r1, r7, #21
 800170c:	f107 0016 	add.w	r0, r7, #22
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2201      	movs	r2, #1
 8001714:	f7ff fd49 	bl	80011aa <bme280_set_regs>
 8001718:	4603      	mov	r3, r0
 800171a:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800171c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001720:	4618      	mov	r0, r3
 8001722:	3718      	adds	r7, #24
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <set_filter_standby_settings>:
 * @brief This internal API sets the filter and/or standby duration settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
 8001734:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CONFIG_ADDR;
 8001736:	23f5      	movs	r3, #245	@ 0xf5
 8001738:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 800173a:	7db8      	ldrb	r0, [r7, #22]
 800173c:	f107 0115 	add.w	r1, r7, #21
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2201      	movs	r2, #1
 8001744:	f7ff fd01 	bl	800114a <bme280_get_regs>
 8001748:	4603      	mov	r3, r0
 800174a:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 800174c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d11f      	bne.n	8001794 <set_filter_standby_settings+0x6c>
		if (desired_settings & BME280_FILTER_SEL)
 8001754:	7bfb      	ldrb	r3, [r7, #15]
 8001756:	f003 0308 	and.w	r3, r3, #8
 800175a:	2b00      	cmp	r3, #0
 800175c:	d005      	beq.n	800176a <set_filter_standby_settings+0x42>
			fill_filter_settings(&reg_data, settings);
 800175e:	f107 0315 	add.w	r3, r7, #21
 8001762:	68b9      	ldr	r1, [r7, #8]
 8001764:	4618      	mov	r0, r3
 8001766:	f000 f81b 	bl	80017a0 <fill_filter_settings>
		if (desired_settings & BME280_STANDBY_SEL)
 800176a:	7bfb      	ldrb	r3, [r7, #15]
 800176c:	f003 0310 	and.w	r3, r3, #16
 8001770:	2b00      	cmp	r3, #0
 8001772:	d005      	beq.n	8001780 <set_filter_standby_settings+0x58>
			fill_standby_settings(&reg_data, settings);
 8001774:	f107 0315 	add.w	r3, r7, #21
 8001778:	68b9      	ldr	r1, [r7, #8]
 800177a:	4618      	mov	r0, r3
 800177c:	f000 f82d 	bl	80017da <fill_standby_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8001780:	f107 0115 	add.w	r1, r7, #21
 8001784:	f107 0016 	add.w	r0, r7, #22
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2201      	movs	r2, #1
 800178c:	f7ff fd0d 	bl	80011aa <bme280_set_regs>
 8001790:	4603      	mov	r3, r0
 8001792:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8001794:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001798:	4618      	mov	r0, r3
 800179a:	3718      	adds	r7, #24
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	b25b      	sxtb	r3, r3
 80017b0:	f023 031c 	bic.w	r3, r3, #28
 80017b4:	b25a      	sxtb	r2, r3
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	78db      	ldrb	r3, [r3, #3]
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	b25b      	sxtb	r3, r3
 80017be:	f003 031c 	and.w	r3, r3, #28
 80017c2:	b25b      	sxtb	r3, r3
 80017c4:	4313      	orrs	r3, r2
 80017c6:	b25b      	sxtb	r3, r3
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	701a      	strb	r2, [r3, #0]
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80017da:	b480      	push	{r7}
 80017dc:	b083      	sub	sp, #12
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
 80017e2:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	b25b      	sxtb	r3, r3
 80017ea:	f003 031f 	and.w	r3, r3, #31
 80017ee:	b25a      	sxtb	r2, r3
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	791b      	ldrb	r3, [r3, #4]
 80017f4:	015b      	lsls	r3, r3, #5
 80017f6:	b25b      	sxtb	r3, r3
 80017f8:	4313      	orrs	r3, r2
 80017fa:	b25b      	sxtb	r3, r3
 80017fc:	b2da      	uxtb	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	701a      	strb	r2, [r3, #0]
}
 8001802:	bf00      	nop
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800180e:	b480      	push	{r7}
 8001810:	b083      	sub	sp, #12
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
 8001816:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	b25b      	sxtb	r3, r3
 800181e:	f023 031c 	bic.w	r3, r3, #28
 8001822:	b25a      	sxtb	r2, r3
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	b25b      	sxtb	r3, r3
 800182c:	f003 031c 	and.w	r3, r3, #28
 8001830:	b25b      	sxtb	r3, r3
 8001832:	4313      	orrs	r3, r2
 8001834:	b25b      	sxtb	r3, r3
 8001836:	b2da      	uxtb	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	701a      	strb	r2, [r3, #0]
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	b25b      	sxtb	r3, r3
 8001858:	f003 031f 	and.w	r3, r3, #31
 800185c:	b25a      	sxtb	r2, r3
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	785b      	ldrb	r3, [r3, #1]
 8001862:	015b      	lsls	r3, r3, #5
 8001864:	b25b      	sxtb	r3, r3
 8001866:	4313      	orrs	r3, r2
 8001868:	b25b      	sxtb	r3, r3
 800186a:	b2da      	uxtb	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	701a      	strb	r2, [r3, #0]
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	b2da      	uxtb	r2, r3
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	709a      	strb	r2, [r3, #2]
	settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3302      	adds	r3, #2
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	109b      	asrs	r3, r3, #2
 800189c:	b2db      	uxtb	r3, r3
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	701a      	strb	r2, [r3, #0]
	settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3302      	adds	r3, #2
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	095b      	lsrs	r3, r3, #5
 80018b0:	b2da      	uxtb	r2, r3
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	705a      	strb	r2, [r3, #1]
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	3303      	adds	r3, #3
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	109b      	asrs	r3, r3, #2
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	f003 0307 	and.w	r3, r3, #7
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	70da      	strb	r2, [r3, #3]
	settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	3303      	adds	r3, #3
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	095b      	lsrs	r3, r3, #5
 80018d2:	b2da      	uxtb	r2, r3
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	711a      	strb	r2, [r3, #4]
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <write_power_mode>:
/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	6039      	str	r1, [r7, #0]
 80018ee:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 80018f0:	23f4      	movs	r3, #244	@ 0xf4
 80018f2:	73bb      	strb	r3, [r7, #14]
	/* Variable to store the value read from power mode register */
	uint8_t sensor_mode_reg_val;

	/* Read the power mode register */
	rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 80018f4:	7bb8      	ldrb	r0, [r7, #14]
 80018f6:	f107 010d 	add.w	r1, r7, #13
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	2201      	movs	r2, #1
 80018fe:	f7ff fc24 	bl	800114a <bme280_get_regs>
 8001902:	4603      	mov	r3, r0
 8001904:	73fb      	strb	r3, [r7, #15]
	/* Set the power mode */
	if (rslt == BME280_OK) {
 8001906:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d117      	bne.n	800193e <write_power_mode+0x5a>
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 800190e:	7b7b      	ldrb	r3, [r7, #13]
 8001910:	b25b      	sxtb	r3, r3
 8001912:	f023 0303 	bic.w	r3, r3, #3
 8001916:	b25a      	sxtb	r2, r3
 8001918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191c:	f003 0303 	and.w	r3, r3, #3
 8001920:	b25b      	sxtb	r3, r3
 8001922:	4313      	orrs	r3, r2
 8001924:	b25b      	sxtb	r3, r3
 8001926:	b2db      	uxtb	r3, r3
 8001928:	737b      	strb	r3, [r7, #13]
		/* Write the power mode in the register */
		rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 800192a:	f107 010d 	add.w	r1, r7, #13
 800192e:	f107 000e 	add.w	r0, r7, #14
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	2201      	movs	r2, #1
 8001936:	f7ff fc38 	bl	80011aa <bme280_set_regs>
 800193a:	4603      	mov	r3, r0
 800193c:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 800193e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001942:	4618      	mov	r0, r3
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b086      	sub	sp, #24
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_data[4];
	struct bme280_settings settings;

	rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 8001952:	f107 0110 	add.w	r1, r7, #16
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2204      	movs	r2, #4
 800195a:	20f2      	movs	r0, #242	@ 0xf2
 800195c:	f7ff fbf5 	bl	800114a <bme280_get_regs>
 8001960:	4603      	mov	r3, r0
 8001962:	75fb      	strb	r3, [r7, #23]
	if (rslt == BME280_OK) {
 8001964:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d118      	bne.n	800199e <put_device_to_sleep+0x54>
		parse_device_settings(reg_data, &settings);
 800196c:	f107 0208 	add.w	r2, r7, #8
 8001970:	f107 0310 	add.w	r3, r7, #16
 8001974:	4611      	mov	r1, r2
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff ff80 	bl	800187c <parse_device_settings>
		rslt = bme280_soft_reset(dev);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff fd39 	bl	80013f4 <bme280_soft_reset>
 8001982:	4603      	mov	r3, r0
 8001984:	75fb      	strb	r3, [r7, #23]
		if (rslt == BME280_OK)
 8001986:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d107      	bne.n	800199e <put_device_to_sleep+0x54>
			rslt = reload_device_settings(&settings, dev);
 800198e:	f107 0308 	add.w	r3, r7, #8
 8001992:	6879      	ldr	r1, [r7, #4]
 8001994:	4618      	mov	r0, r3
 8001996:	f000 f808 	bl	80019aa <reload_device_settings>
 800199a:	4603      	mov	r3, r0
 800199c:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800199e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3718      	adds	r7, #24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b084      	sub	sp, #16
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
 80019b2:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	201f      	movs	r0, #31
 80019ba:	f7ff fe18 	bl	80015ee <set_osr_settings>
 80019be:	4603      	mov	r3, r0
 80019c0:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME280_OK)
 80019c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d106      	bne.n	80019d8 <reload_device_settings+0x2e>
		rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 80019ca:	683a      	ldr	r2, [r7, #0]
 80019cc:	6879      	ldr	r1, [r7, #4]
 80019ce:	201f      	movs	r0, #31
 80019d0:	f7ff feaa 	bl	8001728 <set_filter_standby_settings>
 80019d4:	4603      	mov	r3, r0
 80019d6:	73fb      	strb	r3, [r7, #15]

	return rslt;
 80019d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in integer data type.
 */
static int32_t compensate_temperature(const struct bme280_uncomp_data *uncomp_data,
						struct bme280_calib_data *calib_data)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b089      	sub	sp, #36	@ 0x24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
	int32_t var1;
	int32_t var2;
	int32_t temperature;
	int32_t temperature_min = -4000;
 80019ee:	4b2d      	ldr	r3, [pc, #180]	@ (8001aa4 <compensate_temperature+0xc0>)
 80019f0:	61bb      	str	r3, [r7, #24]
	int32_t temperature_max = 8500;
 80019f2:	f242 1334 	movw	r3, #8500	@ 0x2134
 80019f6:	617b      	str	r3, [r7, #20]

	var1 = (int32_t)((uncomp_data->temperature / 8) - ((int32_t)calib_data->dig_T1 * 2));
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	08db      	lsrs	r3, r3, #3
 80019fe:	683a      	ldr	r2, [r7, #0]
 8001a00:	8812      	ldrh	r2, [r2, #0]
 8001a02:	0052      	lsls	r2, r2, #1
 8001a04:	1a9b      	subs	r3, r3, r2
 8001a06:	613b      	str	r3, [r7, #16]
	var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a0e:	461a      	mov	r2, r3
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	fb02 f303 	mul.w	r3, r2, r3
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	da01      	bge.n	8001a1e <compensate_temperature+0x3a>
 8001a1a:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8001a1e:	12db      	asrs	r3, r3, #11
 8001a20:	613b      	str	r3, [r7, #16]
	var2 = (int32_t)((uncomp_data->temperature / 16) - ((int32_t)calib_data->dig_T1));
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	091b      	lsrs	r3, r3, #4
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	8812      	ldrh	r2, [r2, #0]
 8001a2c:	1a9b      	subs	r3, r3, r2
 8001a2e:	60fb      	str	r3, [r7, #12]
	var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_T3)) / 16384;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	fb03 f303 	mul.w	r3, r3, r3
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	da01      	bge.n	8001a3e <compensate_temperature+0x5a>
 8001a3a:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8001a3e:	131b      	asrs	r3, r3, #12
 8001a40:	461a      	mov	r2, r3
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a48:	fb02 f303 	mul.w	r3, r2, r3
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	da02      	bge.n	8001a56 <compensate_temperature+0x72>
 8001a50:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 8001a54:	333f      	adds	r3, #63	@ 0x3f
 8001a56:	139b      	asrs	r3, r3, #14
 8001a58:	60fb      	str	r3, [r7, #12]
	calib_data->t_fine = var1 + var2;
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	441a      	add	r2, r3
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	625a      	str	r2, [r3, #36]	@ 0x24
	temperature = (calib_data->t_fine * 5 + 128) / 256;
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a68:	4613      	mov	r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4413      	add	r3, r2
 8001a6e:	3380      	adds	r3, #128	@ 0x80
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	da00      	bge.n	8001a76 <compensate_temperature+0x92>
 8001a74:	33ff      	adds	r3, #255	@ 0xff
 8001a76:	121b      	asrs	r3, r3, #8
 8001a78:	61fb      	str	r3, [r7, #28]

	if (temperature < temperature_min)
 8001a7a:	69fa      	ldr	r2, [r7, #28]
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	da02      	bge.n	8001a88 <compensate_temperature+0xa4>
		temperature = temperature_min;
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	61fb      	str	r3, [r7, #28]
 8001a86:	e005      	b.n	8001a94 <compensate_temperature+0xb0>
	else if (temperature > temperature_max)
 8001a88:	69fa      	ldr	r2, [r7, #28]
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	dd01      	ble.n	8001a94 <compensate_temperature+0xb0>
		temperature = temperature_max;
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	61fb      	str	r3, [r7, #28]

	return temperature;
 8001a94:	69fb      	ldr	r3, [r7, #28]
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3724      	adds	r7, #36	@ 0x24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	fffff060 	.word	0xfffff060

08001aa8 <compensate_pressure>:
 * return the compensated pressure data in integer data type with higher
 * accuracy.
 */
static uint32_t compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8001aa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001aac:	b0ea      	sub	sp, #424	@ 0x1a8
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	f8c7 0174 	str.w	r0, [r7, #372]	@ 0x174
 8001ab4:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int64_t var4;
	uint32_t pressure;
	uint32_t pressure_min = 3000000;
 8001ab8:	4bbf      	ldr	r3, [pc, #764]	@ (8001db8 <compensate_pressure+0x310>)
 8001aba:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
	uint32_t pressure_max = 11000000;
 8001abe:	4bbf      	ldr	r3, [pc, #764]	@ (8001dbc <compensate_pressure+0x314>)
 8001ac0:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c

	var1 = ((int64_t)calib_data->t_fine) - 128000;
 8001ac4:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aca:	17da      	asrs	r2, r3, #31
 8001acc:	4698      	mov	r8, r3
 8001ace:	4691      	mov	r9, r2
 8001ad0:	f5b8 3afa 	subs.w	sl, r8, #128000	@ 0x1f400
 8001ad4:	f149 3bff 	adc.w	fp, r9, #4294967295
 8001ad8:	e9c7 ab64 	strd	sl, fp, [r7, #400]	@ 0x190
	var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
 8001adc:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001ae0:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001ae4:	fb03 f102 	mul.w	r1, r3, r2
 8001ae8:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001aec:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001af0:	fb02 f303 	mul.w	r3, r2, r3
 8001af4:	18ca      	adds	r2, r1, r3
 8001af6:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001afa:	fba3 4503 	umull	r4, r5, r3, r3
 8001afe:	1953      	adds	r3, r2, r5
 8001b00:	461d      	mov	r5, r3
 8001b02:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001b06:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001b0a:	b21b      	sxth	r3, r3
 8001b0c:	17da      	asrs	r2, r3, #31
 8001b0e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001b12:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 8001b16:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	fb03 f205 	mul.w	r2, r3, r5
 8001b20:	460b      	mov	r3, r1
 8001b22:	fb04 f303 	mul.w	r3, r4, r3
 8001b26:	4413      	add	r3, r2
 8001b28:	4602      	mov	r2, r0
 8001b2a:	fba4 1202 	umull	r1, r2, r4, r2
 8001b2e:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 8001b32:	460a      	mov	r2, r1
 8001b34:	f8c7 2128 	str.w	r2, [r7, #296]	@ 0x128
 8001b38:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001b3c:	4413      	add	r3, r2
 8001b3e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001b42:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	@ 0x128
 8001b46:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
 8001b4a:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
	var2 = var2 + ((var1 * (int64_t)calib_data->dig_P5) * 131072);
 8001b4e:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001b52:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001b56:	b21b      	sxth	r3, r3
 8001b58:	17da      	asrs	r2, r3, #31
 8001b5a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8001b5e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001b62:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001b66:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	@ 0x118
 8001b6a:	462a      	mov	r2, r5
 8001b6c:	fb02 f203 	mul.w	r2, r2, r3
 8001b70:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001b74:	4621      	mov	r1, r4
 8001b76:	fb01 f303 	mul.w	r3, r1, r3
 8001b7a:	441a      	add	r2, r3
 8001b7c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001b80:	4621      	mov	r1, r4
 8001b82:	fba3 1301 	umull	r1, r3, r3, r1
 8001b86:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8001b90:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001b94:	18d3      	adds	r3, r2, r3
 8001b96:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8001b9a:	f04f 0000 	mov.w	r0, #0
 8001b9e:	f04f 0100 	mov.w	r1, #0
 8001ba2:	e9d7 455a 	ldrd	r4, r5, [r7, #360]	@ 0x168
 8001ba6:	462b      	mov	r3, r5
 8001ba8:	0459      	lsls	r1, r3, #17
 8001baa:	4623      	mov	r3, r4
 8001bac:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001bb0:	4623      	mov	r3, r4
 8001bb2:	0458      	lsls	r0, r3, #17
 8001bb4:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8001bb8:	1814      	adds	r4, r2, r0
 8001bba:	f8c7 40a8 	str.w	r4, [r7, #168]	@ 0xa8
 8001bbe:	414b      	adcs	r3, r1
 8001bc0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001bc4:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 8001bc8:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
	var2 = var2 + (((int64_t)calib_data->dig_P4) * 34359738368);
 8001bcc:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001bd0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001bd4:	b21b      	sxth	r3, r3
 8001bd6:	17da      	asrs	r2, r3, #31
 8001bd8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8001bdc:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 8001be0:	f04f 0000 	mov.w	r0, #0
 8001be4:	f04f 0100 	mov.w	r1, #0
 8001be8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001bec:	00d9      	lsls	r1, r3, #3
 8001bee:	2000      	movs	r0, #0
 8001bf0:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8001bf4:	1814      	adds	r4, r2, r0
 8001bf6:	f8c7 40a0 	str.w	r4, [r7, #160]	@ 0xa0
 8001bfa:	414b      	adcs	r3, r1
 8001bfc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001c00:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	@ 0xa0
 8001c04:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
	var1 = ((var1 * var1 * (int64_t)calib_data->dig_P3) / 256) + ((var1 * ((int64_t)calib_data->dig_P2) * 4096));
 8001c08:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001c0c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001c10:	fb03 f102 	mul.w	r1, r3, r2
 8001c14:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001c18:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001c1c:	fb02 f303 	mul.w	r3, r2, r3
 8001c20:	18ca      	adds	r2, r1, r3
 8001c22:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001c26:	fba3 1303 	umull	r1, r3, r3, r3
 8001c2a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8001c2e:	460b      	mov	r3, r1
 8001c30:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8001c34:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001c38:	18d3      	adds	r3, r2, r3
 8001c3a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8001c3e:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001c42:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001c46:	b21b      	sxth	r3, r3
 8001c48:	17da      	asrs	r2, r3, #31
 8001c4a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8001c4e:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8001c52:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 8001c56:	462b      	mov	r3, r5
 8001c58:	e9d7 8942 	ldrd	r8, r9, [r7, #264]	@ 0x108
 8001c5c:	4642      	mov	r2, r8
 8001c5e:	fb02 f203 	mul.w	r2, r2, r3
 8001c62:	464b      	mov	r3, r9
 8001c64:	4621      	mov	r1, r4
 8001c66:	fb01 f303 	mul.w	r3, r1, r3
 8001c6a:	4413      	add	r3, r2
 8001c6c:	4622      	mov	r2, r4
 8001c6e:	4641      	mov	r1, r8
 8001c70:	fba2 1201 	umull	r1, r2, r2, r1
 8001c74:	f8c7 215c 	str.w	r2, [r7, #348]	@ 0x15c
 8001c78:	460a      	mov	r2, r1
 8001c7a:	f8c7 2158 	str.w	r2, [r7, #344]	@ 0x158
 8001c7e:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 8001c82:	4413      	add	r3, r2
 8001c84:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8001c88:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	da09      	bge.n	8001ca4 <compensate_pressure+0x1fc>
 8001c90:	f112 01ff 	adds.w	r1, r2, #255	@ 0xff
 8001c94:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8001c98:	f143 0300 	adc.w	r3, r3, #0
 8001c9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001ca0:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8001ca4:	f04f 0000 	mov.w	r0, #0
 8001ca8:	f04f 0100 	mov.w	r1, #0
 8001cac:	0a10      	lsrs	r0, r2, #8
 8001cae:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001cb2:	1219      	asrs	r1, r3, #8
 8001cb4:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001cb8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001cbc:	b21b      	sxth	r3, r3
 8001cbe:	17da      	asrs	r2, r3, #31
 8001cc0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001cc4:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8001cc8:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001ccc:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	@ 0x100
 8001cd0:	464a      	mov	r2, r9
 8001cd2:	fb02 f203 	mul.w	r2, r2, r3
 8001cd6:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001cda:	4644      	mov	r4, r8
 8001cdc:	fb04 f303 	mul.w	r3, r4, r3
 8001ce0:	441a      	add	r2, r3
 8001ce2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001ce6:	4644      	mov	r4, r8
 8001ce8:	fba3 4304 	umull	r4, r3, r3, r4
 8001cec:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001cf0:	4623      	mov	r3, r4
 8001cf2:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001cf6:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001cfa:	18d3      	adds	r3, r2, r3
 8001cfc:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001d00:	f04f 0200 	mov.w	r2, #0
 8001d04:	f04f 0300 	mov.w	r3, #0
 8001d08:	e9d7 8954 	ldrd	r8, r9, [r7, #336]	@ 0x150
 8001d0c:	464c      	mov	r4, r9
 8001d0e:	0323      	lsls	r3, r4, #12
 8001d10:	4644      	mov	r4, r8
 8001d12:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001d16:	4644      	mov	r4, r8
 8001d18:	0322      	lsls	r2, r4, #12
 8001d1a:	1884      	adds	r4, r0, r2
 8001d1c:	f8c7 4090 	str.w	r4, [r7, #144]	@ 0x90
 8001d20:	eb41 0303 	adc.w	r3, r1, r3
 8001d24:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001d28:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	@ 0x90
 8001d2c:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
	var3 = ((int64_t)1) * 140737488355328;
 8001d30:	f04f 0200 	mov.w	r2, #0
 8001d34:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001d38:	e9c7 2360 	strd	r2, r3, [r7, #384]	@ 0x180
	var1 = (var3 + var1) * ((int64_t)calib_data->dig_P1) / 8589934592;
 8001d3c:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	@ 0x180
 8001d40:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8001d44:	1884      	adds	r4, r0, r2
 8001d46:	f8c7 40f8 	str.w	r4, [r7, #248]	@ 0xf8
 8001d4a:	eb41 0303 	adc.w	r3, r1, r3
 8001d4e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001d52:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001d56:	88db      	ldrh	r3, [r3, #6]
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8001d60:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001d64:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8001d68:	462b      	mov	r3, r5
 8001d6a:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 8001d6e:	4642      	mov	r2, r8
 8001d70:	fb02 f203 	mul.w	r2, r2, r3
 8001d74:	464b      	mov	r3, r9
 8001d76:	4621      	mov	r1, r4
 8001d78:	fb01 f303 	mul.w	r3, r1, r3
 8001d7c:	4413      	add	r3, r2
 8001d7e:	4622      	mov	r2, r4
 8001d80:	4641      	mov	r1, r8
 8001d82:	fba2 1201 	umull	r1, r2, r2, r1
 8001d86:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001d8a:	460a      	mov	r2, r1
 8001d8c:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001d90:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001d94:	4413      	add	r3, r2
 8001d96:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001d9a:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	da0e      	bge.n	8001dc0 <compensate_pressure+0x318>
 8001da2:	1e51      	subs	r1, r2, #1
 8001da4:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8001da8:	f143 0301 	adc.w	r3, r3, #1
 8001dac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001db0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001db4:	e004      	b.n	8001dc0 <compensate_pressure+0x318>
 8001db6:	bf00      	nop
 8001db8:	002dc6c0 	.word	0x002dc6c0
 8001dbc:	00a7d8c0 	.word	0x00a7d8c0
 8001dc0:	f04f 0000 	mov.w	r0, #0
 8001dc4:	f04f 0100 	mov.w	r1, #0
 8001dc8:	1058      	asrs	r0, r3, #1
 8001dca:	17d9      	asrs	r1, r3, #31
 8001dcc:	e9c7 0164 	strd	r0, r1, [r7, #400]	@ 0x190

	/* To avoid divide by zero exception */
	if (var1 != 0) {
 8001dd0:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	f000 81fc 	beq.w	80021d2 <compensate_pressure+0x72a>
		var4 = 1048576 - uncomp_data->pressure;
 8001dda:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001de4:	2200      	movs	r2, #0
 8001de6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001dea:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001dee:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	@ 0x80
 8001df2:	e9c7 345e 	strd	r3, r4, [r7, #376]	@ 0x178
		var4 = (((var4 * 2147483648) - var2) * 3125) / var1;
 8001df6:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 8001dfa:	f04f 0000 	mov.w	r0, #0
 8001dfe:	f04f 0100 	mov.w	r1, #0
 8001e02:	07d9      	lsls	r1, r3, #31
 8001e04:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8001e08:	07d0      	lsls	r0, r2, #31
 8001e0a:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8001e0e:	1a84      	subs	r4, r0, r2
 8001e10:	f8c7 40e8 	str.w	r4, [r7, #232]	@ 0xe8
 8001e14:	eb61 0303 	sbc.w	r3, r1, r3
 8001e18:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001e1c:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001e20:	4622      	mov	r2, r4
 8001e22:	462b      	mov	r3, r5
 8001e24:	1891      	adds	r1, r2, r2
 8001e26:	67b9      	str	r1, [r7, #120]	@ 0x78
 8001e28:	415b      	adcs	r3, r3
 8001e2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001e2c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8001e30:	4621      	mov	r1, r4
 8001e32:	1851      	adds	r1, r2, r1
 8001e34:	6739      	str	r1, [r7, #112]	@ 0x70
 8001e36:	4629      	mov	r1, r5
 8001e38:	414b      	adcs	r3, r1
 8001e3a:	677b      	str	r3, [r7, #116]	@ 0x74
 8001e3c:	f04f 0200 	mov.w	r2, #0
 8001e40:	f04f 0300 	mov.w	r3, #0
 8001e44:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8001e48:	4649      	mov	r1, r9
 8001e4a:	018b      	lsls	r3, r1, #6
 8001e4c:	4641      	mov	r1, r8
 8001e4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e52:	4641      	mov	r1, r8
 8001e54:	018a      	lsls	r2, r1, #6
 8001e56:	4641      	mov	r1, r8
 8001e58:	1889      	adds	r1, r1, r2
 8001e5a:	66b9      	str	r1, [r7, #104]	@ 0x68
 8001e5c:	4649      	mov	r1, r9
 8001e5e:	eb43 0101 	adc.w	r1, r3, r1
 8001e62:	66f9      	str	r1, [r7, #108]	@ 0x6c
 8001e64:	f04f 0200 	mov.w	r2, #0
 8001e68:	f04f 0300 	mov.w	r3, #0
 8001e6c:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8001e70:	4649      	mov	r1, r9
 8001e72:	008b      	lsls	r3, r1, #2
 8001e74:	4641      	mov	r1, r8
 8001e76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001e7a:	4641      	mov	r1, r8
 8001e7c:	008a      	lsls	r2, r1, #2
 8001e7e:	4610      	mov	r0, r2
 8001e80:	4619      	mov	r1, r3
 8001e82:	4603      	mov	r3, r0
 8001e84:	4622      	mov	r2, r4
 8001e86:	189b      	adds	r3, r3, r2
 8001e88:	663b      	str	r3, [r7, #96]	@ 0x60
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	462a      	mov	r2, r5
 8001e8e:	eb42 0303 	adc.w	r3, r2, r3
 8001e92:	667b      	str	r3, [r7, #100]	@ 0x64
 8001e94:	f04f 0200 	mov.w	r2, #0
 8001e98:	f04f 0300 	mov.w	r3, #0
 8001e9c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8001ea0:	4649      	mov	r1, r9
 8001ea2:	008b      	lsls	r3, r1, #2
 8001ea4:	4641      	mov	r1, r8
 8001ea6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001eaa:	4641      	mov	r1, r8
 8001eac:	008a      	lsls	r2, r1, #2
 8001eae:	4610      	mov	r0, r2
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	4622      	mov	r2, r4
 8001eb6:	189b      	adds	r3, r3, r2
 8001eb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001ebc:	462b      	mov	r3, r5
 8001ebe:	460a      	mov	r2, r1
 8001ec0:	eb42 0303 	adc.w	r3, r2, r3
 8001ec4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001ec8:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8001ecc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001ed0:	f7fe fef2 	bl	8000cb8 <__aeabi_ldivmod>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	e9c7 235e 	strd	r2, r3, [r7, #376]	@ 0x178
		var1 = (((int64_t)calib_data->dig_P9) * (var4 / 8192) * (var4 / 8192)) / 33554432;
 8001edc:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001ee0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001ee4:	b21b      	sxth	r3, r3
 8001ee6:	17da      	asrs	r2, r3, #31
 8001ee8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001eec:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001ef0:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	da08      	bge.n	8001f0a <compensate_pressure+0x462>
 8001ef8:	f641 71ff 	movw	r1, #8191	@ 0x1fff
 8001efc:	1851      	adds	r1, r2, r1
 8001efe:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001f00:	f143 0300 	adc.w	r3, r3, #0
 8001f04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001f06:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001f0a:	f04f 0000 	mov.w	r0, #0
 8001f0e:	f04f 0100 	mov.w	r1, #0
 8001f12:	0b50      	lsrs	r0, r2, #13
 8001f14:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001f18:	1359      	asrs	r1, r3, #13
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001f22:	4629      	mov	r1, r5
 8001f24:	fb02 f001 	mul.w	r0, r2, r1
 8001f28:	4621      	mov	r1, r4
 8001f2a:	fb01 f103 	mul.w	r1, r1, r3
 8001f2e:	4401      	add	r1, r0
 8001f30:	4620      	mov	r0, r4
 8001f32:	fba0 2302 	umull	r2, r3, r0, r2
 8001f36:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8001f40:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8001f44:	18cb      	adds	r3, r1, r3
 8001f46:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8001f4a:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	da08      	bge.n	8001f64 <compensate_pressure+0x4bc>
 8001f52:	f641 71ff 	movw	r1, #8191	@ 0x1fff
 8001f56:	1851      	adds	r1, r2, r1
 8001f58:	6539      	str	r1, [r7, #80]	@ 0x50
 8001f5a:	f143 0300 	adc.w	r3, r3, #0
 8001f5e:	657b      	str	r3, [r7, #84]	@ 0x54
 8001f60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001f64:	f04f 0000 	mov.w	r0, #0
 8001f68:	f04f 0100 	mov.w	r1, #0
 8001f6c:	0b50      	lsrs	r0, r2, #13
 8001f6e:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001f72:	1359      	asrs	r1, r3, #13
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	@ 0x140
 8001f7c:	4629      	mov	r1, r5
 8001f7e:	fb02 f001 	mul.w	r0, r2, r1
 8001f82:	4621      	mov	r1, r4
 8001f84:	fb01 f103 	mul.w	r1, r1, r3
 8001f88:	4401      	add	r1, r0
 8001f8a:	4620      	mov	r0, r4
 8001f8c:	fba0 2302 	umull	r2, r3, r0, r2
 8001f90:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8001f94:	4613      	mov	r3, r2
 8001f96:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8001f9a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001f9e:	18cb      	adds	r3, r1, r3
 8001fa0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8001fa4:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	da08      	bge.n	8001fbe <compensate_pressure+0x516>
 8001fac:	f06f 417e 	mvn.w	r1, #4261412864	@ 0xfe000000
 8001fb0:	1851      	adds	r1, r2, r1
 8001fb2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001fb4:	f143 0300 	adc.w	r3, r3, #0
 8001fb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001fba:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001fbe:	f04f 0000 	mov.w	r0, #0
 8001fc2:	f04f 0100 	mov.w	r1, #0
 8001fc6:	0e50      	lsrs	r0, r2, #25
 8001fc8:	ea40 10c3 	orr.w	r0, r0, r3, lsl #7
 8001fcc:	1659      	asrs	r1, r3, #25
 8001fce:	e9c7 0164 	strd	r0, r1, [r7, #400]	@ 0x190
		var2 = (((int64_t)calib_data->dig_P8) * var4) / 524288;
 8001fd2:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001fd6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001fda:	b21b      	sxth	r3, r3
 8001fdc:	17da      	asrs	r2, r3, #31
 8001fde:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001fe2:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001fe6:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8001fea:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001fee:	462a      	mov	r2, r5
 8001ff0:	fb02 f203 	mul.w	r2, r2, r3
 8001ff4:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001ff8:	4621      	mov	r1, r4
 8001ffa:	fb01 f303 	mul.w	r3, r1, r3
 8001ffe:	441a      	add	r2, r3
 8002000:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8002004:	4621      	mov	r1, r4
 8002006:	fba3 1301 	umull	r1, r3, r3, r1
 800200a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800200e:	460b      	mov	r3, r1
 8002010:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8002014:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002018:	18d3      	adds	r3, r2, r3
 800201a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800201e:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8002022:	2b00      	cmp	r3, #0
 8002024:	da07      	bge.n	8002036 <compensate_pressure+0x58e>
 8002026:	4971      	ldr	r1, [pc, #452]	@ (80021ec <compensate_pressure+0x744>)
 8002028:	1851      	adds	r1, r2, r1
 800202a:	6439      	str	r1, [r7, #64]	@ 0x40
 800202c:	f143 0300 	adc.w	r3, r3, #0
 8002030:	647b      	str	r3, [r7, #68]	@ 0x44
 8002032:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002036:	f04f 0000 	mov.w	r0, #0
 800203a:	f04f 0100 	mov.w	r1, #0
 800203e:	0cd0      	lsrs	r0, r2, #19
 8002040:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 8002044:	14d9      	asrs	r1, r3, #19
 8002046:	e9c7 0162 	strd	r0, r1, [r7, #392]	@ 0x188
		var4 = ((var4 + var1 + var2) / 256) + (((int64_t)calib_data->dig_P7) * 16);
 800204a:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	@ 0x178
 800204e:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8002052:	1884      	adds	r4, r0, r2
 8002054:	f8c7 40c8 	str.w	r4, [r7, #200]	@ 0xc8
 8002058:	eb41 0303 	adc.w	r3, r1, r3
 800205c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002060:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8002064:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8002068:	4621      	mov	r1, r4
 800206a:	1889      	adds	r1, r1, r2
 800206c:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 8002070:	4629      	mov	r1, r5
 8002072:	eb43 0101 	adc.w	r1, r3, r1
 8002076:	f8c7 10c4 	str.w	r1, [r7, #196]	@ 0xc4
 800207a:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 800207e:	2b00      	cmp	r3, #0
 8002080:	da07      	bge.n	8002092 <compensate_pressure+0x5ea>
 8002082:	f112 01ff 	adds.w	r1, r2, #255	@ 0xff
 8002086:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002088:	f143 0300 	adc.w	r3, r3, #0
 800208c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800208e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002092:	f04f 0000 	mov.w	r0, #0
 8002096:	f04f 0100 	mov.w	r1, #0
 800209a:	0a10      	lsrs	r0, r2, #8
 800209c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80020a0:	1219      	asrs	r1, r3, #8
 80020a2:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80020a6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80020aa:	b21b      	sxth	r3, r3
 80020ac:	17da      	asrs	r2, r3, #31
 80020ae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80020b2:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80020b6:	f04f 0200 	mov.w	r2, #0
 80020ba:	f04f 0300 	mov.w	r3, #0
 80020be:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80020c2:	464c      	mov	r4, r9
 80020c4:	0123      	lsls	r3, r4, #4
 80020c6:	4644      	mov	r4, r8
 80020c8:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80020cc:	4644      	mov	r4, r8
 80020ce:	0122      	lsls	r2, r4, #4
 80020d0:	1884      	adds	r4, r0, r2
 80020d2:	633c      	str	r4, [r7, #48]	@ 0x30
 80020d4:	eb41 0303 	adc.w	r3, r1, r3
 80020d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80020da:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80020de:	e9c7 345e 	strd	r3, r4, [r7, #376]	@ 0x178
		pressure = (uint32_t)(((var4 / 2) * 100) / 128);
 80020e2:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 80020e6:	0fd9      	lsrs	r1, r3, #31
 80020e8:	2000      	movs	r0, #0
 80020ea:	62b9      	str	r1, [r7, #40]	@ 0x28
 80020ec:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80020ee:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 80020f2:	4621      	mov	r1, r4
 80020f4:	1889      	adds	r1, r1, r2
 80020f6:	6239      	str	r1, [r7, #32]
 80020f8:	4629      	mov	r1, r5
 80020fa:	eb43 0101 	adc.w	r1, r3, r1
 80020fe:	6279      	str	r1, [r7, #36]	@ 0x24
 8002100:	f04f 0200 	mov.w	r2, #0
 8002104:	f04f 0300 	mov.w	r3, #0
 8002108:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800210c:	4621      	mov	r1, r4
 800210e:	084a      	lsrs	r2, r1, #1
 8002110:	4629      	mov	r1, r5
 8002112:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8002116:	4629      	mov	r1, r5
 8002118:	104b      	asrs	r3, r1, #1
 800211a:	4610      	mov	r0, r2
 800211c:	4619      	mov	r1, r3
 800211e:	4602      	mov	r2, r0
 8002120:	460b      	mov	r3, r1
 8002122:	1894      	adds	r4, r2, r2
 8002124:	61bc      	str	r4, [r7, #24]
 8002126:	415b      	adcs	r3, r3
 8002128:	61fb      	str	r3, [r7, #28]
 800212a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800212e:	1814      	adds	r4, r2, r0
 8002130:	613c      	str	r4, [r7, #16]
 8002132:	414b      	adcs	r3, r1
 8002134:	617b      	str	r3, [r7, #20]
 8002136:	f04f 0200 	mov.w	r2, #0
 800213a:	f04f 0300 	mov.w	r3, #0
 800213e:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002142:	464c      	mov	r4, r9
 8002144:	0163      	lsls	r3, r4, #5
 8002146:	4644      	mov	r4, r8
 8002148:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800214c:	4644      	mov	r4, r8
 800214e:	0162      	lsls	r2, r4, #5
 8002150:	4644      	mov	r4, r8
 8002152:	18a4      	adds	r4, r4, r2
 8002154:	60bc      	str	r4, [r7, #8]
 8002156:	464c      	mov	r4, r9
 8002158:	eb43 0404 	adc.w	r4, r3, r4
 800215c:	60fc      	str	r4, [r7, #12]
 800215e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002162:	4623      	mov	r3, r4
 8002164:	181b      	adds	r3, r3, r0
 8002166:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800216a:	462b      	mov	r3, r5
 800216c:	eb41 0303 	adc.w	r3, r1, r3
 8002170:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002174:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 8002178:	2b00      	cmp	r3, #0
 800217a:	da07      	bge.n	800218c <compensate_pressure+0x6e4>
 800217c:	f112 017f 	adds.w	r1, r2, #127	@ 0x7f
 8002180:	6039      	str	r1, [r7, #0]
 8002182:	f143 0300 	adc.w	r3, r3, #0
 8002186:	607b      	str	r3, [r7, #4]
 8002188:	e9d7 2300 	ldrd	r2, r3, [r7]
 800218c:	f04f 0000 	mov.w	r0, #0
 8002190:	f04f 0100 	mov.w	r1, #0
 8002194:	09d0      	lsrs	r0, r2, #7
 8002196:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 800219a:	11d9      	asrs	r1, r3, #7
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
 80021a0:	4613      	mov	r3, r2
 80021a2:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4

		if (pressure < pressure_min)
 80021a6:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 80021aa:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d204      	bcs.n	80021bc <compensate_pressure+0x714>
			pressure = pressure_min;
 80021b2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80021b6:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80021ba:	e00e      	b.n	80021da <compensate_pressure+0x732>
		else if (pressure > pressure_max)
 80021bc:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 80021c0:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d908      	bls.n	80021da <compensate_pressure+0x732>
			pressure = pressure_max;
 80021c8:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 80021cc:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80021d0:	e003      	b.n	80021da <compensate_pressure+0x732>
	} else {
		pressure = pressure_min;
 80021d2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80021d6:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
	}

	return pressure;
 80021da:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
}
 80021de:	4618      	mov	r0, r3
 80021e0:	f507 77d4 	add.w	r7, r7, #424	@ 0x1a8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021ea:	bf00      	nop
 80021ec:	0007ffff 	.word	0x0007ffff

080021f0 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in integer data type.
 */
static uint32_t compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b08b      	sub	sp, #44	@ 0x2c
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
	int32_t var2;
	int32_t var3;
	int32_t var4;
	int32_t var5;
	uint32_t humidity;
	uint32_t humidity_max = 102400;
 80021fa:	f44f 33c8 	mov.w	r3, #102400	@ 0x19000
 80021fe:	623b      	str	r3, [r7, #32]

	var1 = calib_data->t_fine - ((int32_t)76800);
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002204:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8002208:	61fb      	str	r3, [r7, #28]
	var2 = (int32_t)(uncomp_data->humidity * 16384);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	039b      	lsls	r3, r3, #14
 8002210:	61bb      	str	r3, [r7, #24]
	var3 = (int32_t)(((int32_t)calib_data->dig_H4) * 1048576);
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002218:	051b      	lsls	r3, r3, #20
 800221a:	617b      	str	r3, [r7, #20]
	var4 = ((int32_t)calib_data->dig_H5) * var1;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002222:	461a      	mov	r2, r3
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	fb02 f303 	mul.w	r3, r2, r3
 800222a:	613b      	str	r3, [r7, #16]
	var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	1ad2      	subs	r2, r2, r3
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800223a:	2b00      	cmp	r3, #0
 800223c:	da02      	bge.n	8002244 <compensate_humidity+0x54>
 800223e:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8002242:	337f      	adds	r3, #127	@ 0x7f
 8002244:	13db      	asrs	r3, r3, #15
 8002246:	60fb      	str	r3, [r7, #12]
	var2 = (var1 * ((int32_t)calib_data->dig_H6)) / 1024;
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	f993 3022 	ldrsb.w	r3, [r3, #34]	@ 0x22
 800224e:	461a      	mov	r2, r3
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	fb02 f303 	mul.w	r3, r2, r3
 8002256:	2b00      	cmp	r3, #0
 8002258:	da01      	bge.n	800225e <compensate_humidity+0x6e>
 800225a:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 800225e:	129b      	asrs	r3, r3, #10
 8002260:	61bb      	str	r3, [r7, #24]
	var3 = (var1 * ((int32_t)calib_data->dig_H3)) / 2048;
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	7f1b      	ldrb	r3, [r3, #28]
 8002266:	461a      	mov	r2, r3
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	fb02 f303 	mul.w	r3, r2, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	da01      	bge.n	8002276 <compensate_humidity+0x86>
 8002272:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8002276:	12db      	asrs	r3, r3, #11
 8002278:	617b      	str	r3, [r7, #20]
	var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	fb02 f303 	mul.w	r3, r2, r3
 8002286:	2b00      	cmp	r3, #0
 8002288:	da01      	bge.n	800228e <compensate_humidity+0x9e>
 800228a:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 800228e:	129b      	asrs	r3, r3, #10
 8002290:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8002294:	613b      	str	r3, [r7, #16]
	var2 = ((var4 * ((int32_t)calib_data->dig_H2)) + 8192) / 16384;
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800229c:	461a      	mov	r2, r3
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	fb02 f303 	mul.w	r3, r2, r3
 80022a4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	da02      	bge.n	80022b2 <compensate_humidity+0xc2>
 80022ac:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 80022b0:	333f      	adds	r3, #63	@ 0x3f
 80022b2:	139b      	asrs	r3, r3, #14
 80022b4:	61bb      	str	r3, [r7, #24]
	var3 = var5 * var2;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	fb02 f303 	mul.w	r3, r2, r3
 80022be:	617b      	str	r3, [r7, #20]
	var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	da02      	bge.n	80022cc <compensate_humidity+0xdc>
 80022c6:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 80022ca:	337f      	adds	r3, #127	@ 0x7f
 80022cc:	13db      	asrs	r3, r3, #15
 80022ce:	461a      	mov	r2, r3
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	da02      	bge.n	80022dc <compensate_humidity+0xec>
 80022d6:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 80022da:	337f      	adds	r3, #127	@ 0x7f
 80022dc:	13db      	asrs	r3, r3, #15
 80022de:	fb02 f303 	mul.w	r3, r2, r3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	da00      	bge.n	80022e8 <compensate_humidity+0xf8>
 80022e6:	337f      	adds	r3, #127	@ 0x7f
 80022e8:	11db      	asrs	r3, r3, #7
 80022ea:	613b      	str	r3, [r7, #16]
	var5 = var3 - ((var4 * ((int32_t)calib_data->dig_H1)) / 16);
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	7e1b      	ldrb	r3, [r3, #24]
 80022f0:	461a      	mov	r2, r3
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	fb02 f303 	mul.w	r3, r2, r3
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	da00      	bge.n	80022fe <compensate_humidity+0x10e>
 80022fc:	330f      	adds	r3, #15
 80022fe:	111b      	asrs	r3, r3, #4
 8002300:	425b      	negs	r3, r3
 8002302:	461a      	mov	r2, r3
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	4413      	add	r3, r2
 8002308:	60fb      	str	r3, [r7, #12]
	var5 = (var5 < 0 ? 0 : var5);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002310:	60fb      	str	r3, [r7, #12]
	var5 = (var5 > 419430400 ? 419430400 : var5);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8002318:	bfa8      	it	ge
 800231a:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 800231e:	60fb      	str	r3, [r7, #12]
	humidity = (uint32_t)(var5 / 4096);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2b00      	cmp	r3, #0
 8002324:	da01      	bge.n	800232a <compensate_humidity+0x13a>
 8002326:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 800232a:	131b      	asrs	r3, r3, #12
 800232c:	627b      	str	r3, [r7, #36]	@ 0x24

	if (humidity > humidity_max)
 800232e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002330:	6a3b      	ldr	r3, [r7, #32]
 8002332:	429a      	cmp	r2, r3
 8002334:	d901      	bls.n	800233a <compensate_humidity+0x14a>
		humidity = humidity_max;
 8002336:	6a3b      	ldr	r3, [r7, #32]
 8002338:	627b      	str	r3, [r7, #36]	@ 0x24

	return humidity;
 800233a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800233c:	4618      	mov	r0, r3
 800233e:	372c      	adds	r7, #44	@ 0x2c
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b08a      	sub	sp, #40	@ 0x28
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 8002350:	2388      	movs	r3, #136	@ 0x88
 8002352:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	/* Array to store calibration data */
	uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = {0};
 8002356:	2300      	movs	r3, #0
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	f107 0310 	add.w	r3, r7, #16
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]
 8002362:	605a      	str	r2, [r3, #4]
 8002364:	609a      	str	r2, [r3, #8]
 8002366:	60da      	str	r2, [r3, #12]
 8002368:	611a      	str	r2, [r3, #16]
 800236a:	829a      	strh	r2, [r3, #20]

	/* Read the calibration data from the sensor */
	rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 800236c:	f107 010c 	add.w	r1, r7, #12
 8002370:	f897 0026 	ldrb.w	r0, [r7, #38]	@ 0x26
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	221a      	movs	r2, #26
 8002378:	f7fe fee7 	bl	800114a <bme280_get_regs>
 800237c:	4603      	mov	r3, r0
 800237e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (rslt == BME280_OK) {
 8002382:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002386:	2b00      	cmp	r3, #0
 8002388:	d11d      	bne.n	80023c6 <get_calib_data+0x7e>
		/* Parse temperature and pressure calibration data and store
		   it in device structure */
		parse_temp_press_calib_data(calib_data, dev);
 800238a:	f107 030c 	add.w	r3, r7, #12
 800238e:	6879      	ldr	r1, [r7, #4]
 8002390:	4618      	mov	r0, r3
 8002392:	f000 f84a 	bl	800242a <parse_temp_press_calib_data>

		reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 8002396:	23e1      	movs	r3, #225	@ 0xe1
 8002398:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		/* Read the humidity calibration data from the sensor */
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 800239c:	f107 010c 	add.w	r1, r7, #12
 80023a0:	f897 0026 	ldrb.w	r0, [r7, #38]	@ 0x26
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2207      	movs	r2, #7
 80023a8:	f7fe fecf 	bl	800114a <bme280_get_regs>
 80023ac:	4603      	mov	r3, r0
 80023ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (rslt == BME280_OK) {
 80023b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d105      	bne.n	80023c6 <get_calib_data+0x7e>
			/* Parse humidity calibration data and store it in
			   device structure */
			parse_humidity_calib_data(calib_data, dev);
 80023ba:	f107 030c 	add.w	r3, r7, #12
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f000 f8e2 	bl	800258a <parse_humidity_calib_data>
		}
	}

	return rslt;
 80023c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3728      	adds	r7, #40	@ 0x28
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 80023d2:	b480      	push	{r7}
 80023d4:	b087      	sub	sp, #28
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	60f8      	str	r0, [r7, #12]
 80023da:	60b9      	str	r1, [r7, #8]
 80023dc:	607a      	str	r2, [r7, #4]
 80023de:	70fb      	strb	r3, [r7, #3]
	uint8_t index;

	for (index = 1; index < len; index++) {
 80023e0:	2301      	movs	r3, #1
 80023e2:	75fb      	strb	r3, [r7, #23]
 80023e4:	e016      	b.n	8002414 <interleave_reg_addr+0x42>
		temp_buff[(index * 2) - 1] = reg_addr[index];
 80023e6:	7dfb      	ldrb	r3, [r7, #23]
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	441a      	add	r2, r3
 80023ec:	7dfb      	ldrb	r3, [r7, #23]
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	3b01      	subs	r3, #1
 80023f2:	68b9      	ldr	r1, [r7, #8]
 80023f4:	440b      	add	r3, r1
 80023f6:	7812      	ldrb	r2, [r2, #0]
 80023f8:	701a      	strb	r2, [r3, #0]
		temp_buff[index * 2] = reg_data[index];
 80023fa:	7dfb      	ldrb	r3, [r7, #23]
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	441a      	add	r2, r3
 8002400:	7dfb      	ldrb	r3, [r7, #23]
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	4619      	mov	r1, r3
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	440b      	add	r3, r1
 800240a:	7812      	ldrb	r2, [r2, #0]
 800240c:	701a      	strb	r2, [r3, #0]
	for (index = 1; index < len; index++) {
 800240e:	7dfb      	ldrb	r3, [r7, #23]
 8002410:	3301      	adds	r3, #1
 8002412:	75fb      	strb	r3, [r7, #23]
 8002414:	7dfa      	ldrb	r2, [r7, #23]
 8002416:	78fb      	ldrb	r3, [r7, #3]
 8002418:	429a      	cmp	r2, r3
 800241a:	d3e4      	bcc.n	80023e6 <interleave_reg_addr+0x14>
	}
}
 800241c:	bf00      	nop
 800241e:	bf00      	nop
 8002420:	371c      	adds	r7, #28
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr

0800242a <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 800242a:	b480      	push	{r7}
 800242c:	b085      	sub	sp, #20
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
 8002432:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	3310      	adds	r3, #16
 8002438:	60fb      	str	r3, [r7, #12]

	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	3301      	adds	r3, #1
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	021b      	lsls	r3, r3, #8
 8002442:	b21a      	sxth	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	b21b      	sxth	r3, r3
 800244a:	4313      	orrs	r3, r2
 800244c:	b21b      	sxth	r3, r3
 800244e:	b29a      	uxth	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	801a      	strh	r2, [r3, #0]
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	3303      	adds	r3, #3
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	021b      	lsls	r3, r3, #8
 800245c:	b21a      	sxth	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	3302      	adds	r3, #2
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	b21b      	sxth	r3, r3
 8002466:	4313      	orrs	r3, r2
 8002468:	b21a      	sxth	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	805a      	strh	r2, [r3, #2]
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	3305      	adds	r3, #5
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	021b      	lsls	r3, r3, #8
 8002476:	b21a      	sxth	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3304      	adds	r3, #4
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	b21b      	sxth	r3, r3
 8002480:	4313      	orrs	r3, r2
 8002482:	b21a      	sxth	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	809a      	strh	r2, [r3, #4]
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3307      	adds	r3, #7
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	021b      	lsls	r3, r3, #8
 8002490:	b21a      	sxth	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	3306      	adds	r3, #6
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	b21b      	sxth	r3, r3
 800249a:	4313      	orrs	r3, r2
 800249c:	b21b      	sxth	r3, r3
 800249e:	b29a      	uxth	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	80da      	strh	r2, [r3, #6]
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3309      	adds	r3, #9
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	021b      	lsls	r3, r3, #8
 80024ac:	b21a      	sxth	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	3308      	adds	r3, #8
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	b21b      	sxth	r3, r3
 80024b6:	4313      	orrs	r3, r2
 80024b8:	b21a      	sxth	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	811a      	strh	r2, [r3, #8]
	calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	330b      	adds	r3, #11
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	021b      	lsls	r3, r3, #8
 80024c6:	b21a      	sxth	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	330a      	adds	r3, #10
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	b21b      	sxth	r3, r3
 80024d0:	4313      	orrs	r3, r2
 80024d2:	b21a      	sxth	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	815a      	strh	r2, [r3, #10]
	calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	330d      	adds	r3, #13
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	021b      	lsls	r3, r3, #8
 80024e0:	b21a      	sxth	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	330c      	adds	r3, #12
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	b21b      	sxth	r3, r3
 80024ea:	4313      	orrs	r3, r2
 80024ec:	b21a      	sxth	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	819a      	strh	r2, [r3, #12]
	calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	330f      	adds	r3, #15
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	021b      	lsls	r3, r3, #8
 80024fa:	b21a      	sxth	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	330e      	adds	r3, #14
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	b21b      	sxth	r3, r3
 8002504:	4313      	orrs	r3, r2
 8002506:	b21a      	sxth	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	81da      	strh	r2, [r3, #14]
	calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3311      	adds	r3, #17
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	021b      	lsls	r3, r3, #8
 8002514:	b21a      	sxth	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	3310      	adds	r3, #16
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	b21b      	sxth	r3, r3
 800251e:	4313      	orrs	r3, r2
 8002520:	b21a      	sxth	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	821a      	strh	r2, [r3, #16]
	calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	3313      	adds	r3, #19
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	021b      	lsls	r3, r3, #8
 800252e:	b21a      	sxth	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	3312      	adds	r3, #18
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	b21b      	sxth	r3, r3
 8002538:	4313      	orrs	r3, r2
 800253a:	b21a      	sxth	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	825a      	strh	r2, [r3, #18]
	calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	3315      	adds	r3, #21
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	021b      	lsls	r3, r3, #8
 8002548:	b21a      	sxth	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	3314      	adds	r3, #20
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	b21b      	sxth	r3, r3
 8002552:	4313      	orrs	r3, r2
 8002554:	b21a      	sxth	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	829a      	strh	r2, [r3, #20]
	calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	3317      	adds	r3, #23
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	021b      	lsls	r3, r3, #8
 8002562:	b21a      	sxth	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	3316      	adds	r3, #22
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	b21b      	sxth	r3, r3
 800256c:	4313      	orrs	r3, r2
 800256e:	b21a      	sxth	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	82da      	strh	r2, [r3, #22]
	calib_data->dig_H1 = reg_data[25];
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	3319      	adds	r3, #25
 8002578:	781a      	ldrb	r2, [r3, #0]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	761a      	strb	r2, [r3, #24]

}
 800257e:	bf00      	nop
 8002580:	3714      	adds	r7, #20
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr

0800258a <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 800258a:	b480      	push	{r7}
 800258c:	b087      	sub	sp, #28
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
 8002592:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	3310      	adds	r3, #16
 8002598:	617b      	str	r3, [r7, #20]
	int16_t dig_H4_lsb;
	int16_t dig_H4_msb;
	int16_t dig_H5_lsb;
	int16_t dig_H5_msb;

	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	3301      	adds	r3, #1
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	021b      	lsls	r3, r3, #8
 80025a2:	b21a      	sxth	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	b21b      	sxth	r3, r3
 80025aa:	4313      	orrs	r3, r2
 80025ac:	b21a      	sxth	r2, r3
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	835a      	strh	r2, [r3, #26]
	calib_data->dig_H3 = reg_data[2];
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	3302      	adds	r3, #2
 80025b6:	781a      	ldrb	r2, [r3, #0]
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	771a      	strb	r2, [r3, #28]

	dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	3303      	adds	r3, #3
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	b25b      	sxtb	r3, r3
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	011b      	lsls	r3, r3, #4
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	827b      	strh	r3, [r7, #18]
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	3304      	adds	r3, #4
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	b21b      	sxth	r3, r3
 80025d4:	f003 030f 	and.w	r3, r3, #15
 80025d8:	823b      	strh	r3, [r7, #16]
	calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 80025da:	8a7a      	ldrh	r2, [r7, #18]
 80025dc:	8a3b      	ldrh	r3, [r7, #16]
 80025de:	4313      	orrs	r3, r2
 80025e0:	b21a      	sxth	r2, r3
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	83da      	strh	r2, [r3, #30]

	dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	3305      	adds	r3, #5
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	b25b      	sxtb	r3, r3
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	011b      	lsls	r3, r3, #4
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	81fb      	strh	r3, [r7, #14]
	dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	3304      	adds	r3, #4
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	091b      	lsrs	r3, r3, #4
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	81bb      	strh	r3, [r7, #12]
	calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 8002602:	89fa      	ldrh	r2, [r7, #14]
 8002604:	89bb      	ldrh	r3, [r7, #12]
 8002606:	4313      	orrs	r3, r2
 8002608:	b21a      	sxth	r2, r3
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	841a      	strh	r2, [r3, #32]
	calib_data->dig_H6 = (int8_t)reg_data[6];
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	3306      	adds	r3, #6
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	b25a      	sxtb	r2, r3
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 800261c:	bf00      	nop
 800261e:	371c      	adds	r7, #28
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	4603      	mov	r3, r0
 8002630:	460a      	mov	r2, r1
 8002632:	71fb      	strb	r3, [r7, #7]
 8002634:	4613      	mov	r3, r2
 8002636:	71bb      	strb	r3, [r7, #6]
	uint8_t settings_changed = FALSE;
 8002638:	2300      	movs	r3, #0
 800263a:	73fb      	strb	r3, [r7, #15]

	if (sub_settings & desired_settings) {
 800263c:	79fa      	ldrb	r2, [r7, #7]
 800263e:	79bb      	ldrb	r3, [r7, #6]
 8002640:	4013      	ands	r3, r2
 8002642:	b2db      	uxtb	r3, r3
 8002644:	2b00      	cmp	r3, #0
 8002646:	d002      	beq.n	800264e <are_settings_changed+0x26>
		/* User wants to modify this particular settings */
		settings_changed = TRUE;
 8002648:	2301      	movs	r3, #1
 800264a:	73fb      	strb	r3, [r7, #15]
 800264c:	e001      	b.n	8002652 <are_settings_changed+0x2a>
	} else {
		/* User don't want to modify this particular settings */
		settings_changed = FALSE;
 800264e:	2300      	movs	r3, #0
 8002650:	73fb      	strb	r3, [r7, #15]
	}

	return settings_changed;
 8002652:	7bfb      	ldrb	r3, [r7, #15]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3714      	adds	r7, #20
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00b      	beq.n	8002686 <null_ptr_check+0x26>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d007      	beq.n	8002686 <null_ptr_check+0x26>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d003      	beq.n	8002686 <null_ptr_check+0x26>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d102      	bne.n	800268c <null_ptr_check+0x2c>
		/* Device structure pointer is not valid */
		rslt = BME280_E_NULL_PTR;
 8002686:	23ff      	movs	r3, #255	@ 0xff
 8002688:	73fb      	strb	r3, [r7, #15]
 800268a:	e001      	b.n	8002690 <null_ptr_check+0x30>
	} else {
		/* Device structure is fine */
		rslt = BME280_OK;
 800268c:	2300      	movs	r3, #0
 800268e:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8002690:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002694:	4618      	mov	r0, r3
 8002696:	3714      	adds	r7, #20
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <FIRFilter_Init>:
static float MAF_IMPULSE_RESPONSE [4] = {0.25f , 0.25f , 0.25f , 0.25f};



void FIRFilter_Init(FIRFilter *fir)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
	for (uint8_t n = 0; n< FIR_FILTER_LENGHT; n++)
 80026a8:	2300      	movs	r3, #0
 80026aa:	73fb      	strb	r3, [r7, #15]
 80026ac:	e009      	b.n	80026c2 <FIRFilter_Init+0x22>
	{
		fir->buf[n] =0.0f; // filtre buffer temizleme
 80026ae:	7bfb      	ldrb	r3, [r7, #15]
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	4413      	add	r3, r2
 80026b6:	f04f 0200 	mov.w	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
	for (uint8_t n = 0; n< FIR_FILTER_LENGHT; n++)
 80026bc:	7bfb      	ldrb	r3, [r7, #15]
 80026be:	3301      	adds	r3, #1
 80026c0:	73fb      	strb	r3, [r7, #15]
 80026c2:	7bfb      	ldrb	r3, [r7, #15]
 80026c4:	2b0f      	cmp	r3, #15
 80026c6:	d9f2      	bls.n	80026ae <FIRFilter_Init+0xe>

	}

	fir->bufIndex =0; // index reset
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	fir->out = 0; // clear output
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f04f 0200 	mov.w	r2, #0
 80026d6:	645a      	str	r2, [r3, #68]	@ 0x44
}
 80026d8:	bf00      	nop
 80026da:	3714      	adds	r7, #20
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <MAFilter_Init>:
}



void MAFilter_Init(FIRFilter *fir)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
	for (uint8_t n = 0; n< MAV_FILTER_LENGHT; n++)
 80026ec:	2300      	movs	r3, #0
 80026ee:	73fb      	strb	r3, [r7, #15]
 80026f0:	e009      	b.n	8002706 <MAFilter_Init+0x22>
	{
		fir->buf[n] =0.0f; // filtre buffer temizleme
 80026f2:	7bfb      	ldrb	r3, [r7, #15]
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	4413      	add	r3, r2
 80026fa:	f04f 0200 	mov.w	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]
	for (uint8_t n = 0; n< MAV_FILTER_LENGHT; n++)
 8002700:	7bfb      	ldrb	r3, [r7, #15]
 8002702:	3301      	adds	r3, #1
 8002704:	73fb      	strb	r3, [r7, #15]
 8002706:	7bfb      	ldrb	r3, [r7, #15]
 8002708:	2b03      	cmp	r3, #3
 800270a:	d9f2      	bls.n	80026f2 <MAFilter_Init+0xe>

	}

	fir->bufIndex =0; // index reset
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	fir->out = 0; // clear output
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f04f 0200 	mov.w	r2, #0
 800271a:	645a      	str	r2, [r3, #68]	@ 0x44
}
 800271c:	bf00      	nop
 800271e:	3714      	adds	r7, #20
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <LSM6DSLTR_Init>:

//extern LSM6DSLTR;
extern I2C_HandleTypeDef hi2c1;

void LSM6DSLTR_Init()
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af04      	add	r7, sp, #16
	uint8_t data1;

	// Gyro ve Accel interrupt pin 1 aktif
	data1 = 0x54; //A4 16G 6.66khz
 800272e:	2354      	movs	r3, #84	@ 0x54
 8002730:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, LSM6DSL_Write_Address, CTRL1_XL, 1, &data1,  1, 1);
 8002732:	2301      	movs	r3, #1
 8002734:	9302      	str	r3, [sp, #8]
 8002736:	2301      	movs	r3, #1
 8002738:	9301      	str	r3, [sp, #4]
 800273a:	1dfb      	adds	r3, r7, #7
 800273c:	9300      	str	r3, [sp, #0]
 800273e:	2301      	movs	r3, #1
 8002740:	2210      	movs	r2, #16
 8002742:	21d4      	movs	r1, #212	@ 0xd4
 8002744:	481f      	ldr	r0, [pc, #124]	@ (80027c4 <LSM6DSLTR_Init+0x9c>)
 8002746:	f005 f9fb 	bl	8007b40 <HAL_I2C_Mem_Write>

	data1 = 0x54; // A4 500 dps 6.6khz
 800274a:	2354      	movs	r3, #84	@ 0x54
 800274c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, LSM6DSL_Write_Address,CTRL2_G, 1, &data1, 1, 1);
 800274e:	2301      	movs	r3, #1
 8002750:	9302      	str	r3, [sp, #8]
 8002752:	2301      	movs	r3, #1
 8002754:	9301      	str	r3, [sp, #4]
 8002756:	1dfb      	adds	r3, r7, #7
 8002758:	9300      	str	r3, [sp, #0]
 800275a:	2301      	movs	r3, #1
 800275c:	2211      	movs	r2, #17
 800275e:	21d4      	movs	r1, #212	@ 0xd4
 8002760:	4818      	ldr	r0, [pc, #96]	@ (80027c4 <LSM6DSLTR_Init+0x9c>)
 8002762:	f005 f9ed 	bl	8007b40 <HAL_I2C_Mem_Write>

	data1= 0x00;
 8002766:	2300      	movs	r3, #0
 8002768:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, LSM6DSL_Write_Address, CTRL3_C, 1, &data1, 1, 1);
 800276a:	2301      	movs	r3, #1
 800276c:	9302      	str	r3, [sp, #8]
 800276e:	2301      	movs	r3, #1
 8002770:	9301      	str	r3, [sp, #4]
 8002772:	1dfb      	adds	r3, r7, #7
 8002774:	9300      	str	r3, [sp, #0]
 8002776:	2301      	movs	r3, #1
 8002778:	2212      	movs	r2, #18
 800277a:	21d4      	movs	r1, #212	@ 0xd4
 800277c:	4811      	ldr	r0, [pc, #68]	@ (80027c4 <LSM6DSLTR_Init+0x9c>)
 800277e:	f005 f9df 	bl	8007b40 <HAL_I2C_Mem_Write>

	data1= 0x08;
 8002782:	2308      	movs	r3, #8
 8002784:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, LSM6DSL_Write_Address, CTRL4_C, 1, &data1, 1, 1);
 8002786:	2301      	movs	r3, #1
 8002788:	9302      	str	r3, [sp, #8]
 800278a:	2301      	movs	r3, #1
 800278c:	9301      	str	r3, [sp, #4]
 800278e:	1dfb      	adds	r3, r7, #7
 8002790:	9300      	str	r3, [sp, #0]
 8002792:	2301      	movs	r3, #1
 8002794:	2213      	movs	r2, #19
 8002796:	21d4      	movs	r1, #212	@ 0xd4
 8002798:	480a      	ldr	r0, [pc, #40]	@ (80027c4 <LSM6DSLTR_Init+0x9c>)
 800279a:	f005 f9d1 	bl	8007b40 <HAL_I2C_Mem_Write>

	data1 = 0x38;
 800279e:	2338      	movs	r3, #56	@ 0x38
 80027a0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, LSM6DSL_Write_Address, CTRL10_C, 1, &data1, 1, 1);
 80027a2:	2301      	movs	r3, #1
 80027a4:	9302      	str	r3, [sp, #8]
 80027a6:	2301      	movs	r3, #1
 80027a8:	9301      	str	r3, [sp, #4]
 80027aa:	1dfb      	adds	r3, r7, #7
 80027ac:	9300      	str	r3, [sp, #0]
 80027ae:	2301      	movs	r3, #1
 80027b0:	2219      	movs	r2, #25
 80027b2:	21d4      	movs	r1, #212	@ 0xd4
 80027b4:	4803      	ldr	r0, [pc, #12]	@ (80027c4 <LSM6DSLTR_Init+0x9c>)
 80027b6:	f005 f9c3 	bl	8007b40 <HAL_I2C_Mem_Write>




}
 80027ba:	bf00      	nop
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	20000264 	.word	0x20000264

080027c8 <LSM6DSLTR_Read_Accel_Data>:


void LSM6DSLTR_Read_Accel_Data(LSM6DSLTR* Lsm_Sensor)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b088      	sub	sp, #32
 80027cc:	af04      	add	r7, sp, #16
 80027ce:	6078      	str	r0, [r7, #4]
	uint8_t data;
	uint8_t s;
	int16_t accel;


	HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTZ_L_XL, 1, &data, 1, 1);
 80027d0:	2301      	movs	r3, #1
 80027d2:	9302      	str	r3, [sp, #8]
 80027d4:	2301      	movs	r3, #1
 80027d6:	9301      	str	r3, [sp, #4]
 80027d8:	f107 030d 	add.w	r3, r7, #13
 80027dc:	9300      	str	r3, [sp, #0]
 80027de:	2301      	movs	r3, #1
 80027e0:	222c      	movs	r2, #44	@ 0x2c
 80027e2:	21d5      	movs	r1, #213	@ 0xd5
 80027e4:	4864      	ldr	r0, [pc, #400]	@ (8002978 <LSM6DSLTR_Read_Accel_Data+0x1b0>)
 80027e6:	f005 faa5 	bl	8007d34 <HAL_I2C_Mem_Read>

	HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTZ_H_XL, 1, &s, 1, 1);
 80027ea:	2301      	movs	r3, #1
 80027ec:	9302      	str	r3, [sp, #8]
 80027ee:	2301      	movs	r3, #1
 80027f0:	9301      	str	r3, [sp, #4]
 80027f2:	f107 030c 	add.w	r3, r7, #12
 80027f6:	9300      	str	r3, [sp, #0]
 80027f8:	2301      	movs	r3, #1
 80027fa:	222d      	movs	r2, #45	@ 0x2d
 80027fc:	21d5      	movs	r1, #213	@ 0xd5
 80027fe:	485e      	ldr	r0, [pc, #376]	@ (8002978 <LSM6DSLTR_Read_Accel_Data+0x1b0>)
 8002800:	f005 fa98 	bl	8007d34 <HAL_I2C_Mem_Read>

	accel = (int16_t) ( (s << 8 ) | (data));
 8002804:	7b3b      	ldrb	r3, [r7, #12]
 8002806:	021b      	lsls	r3, r3, #8
 8002808:	b21a      	sxth	r2, r3
 800280a:	7b7b      	ldrb	r3, [r7, #13]
 800280c:	b21b      	sxth	r3, r3
 800280e:	4313      	orrs	r3, r2
 8002810:	81fb      	strh	r3, [r7, #14]

	Lsm_Sensor->Accel_Z = (float)accel* 0.000488*9.81; // 16g mg/LSB 0.488
 8002812:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002816:	ee07 3a90 	vmov	s15, r3
 800281a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800281e:	ee17 0a90 	vmov	r0, s15
 8002822:	f7fd fea9 	bl	8000578 <__aeabi_f2d>
 8002826:	a350      	add	r3, pc, #320	@ (adr r3, 8002968 <LSM6DSLTR_Read_Accel_Data+0x1a0>)
 8002828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800282c:	f7fd fefc 	bl	8000628 <__aeabi_dmul>
 8002830:	4602      	mov	r2, r0
 8002832:	460b      	mov	r3, r1
 8002834:	4610      	mov	r0, r2
 8002836:	4619      	mov	r1, r3
 8002838:	a34d      	add	r3, pc, #308	@ (adr r3, 8002970 <LSM6DSLTR_Read_Accel_Data+0x1a8>)
 800283a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800283e:	f7fd fef3 	bl	8000628 <__aeabi_dmul>
 8002842:	4602      	mov	r2, r0
 8002844:	460b      	mov	r3, r1
 8002846:	4610      	mov	r0, r2
 8002848:	4619      	mov	r1, r3
 800284a:	f7fe f9e5 	bl	8000c18 <__aeabi_d2f>
 800284e:	4602      	mov	r2, r0
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	609a      	str	r2, [r3, #8]



	HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTX_L_XL, 1, &data, 1, 1);
 8002854:	2301      	movs	r3, #1
 8002856:	9302      	str	r3, [sp, #8]
 8002858:	2301      	movs	r3, #1
 800285a:	9301      	str	r3, [sp, #4]
 800285c:	f107 030d 	add.w	r3, r7, #13
 8002860:	9300      	str	r3, [sp, #0]
 8002862:	2301      	movs	r3, #1
 8002864:	2228      	movs	r2, #40	@ 0x28
 8002866:	21d5      	movs	r1, #213	@ 0xd5
 8002868:	4843      	ldr	r0, [pc, #268]	@ (8002978 <LSM6DSLTR_Read_Accel_Data+0x1b0>)
 800286a:	f005 fa63 	bl	8007d34 <HAL_I2C_Mem_Read>

	HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTX_H_XL, 1, &s, 1, 1);
 800286e:	2301      	movs	r3, #1
 8002870:	9302      	str	r3, [sp, #8]
 8002872:	2301      	movs	r3, #1
 8002874:	9301      	str	r3, [sp, #4]
 8002876:	f107 030c 	add.w	r3, r7, #12
 800287a:	9300      	str	r3, [sp, #0]
 800287c:	2301      	movs	r3, #1
 800287e:	2229      	movs	r2, #41	@ 0x29
 8002880:	21d5      	movs	r1, #213	@ 0xd5
 8002882:	483d      	ldr	r0, [pc, #244]	@ (8002978 <LSM6DSLTR_Read_Accel_Data+0x1b0>)
 8002884:	f005 fa56 	bl	8007d34 <HAL_I2C_Mem_Read>

	accel = (int16_t) ( (s << 8 ) | (data));
 8002888:	7b3b      	ldrb	r3, [r7, #12]
 800288a:	021b      	lsls	r3, r3, #8
 800288c:	b21a      	sxth	r2, r3
 800288e:	7b7b      	ldrb	r3, [r7, #13]
 8002890:	b21b      	sxth	r3, r3
 8002892:	4313      	orrs	r3, r2
 8002894:	81fb      	strh	r3, [r7, #14]

	Lsm_Sensor->Accel_X= (float)accel* 0.000488*9.81; // 16g mg/LSB 0.488
 8002896:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800289a:	ee07 3a90 	vmov	s15, r3
 800289e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028a2:	ee17 0a90 	vmov	r0, s15
 80028a6:	f7fd fe67 	bl	8000578 <__aeabi_f2d>
 80028aa:	a32f      	add	r3, pc, #188	@ (adr r3, 8002968 <LSM6DSLTR_Read_Accel_Data+0x1a0>)
 80028ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b0:	f7fd feba 	bl	8000628 <__aeabi_dmul>
 80028b4:	4602      	mov	r2, r0
 80028b6:	460b      	mov	r3, r1
 80028b8:	4610      	mov	r0, r2
 80028ba:	4619      	mov	r1, r3
 80028bc:	a32c      	add	r3, pc, #176	@ (adr r3, 8002970 <LSM6DSLTR_Read_Accel_Data+0x1a8>)
 80028be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c2:	f7fd feb1 	bl	8000628 <__aeabi_dmul>
 80028c6:	4602      	mov	r2, r0
 80028c8:	460b      	mov	r3, r1
 80028ca:	4610      	mov	r0, r2
 80028cc:	4619      	mov	r1, r3
 80028ce:	f7fe f9a3 	bl	8000c18 <__aeabi_d2f>
 80028d2:	4602      	mov	r2, r0
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	601a      	str	r2, [r3, #0]



	HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTY_L_XL, 1, &data, 1, 1);
 80028d8:	2301      	movs	r3, #1
 80028da:	9302      	str	r3, [sp, #8]
 80028dc:	2301      	movs	r3, #1
 80028de:	9301      	str	r3, [sp, #4]
 80028e0:	f107 030d 	add.w	r3, r7, #13
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	2301      	movs	r3, #1
 80028e8:	222a      	movs	r2, #42	@ 0x2a
 80028ea:	21d5      	movs	r1, #213	@ 0xd5
 80028ec:	4822      	ldr	r0, [pc, #136]	@ (8002978 <LSM6DSLTR_Read_Accel_Data+0x1b0>)
 80028ee:	f005 fa21 	bl	8007d34 <HAL_I2C_Mem_Read>

	HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTY_H_XL, 1, &s, 1, 1);
 80028f2:	2301      	movs	r3, #1
 80028f4:	9302      	str	r3, [sp, #8]
 80028f6:	2301      	movs	r3, #1
 80028f8:	9301      	str	r3, [sp, #4]
 80028fa:	f107 030c 	add.w	r3, r7, #12
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	2301      	movs	r3, #1
 8002902:	222b      	movs	r2, #43	@ 0x2b
 8002904:	21d5      	movs	r1, #213	@ 0xd5
 8002906:	481c      	ldr	r0, [pc, #112]	@ (8002978 <LSM6DSLTR_Read_Accel_Data+0x1b0>)
 8002908:	f005 fa14 	bl	8007d34 <HAL_I2C_Mem_Read>

	accel = (int16_t) ( (s << 8 ) | (data));
 800290c:	7b3b      	ldrb	r3, [r7, #12]
 800290e:	021b      	lsls	r3, r3, #8
 8002910:	b21a      	sxth	r2, r3
 8002912:	7b7b      	ldrb	r3, [r7, #13]
 8002914:	b21b      	sxth	r3, r3
 8002916:	4313      	orrs	r3, r2
 8002918:	81fb      	strh	r3, [r7, #14]

	Lsm_Sensor->Accel_Y = (float)accel* 0.000488*9.81; // 16g mg/LSB 0.488
 800291a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800291e:	ee07 3a90 	vmov	s15, r3
 8002922:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002926:	ee17 0a90 	vmov	r0, s15
 800292a:	f7fd fe25 	bl	8000578 <__aeabi_f2d>
 800292e:	a30e      	add	r3, pc, #56	@ (adr r3, 8002968 <LSM6DSLTR_Read_Accel_Data+0x1a0>)
 8002930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002934:	f7fd fe78 	bl	8000628 <__aeabi_dmul>
 8002938:	4602      	mov	r2, r0
 800293a:	460b      	mov	r3, r1
 800293c:	4610      	mov	r0, r2
 800293e:	4619      	mov	r1, r3
 8002940:	a30b      	add	r3, pc, #44	@ (adr r3, 8002970 <LSM6DSLTR_Read_Accel_Data+0x1a8>)
 8002942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002946:	f7fd fe6f 	bl	8000628 <__aeabi_dmul>
 800294a:	4602      	mov	r2, r0
 800294c:	460b      	mov	r3, r1
 800294e:	4610      	mov	r0, r2
 8002950:	4619      	mov	r1, r3
 8002952:	f7fe f961 	bl	8000c18 <__aeabi_d2f>
 8002956:	4602      	mov	r2, r0
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	605a      	str	r2, [r3, #4]


}
 800295c:	bf00      	nop
 800295e:	3710      	adds	r7, #16
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	f3af 8000 	nop.w
 8002968:	0a5accd5 	.word	0x0a5accd5
 800296c:	3f3ffb48 	.word	0x3f3ffb48
 8002970:	51eb851f 	.word	0x51eb851f
 8002974:	40239eb8 	.word	0x40239eb8
 8002978:	20000264 	.word	0x20000264

0800297c <LSM6DSLTR_Read_Gyro_Data>:

void LSM6DSLTR_Read_Gyro_Data(LSM6DSLTR* Lsm_Sensor){
 800297c:	b580      	push	{r7, lr}
 800297e:	b088      	sub	sp, #32
 8002980:	af04      	add	r7, sp, #16
 8002982:	6078      	str	r0, [r7, #4]
     	uint8_t data;
		uint8_t s;
		int16_t gyro;


		HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTX_L_G, 1, &data, 1, 1);
 8002984:	2301      	movs	r3, #1
 8002986:	9302      	str	r3, [sp, #8]
 8002988:	2301      	movs	r3, #1
 800298a:	9301      	str	r3, [sp, #4]
 800298c:	f107 030d 	add.w	r3, r7, #13
 8002990:	9300      	str	r3, [sp, #0]
 8002992:	2301      	movs	r3, #1
 8002994:	2222      	movs	r2, #34	@ 0x22
 8002996:	21d5      	movs	r1, #213	@ 0xd5
 8002998:	4843      	ldr	r0, [pc, #268]	@ (8002aa8 <LSM6DSLTR_Read_Gyro_Data+0x12c>)
 800299a:	f005 f9cb 	bl	8007d34 <HAL_I2C_Mem_Read>

		HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTX_H_G, 1, &s, 1, 1);
 800299e:	2301      	movs	r3, #1
 80029a0:	9302      	str	r3, [sp, #8]
 80029a2:	2301      	movs	r3, #1
 80029a4:	9301      	str	r3, [sp, #4]
 80029a6:	f107 030c 	add.w	r3, r7, #12
 80029aa:	9300      	str	r3, [sp, #0]
 80029ac:	2301      	movs	r3, #1
 80029ae:	2223      	movs	r2, #35	@ 0x23
 80029b0:	21d5      	movs	r1, #213	@ 0xd5
 80029b2:	483d      	ldr	r0, [pc, #244]	@ (8002aa8 <LSM6DSLTR_Read_Gyro_Data+0x12c>)
 80029b4:	f005 f9be 	bl	8007d34 <HAL_I2C_Mem_Read>

		gyro = (int16_t) ( (s << 8 ) | (data));
 80029b8:	7b3b      	ldrb	r3, [r7, #12]
 80029ba:	021b      	lsls	r3, r3, #8
 80029bc:	b21a      	sxth	r2, r3
 80029be:	7b7b      	ldrb	r3, [r7, #13]
 80029c0:	b21b      	sxth	r3, r3
 80029c2:	4313      	orrs	r3, r2
 80029c4:	81fb      	strh	r3, [r7, #14]

		Lsm_Sensor->Gyro_X = (float)gyro*gyro_constant;
 80029c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029ca:	ee07 3a90 	vmov	s15, r3
 80029ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029d2:	4b36      	ldr	r3, [pc, #216]	@ (8002aac <LSM6DSLTR_Read_Gyro_Data+0x130>)
 80029d4:	edd3 7a00 	vldr	s15, [r3]
 80029d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	edc3 7a03 	vstr	s15, [r3, #12]



		HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTY_L_G, 1, &data, 1, 1);
 80029e2:	2301      	movs	r3, #1
 80029e4:	9302      	str	r3, [sp, #8]
 80029e6:	2301      	movs	r3, #1
 80029e8:	9301      	str	r3, [sp, #4]
 80029ea:	f107 030d 	add.w	r3, r7, #13
 80029ee:	9300      	str	r3, [sp, #0]
 80029f0:	2301      	movs	r3, #1
 80029f2:	2224      	movs	r2, #36	@ 0x24
 80029f4:	21d5      	movs	r1, #213	@ 0xd5
 80029f6:	482c      	ldr	r0, [pc, #176]	@ (8002aa8 <LSM6DSLTR_Read_Gyro_Data+0x12c>)
 80029f8:	f005 f99c 	bl	8007d34 <HAL_I2C_Mem_Read>

		HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTY_H_G, 1, &s, 1, 1);
 80029fc:	2301      	movs	r3, #1
 80029fe:	9302      	str	r3, [sp, #8]
 8002a00:	2301      	movs	r3, #1
 8002a02:	9301      	str	r3, [sp, #4]
 8002a04:	f107 030c 	add.w	r3, r7, #12
 8002a08:	9300      	str	r3, [sp, #0]
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	2225      	movs	r2, #37	@ 0x25
 8002a0e:	21d5      	movs	r1, #213	@ 0xd5
 8002a10:	4825      	ldr	r0, [pc, #148]	@ (8002aa8 <LSM6DSLTR_Read_Gyro_Data+0x12c>)
 8002a12:	f005 f98f 	bl	8007d34 <HAL_I2C_Mem_Read>

		gyro = (int16_t) ( (s << 8 ) | (data));
 8002a16:	7b3b      	ldrb	r3, [r7, #12]
 8002a18:	021b      	lsls	r3, r3, #8
 8002a1a:	b21a      	sxth	r2, r3
 8002a1c:	7b7b      	ldrb	r3, [r7, #13]
 8002a1e:	b21b      	sxth	r3, r3
 8002a20:	4313      	orrs	r3, r2
 8002a22:	81fb      	strh	r3, [r7, #14]

		Lsm_Sensor->Gyro_Y = (float)gyro*gyro_constant;
 8002a24:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a28:	ee07 3a90 	vmov	s15, r3
 8002a2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a30:	4b1e      	ldr	r3, [pc, #120]	@ (8002aac <LSM6DSLTR_Read_Gyro_Data+0x130>)
 8002a32:	edd3 7a00 	vldr	s15, [r3]
 8002a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	edc3 7a04 	vstr	s15, [r3, #16]


		HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTZ_L_G, 1, &data, 1, 1);
 8002a40:	2301      	movs	r3, #1
 8002a42:	9302      	str	r3, [sp, #8]
 8002a44:	2301      	movs	r3, #1
 8002a46:	9301      	str	r3, [sp, #4]
 8002a48:	f107 030d 	add.w	r3, r7, #13
 8002a4c:	9300      	str	r3, [sp, #0]
 8002a4e:	2301      	movs	r3, #1
 8002a50:	2226      	movs	r2, #38	@ 0x26
 8002a52:	21d5      	movs	r1, #213	@ 0xd5
 8002a54:	4814      	ldr	r0, [pc, #80]	@ (8002aa8 <LSM6DSLTR_Read_Gyro_Data+0x12c>)
 8002a56:	f005 f96d 	bl	8007d34 <HAL_I2C_Mem_Read>

		HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTZ_H_G, 1, &s, 1, 1);
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	9302      	str	r3, [sp, #8]
 8002a5e:	2301      	movs	r3, #1
 8002a60:	9301      	str	r3, [sp, #4]
 8002a62:	f107 030c 	add.w	r3, r7, #12
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	2301      	movs	r3, #1
 8002a6a:	2227      	movs	r2, #39	@ 0x27
 8002a6c:	21d5      	movs	r1, #213	@ 0xd5
 8002a6e:	480e      	ldr	r0, [pc, #56]	@ (8002aa8 <LSM6DSLTR_Read_Gyro_Data+0x12c>)
 8002a70:	f005 f960 	bl	8007d34 <HAL_I2C_Mem_Read>

		gyro = (int16_t) ( (s << 8 ) | (data));
 8002a74:	7b3b      	ldrb	r3, [r7, #12]
 8002a76:	021b      	lsls	r3, r3, #8
 8002a78:	b21a      	sxth	r2, r3
 8002a7a:	7b7b      	ldrb	r3, [r7, #13]
 8002a7c:	b21b      	sxth	r3, r3
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	81fb      	strh	r3, [r7, #14]

		Lsm_Sensor->Gyro_Z = (float)gyro*gyro_constant;
 8002a82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a86:	ee07 3a90 	vmov	s15, r3
 8002a8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a8e:	4b07      	ldr	r3, [pc, #28]	@ (8002aac <LSM6DSLTR_Read_Gyro_Data+0x130>)
 8002a90:	edd3 7a00 	vldr	s15, [r3]
 8002a94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	edc3 7a05 	vstr	s15, [r3, #20]

}
 8002a9e:	bf00      	nop
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	20000264 	.word	0x20000264
 8002aac:	20000000 	.word	0x20000000

08002ab0 <KalmanFilter_Init>:
 */


#include "kalman.h"

void KalmanFilter_Init(KalmanFilter *kf, float Q, float R, float initial_value) {
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	ed87 0a02 	vstr	s0, [r7, #8]
 8002abc:	edc7 0a01 	vstr	s1, [r7, #4]
 8002ac0:	ed87 1a00 	vstr	s2, [r7]
    kf->Q = Q;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	68ba      	ldr	r2, [r7, #8]
 8002ac8:	601a      	str	r2, [r3, #0]
    kf->R = R;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	605a      	str	r2, [r3, #4]
    kf->x = initial_value;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	609a      	str	r2, [r3, #8]
    kf->P = 1.0;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002adc:	60da      	str	r2, [r3, #12]
    kf->K = 0.0;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f04f 0200 	mov.w	r2, #0
 8002ae4:	611a      	str	r2, [r3, #16]
}
 8002ae6:	bf00      	nop
 8002ae8:	3714      	adds	r7, #20
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
	...

08002af4 <KalmanFilter_Update>:

float KalmanFilter_Update(KalmanFilter *kf, float measurement) {
 8002af4:	b5b0      	push	{r4, r5, r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	ed87 0a00 	vstr	s0, [r7]
    // Prediction update
    kf->P += kf->Q;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	ed93 7a03 	vldr	s14, [r3, #12]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	edd3 7a00 	vldr	s15, [r3]
 8002b0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	edc3 7a03 	vstr	s15, [r3, #12]

    // Measurement update
    kf->K = kf->P / (kf->P + kf->R);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	edd3 6a03 	vldr	s13, [r3, #12]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	ed93 7a03 	vldr	s14, [r3, #12]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	edc3 7a04 	vstr	s15, [r3, #16]
    kf->x += kf->K * (measurement - kf->x);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	ed93 7a02 	vldr	s14, [r3, #8]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	edd3 6a04 	vldr	s13, [r3, #16]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	edd3 7a02 	vldr	s15, [r3, #8]
 8002b48:	ed97 6a00 	vldr	s12, [r7]
 8002b4c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002b50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	edc3 7a02 	vstr	s15, [r3, #8]
    kf->P *= (1.0 - kf->K);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7fd fd08 	bl	8000578 <__aeabi_f2d>
 8002b68:	4604      	mov	r4, r0
 8002b6a:	460d      	mov	r5, r1
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7fd fd01 	bl	8000578 <__aeabi_f2d>
 8002b76:	4602      	mov	r2, r0
 8002b78:	460b      	mov	r3, r1
 8002b7a:	f04f 0000 	mov.w	r0, #0
 8002b7e:	490d      	ldr	r1, [pc, #52]	@ (8002bb4 <KalmanFilter_Update+0xc0>)
 8002b80:	f7fd fb9a 	bl	80002b8 <__aeabi_dsub>
 8002b84:	4602      	mov	r2, r0
 8002b86:	460b      	mov	r3, r1
 8002b88:	4620      	mov	r0, r4
 8002b8a:	4629      	mov	r1, r5
 8002b8c:	f7fd fd4c 	bl	8000628 <__aeabi_dmul>
 8002b90:	4602      	mov	r2, r0
 8002b92:	460b      	mov	r3, r1
 8002b94:	4610      	mov	r0, r2
 8002b96:	4619      	mov	r1, r3
 8002b98:	f7fe f83e 	bl	8000c18 <__aeabi_d2f>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	60da      	str	r2, [r3, #12]

    return kf->x;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	ee07 3a90 	vmov	s15, r3
}
 8002baa:	eeb0 0a67 	vmov.f32	s0, s15
 8002bae:	3708      	adds	r7, #8
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bdb0      	pop	{r4, r5, r7, pc}
 8002bb4:	3ff00000 	.word	0x3ff00000

08002bb8 <prv_parse_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed integer
 */
static int32_t
prv_parse_number(lwgps_t* gh, const char* t) {
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
    int32_t res = 0;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60fb      	str	r3, [r7, #12]
    uint8_t minus;

    if (t == NULL) {
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d106      	bne.n	8002bda <prv_parse_number+0x22>
        t = gh->p.term_str;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	3371      	adds	r3, #113	@ 0x71
 8002bd0:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 8002bd2:	e002      	b.n	8002bda <prv_parse_number+0x22>
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	603b      	str	r3, [r7, #0]
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d003      	beq.n	8002be8 <prv_parse_number+0x30>
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	2b20      	cmp	r3, #32
 8002be6:	d0f5      	beq.n	8002bd4 <prv_parse_number+0x1c>

    minus = (*t == '-' ? (++t, 1) : 0);
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	2b2d      	cmp	r3, #45	@ 0x2d
 8002bee:	d104      	bne.n	8002bfa <prv_parse_number+0x42>
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	603b      	str	r3, [r7, #0]
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e000      	b.n	8002bfc <prv_parse_number+0x44>
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	72fb      	strb	r3, [r7, #11]
    for (; t != NULL && CIN(*t); ++t) {
 8002bfe:	e00d      	b.n	8002c1c <prv_parse_number+0x64>
        res = 10 * res + CTN(*t);
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	4613      	mov	r3, r2
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	4413      	add	r3, r2
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	3b30      	subs	r3, #48	@ 0x30
 8002c12:	4413      	add	r3, r2
 8002c14:	60fb      	str	r3, [r7, #12]
    for (; t != NULL && CIN(*t); ++t) {
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	3301      	adds	r3, #1
 8002c1a:	603b      	str	r3, [r7, #0]
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d007      	beq.n	8002c32 <prv_parse_number+0x7a>
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	2b2f      	cmp	r3, #47	@ 0x2f
 8002c28:	d903      	bls.n	8002c32 <prv_parse_number+0x7a>
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	2b39      	cmp	r3, #57	@ 0x39
 8002c30:	d9e6      	bls.n	8002c00 <prv_parse_number+0x48>
    }
    return minus ? -res : res;
 8002c32:	7afb      	ldrb	r3, [r7, #11]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d002      	beq.n	8002c3e <prv_parse_number+0x86>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	425b      	negs	r3, r3
 8002c3c:	e000      	b.n	8002c40 <prv_parse_number+0x88>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3714      	adds	r7, #20
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <prv_parse_float_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed double in \ref lwgps_float_t format
 */
static lwgps_float_t
prv_parse_float_number(lwgps_t* gh, const char* t) {
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
    lwgps_float_t res;

    if (t == NULL) {
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d106      	bne.n	8002c6a <prv_parse_float_number+0x1e>
        t = gh->p.term_str;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	3371      	adds	r3, #113	@ 0x71
 8002c60:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 8002c62:	e002      	b.n	8002c6a <prv_parse_float_number+0x1e>
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	3301      	adds	r3, #1
 8002c68:	603b      	str	r3, [r7, #0]
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d003      	beq.n	8002c78 <prv_parse_float_number+0x2c>
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	2b20      	cmp	r3, #32
 8002c76:	d0f5      	beq.n	8002c64 <prv_parse_float_number+0x18>

#if LWGPS_CFG_DOUBLE
    res = strtod(t, NULL);                      /* Parse string to double */
 8002c78:	2100      	movs	r1, #0
 8002c7a:	6838      	ldr	r0, [r7, #0]
 8002c7c:	f009 fab4 	bl	800c1e8 <strtod>
 8002c80:	ed87 0b02 	vstr	d0, [r7, #8]
#else /* LWGPS_CFG_DOUBLE */
    res = strtof(t, NULL);                      /* Parse string to float */
#endif /* !LWGPS_CFG_DOUBLE */

    return FLT(res);                            /* Return casted value, based on float size */
 8002c84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c88:	ec43 2b17 	vmov	d7, r2, r3
}
 8002c8c:	eeb0 0a47 	vmov.f32	s0, s14
 8002c90:	eef0 0a67 	vmov.f32	s1, s15
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
	...

08002c9c <prv_parse_lat_long>:
 *                  NMEA output for latitude is ddmm.sss and longitude is dddmm.sss
 * \param[in]       gh: GPS handle
 * \return          Latitude/Longitude value in degrees
 */
static lwgps_float_t
prv_parse_lat_long(lwgps_t* gh) {
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b088      	sub	sp, #32
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
    lwgps_float_t ll, deg, min;

    ll = prv_parse_float_number(gh, NULL);      /* Parse value as double */
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f7ff ffd0 	bl	8002c4c <prv_parse_float_number>
 8002cac:	ed87 0b06 	vstr	d0, [r7, #24]
    deg = FLT((int)((int)ll / 100));            /* Get absolute degrees value, interested in integer part only */
 8002cb0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002cb4:	f7fd ff68 	bl	8000b88 <__aeabi_d2iz>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	4a1d      	ldr	r2, [pc, #116]	@ (8002d30 <prv_parse_lat_long+0x94>)
 8002cbc:	fb82 1203 	smull	r1, r2, r2, r3
 8002cc0:	1152      	asrs	r2, r2, #5
 8002cc2:	17db      	asrs	r3, r3, #31
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7fd fc44 	bl	8000554 <__aeabi_i2d>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	460b      	mov	r3, r1
 8002cd0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    min = ll - (deg * FLT(100));                /* Get remaining part from full number, minutes */
 8002cd4:	f04f 0200 	mov.w	r2, #0
 8002cd8:	4b16      	ldr	r3, [pc, #88]	@ (8002d34 <prv_parse_lat_long+0x98>)
 8002cda:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002cde:	f7fd fca3 	bl	8000628 <__aeabi_dmul>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002cea:	f7fd fae5 	bl	80002b8 <__aeabi_dsub>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	e9c7 2302 	strd	r2, r3, [r7, #8]
    ll = deg + (min / FLT(60.0));               /* Calculate latitude/longitude */
 8002cf6:	f04f 0200 	mov.w	r2, #0
 8002cfa:	4b0f      	ldr	r3, [pc, #60]	@ (8002d38 <prv_parse_lat_long+0x9c>)
 8002cfc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002d00:	f7fd fdbc 	bl	800087c <__aeabi_ddiv>
 8002d04:	4602      	mov	r2, r0
 8002d06:	460b      	mov	r3, r1
 8002d08:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d0c:	f7fd fad6 	bl	80002bc <__adddf3>
 8002d10:	4602      	mov	r2, r0
 8002d12:	460b      	mov	r3, r1
 8002d14:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return ll;
 8002d18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d1c:	ec43 2b17 	vmov	d7, r2, r3
}
 8002d20:	eeb0 0a47 	vmov.f32	s0, s14
 8002d24:	eef0 0a67 	vmov.f32	s1, s15
 8002d28:	3720      	adds	r7, #32
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	51eb851f 	.word	0x51eb851f
 8002d34:	40590000 	.word	0x40590000
 8002d38:	404e0000 	.word	0x404e0000

08002d3c <prv_parse_term>:
 * \brief           Parse received term
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_parse_term(lwgps_t* gh) {
 8002d3c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002d40:	b082      	sub	sp, #8
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
    if (gh->p.term_num == 0) {                  /* Check string type */
 8002d46:	6879      	ldr	r1, [r7, #4]
 8002d48:	f891 107f 	ldrb.w	r1, [r1, #127]	@ 0x7f
 8002d4c:	2900      	cmp	r1, #0
 8002d4e:	d169      	bne.n	8002e24 <prv_parse_term+0xe8>
        if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
        } else if (!strncmp(gh->p.term_str, "$GPGGA", 6) || !strncmp(gh->p.term_str, "$GNGGA", 6)) {
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	3371      	adds	r3, #113	@ 0x71
 8002d54:	2206      	movs	r2, #6
 8002d56:	49ba      	ldr	r1, [pc, #744]	@ (8003040 <prv_parse_term+0x304>)
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f009 fb5e 	bl	800c41a <strncmp>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d009      	beq.n	8002d78 <prv_parse_term+0x3c>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	3371      	adds	r3, #113	@ 0x71
 8002d68:	2206      	movs	r2, #6
 8002d6a:	49b6      	ldr	r1, [pc, #728]	@ (8003044 <prv_parse_term+0x308>)
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f009 fb54 	bl	800c41a <strncmp>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d104      	bne.n	8002d82 <prv_parse_term+0x46>
            gh->p.stat = STAT_GGA;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 8002d80:	e04e      	b.n	8002e20 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
        } else if (!strncmp(gh->p.term_str, "$GPGSA", 6) || !strncmp(gh->p.term_str, "$GNGSA", 6)) {
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	3371      	adds	r3, #113	@ 0x71
 8002d86:	2206      	movs	r2, #6
 8002d88:	49af      	ldr	r1, [pc, #700]	@ (8003048 <prv_parse_term+0x30c>)
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f009 fb45 	bl	800c41a <strncmp>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d009      	beq.n	8002daa <prv_parse_term+0x6e>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	3371      	adds	r3, #113	@ 0x71
 8002d9a:	2206      	movs	r2, #6
 8002d9c:	49ab      	ldr	r1, [pc, #684]	@ (800304c <prv_parse_term+0x310>)
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f009 fb3b 	bl	800c41a <strncmp>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d104      	bne.n	8002db4 <prv_parse_term+0x78>
            gh->p.stat = STAT_GSA;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2202      	movs	r2, #2
 8002dae:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 8002db2:	e035      	b.n	8002e20 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
        } else if (!strncmp(gh->p.term_str, "$GPGSV", 6) || !strncmp(gh->p.term_str, "$GNGSV", 6)) {
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	3371      	adds	r3, #113	@ 0x71
 8002db8:	2206      	movs	r2, #6
 8002dba:	49a5      	ldr	r1, [pc, #660]	@ (8003050 <prv_parse_term+0x314>)
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f009 fb2c 	bl	800c41a <strncmp>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d009      	beq.n	8002ddc <prv_parse_term+0xa0>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	3371      	adds	r3, #113	@ 0x71
 8002dcc:	2206      	movs	r2, #6
 8002dce:	49a1      	ldr	r1, [pc, #644]	@ (8003054 <prv_parse_term+0x318>)
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f009 fb22 	bl	800c41a <strncmp>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d104      	bne.n	8002de6 <prv_parse_term+0xaa>
            gh->p.stat = STAT_GSV;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2203      	movs	r2, #3
 8002de0:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 8002de4:	e01c      	b.n	8002e20 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
        } else if (!strncmp(gh->p.term_str, "$GPRMC", 6) || !strncmp(gh->p.term_str, "$GNRMC", 6)) {
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	3371      	adds	r3, #113	@ 0x71
 8002dea:	2206      	movs	r2, #6
 8002dec:	499a      	ldr	r1, [pc, #616]	@ (8003058 <prv_parse_term+0x31c>)
 8002dee:	4618      	mov	r0, r3
 8002df0:	f009 fb13 	bl	800c41a <strncmp>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d009      	beq.n	8002e0e <prv_parse_term+0xd2>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	3371      	adds	r3, #113	@ 0x71
 8002dfe:	2206      	movs	r2, #6
 8002e00:	4996      	ldr	r1, [pc, #600]	@ (800305c <prv_parse_term+0x320>)
 8002e02:	4618      	mov	r0, r3
 8002e04:	f009 fb09 	bl	800c41a <strncmp>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d104      	bne.n	8002e18 <prv_parse_term+0xdc>
            gh->p.stat = STAT_RMC;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2204      	movs	r2, #4
 8002e12:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 8002e16:	e003      	b.n	8002e20 <prv_parse_term+0xe4>
#if LWGPS_CFG_STATEMENT_PUBX
        } else if (!strncmp(gh->p.term_str, "$PUBX", 5)) {
            gh->p.stat = STAT_UBX;
#endif /* LWGPS_CFG_STATEMENT_PUBX */
        } else {
            gh->p.stat = STAT_UNKNOWN;          /* Invalid statement for library */
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
        }
        return 1;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e231      	b.n	8003288 <prv_parse_term+0x54c>
    }

    /* Start parsing terms */
    if (gh->p.stat == STAT_UNKNOWN) {
 8002e24:	6879      	ldr	r1, [r7, #4]
 8002e26:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 8002e2a:	2900      	cmp	r1, #0
 8002e2c:	f000 822b 	beq.w	8003286 <prv_parse_term+0x54a>
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {        /* Process GPGGA statement */
 8002e30:	6879      	ldr	r1, [r7, #4]
 8002e32:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 8002e36:	2901      	cmp	r1, #1
 8002e38:	f040 80c9 	bne.w	8002fce <prv_parse_term+0x292>
        switch (gh->p.term_num) {
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8002e42:	3b01      	subs	r3, #1
 8002e44:	2b0a      	cmp	r3, #10
 8002e46:	f200 8213 	bhi.w	8003270 <prv_parse_term+0x534>
 8002e4a:	a201      	add	r2, pc, #4	@ (adr r2, 8002e50 <prv_parse_term+0x114>)
 8002e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e50:	08002e7d 	.word	0x08002e7d
 8002e54:	08002ef7 	.word	0x08002ef7
 8002e58:	08002f0d 	.word	0x08002f0d
 8002e5c:	08002f37 	.word	0x08002f37
 8002e60:	08002f4d 	.word	0x08002f4d
 8002e64:	08002f77 	.word	0x08002f77
 8002e68:	08002f8b 	.word	0x08002f8b
 8002e6c:	08003271 	.word	0x08003271
 8002e70:	08002f9f 	.word	0x08002f9f
 8002e74:	08003271 	.word	0x08003271
 8002e78:	08002fb7 	.word	0x08002fb7
            case 1:                             /* Process UTC time */
                gh->p.data.gga.hours = 10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8002e82:	3b30      	subs	r3, #48	@ 0x30
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	461a      	mov	r2, r3
 8002e88:	0092      	lsls	r2, r2, #2
 8002e8a:	4413      	add	r3, r2
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	b2da      	uxtb	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8002e96:	4413      	add	r3, r2
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	3b30      	subs	r3, #48	@ 0x30
 8002e9c:	b2da      	uxtb	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f883 20aa 	strb.w	r2, [r3, #170]	@ 0xaa
                gh->p.data.gga.minutes = 10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 8002eaa:	3b30      	subs	r3, #48	@ 0x30
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	461a      	mov	r2, r3
 8002eb0:	0092      	lsls	r2, r2, #2
 8002eb2:	4413      	add	r3, r2
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	b2da      	uxtb	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8002ebe:	4413      	add	r3, r2
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	3b30      	subs	r3, #48	@ 0x30
 8002ec4:	b2da      	uxtb	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f883 20ab 	strb.w	r2, [r3, #171]	@ 0xab
                gh->p.data.gga.seconds = 10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8002ed2:	3b30      	subs	r3, #48	@ 0x30
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	0092      	lsls	r2, r2, #2
 8002eda:	4413      	add	r3, r2
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	b2da      	uxtb	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 8002ee6:	4413      	add	r3, r2
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	3b30      	subs	r3, #48	@ 0x30
 8002eec:	b2da      	uxtb	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
                break;
 8002ef4:	e1c7      	b.n	8003286 <prv_parse_term+0x54a>
            case 2:                             /* Latitude */
                gh->p.data.gga.latitude = prv_parse_lat_long(gh);   /* Parse latitude */
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f7ff fed0 	bl	8002c9c <prv_parse_lat_long>
 8002efc:	eeb0 7a40 	vmov.f32	s14, s0
 8002f00:	eef0 7a60 	vmov.f32	s15, s1
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	ed83 7b22 	vstr	d7, [r3, #136]	@ 0x88
                break;
 8002f0a:	e1bc      	b.n	8003286 <prv_parse_term+0x54a>
            case 3:                             /* Latitude north/south information */
                if (gh->p.term_str[0] == 'S' || gh->p.term_str[0] == 's') {
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8002f12:	2b53      	cmp	r3, #83	@ 0x53
 8002f14:	d005      	beq.n	8002f22 <prv_parse_term+0x1e6>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8002f1c:	2b73      	cmp	r3, #115	@ 0x73
 8002f1e:	f040 81a9 	bne.w	8003274 <prv_parse_term+0x538>
                    gh->p.data.gga.latitude = -gh->p.data.gga.latitude;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8002f28:	4690      	mov	r8, r2
 8002f2a:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	e9c3 8922 	strd	r8, r9, [r3, #136]	@ 0x88
                }
                break;
 8002f34:	e19e      	b.n	8003274 <prv_parse_term+0x538>
            case 4:                             /* Longitude */
                gh->p.data.gga.longitude = prv_parse_lat_long(gh);  /* Parse longitude */
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7ff feb0 	bl	8002c9c <prv_parse_lat_long>
 8002f3c:	eeb0 7a40 	vmov.f32	s14, s0
 8002f40:	eef0 7a60 	vmov.f32	s15, s1
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	ed83 7b24 	vstr	d7, [r3, #144]	@ 0x90
                break;
 8002f4a:	e19c      	b.n	8003286 <prv_parse_term+0x54a>
            case 5:                             /* Longitude east/west information */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8002f52:	2b57      	cmp	r3, #87	@ 0x57
 8002f54:	d005      	beq.n	8002f62 <prv_parse_term+0x226>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8002f5c:	2b77      	cmp	r3, #119	@ 0x77
 8002f5e:	f040 818b 	bne.w	8003278 <prv_parse_term+0x53c>
                    gh->p.data.gga.longitude = -gh->p.data.gga.longitude;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8002f68:	4614      	mov	r4, r2
 8002f6a:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	e9c3 4524 	strd	r4, r5, [r3, #144]	@ 0x90
                }
                break;
 8002f74:	e180      	b.n	8003278 <prv_parse_term+0x53c>
            case 6:                             /* Fix status */
                gh->p.data.gga.fix = (uint8_t)prv_parse_number(gh, NULL);
 8002f76:	2100      	movs	r1, #0
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f7ff fe1d 	bl	8002bb8 <prv_parse_number>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	b2da      	uxtb	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
                break;
 8002f88:	e17d      	b.n	8003286 <prv_parse_term+0x54a>
            case 7:                             /* Satellites in use */
                gh->p.data.gga.sats_in_use = (uint8_t)prv_parse_number(gh, NULL);
 8002f8a:	2100      	movs	r1, #0
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f7ff fe13 	bl	8002bb8 <prv_parse_number>
 8002f92:	4603      	mov	r3, r0
 8002f94:	b2da      	uxtb	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
                break;
 8002f9c:	e173      	b.n	8003286 <prv_parse_term+0x54a>
            case 9:                             /* Altitude */
                gh->p.data.gga.altitude = prv_parse_float_number(gh, NULL);
 8002f9e:	2100      	movs	r1, #0
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f7ff fe53 	bl	8002c4c <prv_parse_float_number>
 8002fa6:	eeb0 7a40 	vmov.f32	s14, s0
 8002faa:	eef0 7a60 	vmov.f32	s15, s1
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	ed83 7b26 	vstr	d7, [r3, #152]	@ 0x98
                break;
 8002fb4:	e167      	b.n	8003286 <prv_parse_term+0x54a>
            case 11:                            /* Altitude above ellipsoid */
                gh->p.data.gga.geo_sep = prv_parse_float_number(gh, NULL);
 8002fb6:	2100      	movs	r1, #0
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f7ff fe47 	bl	8002c4c <prv_parse_float_number>
 8002fbe:	eeb0 7a40 	vmov.f32	s14, s0
 8002fc2:	eef0 7a60 	vmov.f32	s15, s1
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	ed83 7b28 	vstr	d7, [r3, #160]	@ 0xa0
                break;
 8002fcc:	e15b      	b.n	8003286 <prv_parse_term+0x54a>
            default:
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {        /* Process GPGSA statement */
 8002fce:	6879      	ldr	r1, [r7, #4]
 8002fd0:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 8002fd4:	2902      	cmp	r1, #2
 8002fd6:	f040 8083 	bne.w	80030e0 <prv_parse_term+0x3a4>
        switch (gh->p.term_num) {
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8002fe0:	3b02      	subs	r3, #2
 8002fe2:	2b0f      	cmp	r3, #15
 8002fe4:	d860      	bhi.n	80030a8 <prv_parse_term+0x36c>
 8002fe6:	a201      	add	r2, pc, #4	@ (adr r2, 8002fec <prv_parse_term+0x2b0>)
 8002fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fec:	0800302d 	.word	0x0800302d
 8002ff0:	080030a9 	.word	0x080030a9
 8002ff4:	080030a9 	.word	0x080030a9
 8002ff8:	080030a9 	.word	0x080030a9
 8002ffc:	080030a9 	.word	0x080030a9
 8003000:	080030a9 	.word	0x080030a9
 8003004:	080030a9 	.word	0x080030a9
 8003008:	080030a9 	.word	0x080030a9
 800300c:	080030a9 	.word	0x080030a9
 8003010:	080030a9 	.word	0x080030a9
 8003014:	080030a9 	.word	0x080030a9
 8003018:	080030a9 	.word	0x080030a9
 800301c:	080030a9 	.word	0x080030a9
 8003020:	08003061 	.word	0x08003061
 8003024:	08003079 	.word	0x08003079
 8003028:	08003091 	.word	0x08003091
            case 2:                             /* Process fix mode */
                gh->p.data.gsa.fix_mode = (uint8_t)prv_parse_number(gh, NULL);
 800302c:	2100      	movs	r1, #0
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f7ff fdc2 	bl	8002bb8 <prv_parse_number>
 8003034:	4603      	mov	r3, r0
 8003036:	b2da      	uxtb	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
                break;
 800303e:	e122      	b.n	8003286 <prv_parse_term+0x54a>
 8003040:	0800f278 	.word	0x0800f278
 8003044:	0800f280 	.word	0x0800f280
 8003048:	0800f288 	.word	0x0800f288
 800304c:	0800f290 	.word	0x0800f290
 8003050:	0800f298 	.word	0x0800f298
 8003054:	0800f2a0 	.word	0x0800f2a0
 8003058:	0800f2a8 	.word	0x0800f2a8
 800305c:	0800f2b0 	.word	0x0800f2b0
            case 15:                            /* Process PDOP */
                gh->p.data.gsa.dop_p = prv_parse_float_number(gh, NULL);
 8003060:	2100      	movs	r1, #0
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f7ff fdf2 	bl	8002c4c <prv_parse_float_number>
 8003068:	eeb0 7a40 	vmov.f32	s14, s0
 800306c:	eef0 7a60 	vmov.f32	s15, s1
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	ed83 7b26 	vstr	d7, [r3, #152]	@ 0x98
                break;
 8003076:	e106      	b.n	8003286 <prv_parse_term+0x54a>
            case 16:                            /* Process HDOP */
                gh->p.data.gsa.dop_h = prv_parse_float_number(gh, NULL);
 8003078:	2100      	movs	r1, #0
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f7ff fde6 	bl	8002c4c <prv_parse_float_number>
 8003080:	eeb0 7a40 	vmov.f32	s14, s0
 8003084:	eef0 7a60 	vmov.f32	s15, s1
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	ed83 7b22 	vstr	d7, [r3, #136]	@ 0x88
                break;
 800308e:	e0fa      	b.n	8003286 <prv_parse_term+0x54a>
            case 17:                            /* Process VDOP */
                gh->p.data.gsa.dop_v = prv_parse_float_number(gh, NULL);
 8003090:	2100      	movs	r1, #0
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f7ff fdda 	bl	8002c4c <prv_parse_float_number>
 8003098:	eeb0 7a40 	vmov.f32	s14, s0
 800309c:	eef0 7a60 	vmov.f32	s15, s1
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	ed83 7b24 	vstr	d7, [r3, #144]	@ 0x90
                break;
 80030a6:	e0ee      	b.n	8003286 <prv_parse_term+0x54a>
            default:
                /* Parse satellite IDs */
                if (gh->p.term_num >= 3 && gh->p.term_num <= 14) {
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	f240 80e4 	bls.w	800327c <prv_parse_term+0x540>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 80030ba:	2b0e      	cmp	r3, #14
 80030bc:	f200 80de 	bhi.w	800327c <prv_parse_term+0x540>
                    gh->p.data.gsa.satellites_ids[gh->p.term_num - 3] = (uint8_t)prv_parse_number(gh, NULL);
 80030c0:	2100      	movs	r1, #0
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f7ff fd78 	bl	8002bb8 <prv_parse_number>
 80030c8:	4602      	mov	r2, r0
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 80030d0:	3b03      	subs	r3, #3
 80030d2:	b2d1      	uxtb	r1, r2
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	4413      	add	r3, r2
 80030d8:	460a      	mov	r2, r1
 80030da:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
                }
                break;
 80030de:	e0cd      	b.n	800327c <prv_parse_term+0x540>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {        /* Process GPGSV statement */
 80030e0:	6879      	ldr	r1, [r7, #4]
 80030e2:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 80030e6:	2903      	cmp	r1, #3
 80030e8:	d11b      	bne.n	8003122 <prv_parse_term+0x3e6>
        switch (gh->p.term_num) {
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d002      	beq.n	80030fa <prv_parse_term+0x3be>
 80030f4:	2b03      	cmp	r3, #3
 80030f6:	d00a      	beq.n	800310e <prv_parse_term+0x3d2>
                                break;
                        }
                    }
                }
#endif /* LWGPS_CFG_STATEMENT_GPGSV_SAT_DET */
                break;
 80030f8:	e0c5      	b.n	8003286 <prv_parse_term+0x54a>
                gh->p.data.gsv.stat_num = (uint8_t)prv_parse_number(gh, NULL);
 80030fa:	2100      	movs	r1, #0
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f7ff fd5b 	bl	8002bb8 <prv_parse_number>
 8003102:	4603      	mov	r3, r0
 8003104:	b2da      	uxtb	r2, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
                break;
 800310c:	e0bb      	b.n	8003286 <prv_parse_term+0x54a>
                gh->p.data.gsv.sats_in_view = (uint8_t)prv_parse_number(gh, NULL);
 800310e:	2100      	movs	r1, #0
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f7ff fd51 	bl	8002bb8 <prv_parse_number>
 8003116:	4603      	mov	r3, r0
 8003118:	b2da      	uxtb	r2, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
                break;
 8003120:	e0b1      	b.n	8003286 <prv_parse_term+0x54a>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {        /* Process GPRMC statement */
 8003122:	6879      	ldr	r1, [r7, #4]
 8003124:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 8003128:	2904      	cmp	r1, #4
 800312a:	f040 80ac 	bne.w	8003286 <prv_parse_term+0x54a>
        switch (gh->p.term_num) {
 800312e:	6879      	ldr	r1, [r7, #4]
 8003130:	f891 107f 	ldrb.w	r1, [r1, #127]	@ 0x7f
 8003134:	3902      	subs	r1, #2
 8003136:	2909      	cmp	r1, #9
 8003138:	f200 80a2 	bhi.w	8003280 <prv_parse_term+0x544>
 800313c:	a001      	add	r0, pc, #4	@ (adr r0, 8003144 <prv_parse_term+0x408>)
 800313e:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8003142:	bf00      	nop
 8003144:	0800316d 	.word	0x0800316d
 8003148:	08003281 	.word	0x08003281
 800314c:	08003281 	.word	0x08003281
 8003150:	08003281 	.word	0x08003281
 8003154:	08003281 	.word	0x08003281
 8003158:	08003187 	.word	0x08003187
 800315c:	0800319f 	.word	0x0800319f
 8003160:	080031b7 	.word	0x080031b7
 8003164:	08003231 	.word	0x08003231
 8003168:	08003249 	.word	0x08003249
            case 2:                             /* Process valid status */
                gh->p.data.rmc.is_valid = (gh->p.term_str[0] == 'A');
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8003172:	2b41      	cmp	r3, #65	@ 0x41
 8003174:	bf0c      	ite	eq
 8003176:	2301      	moveq	r3, #1
 8003178:	2300      	movne	r3, #0
 800317a:	b2db      	uxtb	r3, r3
 800317c:	461a      	mov	r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
                break;
 8003184:	e07f      	b.n	8003286 <prv_parse_term+0x54a>
            case 7:                             /* Process ground speed in knots */
                gh->p.data.rmc.speed = prv_parse_float_number(gh, NULL);
 8003186:	2100      	movs	r1, #0
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f7ff fd5f 	bl	8002c4c <prv_parse_float_number>
 800318e:	eeb0 7a40 	vmov.f32	s14, s0
 8003192:	eef0 7a60 	vmov.f32	s15, s1
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	ed83 7b24 	vstr	d7, [r3, #144]	@ 0x90
                break;
 800319c:	e073      	b.n	8003286 <prv_parse_term+0x54a>
            case 8:                             /* Process true ground coarse */
                gh->p.data.rmc.course = prv_parse_float_number(gh, NULL);
 800319e:	2100      	movs	r1, #0
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f7ff fd53 	bl	8002c4c <prv_parse_float_number>
 80031a6:	eeb0 7a40 	vmov.f32	s14, s0
 80031aa:	eef0 7a60 	vmov.f32	s15, s1
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	ed83 7b26 	vstr	d7, [r3, #152]	@ 0x98
                break;
 80031b4:	e067      	b.n	8003286 <prv_parse_term+0x54a>
            case 9:                             /* Process date */
                gh->p.data.rmc.date = (uint8_t)(10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]));
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80031bc:	3b30      	subs	r3, #48	@ 0x30
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	461a      	mov	r2, r3
 80031c2:	0092      	lsls	r2, r2, #2
 80031c4:	4413      	add	r3, r2
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	b2da      	uxtb	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80031d0:	4413      	add	r3, r2
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	3b30      	subs	r3, #48	@ 0x30
 80031d6:	b2da      	uxtb	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
                gh->p.data.rmc.month = (uint8_t)(10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]));
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 80031e4:	3b30      	subs	r3, #48	@ 0x30
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	461a      	mov	r2, r3
 80031ea:	0092      	lsls	r2, r2, #2
 80031ec:	4413      	add	r3, r2
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	b2da      	uxtb	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80031f8:	4413      	add	r3, r2
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	3b30      	subs	r3, #48	@ 0x30
 80031fe:	b2da      	uxtb	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
                gh->p.data.rmc.year = (uint8_t)(10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]));
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 800320c:	3b30      	subs	r3, #48	@ 0x30
 800320e:	b2db      	uxtb	r3, r3
 8003210:	461a      	mov	r2, r3
 8003212:	0092      	lsls	r2, r2, #2
 8003214:	4413      	add	r3, r2
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	b2da      	uxtb	r2, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 8003220:	4413      	add	r3, r2
 8003222:	b2db      	uxtb	r3, r3
 8003224:	3b30      	subs	r3, #48	@ 0x30
 8003226:	b2da      	uxtb	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f883 208b 	strb.w	r2, [r3, #139]	@ 0x8b
                break;
 800322e:	e02a      	b.n	8003286 <prv_parse_term+0x54a>
            case 10:                            /* Process magnetic variation */
                gh->p.data.rmc.variation = prv_parse_float_number(gh, NULL);
 8003230:	2100      	movs	r1, #0
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f7ff fd0a 	bl	8002c4c <prv_parse_float_number>
 8003238:	eeb0 7a40 	vmov.f32	s14, s0
 800323c:	eef0 7a60 	vmov.f32	s15, s1
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	ed83 7b28 	vstr	d7, [r3, #160]	@ 0xa0
                break;
 8003246:	e01e      	b.n	8003286 <prv_parse_term+0x54a>
            case 11:                            /* Process magnetic variation east/west */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 8003248:	6879      	ldr	r1, [r7, #4]
 800324a:	f891 1071 	ldrb.w	r1, [r1, #113]	@ 0x71
 800324e:	2957      	cmp	r1, #87	@ 0x57
 8003250:	d004      	beq.n	800325c <prv_parse_term+0x520>
 8003252:	6879      	ldr	r1, [r7, #4]
 8003254:	f891 1071 	ldrb.w	r1, [r1, #113]	@ 0x71
 8003258:	2977      	cmp	r1, #119	@ 0x77
 800325a:	d113      	bne.n	8003284 <prv_parse_term+0x548>
                    gh->p.data.rmc.variation = -gh->p.data.rmc.variation;
 800325c:	6879      	ldr	r1, [r7, #4]
 800325e:	e9d1 0128 	ldrd	r0, r1, [r1, #160]	@ 0xa0
 8003262:	4602      	mov	r2, r0
 8003264:	f081 4300 	eor.w	r3, r1, #2147483648	@ 0x80000000
 8003268:	6879      	ldr	r1, [r7, #4]
 800326a:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
                }
                break;
 800326e:	e009      	b.n	8003284 <prv_parse_term+0x548>
                break;
 8003270:	bf00      	nop
 8003272:	e008      	b.n	8003286 <prv_parse_term+0x54a>
                break;
 8003274:	bf00      	nop
 8003276:	e006      	b.n	8003286 <prv_parse_term+0x54a>
                break;
 8003278:	bf00      	nop
 800327a:	e004      	b.n	8003286 <prv_parse_term+0x54a>
                break;
 800327c:	bf00      	nop
 800327e:	e002      	b.n	8003286 <prv_parse_term+0x54a>
            default:
                break;
 8003280:	bf00      	nop
 8003282:	e000      	b.n	8003286 <prv_parse_term+0x54a>
                break;
 8003284:	bf00      	nop
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
#endif /* LWGPS_CFG_STATEMENT_PUBX */
    }
    return 1;
 8003286:	2301      	movs	r3, #1
}
 8003288:	4618      	mov	r0, r3
 800328a:	3708      	adds	r7, #8
 800328c:	46bd      	mov	sp, r7
 800328e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003292:	bf00      	nop

08003294 <prv_check_crc>:
 * \brief           Compare calculated CRC with received CRC
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_check_crc(lwgps_t* gh) {
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
    uint8_t crc;
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04) | (CHTN(gh->p.term_str[1]) & 0x0F);   /* Convert received CRC from string (hex) to number */
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80032a2:	2b2f      	cmp	r3, #47	@ 0x2f
 80032a4:	d90d      	bls.n	80032c2 <prv_check_crc+0x2e>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80032ac:	2b39      	cmp	r3, #57	@ 0x39
 80032ae:	d808      	bhi.n	80032c2 <prv_check_crc+0x2e>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80032b6:	3b30      	subs	r3, #48	@ 0x30
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	b25b      	sxtb	r3, r3
 80032bc:	011b      	lsls	r3, r3, #4
 80032be:	b25a      	sxtb	r2, r3
 80032c0:	e026      	b.n	8003310 <prv_check_crc+0x7c>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80032c8:	2b60      	cmp	r3, #96	@ 0x60
 80032ca:	d90d      	bls.n	80032e8 <prv_check_crc+0x54>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80032d2:	2b7a      	cmp	r3, #122	@ 0x7a
 80032d4:	d808      	bhi.n	80032e8 <prv_check_crc+0x54>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80032dc:	3b57      	subs	r3, #87	@ 0x57
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	b25b      	sxtb	r3, r3
 80032e2:	011b      	lsls	r3, r3, #4
 80032e4:	b25a      	sxtb	r2, r3
 80032e6:	e013      	b.n	8003310 <prv_check_crc+0x7c>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80032ee:	2b40      	cmp	r3, #64	@ 0x40
 80032f0:	d90d      	bls.n	800330e <prv_check_crc+0x7a>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80032f8:	2b5a      	cmp	r3, #90	@ 0x5a
 80032fa:	d808      	bhi.n	800330e <prv_check_crc+0x7a>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8003302:	3b37      	subs	r3, #55	@ 0x37
 8003304:	b2db      	uxtb	r3, r3
 8003306:	b25b      	sxtb	r3, r3
 8003308:	011b      	lsls	r3, r3, #4
 800330a:	b25a      	sxtb	r2, r3
 800330c:	e000      	b.n	8003310 <prv_check_crc+0x7c>
 800330e:	2200      	movs	r2, #0
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8003316:	2b2f      	cmp	r3, #47	@ 0x2f
 8003318:	d90c      	bls.n	8003334 <prv_check_crc+0xa0>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8003320:	2b39      	cmp	r3, #57	@ 0x39
 8003322:	d807      	bhi.n	8003334 <prv_check_crc+0xa0>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 800332a:	b25b      	sxtb	r3, r3
 800332c:	f003 030f 	and.w	r3, r3, #15
 8003330:	b25b      	sxtb	r3, r3
 8003332:	e028      	b.n	8003386 <prv_check_crc+0xf2>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 800333a:	2b60      	cmp	r3, #96	@ 0x60
 800333c:	d90e      	bls.n	800335c <prv_check_crc+0xc8>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8003344:	2b7a      	cmp	r3, #122	@ 0x7a
 8003346:	d809      	bhi.n	800335c <prv_check_crc+0xc8>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 800334e:	3b57      	subs	r3, #87	@ 0x57
 8003350:	b2db      	uxtb	r3, r3
 8003352:	b25b      	sxtb	r3, r3
 8003354:	f003 030f 	and.w	r3, r3, #15
 8003358:	b25b      	sxtb	r3, r3
 800335a:	e014      	b.n	8003386 <prv_check_crc+0xf2>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8003362:	2b40      	cmp	r3, #64	@ 0x40
 8003364:	d90e      	bls.n	8003384 <prv_check_crc+0xf0>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 800336c:	2b5a      	cmp	r3, #90	@ 0x5a
 800336e:	d809      	bhi.n	8003384 <prv_check_crc+0xf0>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8003376:	3b37      	subs	r3, #55	@ 0x37
 8003378:	b2db      	uxtb	r3, r3
 800337a:	b25b      	sxtb	r3, r3
 800337c:	f003 030f 	and.w	r3, r3, #15
 8003380:	b25b      	sxtb	r3, r3
 8003382:	e000      	b.n	8003386 <prv_check_crc+0xf2>
 8003384:	2300      	movs	r3, #0
 8003386:	4313      	orrs	r3, r2
 8003388:	b25b      	sxtb	r3, r3
 800338a:	73fb      	strb	r3, [r7, #15]
    return gh->p.crc_calc == crc;               /* They must match! */
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8003392:	7bfa      	ldrb	r2, [r7, #15]
 8003394:	429a      	cmp	r2, r3
 8003396:	bf0c      	ite	eq
 8003398:	2301      	moveq	r3, #1
 800339a:	2300      	movne	r3, #0
 800339c:	b2db      	uxtb	r3, r3
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3714      	adds	r7, #20
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr

080033aa <prv_copy_from_tmp_memory>:
 * \brief           Copy temporary memory to user memory
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_copy_from_tmp_memory(lwgps_t* gh) {
 80033aa:	b580      	push	{r7, lr}
 80033ac:	b082      	sub	sp, #8
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
    if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d136      	bne.n	800342a <prv_copy_from_tmp_memory+0x80>
        gh->latitude = gh->p.data.gga.latitude;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 80033c2:	6879      	ldr	r1, [r7, #4]
 80033c4:	e9c1 2300 	strd	r2, r3, [r1]
        gh->longitude = gh->p.data.gga.longitude;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 80033ce:	6879      	ldr	r1, [r7, #4]
 80033d0:	e9c1 2302 	strd	r2, r3, [r1, #8]
        gh->altitude = gh->p.data.gga.altitude;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 80033da:	6879      	ldr	r1, [r7, #4]
 80033dc:	e9c1 2304 	strd	r2, r3, [r1, #16]
        gh->geo_sep = gh->p.data.gga.geo_sep;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 80033e6:	6879      	ldr	r1, [r7, #4]
 80033e8:	e9c1 2306 	strd	r2, r3, [r1, #24]
        gh->sats_in_use = gh->p.data.gga.sats_in_use;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f893 20a8 	ldrb.w	r2, [r3, #168]	@ 0xa8
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f883 2020 	strb.w	r2, [r3, #32]
        gh->fix = gh->p.data.gga.fix;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f893 20a9 	ldrb.w	r2, [r3, #169]	@ 0xa9
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        gh->hours = gh->p.data.gga.hours;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f893 20aa 	ldrb.w	r2, [r3, #170]	@ 0xaa
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
        gh->minutes = gh->p.data.gga.minutes;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f893 20ab 	ldrb.w	r2, [r3, #171]	@ 0xab
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
        gh->seconds = gh->p.data.gga.seconds;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f893 20ac 	ldrb.w	r2, [r3, #172]	@ 0xac
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003428:	e061      	b.n	80034ee <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8003430:	2b02      	cmp	r3, #2
 8003432:	d121      	bne.n	8003478 <prv_copy_from_tmp_memory+0xce>
        gh->dop_h = gh->p.data.gsa.dop_h;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 800343a:	6879      	ldr	r1, [r7, #4]
 800343c:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
        gh->dop_p = gh->p.data.gsa.dop_p;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 8003446:	6879      	ldr	r1, [r7, #4]
 8003448:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
        gh->dop_v = gh->p.data.gsa.dop_v;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8003452:	6879      	ldr	r1, [r7, #4]
 8003454:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
        gh->fix_mode = gh->p.data.gsa.fix_mode;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f893 20a0 	ldrb.w	r2, [r3, #160]	@ 0xa0
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        memcpy(gh->satellites_ids, gh->p.data.gsa.satellites_ids, sizeof(gh->satellites_ids));
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f103 0041 	add.w	r0, r3, #65	@ 0x41
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	33a1      	adds	r3, #161	@ 0xa1
 800346e:	220c      	movs	r2, #12
 8003470:	4619      	mov	r1, r3
 8003472:	f009 f868 	bl	800c546 <memcpy>
 8003476:	e03a      	b.n	80034ee <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800347e:	2b03      	cmp	r3, #3
 8003480:	d106      	bne.n	8003490 <prv_copy_from_tmp_memory+0xe6>
        gh->sats_in_view = gh->p.data.gsv.sats_in_view;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f893 2088 	ldrb.w	r2, [r3, #136]	@ 0x88
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 800348e:	e02e      	b.n	80034ee <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8003496:	2b04      	cmp	r3, #4
 8003498:	d129      	bne.n	80034ee <prv_copy_from_tmp_memory+0x144>
        gh->course = gh->p.data.rmc.course;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 80034a0:	6879      	ldr	r1, [r7, #4]
 80034a2:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
        gh->is_valid = gh->p.data.rmc.is_valid;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f893 2088 	ldrb.w	r2, [r3, #136]	@ 0x88
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
        gh->speed = gh->p.data.rmc.speed;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 80034b8:	6879      	ldr	r1, [r7, #4]
 80034ba:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
        gh->variation = gh->p.data.rmc.variation;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 80034c4:	6879      	ldr	r1, [r7, #4]
 80034c6:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
        gh->date = gh->p.data.rmc.date;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f893 2089 	ldrb.w	r2, [r3, #137]	@ 0x89
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
        gh->month = gh->p.data.rmc.month;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f893 208a 	ldrb.w	r2, [r3, #138]	@ 0x8a
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
        gh->year = gh->p.data.rmc.year;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 208b 	ldrb.w	r2, [r3, #139]	@ 0x8b
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
        gh->clk_bias = gh->p.data.time.clk_bias;
        gh->clk_drift = gh->p.data.time.clk_drift;
        gh->tp_gran = gh->p.data.time.tp_gran;
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
    }
    return 1;
 80034ee:	2301      	movs	r3, #1
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3708      	adds	r7, #8
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       gh: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* gh) {
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
    memset(gh, 0x00, sizeof(*gh));              /* Reset structure */
 8003500:	22b0      	movs	r2, #176	@ 0xb0
 8003502:	2100      	movs	r1, #0
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f008 ff80 	bl	800c40a <memset>
    return 1;
 800350a:	2301      	movs	r3, #1
}
 800350c:	4618      	mov	r0, r3
 800350e:	3708      	adds	r7, #8
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <lwgps_process>:
 */
uint8_t
#if LWGPS_CFG_STATUS || __DOXYGEN__
lwgps_process(lwgps_t* gh, const void* data, size_t len, lwgps_process_fn evt_fn) {
#else /* LWGPS_CFG_STATUS */
lwgps_process(lwgps_t* gh, const void* data, size_t len) {
 8003514:	b580      	push	{r7, lr}
 8003516:	b086      	sub	sp, #24
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
#endif /* !LWGPS_CFG_STATUS */
    const uint8_t* d = data;
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	617b      	str	r3, [r7, #20]

    for (; len > 0; ++d, --len) {               /* Process all bytes */
 8003524:	e0ad      	b.n	8003682 <lwgps_process+0x16e>
        if (*d == '$') {                        /* Check for beginning of NMEA line */
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	2b24      	cmp	r3, #36	@ 0x24
 800352c:	d128      	bne.n	8003580 <lwgps_process+0x6c>
            memset(&gh->p, 0x00, sizeof(gh->p));/* Reset private memory */
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	3370      	adds	r3, #112	@ 0x70
 8003532:	2240      	movs	r2, #64	@ 0x40
 8003534:	2100      	movs	r1, #0
 8003536:	4618      	mov	r0, r3
 8003538:	f008 ff67 	bl	800c40a <memset>
            TERM_ADD(gh, *d);                   /* Add character to term */
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8003542:	2b0b      	cmp	r3, #11
 8003544:	f200 8097 	bhi.w	8003676 <lwgps_process+0x162>
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 800354e:	4619      	mov	r1, r3
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	781a      	ldrb	r2, [r3, #0]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	440b      	add	r3, r1
 8003558:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8003562:	3301      	adds	r3, #1
 8003564:	b2da      	uxtb	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8003572:	461a      	mov	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	4413      	add	r3, r2
 8003578:	2200      	movs	r2, #0
 800357a:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 800357e:	e07a      	b.n	8003676 <lwgps_process+0x162>
        } else if (*d == ',') {                 /* Term separator character */
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	2b2c      	cmp	r3, #44	@ 0x2c
 8003586:	d11d      	bne.n	80035c4 <lwgps_process+0xb0>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f7ff fbd7 	bl	8002d3c <prv_parse_term>
            CRC_ADD(gh, *d);                    /* Add character to CRC computation */
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f893 2081 	ldrb.w	r2, [r3, #129]	@ 0x81
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	4053      	eors	r3, r2
 800359a:	b2da      	uxtb	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
            TERM_NEXT(gh);                      /* Start with next term */
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 80035b8:	3301      	adds	r3, #1
 80035ba:	b2da      	uxtb	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
 80035c2:	e058      	b.n	8003676 <lwgps_process+0x162>
        } else if (*d == '*') {                 /* Start indicates end of data for CRC computation */
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80035ca:	d117      	bne.n	80035fc <lwgps_process+0xe8>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 80035cc:	68f8      	ldr	r0, [r7, #12]
 80035ce:	f7ff fbb5 	bl	8002d3c <prv_parse_term>
            gh->p.star = 1;                     /* STAR detected */
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
            TERM_NEXT(gh);                      /* Start with next term */
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 80035f0:	3301      	adds	r3, #1
 80035f2:	b2da      	uxtb	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
 80035fa:	e03c      	b.n	8003676 <lwgps_process+0x162>
        } else if (*d == '\r') {
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	2b0d      	cmp	r3, #13
 8003602:	d109      	bne.n	8003618 <lwgps_process+0x104>
            if (prv_check_crc(gh)) {            /* Check for CRC result */
 8003604:	68f8      	ldr	r0, [r7, #12]
 8003606:	f7ff fe45 	bl	8003294 <prv_check_crc>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d032      	beq.n	8003676 <lwgps_process+0x162>
                /* CRC is OK, in theory we can copy data from statements to user data */
                prv_copy_from_tmp_memory(gh);   /* Copy memory from temporary to user memory */
 8003610:	68f8      	ldr	r0, [r7, #12]
 8003612:	f7ff feca 	bl	80033aa <prv_copy_from_tmp_memory>
 8003616:	e02e      	b.n	8003676 <lwgps_process+0x162>
            } else if (evt_fn != NULL) {
                evt_fn(STAT_CHECKSUM_FAIL);
#endif /* LWGPS_CFG_STATUS */
            }
        } else {
            if (!gh->p.star) {                  /* Add to CRC only if star not yet detected */
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800361e:	2b00      	cmp	r3, #0
 8003620:	d109      	bne.n	8003636 <lwgps_process+0x122>
                CRC_ADD(gh, *d);                /* Add to CRC */
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f893 2081 	ldrb.w	r2, [r3, #129]	@ 0x81
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	4053      	eors	r3, r2
 800362e:	b2da      	uxtb	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
            }
            TERM_ADD(gh, *d);                   /* Add character to term */
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 800363c:	2b0b      	cmp	r3, #11
 800363e:	d81a      	bhi.n	8003676 <lwgps_process+0x162>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8003646:	4619      	mov	r1, r3
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	781a      	ldrb	r2, [r3, #0]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	440b      	add	r3, r1
 8003650:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 800365a:	3301      	adds	r3, #1
 800365c:	b2da      	uxtb	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 800366a:	461a      	mov	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	4413      	add	r3, r2
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
    for (; len > 0; ++d, --len) {               /* Process all bytes */
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	3301      	adds	r3, #1
 800367a:	617b      	str	r3, [r7, #20]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	3b01      	subs	r3, #1
 8003680:	607b      	str	r3, [r7, #4]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	f47f af4e 	bne.w	8003526 <lwgps_process+0x12>
        }
    }
    return 1;
 800368a:	2301      	movs	r3, #1
}
 800368c:	4618      	mov	r0, r3
 800368e:	3718      	adds	r7, #24
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <HAL_UART_RxCpltCallback>:
{
	return ( A - B) * (E - D ) / (C - B )+ D ;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
	if(huart==&huart2){
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a29      	ldr	r2, [pc, #164]	@ (8003744 <HAL_UART_RxCpltCallback+0xb0>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d127      	bne.n	80036f4 <HAL_UART_RxCpltCallback+0x60>
	if(rx_data != '\n' && rx_index < RX_BUFFER_SIZE) {
 80036a4:	4b28      	ldr	r3, [pc, #160]	@ (8003748 <HAL_UART_RxCpltCallback+0xb4>)
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	2b0a      	cmp	r3, #10
 80036aa:	d010      	beq.n	80036ce <HAL_UART_RxCpltCallback+0x3a>
 80036ac:	4b27      	ldr	r3, [pc, #156]	@ (800374c <HAL_UART_RxCpltCallback+0xb8>)
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	b25b      	sxtb	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	db0b      	blt.n	80036ce <HAL_UART_RxCpltCallback+0x3a>
		rx_buffer[rx_index++] = rx_data;
 80036b6:	4b25      	ldr	r3, [pc, #148]	@ (800374c <HAL_UART_RxCpltCallback+0xb8>)
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	1c5a      	adds	r2, r3, #1
 80036bc:	b2d1      	uxtb	r1, r2
 80036be:	4a23      	ldr	r2, [pc, #140]	@ (800374c <HAL_UART_RxCpltCallback+0xb8>)
 80036c0:	7011      	strb	r1, [r2, #0]
 80036c2:	461a      	mov	r2, r3
 80036c4:	4b20      	ldr	r3, [pc, #128]	@ (8003748 <HAL_UART_RxCpltCallback+0xb4>)
 80036c6:	7819      	ldrb	r1, [r3, #0]
 80036c8:	4b21      	ldr	r3, [pc, #132]	@ (8003750 <HAL_UART_RxCpltCallback+0xbc>)
 80036ca:	5499      	strb	r1, [r3, r2]
 80036cc:	e00d      	b.n	80036ea <HAL_UART_RxCpltCallback+0x56>
	} else {
		lwgps_process(&gps, rx_buffer, rx_index+1);
 80036ce:	4b1f      	ldr	r3, [pc, #124]	@ (800374c <HAL_UART_RxCpltCallback+0xb8>)
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	3301      	adds	r3, #1
 80036d4:	461a      	mov	r2, r3
 80036d6:	491e      	ldr	r1, [pc, #120]	@ (8003750 <HAL_UART_RxCpltCallback+0xbc>)
 80036d8:	481e      	ldr	r0, [pc, #120]	@ (8003754 <HAL_UART_RxCpltCallback+0xc0>)
 80036da:	f7ff ff1b 	bl	8003514 <lwgps_process>
		rx_index = 0;
 80036de:	4b1b      	ldr	r3, [pc, #108]	@ (800374c <HAL_UART_RxCpltCallback+0xb8>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	701a      	strb	r2, [r3, #0]
		rx_data = 0;
 80036e4:	4b18      	ldr	r3, [pc, #96]	@ (8003748 <HAL_UART_RxCpltCallback+0xb4>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 80036ea:	2201      	movs	r2, #1
 80036ec:	4916      	ldr	r1, [pc, #88]	@ (8003748 <HAL_UART_RxCpltCallback+0xb4>)
 80036ee:	4815      	ldr	r0, [pc, #84]	@ (8003744 <HAL_UART_RxCpltCallback+0xb0>)
 80036f0:	f006 fe59 	bl	800a3a6 <HAL_UART_Receive_IT>
	}


	if(huart == &huart6){
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a18      	ldr	r2, [pc, #96]	@ (8003758 <HAL_UART_RxCpltCallback+0xc4>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d11e      	bne.n	800373a <HAL_UART_RxCpltCallback+0xa6>
		if(rx_data_EGU != '\n' && rx_index_EGU <34){//sol taraf silinebilir
 80036fc:	4b17      	ldr	r3, [pc, #92]	@ (800375c <HAL_UART_RxCpltCallback+0xc8>)
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	2b0a      	cmp	r3, #10
 8003702:	d00f      	beq.n	8003724 <HAL_UART_RxCpltCallback+0x90>
 8003704:	4b16      	ldr	r3, [pc, #88]	@ (8003760 <HAL_UART_RxCpltCallback+0xcc>)
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	2b21      	cmp	r3, #33	@ 0x21
 800370a:	d80b      	bhi.n	8003724 <HAL_UART_RxCpltCallback+0x90>
			EGU_RX_BUFFER[rx_index_EGU++]=rx_data_EGU;
 800370c:	4b14      	ldr	r3, [pc, #80]	@ (8003760 <HAL_UART_RxCpltCallback+0xcc>)
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	1c5a      	adds	r2, r3, #1
 8003712:	b2d1      	uxtb	r1, r2
 8003714:	4a12      	ldr	r2, [pc, #72]	@ (8003760 <HAL_UART_RxCpltCallback+0xcc>)
 8003716:	7011      	strb	r1, [r2, #0]
 8003718:	461a      	mov	r2, r3
 800371a:	4b10      	ldr	r3, [pc, #64]	@ (800375c <HAL_UART_RxCpltCallback+0xc8>)
 800371c:	7819      	ldrb	r1, [r3, #0]
 800371e:	4b11      	ldr	r3, [pc, #68]	@ (8003764 <HAL_UART_RxCpltCallback+0xd0>)
 8003720:	5499      	strb	r1, [r3, r2]
 8003722:	e005      	b.n	8003730 <HAL_UART_RxCpltCallback+0x9c>

		}
		else
		{
			rx_data_EGU=0;
 8003724:	4b0d      	ldr	r3, [pc, #52]	@ (800375c <HAL_UART_RxCpltCallback+0xc8>)
 8003726:	2200      	movs	r2, #0
 8003728:	701a      	strb	r2, [r3, #0]
			rx_index_EGU=0;
 800372a:	4b0d      	ldr	r3, [pc, #52]	@ (8003760 <HAL_UART_RxCpltCallback+0xcc>)
 800372c:	2200      	movs	r2, #0
 800372e:	701a      	strb	r2, [r3, #0]

		}
	HAL_UART_Receive_IT(&huart6, &rx_data_EGU, 1);
 8003730:	2201      	movs	r2, #1
 8003732:	490a      	ldr	r1, [pc, #40]	@ (800375c <HAL_UART_RxCpltCallback+0xc8>)
 8003734:	4808      	ldr	r0, [pc, #32]	@ (8003758 <HAL_UART_RxCpltCallback+0xc4>)
 8003736:	f006 fe36 	bl	800a3a6 <HAL_UART_Receive_IT>
		}
}
 800373a:	bf00      	nop
 800373c:	3708      	adds	r7, #8
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	200004bc 	.word	0x200004bc
 8003748:	20000639 	.word	0x20000639
 800374c:	20000638 	.word	0x20000638
 8003750:	200005b8 	.word	0x200005b8
 8003754:	200023d8 	.word	0x200023d8
 8003758:	20000544 	.word	0x20000544
 800375c:	200005aa 	.word	0x200005aa
 8003760:	200005ab 	.word	0x200005ab
 8003764:	20000588 	.word	0x20000588

08003768 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]

	if(htim==&htim11){ // 1 sn
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a14      	ldr	r2, [pc, #80]	@ (80037c4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d102      	bne.n	800377e <HAL_TIM_PeriodElapsedCallback+0x16>
   lora_flag=1;
 8003778:	4b13      	ldr	r3, [pc, #76]	@ (80037c8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800377a:	2201      	movs	r2, #1
 800377c:	701a      	strb	r2, [r3, #0]


	}

	if(htim==&htim10){ //30ms
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a12      	ldr	r2, [pc, #72]	@ (80037cc <HAL_TIM_PeriodElapsedCallback+0x64>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d102      	bne.n	800378c <HAL_TIM_PeriodElapsedCallback+0x24>
	sensor_flag=1;
 8003786:	4b12      	ldr	r3, [pc, #72]	@ (80037d0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003788:	2201      	movs	r2, #1
 800378a:	701a      	strb	r2, [r3, #0]


	}


	if(htim==&htim6){ // 200 ms timer
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a11      	ldr	r2, [pc, #68]	@ (80037d4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d112      	bne.n	80037ba <HAL_TIM_PeriodElapsedCallback+0x52>
	timer_200ms_flag = 1;
 8003794:	4b10      	ldr	r3, [pc, #64]	@ (80037d8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8003796:	2201      	movs	r2, #1
 8003798:	701a      	strb	r2, [r3, #0]
	egu_durum_flag=1;
 800379a:	4b10      	ldr	r3, [pc, #64]	@ (80037dc <HAL_TIM_PeriodElapsedCallback+0x74>)
 800379c:	2201      	movs	r2, #1
 800379e:	701a      	strb	r2, [r3, #0]


		if(counter == 15)
 80037a0:	4b0f      	ldr	r3, [pc, #60]	@ (80037e0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	2b0f      	cmp	r3, #15
 80037a6:	d108      	bne.n	80037ba <HAL_TIM_PeriodElapsedCallback+0x52>
		{
			adc_flag=1;
 80037a8:	4b0e      	ldr	r3, [pc, #56]	@ (80037e4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80037aa:	2201      	movs	r2, #1
 80037ac:	701a      	strb	r2, [r3, #0]
			counter =0;
 80037ae:	4b0c      	ldr	r3, [pc, #48]	@ (80037e0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	701a      	strb	r2, [r3, #0]
			HAL_ADC_Start_IT(&hadc1);
 80037b4:	480c      	ldr	r0, [pc, #48]	@ (80037e8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80037b6:	f002 fd8f 	bl	80062d8 <HAL_ADC_Start_IT>


	}


}
 80037ba:	bf00      	nop
 80037bc:	3708      	adds	r7, #8
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	20000430 	.word	0x20000430
 80037c8:	20002296 	.word	0x20002296
 80037cc:	200003e8 	.word	0x200003e8
 80037d0:	20002297 	.word	0x20002297
 80037d4:	20000358 	.word	0x20000358
 80037d8:	2000063d 	.word	0x2000063d
 80037dc:	20002298 	.word	0x20002298
 80037e0:	200005b4 	.word	0x200005b4
 80037e4:	200005b5 	.word	0x200005b5
 80037e8:	2000021c 	.word	0x2000021c

080037ec <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1 )
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a09      	ldr	r2, [pc, #36]	@ (8003820 <HAL_ADC_ConvCpltCallback+0x34>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d10c      	bne.n	8003818 <HAL_ADC_ConvCpltCallback+0x2c>
	{
		adc= HAL_ADC_GetValue(&hadc1);
 80037fe:	4809      	ldr	r0, [pc, #36]	@ (8003824 <HAL_ADC_ConvCpltCallback+0x38>)
 8003800:	f002 ff58 	bl	80066b4 <HAL_ADC_GetValue>
 8003804:	ee07 0a90 	vmov	s15, r0
 8003808:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800380c:	4b06      	ldr	r3, [pc, #24]	@ (8003828 <HAL_ADC_ConvCpltCallback+0x3c>)
 800380e:	edc3 7a00 	vstr	s15, [r3]


		adc_flag = 1;
 8003812:	4b06      	ldr	r3, [pc, #24]	@ (800382c <HAL_ADC_ConvCpltCallback+0x40>)
 8003814:	2201      	movs	r2, #1
 8003816:	701a      	strb	r2, [r3, #0]
	}
}
 8003818:	bf00      	nop
 800381a:	3708      	adds	r7, #8
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	40012000 	.word	0x40012000
 8003824:	2000021c 	.word	0x2000021c
 8003828:	200005b0 	.word	0x200005b0
 800382c:	200005b5 	.word	0x200005b5

08003830 <main>:
  * @brief  The application entry point.
  * @retval int
  *
  */
int main(void)
{
 8003830:	b5b0      	push	{r4, r5, r7, lr}
 8003832:	ed2d 8b02 	vpush	{d8}
 8003836:	b086      	sub	sp, #24
 8003838:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800383a:	f002 fc73 	bl	8006124 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800383e:	f001 f955 	bl	8004aec <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003842:	f001 fc1f 	bl	8005084 <MX_GPIO_Init>
  MX_ADC1_Init();
 8003846:	f001 f9bd 	bl	8004bc4 <MX_ADC1_Init>
  MX_I2C1_Init();
 800384a:	f001 fa0d 	bl	8004c68 <MX_I2C1_Init>
  MX_SPI1_Init();
 800384e:	f001 fa39 	bl	8004cc4 <MX_SPI1_Init>
  MX_UART4_Init();
 8003852:	f001 fb6f 	bl	8004f34 <MX_UART4_Init>
  MX_USART2_UART_Init();
 8003856:	f001 fb97 	bl	8004f88 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800385a:	f001 fbbf 	bl	8004fdc <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 800385e:	f001 fbe7 	bl	8005030 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8003862:	f007 fd39 	bl	800b2d8 <MX_FATFS_Init>
  MX_TIM11_Init();
 8003866:	f001 fb41 	bl	8004eec <MX_TIM11_Init>
  MX_TIM10_Init();
 800386a:	f001 fb1b 	bl	8004ea4 <MX_TIM10_Init>
  MX_TIM6_Init();
 800386e:	f001 faad 	bl	8004dcc <MX_TIM6_Init>
  MX_TIM7_Init();
 8003872:	f001 fae1 	bl	8004e38 <MX_TIM7_Init>
  MX_TIM2_Init();
 8003876:	f001 fa5b 	bl	8004d30 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 800387a:	2201      	movs	r2, #1
 800387c:	2102      	movs	r1, #2
 800387e:	4868      	ldr	r0, [pc, #416]	@ (8003a20 <main+0x1f0>)
 8003880:	f003 fcc2 	bl	8007208 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8003884:	2201      	movs	r2, #1
 8003886:	2104      	movs	r1, #4
 8003888:	4866      	ldr	r0, [pc, #408]	@ (8003a24 <main+0x1f4>)
 800388a:	f003 fcbd 	bl	8007208 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800388e:	2201      	movs	r2, #1
 8003890:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003894:	4862      	ldr	r0, [pc, #392]	@ (8003a20 <main+0x1f0>)
 8003896:	f003 fcb7 	bl	8007208 <HAL_GPIO_WritePin>

  ///KURTARMA PORTLARI KAPALI EMIN OL
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);//A
 800389a:	2200      	movs	r2, #0
 800389c:	2110      	movs	r1, #16
 800389e:	4861      	ldr	r0, [pc, #388]	@ (8003a24 <main+0x1f4>)
 80038a0:	f003 fcb2 	bl	8007208 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);//B
 80038a4:	2200      	movs	r2, #0
 80038a6:	2108      	movs	r1, #8
 80038a8:	485e      	ldr	r0, [pc, #376]	@ (8003a24 <main+0x1f4>)
 80038aa:	f003 fcad 	bl	8007208 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);//C
 80038ae:	2200      	movs	r2, #0
 80038b0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80038b4:	485a      	ldr	r0, [pc, #360]	@ (8003a20 <main+0x1f0>)
 80038b6:	f003 fca7 	bl	8007208 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);//D
 80038ba:	2200      	movs	r2, #0
 80038bc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80038c0:	4857      	ldr	r0, [pc, #348]	@ (8003a20 <main+0x1f0>)
 80038c2:	f003 fca1 	bl	8007208 <HAL_GPIO_WritePin>

  HAL_UART_Receive_IT(&huart2,&rx_data,1);
 80038c6:	2201      	movs	r2, #1
 80038c8:	4957      	ldr	r1, [pc, #348]	@ (8003a28 <main+0x1f8>)
 80038ca:	4858      	ldr	r0, [pc, #352]	@ (8003a2c <main+0x1fc>)
 80038cc:	f006 fd6b 	bl	800a3a6 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, &rx_data_EGU, 1);
 80038d0:	2201      	movs	r2, #1
 80038d2:	4957      	ldr	r1, [pc, #348]	@ (8003a30 <main+0x200>)
 80038d4:	4857      	ldr	r0, [pc, #348]	@ (8003a34 <main+0x204>)
 80038d6:	f006 fd66 	bl	800a3a6 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim11);
 80038da:	4857      	ldr	r0, [pc, #348]	@ (8003a38 <main+0x208>)
 80038dc:	f006 f824 	bl	8009928 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim10);
 80038e0:	4856      	ldr	r0, [pc, #344]	@ (8003a3c <main+0x20c>)
 80038e2:	f006 f821 	bl	8009928 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 80038e6:	4856      	ldr	r0, [pc, #344]	@ (8003a40 <main+0x210>)
 80038e8:	f006 f81e 	bl	8009928 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Stop_IT(&htim7);
 80038ec:	4855      	ldr	r0, [pc, #340]	@ (8003a44 <main+0x214>)
 80038ee:	f006 f88b 	bl	8009a08 <HAL_TIM_Base_Stop_IT>
  //HAL_TIM_Base_Start_IT(&htim2);

  MAFilter_Init(&accx);
 80038f2:	4855      	ldr	r0, [pc, #340]	@ (8003a48 <main+0x218>)
 80038f4:	f7fe fef6 	bl	80026e4 <MAFilter_Init>
  FIRFilter_Init(&IMU_GYROY);
 80038f8:	4854      	ldr	r0, [pc, #336]	@ (8003a4c <main+0x21c>)
 80038fa:	f7fe fed1 	bl	80026a0 <FIRFilter_Init>
  FIRFilter_Init(&IMU_GYROX);
 80038fe:	4854      	ldr	r0, [pc, #336]	@ (8003a50 <main+0x220>)
 8003900:	f7fe fece 	bl	80026a0 <FIRFilter_Init>
  FIRFilter_Init(&IMU_GYROZ);
 8003904:	4853      	ldr	r0, [pc, #332]	@ (8003a54 <main+0x224>)
 8003906:	f7fe fecb 	bl	80026a0 <FIRFilter_Init>
  FIRFilter_Init(&Normal);
 800390a:	4853      	ldr	r0, [pc, #332]	@ (8003a58 <main+0x228>)
 800390c:	f7fe fec8 	bl	80026a0 <FIRFilter_Init>
  KalmanFilter_Init(&ax, 0.2, 2, toplam_accX);
 8003910:	4b52      	ldr	r3, [pc, #328]	@ (8003a5c <main+0x22c>)
 8003912:	edd3 7a00 	vldr	s15, [r3]
 8003916:	eeb0 1a67 	vmov.f32	s2, s15
 800391a:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800391e:	ed9f 0a50 	vldr	s0, [pc, #320]	@ 8003a60 <main+0x230>
 8003922:	4850      	ldr	r0, [pc, #320]	@ (8003a64 <main+0x234>)
 8003924:	f7ff f8c4 	bl	8002ab0 <KalmanFilter_Init>
  KalmanFilter_Init(&ay, 0.2, 2, toplam_accY);
 8003928:	4b4f      	ldr	r3, [pc, #316]	@ (8003a68 <main+0x238>)
 800392a:	edd3 7a00 	vldr	s15, [r3]
 800392e:	eeb0 1a67 	vmov.f32	s2, s15
 8003932:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8003936:	ed9f 0a4a 	vldr	s0, [pc, #296]	@ 8003a60 <main+0x230>
 800393a:	484c      	ldr	r0, [pc, #304]	@ (8003a6c <main+0x23c>)
 800393c:	f7ff f8b8 	bl	8002ab0 <KalmanFilter_Init>
  KalmanFilter_Init(&az, 0.2, 2, toplam_accZ);
 8003940:	4b4b      	ldr	r3, [pc, #300]	@ (8003a70 <main+0x240>)
 8003942:	edd3 7a00 	vldr	s15, [r3]
 8003946:	eeb0 1a67 	vmov.f32	s2, s15
 800394a:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800394e:	ed9f 0a44 	vldr	s0, [pc, #272]	@ 8003a60 <main+0x230>
 8003952:	4848      	ldr	r0, [pc, #288]	@ (8003a74 <main+0x244>)
 8003954:	f7ff f8ac 	bl	8002ab0 <KalmanFilter_Init>
  KalmanFilter_Init(&gx, 0.2, 2, toplam_gX);
 8003958:	4b47      	ldr	r3, [pc, #284]	@ (8003a78 <main+0x248>)
 800395a:	edd3 7a00 	vldr	s15, [r3]
 800395e:	eeb0 1a67 	vmov.f32	s2, s15
 8003962:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8003966:	ed9f 0a3e 	vldr	s0, [pc, #248]	@ 8003a60 <main+0x230>
 800396a:	4844      	ldr	r0, [pc, #272]	@ (8003a7c <main+0x24c>)
 800396c:	f7ff f8a0 	bl	8002ab0 <KalmanFilter_Init>
  KalmanFilter_Init(&gy, 0.2, 2, toplam_gY);
 8003970:	4b43      	ldr	r3, [pc, #268]	@ (8003a80 <main+0x250>)
 8003972:	edd3 7a00 	vldr	s15, [r3]
 8003976:	eeb0 1a67 	vmov.f32	s2, s15
 800397a:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800397e:	ed9f 0a38 	vldr	s0, [pc, #224]	@ 8003a60 <main+0x230>
 8003982:	4840      	ldr	r0, [pc, #256]	@ (8003a84 <main+0x254>)
 8003984:	f7ff f894 	bl	8002ab0 <KalmanFilter_Init>
  KalmanFilter_Init(&gz, 0.2, 2, toplam_gZ);
 8003988:	4b3f      	ldr	r3, [pc, #252]	@ (8003a88 <main+0x258>)
 800398a:	edd3 7a00 	vldr	s15, [r3]
 800398e:	eeb0 1a67 	vmov.f32	s2, s15
 8003992:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8003996:	ed9f 0a32 	vldr	s0, [pc, #200]	@ 8003a60 <main+0x230>
 800399a:	483c      	ldr	r0, [pc, #240]	@ (8003a8c <main+0x25c>)
 800399c:	f7ff f888 	bl	8002ab0 <KalmanFilter_Init>

  lwgps_init(&gps);
 80039a0:	483b      	ldr	r0, [pc, #236]	@ (8003a90 <main+0x260>)
 80039a2:	f7ff fda9 	bl	80034f8 <lwgps_init>
 // W25Q_Reset();
  LSM6DSLTR_Init();
 80039a6:	f7fe febf 	bl	8002728 <LSM6DSLTR_Init>
  E220_CONFIG(0x6,0x4A,0X10,1);
 80039aa:	2301      	movs	r3, #1
 80039ac:	2210      	movs	r2, #16
 80039ae:	214a      	movs	r1, #74	@ 0x4a
 80039b0:	2006      	movs	r0, #6
 80039b2:	f001 fc13 	bl	80051dc <E220_CONFIG>
  HAL_ADC_Start_IT(&hadc1);
 80039b6:	4837      	ldr	r0, [pc, #220]	@ (8003a94 <main+0x264>)
 80039b8:	f002 fc8e 	bl	80062d8 <HAL_ADC_Start_IT>

  dev.dev_id = BME280_I2C_ADDR_PRIM;
 80039bc:	4b36      	ldr	r3, [pc, #216]	@ (8003a98 <main+0x268>)
 80039be:	2276      	movs	r2, #118	@ 0x76
 80039c0:	705a      	strb	r2, [r3, #1]
  dev.intf = BME280_I2C_INTF;
 80039c2:	4b35      	ldr	r3, [pc, #212]	@ (8003a98 <main+0x268>)
 80039c4:	2201      	movs	r2, #1
 80039c6:	709a      	strb	r2, [r3, #2]
  dev.read = user_i2c_read;
 80039c8:	4b33      	ldr	r3, [pc, #204]	@ (8003a98 <main+0x268>)
 80039ca:	4a34      	ldr	r2, [pc, #208]	@ (8003a9c <main+0x26c>)
 80039cc:	605a      	str	r2, [r3, #4]
  dev.write = user_i2c_write;
 80039ce:	4b32      	ldr	r3, [pc, #200]	@ (8003a98 <main+0x268>)
 80039d0:	4a33      	ldr	r2, [pc, #204]	@ (8003aa0 <main+0x270>)
 80039d2:	609a      	str	r2, [r3, #8]
  dev.delay_ms = user_delay_ms;
 80039d4:	4b30      	ldr	r3, [pc, #192]	@ (8003a98 <main+0x268>)
 80039d6:	4a33      	ldr	r2, [pc, #204]	@ (8003aa4 <main+0x274>)
 80039d8:	60da      	str	r2, [r3, #12]

  rslt = bme280_init(&dev);
 80039da:	482f      	ldr	r0, [pc, #188]	@ (8003a98 <main+0x268>)
 80039dc:	f7fd fb6a 	bl	80010b4 <bme280_init>
 80039e0:	4603      	mov	r3, r0
 80039e2:	461a      	mov	r2, r3
 80039e4:	4b30      	ldr	r3, [pc, #192]	@ (8003aa8 <main+0x278>)
 80039e6:	701a      	strb	r2, [r3, #0]

  dev.settings.osr_h = BME280_OVERSAMPLING_1X;
 80039e8:	4b2b      	ldr	r3, [pc, #172]	@ (8003a98 <main+0x268>)
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
  dev.settings.osr_p = BME280_OVERSAMPLING_4X;
 80039f0:	4b29      	ldr	r3, [pc, #164]	@ (8003a98 <main+0x268>)
 80039f2:	2203      	movs	r2, #3
 80039f4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  dev.settings.osr_t = BME280_OVERSAMPLING_2X;
 80039f8:	4b27      	ldr	r3, [pc, #156]	@ (8003a98 <main+0x268>)
 80039fa:	2202      	movs	r2, #2
 80039fc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  dev.settings.filter = BME280_FILTER_COEFF_16;
 8003a00:	4b25      	ldr	r3, [pc, #148]	@ (8003a98 <main+0x268>)
 8003a02:	2204      	movs	r2, #4
 8003a04:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
  rslt = bme280_set_sensor_settings(BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL, &dev);
 8003a08:	4923      	ldr	r1, [pc, #140]	@ (8003a98 <main+0x268>)
 8003a0a:	200f      	movs	r0, #15
 8003a0c:	f7fd fc46 	bl	800129c <bme280_set_sensor_settings>
 8003a10:	4603      	mov	r3, r0
 8003a12:	461a      	mov	r2, r3
 8003a14:	4b24      	ldr	r3, [pc, #144]	@ (8003aa8 <main+0x278>)
 8003a16:	701a      	strb	r2, [r3, #0]

  ////ALTITUDE OFFSET

  for(int i = 0; i<5;i++)
 8003a18:	2300      	movs	r3, #0
 8003a1a:	617b      	str	r3, [r7, #20]
 8003a1c:	e070      	b.n	8003b00 <main+0x2d0>
 8003a1e:	bf00      	nop
 8003a20:	40020800 	.word	0x40020800
 8003a24:	40020400 	.word	0x40020400
 8003a28:	20000639 	.word	0x20000639
 8003a2c:	200004bc 	.word	0x200004bc
 8003a30:	200005aa 	.word	0x200005aa
 8003a34:	20000544 	.word	0x20000544
 8003a38:	20000430 	.word	0x20000430
 8003a3c:	200003e8 	.word	0x200003e8
 8003a40:	20000358 	.word	0x20000358
 8003a44:	200003a0 	.word	0x200003a0
 8003a48:	200024b0 	.word	0x200024b0
 8003a4c:	20002540 	.word	0x20002540
 8003a50:	200024f8 	.word	0x200024f8
 8003a54:	20002588 	.word	0x20002588
 8003a58:	200025d0 	.word	0x200025d0
 8003a5c:	200022d4 	.word	0x200022d4
 8003a60:	3e4ccccd 	.word	0x3e4ccccd
 8003a64:	20002358 	.word	0x20002358
 8003a68:	200022d8 	.word	0x200022d8
 8003a6c:	2000236c 	.word	0x2000236c
 8003a70:	200022dc 	.word	0x200022dc
 8003a74:	20002380 	.word	0x20002380
 8003a78:	200022e0 	.word	0x200022e0
 8003a7c:	20002394 	.word	0x20002394
 8003a80:	200022e4 	.word	0x200022e4
 8003a84:	200023a8 	.word	0x200023a8
 8003a88:	200022e8 	.word	0x200022e8
 8003a8c:	200023bc 	.word	0x200023bc
 8003a90:	200023d8 	.word	0x200023d8
 8003a94:	2000021c 	.word	0x2000021c
 8003a98:	20002618 	.word	0x20002618
 8003a9c:	08005389 	.word	0x08005389
 8003aa0:	08005411 	.word	0x08005411
 8003aa4:	080053f9 	.word	0x080053f9
 8003aa8:	20002664 	.word	0x20002664
  {

	      LSM6DSLTR_Read_Gyro_Data(&Lsm_Sensor);
 8003aac:	48c8      	ldr	r0, [pc, #800]	@ (8003dd0 <main+0x5a0>)
 8003aae:	f7fe ff65 	bl	800297c <LSM6DSLTR_Read_Gyro_Data>

	      offset_x += Lsm_Sensor.Gyro_X;
 8003ab2:	4bc7      	ldr	r3, [pc, #796]	@ (8003dd0 <main+0x5a0>)
 8003ab4:	ed93 7a03 	vldr	s14, [r3, #12]
 8003ab8:	4bc6      	ldr	r3, [pc, #792]	@ (8003dd4 <main+0x5a4>)
 8003aba:	edd3 7a00 	vldr	s15, [r3]
 8003abe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ac2:	4bc4      	ldr	r3, [pc, #784]	@ (8003dd4 <main+0x5a4>)
 8003ac4:	edc3 7a00 	vstr	s15, [r3]
		  offset_y += Lsm_Sensor.Gyro_Y;
 8003ac8:	4bc1      	ldr	r3, [pc, #772]	@ (8003dd0 <main+0x5a0>)
 8003aca:	ed93 7a04 	vldr	s14, [r3, #16]
 8003ace:	4bc2      	ldr	r3, [pc, #776]	@ (8003dd8 <main+0x5a8>)
 8003ad0:	edd3 7a00 	vldr	s15, [r3]
 8003ad4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ad8:	4bbf      	ldr	r3, [pc, #764]	@ (8003dd8 <main+0x5a8>)
 8003ada:	edc3 7a00 	vstr	s15, [r3]
		  offset_z += Lsm_Sensor.Gyro_Z;
 8003ade:	4bbc      	ldr	r3, [pc, #752]	@ (8003dd0 <main+0x5a0>)
 8003ae0:	ed93 7a05 	vldr	s14, [r3, #20]
 8003ae4:	4bbd      	ldr	r3, [pc, #756]	@ (8003ddc <main+0x5ac>)
 8003ae6:	edd3 7a00 	vldr	s15, [r3]
 8003aea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003aee:	4bbb      	ldr	r3, [pc, #748]	@ (8003ddc <main+0x5ac>)
 8003af0:	edc3 7a00 	vstr	s15, [r3]
		  HAL_Delay(10);
 8003af4:	200a      	movs	r0, #10
 8003af6:	f002 fb87 	bl	8006208 <HAL_Delay>
  for(int i = 0; i<5;i++)
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	3301      	adds	r3, #1
 8003afe:	617b      	str	r3, [r7, #20]
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	2b04      	cmp	r3, #4
 8003b04:	ddd2      	ble.n	8003aac <main+0x27c>
  }
  offset_x=offset_x/5;
 8003b06:	4bb3      	ldr	r3, [pc, #716]	@ (8003dd4 <main+0x5a4>)
 8003b08:	ed93 7a00 	vldr	s14, [r3]
 8003b0c:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8003b10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b14:	4baf      	ldr	r3, [pc, #700]	@ (8003dd4 <main+0x5a4>)
 8003b16:	edc3 7a00 	vstr	s15, [r3]
  offset_y=offset_y/5;
 8003b1a:	4baf      	ldr	r3, [pc, #700]	@ (8003dd8 <main+0x5a8>)
 8003b1c:	ed93 7a00 	vldr	s14, [r3]
 8003b20:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8003b24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b28:	4bab      	ldr	r3, [pc, #684]	@ (8003dd8 <main+0x5a8>)
 8003b2a:	edc3 7a00 	vstr	s15, [r3]
  offset_z=offset_z/5;
 8003b2e:	4bab      	ldr	r3, [pc, #684]	@ (8003ddc <main+0x5ac>)
 8003b30:	ed93 7a00 	vldr	s14, [r3]
 8003b34:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8003b38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b3c:	4ba7      	ldr	r3, [pc, #668]	@ (8003ddc <main+0x5ac>)
 8003b3e:	edc3 7a00 	vstr	s15, [r3]

   HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);
 8003b42:	2110      	movs	r1, #16
 8003b44:	48a6      	ldr	r0, [pc, #664]	@ (8003de0 <main+0x5b0>)
 8003b46:	f003 fb78 	bl	800723a <HAL_GPIO_TogglePin>
   Altitude_Offset();
 8003b4a:	f001 fe55 	bl	80057f8 <Altitude_Offset>
   HAL_Delay(1000);
 8003b4e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003b52:	f002 fb59 	bl	8006208 <HAL_Delay>
   HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);
 8003b56:	2110      	movs	r1, #16
 8003b58:	48a1      	ldr	r0, [pc, #644]	@ (8003de0 <main+0x5b0>)
 8003b5a:	f003 fb6e 	bl	800723a <HAL_GPIO_TogglePin>
 //  W25Q_Read(1, 0,  256, test);



 //  W25Q_Read(1, 0, sizeof(flash_accX), flash_accX);
   buzzer_short = 0;
 8003b5e:	4ba1      	ldr	r3, [pc, #644]	@ (8003de4 <main+0x5b4>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	601a      	str	r2, [r3, #0]
  while (1)
  {

/********************* Sensor Ölçüm **************************************************/

	  if(sensor_flag == 1)
 8003b64:	4ba0      	ldr	r3, [pc, #640]	@ (8003de8 <main+0x5b8>)
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	f040 843a 	bne.w	80043e2 <main+0xbb2>
	  {
	      sensor_flag = 0;
 8003b6e:	4b9e      	ldr	r3, [pc, #632]	@ (8003de8 <main+0x5b8>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	701a      	strb	r2, [r3, #0]
	      prev_alt = altitude;
 8003b74:	4b9d      	ldr	r3, [pc, #628]	@ (8003dec <main+0x5bc>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a9d      	ldr	r2, [pc, #628]	@ (8003df0 <main+0x5c0>)
 8003b7a:	6013      	str	r3, [r2, #0]
	      rslt = bme280_set_sensor_mode(BME280_FORCED_MODE, &dev);
 8003b7c:	499d      	ldr	r1, [pc, #628]	@ (8003df4 <main+0x5c4>)
 8003b7e:	2001      	movs	r0, #1
 8003b80:	f7fd fbe1 	bl	8001346 <bme280_set_sensor_mode>
 8003b84:	4603      	mov	r3, r0
 8003b86:	461a      	mov	r2, r3
 8003b88:	4b9b      	ldr	r3, [pc, #620]	@ (8003df8 <main+0x5c8>)
 8003b8a:	701a      	strb	r2, [r3, #0]
	      rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 8003b8c:	4a99      	ldr	r2, [pc, #612]	@ (8003df4 <main+0x5c4>)
 8003b8e:	499b      	ldr	r1, [pc, #620]	@ (8003dfc <main+0x5cc>)
 8003b90:	2007      	movs	r0, #7
 8003b92:	f7fd fc54 	bl	800143e <bme280_get_sensor_data>
 8003b96:	4603      	mov	r3, r0
 8003b98:	461a      	mov	r2, r3
 8003b9a:	4b97      	ldr	r3, [pc, #604]	@ (8003df8 <main+0x5c8>)
 8003b9c:	701a      	strb	r2, [r3, #0]



	      LSM6DSLTR_Read_Accel_Data(&Lsm_Sensor);
 8003b9e:	488c      	ldr	r0, [pc, #560]	@ (8003dd0 <main+0x5a0>)
 8003ba0:	f7fe fe12 	bl	80027c8 <LSM6DSLTR_Read_Accel_Data>
	      LSM6DSLTR_Read_Gyro_Data(&Lsm_Sensor);
 8003ba4:	488a      	ldr	r0, [pc, #552]	@ (8003dd0 <main+0x5a0>)
 8003ba6:	f7fe fee9 	bl	800297c <LSM6DSLTR_Read_Gyro_Data>
//	      toplam_accZ += Lsm_Sensor.Accel_Z;
//	      toplam_gX += Lsm_Sensor.Gyro_X ;
//	      toplam_gY += Lsm_Sensor.Gyro_Y ;
//	      toplam_gZ += Lsm_Sensor.Gyro_Z ;

	      toplam_accX += KalmanFilter_Update(&ax,Lsm_Sensor.Accel_X);
 8003baa:	4b89      	ldr	r3, [pc, #548]	@ (8003dd0 <main+0x5a0>)
 8003bac:	edd3 7a00 	vldr	s15, [r3]
 8003bb0:	eeb0 0a67 	vmov.f32	s0, s15
 8003bb4:	4892      	ldr	r0, [pc, #584]	@ (8003e00 <main+0x5d0>)
 8003bb6:	f7fe ff9d 	bl	8002af4 <KalmanFilter_Update>
 8003bba:	eeb0 7a40 	vmov.f32	s14, s0
 8003bbe:	4b91      	ldr	r3, [pc, #580]	@ (8003e04 <main+0x5d4>)
 8003bc0:	edd3 7a00 	vldr	s15, [r3]
 8003bc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bc8:	4b8e      	ldr	r3, [pc, #568]	@ (8003e04 <main+0x5d4>)
 8003bca:	edc3 7a00 	vstr	s15, [r3]
	      toplam_accY += KalmanFilter_Update(&ay,Lsm_Sensor.Accel_Y );
 8003bce:	4b80      	ldr	r3, [pc, #512]	@ (8003dd0 <main+0x5a0>)
 8003bd0:	edd3 7a01 	vldr	s15, [r3, #4]
 8003bd4:	eeb0 0a67 	vmov.f32	s0, s15
 8003bd8:	488b      	ldr	r0, [pc, #556]	@ (8003e08 <main+0x5d8>)
 8003bda:	f7fe ff8b 	bl	8002af4 <KalmanFilter_Update>
 8003bde:	eeb0 7a40 	vmov.f32	s14, s0
 8003be2:	4b8a      	ldr	r3, [pc, #552]	@ (8003e0c <main+0x5dc>)
 8003be4:	edd3 7a00 	vldr	s15, [r3]
 8003be8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bec:	4b87      	ldr	r3, [pc, #540]	@ (8003e0c <main+0x5dc>)
 8003bee:	edc3 7a00 	vstr	s15, [r3]
	      toplam_accZ += KalmanFilter_Update(&az,Lsm_Sensor.Accel_Z );
 8003bf2:	4b77      	ldr	r3, [pc, #476]	@ (8003dd0 <main+0x5a0>)
 8003bf4:	edd3 7a02 	vldr	s15, [r3, #8]
 8003bf8:	eeb0 0a67 	vmov.f32	s0, s15
 8003bfc:	4884      	ldr	r0, [pc, #528]	@ (8003e10 <main+0x5e0>)
 8003bfe:	f7fe ff79 	bl	8002af4 <KalmanFilter_Update>
 8003c02:	eeb0 7a40 	vmov.f32	s14, s0
 8003c06:	4b83      	ldr	r3, [pc, #524]	@ (8003e14 <main+0x5e4>)
 8003c08:	edd3 7a00 	vldr	s15, [r3]
 8003c0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c10:	4b80      	ldr	r3, [pc, #512]	@ (8003e14 <main+0x5e4>)
 8003c12:	edc3 7a00 	vstr	s15, [r3]
	      toplam_gX +=  KalmanFilter_Update(&gx,Lsm_Sensor.Gyro_X-offset_x  );
 8003c16:	4b6e      	ldr	r3, [pc, #440]	@ (8003dd0 <main+0x5a0>)
 8003c18:	ed93 7a03 	vldr	s14, [r3, #12]
 8003c1c:	4b6d      	ldr	r3, [pc, #436]	@ (8003dd4 <main+0x5a4>)
 8003c1e:	edd3 7a00 	vldr	s15, [r3]
 8003c22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c26:	eeb0 0a67 	vmov.f32	s0, s15
 8003c2a:	487b      	ldr	r0, [pc, #492]	@ (8003e18 <main+0x5e8>)
 8003c2c:	f7fe ff62 	bl	8002af4 <KalmanFilter_Update>
 8003c30:	eeb0 7a40 	vmov.f32	s14, s0
 8003c34:	4b79      	ldr	r3, [pc, #484]	@ (8003e1c <main+0x5ec>)
 8003c36:	edd3 7a00 	vldr	s15, [r3]
 8003c3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c3e:	4b77      	ldr	r3, [pc, #476]	@ (8003e1c <main+0x5ec>)
 8003c40:	edc3 7a00 	vstr	s15, [r3]
	      toplam_gY +=  KalmanFilter_Update(&gy,Lsm_Sensor.Gyro_Y -offset_y );
 8003c44:	4b62      	ldr	r3, [pc, #392]	@ (8003dd0 <main+0x5a0>)
 8003c46:	ed93 7a04 	vldr	s14, [r3, #16]
 8003c4a:	4b63      	ldr	r3, [pc, #396]	@ (8003dd8 <main+0x5a8>)
 8003c4c:	edd3 7a00 	vldr	s15, [r3]
 8003c50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c54:	eeb0 0a67 	vmov.f32	s0, s15
 8003c58:	4871      	ldr	r0, [pc, #452]	@ (8003e20 <main+0x5f0>)
 8003c5a:	f7fe ff4b 	bl	8002af4 <KalmanFilter_Update>
 8003c5e:	eeb0 7a40 	vmov.f32	s14, s0
 8003c62:	4b70      	ldr	r3, [pc, #448]	@ (8003e24 <main+0x5f4>)
 8003c64:	edd3 7a00 	vldr	s15, [r3]
 8003c68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c6c:	4b6d      	ldr	r3, [pc, #436]	@ (8003e24 <main+0x5f4>)
 8003c6e:	edc3 7a00 	vstr	s15, [r3]
	      toplam_gZ +=  KalmanFilter_Update(&gz,Lsm_Sensor.Gyro_Z -offset_z );
 8003c72:	4b57      	ldr	r3, [pc, #348]	@ (8003dd0 <main+0x5a0>)
 8003c74:	ed93 7a05 	vldr	s14, [r3, #20]
 8003c78:	4b58      	ldr	r3, [pc, #352]	@ (8003ddc <main+0x5ac>)
 8003c7a:	edd3 7a00 	vldr	s15, [r3]
 8003c7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c82:	eeb0 0a67 	vmov.f32	s0, s15
 8003c86:	4868      	ldr	r0, [pc, #416]	@ (8003e28 <main+0x5f8>)
 8003c88:	f7fe ff34 	bl	8002af4 <KalmanFilter_Update>
 8003c8c:	eeb0 7a40 	vmov.f32	s14, s0
 8003c90:	4b66      	ldr	r3, [pc, #408]	@ (8003e2c <main+0x5fc>)
 8003c92:	edd3 7a00 	vldr	s15, [r3]
 8003c96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c9a:	4b64      	ldr	r3, [pc, #400]	@ (8003e2c <main+0x5fc>)
 8003c9c:	edc3 7a00 	vstr	s15, [r3]


	      sensor_counter++;
 8003ca0:	4b63      	ldr	r3, [pc, #396]	@ (8003e30 <main+0x600>)
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	b2da      	uxtb	r2, r3
 8003ca8:	4b61      	ldr	r3, [pc, #388]	@ (8003e30 <main+0x600>)
 8003caa:	701a      	strb	r2, [r3, #0]
	      if(sensor_counter == 10)
 8003cac:	4b60      	ldr	r3, [pc, #384]	@ (8003e30 <main+0x600>)
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	2b0a      	cmp	r3, #10
 8003cb2:	f040 8384 	bne.w	80043be <main+0xb8e>
	      {

		      if(rslt == BME280_OK )
 8003cb6:	4b50      	ldr	r3, [pc, #320]	@ (8003df8 <main+0x5c8>)
 8003cb8:	f993 3000 	ldrsb.w	r3, [r3]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d157      	bne.n	8003d70 <main+0x540>
		      {
		          temperature = comp_data.temperature / 100.00;
 8003cc0:	4b4e      	ldr	r3, [pc, #312]	@ (8003dfc <main+0x5cc>)
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7fc fc45 	bl	8000554 <__aeabi_i2d>
 8003cca:	f04f 0200 	mov.w	r2, #0
 8003cce:	4b59      	ldr	r3, [pc, #356]	@ (8003e34 <main+0x604>)
 8003cd0:	f7fc fdd4 	bl	800087c <__aeabi_ddiv>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	4610      	mov	r0, r2
 8003cda:	4619      	mov	r1, r3
 8003cdc:	f7fc ff9c 	bl	8000c18 <__aeabi_d2f>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	4a55      	ldr	r2, [pc, #340]	@ (8003e38 <main+0x608>)
 8003ce4:	6013      	str	r3, [r2, #0]
		          humidity = comp_data.humidity;
 8003ce6:	4b45      	ldr	r3, [pc, #276]	@ (8003dfc <main+0x5cc>)
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	ee07 3a90 	vmov	s15, r3
 8003cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cf2:	4b52      	ldr	r3, [pc, #328]	@ (8003e3c <main+0x60c>)
 8003cf4:	edc3 7a00 	vstr	s15, [r3]
		          pressure = comp_data.pressure;
 8003cf8:	4b40      	ldr	r3, [pc, #256]	@ (8003dfc <main+0x5cc>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	ee07 3a90 	vmov	s15, r3
 8003d00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d04:	4b4e      	ldr	r3, [pc, #312]	@ (8003e40 <main+0x610>)
 8003d06:	edc3 7a00 	vstr	s15, [r3]
		          altitude = BME280_Get_Altitude() - offset_altitude;
 8003d0a:	f001 fac5 	bl	8005298 <BME280_Get_Altitude>
 8003d0e:	eeb0 7a40 	vmov.f32	s14, s0
 8003d12:	4b4c      	ldr	r3, [pc, #304]	@ (8003e44 <main+0x614>)
 8003d14:	edd3 7a00 	vldr	s15, [r3]
 8003d18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d1c:	4b33      	ldr	r3, [pc, #204]	@ (8003dec <main+0x5bc>)
 8003d1e:	edc3 7a00 	vstr	s15, [r3]
		          altitude_kalman = KalmanFilter_Update(&kf, altitude);
 8003d22:	4b32      	ldr	r3, [pc, #200]	@ (8003dec <main+0x5bc>)
 8003d24:	edd3 7a00 	vldr	s15, [r3]
 8003d28:	eeb0 0a67 	vmov.f32	s0, s15
 8003d2c:	4846      	ldr	r0, [pc, #280]	@ (8003e48 <main+0x618>)
 8003d2e:	f7fe fee1 	bl	8002af4 <KalmanFilter_Update>
 8003d32:	eef0 7a40 	vmov.f32	s15, s0
 8003d36:	4b45      	ldr	r3, [pc, #276]	@ (8003e4c <main+0x61c>)
 8003d38:	edc3 7a00 	vstr	s15, [r3]
		          speed = (altitude - prev_alt) * 3.33;
 8003d3c:	4b2b      	ldr	r3, [pc, #172]	@ (8003dec <main+0x5bc>)
 8003d3e:	ed93 7a00 	vldr	s14, [r3]
 8003d42:	4b2b      	ldr	r3, [pc, #172]	@ (8003df0 <main+0x5c0>)
 8003d44:	edd3 7a00 	vldr	s15, [r3]
 8003d48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d4c:	ee17 0a90 	vmov	r0, s15
 8003d50:	f7fc fc12 	bl	8000578 <__aeabi_f2d>
 8003d54:	a31a      	add	r3, pc, #104	@ (adr r3, 8003dc0 <main+0x590>)
 8003d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d5a:	f7fc fc65 	bl	8000628 <__aeabi_dmul>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	460b      	mov	r3, r1
 8003d62:	4610      	mov	r0, r2
 8003d64:	4619      	mov	r1, r3
 8003d66:	f7fc ff57 	bl	8000c18 <__aeabi_d2f>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	4a38      	ldr	r2, [pc, #224]	@ (8003e50 <main+0x620>)
 8003d6e:	6013      	str	r3, [r2, #0]
				  // High pass filter for gyroscope data
//			  filtered_gyro_HP_X = HP_alpha * (gyroX_HP_prev + toplam_gX/10.0f - gyroX_HP_prev);
//			  filtered_gyro_HP_Y = HP_alpha * (gyroY_HP_prev + toplam_gY/10.0f - gyroY_HP_prev);
//			  filtered_gyro_HP_Z = HP_alpha * (gyroZ_HP_prev + toplam_gZ/10.0f - gyroZ_HP_prev);

			  filtered_gyro_LP[0] = LP_alpha * toplam_gX/10.0f + (1.0 - LP_alpha) * gyroX_LP_prev;
 8003d70:	4b2a      	ldr	r3, [pc, #168]	@ (8003e1c <main+0x5ec>)
 8003d72:	edd3 7a00 	vldr	s15, [r3]
 8003d76:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8003e54 <main+0x624>
 8003d7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d7e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8003d82:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003d86:	ee16 0a90 	vmov	r0, s13
 8003d8a:	f7fc fbf5 	bl	8000578 <__aeabi_f2d>
 8003d8e:	4604      	mov	r4, r0
 8003d90:	460d      	mov	r5, r1
 8003d92:	4b31      	ldr	r3, [pc, #196]	@ (8003e58 <main+0x628>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7fc fbee 	bl	8000578 <__aeabi_f2d>
 8003d9c:	a30a      	add	r3, pc, #40	@ (adr r3, 8003dc8 <main+0x598>)
 8003d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da2:	f7fc fc41 	bl	8000628 <__aeabi_dmul>
 8003da6:	4602      	mov	r2, r0
 8003da8:	460b      	mov	r3, r1
 8003daa:	4620      	mov	r0, r4
 8003dac:	4629      	mov	r1, r5
 8003dae:	f7fc fa85 	bl	80002bc <__adddf3>
 8003db2:	4602      	mov	r2, r0
 8003db4:	460b      	mov	r3, r1
 8003db6:	4610      	mov	r0, r2
 8003db8:	4619      	mov	r1, r3
 8003dba:	f7fc ff2d 	bl	8000c18 <__aeabi_d2f>
 8003dbe:	e04d      	b.n	8003e5c <main+0x62c>
 8003dc0:	0a3d70a4 	.word	0x0a3d70a4
 8003dc4:	400aa3d7 	.word	0x400aa3d7
 8003dc8:	c0000000 	.word	0xc0000000
 8003dcc:	3fdccccc 	.word	0x3fdccccc
 8003dd0:	20002488 	.word	0x20002488
 8003dd4:	200022f0 	.word	0x200022f0
 8003dd8:	200022f4 	.word	0x200022f4
 8003ddc:	200022f8 	.word	0x200022f8
 8003de0:	40020800 	.word	0x40020800
 8003de4:	20000640 	.word	0x20000640
 8003de8:	20002297 	.word	0x20002297
 8003dec:	200022a4 	.word	0x200022a4
 8003df0:	200022b4 	.word	0x200022b4
 8003df4:	20002618 	.word	0x20002618
 8003df8:	20002664 	.word	0x20002664
 8003dfc:	20002658 	.word	0x20002658
 8003e00:	20002358 	.word	0x20002358
 8003e04:	200022d4 	.word	0x200022d4
 8003e08:	2000236c 	.word	0x2000236c
 8003e0c:	200022d8 	.word	0x200022d8
 8003e10:	20002380 	.word	0x20002380
 8003e14:	200022dc 	.word	0x200022dc
 8003e18:	20002394 	.word	0x20002394
 8003e1c:	200022e0 	.word	0x200022e0
 8003e20:	200023a8 	.word	0x200023a8
 8003e24:	200022e4 	.word	0x200022e4
 8003e28:	200023bc 	.word	0x200023bc
 8003e2c:	200022e8 	.word	0x200022e8
 8003e30:	20002340 	.word	0x20002340
 8003e34:	40590000 	.word	0x40590000
 8003e38:	2000229c 	.word	0x2000229c
 8003e3c:	200022a0 	.word	0x200022a0
 8003e40:	200022ac 	.word	0x200022ac
 8003e44:	200022a8 	.word	0x200022a8
 8003e48:	20002344 	.word	0x20002344
 8003e4c:	200022c0 	.word	0x200022c0
 8003e50:	200022b8 	.word	0x200022b8
 8003e54:	3f0ccccd 	.word	0x3f0ccccd
 8003e58:	20002324 	.word	0x20002324
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	4ad2      	ldr	r2, [pc, #840]	@ (80041a8 <main+0x978>)
 8003e60:	6013      	str	r3, [r2, #0]
			  filtered_gyro_LP[1] = LP_alpha * toplam_gY/10.0f + (1.0 - LP_alpha) * gyroY_LP_prev ;
 8003e62:	4bd2      	ldr	r3, [pc, #840]	@ (80041ac <main+0x97c>)
 8003e64:	edd3 7a00 	vldr	s15, [r3]
 8003e68:	ed9f 7ad1 	vldr	s14, [pc, #836]	@ 80041b0 <main+0x980>
 8003e6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e70:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8003e74:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003e78:	ee16 0a90 	vmov	r0, s13
 8003e7c:	f7fc fb7c 	bl	8000578 <__aeabi_f2d>
 8003e80:	4604      	mov	r4, r0
 8003e82:	460d      	mov	r5, r1
 8003e84:	4bcb      	ldr	r3, [pc, #812]	@ (80041b4 <main+0x984>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7fc fb75 	bl	8000578 <__aeabi_f2d>
 8003e8e:	a3be      	add	r3, pc, #760	@ (adr r3, 8004188 <main+0x958>)
 8003e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e94:	f7fc fbc8 	bl	8000628 <__aeabi_dmul>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	4620      	mov	r0, r4
 8003e9e:	4629      	mov	r1, r5
 8003ea0:	f7fc fa0c 	bl	80002bc <__adddf3>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	460b      	mov	r3, r1
 8003ea8:	4610      	mov	r0, r2
 8003eaa:	4619      	mov	r1, r3
 8003eac:	f7fc feb4 	bl	8000c18 <__aeabi_d2f>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	4abd      	ldr	r2, [pc, #756]	@ (80041a8 <main+0x978>)
 8003eb4:	6053      	str	r3, [r2, #4]
			  filtered_gyro_LP[2] = LP_alpha * toplam_gZ/10.0f + (1.0 - LP_alpha) * gyroZ_LP_prev;
 8003eb6:	4bc0      	ldr	r3, [pc, #768]	@ (80041b8 <main+0x988>)
 8003eb8:	edd3 7a00 	vldr	s15, [r3]
 8003ebc:	ed9f 7abc 	vldr	s14, [pc, #752]	@ 80041b0 <main+0x980>
 8003ec0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ec4:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8003ec8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003ecc:	ee16 0a90 	vmov	r0, s13
 8003ed0:	f7fc fb52 	bl	8000578 <__aeabi_f2d>
 8003ed4:	4604      	mov	r4, r0
 8003ed6:	460d      	mov	r5, r1
 8003ed8:	4bb8      	ldr	r3, [pc, #736]	@ (80041bc <main+0x98c>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4618      	mov	r0, r3
 8003ede:	f7fc fb4b 	bl	8000578 <__aeabi_f2d>
 8003ee2:	a3a9      	add	r3, pc, #676	@ (adr r3, 8004188 <main+0x958>)
 8003ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee8:	f7fc fb9e 	bl	8000628 <__aeabi_dmul>
 8003eec:	4602      	mov	r2, r0
 8003eee:	460b      	mov	r3, r1
 8003ef0:	4620      	mov	r0, r4
 8003ef2:	4629      	mov	r1, r5
 8003ef4:	f7fc f9e2 	bl	80002bc <__adddf3>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	460b      	mov	r3, r1
 8003efc:	4610      	mov	r0, r2
 8003efe:	4619      	mov	r1, r3
 8003f00:	f7fc fe8a 	bl	8000c18 <__aeabi_d2f>
 8003f04:	4603      	mov	r3, r0
 8003f06:	4aa8      	ldr	r2, [pc, #672]	@ (80041a8 <main+0x978>)
 8003f08:	6093      	str	r3, [r2, #8]

			/***************************Silinebilir ********************************/
			  filtered_gyro_HP_X = beta * (gyroX_HP_prev +  filtered_gyro_LP[0] - gyroX_LP_prev);
 8003f0a:	4ba7      	ldr	r3, [pc, #668]	@ (80041a8 <main+0x978>)
 8003f0c:	ed93 7a00 	vldr	s14, [r3]
 8003f10:	4bab      	ldr	r3, [pc, #684]	@ (80041c0 <main+0x990>)
 8003f12:	edd3 7a00 	vldr	s15, [r3]
 8003f16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003f1a:	4baa      	ldr	r3, [pc, #680]	@ (80041c4 <main+0x994>)
 8003f1c:	edd3 7a00 	vldr	s15, [r3]
 8003f20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f24:	ee17 0a90 	vmov	r0, s15
 8003f28:	f7fc fb26 	bl	8000578 <__aeabi_f2d>
 8003f2c:	a398      	add	r3, pc, #608	@ (adr r3, 8004190 <main+0x960>)
 8003f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f32:	f7fc fb79 	bl	8000628 <__aeabi_dmul>
 8003f36:	4602      	mov	r2, r0
 8003f38:	460b      	mov	r3, r1
 8003f3a:	4610      	mov	r0, r2
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	f7fc fe6b 	bl	8000c18 <__aeabi_d2f>
 8003f42:	4603      	mov	r3, r0
 8003f44:	4aa0      	ldr	r2, [pc, #640]	@ (80041c8 <main+0x998>)
 8003f46:	6013      	str	r3, [r2, #0]
			  filtered_gyro_HP_Y = beta * (gyroY_HP_prev + filtered_gyro_LP[1] - gyroY_LP_prev);
 8003f48:	4b97      	ldr	r3, [pc, #604]	@ (80041a8 <main+0x978>)
 8003f4a:	ed93 7a01 	vldr	s14, [r3, #4]
 8003f4e:	4b9f      	ldr	r3, [pc, #636]	@ (80041cc <main+0x99c>)
 8003f50:	edd3 7a00 	vldr	s15, [r3]
 8003f54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003f58:	4b96      	ldr	r3, [pc, #600]	@ (80041b4 <main+0x984>)
 8003f5a:	edd3 7a00 	vldr	s15, [r3]
 8003f5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f62:	ee17 0a90 	vmov	r0, s15
 8003f66:	f7fc fb07 	bl	8000578 <__aeabi_f2d>
 8003f6a:	a389      	add	r3, pc, #548	@ (adr r3, 8004190 <main+0x960>)
 8003f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f70:	f7fc fb5a 	bl	8000628 <__aeabi_dmul>
 8003f74:	4602      	mov	r2, r0
 8003f76:	460b      	mov	r3, r1
 8003f78:	4610      	mov	r0, r2
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	f7fc fe4c 	bl	8000c18 <__aeabi_d2f>
 8003f80:	4603      	mov	r3, r0
 8003f82:	4a93      	ldr	r2, [pc, #588]	@ (80041d0 <main+0x9a0>)
 8003f84:	6013      	str	r3, [r2, #0]
			  filtered_gyro_HP_Z = beta * (gyroZ_HP_prev +  filtered_gyro_LP[2] - gyroZ_LP_prev);
 8003f86:	4b88      	ldr	r3, [pc, #544]	@ (80041a8 <main+0x978>)
 8003f88:	ed93 7a02 	vldr	s14, [r3, #8]
 8003f8c:	4b91      	ldr	r3, [pc, #580]	@ (80041d4 <main+0x9a4>)
 8003f8e:	edd3 7a00 	vldr	s15, [r3]
 8003f92:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003f96:	4b89      	ldr	r3, [pc, #548]	@ (80041bc <main+0x98c>)
 8003f98:	edd3 7a00 	vldr	s15, [r3]
 8003f9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fa0:	ee17 0a90 	vmov	r0, s15
 8003fa4:	f7fc fae8 	bl	8000578 <__aeabi_f2d>
 8003fa8:	a379      	add	r3, pc, #484	@ (adr r3, 8004190 <main+0x960>)
 8003faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fae:	f7fc fb3b 	bl	8000628 <__aeabi_dmul>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	4610      	mov	r0, r2
 8003fb8:	4619      	mov	r1, r3
 8003fba:	f7fc fe2d 	bl	8000c18 <__aeabi_d2f>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	4a85      	ldr	r2, [pc, #532]	@ (80041d8 <main+0x9a8>)
 8003fc2:	6013      	str	r3, [r2, #0]


			  gyroX_LP_prev =  filtered_gyro_LP[0];
 8003fc4:	4b78      	ldr	r3, [pc, #480]	@ (80041a8 <main+0x978>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a7e      	ldr	r2, [pc, #504]	@ (80041c4 <main+0x994>)
 8003fca:	6013      	str	r3, [r2, #0]
			  gyroY_LP_prev =  filtered_gyro_LP[1];
 8003fcc:	4b76      	ldr	r3, [pc, #472]	@ (80041a8 <main+0x978>)
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	4a78      	ldr	r2, [pc, #480]	@ (80041b4 <main+0x984>)
 8003fd2:	6013      	str	r3, [r2, #0]
			  gyroZ_LP_prev =  filtered_gyro_LP[2];
 8003fd4:	4b74      	ldr	r3, [pc, #464]	@ (80041a8 <main+0x978>)
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	4a78      	ldr	r2, [pc, #480]	@ (80041bc <main+0x98c>)
 8003fda:	6013      	str	r3, [r2, #0]

			  // Low pass filter for accelerometer data
			  filtered_acc_LP[0] = LP_alpha * filtered_acc_LP[0] + (1 - LP_alpha) *  toplam_accX / 10.0;
 8003fdc:	4b7f      	ldr	r3, [pc, #508]	@ (80041dc <main+0x9ac>)
 8003fde:	edd3 7a00 	vldr	s15, [r3]
 8003fe2:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 80041b0 <main+0x980>
 8003fe6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fea:	ee17 0a90 	vmov	r0, s15
 8003fee:	f7fc fac3 	bl	8000578 <__aeabi_f2d>
 8003ff2:	4604      	mov	r4, r0
 8003ff4:	460d      	mov	r5, r1
 8003ff6:	4b7a      	ldr	r3, [pc, #488]	@ (80041e0 <main+0x9b0>)
 8003ff8:	edd3 7a00 	vldr	s15, [r3]
 8003ffc:	ed9f 7a79 	vldr	s14, [pc, #484]	@ 80041e4 <main+0x9b4>
 8004000:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004004:	ee17 0a90 	vmov	r0, s15
 8004008:	f7fc fab6 	bl	8000578 <__aeabi_f2d>
 800400c:	f04f 0200 	mov.w	r2, #0
 8004010:	4b75      	ldr	r3, [pc, #468]	@ (80041e8 <main+0x9b8>)
 8004012:	f7fc fc33 	bl	800087c <__aeabi_ddiv>
 8004016:	4602      	mov	r2, r0
 8004018:	460b      	mov	r3, r1
 800401a:	4620      	mov	r0, r4
 800401c:	4629      	mov	r1, r5
 800401e:	f7fc f94d 	bl	80002bc <__adddf3>
 8004022:	4602      	mov	r2, r0
 8004024:	460b      	mov	r3, r1
 8004026:	4610      	mov	r0, r2
 8004028:	4619      	mov	r1, r3
 800402a:	f7fc fdf5 	bl	8000c18 <__aeabi_d2f>
 800402e:	4603      	mov	r3, r0
 8004030:	4a6a      	ldr	r2, [pc, #424]	@ (80041dc <main+0x9ac>)
 8004032:	6013      	str	r3, [r2, #0]
			  filtered_acc_LP[1] = LP_alpha * filtered_acc_LP[1] + (1 - LP_alpha) *  toplam_accY / 10.0;
 8004034:	4b69      	ldr	r3, [pc, #420]	@ (80041dc <main+0x9ac>)
 8004036:	edd3 7a01 	vldr	s15, [r3, #4]
 800403a:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 80041b0 <main+0x980>
 800403e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004042:	ee17 0a90 	vmov	r0, s15
 8004046:	f7fc fa97 	bl	8000578 <__aeabi_f2d>
 800404a:	4604      	mov	r4, r0
 800404c:	460d      	mov	r5, r1
 800404e:	4b67      	ldr	r3, [pc, #412]	@ (80041ec <main+0x9bc>)
 8004050:	edd3 7a00 	vldr	s15, [r3]
 8004054:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 80041e4 <main+0x9b4>
 8004058:	ee67 7a87 	vmul.f32	s15, s15, s14
 800405c:	ee17 0a90 	vmov	r0, s15
 8004060:	f7fc fa8a 	bl	8000578 <__aeabi_f2d>
 8004064:	f04f 0200 	mov.w	r2, #0
 8004068:	4b5f      	ldr	r3, [pc, #380]	@ (80041e8 <main+0x9b8>)
 800406a:	f7fc fc07 	bl	800087c <__aeabi_ddiv>
 800406e:	4602      	mov	r2, r0
 8004070:	460b      	mov	r3, r1
 8004072:	4620      	mov	r0, r4
 8004074:	4629      	mov	r1, r5
 8004076:	f7fc f921 	bl	80002bc <__adddf3>
 800407a:	4602      	mov	r2, r0
 800407c:	460b      	mov	r3, r1
 800407e:	4610      	mov	r0, r2
 8004080:	4619      	mov	r1, r3
 8004082:	f7fc fdc9 	bl	8000c18 <__aeabi_d2f>
 8004086:	4603      	mov	r3, r0
 8004088:	4a54      	ldr	r2, [pc, #336]	@ (80041dc <main+0x9ac>)
 800408a:	6053      	str	r3, [r2, #4]
			  filtered_acc_LP[2] = LP_alpha * filtered_acc_LP[2] + (1 - LP_alpha) *  toplam_accZ / 10.0;
 800408c:	4b53      	ldr	r3, [pc, #332]	@ (80041dc <main+0x9ac>)
 800408e:	edd3 7a02 	vldr	s15, [r3, #8]
 8004092:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 80041b0 <main+0x980>
 8004096:	ee67 7a87 	vmul.f32	s15, s15, s14
 800409a:	ee17 0a90 	vmov	r0, s15
 800409e:	f7fc fa6b 	bl	8000578 <__aeabi_f2d>
 80040a2:	4604      	mov	r4, r0
 80040a4:	460d      	mov	r5, r1
 80040a6:	4b52      	ldr	r3, [pc, #328]	@ (80041f0 <main+0x9c0>)
 80040a8:	edd3 7a00 	vldr	s15, [r3]
 80040ac:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 80041e4 <main+0x9b4>
 80040b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80040b4:	ee17 0a90 	vmov	r0, s15
 80040b8:	f7fc fa5e 	bl	8000578 <__aeabi_f2d>
 80040bc:	f04f 0200 	mov.w	r2, #0
 80040c0:	4b49      	ldr	r3, [pc, #292]	@ (80041e8 <main+0x9b8>)
 80040c2:	f7fc fbdb 	bl	800087c <__aeabi_ddiv>
 80040c6:	4602      	mov	r2, r0
 80040c8:	460b      	mov	r3, r1
 80040ca:	4620      	mov	r0, r4
 80040cc:	4629      	mov	r1, r5
 80040ce:	f7fc f8f5 	bl	80002bc <__adddf3>
 80040d2:	4602      	mov	r2, r0
 80040d4:	460b      	mov	r3, r1
 80040d6:	4610      	mov	r0, r2
 80040d8:	4619      	mov	r1, r3
 80040da:	f7fc fd9d 	bl	8000c18 <__aeabi_d2f>
 80040de:	4603      	mov	r3, r0
 80040e0:	4a3e      	ldr	r2, [pc, #248]	@ (80041dc <main+0x9ac>)
 80040e2:	6093      	str	r3, [r2, #8]

			  gyroX_HP_prev = filtered_gyro_HP_X;
 80040e4:	4b38      	ldr	r3, [pc, #224]	@ (80041c8 <main+0x998>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a35      	ldr	r2, [pc, #212]	@ (80041c0 <main+0x990>)
 80040ea:	6013      	str	r3, [r2, #0]
			  gyroY_HP_prev = filtered_gyro_HP_Y;
 80040ec:	4b38      	ldr	r3, [pc, #224]	@ (80041d0 <main+0x9a0>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a36      	ldr	r2, [pc, #216]	@ (80041cc <main+0x99c>)
 80040f2:	6013      	str	r3, [r2, #0]
			  gyroZ_HP_prev = filtered_gyro_HP_Z;
 80040f4:	4b38      	ldr	r3, [pc, #224]	@ (80041d8 <main+0x9a8>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a36      	ldr	r2, [pc, #216]	@ (80041d4 <main+0x9a4>)
 80040fa:	6013      	str	r3, [r2, #0]


			  real_roll = atan2f(filtered_acc_LP[1], sqrtf(filtered_acc_LP[0] * filtered_acc_LP[0] + filtered_acc_LP[2] * filtered_acc_LP[2] +  1e-10)) * 180.0f / 3.14;
 80040fc:	4b37      	ldr	r3, [pc, #220]	@ (80041dc <main+0x9ac>)
 80040fe:	ed93 8a01 	vldr	s16, [r3, #4]
 8004102:	4b36      	ldr	r3, [pc, #216]	@ (80041dc <main+0x9ac>)
 8004104:	ed93 7a00 	vldr	s14, [r3]
 8004108:	4b34      	ldr	r3, [pc, #208]	@ (80041dc <main+0x9ac>)
 800410a:	edd3 7a00 	vldr	s15, [r3]
 800410e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004112:	4b32      	ldr	r3, [pc, #200]	@ (80041dc <main+0x9ac>)
 8004114:	edd3 6a02 	vldr	s13, [r3, #8]
 8004118:	4b30      	ldr	r3, [pc, #192]	@ (80041dc <main+0x9ac>)
 800411a:	edd3 7a02 	vldr	s15, [r3, #8]
 800411e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004122:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004126:	ee17 0a90 	vmov	r0, s15
 800412a:	f7fc fa25 	bl	8000578 <__aeabi_f2d>
 800412e:	a31a      	add	r3, pc, #104	@ (adr r3, 8004198 <main+0x968>)
 8004130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004134:	f7fc f8c2 	bl	80002bc <__adddf3>
 8004138:	4602      	mov	r2, r0
 800413a:	460b      	mov	r3, r1
 800413c:	4610      	mov	r0, r2
 800413e:	4619      	mov	r1, r3
 8004140:	f7fc fd6a 	bl	8000c18 <__aeabi_d2f>
 8004144:	4603      	mov	r3, r0
 8004146:	ee00 3a10 	vmov	s0, r3
 800414a:	f009 ffff 	bl	800e14c <sqrtf>
 800414e:	eef0 7a40 	vmov.f32	s15, s0
 8004152:	eef0 0a67 	vmov.f32	s1, s15
 8004156:	eeb0 0a48 	vmov.f32	s0, s16
 800415a:	f009 fff5 	bl	800e148 <atan2f>
 800415e:	eef0 7a40 	vmov.f32	s15, s0
 8004162:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 80041f4 <main+0x9c4>
 8004166:	ee67 7a87 	vmul.f32	s15, s15, s14
 800416a:	ee17 0a90 	vmov	r0, s15
 800416e:	f7fc fa03 	bl	8000578 <__aeabi_f2d>
 8004172:	a30b      	add	r3, pc, #44	@ (adr r3, 80041a0 <main+0x970>)
 8004174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004178:	f7fc fb80 	bl	800087c <__aeabi_ddiv>
 800417c:	4602      	mov	r2, r0
 800417e:	460b      	mov	r3, r1
 8004180:	e03a      	b.n	80041f8 <main+0x9c8>
 8004182:	bf00      	nop
 8004184:	f3af 8000 	nop.w
 8004188:	c0000000 	.word	0xc0000000
 800418c:	3fdccccc 	.word	0x3fdccccc
 8004190:	33333333 	.word	0x33333333
 8004194:	3feb3333 	.word	0x3feb3333
 8004198:	d9d7bdbb 	.word	0xd9d7bdbb
 800419c:	3ddb7cdf 	.word	0x3ddb7cdf
 80041a0:	51eb851f 	.word	0x51eb851f
 80041a4:	40091eb8 	.word	0x40091eb8
 80041a8:	20002330 	.word	0x20002330
 80041ac:	200022e4 	.word	0x200022e4
 80041b0:	3f0ccccd 	.word	0x3f0ccccd
 80041b4:	20002328 	.word	0x20002328
 80041b8:	200022e8 	.word	0x200022e8
 80041bc:	2000232c 	.word	0x2000232c
 80041c0:	2000230c 	.word	0x2000230c
 80041c4:	20002324 	.word	0x20002324
 80041c8:	20002318 	.word	0x20002318
 80041cc:	20002310 	.word	0x20002310
 80041d0:	2000231c 	.word	0x2000231c
 80041d4:	20002314 	.word	0x20002314
 80041d8:	20002320 	.word	0x20002320
 80041dc:	200022fc 	.word	0x200022fc
 80041e0:	200022d4 	.word	0x200022d4
 80041e4:	3ee66666 	.word	0x3ee66666
 80041e8:	40240000 	.word	0x40240000
 80041ec:	200022d8 	.word	0x200022d8
 80041f0:	200022dc 	.word	0x200022dc
 80041f4:	43340000 	.word	0x43340000
 80041f8:	4610      	mov	r0, r2
 80041fa:	4619      	mov	r1, r3
 80041fc:	f7fc fd0c 	bl	8000c18 <__aeabi_d2f>
 8004200:	4603      	mov	r3, r0
 8004202:	4ab3      	ldr	r2, [pc, #716]	@ (80044d0 <main+0xca0>)
 8004204:	6013      	str	r3, [r2, #0]
			  real_pitch = atan2f(-filtered_acc_LP[0], sqrtf(filtered_acc_LP[1] * filtered_acc_LP[1] + filtered_acc_LP[2] * filtered_acc_LP[2]+ 1e-10)) * 180.0f / 3.14;
 8004206:	4bb3      	ldr	r3, [pc, #716]	@ (80044d4 <main+0xca4>)
 8004208:	edd3 7a00 	vldr	s15, [r3]
 800420c:	eeb1 8a67 	vneg.f32	s16, s15
 8004210:	4bb0      	ldr	r3, [pc, #704]	@ (80044d4 <main+0xca4>)
 8004212:	ed93 7a01 	vldr	s14, [r3, #4]
 8004216:	4baf      	ldr	r3, [pc, #700]	@ (80044d4 <main+0xca4>)
 8004218:	edd3 7a01 	vldr	s15, [r3, #4]
 800421c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004220:	4bac      	ldr	r3, [pc, #688]	@ (80044d4 <main+0xca4>)
 8004222:	edd3 6a02 	vldr	s13, [r3, #8]
 8004226:	4bab      	ldr	r3, [pc, #684]	@ (80044d4 <main+0xca4>)
 8004228:	edd3 7a02 	vldr	s15, [r3, #8]
 800422c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004230:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004234:	ee17 0a90 	vmov	r0, s15
 8004238:	f7fc f99e 	bl	8000578 <__aeabi_f2d>
 800423c:	a3a0      	add	r3, pc, #640	@ (adr r3, 80044c0 <main+0xc90>)
 800423e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004242:	f7fc f83b 	bl	80002bc <__adddf3>
 8004246:	4602      	mov	r2, r0
 8004248:	460b      	mov	r3, r1
 800424a:	4610      	mov	r0, r2
 800424c:	4619      	mov	r1, r3
 800424e:	f7fc fce3 	bl	8000c18 <__aeabi_d2f>
 8004252:	4603      	mov	r3, r0
 8004254:	ee00 3a10 	vmov	s0, r3
 8004258:	f009 ff78 	bl	800e14c <sqrtf>
 800425c:	eef0 7a40 	vmov.f32	s15, s0
 8004260:	eef0 0a67 	vmov.f32	s1, s15
 8004264:	eeb0 0a48 	vmov.f32	s0, s16
 8004268:	f009 ff6e 	bl	800e148 <atan2f>
 800426c:	eef0 7a40 	vmov.f32	s15, s0
 8004270:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 80044d8 <main+0xca8>
 8004274:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004278:	ee17 0a90 	vmov	r0, s15
 800427c:	f7fc f97c 	bl	8000578 <__aeabi_f2d>
 8004280:	a391      	add	r3, pc, #580	@ (adr r3, 80044c8 <main+0xc98>)
 8004282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004286:	f7fc faf9 	bl	800087c <__aeabi_ddiv>
 800428a:	4602      	mov	r2, r0
 800428c:	460b      	mov	r3, r1
 800428e:	4610      	mov	r0, r2
 8004290:	4619      	mov	r1, r3
 8004292:	f7fc fcc1 	bl	8000c18 <__aeabi_d2f>
 8004296:	4603      	mov	r3, r0
 8004298:	4a90      	ldr	r2, [pc, #576]	@ (80044dc <main+0xcac>)
 800429a:	6013      	str	r3, [r2, #0]

			  uint32_t current_time = HAL_GetTick(); // current time
 800429c:	f001 ffa8 	bl	80061f0 <HAL_GetTick>
 80042a0:	6138      	str	r0, [r7, #16]
			  float dt = (current_time - prev_time1) / 1000.0f;
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	ee07 3a90 	vmov	s15, r3
 80042a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80042ac:	4b8c      	ldr	r3, [pc, #560]	@ (80044e0 <main+0xcb0>)
 80042ae:	edd3 7a00 	vldr	s15, [r3]
 80042b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80042b6:	eddf 6a8b 	vldr	s13, [pc, #556]	@ 80044e4 <main+0xcb4>
 80042ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80042be:	edc7 7a03 	vstr	s15, [r7, #12]

			  real_roll = ALPHA * (real_roll + filtered_gyro_HP_X * dt) + (1 - ALPHA) * real_roll;
 80042c2:	4b89      	ldr	r3, [pc, #548]	@ (80044e8 <main+0xcb8>)
 80042c4:	ed93 7a00 	vldr	s14, [r3]
 80042c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80042cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80042d0:	4b7f      	ldr	r3, [pc, #508]	@ (80044d0 <main+0xca0>)
 80042d2:	edd3 7a00 	vldr	s15, [r3]
 80042d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042da:	ed9f 7a84 	vldr	s14, [pc, #528]	@ 80044ec <main+0xcbc>
 80042de:	ee27 7a87 	vmul.f32	s14, s15, s14
 80042e2:	4b7b      	ldr	r3, [pc, #492]	@ (80044d0 <main+0xca0>)
 80042e4:	edd3 7a00 	vldr	s15, [r3]
 80042e8:	eddf 6a81 	vldr	s13, [pc, #516]	@ 80044f0 <main+0xcc0>
 80042ec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80042f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042f4:	4b76      	ldr	r3, [pc, #472]	@ (80044d0 <main+0xca0>)
 80042f6:	edc3 7a00 	vstr	s15, [r3]
			  real_pitch = ALPHA * (real_pitch + filtered_gyro_HP_Y * dt) + (1 - ALPHA) * real_pitch;
 80042fa:	4b7e      	ldr	r3, [pc, #504]	@ (80044f4 <main+0xcc4>)
 80042fc:	ed93 7a00 	vldr	s14, [r3]
 8004300:	edd7 7a03 	vldr	s15, [r7, #12]
 8004304:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004308:	4b74      	ldr	r3, [pc, #464]	@ (80044dc <main+0xcac>)
 800430a:	edd3 7a00 	vldr	s15, [r3]
 800430e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004312:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 80044ec <main+0xcbc>
 8004316:	ee27 7a87 	vmul.f32	s14, s15, s14
 800431a:	4b70      	ldr	r3, [pc, #448]	@ (80044dc <main+0xcac>)
 800431c:	edd3 7a00 	vldr	s15, [r3]
 8004320:	eddf 6a73 	vldr	s13, [pc, #460]	@ 80044f0 <main+0xcc0>
 8004324:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004328:	ee77 7a27 	vadd.f32	s15, s14, s15
 800432c:	4b6b      	ldr	r3, [pc, #428]	@ (80044dc <main+0xcac>)
 800432e:	edc3 7a00 	vstr	s15, [r3]

			  prev_time1 = current_time;
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	ee07 3a90 	vmov	s15, r3
 8004338:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800433c:	4b68      	ldr	r3, [pc, #416]	@ (80044e0 <main+0xcb0>)
 800433e:	edc3 7a00 	vstr	s15, [r3]
			  gravity_normal_angle = sqrtf(real_roll * real_roll + real_pitch * real_pitch);
 8004342:	4b63      	ldr	r3, [pc, #396]	@ (80044d0 <main+0xca0>)
 8004344:	ed93 7a00 	vldr	s14, [r3]
 8004348:	4b61      	ldr	r3, [pc, #388]	@ (80044d0 <main+0xca0>)
 800434a:	edd3 7a00 	vldr	s15, [r3]
 800434e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004352:	4b62      	ldr	r3, [pc, #392]	@ (80044dc <main+0xcac>)
 8004354:	edd3 6a00 	vldr	s13, [r3]
 8004358:	4b60      	ldr	r3, [pc, #384]	@ (80044dc <main+0xcac>)
 800435a:	edd3 7a00 	vldr	s15, [r3]
 800435e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004362:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004366:	eeb0 0a67 	vmov.f32	s0, s15
 800436a:	f009 feef 	bl	800e14c <sqrtf>
 800436e:	eef0 7a40 	vmov.f32	s15, s0
 8004372:	4b61      	ldr	r3, [pc, #388]	@ (80044f8 <main+0xcc8>)
 8004374:	edc3 7a00 	vstr	s15, [r3]

			  toplam_roll = 0;
 8004378:	4b60      	ldr	r3, [pc, #384]	@ (80044fc <main+0xccc>)
 800437a:	f04f 0200 	mov.w	r2, #0
 800437e:	601a      	str	r2, [r3, #0]
			  toplam_pitch = 0;
 8004380:	4b5f      	ldr	r3, [pc, #380]	@ (8004500 <main+0xcd0>)
 8004382:	f04f 0200 	mov.w	r2, #0
 8004386:	601a      	str	r2, [r3, #0]
			  toplam_accX = 0;
 8004388:	4b5e      	ldr	r3, [pc, #376]	@ (8004504 <main+0xcd4>)
 800438a:	f04f 0200 	mov.w	r2, #0
 800438e:	601a      	str	r2, [r3, #0]
			  toplam_accY = 0;
 8004390:	4b5d      	ldr	r3, [pc, #372]	@ (8004508 <main+0xcd8>)
 8004392:	f04f 0200 	mov.w	r2, #0
 8004396:	601a      	str	r2, [r3, #0]
			  toplam_accZ = 0;
 8004398:	4b5c      	ldr	r3, [pc, #368]	@ (800450c <main+0xcdc>)
 800439a:	f04f 0200 	mov.w	r2, #0
 800439e:	601a      	str	r2, [r3, #0]
			  toplam_gX = 0;
 80043a0:	4b5b      	ldr	r3, [pc, #364]	@ (8004510 <main+0xce0>)
 80043a2:	f04f 0200 	mov.w	r2, #0
 80043a6:	601a      	str	r2, [r3, #0]
			  toplam_gY = 0;
 80043a8:	4b5a      	ldr	r3, [pc, #360]	@ (8004514 <main+0xce4>)
 80043aa:	f04f 0200 	mov.w	r2, #0
 80043ae:	601a      	str	r2, [r3, #0]
			  toplam_gZ = 0;
 80043b0:	4b59      	ldr	r3, [pc, #356]	@ (8004518 <main+0xce8>)
 80043b2:	f04f 0200 	mov.w	r2, #0
 80043b6:	601a      	str	r2, [r3, #0]
			  sensor_counter = 0;
 80043b8:	4b58      	ldr	r3, [pc, #352]	@ (800451c <main+0xcec>)
 80043ba:	2200      	movs	r2, #0
 80043bc:	701a      	strb	r2, [r3, #0]
	      }

	      magnetic_switch = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14);
 80043be:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80043c2:	4857      	ldr	r0, [pc, #348]	@ (8004520 <main+0xcf0>)
 80043c4:	f002 ff08 	bl	80071d8 <HAL_GPIO_ReadPin>
 80043c8:	4603      	mov	r3, r0
 80043ca:	461a      	mov	r2, r3
 80043cc:	4b55      	ldr	r3, [pc, #340]	@ (8004524 <main+0xcf4>)
 80043ce:	701a      	strb	r2, [r3, #0]
	      BUTTON_STATE = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9);
 80043d0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80043d4:	4852      	ldr	r0, [pc, #328]	@ (8004520 <main+0xcf0>)
 80043d6:	f002 feff 	bl	80071d8 <HAL_GPIO_ReadPin>
 80043da:	4603      	mov	r3, r0
 80043dc:	461a      	mov	r2, r3
 80043de:	4b52      	ldr	r3, [pc, #328]	@ (8004528 <main+0xcf8>)
 80043e0:	701a      	strb	r2, [r3, #0]
	  }



/********************Lora Ayar ve Gönderme*****************************************************/
	if(lora_flag==1)
 80043e2:	4b52      	ldr	r3, [pc, #328]	@ (800452c <main+0xcfc>)
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d12c      	bne.n	8004444 <main+0xc14>
	{
	    lora_flag=0;
 80043ea:	4b50      	ldr	r3, [pc, #320]	@ (800452c <main+0xcfc>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	701a      	strb	r2, [r3, #0]

		loratx[0]=0x8;
 80043f0:	4b4f      	ldr	r3, [pc, #316]	@ (8004530 <main+0xd00>)
 80043f2:	2208      	movs	r2, #8
 80043f4:	701a      	strb	r2, [r3, #0]
		loratx[1]=0x2A;
 80043f6:	4b4e      	ldr	r3, [pc, #312]	@ (8004530 <main+0xd00>)
 80043f8:	222a      	movs	r2, #42	@ 0x2a
 80043fa:	705a      	strb	r2, [r3, #1]
		loratx[2]=0x10;
 80043fc:	4b4c      	ldr	r3, [pc, #304]	@ (8004530 <main+0xd00>)
 80043fe:	2210      	movs	r2, #16
 8004400:	709a      	strb	r2, [r3, #2]
		loratx[3]=DEVICE_ID;
 8004402:	4b4b      	ldr	r3, [pc, #300]	@ (8004530 <main+0xd00>)
 8004404:	2202      	movs	r2, #2
 8004406:	70da      	strb	r2, [r3, #3]
		loratx[4]=gps.sats_in_view;
 8004408:	4b4a      	ldr	r3, [pc, #296]	@ (8004534 <main+0xd04>)
 800440a:	f893 204d 	ldrb.w	r2, [r3, #77]	@ 0x4d
 800440e:	4b48      	ldr	r3, [pc, #288]	@ (8004530 <main+0xd00>)
 8004410:	711a      	strb	r2, [r3, #4]

		union_converter();
 8004412:	f001 f839 	bl	8005488 <union_converter>

		loratx[49]=v4_battery;
 8004416:	4b48      	ldr	r3, [pc, #288]	@ (8004538 <main+0xd08>)
 8004418:	781a      	ldrb	r2, [r3, #0]
 800441a:	4b45      	ldr	r3, [pc, #276]	@ (8004530 <main+0xd00>)
 800441c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
		loratx[50]=0x31;// v4mod
 8004420:	4b43      	ldr	r3, [pc, #268]	@ (8004530 <main+0xd00>)
 8004422:	2231      	movs	r2, #49	@ 0x31
 8004424:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
		loratx[51]=magnetic_switch;
 8004428:	4b3e      	ldr	r3, [pc, #248]	@ (8004524 <main+0xcf4>)
 800442a:	781a      	ldrb	r2, [r3, #0]
 800442c:	4b40      	ldr	r3, [pc, #256]	@ (8004530 <main+0xd00>)
 800442e:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

		////////EGU PART
		EGU_Buff_Load();
 8004432:	f001 f97d 	bl	8005730 <EGU_Buff_Load>

		//HAL_UART_Transmit_IT(&huart3,loratx,sizeof(loratx));
		HAL_UART_Transmit(&huart3,loratx,sizeof(loratx), 1000);
 8004436:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800443a:	2246      	movs	r2, #70	@ 0x46
 800443c:	493c      	ldr	r1, [pc, #240]	@ (8004530 <main+0xd00>)
 800443e:	483f      	ldr	r0, [pc, #252]	@ (800453c <main+0xd0c>)
 8004440:	f005 ff1f 	bl	800a282 <HAL_UART_Transmit>

	}


/************ EGÜ durum sorgusu gönder **************************************************/
	if(egu_durum_flag==1)
 8004444:	4b3e      	ldr	r3, [pc, #248]	@ (8004540 <main+0xd10>)
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	2b01      	cmp	r3, #1
 800444a:	d109      	bne.n	8004460 <main+0xc30>
	{
		egu_durum_flag=0;
 800444c:	4b3c      	ldr	r3, [pc, #240]	@ (8004540 <main+0xd10>)
 800444e:	2200      	movs	r2, #0
 8004450:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart6, EGU_durum_sorgusu, 5, 1000);
 8004452:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004456:	2205      	movs	r2, #5
 8004458:	493a      	ldr	r1, [pc, #232]	@ (8004544 <main+0xd14>)
 800445a:	483b      	ldr	r0, [pc, #236]	@ (8004548 <main+0xd18>)
 800445c:	f005 ff11 	bl	800a282 <HAL_UART_Transmit>
	}


/**************************Algoritma****************************************************/
		  switch(SUSTAINER){
 8004460:	4b3a      	ldr	r3, [pc, #232]	@ (800454c <main+0xd1c>)
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	2b06      	cmp	r3, #6
 8004466:	f200 8156 	bhi.w	8004716 <main+0xee6>
 800446a:	a201      	add	r2, pc, #4	@ (adr r2, 8004470 <main+0xc40>)
 800446c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004470:	0800448d 	.word	0x0800448d
 8004474:	080044b1 	.word	0x080044b1
 8004478:	08004559 	.word	0x08004559
 800447c:	080045a5 	.word	0x080045a5
 8004480:	080045f9 	.word	0x080045f9
 8004484:	0800465b 	.word	0x0800465b
 8004488:	080046c1 	.word	0x080046c1

		  case RAMPA:
				v4_mod=1;
 800448c:	4b30      	ldr	r3, [pc, #192]	@ (8004550 <main+0xd20>)
 800448e:	2201      	movs	r2, #1
 8004490:	701a      	strb	r2, [r3, #0]
			  //RAMPA MODU ROKET RAMPADA EGÜ SWİTCHLERİ VE ALT KADEME HABERLE�?ME KONTROL ET

				if(Lsm_Sensor.Accel_X > 5 )
 8004492:	4b30      	ldr	r3, [pc, #192]	@ (8004554 <main+0xd24>)
 8004494:	edd3 7a00 	vldr	s15, [r3]
 8004498:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800449c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044a4:	dc00      	bgt.n	80044a8 <main+0xc78>
				  {
					SUSTAINER=UCUS_BASLADI;
//					Buzzer(6, 300);
				  }

			  break;
 80044a6:	e136      	b.n	8004716 <main+0xee6>
					SUSTAINER=UCUS_BASLADI;
 80044a8:	4b28      	ldr	r3, [pc, #160]	@ (800454c <main+0xd1c>)
 80044aa:	2201      	movs	r2, #1
 80044ac:	701a      	strb	r2, [r3, #0]
			  break;
 80044ae:	e132      	b.n	8004716 <main+0xee6>

		  case UCUS_BASLADI:
				v4_mod=2;
 80044b0:	4b27      	ldr	r3, [pc, #156]	@ (8004550 <main+0xd20>)
 80044b2:	2202      	movs	r2, #2
 80044b4:	701a      	strb	r2, [r3, #0]
				// FLASH MEMORYE KAYDETMEYE BASLA

				SUSTAINER=KADEMEAYRILDIMI;
 80044b6:	4b25      	ldr	r3, [pc, #148]	@ (800454c <main+0xd1c>)
 80044b8:	2202      	movs	r2, #2
 80044ba:	701a      	strb	r2, [r3, #0]

			 break;
 80044bc:	e12b      	b.n	8004716 <main+0xee6>
 80044be:	bf00      	nop
 80044c0:	d9d7bdbb 	.word	0xd9d7bdbb
 80044c4:	3ddb7cdf 	.word	0x3ddb7cdf
 80044c8:	51eb851f 	.word	0x51eb851f
 80044cc:	40091eb8 	.word	0x40091eb8
 80044d0:	200022c8 	.word	0x200022c8
 80044d4:	200022fc 	.word	0x200022fc
 80044d8:	43340000 	.word	0x43340000
 80044dc:	200022c4 	.word	0x200022c4
 80044e0:	2000233c 	.word	0x2000233c
 80044e4:	447a0000 	.word	0x447a0000
 80044e8:	20002318 	.word	0x20002318
 80044ec:	3f7ae148 	.word	0x3f7ae148
 80044f0:	3ca3d700 	.word	0x3ca3d700
 80044f4:	2000231c 	.word	0x2000231c
 80044f8:	20002308 	.word	0x20002308
 80044fc:	200022d0 	.word	0x200022d0
 8004500:	200022cc 	.word	0x200022cc
 8004504:	200022d4 	.word	0x200022d4
 8004508:	200022d8 	.word	0x200022d8
 800450c:	200022dc 	.word	0x200022dc
 8004510:	200022e0 	.word	0x200022e0
 8004514:	200022e4 	.word	0x200022e4
 8004518:	200022e8 	.word	0x200022e8
 800451c:	20002340 	.word	0x20002340
 8004520:	40020800 	.word	0x40020800
 8004524:	2000064a 	.word	0x2000064a
 8004528:	2000064b 	.word	0x2000064b
 800452c:	20002296 	.word	0x20002296
 8004530:	20002250 	.word	0x20002250
 8004534:	200023d8 	.word	0x200023d8
 8004538:	20000648 	.word	0x20000648
 800453c:	20000500 	.word	0x20000500
 8004540:	20002298 	.word	0x20002298
 8004544:	0800f2b8 	.word	0x0800f2b8
 8004548:	20000544 	.word	0x20000544
 800454c:	200023d0 	.word	0x200023d0
 8004550:	20000649 	.word	0x20000649
 8004554:	20002488 	.word	0x20002488

		  case KADEMEAYRILDIMI:
				v4_mod=3;
 8004558:	4b5c      	ldr	r3, [pc, #368]	@ (80046cc <main+0xe9c>)
 800455a:	2203      	movs	r2, #3
 800455c:	701a      	strb	r2, [r3, #0]
					  //ALT KADEMEDEN GELEN SİNYALE VE EGÜ SWİTCHLERİNE BAK
					  //BELLİ BİR SÜRE VE İRTİFA BOYUNCA AYRILMA OLMAZSA APOGEE YA GEÇ
				if(timer_start_flag == 0){
 800455e:	4b5c      	ldr	r3, [pc, #368]	@ (80046d0 <main+0xea0>)
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d109      	bne.n	800457a <main+0xd4a>

					__HAL_TIM_SET_COUNTER(&htim7 , 0);
 8004566:	4b5b      	ldr	r3, [pc, #364]	@ (80046d4 <main+0xea4>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2200      	movs	r2, #0
 800456c:	625a      	str	r2, [r3, #36]	@ 0x24
					HAL_TIM_Base_Start(&htim7);
 800456e:	4859      	ldr	r0, [pc, #356]	@ (80046d4 <main+0xea4>)
 8004570:	f005 f972 	bl	8009858 <HAL_TIM_Base_Start>
					timer_start_flag =1;
 8004574:	4b56      	ldr	r3, [pc, #344]	@ (80046d0 <main+0xea0>)
 8004576:	2201      	movs	r2, #1
 8004578:	701a      	strb	r2, [r3, #0]
				}
				/*manyetik switch
				 * */
				if((magnetic_switch==0) && TIM7->CNT >= 45000 && altitude_rampa_control == 1)
 800457a:	4b57      	ldr	r3, [pc, #348]	@ (80046d8 <main+0xea8>)
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	f040 80a2 	bne.w	80046c8 <main+0xe98>
 8004584:	4b55      	ldr	r3, [pc, #340]	@ (80046dc <main+0xeac>)
 8004586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004588:	f64a 72c7 	movw	r2, #44999	@ 0xafc7
 800458c:	4293      	cmp	r3, r2
 800458e:	f240 809b 	bls.w	80046c8 <main+0xe98>
 8004592:	4b53      	ldr	r3, [pc, #332]	@ (80046e0 <main+0xeb0>)
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	2b01      	cmp	r3, #1
 8004598:	f040 8096 	bne.w	80046c8 <main+0xe98>
				{
				  SUSTAINER=AYRILDI;
 800459c:	4b51      	ldr	r3, [pc, #324]	@ (80046e4 <main+0xeb4>)
 800459e:	2203      	movs	r2, #3
 80045a0:	701a      	strb	r2, [r3, #0]

//				  Buzzer(10, 100);
				}

			 break;
 80045a2:	e091      	b.n	80046c8 <main+0xe98>

		  case AYRILDI:
				v4_mod=4;
 80045a4:	4b49      	ldr	r3, [pc, #292]	@ (80046cc <main+0xe9c>)
 80045a6:	2204      	movs	r2, #4
 80045a8:	701a      	strb	r2, [r3, #0]
					  //MOTOR ATE�?LEME TALEBİ GÖNDER MEGU YE MESAJ AT

				HAL_UART_Transmit(&huart6, EGU_motor_atesleme, 5, 1000);
 80045aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80045ae:	2205      	movs	r2, #5
 80045b0:	494d      	ldr	r1, [pc, #308]	@ (80046e8 <main+0xeb8>)
 80045b2:	484e      	ldr	r0, [pc, #312]	@ (80046ec <main+0xebc>)
 80045b4:	f005 fe65 	bl	800a282 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart6, EGU_motor_atesleme, 5, 1000);
 80045b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80045bc:	2205      	movs	r2, #5
 80045be:	494a      	ldr	r1, [pc, #296]	@ (80046e8 <main+0xeb8>)
 80045c0:	484a      	ldr	r0, [pc, #296]	@ (80046ec <main+0xebc>)
 80045c2:	f005 fe5e 	bl	800a282 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart6, EGU_motor_atesleme, 5, 1000);
 80045c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80045ca:	2205      	movs	r2, #5
 80045cc:	4946      	ldr	r1, [pc, #280]	@ (80046e8 <main+0xeb8>)
 80045ce:	4847      	ldr	r0, [pc, #284]	@ (80046ec <main+0xebc>)
 80045d0:	f005 fe57 	bl	800a282 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart6, EGU_motor_atesleme, 5, 1000);
 80045d4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80045d8:	2205      	movs	r2, #5
 80045da:	4943      	ldr	r1, [pc, #268]	@ (80046e8 <main+0xeb8>)
 80045dc:	4843      	ldr	r0, [pc, #268]	@ (80046ec <main+0xebc>)
 80045de:	f005 fe50 	bl	800a282 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart6, EGU_motor_atesleme, 5, 1000);
 80045e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80045e6:	2205      	movs	r2, #5
 80045e8:	493f      	ldr	r1, [pc, #252]	@ (80046e8 <main+0xeb8>)
 80045ea:	4840      	ldr	r0, [pc, #256]	@ (80046ec <main+0xebc>)
 80045ec:	f005 fe49 	bl	800a282 <HAL_UART_Transmit>
				SUSTAINER=APOGEE;
 80045f0:	4b3c      	ldr	r3, [pc, #240]	@ (80046e4 <main+0xeb4>)
 80045f2:	2204      	movs	r2, #4
 80045f4:	701a      	strb	r2, [r3, #0]

			 break;
 80045f6:	e08e      	b.n	8004716 <main+0xee6>

		  case APOGEE:
				v4_mod=5;
 80045f8:	4b34      	ldr	r3, [pc, #208]	@ (80046cc <main+0xe9c>)
 80045fa:	2205      	movs	r2, #5
 80045fc:	701a      	strb	r2, [r3, #0]
					  //AYRILMA GERÇEKLE�?MESE BİLE APOGEE İLE ROKETİ KURTAR *ucus basladı kısmına timer kuracam ona göre ayrıldımıdan APOGEEya geçecek


				if((real_pitch <= 32) && speed <= 2 && altitude < altitude_max )
 80045fe:	4b3c      	ldr	r3, [pc, #240]	@ (80046f0 <main+0xec0>)
 8004600:	edd3 7a00 	vldr	s15, [r3]
 8004604:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 80046f4 <main+0xec4>
 8004608:	eef4 7ac7 	vcmpe.f32	s15, s14
 800460c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004610:	d900      	bls.n	8004614 <main+0xde4>
					SUSTAINER=SUSTAINER_ANA;
					altitude_rampa_control =0;
				}


			 break;
 8004612:	e080      	b.n	8004716 <main+0xee6>
				if((real_pitch <= 32) && speed <= 2 && altitude < altitude_max )
 8004614:	4b38      	ldr	r3, [pc, #224]	@ (80046f8 <main+0xec8>)
 8004616:	edd3 7a00 	vldr	s15, [r3]
 800461a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800461e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004626:	d900      	bls.n	800462a <main+0xdfa>
			 break;
 8004628:	e075      	b.n	8004716 <main+0xee6>
				if((real_pitch <= 32) && speed <= 2 && altitude < altitude_max )
 800462a:	4b34      	ldr	r3, [pc, #208]	@ (80046fc <main+0xecc>)
 800462c:	ed93 7a00 	vldr	s14, [r3]
 8004630:	4b33      	ldr	r3, [pc, #204]	@ (8004700 <main+0xed0>)
 8004632:	edd3 7a00 	vldr	s15, [r3]
 8004636:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800463a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800463e:	d400      	bmi.n	8004642 <main+0xe12>
			 break;
 8004640:	e069      	b.n	8004716 <main+0xee6>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 8004642:	2201      	movs	r2, #1
 8004644:	2108      	movs	r1, #8
 8004646:	482f      	ldr	r0, [pc, #188]	@ (8004704 <main+0xed4>)
 8004648:	f002 fdde 	bl	8007208 <HAL_GPIO_WritePin>
					SUSTAINER=SUSTAINER_ANA;
 800464c:	4b25      	ldr	r3, [pc, #148]	@ (80046e4 <main+0xeb4>)
 800464e:	2205      	movs	r2, #5
 8004650:	701a      	strb	r2, [r3, #0]
					altitude_rampa_control =0;
 8004652:	4b23      	ldr	r3, [pc, #140]	@ (80046e0 <main+0xeb0>)
 8004654:	2200      	movs	r2, #0
 8004656:	701a      	strb	r2, [r3, #0]
			 break;
 8004658:	e05d      	b.n	8004716 <main+0xee6>

		  case SUSTAINER_ANA:
				v4_mod=6;
 800465a:	4b1c      	ldr	r3, [pc, #112]	@ (80046cc <main+0xe9c>)
 800465c:	2206      	movs	r2, #6
 800465e:	701a      	strb	r2, [r3, #0]
					  //AYRILDI VEYA APOGEEDAN GELEN APOGEE BİLGİSİNDEN SONRA İSTENEN İRTİFADA ANA PARA�?ÜT AÇ

				if(altitude <= 500 && speed < 0  && altitude_rampa_control == 0 )
 8004660:	4b26      	ldr	r3, [pc, #152]	@ (80046fc <main+0xecc>)
 8004662:	edd3 7a00 	vldr	s15, [r3]
 8004666:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8004708 <main+0xed8>
 800466a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800466e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004672:	d900      	bls.n	8004676 <main+0xe46>

					SUSTAINER=FINISH;
					flash_flag=1;
				}

			  break;
 8004674:	e04e      	b.n	8004714 <main+0xee4>
				if(altitude <= 500 && speed < 0  && altitude_rampa_control == 0 )
 8004676:	4b20      	ldr	r3, [pc, #128]	@ (80046f8 <main+0xec8>)
 8004678:	edd3 7a00 	vldr	s15, [r3]
 800467c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004684:	d400      	bmi.n	8004688 <main+0xe58>
			  break;
 8004686:	e045      	b.n	8004714 <main+0xee4>
				if(altitude <= 500 && speed < 0  && altitude_rampa_control == 0 )
 8004688:	4b15      	ldr	r3, [pc, #84]	@ (80046e0 <main+0xeb0>)
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d141      	bne.n	8004714 <main+0xee4>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 8004690:	2200      	movs	r2, #0
 8004692:	2108      	movs	r1, #8
 8004694:	481b      	ldr	r0, [pc, #108]	@ (8004704 <main+0xed4>)
 8004696:	f002 fdb7 	bl	8007208 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, SET);
 800469a:	2201      	movs	r2, #1
 800469c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80046a0:	481a      	ldr	r0, [pc, #104]	@ (800470c <main+0xedc>)
 80046a2:	f002 fdb1 	bl	8007208 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, RESET);
 80046a6:	2200      	movs	r2, #0
 80046a8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80046ac:	4817      	ldr	r0, [pc, #92]	@ (800470c <main+0xedc>)
 80046ae:	f002 fdab 	bl	8007208 <HAL_GPIO_WritePin>
					SUSTAINER=FINISH;
 80046b2:	4b0c      	ldr	r3, [pc, #48]	@ (80046e4 <main+0xeb4>)
 80046b4:	2206      	movs	r2, #6
 80046b6:	701a      	strb	r2, [r3, #0]
					flash_flag=1;
 80046b8:	4b15      	ldr	r3, [pc, #84]	@ (8004710 <main+0xee0>)
 80046ba:	2201      	movs	r2, #1
 80046bc:	701a      	strb	r2, [r3, #0]
			  break;
 80046be:	e029      	b.n	8004714 <main+0xee4>

		  case FINISH:
				v4_mod=7;
 80046c0:	4b02      	ldr	r3, [pc, #8]	@ (80046cc <main+0xe9c>)
 80046c2:	2207      	movs	r2, #7
 80046c4:	701a      	strb	r2, [r3, #0]
					  //KURTARMA GERÇEKLE�?Tİ VERİ KAYDETMEYİ BIRAK VE BUZZERI AÇ


			  break;
 80046c6:	e026      	b.n	8004716 <main+0xee6>
			 break;
 80046c8:	bf00      	nop
 80046ca:	e024      	b.n	8004716 <main+0xee6>
 80046cc:	20000649 	.word	0x20000649
 80046d0:	2000063a 	.word	0x2000063a
 80046d4:	200003a0 	.word	0x200003a0
 80046d8:	2000064a 	.word	0x2000064a
 80046dc:	40001400 	.word	0x40001400
 80046e0:	2000063b 	.word	0x2000063b
 80046e4:	200023d0 	.word	0x200023d0
 80046e8:	0800f2c0 	.word	0x0800f2c0
 80046ec:	20000544 	.word	0x20000544
 80046f0:	200022c4 	.word	0x200022c4
 80046f4:	42000000 	.word	0x42000000
 80046f8:	200022b8 	.word	0x200022b8
 80046fc:	200022a4 	.word	0x200022a4
 8004700:	20000644 	.word	0x20000644
 8004704:	40020400 	.word	0x40020400
 8004708:	43fa0000 	.word	0x43fa0000
 800470c:	40020800 	.word	0x40020800
 8004710:	2000063c 	.word	0x2000063c
			  break;
 8004714:	bf00      	nop
		  }


/**************************************************************************************/
		  if(altitude >30 && SUSTAINER <3)
 8004716:	4ba4      	ldr	r3, [pc, #656]	@ (80049a8 <main+0x1178>)
 8004718:	edd3 7a00 	vldr	s15, [r3]
 800471c:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8004720:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004728:	dd06      	ble.n	8004738 <main+0xf08>
 800472a:	4ba0      	ldr	r3, [pc, #640]	@ (80049ac <main+0x117c>)
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	2b02      	cmp	r3, #2
 8004730:	d802      	bhi.n	8004738 <main+0xf08>
		  {
			  altitude_rampa_control =1;
 8004732:	4b9f      	ldr	r3, [pc, #636]	@ (80049b0 <main+0x1180>)
 8004734:	2201      	movs	r2, #1
 8004736:	701a      	strb	r2, [r3, #0]
		  }
/*************************************************************************************/
		  if(altitude>altitude_max) altitude_max = altitude;
 8004738:	4b9b      	ldr	r3, [pc, #620]	@ (80049a8 <main+0x1178>)
 800473a:	ed93 7a00 	vldr	s14, [r3]
 800473e:	4b9d      	ldr	r3, [pc, #628]	@ (80049b4 <main+0x1184>)
 8004740:	edd3 7a00 	vldr	s15, [r3]
 8004744:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800474c:	dd03      	ble.n	8004756 <main+0xf26>
 800474e:	4b96      	ldr	r3, [pc, #600]	@ (80049a8 <main+0x1178>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a98      	ldr	r2, [pc, #608]	@ (80049b4 <main+0x1184>)
 8004754:	6013      	str	r3, [r2, #0]

		  if(speed>speed_max) speed_max = speed;
 8004756:	4b98      	ldr	r3, [pc, #608]	@ (80049b8 <main+0x1188>)
 8004758:	ed93 7a00 	vldr	s14, [r3]
 800475c:	4b97      	ldr	r3, [pc, #604]	@ (80049bc <main+0x118c>)
 800475e:	edd3 7a00 	vldr	s15, [r3]
 8004762:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800476a:	dd03      	ble.n	8004774 <main+0xf44>
 800476c:	4b92      	ldr	r3, [pc, #584]	@ (80049b8 <main+0x1188>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a92      	ldr	r2, [pc, #584]	@ (80049bc <main+0x118c>)
 8004772:	6013      	str	r3, [r2, #0]

		  if( Lsm_Sensor.Accel_X> x_max) x_max =  Lsm_Sensor.Accel_X;
 8004774:	4b92      	ldr	r3, [pc, #584]	@ (80049c0 <main+0x1190>)
 8004776:	ed93 7a00 	vldr	s14, [r3]
 800477a:	4b92      	ldr	r3, [pc, #584]	@ (80049c4 <main+0x1194>)
 800477c:	edd3 7a00 	vldr	s15, [r3]
 8004780:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004788:	dd03      	ble.n	8004792 <main+0xf62>
 800478a:	4b8d      	ldr	r3, [pc, #564]	@ (80049c0 <main+0x1190>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a8d      	ldr	r2, [pc, #564]	@ (80049c4 <main+0x1194>)
 8004790:	6013      	str	r3, [r2, #0]
/**************************************************************************************/
		  if(adc_flag ==1)
 8004792:	4b8d      	ldr	r3, [pc, #564]	@ (80049c8 <main+0x1198>)
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	2b01      	cmp	r3, #1
 8004798:	d158      	bne.n	800484c <main+0x101c>
		  {
			  if(adc > 2476) adc = 2234;
 800479a:	4b8c      	ldr	r3, [pc, #560]	@ (80049cc <main+0x119c>)
 800479c:	edd3 7a00 	vldr	s15, [r3]
 80047a0:	ed9f 7a8b 	vldr	s14, [pc, #556]	@ 80049d0 <main+0x11a0>
 80047a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047ac:	dd02      	ble.n	80047b4 <main+0xf84>
 80047ae:	4b87      	ldr	r3, [pc, #540]	@ (80049cc <main+0x119c>)
 80047b0:	4a88      	ldr	r2, [pc, #544]	@ (80049d4 <main+0x11a4>)
 80047b2:	601a      	str	r2, [r3, #0]
			  if(adc < 1755) adc = 1755;
 80047b4:	4b85      	ldr	r3, [pc, #532]	@ (80049cc <main+0x119c>)
 80047b6:	edd3 7a00 	vldr	s15, [r3]
 80047ba:	ed9f 7a87 	vldr	s14, [pc, #540]	@ 80049d8 <main+0x11a8>
 80047be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047c6:	d502      	bpl.n	80047ce <main+0xf9e>
 80047c8:	4b80      	ldr	r3, [pc, #512]	@ (80049cc <main+0x119c>)
 80047ca:	4a84      	ldr	r2, [pc, #528]	@ (80049dc <main+0x11ac>)
 80047cc:	601a      	str	r2, [r3, #0]
			  // 6V = 1755 adc val 1,41V
			  // 8.4V = 2476 adc val 1,99V 0,58V
			 adc_pil_val=(float)( ( ( (adc/4095)*3.3)-1.41) / (1.99-1.41) ) *100 ; // pil conv
 80047ce:	4b7f      	ldr	r3, [pc, #508]	@ (80049cc <main+0x119c>)
 80047d0:	edd3 7a00 	vldr	s15, [r3]
 80047d4:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 80049e0 <main+0x11b0>
 80047d8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80047dc:	ee16 0a90 	vmov	r0, s13
 80047e0:	f7fb feca 	bl	8000578 <__aeabi_f2d>
 80047e4:	a36a      	add	r3, pc, #424	@ (adr r3, 8004990 <main+0x1160>)
 80047e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ea:	f7fb ff1d 	bl	8000628 <__aeabi_dmul>
 80047ee:	4602      	mov	r2, r0
 80047f0:	460b      	mov	r3, r1
 80047f2:	4610      	mov	r0, r2
 80047f4:	4619      	mov	r1, r3
 80047f6:	a368      	add	r3, pc, #416	@ (adr r3, 8004998 <main+0x1168>)
 80047f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047fc:	f7fb fd5c 	bl	80002b8 <__aeabi_dsub>
 8004800:	4602      	mov	r2, r0
 8004802:	460b      	mov	r3, r1
 8004804:	4610      	mov	r0, r2
 8004806:	4619      	mov	r1, r3
 8004808:	a365      	add	r3, pc, #404	@ (adr r3, 80049a0 <main+0x1170>)
 800480a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800480e:	f7fc f835 	bl	800087c <__aeabi_ddiv>
 8004812:	4602      	mov	r2, r0
 8004814:	460b      	mov	r3, r1
 8004816:	4610      	mov	r0, r2
 8004818:	4619      	mov	r1, r3
 800481a:	f7fc f9fd 	bl	8000c18 <__aeabi_d2f>
 800481e:	ee07 0a10 	vmov	s14, r0
 8004822:	eddf 7a70 	vldr	s15, [pc, #448]	@ 80049e4 <main+0x11b4>
 8004826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800482a:	4b6f      	ldr	r3, [pc, #444]	@ (80049e8 <main+0x11b8>)
 800482c:	edc3 7a00 	vstr	s15, [r3]
			 // adc_pil_val = (adc-1755)/(2746-1755)*100;
			  v4_battery=adc_pil_val;
 8004830:	4b6d      	ldr	r3, [pc, #436]	@ (80049e8 <main+0x11b8>)
 8004832:	edd3 7a00 	vldr	s15, [r3]
 8004836:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800483a:	edc7 7a01 	vstr	s15, [r7, #4]
 800483e:	793b      	ldrb	r3, [r7, #4]
 8004840:	b2da      	uxtb	r2, r3
 8004842:	4b6a      	ldr	r3, [pc, #424]	@ (80049ec <main+0x11bc>)
 8004844:	701a      	strb	r2, [r3, #0]
			  adc_flag=0;
 8004846:	4b60      	ldr	r3, [pc, #384]	@ (80049c8 <main+0x1198>)
 8004848:	2200      	movs	r2, #0
 800484a:	701a      	strb	r2, [r3, #0]
//
//		flash_flag=0;
//		i_flag=0;
//	}
//
	if( timer_200ms_flag == 1 && i_flag ==0 /*&& SUSTAINER >=1*/)
 800484c:	4b68      	ldr	r3, [pc, #416]	@ (80049f0 <main+0x11c0>)
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	2b01      	cmp	r3, #1
 8004852:	f47f a987 	bne.w	8003b64 <main+0x334>
 8004856:	4b67      	ldr	r3, [pc, #412]	@ (80049f4 <main+0x11c4>)
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	2b00      	cmp	r3, #0
 800485c:	f47f a982 	bne.w	8003b64 <main+0x334>
	{
		if(i >= 252) {
 8004860:	4b65      	ldr	r3, [pc, #404]	@ (80049f8 <main+0x11c8>)
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	2bfb      	cmp	r3, #251	@ 0xfb
 8004866:	d902      	bls.n	800486e <main+0x103e>
			i_flag=1;
 8004868:	4b62      	ldr	r3, [pc, #392]	@ (80049f4 <main+0x11c4>)
 800486a:	2201      	movs	r2, #1
 800486c:	701a      	strb	r2, [r3, #0]
		}

		conv.fVal=Lsm_Sensor.Accel_X;
 800486e:	4b54      	ldr	r3, [pc, #336]	@ (80049c0 <main+0x1190>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a62      	ldr	r2, [pc, #392]	@ (80049fc <main+0x11cc>)
 8004874:	6013      	str	r3, [r2, #0]

		flash_accX[i] = conv.array[0];
 8004876:	4b60      	ldr	r3, [pc, #384]	@ (80049f8 <main+0x11c8>)
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	461a      	mov	r2, r3
 800487c:	4b5f      	ldr	r3, [pc, #380]	@ (80049fc <main+0x11cc>)
 800487e:	7819      	ldrb	r1, [r3, #0]
 8004880:	4b5f      	ldr	r3, [pc, #380]	@ (8004a00 <main+0x11d0>)
 8004882:	5499      	strb	r1, [r3, r2]
		flash_accX[i+1] = conv.array[1];
 8004884:	4b5c      	ldr	r3, [pc, #368]	@ (80049f8 <main+0x11c8>)
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	3301      	adds	r3, #1
 800488a:	4a5c      	ldr	r2, [pc, #368]	@ (80049fc <main+0x11cc>)
 800488c:	7851      	ldrb	r1, [r2, #1]
 800488e:	4a5c      	ldr	r2, [pc, #368]	@ (8004a00 <main+0x11d0>)
 8004890:	54d1      	strb	r1, [r2, r3]
		flash_accX[i+2] = conv.array[2];
 8004892:	4b59      	ldr	r3, [pc, #356]	@ (80049f8 <main+0x11c8>)
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	3302      	adds	r3, #2
 8004898:	4a58      	ldr	r2, [pc, #352]	@ (80049fc <main+0x11cc>)
 800489a:	7891      	ldrb	r1, [r2, #2]
 800489c:	4a58      	ldr	r2, [pc, #352]	@ (8004a00 <main+0x11d0>)
 800489e:	54d1      	strb	r1, [r2, r3]
		flash_accX[i+3] = conv.array[3];
 80048a0:	4b55      	ldr	r3, [pc, #340]	@ (80049f8 <main+0x11c8>)
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	3303      	adds	r3, #3
 80048a6:	4a55      	ldr	r2, [pc, #340]	@ (80049fc <main+0x11cc>)
 80048a8:	78d1      	ldrb	r1, [r2, #3]
 80048aa:	4a55      	ldr	r2, [pc, #340]	@ (8004a00 <main+0x11d0>)
 80048ac:	54d1      	strb	r1, [r2, r3]

		conv.fVal=Lsm_Sensor.Accel_Y;
 80048ae:	4b44      	ldr	r3, [pc, #272]	@ (80049c0 <main+0x1190>)
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	4a52      	ldr	r2, [pc, #328]	@ (80049fc <main+0x11cc>)
 80048b4:	6013      	str	r3, [r2, #0]
		flash_accY[i] = conv.array[0];
 80048b6:	4b50      	ldr	r3, [pc, #320]	@ (80049f8 <main+0x11c8>)
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	461a      	mov	r2, r3
 80048bc:	4b4f      	ldr	r3, [pc, #316]	@ (80049fc <main+0x11cc>)
 80048be:	7819      	ldrb	r1, [r3, #0]
 80048c0:	4b50      	ldr	r3, [pc, #320]	@ (8004a04 <main+0x11d4>)
 80048c2:	5499      	strb	r1, [r3, r2]
		flash_accY[i+1] = conv.array[1];
 80048c4:	4b4c      	ldr	r3, [pc, #304]	@ (80049f8 <main+0x11c8>)
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	3301      	adds	r3, #1
 80048ca:	4a4c      	ldr	r2, [pc, #304]	@ (80049fc <main+0x11cc>)
 80048cc:	7851      	ldrb	r1, [r2, #1]
 80048ce:	4a4d      	ldr	r2, [pc, #308]	@ (8004a04 <main+0x11d4>)
 80048d0:	54d1      	strb	r1, [r2, r3]
		flash_accY[i+2] = conv.array[2];
 80048d2:	4b49      	ldr	r3, [pc, #292]	@ (80049f8 <main+0x11c8>)
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	3302      	adds	r3, #2
 80048d8:	4a48      	ldr	r2, [pc, #288]	@ (80049fc <main+0x11cc>)
 80048da:	7891      	ldrb	r1, [r2, #2]
 80048dc:	4a49      	ldr	r2, [pc, #292]	@ (8004a04 <main+0x11d4>)
 80048de:	54d1      	strb	r1, [r2, r3]
		flash_accY[i+3] = conv.array[3];
 80048e0:	4b45      	ldr	r3, [pc, #276]	@ (80049f8 <main+0x11c8>)
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	3303      	adds	r3, #3
 80048e6:	4a45      	ldr	r2, [pc, #276]	@ (80049fc <main+0x11cc>)
 80048e8:	78d1      	ldrb	r1, [r2, #3]
 80048ea:	4a46      	ldr	r2, [pc, #280]	@ (8004a04 <main+0x11d4>)
 80048ec:	54d1      	strb	r1, [r2, r3]

		conv.fVal=Lsm_Sensor.Accel_Z;
 80048ee:	4b34      	ldr	r3, [pc, #208]	@ (80049c0 <main+0x1190>)
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	4a42      	ldr	r2, [pc, #264]	@ (80049fc <main+0x11cc>)
 80048f4:	6013      	str	r3, [r2, #0]
		flash_accZ[i] = conv.array[0];
 80048f6:	4b40      	ldr	r3, [pc, #256]	@ (80049f8 <main+0x11c8>)
 80048f8:	781b      	ldrb	r3, [r3, #0]
 80048fa:	461a      	mov	r2, r3
 80048fc:	4b3f      	ldr	r3, [pc, #252]	@ (80049fc <main+0x11cc>)
 80048fe:	7819      	ldrb	r1, [r3, #0]
 8004900:	4b41      	ldr	r3, [pc, #260]	@ (8004a08 <main+0x11d8>)
 8004902:	5499      	strb	r1, [r3, r2]
		flash_accZ[i+1] = conv.array[1];
 8004904:	4b3c      	ldr	r3, [pc, #240]	@ (80049f8 <main+0x11c8>)
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	3301      	adds	r3, #1
 800490a:	4a3c      	ldr	r2, [pc, #240]	@ (80049fc <main+0x11cc>)
 800490c:	7851      	ldrb	r1, [r2, #1]
 800490e:	4a3e      	ldr	r2, [pc, #248]	@ (8004a08 <main+0x11d8>)
 8004910:	54d1      	strb	r1, [r2, r3]
		flash_accZ[i+2] = conv.array[2];
 8004912:	4b39      	ldr	r3, [pc, #228]	@ (80049f8 <main+0x11c8>)
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	3302      	adds	r3, #2
 8004918:	4a38      	ldr	r2, [pc, #224]	@ (80049fc <main+0x11cc>)
 800491a:	7891      	ldrb	r1, [r2, #2]
 800491c:	4a3a      	ldr	r2, [pc, #232]	@ (8004a08 <main+0x11d8>)
 800491e:	54d1      	strb	r1, [r2, r3]
		flash_accZ[i+3] = conv.array[3];
 8004920:	4b35      	ldr	r3, [pc, #212]	@ (80049f8 <main+0x11c8>)
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	3303      	adds	r3, #3
 8004926:	4a35      	ldr	r2, [pc, #212]	@ (80049fc <main+0x11cc>)
 8004928:	78d1      	ldrb	r1, [r2, #3]
 800492a:	4a37      	ldr	r2, [pc, #220]	@ (8004a08 <main+0x11d8>)
 800492c:	54d1      	strb	r1, [r2, r3]

		conv.fVal=Lsm_Sensor.Gyro_X;
 800492e:	4b24      	ldr	r3, [pc, #144]	@ (80049c0 <main+0x1190>)
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	4a32      	ldr	r2, [pc, #200]	@ (80049fc <main+0x11cc>)
 8004934:	6013      	str	r3, [r2, #0]
		flash_gyroX[i] = conv.array[0];
 8004936:	4b30      	ldr	r3, [pc, #192]	@ (80049f8 <main+0x11c8>)
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	461a      	mov	r2, r3
 800493c:	4b2f      	ldr	r3, [pc, #188]	@ (80049fc <main+0x11cc>)
 800493e:	7819      	ldrb	r1, [r3, #0]
 8004940:	4b32      	ldr	r3, [pc, #200]	@ (8004a0c <main+0x11dc>)
 8004942:	5499      	strb	r1, [r3, r2]
		flash_gyroX[i+1] = conv.array[1];
 8004944:	4b2c      	ldr	r3, [pc, #176]	@ (80049f8 <main+0x11c8>)
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	3301      	adds	r3, #1
 800494a:	4a2c      	ldr	r2, [pc, #176]	@ (80049fc <main+0x11cc>)
 800494c:	7851      	ldrb	r1, [r2, #1]
 800494e:	4a2f      	ldr	r2, [pc, #188]	@ (8004a0c <main+0x11dc>)
 8004950:	54d1      	strb	r1, [r2, r3]
		flash_gyroX[i+2] = conv.array[2];
 8004952:	4b29      	ldr	r3, [pc, #164]	@ (80049f8 <main+0x11c8>)
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	3302      	adds	r3, #2
 8004958:	4a28      	ldr	r2, [pc, #160]	@ (80049fc <main+0x11cc>)
 800495a:	7891      	ldrb	r1, [r2, #2]
 800495c:	4a2b      	ldr	r2, [pc, #172]	@ (8004a0c <main+0x11dc>)
 800495e:	54d1      	strb	r1, [r2, r3]
		flash_gyroX[i+3] = conv.array[3];
 8004960:	4b25      	ldr	r3, [pc, #148]	@ (80049f8 <main+0x11c8>)
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	3303      	adds	r3, #3
 8004966:	4a25      	ldr	r2, [pc, #148]	@ (80049fc <main+0x11cc>)
 8004968:	78d1      	ldrb	r1, [r2, #3]
 800496a:	4a28      	ldr	r2, [pc, #160]	@ (8004a0c <main+0x11dc>)
 800496c:	54d1      	strb	r1, [r2, r3]

		conv.fVal=Lsm_Sensor.Gyro_Y;
 800496e:	4b14      	ldr	r3, [pc, #80]	@ (80049c0 <main+0x1190>)
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	4a22      	ldr	r2, [pc, #136]	@ (80049fc <main+0x11cc>)
 8004974:	6013      	str	r3, [r2, #0]
		flash_gyroY[i] = conv.array[0];
 8004976:	4b20      	ldr	r3, [pc, #128]	@ (80049f8 <main+0x11c8>)
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	461a      	mov	r2, r3
 800497c:	4b1f      	ldr	r3, [pc, #124]	@ (80049fc <main+0x11cc>)
 800497e:	7819      	ldrb	r1, [r3, #0]
 8004980:	4b23      	ldr	r3, [pc, #140]	@ (8004a10 <main+0x11e0>)
 8004982:	5499      	strb	r1, [r3, r2]
		flash_gyroY[i+1] = conv.array[1];
 8004984:	4b1c      	ldr	r3, [pc, #112]	@ (80049f8 <main+0x11c8>)
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	3301      	adds	r3, #1
 800498a:	4a1c      	ldr	r2, [pc, #112]	@ (80049fc <main+0x11cc>)
 800498c:	7851      	ldrb	r1, [r2, #1]
 800498e:	e041      	b.n	8004a14 <main+0x11e4>
 8004990:	66666666 	.word	0x66666666
 8004994:	400a6666 	.word	0x400a6666
 8004998:	28f5c28f 	.word	0x28f5c28f
 800499c:	3ff68f5c 	.word	0x3ff68f5c
 80049a0:	28f5c290 	.word	0x28f5c290
 80049a4:	3fe28f5c 	.word	0x3fe28f5c
 80049a8:	200022a4 	.word	0x200022a4
 80049ac:	200023d0 	.word	0x200023d0
 80049b0:	2000063b 	.word	0x2000063b
 80049b4:	20000644 	.word	0x20000644
 80049b8:	200022b8 	.word	0x200022b8
 80049bc:	200022bc 	.word	0x200022bc
 80049c0:	20002488 	.word	0x20002488
 80049c4:	200022ec 	.word	0x200022ec
 80049c8:	200005b5 	.word	0x200005b5
 80049cc:	200005b0 	.word	0x200005b0
 80049d0:	451ac000 	.word	0x451ac000
 80049d4:	450ba000 	.word	0x450ba000
 80049d8:	44db6000 	.word	0x44db6000
 80049dc:	44db6000 	.word	0x44db6000
 80049e0:	457ff000 	.word	0x457ff000
 80049e4:	42c80000 	.word	0x42c80000
 80049e8:	200005ac 	.word	0x200005ac
 80049ec:	20000648 	.word	0x20000648
 80049f0:	2000063d 	.word	0x2000063d
 80049f4:	2000064d 	.word	0x2000064d
 80049f8:	2000064c 	.word	0x2000064c
 80049fc:	20002668 	.word	0x20002668
 8004a00:	20000a50 	.word	0x20000a50
 8004a04:	20001250 	.word	0x20001250
 8004a08:	20000e50 	.word	0x20000e50
 8004a0c:	20001650 	.word	0x20001650
 8004a10:	20001a50 	.word	0x20001a50
 8004a14:	4a2d      	ldr	r2, [pc, #180]	@ (8004acc <main+0x129c>)
 8004a16:	54d1      	strb	r1, [r2, r3]
		flash_gyroY[i+2] = conv.array[2];
 8004a18:	4b2d      	ldr	r3, [pc, #180]	@ (8004ad0 <main+0x12a0>)
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	3302      	adds	r3, #2
 8004a1e:	4a2d      	ldr	r2, [pc, #180]	@ (8004ad4 <main+0x12a4>)
 8004a20:	7891      	ldrb	r1, [r2, #2]
 8004a22:	4a2a      	ldr	r2, [pc, #168]	@ (8004acc <main+0x129c>)
 8004a24:	54d1      	strb	r1, [r2, r3]
		flash_gyroY[i+3] = conv.array[3];
 8004a26:	4b2a      	ldr	r3, [pc, #168]	@ (8004ad0 <main+0x12a0>)
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	3303      	adds	r3, #3
 8004a2c:	4a29      	ldr	r2, [pc, #164]	@ (8004ad4 <main+0x12a4>)
 8004a2e:	78d1      	ldrb	r1, [r2, #3]
 8004a30:	4a26      	ldr	r2, [pc, #152]	@ (8004acc <main+0x129c>)
 8004a32:	54d1      	strb	r1, [r2, r3]

		conv.fVal=Lsm_Sensor.Gyro_Z;
 8004a34:	4b28      	ldr	r3, [pc, #160]	@ (8004ad8 <main+0x12a8>)
 8004a36:	695b      	ldr	r3, [r3, #20]
 8004a38:	4a26      	ldr	r2, [pc, #152]	@ (8004ad4 <main+0x12a4>)
 8004a3a:	6013      	str	r3, [r2, #0]
		flash_gyroZ[i] = conv.array[0];
 8004a3c:	4b24      	ldr	r3, [pc, #144]	@ (8004ad0 <main+0x12a0>)
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	461a      	mov	r2, r3
 8004a42:	4b24      	ldr	r3, [pc, #144]	@ (8004ad4 <main+0x12a4>)
 8004a44:	7819      	ldrb	r1, [r3, #0]
 8004a46:	4b25      	ldr	r3, [pc, #148]	@ (8004adc <main+0x12ac>)
 8004a48:	5499      	strb	r1, [r3, r2]
		flash_gyroZ[i+1] = conv.array[1];
 8004a4a:	4b21      	ldr	r3, [pc, #132]	@ (8004ad0 <main+0x12a0>)
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	3301      	adds	r3, #1
 8004a50:	4a20      	ldr	r2, [pc, #128]	@ (8004ad4 <main+0x12a4>)
 8004a52:	7851      	ldrb	r1, [r2, #1]
 8004a54:	4a21      	ldr	r2, [pc, #132]	@ (8004adc <main+0x12ac>)
 8004a56:	54d1      	strb	r1, [r2, r3]
		flash_gyroZ[i+2] = conv.array[2];
 8004a58:	4b1d      	ldr	r3, [pc, #116]	@ (8004ad0 <main+0x12a0>)
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	3302      	adds	r3, #2
 8004a5e:	4a1d      	ldr	r2, [pc, #116]	@ (8004ad4 <main+0x12a4>)
 8004a60:	7891      	ldrb	r1, [r2, #2]
 8004a62:	4a1e      	ldr	r2, [pc, #120]	@ (8004adc <main+0x12ac>)
 8004a64:	54d1      	strb	r1, [r2, r3]
		flash_gyroZ[i+3] = conv.array[3];
 8004a66:	4b1a      	ldr	r3, [pc, #104]	@ (8004ad0 <main+0x12a0>)
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	3303      	adds	r3, #3
 8004a6c:	4a19      	ldr	r2, [pc, #100]	@ (8004ad4 <main+0x12a4>)
 8004a6e:	78d1      	ldrb	r1, [r2, #3]
 8004a70:	4a1a      	ldr	r2, [pc, #104]	@ (8004adc <main+0x12ac>)
 8004a72:	54d1      	strb	r1, [r2, r3]

		conv.fVal=altitude_kalman;
 8004a74:	4b1a      	ldr	r3, [pc, #104]	@ (8004ae0 <main+0x12b0>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a16      	ldr	r2, [pc, #88]	@ (8004ad4 <main+0x12a4>)
 8004a7a:	6013      	str	r3, [r2, #0]
		flash_altitude[i] = conv.array[0];
 8004a7c:	4b14      	ldr	r3, [pc, #80]	@ (8004ad0 <main+0x12a0>)
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	461a      	mov	r2, r3
 8004a82:	4b14      	ldr	r3, [pc, #80]	@ (8004ad4 <main+0x12a4>)
 8004a84:	7819      	ldrb	r1, [r3, #0]
 8004a86:	4b17      	ldr	r3, [pc, #92]	@ (8004ae4 <main+0x12b4>)
 8004a88:	5499      	strb	r1, [r3, r2]
		flash_altitude[i+1] = conv.array[1];
 8004a8a:	4b11      	ldr	r3, [pc, #68]	@ (8004ad0 <main+0x12a0>)
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	3301      	adds	r3, #1
 8004a90:	4a10      	ldr	r2, [pc, #64]	@ (8004ad4 <main+0x12a4>)
 8004a92:	7851      	ldrb	r1, [r2, #1]
 8004a94:	4a13      	ldr	r2, [pc, #76]	@ (8004ae4 <main+0x12b4>)
 8004a96:	54d1      	strb	r1, [r2, r3]
		flash_altitude[i+2] = conv.array[2];
 8004a98:	4b0d      	ldr	r3, [pc, #52]	@ (8004ad0 <main+0x12a0>)
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	3302      	adds	r3, #2
 8004a9e:	4a0d      	ldr	r2, [pc, #52]	@ (8004ad4 <main+0x12a4>)
 8004aa0:	7891      	ldrb	r1, [r2, #2]
 8004aa2:	4a10      	ldr	r2, [pc, #64]	@ (8004ae4 <main+0x12b4>)
 8004aa4:	54d1      	strb	r1, [r2, r3]
		flash_altitude[i+3] = conv.array[3];
 8004aa6:	4b0a      	ldr	r3, [pc, #40]	@ (8004ad0 <main+0x12a0>)
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	3303      	adds	r3, #3
 8004aac:	4a09      	ldr	r2, [pc, #36]	@ (8004ad4 <main+0x12a4>)
 8004aae:	78d1      	ldrb	r1, [r2, #3]
 8004ab0:	4a0c      	ldr	r2, [pc, #48]	@ (8004ae4 <main+0x12b4>)
 8004ab2:	54d1      	strb	r1, [r2, r3]



		timer_200ms_flag =0;
 8004ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8004ae8 <main+0x12b8>)
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	701a      	strb	r2, [r3, #0]

		i=i+4;
 8004aba:	4b05      	ldr	r3, [pc, #20]	@ (8004ad0 <main+0x12a0>)
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	3304      	adds	r3, #4
 8004ac0:	b2da      	uxtb	r2, r3
 8004ac2:	4b03      	ldr	r3, [pc, #12]	@ (8004ad0 <main+0x12a0>)
 8004ac4:	701a      	strb	r2, [r3, #0]
	  if(sensor_flag == 1)
 8004ac6:	f7ff b84d 	b.w	8003b64 <main+0x334>
 8004aca:	bf00      	nop
 8004acc:	20001a50 	.word	0x20001a50
 8004ad0:	2000064c 	.word	0x2000064c
 8004ad4:	20002668 	.word	0x20002668
 8004ad8:	20002488 	.word	0x20002488
 8004adc:	20001e50 	.word	0x20001e50
 8004ae0:	200022c0 	.word	0x200022c0
 8004ae4:	20000650 	.word	0x20000650
 8004ae8:	2000063d 	.word	0x2000063d

08004aec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b094      	sub	sp, #80	@ 0x50
 8004af0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004af2:	f107 031c 	add.w	r3, r7, #28
 8004af6:	2234      	movs	r2, #52	@ 0x34
 8004af8:	2100      	movs	r1, #0
 8004afa:	4618      	mov	r0, r3
 8004afc:	f007 fc85 	bl	800c40a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004b00:	f107 0308 	add.w	r3, r7, #8
 8004b04:	2200      	movs	r2, #0
 8004b06:	601a      	str	r2, [r3, #0]
 8004b08:	605a      	str	r2, [r3, #4]
 8004b0a:	609a      	str	r2, [r3, #8]
 8004b0c:	60da      	str	r2, [r3, #12]
 8004b0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b10:	2300      	movs	r3, #0
 8004b12:	607b      	str	r3, [r7, #4]
 8004b14:	4b29      	ldr	r3, [pc, #164]	@ (8004bbc <SystemClock_Config+0xd0>)
 8004b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b18:	4a28      	ldr	r2, [pc, #160]	@ (8004bbc <SystemClock_Config+0xd0>)
 8004b1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b20:	4b26      	ldr	r3, [pc, #152]	@ (8004bbc <SystemClock_Config+0xd0>)
 8004b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b28:	607b      	str	r3, [r7, #4]
 8004b2a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	603b      	str	r3, [r7, #0]
 8004b30:	4b23      	ldr	r3, [pc, #140]	@ (8004bc0 <SystemClock_Config+0xd4>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a22      	ldr	r2, [pc, #136]	@ (8004bc0 <SystemClock_Config+0xd4>)
 8004b36:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004b3a:	6013      	str	r3, [r2, #0]
 8004b3c:	4b20      	ldr	r3, [pc, #128]	@ (8004bc0 <SystemClock_Config+0xd4>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004b44:	603b      	str	r3, [r7, #0]
 8004b46:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004b4c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004b50:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004b52:	2302      	movs	r3, #2
 8004b54:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004b56:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004b5a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004b5c:	2304      	movs	r3, #4
 8004b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004b60:	23a8      	movs	r3, #168	@ 0xa8
 8004b62:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004b64:	2302      	movs	r3, #2
 8004b66:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8004b68:	2307      	movs	r3, #7
 8004b6a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004b6c:	2302      	movs	r3, #2
 8004b6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004b70:	f107 031c 	add.w	r3, r7, #28
 8004b74:	4618      	mov	r0, r3
 8004b76:	f004 faf9 	bl	800916c <HAL_RCC_OscConfig>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d001      	beq.n	8004b84 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8004b80:	f000 fe7e 	bl	8005880 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004b84:	230f      	movs	r3, #15
 8004b86:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004b90:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004b94:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004b96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004b9a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004b9c:	f107 0308 	add.w	r3, r7, #8
 8004ba0:	2105      	movs	r1, #5
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f003 ff98 	bl	8008ad8 <HAL_RCC_ClockConfig>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d001      	beq.n	8004bb2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8004bae:	f000 fe67 	bl	8005880 <Error_Handler>
  }
}
 8004bb2:	bf00      	nop
 8004bb4:	3750      	adds	r7, #80	@ 0x50
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	40023800 	.word	0x40023800
 8004bc0:	40007000 	.word	0x40007000

08004bc4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004bca:	463b      	mov	r3, r7
 8004bcc:	2200      	movs	r2, #0
 8004bce:	601a      	str	r2, [r3, #0]
 8004bd0:	605a      	str	r2, [r3, #4]
 8004bd2:	609a      	str	r2, [r3, #8]
 8004bd4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8004bd6:	4b21      	ldr	r3, [pc, #132]	@ (8004c5c <MX_ADC1_Init+0x98>)
 8004bd8:	4a21      	ldr	r2, [pc, #132]	@ (8004c60 <MX_ADC1_Init+0x9c>)
 8004bda:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004bdc:	4b1f      	ldr	r3, [pc, #124]	@ (8004c5c <MX_ADC1_Init+0x98>)
 8004bde:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004be2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004be4:	4b1d      	ldr	r3, [pc, #116]	@ (8004c5c <MX_ADC1_Init+0x98>)
 8004be6:	2200      	movs	r2, #0
 8004be8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8004bea:	4b1c      	ldr	r3, [pc, #112]	@ (8004c5c <MX_ADC1_Init+0x98>)
 8004bec:	2200      	movs	r2, #0
 8004bee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004bf0:	4b1a      	ldr	r3, [pc, #104]	@ (8004c5c <MX_ADC1_Init+0x98>)
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004bf6:	4b19      	ldr	r3, [pc, #100]	@ (8004c5c <MX_ADC1_Init+0x98>)
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004bfe:	4b17      	ldr	r3, [pc, #92]	@ (8004c5c <MX_ADC1_Init+0x98>)
 8004c00:	2200      	movs	r2, #0
 8004c02:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004c04:	4b15      	ldr	r3, [pc, #84]	@ (8004c5c <MX_ADC1_Init+0x98>)
 8004c06:	4a17      	ldr	r2, [pc, #92]	@ (8004c64 <MX_ADC1_Init+0xa0>)
 8004c08:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004c0a:	4b14      	ldr	r3, [pc, #80]	@ (8004c5c <MX_ADC1_Init+0x98>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8004c10:	4b12      	ldr	r3, [pc, #72]	@ (8004c5c <MX_ADC1_Init+0x98>)
 8004c12:	2201      	movs	r2, #1
 8004c14:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004c16:	4b11      	ldr	r3, [pc, #68]	@ (8004c5c <MX_ADC1_Init+0x98>)
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004c1e:	4b0f      	ldr	r3, [pc, #60]	@ (8004c5c <MX_ADC1_Init+0x98>)
 8004c20:	2201      	movs	r2, #1
 8004c22:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004c24:	480d      	ldr	r0, [pc, #52]	@ (8004c5c <MX_ADC1_Init+0x98>)
 8004c26:	f001 fb13 	bl	8006250 <HAL_ADC_Init>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d001      	beq.n	8004c34 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8004c30:	f000 fe26 	bl	8005880 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8004c34:	230c      	movs	r3, #12
 8004c36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004c40:	463b      	mov	r3, r7
 8004c42:	4619      	mov	r1, r3
 8004c44:	4805      	ldr	r0, [pc, #20]	@ (8004c5c <MX_ADC1_Init+0x98>)
 8004c46:	f001 fd57 	bl	80066f8 <HAL_ADC_ConfigChannel>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d001      	beq.n	8004c54 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8004c50:	f000 fe16 	bl	8005880 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004c54:	bf00      	nop
 8004c56:	3710      	adds	r7, #16
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	2000021c 	.word	0x2000021c
 8004c60:	40012000 	.word	0x40012000
 8004c64:	0f000001 	.word	0x0f000001

08004c68 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004c6c:	4b12      	ldr	r3, [pc, #72]	@ (8004cb8 <MX_I2C1_Init+0x50>)
 8004c6e:	4a13      	ldr	r2, [pc, #76]	@ (8004cbc <MX_I2C1_Init+0x54>)
 8004c70:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8004c72:	4b11      	ldr	r3, [pc, #68]	@ (8004cb8 <MX_I2C1_Init+0x50>)
 8004c74:	4a12      	ldr	r2, [pc, #72]	@ (8004cc0 <MX_I2C1_Init+0x58>)
 8004c76:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004c78:	4b0f      	ldr	r3, [pc, #60]	@ (8004cb8 <MX_I2C1_Init+0x50>)
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8004cb8 <MX_I2C1_Init+0x50>)
 8004c80:	2200      	movs	r2, #0
 8004c82:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004c84:	4b0c      	ldr	r3, [pc, #48]	@ (8004cb8 <MX_I2C1_Init+0x50>)
 8004c86:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004c8a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004c8c:	4b0a      	ldr	r3, [pc, #40]	@ (8004cb8 <MX_I2C1_Init+0x50>)
 8004c8e:	2200      	movs	r2, #0
 8004c90:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004c92:	4b09      	ldr	r3, [pc, #36]	@ (8004cb8 <MX_I2C1_Init+0x50>)
 8004c94:	2200      	movs	r2, #0
 8004c96:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004c98:	4b07      	ldr	r3, [pc, #28]	@ (8004cb8 <MX_I2C1_Init+0x50>)
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004c9e:	4b06      	ldr	r3, [pc, #24]	@ (8004cb8 <MX_I2C1_Init+0x50>)
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004ca4:	4804      	ldr	r0, [pc, #16]	@ (8004cb8 <MX_I2C1_Init+0x50>)
 8004ca6:	f002 fae3 	bl	8007270 <HAL_I2C_Init>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d001      	beq.n	8004cb4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004cb0:	f000 fde6 	bl	8005880 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004cb4:	bf00      	nop
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	20000264 	.word	0x20000264
 8004cbc:	40005400 	.word	0x40005400
 8004cc0:	00061a80 	.word	0x00061a80

08004cc4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004cc8:	4b17      	ldr	r3, [pc, #92]	@ (8004d28 <MX_SPI1_Init+0x64>)
 8004cca:	4a18      	ldr	r2, [pc, #96]	@ (8004d2c <MX_SPI1_Init+0x68>)
 8004ccc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004cce:	4b16      	ldr	r3, [pc, #88]	@ (8004d28 <MX_SPI1_Init+0x64>)
 8004cd0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004cd4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004cd6:	4b14      	ldr	r3, [pc, #80]	@ (8004d28 <MX_SPI1_Init+0x64>)
 8004cd8:	2200      	movs	r2, #0
 8004cda:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004cdc:	4b12      	ldr	r3, [pc, #72]	@ (8004d28 <MX_SPI1_Init+0x64>)
 8004cde:	2200      	movs	r2, #0
 8004ce0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ce2:	4b11      	ldr	r3, [pc, #68]	@ (8004d28 <MX_SPI1_Init+0x64>)
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8004d28 <MX_SPI1_Init+0x64>)
 8004cea:	2200      	movs	r2, #0
 8004cec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004cee:	4b0e      	ldr	r3, [pc, #56]	@ (8004d28 <MX_SPI1_Init+0x64>)
 8004cf0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004cf4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8004cf6:	4b0c      	ldr	r3, [pc, #48]	@ (8004d28 <MX_SPI1_Init+0x64>)
 8004cf8:	2220      	movs	r2, #32
 8004cfa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8004d28 <MX_SPI1_Init+0x64>)
 8004cfe:	2200      	movs	r2, #0
 8004d00:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004d02:	4b09      	ldr	r3, [pc, #36]	@ (8004d28 <MX_SPI1_Init+0x64>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d08:	4b07      	ldr	r3, [pc, #28]	@ (8004d28 <MX_SPI1_Init+0x64>)
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004d0e:	4b06      	ldr	r3, [pc, #24]	@ (8004d28 <MX_SPI1_Init+0x64>)
 8004d10:	220a      	movs	r2, #10
 8004d12:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004d14:	4804      	ldr	r0, [pc, #16]	@ (8004d28 <MX_SPI1_Init+0x64>)
 8004d16:	f004 fcc7 	bl	80096a8 <HAL_SPI_Init>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d001      	beq.n	8004d24 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004d20:	f000 fdae 	bl	8005880 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004d24:	bf00      	nop
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	200002b8 	.word	0x200002b8
 8004d2c:	40013000 	.word	0x40013000

08004d30 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b086      	sub	sp, #24
 8004d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004d36:	f107 0308 	add.w	r3, r7, #8
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	601a      	str	r2, [r3, #0]
 8004d3e:	605a      	str	r2, [r3, #4]
 8004d40:	609a      	str	r2, [r3, #8]
 8004d42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d44:	463b      	mov	r3, r7
 8004d46:	2200      	movs	r2, #0
 8004d48:	601a      	str	r2, [r3, #0]
 8004d4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004d4c:	4b1e      	ldr	r3, [pc, #120]	@ (8004dc8 <MX_TIM2_Init+0x98>)
 8004d4e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004d52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 8004d54:	4b1c      	ldr	r3, [pc, #112]	@ (8004dc8 <MX_TIM2_Init+0x98>)
 8004d56:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8004d5a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d5c:	4b1a      	ldr	r3, [pc, #104]	@ (8004dc8 <MX_TIM2_Init+0x98>)
 8004d5e:	2200      	movs	r2, #0
 8004d60:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 12000-1;
 8004d62:	4b19      	ldr	r3, [pc, #100]	@ (8004dc8 <MX_TIM2_Init+0x98>)
 8004d64:	f642 62df 	movw	r2, #11999	@ 0x2edf
 8004d68:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d6a:	4b17      	ldr	r3, [pc, #92]	@ (8004dc8 <MX_TIM2_Init+0x98>)
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d70:	4b15      	ldr	r3, [pc, #84]	@ (8004dc8 <MX_TIM2_Init+0x98>)
 8004d72:	2200      	movs	r2, #0
 8004d74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004d76:	4814      	ldr	r0, [pc, #80]	@ (8004dc8 <MX_TIM2_Init+0x98>)
 8004d78:	f004 fd1f 	bl	80097ba <HAL_TIM_Base_Init>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d001      	beq.n	8004d86 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8004d82:	f000 fd7d 	bl	8005880 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004d86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004d8a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004d8c:	f107 0308 	add.w	r3, r7, #8
 8004d90:	4619      	mov	r1, r3
 8004d92:	480d      	ldr	r0, [pc, #52]	@ (8004dc8 <MX_TIM2_Init+0x98>)
 8004d94:	f004 ff6f 	bl	8009c76 <HAL_TIM_ConfigClockSource>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d001      	beq.n	8004da2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8004d9e:	f000 fd6f 	bl	8005880 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004da2:	2300      	movs	r3, #0
 8004da4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004da6:	2300      	movs	r3, #0
 8004da8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004daa:	463b      	mov	r3, r7
 8004dac:	4619      	mov	r1, r3
 8004dae:	4806      	ldr	r0, [pc, #24]	@ (8004dc8 <MX_TIM2_Init+0x98>)
 8004db0:	f005 f98a 	bl	800a0c8 <HAL_TIMEx_MasterConfigSynchronization>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d001      	beq.n	8004dbe <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8004dba:	f000 fd61 	bl	8005880 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004dbe:	bf00      	nop
 8004dc0:	3718      	adds	r7, #24
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	20000310 	.word	0x20000310

08004dcc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b082      	sub	sp, #8
 8004dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004dd2:	463b      	mov	r3, r7
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	601a      	str	r2, [r3, #0]
 8004dd8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004dda:	4b15      	ldr	r3, [pc, #84]	@ (8004e30 <MX_TIM6_Init+0x64>)
 8004ddc:	4a15      	ldr	r2, [pc, #84]	@ (8004e34 <MX_TIM6_Init+0x68>)
 8004dde:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 840;
 8004de0:	4b13      	ldr	r3, [pc, #76]	@ (8004e30 <MX_TIM6_Init+0x64>)
 8004de2:	f44f 7252 	mov.w	r2, #840	@ 0x348
 8004de6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004de8:	4b11      	ldr	r3, [pc, #68]	@ (8004e30 <MX_TIM6_Init+0x64>)
 8004dea:	2200      	movs	r2, #0
 8004dec:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 19999;
 8004dee:	4b10      	ldr	r3, [pc, #64]	@ (8004e30 <MX_TIM6_Init+0x64>)
 8004df0:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8004df4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004df6:	4b0e      	ldr	r3, [pc, #56]	@ (8004e30 <MX_TIM6_Init+0x64>)
 8004df8:	2200      	movs	r2, #0
 8004dfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004dfc:	480c      	ldr	r0, [pc, #48]	@ (8004e30 <MX_TIM6_Init+0x64>)
 8004dfe:	f004 fcdc 	bl	80097ba <HAL_TIM_Base_Init>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d001      	beq.n	8004e0c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8004e08:	f000 fd3a 	bl	8005880 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e10:	2300      	movs	r3, #0
 8004e12:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004e14:	463b      	mov	r3, r7
 8004e16:	4619      	mov	r1, r3
 8004e18:	4805      	ldr	r0, [pc, #20]	@ (8004e30 <MX_TIM6_Init+0x64>)
 8004e1a:	f005 f955 	bl	800a0c8 <HAL_TIMEx_MasterConfigSynchronization>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d001      	beq.n	8004e28 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8004e24:	f000 fd2c 	bl	8005880 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004e28:	bf00      	nop
 8004e2a:	3708      	adds	r7, #8
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	20000358 	.word	0x20000358
 8004e34:	40001000 	.word	0x40001000

08004e38 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e3e:	463b      	mov	r3, r7
 8004e40:	2200      	movs	r2, #0
 8004e42:	601a      	str	r2, [r3, #0]
 8004e44:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004e46:	4b15      	ldr	r3, [pc, #84]	@ (8004e9c <MX_TIM7_Init+0x64>)
 8004e48:	4a15      	ldr	r2, [pc, #84]	@ (8004ea0 <MX_TIM7_Init+0x68>)
 8004e4a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8400-1;
 8004e4c:	4b13      	ldr	r3, [pc, #76]	@ (8004e9c <MX_TIM7_Init+0x64>)
 8004e4e:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8004e52:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e54:	4b11      	ldr	r3, [pc, #68]	@ (8004e9c <MX_TIM7_Init+0x64>)
 8004e56:	2200      	movs	r2, #0
 8004e58:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 59999;
 8004e5a:	4b10      	ldr	r3, [pc, #64]	@ (8004e9c <MX_TIM7_Init+0x64>)
 8004e5c:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8004e60:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e62:	4b0e      	ldr	r3, [pc, #56]	@ (8004e9c <MX_TIM7_Init+0x64>)
 8004e64:	2200      	movs	r2, #0
 8004e66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004e68:	480c      	ldr	r0, [pc, #48]	@ (8004e9c <MX_TIM7_Init+0x64>)
 8004e6a:	f004 fca6 	bl	80097ba <HAL_TIM_Base_Init>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d001      	beq.n	8004e78 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8004e74:	f000 fd04 	bl	8005880 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004e80:	463b      	mov	r3, r7
 8004e82:	4619      	mov	r1, r3
 8004e84:	4805      	ldr	r0, [pc, #20]	@ (8004e9c <MX_TIM7_Init+0x64>)
 8004e86:	f005 f91f 	bl	800a0c8 <HAL_TIMEx_MasterConfigSynchronization>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d001      	beq.n	8004e94 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8004e90:	f000 fcf6 	bl	8005880 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004e94:	bf00      	nop
 8004e96:	3708      	adds	r7, #8
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	200003a0 	.word	0x200003a0
 8004ea0:	40001400 	.word	0x40001400

08004ea4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8004ea8:	4b0e      	ldr	r3, [pc, #56]	@ (8004ee4 <MX_TIM10_Init+0x40>)
 8004eaa:	4a0f      	ldr	r2, [pc, #60]	@ (8004ee8 <MX_TIM10_Init+0x44>)
 8004eac:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1680;
 8004eae:	4b0d      	ldr	r3, [pc, #52]	@ (8004ee4 <MX_TIM10_Init+0x40>)
 8004eb0:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 8004eb4:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004eb6:	4b0b      	ldr	r3, [pc, #44]	@ (8004ee4 <MX_TIM10_Init+0x40>)
 8004eb8:	2200      	movs	r2, #0
 8004eba:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 3000-1;
 8004ebc:	4b09      	ldr	r3, [pc, #36]	@ (8004ee4 <MX_TIM10_Init+0x40>)
 8004ebe:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8004ec2:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ec4:	4b07      	ldr	r3, [pc, #28]	@ (8004ee4 <MX_TIM10_Init+0x40>)
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004eca:	4b06      	ldr	r3, [pc, #24]	@ (8004ee4 <MX_TIM10_Init+0x40>)
 8004ecc:	2200      	movs	r2, #0
 8004ece:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8004ed0:	4804      	ldr	r0, [pc, #16]	@ (8004ee4 <MX_TIM10_Init+0x40>)
 8004ed2:	f004 fc72 	bl	80097ba <HAL_TIM_Base_Init>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d001      	beq.n	8004ee0 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8004edc:	f000 fcd0 	bl	8005880 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8004ee0:	bf00      	nop
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	200003e8 	.word	0x200003e8
 8004ee8:	40014400 	.word	0x40014400

08004eec <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8004ef0:	4b0e      	ldr	r3, [pc, #56]	@ (8004f2c <MX_TIM11_Init+0x40>)
 8004ef2:	4a0f      	ldr	r2, [pc, #60]	@ (8004f30 <MX_TIM11_Init+0x44>)
 8004ef4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 16800;
 8004ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8004f2c <MX_TIM11_Init+0x40>)
 8004ef8:	f244 12a0 	movw	r2, #16800	@ 0x41a0
 8004efc:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004efe:	4b0b      	ldr	r3, [pc, #44]	@ (8004f2c <MX_TIM11_Init+0x40>)
 8004f00:	2200      	movs	r2, #0
 8004f02:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 7000-1;
 8004f04:	4b09      	ldr	r3, [pc, #36]	@ (8004f2c <MX_TIM11_Init+0x40>)
 8004f06:	f641 3257 	movw	r2, #6999	@ 0x1b57
 8004f0a:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f0c:	4b07      	ldr	r3, [pc, #28]	@ (8004f2c <MX_TIM11_Init+0x40>)
 8004f0e:	2200      	movs	r2, #0
 8004f10:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f12:	4b06      	ldr	r3, [pc, #24]	@ (8004f2c <MX_TIM11_Init+0x40>)
 8004f14:	2200      	movs	r2, #0
 8004f16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8004f18:	4804      	ldr	r0, [pc, #16]	@ (8004f2c <MX_TIM11_Init+0x40>)
 8004f1a:	f004 fc4e 	bl	80097ba <HAL_TIM_Base_Init>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d001      	beq.n	8004f28 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8004f24:	f000 fcac 	bl	8005880 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8004f28:	bf00      	nop
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	20000430 	.word	0x20000430
 8004f30:	40014800 	.word	0x40014800

08004f34 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8004f38:	4b11      	ldr	r3, [pc, #68]	@ (8004f80 <MX_UART4_Init+0x4c>)
 8004f3a:	4a12      	ldr	r2, [pc, #72]	@ (8004f84 <MX_UART4_Init+0x50>)
 8004f3c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8004f3e:	4b10      	ldr	r3, [pc, #64]	@ (8004f80 <MX_UART4_Init+0x4c>)
 8004f40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004f44:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004f46:	4b0e      	ldr	r3, [pc, #56]	@ (8004f80 <MX_UART4_Init+0x4c>)
 8004f48:	2200      	movs	r2, #0
 8004f4a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8004f80 <MX_UART4_Init+0x4c>)
 8004f4e:	2200      	movs	r2, #0
 8004f50:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8004f52:	4b0b      	ldr	r3, [pc, #44]	@ (8004f80 <MX_UART4_Init+0x4c>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004f58:	4b09      	ldr	r3, [pc, #36]	@ (8004f80 <MX_UART4_Init+0x4c>)
 8004f5a:	220c      	movs	r2, #12
 8004f5c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f5e:	4b08      	ldr	r3, [pc, #32]	@ (8004f80 <MX_UART4_Init+0x4c>)
 8004f60:	2200      	movs	r2, #0
 8004f62:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f64:	4b06      	ldr	r3, [pc, #24]	@ (8004f80 <MX_UART4_Init+0x4c>)
 8004f66:	2200      	movs	r2, #0
 8004f68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8004f6a:	4805      	ldr	r0, [pc, #20]	@ (8004f80 <MX_UART4_Init+0x4c>)
 8004f6c:	f005 f93c 	bl	800a1e8 <HAL_UART_Init>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d001      	beq.n	8004f7a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8004f76:	f000 fc83 	bl	8005880 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8004f7a:	bf00      	nop
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	20000478 	.word	0x20000478
 8004f84:	40004c00 	.word	0x40004c00

08004f88 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004f8c:	4b11      	ldr	r3, [pc, #68]	@ (8004fd4 <MX_USART2_UART_Init+0x4c>)
 8004f8e:	4a12      	ldr	r2, [pc, #72]	@ (8004fd8 <MX_USART2_UART_Init+0x50>)
 8004f90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8004f92:	4b10      	ldr	r3, [pc, #64]	@ (8004fd4 <MX_USART2_UART_Init+0x4c>)
 8004f94:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8004f98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004f9a:	4b0e      	ldr	r3, [pc, #56]	@ (8004fd4 <MX_USART2_UART_Init+0x4c>)
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8004fd4 <MX_USART2_UART_Init+0x4c>)
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004fa6:	4b0b      	ldr	r3, [pc, #44]	@ (8004fd4 <MX_USART2_UART_Init+0x4c>)
 8004fa8:	2200      	movs	r2, #0
 8004faa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004fac:	4b09      	ldr	r3, [pc, #36]	@ (8004fd4 <MX_USART2_UART_Init+0x4c>)
 8004fae:	220c      	movs	r2, #12
 8004fb0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004fb2:	4b08      	ldr	r3, [pc, #32]	@ (8004fd4 <MX_USART2_UART_Init+0x4c>)
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004fb8:	4b06      	ldr	r3, [pc, #24]	@ (8004fd4 <MX_USART2_UART_Init+0x4c>)
 8004fba:	2200      	movs	r2, #0
 8004fbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004fbe:	4805      	ldr	r0, [pc, #20]	@ (8004fd4 <MX_USART2_UART_Init+0x4c>)
 8004fc0:	f005 f912 	bl	800a1e8 <HAL_UART_Init>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d001      	beq.n	8004fce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004fca:	f000 fc59 	bl	8005880 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004fce:	bf00      	nop
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	200004bc 	.word	0x200004bc
 8004fd8:	40004400 	.word	0x40004400

08004fdc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004fe0:	4b11      	ldr	r3, [pc, #68]	@ (8005028 <MX_USART3_UART_Init+0x4c>)
 8004fe2:	4a12      	ldr	r2, [pc, #72]	@ (800502c <MX_USART3_UART_Init+0x50>)
 8004fe4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8004fe6:	4b10      	ldr	r3, [pc, #64]	@ (8005028 <MX_USART3_UART_Init+0x4c>)
 8004fe8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8004fec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004fee:	4b0e      	ldr	r3, [pc, #56]	@ (8005028 <MX_USART3_UART_Init+0x4c>)
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8005028 <MX_USART3_UART_Init+0x4c>)
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004ffa:	4b0b      	ldr	r3, [pc, #44]	@ (8005028 <MX_USART3_UART_Init+0x4c>)
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005000:	4b09      	ldr	r3, [pc, #36]	@ (8005028 <MX_USART3_UART_Init+0x4c>)
 8005002:	220c      	movs	r2, #12
 8005004:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005006:	4b08      	ldr	r3, [pc, #32]	@ (8005028 <MX_USART3_UART_Init+0x4c>)
 8005008:	2200      	movs	r2, #0
 800500a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800500c:	4b06      	ldr	r3, [pc, #24]	@ (8005028 <MX_USART3_UART_Init+0x4c>)
 800500e:	2200      	movs	r2, #0
 8005010:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005012:	4805      	ldr	r0, [pc, #20]	@ (8005028 <MX_USART3_UART_Init+0x4c>)
 8005014:	f005 f8e8 	bl	800a1e8 <HAL_UART_Init>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d001      	beq.n	8005022 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800501e:	f000 fc2f 	bl	8005880 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005022:	bf00      	nop
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	20000500 	.word	0x20000500
 800502c:	40004800 	.word	0x40004800

08005030 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8005034:	4b11      	ldr	r3, [pc, #68]	@ (800507c <MX_USART6_UART_Init+0x4c>)
 8005036:	4a12      	ldr	r2, [pc, #72]	@ (8005080 <MX_USART6_UART_Init+0x50>)
 8005038:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 19200;
 800503a:	4b10      	ldr	r3, [pc, #64]	@ (800507c <MX_USART6_UART_Init+0x4c>)
 800503c:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8005040:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8005042:	4b0e      	ldr	r3, [pc, #56]	@ (800507c <MX_USART6_UART_Init+0x4c>)
 8005044:	2200      	movs	r2, #0
 8005046:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8005048:	4b0c      	ldr	r3, [pc, #48]	@ (800507c <MX_USART6_UART_Init+0x4c>)
 800504a:	2200      	movs	r2, #0
 800504c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800504e:	4b0b      	ldr	r3, [pc, #44]	@ (800507c <MX_USART6_UART_Init+0x4c>)
 8005050:	2200      	movs	r2, #0
 8005052:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8005054:	4b09      	ldr	r3, [pc, #36]	@ (800507c <MX_USART6_UART_Init+0x4c>)
 8005056:	220c      	movs	r2, #12
 8005058:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800505a:	4b08      	ldr	r3, [pc, #32]	@ (800507c <MX_USART6_UART_Init+0x4c>)
 800505c:	2200      	movs	r2, #0
 800505e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8005060:	4b06      	ldr	r3, [pc, #24]	@ (800507c <MX_USART6_UART_Init+0x4c>)
 8005062:	2200      	movs	r2, #0
 8005064:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8005066:	4805      	ldr	r0, [pc, #20]	@ (800507c <MX_USART6_UART_Init+0x4c>)
 8005068:	f005 f8be 	bl	800a1e8 <HAL_UART_Init>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d001      	beq.n	8005076 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8005072:	f000 fc05 	bl	8005880 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8005076:	bf00      	nop
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	20000544 	.word	0x20000544
 8005080:	40011400 	.word	0x40011400

08005084 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b08a      	sub	sp, #40	@ 0x28
 8005088:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800508a:	f107 0314 	add.w	r3, r7, #20
 800508e:	2200      	movs	r2, #0
 8005090:	601a      	str	r2, [r3, #0]
 8005092:	605a      	str	r2, [r3, #4]
 8005094:	609a      	str	r2, [r3, #8]
 8005096:	60da      	str	r2, [r3, #12]
 8005098:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800509a:	2300      	movs	r3, #0
 800509c:	613b      	str	r3, [r7, #16]
 800509e:	4b4c      	ldr	r3, [pc, #304]	@ (80051d0 <MX_GPIO_Init+0x14c>)
 80050a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050a2:	4a4b      	ldr	r2, [pc, #300]	@ (80051d0 <MX_GPIO_Init+0x14c>)
 80050a4:	f043 0304 	orr.w	r3, r3, #4
 80050a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80050aa:	4b49      	ldr	r3, [pc, #292]	@ (80051d0 <MX_GPIO_Init+0x14c>)
 80050ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ae:	f003 0304 	and.w	r3, r3, #4
 80050b2:	613b      	str	r3, [r7, #16]
 80050b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80050b6:	2300      	movs	r3, #0
 80050b8:	60fb      	str	r3, [r7, #12]
 80050ba:	4b45      	ldr	r3, [pc, #276]	@ (80051d0 <MX_GPIO_Init+0x14c>)
 80050bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050be:	4a44      	ldr	r2, [pc, #272]	@ (80051d0 <MX_GPIO_Init+0x14c>)
 80050c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80050c6:	4b42      	ldr	r3, [pc, #264]	@ (80051d0 <MX_GPIO_Init+0x14c>)
 80050c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050ce:	60fb      	str	r3, [r7, #12]
 80050d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80050d2:	2300      	movs	r3, #0
 80050d4:	60bb      	str	r3, [r7, #8]
 80050d6:	4b3e      	ldr	r3, [pc, #248]	@ (80051d0 <MX_GPIO_Init+0x14c>)
 80050d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050da:	4a3d      	ldr	r2, [pc, #244]	@ (80051d0 <MX_GPIO_Init+0x14c>)
 80050dc:	f043 0301 	orr.w	r3, r3, #1
 80050e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80050e2:	4b3b      	ldr	r3, [pc, #236]	@ (80051d0 <MX_GPIO_Init+0x14c>)
 80050e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050e6:	f003 0301 	and.w	r3, r3, #1
 80050ea:	60bb      	str	r3, [r7, #8]
 80050ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80050ee:	2300      	movs	r3, #0
 80050f0:	607b      	str	r3, [r7, #4]
 80050f2:	4b37      	ldr	r3, [pc, #220]	@ (80051d0 <MX_GPIO_Init+0x14c>)
 80050f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050f6:	4a36      	ldr	r2, [pc, #216]	@ (80051d0 <MX_GPIO_Init+0x14c>)
 80050f8:	f043 0302 	orr.w	r3, r3, #2
 80050fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80050fe:	4b34      	ldr	r3, [pc, #208]	@ (80051d0 <MX_GPIO_Init+0x14c>)
 8005100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005102:	f003 0302 	and.w	r3, r3, #2
 8005106:	607b      	str	r3, [r7, #4]
 8005108:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|CS_Pin|Buzzer_Pin|GATE_D_Pin
 800510a:	2200      	movs	r2, #0
 800510c:	f642 4112 	movw	r1, #11282	@ 0x2c12
 8005110:	4830      	ldr	r0, [pc, #192]	@ (80051d4 <MX_GPIO_Init+0x150>)
 8005112:	f002 f879 	bl	8007208 <HAL_GPIO_WritePin>
                          |GATE_C_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M0_Pin|M1_Pin|FN_Pin|LED2_Pin
 8005116:	2200      	movs	r2, #0
 8005118:	f246 011f 	movw	r1, #24607	@ 0x601f
 800511c:	482e      	ldr	r0, [pc, #184]	@ (80051d8 <MX_GPIO_Init+0x154>)
 800511e:	f002 f873 	bl	8007208 <HAL_GPIO_WritePin>
                          |LED1_Pin|GATE_B_Pin|GATE_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 CS_Pin Buzzer_Pin GATE_D_Pin
                           GATE_C_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|CS_Pin|Buzzer_Pin|GATE_D_Pin
 8005122:	f642 4312 	movw	r3, #11282	@ 0x2c12
 8005126:	617b      	str	r3, [r7, #20]
                          |GATE_C_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005128:	2301      	movs	r3, #1
 800512a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800512c:	2300      	movs	r3, #0
 800512e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005130:	2300      	movs	r3, #0
 8005132:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005134:	f107 0314 	add.w	r3, r7, #20
 8005138:	4619      	mov	r1, r3
 800513a:	4826      	ldr	r0, [pc, #152]	@ (80051d4 <MX_GPIO_Init+0x150>)
 800513c:	f001 feb8 	bl	8006eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8005140:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005144:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005146:	2300      	movs	r3, #0
 8005148:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800514a:	2302      	movs	r3, #2
 800514c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800514e:	f107 0314 	add.w	r3, r7, #20
 8005152:	4619      	mov	r1, r3
 8005154:	481f      	ldr	r0, [pc, #124]	@ (80051d4 <MX_GPIO_Init+0x150>)
 8005156:	f001 feab 	bl	8006eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : M0_Pin M1_Pin FN_Pin LED2_Pin
                           LED1_Pin GATE_B_Pin GATE_A_Pin */
  GPIO_InitStruct.Pin = M0_Pin|M1_Pin|FN_Pin|LED2_Pin
 800515a:	f246 031f 	movw	r3, #24607	@ 0x601f
 800515e:	617b      	str	r3, [r7, #20]
                          |LED1_Pin|GATE_B_Pin|GATE_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005160:	2301      	movs	r3, #1
 8005162:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005164:	2300      	movs	r3, #0
 8005166:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005168:	2300      	movs	r3, #0
 800516a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800516c:	f107 0314 	add.w	r3, r7, #20
 8005170:	4619      	mov	r1, r3
 8005172:	4819      	ldr	r0, [pc, #100]	@ (80051d8 <MX_GPIO_Init+0x154>)
 8005174:	f001 fe9c 	bl	8006eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SECINP_Pin */
  GPIO_InitStruct.Pin = SECINP_Pin;
 8005178:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800517c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800517e:	2300      	movs	r3, #0
 8005180:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005182:	2301      	movs	r3, #1
 8005184:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SECINP_GPIO_Port, &GPIO_InitStruct);
 8005186:	f107 0314 	add.w	r3, r7, #20
 800518a:	4619      	mov	r1, r3
 800518c:	4812      	ldr	r0, [pc, #72]	@ (80051d8 <MX_GPIO_Init+0x154>)
 800518e:	f001 fe8f 	bl	8006eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8005192:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005196:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005198:	2300      	movs	r3, #0
 800519a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800519c:	2301      	movs	r3, #1
 800519e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80051a0:	f107 0314 	add.w	r3, r7, #20
 80051a4:	4619      	mov	r1, r3
 80051a6:	480b      	ldr	r0, [pc, #44]	@ (80051d4 <MX_GPIO_Init+0x150>)
 80051a8:	f001 fe82 	bl	8006eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|INT2_Pin;
 80051ac:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80051b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80051b2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80051b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051b8:	2300      	movs	r3, #0
 80051ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051bc:	f107 0314 	add.w	r3, r7, #20
 80051c0:	4619      	mov	r1, r3
 80051c2:	4805      	ldr	r0, [pc, #20]	@ (80051d8 <MX_GPIO_Init+0x154>)
 80051c4:	f001 fe74 	bl	8006eb0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80051c8:	bf00      	nop
 80051ca:	3728      	adds	r7, #40	@ 0x28
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	40023800 	.word	0x40023800
 80051d4:	40020800 	.word	0x40020800
 80051d8:	40020400 	.word	0x40020400

080051dc <E220_CONFIG>:
		}


}
void E220_CONFIG(uint8_t ADDH, uint8_t ADDL, uint8_t CHN, uint8_t MODE)
{
 80051dc:	b590      	push	{r4, r7, lr}
 80051de:	b087      	sub	sp, #28
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	4604      	mov	r4, r0
 80051e4:	4608      	mov	r0, r1
 80051e6:	4611      	mov	r1, r2
 80051e8:	461a      	mov	r2, r3
 80051ea:	4623      	mov	r3, r4
 80051ec:	71fb      	strb	r3, [r7, #7]
 80051ee:	4603      	mov	r3, r0
 80051f0:	71bb      	strb	r3, [r7, #6]
 80051f2:	460b      	mov	r3, r1
 80051f4:	717b      	strb	r3, [r7, #5]
 80051f6:	4613      	mov	r3, r2
 80051f8:	713b      	strb	r3, [r7, #4]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, SET);
 80051fa:	2201      	movs	r2, #1
 80051fc:	2104      	movs	r1, #4
 80051fe:	4824      	ldr	r0, [pc, #144]	@ (8005290 <E220_CONFIG+0xb4>)
 8005200:	f002 f802 	bl	8007208 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET);
 8005204:	2201      	movs	r2, #1
 8005206:	2102      	movs	r1, #2
 8005208:	4821      	ldr	r0, [pc, #132]	@ (8005290 <E220_CONFIG+0xb4>)
 800520a:	f001 fffd 	bl	8007208 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 800520e:	2032      	movs	r0, #50	@ 0x32
 8005210:	f000 fffa 	bl	8006208 <HAL_Delay>

    char cfg_buff[8] = {0}; // E220 için 8 elemanlı bir dizi kullanıyoruz
 8005214:	2300      	movs	r3, #0
 8005216:	60fb      	str	r3, [r7, #12]
 8005218:	2300      	movs	r3, #0
 800521a:	613b      	str	r3, [r7, #16]
    enum {Transparent, Fixed} mode;
    mode = MODE;
 800521c:	793b      	ldrb	r3, [r7, #4]
 800521e:	75fb      	strb	r3, [r7, #23]

    cfg_buff[0] = ADDH;
 8005220:	79fb      	ldrb	r3, [r7, #7]
 8005222:	733b      	strb	r3, [r7, #12]
    cfg_buff[1] = ADDL;
 8005224:	79bb      	ldrb	r3, [r7, #6]
 8005226:	737b      	strb	r3, [r7, #13]
    cfg_buff[2] = 0x62;  // 62 2.4kbps 63 4.8 kpbs
 8005228:	2362      	movs	r3, #98	@ 0x62
 800522a:	73bb      	strb	r3, [r7, #14]
    cfg_buff[3] = 0x00;
 800522c:	2300      	movs	r3, #0
 800522e:	73fb      	strb	r3, [r7, #15]
    cfg_buff[4] = CHN;
 8005230:	797b      	ldrb	r3, [r7, #5]
 8005232:	743b      	strb	r3, [r7, #16]

    switch(mode){
 8005234:	7dfb      	ldrb	r3, [r7, #23]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d002      	beq.n	8005240 <E220_CONFIG+0x64>
 800523a:	2b01      	cmp	r3, #1
 800523c:	d003      	beq.n	8005246 <E220_CONFIG+0x6a>
 800523e:	e005      	b.n	800524c <E220_CONFIG+0x70>
        case Transparent:
            cfg_buff[5] = 0x00;  // opsiyon
 8005240:	2300      	movs	r3, #0
 8005242:	747b      	strb	r3, [r7, #17]
            break;
 8005244:	e004      	b.n	8005250 <E220_CONFIG+0x74>
        case Fixed:
            cfg_buff[5] = 0x11;
 8005246:	2311      	movs	r3, #17
 8005248:	747b      	strb	r3, [r7, #17]
            break;
 800524a:	e001      	b.n	8005250 <E220_CONFIG+0x74>
        default:
            cfg_buff[5] = 0x11;
 800524c:	2311      	movs	r3, #17
 800524e:	747b      	strb	r3, [r7, #17]
     }

     cfg_buff[6] = 0x00;
 8005250:	2300      	movs	r3, #0
 8005252:	74bb      	strb	r3, [r7, #18]
     cfg_buff[7] = 0x00;
 8005254:	2300      	movs	r3, #0
 8005256:	74fb      	strb	r3, [r7, #19]


    HAL_UART_Transmit(&huart3, (uint8_t*) cfg_buff, 8, 1000);
 8005258:	f107 010c 	add.w	r1, r7, #12
 800525c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005260:	2208      	movs	r2, #8
 8005262:	480c      	ldr	r0, [pc, #48]	@ (8005294 <E220_CONFIG+0xb8>)
 8005264:	f005 f80d 	bl	800a282 <HAL_UART_Transmit>

    HAL_Delay(25);
 8005268:	2019      	movs	r0, #25
 800526a:	f000 ffcd 	bl	8006208 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET);
 800526e:	2200      	movs	r2, #0
 8005270:	2104      	movs	r1, #4
 8005272:	4807      	ldr	r0, [pc, #28]	@ (8005290 <E220_CONFIG+0xb4>)
 8005274:	f001 ffc8 	bl	8007208 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 8005278:	2200      	movs	r2, #0
 800527a:	2102      	movs	r1, #2
 800527c:	4804      	ldr	r0, [pc, #16]	@ (8005290 <E220_CONFIG+0xb4>)
 800527e:	f001 ffc3 	bl	8007208 <HAL_GPIO_WritePin>
    HAL_Delay(25);
 8005282:	2019      	movs	r0, #25
 8005284:	f000 ffc0 	bl	8006208 <HAL_Delay>
}
 8005288:	bf00      	nop
 800528a:	371c      	adds	r7, #28
 800528c:	46bd      	mov	sp, r7
 800528e:	bd90      	pop	{r4, r7, pc}
 8005290:	40020400 	.word	0x40020400
 8005294:	20000500 	.word	0x20000500

08005298 <BME280_Get_Altitude>:

float BME280_Get_Altitude(void)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b082      	sub	sp, #8
 800529c:	af00      	add	r7, sp, #0
	float press = comp_data.pressure / 10000.0;
 800529e:	4b36      	ldr	r3, [pc, #216]	@ (8005378 <BME280_Get_Altitude+0xe0>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4618      	mov	r0, r3
 80052a4:	f7fb f946 	bl	8000534 <__aeabi_ui2d>
 80052a8:	a32b      	add	r3, pc, #172	@ (adr r3, 8005358 <BME280_Get_Altitude+0xc0>)
 80052aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ae:	f7fb fae5 	bl	800087c <__aeabi_ddiv>
 80052b2:	4602      	mov	r2, r0
 80052b4:	460b      	mov	r3, r1
 80052b6:	4610      	mov	r0, r2
 80052b8:	4619      	mov	r1, r3
 80052ba:	f7fb fcad 	bl	8000c18 <__aeabi_d2f>
 80052be:	4603      	mov	r3, r0
 80052c0:	607b      	str	r3, [r7, #4]
	float temp = comp_data.temperature / 100.0;
 80052c2:	4b2d      	ldr	r3, [pc, #180]	@ (8005378 <BME280_Get_Altitude+0xe0>)
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7fb f944 	bl	8000554 <__aeabi_i2d>
 80052cc:	f04f 0200 	mov.w	r2, #0
 80052d0:	4b2a      	ldr	r3, [pc, #168]	@ (800537c <BME280_Get_Altitude+0xe4>)
 80052d2:	f7fb fad3 	bl	800087c <__aeabi_ddiv>
 80052d6:	4602      	mov	r2, r0
 80052d8:	460b      	mov	r3, r1
 80052da:	4610      	mov	r0, r2
 80052dc:	4619      	mov	r1, r3
 80052de:	f7fb fc9b 	bl	8000c18 <__aeabi_d2f>
 80052e2:	4603      	mov	r3, r0
 80052e4:	603b      	str	r3, [r7, #0]
	alt = 44330 * (1 - pow((press / 1013.25),(1/5.255)));
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f7fb f946 	bl	8000578 <__aeabi_f2d>
 80052ec:	a31c      	add	r3, pc, #112	@ (adr r3, 8005360 <BME280_Get_Altitude+0xc8>)
 80052ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f2:	f7fb fac3 	bl	800087c <__aeabi_ddiv>
 80052f6:	4602      	mov	r2, r0
 80052f8:	460b      	mov	r3, r1
 80052fa:	ec43 2b17 	vmov	d7, r2, r3
 80052fe:	ed9f 1b1a 	vldr	d1, [pc, #104]	@ 8005368 <BME280_Get_Altitude+0xd0>
 8005302:	eeb0 0a47 	vmov.f32	s0, s14
 8005306:	eef0 0a67 	vmov.f32	s1, s15
 800530a:	f008 fead 	bl	800e068 <pow>
 800530e:	ec53 2b10 	vmov	r2, r3, d0
 8005312:	f04f 0000 	mov.w	r0, #0
 8005316:	491a      	ldr	r1, [pc, #104]	@ (8005380 <BME280_Get_Altitude+0xe8>)
 8005318:	f7fa ffce 	bl	80002b8 <__aeabi_dsub>
 800531c:	4602      	mov	r2, r0
 800531e:	460b      	mov	r3, r1
 8005320:	4610      	mov	r0, r2
 8005322:	4619      	mov	r1, r3
 8005324:	a312      	add	r3, pc, #72	@ (adr r3, 8005370 <BME280_Get_Altitude+0xd8>)
 8005326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800532a:	f7fb f97d 	bl	8000628 <__aeabi_dmul>
 800532e:	4602      	mov	r2, r0
 8005330:	460b      	mov	r3, r1
 8005332:	4610      	mov	r0, r2
 8005334:	4619      	mov	r1, r3
 8005336:	f7fb fc6f 	bl	8000c18 <__aeabi_d2f>
 800533a:	4603      	mov	r3, r0
 800533c:	4a11      	ldr	r2, [pc, #68]	@ (8005384 <BME280_Get_Altitude+0xec>)
 800533e:	6013      	str	r3, [r2, #0]
	//alt = ((pow((P0/press), (1/5.257))-1) * (temp + 273.15)) / 0.0065;

	return (alt);
 8005340:	4b10      	ldr	r3, [pc, #64]	@ (8005384 <BME280_Get_Altitude+0xec>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	ee07 3a90 	vmov	s15, r3
}
 8005348:	eeb0 0a67 	vmov.f32	s0, s15
 800534c:	3708      	adds	r7, #8
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	f3af 8000 	nop.w
 8005358:	00000000 	.word	0x00000000
 800535c:	40c38800 	.word	0x40c38800
 8005360:	00000000 	.word	0x00000000
 8005364:	408faa00 	.word	0x408faa00
 8005368:	ccd9456c 	.word	0xccd9456c
 800536c:	3fc85b95 	.word	0x3fc85b95
 8005370:	00000000 	.word	0x00000000
 8005374:	40e5a540 	.word	0x40e5a540
 8005378:	20002658 	.word	0x20002658
 800537c:	40590000 	.word	0x40590000
 8005380:	3ff00000 	.word	0x3ff00000
 8005384:	200022b0 	.word	0x200022b0

08005388 <user_i2c_read>:
int8_t user_i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af02      	add	r7, sp, #8
 800538e:	603a      	str	r2, [r7, #0]
 8005390:	461a      	mov	r2, r3
 8005392:	4603      	mov	r3, r0
 8005394:	71fb      	strb	r3, [r7, #7]
 8005396:	460b      	mov	r3, r1
 8005398:	71bb      	strb	r3, [r7, #6]
 800539a:	4613      	mov	r3, r2
 800539c:	80bb      	strh	r3, [r7, #4]
  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 800539e:	79fb      	ldrb	r3, [r7, #7]
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	005b      	lsls	r3, r3, #1
 80053a4:	b299      	uxth	r1, r3
 80053a6:	1dba      	adds	r2, r7, #6
 80053a8:	230a      	movs	r3, #10
 80053aa:	9300      	str	r3, [sp, #0]
 80053ac:	2301      	movs	r3, #1
 80053ae:	4811      	ldr	r0, [pc, #68]	@ (80053f4 <user_i2c_read+0x6c>)
 80053b0:	f002 f8a2 	bl	80074f8 <HAL_I2C_Master_Transmit>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d002      	beq.n	80053c0 <user_i2c_read+0x38>
 80053ba:	f04f 33ff 	mov.w	r3, #4294967295
 80053be:	e014      	b.n	80053ea <user_i2c_read+0x62>
  if(HAL_I2C_Master_Receive(&hi2c1, (id << 1) | 0x01, data, len, 10) != HAL_OK) return -1;
 80053c0:	79fb      	ldrb	r3, [r7, #7]
 80053c2:	005b      	lsls	r3, r3, #1
 80053c4:	b21b      	sxth	r3, r3
 80053c6:	f043 0301 	orr.w	r3, r3, #1
 80053ca:	b21b      	sxth	r3, r3
 80053cc:	b299      	uxth	r1, r3
 80053ce:	88bb      	ldrh	r3, [r7, #4]
 80053d0:	220a      	movs	r2, #10
 80053d2:	9200      	str	r2, [sp, #0]
 80053d4:	683a      	ldr	r2, [r7, #0]
 80053d6:	4807      	ldr	r0, [pc, #28]	@ (80053f4 <user_i2c_read+0x6c>)
 80053d8:	f002 f98c 	bl	80076f4 <HAL_I2C_Master_Receive>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d002      	beq.n	80053e8 <user_i2c_read+0x60>
 80053e2:	f04f 33ff 	mov.w	r3, #4294967295
 80053e6:	e000      	b.n	80053ea <user_i2c_read+0x62>

  return 0;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3708      	adds	r7, #8
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	20000264 	.word	0x20000264

080053f8 <user_delay_ms>:

void user_delay_ms(uint32_t period)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b082      	sub	sp, #8
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  HAL_Delay(period);
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 ff01 	bl	8006208 <HAL_Delay>
}
 8005406:	bf00      	nop
 8005408:	3708      	adds	r7, #8
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
	...

08005410 <user_i2c_write>:
int8_t user_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b086      	sub	sp, #24
 8005414:	af02      	add	r7, sp, #8
 8005416:	603a      	str	r2, [r7, #0]
 8005418:	461a      	mov	r2, r3
 800541a:	4603      	mov	r3, r0
 800541c:	71fb      	strb	r3, [r7, #7]
 800541e:	460b      	mov	r3, r1
 8005420:	71bb      	strb	r3, [r7, #6]
 8005422:	4613      	mov	r3, r2
 8005424:	80bb      	strh	r3, [r7, #4]
  int8_t *buf;
  buf = malloc(len +1);
 8005426:	88bb      	ldrh	r3, [r7, #4]
 8005428:	3301      	adds	r3, #1
 800542a:	4618      	mov	r0, r3
 800542c:	f006 f81a 	bl	800b464 <malloc>
 8005430:	4603      	mov	r3, r0
 8005432:	60fb      	str	r3, [r7, #12]
  buf[0] = reg_addr;
 8005434:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	701a      	strb	r2, [r3, #0]
  memcpy(buf +1, data, len);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	3301      	adds	r3, #1
 8005440:	88ba      	ldrh	r2, [r7, #4]
 8005442:	6839      	ldr	r1, [r7, #0]
 8005444:	4618      	mov	r0, r3
 8005446:	f007 f87e 	bl	800c546 <memcpy>

  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 800544a:	79fb      	ldrb	r3, [r7, #7]
 800544c:	b29b      	uxth	r3, r3
 800544e:	005b      	lsls	r3, r3, #1
 8005450:	b299      	uxth	r1, r3
 8005452:	88bb      	ldrh	r3, [r7, #4]
 8005454:	3301      	adds	r3, #1
 8005456:	b29b      	uxth	r3, r3
 8005458:	f04f 32ff 	mov.w	r2, #4294967295
 800545c:	9200      	str	r2, [sp, #0]
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	4808      	ldr	r0, [pc, #32]	@ (8005484 <user_i2c_write+0x74>)
 8005462:	f002 f849 	bl	80074f8 <HAL_I2C_Master_Transmit>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d002      	beq.n	8005472 <user_i2c_write+0x62>
 800546c:	f04f 33ff 	mov.w	r3, #4294967295
 8005470:	e003      	b.n	800547a <user_i2c_write+0x6a>

  free(buf);
 8005472:	68f8      	ldr	r0, [r7, #12]
 8005474:	f005 fffe 	bl	800b474 <free>
  return 0;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3710      	adds	r7, #16
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	20000264 	.word	0x20000264

08005488 <union_converter>:

void union_converter(void)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b08e      	sub	sp, #56	@ 0x38
 800548c:	af00      	add	r7, sp, #0
	 float2unit8 f2u8_gpsalt;
    f2u8_gpsalt.fVal=gps.altitude;
 800548e:	4ba0      	ldr	r3, [pc, #640]	@ (8005710 <union_converter+0x288>)
 8005490:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005494:	4610      	mov	r0, r2
 8005496:	4619      	mov	r1, r3
 8005498:	f7fb fbbe 	bl	8000c18 <__aeabi_d2f>
 800549c:	4603      	mov	r3, r0
 800549e:	62bb      	str	r3, [r7, #40]	@ 0x28
		 for(uint8_t i=0;i<4;i++)
 80054a0:	2300      	movs	r3, #0
 80054a2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80054a6:	e00f      	b.n	80054c8 <union_converter+0x40>
		 {
			loratx[i+5]=f2u8_gpsalt.array[i];
 80054a8:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80054ac:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80054b0:	3305      	adds	r3, #5
 80054b2:	3238      	adds	r2, #56	@ 0x38
 80054b4:	443a      	add	r2, r7
 80054b6:	f812 1c10 	ldrb.w	r1, [r2, #-16]
 80054ba:	4a96      	ldr	r2, [pc, #600]	@ (8005714 <union_converter+0x28c>)
 80054bc:	54d1      	strb	r1, [r2, r3]
		 for(uint8_t i=0;i<4;i++)
 80054be:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80054c2:	3301      	adds	r3, #1
 80054c4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80054c8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80054cc:	2b03      	cmp	r3, #3
 80054ce:	d9eb      	bls.n	80054a8 <union_converter+0x20>
		 }

	 float2unit8 f2u8_latitude;
	 f2u8_latitude.fVal=gps.latitude;
 80054d0:	4b8f      	ldr	r3, [pc, #572]	@ (8005710 <union_converter+0x288>)
 80054d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d6:	4610      	mov	r0, r2
 80054d8:	4619      	mov	r1, r3
 80054da:	f7fb fb9d 	bl	8000c18 <__aeabi_d2f>
 80054de:	4603      	mov	r3, r0
 80054e0:	627b      	str	r3, [r7, #36]	@ 0x24
		 for(uint8_t i=0;i<4;i++)
 80054e2:	2300      	movs	r3, #0
 80054e4:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 80054e8:	e00f      	b.n	800550a <union_converter+0x82>
		 {
			loratx[i+9]=f2u8_latitude.array[i];
 80054ea:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 80054ee:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80054f2:	3309      	adds	r3, #9
 80054f4:	3238      	adds	r2, #56	@ 0x38
 80054f6:	443a      	add	r2, r7
 80054f8:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 80054fc:	4a85      	ldr	r2, [pc, #532]	@ (8005714 <union_converter+0x28c>)
 80054fe:	54d1      	strb	r1, [r2, r3]
		 for(uint8_t i=0;i<4;i++)
 8005500:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8005504:	3301      	adds	r3, #1
 8005506:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800550a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800550e:	2b03      	cmp	r3, #3
 8005510:	d9eb      	bls.n	80054ea <union_converter+0x62>
		 }

	 float2unit8 f2u8_longitude;
	 f2u8_longitude.fVal=gps.longitude;
 8005512:	4b7f      	ldr	r3, [pc, #508]	@ (8005710 <union_converter+0x288>)
 8005514:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005518:	4610      	mov	r0, r2
 800551a:	4619      	mov	r1, r3
 800551c:	f7fb fb7c 	bl	8000c18 <__aeabi_d2f>
 8005520:	4603      	mov	r3, r0
 8005522:	623b      	str	r3, [r7, #32]
		 for(uint8_t i=0;i<4;i++)
 8005524:	2300      	movs	r3, #0
 8005526:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 800552a:	e00f      	b.n	800554c <union_converter+0xc4>
		 {
			loratx[i+13]=f2u8_longitude.array[i];
 800552c:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 8005530:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8005534:	330d      	adds	r3, #13
 8005536:	3238      	adds	r2, #56	@ 0x38
 8005538:	443a      	add	r2, r7
 800553a:	f812 1c18 	ldrb.w	r1, [r2, #-24]
 800553e:	4a75      	ldr	r2, [pc, #468]	@ (8005714 <union_converter+0x28c>)
 8005540:	54d1      	strb	r1, [r2, r3]
		 for(uint8_t i=0;i<4;i++)
 8005542:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8005546:	3301      	adds	r3, #1
 8005548:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 800554c:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8005550:	2b03      	cmp	r3, #3
 8005552:	d9eb      	bls.n	800552c <union_converter+0xa4>
		 }

	 float2unit8 f2u8_altitude;
	 f2u8_altitude.fVal=altitude;
 8005554:	4b70      	ldr	r3, [pc, #448]	@ (8005718 <union_converter+0x290>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	61fb      	str	r3, [r7, #28]
		 for(uint8_t i=0;i<4;i++)
 800555a:	2300      	movs	r3, #0
 800555c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 8005560:	e00f      	b.n	8005582 <union_converter+0xfa>
		 {
			loratx[i+17]=f2u8_altitude.array[i];
 8005562:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 8005566:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800556a:	3311      	adds	r3, #17
 800556c:	3238      	adds	r2, #56	@ 0x38
 800556e:	443a      	add	r2, r7
 8005570:	f812 1c1c 	ldrb.w	r1, [r2, #-28]
 8005574:	4a67      	ldr	r2, [pc, #412]	@ (8005714 <union_converter+0x28c>)
 8005576:	54d1      	strb	r1, [r2, r3]
		 for(uint8_t i=0;i<4;i++)
 8005578:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800557c:	3301      	adds	r3, #1
 800557e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 8005582:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8005586:	2b03      	cmp	r3, #3
 8005588:	d9eb      	bls.n	8005562 <union_converter+0xda>
		 }
	 float2unit8 f2u8_speed;
	 f2u8_speed.fVal=speed;
 800558a:	4b64      	ldr	r3, [pc, #400]	@ (800571c <union_converter+0x294>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	61bb      	str	r3, [r7, #24]
		 for(uint8_t i=0;i<4;i++)
 8005590:	2300      	movs	r3, #0
 8005592:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8005596:	e00f      	b.n	80055b8 <union_converter+0x130>
		 {
			loratx[i+21]=f2u8_speed.array[i];
 8005598:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800559c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80055a0:	3315      	adds	r3, #21
 80055a2:	3238      	adds	r2, #56	@ 0x38
 80055a4:	443a      	add	r2, r7
 80055a6:	f812 1c20 	ldrb.w	r1, [r2, #-32]
 80055aa:	4a5a      	ldr	r2, [pc, #360]	@ (8005714 <union_converter+0x28c>)
 80055ac:	54d1      	strb	r1, [r2, r3]
		 for(uint8_t i=0;i<4;i++)
 80055ae:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80055b2:	3301      	adds	r3, #1
 80055b4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80055b8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80055bc:	2b03      	cmp	r3, #3
 80055be:	d9eb      	bls.n	8005598 <union_converter+0x110>
		 }

	 float2unit8 f2u8_temp;
	 f2u8_temp.fVal=temperature;
 80055c0:	4b57      	ldr	r3, [pc, #348]	@ (8005720 <union_converter+0x298>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	617b      	str	r3, [r7, #20]
		 for(uint8_t i=0;i<4;i++)
 80055c6:	2300      	movs	r3, #0
 80055c8:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 80055cc:	e00f      	b.n	80055ee <union_converter+0x166>
		 {
			loratx[i+25]=f2u8_temp.array[i];
 80055ce:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 80055d2:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80055d6:	3319      	adds	r3, #25
 80055d8:	3238      	adds	r2, #56	@ 0x38
 80055da:	443a      	add	r2, r7
 80055dc:	f812 1c24 	ldrb.w	r1, [r2, #-36]
 80055e0:	4a4c      	ldr	r2, [pc, #304]	@ (8005714 <union_converter+0x28c>)
 80055e2:	54d1      	strb	r1, [r2, r3]
		 for(uint8_t i=0;i<4;i++)
 80055e4:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80055e8:	3301      	adds	r3, #1
 80055ea:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 80055ee:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80055f2:	2b03      	cmp	r3, #3
 80055f4:	d9eb      	bls.n	80055ce <union_converter+0x146>
		 }

	 float2unit8 f2u8_accx;
	 f2u8_accx.fVal=Lsm_Sensor.Accel_X;
 80055f6:	4b4b      	ldr	r3, [pc, #300]	@ (8005724 <union_converter+0x29c>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	613b      	str	r3, [r7, #16]
		 for(uint8_t i=0;i<4;i++)
 80055fc:	2300      	movs	r3, #0
 80055fe:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 8005602:	e00f      	b.n	8005624 <union_converter+0x19c>
		 {
			loratx[i+29]=f2u8_accx.array[i];
 8005604:	f897 2031 	ldrb.w	r2, [r7, #49]	@ 0x31
 8005608:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800560c:	331d      	adds	r3, #29
 800560e:	3238      	adds	r2, #56	@ 0x38
 8005610:	443a      	add	r2, r7
 8005612:	f812 1c28 	ldrb.w	r1, [r2, #-40]
 8005616:	4a3f      	ldr	r2, [pc, #252]	@ (8005714 <union_converter+0x28c>)
 8005618:	54d1      	strb	r1, [r2, r3]
		 for(uint8_t i=0;i<4;i++)
 800561a:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800561e:	3301      	adds	r3, #1
 8005620:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 8005624:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8005628:	2b03      	cmp	r3, #3
 800562a:	d9eb      	bls.n	8005604 <union_converter+0x17c>
		 }

	 float2unit8 f2u8_accy;
	 f2u8_accy.fVal=Lsm_Sensor.Accel_Y;
 800562c:	4b3d      	ldr	r3, [pc, #244]	@ (8005724 <union_converter+0x29c>)
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	60fb      	str	r3, [r7, #12]
	 	 for(uint8_t i=0;i<4;i++)
 8005632:	2300      	movs	r3, #0
 8005634:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 8005638:	e00f      	b.n	800565a <union_converter+0x1d2>
		 {
			loratx[i+33]=f2u8_accy.array[i];
 800563a:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800563e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8005642:	3321      	adds	r3, #33	@ 0x21
 8005644:	3238      	adds	r2, #56	@ 0x38
 8005646:	443a      	add	r2, r7
 8005648:	f812 1c2c 	ldrb.w	r1, [r2, #-44]
 800564c:	4a31      	ldr	r2, [pc, #196]	@ (8005714 <union_converter+0x28c>)
 800564e:	54d1      	strb	r1, [r2, r3]
	 	 for(uint8_t i=0;i<4;i++)
 8005650:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8005654:	3301      	adds	r3, #1
 8005656:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 800565a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800565e:	2b03      	cmp	r3, #3
 8005660:	d9eb      	bls.n	800563a <union_converter+0x1b2>
		 }

	 float2unit8 f2u8_accz;
	 f2u8_accz.fVal=Lsm_Sensor.Accel_Z;
 8005662:	4b30      	ldr	r3, [pc, #192]	@ (8005724 <union_converter+0x29c>)
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	60bb      	str	r3, [r7, #8]
	 	 for(uint8_t i=0;i<4;i++)
 8005668:	2300      	movs	r3, #0
 800566a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800566e:	e00f      	b.n	8005690 <union_converter+0x208>
		 {
		    loratx[i+37]=f2u8_accz.array[i];
 8005670:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8005674:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005678:	3325      	adds	r3, #37	@ 0x25
 800567a:	3238      	adds	r2, #56	@ 0x38
 800567c:	443a      	add	r2, r7
 800567e:	f812 1c30 	ldrb.w	r1, [r2, #-48]
 8005682:	4a24      	ldr	r2, [pc, #144]	@ (8005714 <union_converter+0x28c>)
 8005684:	54d1      	strb	r1, [r2, r3]
	 	 for(uint8_t i=0;i<4;i++)
 8005686:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800568a:	3301      	adds	r3, #1
 800568c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8005690:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005694:	2b03      	cmp	r3, #3
 8005696:	d9eb      	bls.n	8005670 <union_converter+0x1e8>
		 }

	 float2unit8 f2u8_roll;
	 f2u8_roll.fVal=gravity_normal_angle;// real roll
 8005698:	4b23      	ldr	r3, [pc, #140]	@ (8005728 <union_converter+0x2a0>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	607b      	str	r3, [r7, #4]
		 for(uint8_t i=0;i<4;i++)
 800569e:	2300      	movs	r3, #0
 80056a0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80056a4:	e00f      	b.n	80056c6 <union_converter+0x23e>
		 {
			loratx[i+41]=f2u8_roll.array[i];
 80056a6:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 80056aa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80056ae:	3329      	adds	r3, #41	@ 0x29
 80056b0:	3238      	adds	r2, #56	@ 0x38
 80056b2:	443a      	add	r2, r7
 80056b4:	f812 1c34 	ldrb.w	r1, [r2, #-52]
 80056b8:	4a16      	ldr	r2, [pc, #88]	@ (8005714 <union_converter+0x28c>)
 80056ba:	54d1      	strb	r1, [r2, r3]
		 for(uint8_t i=0;i<4;i++)
 80056bc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80056c0:	3301      	adds	r3, #1
 80056c2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80056c6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80056ca:	2b03      	cmp	r3, #3
 80056cc:	d9eb      	bls.n	80056a6 <union_converter+0x21e>
		 }
	 float2unit8 f2u8_pitch;
	 f2u8_pitch.fVal=real_pitch;
 80056ce:	4b17      	ldr	r3, [pc, #92]	@ (800572c <union_converter+0x2a4>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	603b      	str	r3, [r7, #0]
		 for(uint8_t i=0;i<4;i++)
 80056d4:	2300      	movs	r3, #0
 80056d6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80056da:	e00f      	b.n	80056fc <union_converter+0x274>
		 {
			loratx[i+45]=f2u8_pitch.array[i];
 80056dc:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 80056e0:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80056e4:	332d      	adds	r3, #45	@ 0x2d
 80056e6:	3238      	adds	r2, #56	@ 0x38
 80056e8:	443a      	add	r2, r7
 80056ea:	f812 1c38 	ldrb.w	r1, [r2, #-56]
 80056ee:	4a09      	ldr	r2, [pc, #36]	@ (8005714 <union_converter+0x28c>)
 80056f0:	54d1      	strb	r1, [r2, r3]
		 for(uint8_t i=0;i<4;i++)
 80056f2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80056f6:	3301      	adds	r3, #1
 80056f8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80056fc:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8005700:	2b03      	cmp	r3, #3
 8005702:	d9eb      	bls.n	80056dc <union_converter+0x254>
		 }
}
 8005704:	bf00      	nop
 8005706:	bf00      	nop
 8005708:	3738      	adds	r7, #56	@ 0x38
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	200023d8 	.word	0x200023d8
 8005714:	20002250 	.word	0x20002250
 8005718:	200022a4 	.word	0x200022a4
 800571c:	200022b8 	.word	0x200022b8
 8005720:	2000229c 	.word	0x2000229c
 8005724:	20002488 	.word	0x20002488
 8005728:	20002308 	.word	0x20002308
 800572c:	200022c4 	.word	0x200022c4

08005730 <EGU_Buff_Load>:

void EGU_Buff_Load(void)
{
 8005730:	b480      	push	{r7}
 8005732:	af00      	add	r7, sp, #0
	loratx[52]=EGU_RX_BUFFER[29];//EGU HATA
 8005734:	4b2e      	ldr	r3, [pc, #184]	@ (80057f0 <EGU_Buff_Load+0xc0>)
 8005736:	7f5a      	ldrb	r2, [r3, #29]
 8005738:	4b2e      	ldr	r3, [pc, #184]	@ (80057f4 <EGU_Buff_Load+0xc4>)
 800573a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	loratx[53]=EGU_RX_BUFFER[30];//Fitil kontrol 0 ise fitil bağlı değil 1 ise fitil bağlı
 800573e:	4b2c      	ldr	r3, [pc, #176]	@ (80057f0 <EGU_Buff_Load+0xc0>)
 8005740:	7f9a      	ldrb	r2, [r3, #30]
 8005742:	4b2c      	ldr	r3, [pc, #176]	@ (80057f4 <EGU_Buff_Load+0xc4>)
 8005744:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	loratx[54]=EGU_RX_BUFFER[6];//EGU BATARYA-F
 8005748:	4b29      	ldr	r3, [pc, #164]	@ (80057f0 <EGU_Buff_Load+0xc0>)
 800574a:	799a      	ldrb	r2, [r3, #6]
 800574c:	4b29      	ldr	r3, [pc, #164]	@ (80057f4 <EGU_Buff_Load+0xc4>)
 800574e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	loratx[55]=EGU_RX_BUFFER[7];
 8005752:	4b27      	ldr	r3, [pc, #156]	@ (80057f0 <EGU_Buff_Load+0xc0>)
 8005754:	79da      	ldrb	r2, [r3, #7]
 8005756:	4b27      	ldr	r3, [pc, #156]	@ (80057f4 <EGU_Buff_Load+0xc4>)
 8005758:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
	loratx[56]=EGU_RX_BUFFER[8];
 800575c:	4b24      	ldr	r3, [pc, #144]	@ (80057f0 <EGU_Buff_Load+0xc0>)
 800575e:	7a1a      	ldrb	r2, [r3, #8]
 8005760:	4b24      	ldr	r3, [pc, #144]	@ (80057f4 <EGU_Buff_Load+0xc4>)
 8005762:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	loratx[57]=EGU_RX_BUFFER[9];
 8005766:	4b22      	ldr	r3, [pc, #136]	@ (80057f0 <EGU_Buff_Load+0xc0>)
 8005768:	7a5a      	ldrb	r2, [r3, #9]
 800576a:	4b22      	ldr	r3, [pc, #136]	@ (80057f4 <EGU_Buff_Load+0xc4>)
 800576c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
	loratx[58]=EGU_RX_BUFFER[22];//EGU ANGLE-F
 8005770:	4b1f      	ldr	r3, [pc, #124]	@ (80057f0 <EGU_Buff_Load+0xc0>)
 8005772:	7d9a      	ldrb	r2, [r3, #22]
 8005774:	4b1f      	ldr	r3, [pc, #124]	@ (80057f4 <EGU_Buff_Load+0xc4>)
 8005776:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
	loratx[59]=EGU_RX_BUFFER[23];
 800577a:	4b1d      	ldr	r3, [pc, #116]	@ (80057f0 <EGU_Buff_Load+0xc0>)
 800577c:	7dda      	ldrb	r2, [r3, #23]
 800577e:	4b1d      	ldr	r3, [pc, #116]	@ (80057f4 <EGU_Buff_Load+0xc4>)
 8005780:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
	loratx[60]=EGU_RX_BUFFER[24];
 8005784:	4b1a      	ldr	r3, [pc, #104]	@ (80057f0 <EGU_Buff_Load+0xc0>)
 8005786:	7e1a      	ldrb	r2, [r3, #24]
 8005788:	4b1a      	ldr	r3, [pc, #104]	@ (80057f4 <EGU_Buff_Load+0xc4>)
 800578a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	loratx[61]=EGU_RX_BUFFER[25];
 800578e:	4b18      	ldr	r3, [pc, #96]	@ (80057f0 <EGU_Buff_Load+0xc0>)
 8005790:	7e5a      	ldrb	r2, [r3, #25]
 8005792:	4b18      	ldr	r3, [pc, #96]	@ (80057f4 <EGU_Buff_Load+0xc4>)
 8005794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
	loratx[62]=EGU_RX_BUFFER[10];//EGU IRTIFA-F
 8005798:	4b15      	ldr	r3, [pc, #84]	@ (80057f0 <EGU_Buff_Load+0xc0>)
 800579a:	7a9a      	ldrb	r2, [r3, #10]
 800579c:	4b15      	ldr	r3, [pc, #84]	@ (80057f4 <EGU_Buff_Load+0xc4>)
 800579e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
	loratx[63]=EGU_RX_BUFFER[11];
 80057a2:	4b13      	ldr	r3, [pc, #76]	@ (80057f0 <EGU_Buff_Load+0xc0>)
 80057a4:	7ada      	ldrb	r2, [r3, #11]
 80057a6:	4b13      	ldr	r3, [pc, #76]	@ (80057f4 <EGU_Buff_Load+0xc4>)
 80057a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
	loratx[64]=EGU_RX_BUFFER[12];
 80057ac:	4b10      	ldr	r3, [pc, #64]	@ (80057f0 <EGU_Buff_Load+0xc0>)
 80057ae:	7b1a      	ldrb	r2, [r3, #12]
 80057b0:	4b10      	ldr	r3, [pc, #64]	@ (80057f4 <EGU_Buff_Load+0xc4>)
 80057b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	loratx[65]=EGU_RX_BUFFER[13];
 80057b6:	4b0e      	ldr	r3, [pc, #56]	@ (80057f0 <EGU_Buff_Load+0xc0>)
 80057b8:	7b5a      	ldrb	r2, [r3, #13]
 80057ba:	4b0e      	ldr	r3, [pc, #56]	@ (80057f4 <EGU_Buff_Load+0xc4>)
 80057bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
	loratx[66]=EGU_RX_BUFFER[26];//EGU UCUS BASLADIMI?
 80057c0:	4b0b      	ldr	r3, [pc, #44]	@ (80057f0 <EGU_Buff_Load+0xc0>)
 80057c2:	7e9a      	ldrb	r2, [r3, #26]
 80057c4:	4b0b      	ldr	r3, [pc, #44]	@ (80057f4 <EGU_Buff_Load+0xc4>)
 80057c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
	loratx[67]=EGU_RX_BUFFER[28];//manyetik switch 1 ise kopmadı 0 ise koptu
 80057ca:	4b09      	ldr	r3, [pc, #36]	@ (80057f0 <EGU_Buff_Load+0xc0>)
 80057cc:	7f1a      	ldrb	r2, [r3, #28]
 80057ce:	4b09      	ldr	r3, [pc, #36]	@ (80057f4 <EGU_Buff_Load+0xc4>)
 80057d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
	loratx[68]=EGU_RX_BUFFER[27];//MOTOR ATESLEME TALEBİ GELDİ Mİ?
 80057d4:	4b06      	ldr	r3, [pc, #24]	@ (80057f0 <EGU_Buff_Load+0xc0>)
 80057d6:	7eda      	ldrb	r2, [r3, #27]
 80057d8:	4b06      	ldr	r3, [pc, #24]	@ (80057f4 <EGU_Buff_Load+0xc4>)
 80057da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	loratx[69]='\n';
 80057de:	4b05      	ldr	r3, [pc, #20]	@ (80057f4 <EGU_Buff_Load+0xc4>)
 80057e0:	220a      	movs	r2, #10
 80057e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

}
 80057e6:	bf00      	nop
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr
 80057f0:	20000588 	.word	0x20000588
 80057f4:	20002250 	.word	0x20002250

080057f8 <Altitude_Offset>:

	  }
}

void Altitude_Offset()
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b082      	sub	sp, #8
 80057fc:	af00      	add	r7, sp, #0
	for(uint8_t i=0;i<10;i++)
 80057fe:	2300      	movs	r3, #0
 8005800:	71fb      	strb	r3, [r7, #7]
 8005802:	e02b      	b.n	800585c <Altitude_Offset+0x64>
	{
		HAL_Delay(40);
 8005804:	2028      	movs	r0, #40	@ 0x28
 8005806:	f000 fcff 	bl	8006208 <HAL_Delay>
	  rslt = bme280_set_sensor_mode(BME280_FORCED_MODE, &dev);
 800580a:	4918      	ldr	r1, [pc, #96]	@ (800586c <Altitude_Offset+0x74>)
 800580c:	2001      	movs	r0, #1
 800580e:	f7fb fd9a 	bl	8001346 <bme280_set_sensor_mode>
 8005812:	4603      	mov	r3, r0
 8005814:	461a      	mov	r2, r3
 8005816:	4b16      	ldr	r3, [pc, #88]	@ (8005870 <Altitude_Offset+0x78>)
 8005818:	701a      	strb	r2, [r3, #0]
	  rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 800581a:	4a14      	ldr	r2, [pc, #80]	@ (800586c <Altitude_Offset+0x74>)
 800581c:	4915      	ldr	r1, [pc, #84]	@ (8005874 <Altitude_Offset+0x7c>)
 800581e:	2007      	movs	r0, #7
 8005820:	f7fb fe0d 	bl	800143e <bme280_get_sensor_data>
 8005824:	4603      	mov	r3, r0
 8005826:	461a      	mov	r2, r3
 8005828:	4b11      	ldr	r3, [pc, #68]	@ (8005870 <Altitude_Offset+0x78>)
 800582a:	701a      	strb	r2, [r3, #0]
	  if(rslt == BME280_OK)
 800582c:	4b10      	ldr	r3, [pc, #64]	@ (8005870 <Altitude_Offset+0x78>)
 800582e:	f993 3000 	ldrsb.w	r3, [r3]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d10f      	bne.n	8005856 <Altitude_Offset+0x5e>
	  { pressure = comp_data.pressure;
 8005836:	4b0f      	ldr	r3, [pc, #60]	@ (8005874 <Altitude_Offset+0x7c>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	ee07 3a90 	vmov	s15, r3
 800583e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005842:	4b0d      	ldr	r3, [pc, #52]	@ (8005878 <Altitude_Offset+0x80>)
 8005844:	edc3 7a00 	vstr	s15, [r3]
	    offset_altitude=BME280_Get_Altitude();
 8005848:	f7ff fd26 	bl	8005298 <BME280_Get_Altitude>
 800584c:	eef0 7a40 	vmov.f32	s15, s0
 8005850:	4b0a      	ldr	r3, [pc, #40]	@ (800587c <Altitude_Offset+0x84>)
 8005852:	edc3 7a00 	vstr	s15, [r3]
	for(uint8_t i=0;i<10;i++)
 8005856:	79fb      	ldrb	r3, [r7, #7]
 8005858:	3301      	adds	r3, #1
 800585a:	71fb      	strb	r3, [r7, #7]
 800585c:	79fb      	ldrb	r3, [r7, #7]
 800585e:	2b09      	cmp	r3, #9
 8005860:	d9d0      	bls.n	8005804 <Altitude_Offset+0xc>
	  }
	}
}
 8005862:	bf00      	nop
 8005864:	bf00      	nop
 8005866:	3708      	adds	r7, #8
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}
 800586c:	20002618 	.word	0x20002618
 8005870:	20002664 	.word	0x20002664
 8005874:	20002658 	.word	0x20002658
 8005878:	200022ac 	.word	0x200022ac
 800587c:	200022a8 	.word	0x200022a8

08005880 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005880:	b480      	push	{r7}
 8005882:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005884:	b672      	cpsid	i
}
 8005886:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005888:	bf00      	nop
 800588a:	e7fd      	b.n	8005888 <Error_Handler+0x8>

0800588c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005892:	2300      	movs	r3, #0
 8005894:	607b      	str	r3, [r7, #4]
 8005896:	4b10      	ldr	r3, [pc, #64]	@ (80058d8 <HAL_MspInit+0x4c>)
 8005898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800589a:	4a0f      	ldr	r2, [pc, #60]	@ (80058d8 <HAL_MspInit+0x4c>)
 800589c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80058a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80058a2:	4b0d      	ldr	r3, [pc, #52]	@ (80058d8 <HAL_MspInit+0x4c>)
 80058a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80058aa:	607b      	str	r3, [r7, #4]
 80058ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80058ae:	2300      	movs	r3, #0
 80058b0:	603b      	str	r3, [r7, #0]
 80058b2:	4b09      	ldr	r3, [pc, #36]	@ (80058d8 <HAL_MspInit+0x4c>)
 80058b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058b6:	4a08      	ldr	r2, [pc, #32]	@ (80058d8 <HAL_MspInit+0x4c>)
 80058b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80058be:	4b06      	ldr	r3, [pc, #24]	@ (80058d8 <HAL_MspInit+0x4c>)
 80058c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058c6:	603b      	str	r3, [r7, #0]
 80058c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80058ca:	bf00      	nop
 80058cc:	370c      	adds	r7, #12
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr
 80058d6:	bf00      	nop
 80058d8:	40023800 	.word	0x40023800

080058dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b08a      	sub	sp, #40	@ 0x28
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058e4:	f107 0314 	add.w	r3, r7, #20
 80058e8:	2200      	movs	r2, #0
 80058ea:	601a      	str	r2, [r3, #0]
 80058ec:	605a      	str	r2, [r3, #4]
 80058ee:	609a      	str	r2, [r3, #8]
 80058f0:	60da      	str	r2, [r3, #12]
 80058f2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a1b      	ldr	r2, [pc, #108]	@ (8005968 <HAL_ADC_MspInit+0x8c>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d12f      	bne.n	800595e <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80058fe:	2300      	movs	r3, #0
 8005900:	613b      	str	r3, [r7, #16]
 8005902:	4b1a      	ldr	r3, [pc, #104]	@ (800596c <HAL_ADC_MspInit+0x90>)
 8005904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005906:	4a19      	ldr	r2, [pc, #100]	@ (800596c <HAL_ADC_MspInit+0x90>)
 8005908:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800590c:	6453      	str	r3, [r2, #68]	@ 0x44
 800590e:	4b17      	ldr	r3, [pc, #92]	@ (800596c <HAL_ADC_MspInit+0x90>)
 8005910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005912:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005916:	613b      	str	r3, [r7, #16]
 8005918:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800591a:	2300      	movs	r3, #0
 800591c:	60fb      	str	r3, [r7, #12]
 800591e:	4b13      	ldr	r3, [pc, #76]	@ (800596c <HAL_ADC_MspInit+0x90>)
 8005920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005922:	4a12      	ldr	r2, [pc, #72]	@ (800596c <HAL_ADC_MspInit+0x90>)
 8005924:	f043 0304 	orr.w	r3, r3, #4
 8005928:	6313      	str	r3, [r2, #48]	@ 0x30
 800592a:	4b10      	ldr	r3, [pc, #64]	@ (800596c <HAL_ADC_MspInit+0x90>)
 800592c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800592e:	f003 0304 	and.w	r3, r3, #4
 8005932:	60fb      	str	r3, [r7, #12]
 8005934:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = ADC_VCC_Pin;
 8005936:	2304      	movs	r3, #4
 8005938:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800593a:	2303      	movs	r3, #3
 800593c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800593e:	2300      	movs	r3, #0
 8005940:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_VCC_GPIO_Port, &GPIO_InitStruct);
 8005942:	f107 0314 	add.w	r3, r7, #20
 8005946:	4619      	mov	r1, r3
 8005948:	4809      	ldr	r0, [pc, #36]	@ (8005970 <HAL_ADC_MspInit+0x94>)
 800594a:	f001 fab1 	bl	8006eb0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800594e:	2200      	movs	r2, #0
 8005950:	2100      	movs	r1, #0
 8005952:	2012      	movs	r0, #18
 8005954:	f001 f9e3 	bl	8006d1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8005958:	2012      	movs	r0, #18
 800595a:	f001 f9fc 	bl	8006d56 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800595e:	bf00      	nop
 8005960:	3728      	adds	r7, #40	@ 0x28
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	40012000 	.word	0x40012000
 800596c:	40023800 	.word	0x40023800
 8005970:	40020800 	.word	0x40020800

08005974 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b08a      	sub	sp, #40	@ 0x28
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800597c:	f107 0314 	add.w	r3, r7, #20
 8005980:	2200      	movs	r2, #0
 8005982:	601a      	str	r2, [r3, #0]
 8005984:	605a      	str	r2, [r3, #4]
 8005986:	609a      	str	r2, [r3, #8]
 8005988:	60da      	str	r2, [r3, #12]
 800598a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a19      	ldr	r2, [pc, #100]	@ (80059f8 <HAL_I2C_MspInit+0x84>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d12b      	bne.n	80059ee <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005996:	2300      	movs	r3, #0
 8005998:	613b      	str	r3, [r7, #16]
 800599a:	4b18      	ldr	r3, [pc, #96]	@ (80059fc <HAL_I2C_MspInit+0x88>)
 800599c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800599e:	4a17      	ldr	r2, [pc, #92]	@ (80059fc <HAL_I2C_MspInit+0x88>)
 80059a0:	f043 0302 	orr.w	r3, r3, #2
 80059a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80059a6:	4b15      	ldr	r3, [pc, #84]	@ (80059fc <HAL_I2C_MspInit+0x88>)
 80059a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059aa:	f003 0302 	and.w	r3, r3, #2
 80059ae:	613b      	str	r3, [r7, #16]
 80059b0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80059b2:	23c0      	movs	r3, #192	@ 0xc0
 80059b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80059b6:	2312      	movs	r3, #18
 80059b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059ba:	2300      	movs	r3, #0
 80059bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059be:	2303      	movs	r3, #3
 80059c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80059c2:	2304      	movs	r3, #4
 80059c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059c6:	f107 0314 	add.w	r3, r7, #20
 80059ca:	4619      	mov	r1, r3
 80059cc:	480c      	ldr	r0, [pc, #48]	@ (8005a00 <HAL_I2C_MspInit+0x8c>)
 80059ce:	f001 fa6f 	bl	8006eb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80059d2:	2300      	movs	r3, #0
 80059d4:	60fb      	str	r3, [r7, #12]
 80059d6:	4b09      	ldr	r3, [pc, #36]	@ (80059fc <HAL_I2C_MspInit+0x88>)
 80059d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059da:	4a08      	ldr	r2, [pc, #32]	@ (80059fc <HAL_I2C_MspInit+0x88>)
 80059dc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80059e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80059e2:	4b06      	ldr	r3, [pc, #24]	@ (80059fc <HAL_I2C_MspInit+0x88>)
 80059e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80059ea:	60fb      	str	r3, [r7, #12]
 80059ec:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80059ee:	bf00      	nop
 80059f0:	3728      	adds	r7, #40	@ 0x28
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop
 80059f8:	40005400 	.word	0x40005400
 80059fc:	40023800 	.word	0x40023800
 8005a00:	40020400 	.word	0x40020400

08005a04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b08a      	sub	sp, #40	@ 0x28
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a0c:	f107 0314 	add.w	r3, r7, #20
 8005a10:	2200      	movs	r2, #0
 8005a12:	601a      	str	r2, [r3, #0]
 8005a14:	605a      	str	r2, [r3, #4]
 8005a16:	609a      	str	r2, [r3, #8]
 8005a18:	60da      	str	r2, [r3, #12]
 8005a1a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a19      	ldr	r2, [pc, #100]	@ (8005a88 <HAL_SPI_MspInit+0x84>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d12b      	bne.n	8005a7e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005a26:	2300      	movs	r3, #0
 8005a28:	613b      	str	r3, [r7, #16]
 8005a2a:	4b18      	ldr	r3, [pc, #96]	@ (8005a8c <HAL_SPI_MspInit+0x88>)
 8005a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a2e:	4a17      	ldr	r2, [pc, #92]	@ (8005a8c <HAL_SPI_MspInit+0x88>)
 8005a30:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005a34:	6453      	str	r3, [r2, #68]	@ 0x44
 8005a36:	4b15      	ldr	r3, [pc, #84]	@ (8005a8c <HAL_SPI_MspInit+0x88>)
 8005a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005a3e:	613b      	str	r3, [r7, #16]
 8005a40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a42:	2300      	movs	r3, #0
 8005a44:	60fb      	str	r3, [r7, #12]
 8005a46:	4b11      	ldr	r3, [pc, #68]	@ (8005a8c <HAL_SPI_MspInit+0x88>)
 8005a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a4a:	4a10      	ldr	r2, [pc, #64]	@ (8005a8c <HAL_SPI_MspInit+0x88>)
 8005a4c:	f043 0301 	orr.w	r3, r3, #1
 8005a50:	6313      	str	r3, [r2, #48]	@ 0x30
 8005a52:	4b0e      	ldr	r3, [pc, #56]	@ (8005a8c <HAL_SPI_MspInit+0x88>)
 8005a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a56:	f003 0301 	and.w	r3, r3, #1
 8005a5a:	60fb      	str	r3, [r7, #12]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005a5e:	23e0      	movs	r3, #224	@ 0xe0
 8005a60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a62:	2302      	movs	r3, #2
 8005a64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a66:	2300      	movs	r3, #0
 8005a68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005a6e:	2305      	movs	r3, #5
 8005a70:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a72:	f107 0314 	add.w	r3, r7, #20
 8005a76:	4619      	mov	r1, r3
 8005a78:	4805      	ldr	r0, [pc, #20]	@ (8005a90 <HAL_SPI_MspInit+0x8c>)
 8005a7a:	f001 fa19 	bl	8006eb0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8005a7e:	bf00      	nop
 8005a80:	3728      	adds	r7, #40	@ 0x28
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	40013000 	.word	0x40013000
 8005a8c:	40023800 	.word	0x40023800
 8005a90:	40020000 	.word	0x40020000

08005a94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b088      	sub	sp, #32
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005aa4:	d116      	bne.n	8005ad4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	61fb      	str	r3, [r7, #28]
 8005aaa:	4b44      	ldr	r3, [pc, #272]	@ (8005bbc <HAL_TIM_Base_MspInit+0x128>)
 8005aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aae:	4a43      	ldr	r2, [pc, #268]	@ (8005bbc <HAL_TIM_Base_MspInit+0x128>)
 8005ab0:	f043 0301 	orr.w	r3, r3, #1
 8005ab4:	6413      	str	r3, [r2, #64]	@ 0x40
 8005ab6:	4b41      	ldr	r3, [pc, #260]	@ (8005bbc <HAL_TIM_Base_MspInit+0x128>)
 8005ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aba:	f003 0301 	and.w	r3, r3, #1
 8005abe:	61fb      	str	r3, [r7, #28]
 8005ac0:	69fb      	ldr	r3, [r7, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	2100      	movs	r1, #0
 8005ac6:	201c      	movs	r0, #28
 8005ac8:	f001 f929 	bl	8006d1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005acc:	201c      	movs	r0, #28
 8005ace:	f001 f942 	bl	8006d56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8005ad2:	e06e      	b.n	8005bb2 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM6)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a39      	ldr	r2, [pc, #228]	@ (8005bc0 <HAL_TIM_Base_MspInit+0x12c>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d116      	bne.n	8005b0c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005ade:	2300      	movs	r3, #0
 8005ae0:	61bb      	str	r3, [r7, #24]
 8005ae2:	4b36      	ldr	r3, [pc, #216]	@ (8005bbc <HAL_TIM_Base_MspInit+0x128>)
 8005ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ae6:	4a35      	ldr	r2, [pc, #212]	@ (8005bbc <HAL_TIM_Base_MspInit+0x128>)
 8005ae8:	f043 0310 	orr.w	r3, r3, #16
 8005aec:	6413      	str	r3, [r2, #64]	@ 0x40
 8005aee:	4b33      	ldr	r3, [pc, #204]	@ (8005bbc <HAL_TIM_Base_MspInit+0x128>)
 8005af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005af2:	f003 0310 	and.w	r3, r3, #16
 8005af6:	61bb      	str	r3, [r7, #24]
 8005af8:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8005afa:	2200      	movs	r2, #0
 8005afc:	2100      	movs	r1, #0
 8005afe:	2036      	movs	r0, #54	@ 0x36
 8005b00:	f001 f90d 	bl	8006d1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005b04:	2036      	movs	r0, #54	@ 0x36
 8005b06:	f001 f926 	bl	8006d56 <HAL_NVIC_EnableIRQ>
}
 8005b0a:	e052      	b.n	8005bb2 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM7)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a2c      	ldr	r2, [pc, #176]	@ (8005bc4 <HAL_TIM_Base_MspInit+0x130>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d116      	bne.n	8005b44 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005b16:	2300      	movs	r3, #0
 8005b18:	617b      	str	r3, [r7, #20]
 8005b1a:	4b28      	ldr	r3, [pc, #160]	@ (8005bbc <HAL_TIM_Base_MspInit+0x128>)
 8005b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b1e:	4a27      	ldr	r2, [pc, #156]	@ (8005bbc <HAL_TIM_Base_MspInit+0x128>)
 8005b20:	f043 0320 	orr.w	r3, r3, #32
 8005b24:	6413      	str	r3, [r2, #64]	@ 0x40
 8005b26:	4b25      	ldr	r3, [pc, #148]	@ (8005bbc <HAL_TIM_Base_MspInit+0x128>)
 8005b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b2a:	f003 0320 	and.w	r3, r3, #32
 8005b2e:	617b      	str	r3, [r7, #20]
 8005b30:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8005b32:	2200      	movs	r2, #0
 8005b34:	2100      	movs	r1, #0
 8005b36:	2037      	movs	r0, #55	@ 0x37
 8005b38:	f001 f8f1 	bl	8006d1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005b3c:	2037      	movs	r0, #55	@ 0x37
 8005b3e:	f001 f90a 	bl	8006d56 <HAL_NVIC_EnableIRQ>
}
 8005b42:	e036      	b.n	8005bb2 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM10)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a1f      	ldr	r2, [pc, #124]	@ (8005bc8 <HAL_TIM_Base_MspInit+0x134>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d116      	bne.n	8005b7c <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8005b4e:	2300      	movs	r3, #0
 8005b50:	613b      	str	r3, [r7, #16]
 8005b52:	4b1a      	ldr	r3, [pc, #104]	@ (8005bbc <HAL_TIM_Base_MspInit+0x128>)
 8005b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b56:	4a19      	ldr	r2, [pc, #100]	@ (8005bbc <HAL_TIM_Base_MspInit+0x128>)
 8005b58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8005b5e:	4b17      	ldr	r3, [pc, #92]	@ (8005bbc <HAL_TIM_Base_MspInit+0x128>)
 8005b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b66:	613b      	str	r3, [r7, #16]
 8005b68:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	2100      	movs	r1, #0
 8005b6e:	2019      	movs	r0, #25
 8005b70:	f001 f8d5 	bl	8006d1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005b74:	2019      	movs	r0, #25
 8005b76:	f001 f8ee 	bl	8006d56 <HAL_NVIC_EnableIRQ>
}
 8005b7a:	e01a      	b.n	8005bb2 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM11)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a12      	ldr	r2, [pc, #72]	@ (8005bcc <HAL_TIM_Base_MspInit+0x138>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d115      	bne.n	8005bb2 <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8005b86:	2300      	movs	r3, #0
 8005b88:	60fb      	str	r3, [r7, #12]
 8005b8a:	4b0c      	ldr	r3, [pc, #48]	@ (8005bbc <HAL_TIM_Base_MspInit+0x128>)
 8005b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b8e:	4a0b      	ldr	r2, [pc, #44]	@ (8005bbc <HAL_TIM_Base_MspInit+0x128>)
 8005b90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005b94:	6453      	str	r3, [r2, #68]	@ 0x44
 8005b96:	4b09      	ldr	r3, [pc, #36]	@ (8005bbc <HAL_TIM_Base_MspInit+0x128>)
 8005b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b9a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b9e:	60fb      	str	r3, [r7, #12]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	2100      	movs	r1, #0
 8005ba6:	201a      	movs	r0, #26
 8005ba8:	f001 f8b9 	bl	8006d1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8005bac:	201a      	movs	r0, #26
 8005bae:	f001 f8d2 	bl	8006d56 <HAL_NVIC_EnableIRQ>
}
 8005bb2:	bf00      	nop
 8005bb4:	3720      	adds	r7, #32
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	40023800 	.word	0x40023800
 8005bc0:	40001000 	.word	0x40001000
 8005bc4:	40001400 	.word	0x40001400
 8005bc8:	40014400 	.word	0x40014400
 8005bcc:	40014800 	.word	0x40014800

08005bd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b090      	sub	sp, #64	@ 0x40
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bd8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005bdc:	2200      	movs	r2, #0
 8005bde:	601a      	str	r2, [r3, #0]
 8005be0:	605a      	str	r2, [r3, #4]
 8005be2:	609a      	str	r2, [r3, #8]
 8005be4:	60da      	str	r2, [r3, #12]
 8005be6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a7f      	ldr	r2, [pc, #508]	@ (8005dec <HAL_UART_MspInit+0x21c>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d12c      	bne.n	8005c4c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005bf6:	4b7e      	ldr	r3, [pc, #504]	@ (8005df0 <HAL_UART_MspInit+0x220>)
 8005bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bfa:	4a7d      	ldr	r2, [pc, #500]	@ (8005df0 <HAL_UART_MspInit+0x220>)
 8005bfc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005c00:	6413      	str	r3, [r2, #64]	@ 0x40
 8005c02:	4b7b      	ldr	r3, [pc, #492]	@ (8005df0 <HAL_UART_MspInit+0x220>)
 8005c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c06:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005c0a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c0e:	2300      	movs	r3, #0
 8005c10:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c12:	4b77      	ldr	r3, [pc, #476]	@ (8005df0 <HAL_UART_MspInit+0x220>)
 8005c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c16:	4a76      	ldr	r2, [pc, #472]	@ (8005df0 <HAL_UART_MspInit+0x220>)
 8005c18:	f043 0301 	orr.w	r3, r3, #1
 8005c1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8005c1e:	4b74      	ldr	r3, [pc, #464]	@ (8005df0 <HAL_UART_MspInit+0x220>)
 8005c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c22:	f003 0301 	and.w	r3, r3, #1
 8005c26:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c2e:	2302      	movs	r3, #2
 8005c30:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c32:	2300      	movs	r3, #0
 8005c34:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c36:	2303      	movs	r3, #3
 8005c38:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005c3a:	2308      	movs	r3, #8
 8005c3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c3e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005c42:	4619      	mov	r1, r3
 8005c44:	486b      	ldr	r0, [pc, #428]	@ (8005df4 <HAL_UART_MspInit+0x224>)
 8005c46:	f001 f933 	bl	8006eb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8005c4a:	e0cb      	b.n	8005de4 <HAL_UART_MspInit+0x214>
  else if(huart->Instance==USART2)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a69      	ldr	r2, [pc, #420]	@ (8005df8 <HAL_UART_MspInit+0x228>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d134      	bne.n	8005cc0 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005c56:	2300      	movs	r3, #0
 8005c58:	623b      	str	r3, [r7, #32]
 8005c5a:	4b65      	ldr	r3, [pc, #404]	@ (8005df0 <HAL_UART_MspInit+0x220>)
 8005c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c5e:	4a64      	ldr	r2, [pc, #400]	@ (8005df0 <HAL_UART_MspInit+0x220>)
 8005c60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c64:	6413      	str	r3, [r2, #64]	@ 0x40
 8005c66:	4b62      	ldr	r3, [pc, #392]	@ (8005df0 <HAL_UART_MspInit+0x220>)
 8005c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c6e:	623b      	str	r3, [r7, #32]
 8005c70:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c72:	2300      	movs	r3, #0
 8005c74:	61fb      	str	r3, [r7, #28]
 8005c76:	4b5e      	ldr	r3, [pc, #376]	@ (8005df0 <HAL_UART_MspInit+0x220>)
 8005c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c7a:	4a5d      	ldr	r2, [pc, #372]	@ (8005df0 <HAL_UART_MspInit+0x220>)
 8005c7c:	f043 0301 	orr.w	r3, r3, #1
 8005c80:	6313      	str	r3, [r2, #48]	@ 0x30
 8005c82:	4b5b      	ldr	r3, [pc, #364]	@ (8005df0 <HAL_UART_MspInit+0x220>)
 8005c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c86:	f003 0301 	and.w	r3, r3, #1
 8005c8a:	61fb      	str	r3, [r7, #28]
 8005c8c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = TX2_GPS_Pin|RX2_GPS_Pin;
 8005c8e:	230c      	movs	r3, #12
 8005c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c92:	2302      	movs	r3, #2
 8005c94:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c96:	2300      	movs	r3, #0
 8005c98:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005c9e:	2307      	movs	r3, #7
 8005ca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ca2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	4852      	ldr	r0, [pc, #328]	@ (8005df4 <HAL_UART_MspInit+0x224>)
 8005caa:	f001 f901 	bl	8006eb0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005cae:	2200      	movs	r2, #0
 8005cb0:	2100      	movs	r1, #0
 8005cb2:	2026      	movs	r0, #38	@ 0x26
 8005cb4:	f001 f833 	bl	8006d1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005cb8:	2026      	movs	r0, #38	@ 0x26
 8005cba:	f001 f84c 	bl	8006d56 <HAL_NVIC_EnableIRQ>
}
 8005cbe:	e091      	b.n	8005de4 <HAL_UART_MspInit+0x214>
  else if(huart->Instance==USART3)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a4d      	ldr	r2, [pc, #308]	@ (8005dfc <HAL_UART_MspInit+0x22c>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d153      	bne.n	8005d72 <HAL_UART_MspInit+0x1a2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005cca:	2300      	movs	r3, #0
 8005ccc:	61bb      	str	r3, [r7, #24]
 8005cce:	4b48      	ldr	r3, [pc, #288]	@ (8005df0 <HAL_UART_MspInit+0x220>)
 8005cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cd2:	4a47      	ldr	r2, [pc, #284]	@ (8005df0 <HAL_UART_MspInit+0x220>)
 8005cd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005cd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8005cda:	4b45      	ldr	r3, [pc, #276]	@ (8005df0 <HAL_UART_MspInit+0x220>)
 8005cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cde:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ce2:	61bb      	str	r3, [r7, #24]
 8005ce4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	617b      	str	r3, [r7, #20]
 8005cea:	4b41      	ldr	r3, [pc, #260]	@ (8005df0 <HAL_UART_MspInit+0x220>)
 8005cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cee:	4a40      	ldr	r2, [pc, #256]	@ (8005df0 <HAL_UART_MspInit+0x220>)
 8005cf0:	f043 0304 	orr.w	r3, r3, #4
 8005cf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8005cf6:	4b3e      	ldr	r3, [pc, #248]	@ (8005df0 <HAL_UART_MspInit+0x220>)
 8005cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cfa:	f003 0304 	and.w	r3, r3, #4
 8005cfe:	617b      	str	r3, [r7, #20]
 8005d00:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d02:	2300      	movs	r3, #0
 8005d04:	613b      	str	r3, [r7, #16]
 8005d06:	4b3a      	ldr	r3, [pc, #232]	@ (8005df0 <HAL_UART_MspInit+0x220>)
 8005d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d0a:	4a39      	ldr	r2, [pc, #228]	@ (8005df0 <HAL_UART_MspInit+0x220>)
 8005d0c:	f043 0302 	orr.w	r3, r3, #2
 8005d10:	6313      	str	r3, [r2, #48]	@ 0x30
 8005d12:	4b37      	ldr	r3, [pc, #220]	@ (8005df0 <HAL_UART_MspInit+0x220>)
 8005d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d16:	f003 0302 	and.w	r3, r3, #2
 8005d1a:	613b      	str	r3, [r7, #16]
 8005d1c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = RX3_LORA_Pin;
 8005d1e:	2320      	movs	r3, #32
 8005d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d22:	2302      	movs	r3, #2
 8005d24:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d26:	2300      	movs	r3, #0
 8005d28:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d2a:	2303      	movs	r3, #3
 8005d2c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005d2e:	2307      	movs	r3, #7
 8005d30:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(RX3_LORA_GPIO_Port, &GPIO_InitStruct);
 8005d32:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005d36:	4619      	mov	r1, r3
 8005d38:	4831      	ldr	r0, [pc, #196]	@ (8005e00 <HAL_UART_MspInit+0x230>)
 8005d3a:	f001 f8b9 	bl	8006eb0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TX3_LORA_Pin;
 8005d3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d44:	2302      	movs	r3, #2
 8005d46:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005d50:	2307      	movs	r3, #7
 8005d52:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(TX3_LORA_GPIO_Port, &GPIO_InitStruct);
 8005d54:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005d58:	4619      	mov	r1, r3
 8005d5a:	482a      	ldr	r0, [pc, #168]	@ (8005e04 <HAL_UART_MspInit+0x234>)
 8005d5c:	f001 f8a8 	bl	8006eb0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8005d60:	2200      	movs	r2, #0
 8005d62:	2100      	movs	r1, #0
 8005d64:	2027      	movs	r0, #39	@ 0x27
 8005d66:	f000 ffda 	bl	8006d1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005d6a:	2027      	movs	r0, #39	@ 0x27
 8005d6c:	f000 fff3 	bl	8006d56 <HAL_NVIC_EnableIRQ>
}
 8005d70:	e038      	b.n	8005de4 <HAL_UART_MspInit+0x214>
  else if(huart->Instance==USART6)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a24      	ldr	r2, [pc, #144]	@ (8005e08 <HAL_UART_MspInit+0x238>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d133      	bne.n	8005de4 <HAL_UART_MspInit+0x214>
    __HAL_RCC_USART6_CLK_ENABLE();
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	60fb      	str	r3, [r7, #12]
 8005d80:	4b1b      	ldr	r3, [pc, #108]	@ (8005df0 <HAL_UART_MspInit+0x220>)
 8005d82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d84:	4a1a      	ldr	r2, [pc, #104]	@ (8005df0 <HAL_UART_MspInit+0x220>)
 8005d86:	f043 0320 	orr.w	r3, r3, #32
 8005d8a:	6453      	str	r3, [r2, #68]	@ 0x44
 8005d8c:	4b18      	ldr	r3, [pc, #96]	@ (8005df0 <HAL_UART_MspInit+0x220>)
 8005d8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d90:	f003 0320 	and.w	r3, r3, #32
 8005d94:	60fb      	str	r3, [r7, #12]
 8005d96:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005d98:	2300      	movs	r3, #0
 8005d9a:	60bb      	str	r3, [r7, #8]
 8005d9c:	4b14      	ldr	r3, [pc, #80]	@ (8005df0 <HAL_UART_MspInit+0x220>)
 8005d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005da0:	4a13      	ldr	r2, [pc, #76]	@ (8005df0 <HAL_UART_MspInit+0x220>)
 8005da2:	f043 0304 	orr.w	r3, r3, #4
 8005da6:	6313      	str	r3, [r2, #48]	@ 0x30
 8005da8:	4b11      	ldr	r3, [pc, #68]	@ (8005df0 <HAL_UART_MspInit+0x220>)
 8005daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dac:	f003 0304 	and.w	r3, r3, #4
 8005db0:	60bb      	str	r3, [r7, #8]
 8005db2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TX6_RS_Pin|RX6_RS_Pin;
 8005db4:	23c0      	movs	r3, #192	@ 0xc0
 8005db6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005db8:	2302      	movs	r3, #2
 8005dba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005dc0:	2303      	movs	r3, #3
 8005dc2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005dc4:	2308      	movs	r3, #8
 8005dc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005dc8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005dcc:	4619      	mov	r1, r3
 8005dce:	480c      	ldr	r0, [pc, #48]	@ (8005e00 <HAL_UART_MspInit+0x230>)
 8005dd0:	f001 f86e 	bl	8006eb0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	2100      	movs	r1, #0
 8005dd8:	2047      	movs	r0, #71	@ 0x47
 8005dda:	f000 ffa0 	bl	8006d1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8005dde:	2047      	movs	r0, #71	@ 0x47
 8005de0:	f000 ffb9 	bl	8006d56 <HAL_NVIC_EnableIRQ>
}
 8005de4:	bf00      	nop
 8005de6:	3740      	adds	r7, #64	@ 0x40
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	40004c00 	.word	0x40004c00
 8005df0:	40023800 	.word	0x40023800
 8005df4:	40020000 	.word	0x40020000
 8005df8:	40004400 	.word	0x40004400
 8005dfc:	40004800 	.word	0x40004800
 8005e00:	40020800 	.word	0x40020800
 8005e04:	40020400 	.word	0x40020400
 8005e08:	40011400 	.word	0x40011400

08005e0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005e10:	bf00      	nop
 8005e12:	e7fd      	b.n	8005e10 <NMI_Handler+0x4>

08005e14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005e14:	b480      	push	{r7}
 8005e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005e18:	bf00      	nop
 8005e1a:	e7fd      	b.n	8005e18 <HardFault_Handler+0x4>

08005e1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005e20:	bf00      	nop
 8005e22:	e7fd      	b.n	8005e20 <MemManage_Handler+0x4>

08005e24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005e24:	b480      	push	{r7}
 8005e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005e28:	bf00      	nop
 8005e2a:	e7fd      	b.n	8005e28 <BusFault_Handler+0x4>

08005e2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005e30:	bf00      	nop
 8005e32:	e7fd      	b.n	8005e30 <UsageFault_Handler+0x4>

08005e34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005e34:	b480      	push	{r7}
 8005e36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005e38:	bf00      	nop
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr

08005e42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005e42:	b480      	push	{r7}
 8005e44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005e46:	bf00      	nop
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005e50:	b480      	push	{r7}
 8005e52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005e54:	bf00      	nop
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr

08005e5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005e62:	f000 f9b1 	bl	80061c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005e66:	bf00      	nop
 8005e68:	bd80      	pop	{r7, pc}
	...

08005e6c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005e70:	4802      	ldr	r0, [pc, #8]	@ (8005e7c <ADC_IRQHandler+0x10>)
 8005e72:	f000 fb0f 	bl	8006494 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8005e76:	bf00      	nop
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	2000021c 	.word	0x2000021c

08005e80 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8005e84:	4802      	ldr	r0, [pc, #8]	@ (8005e90 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8005e86:	f003 fdee 	bl	8009a66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8005e8a:	bf00      	nop
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	200003e8 	.word	0x200003e8

08005e94 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8005e98:	4802      	ldr	r0, [pc, #8]	@ (8005ea4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8005e9a:	f003 fde4 	bl	8009a66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8005e9e:	bf00      	nop
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	20000430 	.word	0x20000430

08005ea8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005eac:	4802      	ldr	r0, [pc, #8]	@ (8005eb8 <TIM2_IRQHandler+0x10>)
 8005eae:	f003 fdda 	bl	8009a66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005eb2:	bf00      	nop
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	20000310 	.word	0x20000310

08005ebc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005ec0:	4802      	ldr	r0, [pc, #8]	@ (8005ecc <USART2_IRQHandler+0x10>)
 8005ec2:	f004 faa1 	bl	800a408 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005ec6:	bf00      	nop
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	200004bc 	.word	0x200004bc

08005ed0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005ed4:	4802      	ldr	r0, [pc, #8]	@ (8005ee0 <USART3_IRQHandler+0x10>)
 8005ed6:	f004 fa97 	bl	800a408 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005eda:	bf00      	nop
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	20000500 	.word	0x20000500

08005ee4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005ee8:	4802      	ldr	r0, [pc, #8]	@ (8005ef4 <TIM6_DAC_IRQHandler+0x10>)
 8005eea:	f003 fdbc 	bl	8009a66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005eee:	bf00      	nop
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	20000358 	.word	0x20000358

08005ef8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005efc:	4802      	ldr	r0, [pc, #8]	@ (8005f08 <TIM7_IRQHandler+0x10>)
 8005efe:	f003 fdb2 	bl	8009a66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8005f02:	bf00      	nop
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	200003a0 	.word	0x200003a0

08005f0c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8005f10:	4802      	ldr	r0, [pc, #8]	@ (8005f1c <USART6_IRQHandler+0x10>)
 8005f12:	f004 fa79 	bl	800a408 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8005f16:	bf00      	nop
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	20000544 	.word	0x20000544

08005f20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005f20:	b480      	push	{r7}
 8005f22:	af00      	add	r7, sp, #0
  return 1;
 8005f24:	2301      	movs	r3, #1
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <_kill>:

int _kill(int pid, int sig)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b082      	sub	sp, #8
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005f3a:	f006 fad7 	bl	800c4ec <__errno>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2216      	movs	r2, #22
 8005f42:	601a      	str	r2, [r3, #0]
  return -1;
 8005f44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3708      	adds	r7, #8
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <_exit>:

void _exit (int status)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b082      	sub	sp, #8
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005f58:	f04f 31ff 	mov.w	r1, #4294967295
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f7ff ffe7 	bl	8005f30 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005f62:	bf00      	nop
 8005f64:	e7fd      	b.n	8005f62 <_exit+0x12>

08005f66 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005f66:	b580      	push	{r7, lr}
 8005f68:	b086      	sub	sp, #24
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	60f8      	str	r0, [r7, #12]
 8005f6e:	60b9      	str	r1, [r7, #8]
 8005f70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005f72:	2300      	movs	r3, #0
 8005f74:	617b      	str	r3, [r7, #20]
 8005f76:	e00a      	b.n	8005f8e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005f78:	f3af 8000 	nop.w
 8005f7c:	4601      	mov	r1, r0
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	1c5a      	adds	r2, r3, #1
 8005f82:	60ba      	str	r2, [r7, #8]
 8005f84:	b2ca      	uxtb	r2, r1
 8005f86:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	617b      	str	r3, [r7, #20]
 8005f8e:	697a      	ldr	r2, [r7, #20]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	429a      	cmp	r2, r3
 8005f94:	dbf0      	blt.n	8005f78 <_read+0x12>
  }

  return len;
 8005f96:	687b      	ldr	r3, [r7, #4]
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3718      	adds	r7, #24
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b086      	sub	sp, #24
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005fac:	2300      	movs	r3, #0
 8005fae:	617b      	str	r3, [r7, #20]
 8005fb0:	e009      	b.n	8005fc6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	1c5a      	adds	r2, r3, #1
 8005fb6:	60ba      	str	r2, [r7, #8]
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	617b      	str	r3, [r7, #20]
 8005fc6:	697a      	ldr	r2, [r7, #20]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	dbf1      	blt.n	8005fb2 <_write+0x12>
  }
  return len;
 8005fce:	687b      	ldr	r3, [r7, #4]
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3718      	adds	r7, #24
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <_close>:

int _close(int file)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005fe0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	370c      	adds	r7, #12
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006000:	605a      	str	r2, [r3, #4]
  return 0;
 8006002:	2300      	movs	r3, #0
}
 8006004:	4618      	mov	r0, r3
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <_isatty>:

int _isatty(int file)
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006018:	2301      	movs	r3, #1
}
 800601a:	4618      	mov	r0, r3
 800601c:	370c      	adds	r7, #12
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr

08006026 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006026:	b480      	push	{r7}
 8006028:	b085      	sub	sp, #20
 800602a:	af00      	add	r7, sp, #0
 800602c:	60f8      	str	r0, [r7, #12]
 800602e:	60b9      	str	r1, [r7, #8]
 8006030:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3714      	adds	r7, #20
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b086      	sub	sp, #24
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006048:	4a14      	ldr	r2, [pc, #80]	@ (800609c <_sbrk+0x5c>)
 800604a:	4b15      	ldr	r3, [pc, #84]	@ (80060a0 <_sbrk+0x60>)
 800604c:	1ad3      	subs	r3, r2, r3
 800604e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006054:	4b13      	ldr	r3, [pc, #76]	@ (80060a4 <_sbrk+0x64>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d102      	bne.n	8006062 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800605c:	4b11      	ldr	r3, [pc, #68]	@ (80060a4 <_sbrk+0x64>)
 800605e:	4a12      	ldr	r2, [pc, #72]	@ (80060a8 <_sbrk+0x68>)
 8006060:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006062:	4b10      	ldr	r3, [pc, #64]	@ (80060a4 <_sbrk+0x64>)
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4413      	add	r3, r2
 800606a:	693a      	ldr	r2, [r7, #16]
 800606c:	429a      	cmp	r2, r3
 800606e:	d207      	bcs.n	8006080 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006070:	f006 fa3c 	bl	800c4ec <__errno>
 8006074:	4603      	mov	r3, r0
 8006076:	220c      	movs	r2, #12
 8006078:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800607a:	f04f 33ff 	mov.w	r3, #4294967295
 800607e:	e009      	b.n	8006094 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006080:	4b08      	ldr	r3, [pc, #32]	@ (80060a4 <_sbrk+0x64>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006086:	4b07      	ldr	r3, [pc, #28]	@ (80060a4 <_sbrk+0x64>)
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4413      	add	r3, r2
 800608e:	4a05      	ldr	r2, [pc, #20]	@ (80060a4 <_sbrk+0x64>)
 8006090:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006092:	68fb      	ldr	r3, [r7, #12]
}
 8006094:	4618      	mov	r0, r3
 8006096:	3718      	adds	r7, #24
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}
 800609c:	20020000 	.word	0x20020000
 80060a0:	00000400 	.word	0x00000400
 80060a4:	2000266c 	.word	0x2000266c
 80060a8:	200027d8 	.word	0x200027d8

080060ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80060ac:	b480      	push	{r7}
 80060ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80060b0:	4b06      	ldr	r3, [pc, #24]	@ (80060cc <SystemInit+0x20>)
 80060b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060b6:	4a05      	ldr	r2, [pc, #20]	@ (80060cc <SystemInit+0x20>)
 80060b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80060bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80060c0:	bf00      	nop
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	e000ed00 	.word	0xe000ed00

080060d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80060d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006108 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80060d4:	480d      	ldr	r0, [pc, #52]	@ (800610c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80060d6:	490e      	ldr	r1, [pc, #56]	@ (8006110 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80060d8:	4a0e      	ldr	r2, [pc, #56]	@ (8006114 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80060da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80060dc:	e002      	b.n	80060e4 <LoopCopyDataInit>

080060de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80060de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80060e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80060e2:	3304      	adds	r3, #4

080060e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80060e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80060e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80060e8:	d3f9      	bcc.n	80060de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80060ea:	4a0b      	ldr	r2, [pc, #44]	@ (8006118 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80060ec:	4c0b      	ldr	r4, [pc, #44]	@ (800611c <LoopFillZerobss+0x26>)
  movs r3, #0
 80060ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80060f0:	e001      	b.n	80060f6 <LoopFillZerobss>

080060f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80060f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80060f4:	3204      	adds	r2, #4

080060f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80060f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80060f8:	d3fb      	bcc.n	80060f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80060fa:	f7ff ffd7 	bl	80060ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80060fe:	f006 f9fb 	bl	800c4f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006102:	f7fd fb95 	bl	8003830 <main>
  bx  lr    
 8006106:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006108:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800610c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006110:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8006114:	0800f710 	.word	0x0800f710
  ldr r2, =_sbss
 8006118:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 800611c:	200027d4 	.word	0x200027d4

08006120 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006120:	e7fe      	b.n	8006120 <CAN1_RX0_IRQHandler>
	...

08006124 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006128:	4b0e      	ldr	r3, [pc, #56]	@ (8006164 <HAL_Init+0x40>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a0d      	ldr	r2, [pc, #52]	@ (8006164 <HAL_Init+0x40>)
 800612e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006132:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006134:	4b0b      	ldr	r3, [pc, #44]	@ (8006164 <HAL_Init+0x40>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a0a      	ldr	r2, [pc, #40]	@ (8006164 <HAL_Init+0x40>)
 800613a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800613e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006140:	4b08      	ldr	r3, [pc, #32]	@ (8006164 <HAL_Init+0x40>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a07      	ldr	r2, [pc, #28]	@ (8006164 <HAL_Init+0x40>)
 8006146:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800614a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800614c:	2003      	movs	r0, #3
 800614e:	f000 fddb 	bl	8006d08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006152:	200f      	movs	r0, #15
 8006154:	f000 f808 	bl	8006168 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006158:	f7ff fb98 	bl	800588c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800615c:	2300      	movs	r3, #0
}
 800615e:	4618      	mov	r0, r3
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	40023c00 	.word	0x40023c00

08006168 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b082      	sub	sp, #8
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006170:	4b12      	ldr	r3, [pc, #72]	@ (80061bc <HAL_InitTick+0x54>)
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	4b12      	ldr	r3, [pc, #72]	@ (80061c0 <HAL_InitTick+0x58>)
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	4619      	mov	r1, r3
 800617a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800617e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006182:	fbb2 f3f3 	udiv	r3, r2, r3
 8006186:	4618      	mov	r0, r3
 8006188:	f000 fdf3 	bl	8006d72 <HAL_SYSTICK_Config>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d001      	beq.n	8006196 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e00e      	b.n	80061b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2b0f      	cmp	r3, #15
 800619a:	d80a      	bhi.n	80061b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800619c:	2200      	movs	r2, #0
 800619e:	6879      	ldr	r1, [r7, #4]
 80061a0:	f04f 30ff 	mov.w	r0, #4294967295
 80061a4:	f000 fdbb 	bl	8006d1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80061a8:	4a06      	ldr	r2, [pc, #24]	@ (80061c4 <HAL_InitTick+0x5c>)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80061ae:	2300      	movs	r3, #0
 80061b0:	e000      	b.n	80061b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3708      	adds	r7, #8
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}
 80061bc:	20000004 	.word	0x20000004
 80061c0:	2000000c 	.word	0x2000000c
 80061c4:	20000008 	.word	0x20000008

080061c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80061c8:	b480      	push	{r7}
 80061ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80061cc:	4b06      	ldr	r3, [pc, #24]	@ (80061e8 <HAL_IncTick+0x20>)
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	461a      	mov	r2, r3
 80061d2:	4b06      	ldr	r3, [pc, #24]	@ (80061ec <HAL_IncTick+0x24>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4413      	add	r3, r2
 80061d8:	4a04      	ldr	r2, [pc, #16]	@ (80061ec <HAL_IncTick+0x24>)
 80061da:	6013      	str	r3, [r2, #0]
}
 80061dc:	bf00      	nop
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr
 80061e6:	bf00      	nop
 80061e8:	2000000c 	.word	0x2000000c
 80061ec:	20002670 	.word	0x20002670

080061f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80061f0:	b480      	push	{r7}
 80061f2:	af00      	add	r7, sp, #0
  return uwTick;
 80061f4:	4b03      	ldr	r3, [pc, #12]	@ (8006204 <HAL_GetTick+0x14>)
 80061f6:	681b      	ldr	r3, [r3, #0]
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr
 8006202:	bf00      	nop
 8006204:	20002670 	.word	0x20002670

08006208 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006210:	f7ff ffee 	bl	80061f0 <HAL_GetTick>
 8006214:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006220:	d005      	beq.n	800622e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006222:	4b0a      	ldr	r3, [pc, #40]	@ (800624c <HAL_Delay+0x44>)
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	461a      	mov	r2, r3
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	4413      	add	r3, r2
 800622c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800622e:	bf00      	nop
 8006230:	f7ff ffde 	bl	80061f0 <HAL_GetTick>
 8006234:	4602      	mov	r2, r0
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	68fa      	ldr	r2, [r7, #12]
 800623c:	429a      	cmp	r2, r3
 800623e:	d8f7      	bhi.n	8006230 <HAL_Delay+0x28>
  {
  }
}
 8006240:	bf00      	nop
 8006242:	bf00      	nop
 8006244:	3710      	adds	r7, #16
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	2000000c 	.word	0x2000000c

08006250 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006258:	2300      	movs	r3, #0
 800625a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d101      	bne.n	8006266 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e033      	b.n	80062ce <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800626a:	2b00      	cmp	r3, #0
 800626c:	d109      	bne.n	8006282 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f7ff fb34 	bl	80058dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006286:	f003 0310 	and.w	r3, r3, #16
 800628a:	2b00      	cmp	r3, #0
 800628c:	d118      	bne.n	80062c0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006292:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006296:	f023 0302 	bic.w	r3, r3, #2
 800629a:	f043 0202 	orr.w	r2, r3, #2
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 fb5a 	bl	800695c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062b2:	f023 0303 	bic.w	r3, r3, #3
 80062b6:	f043 0201 	orr.w	r2, r3, #1
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	641a      	str	r2, [r3, #64]	@ 0x40
 80062be:	e001      	b.n	80062c4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80062cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3710      	adds	r7, #16
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
	...

080062d8 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80062d8:	b480      	push	{r7}
 80062da:	b085      	sub	sp, #20
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80062e0:	2300      	movs	r3, #0
 80062e2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d101      	bne.n	80062f2 <HAL_ADC_Start_IT+0x1a>
 80062ee:	2302      	movs	r3, #2
 80062f0:	e0bd      	b.n	800646e <HAL_ADC_Start_IT+0x196>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2201      	movs	r2, #1
 80062f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	f003 0301 	and.w	r3, r3, #1
 8006304:	2b01      	cmp	r3, #1
 8006306:	d018      	beq.n	800633a <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	689a      	ldr	r2, [r3, #8]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f042 0201 	orr.w	r2, r2, #1
 8006316:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006318:	4b58      	ldr	r3, [pc, #352]	@ (800647c <HAL_ADC_Start_IT+0x1a4>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a58      	ldr	r2, [pc, #352]	@ (8006480 <HAL_ADC_Start_IT+0x1a8>)
 800631e:	fba2 2303 	umull	r2, r3, r2, r3
 8006322:	0c9a      	lsrs	r2, r3, #18
 8006324:	4613      	mov	r3, r2
 8006326:	005b      	lsls	r3, r3, #1
 8006328:	4413      	add	r3, r2
 800632a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800632c:	e002      	b.n	8006334 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	3b01      	subs	r3, #1
 8006332:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d1f9      	bne.n	800632e <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	f003 0301 	and.w	r3, r3, #1
 8006344:	2b01      	cmp	r3, #1
 8006346:	f040 8085 	bne.w	8006454 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800634e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8006352:	f023 0301 	bic.w	r3, r3, #1
 8006356:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006368:	2b00      	cmp	r3, #0
 800636a:	d007      	beq.n	800637c <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006370:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006374:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006380:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006384:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006388:	d106      	bne.n	8006398 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800638e:	f023 0206 	bic.w	r2, r3, #6
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	645a      	str	r2, [r3, #68]	@ 0x44
 8006396:	e002      	b.n	800639e <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80063a6:	4b37      	ldr	r3, [pc, #220]	@ (8006484 <HAL_ADC_Start_IT+0x1ac>)
 80063a8:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80063b2:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	6812      	ldr	r2, [r2, #0]
 80063be:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80063c2:	f043 0320 	orr.w	r3, r3, #32
 80063c6:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	f003 031f 	and.w	r3, r3, #31
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d12a      	bne.n	800642a <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a2b      	ldr	r2, [pc, #172]	@ (8006488 <HAL_ADC_Start_IT+0x1b0>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d015      	beq.n	800640a <HAL_ADC_Start_IT+0x132>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a2a      	ldr	r2, [pc, #168]	@ (800648c <HAL_ADC_Start_IT+0x1b4>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d105      	bne.n	80063f4 <HAL_ADC_Start_IT+0x11c>
 80063e8:	4b26      	ldr	r3, [pc, #152]	@ (8006484 <HAL_ADC_Start_IT+0x1ac>)
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	f003 031f 	and.w	r3, r3, #31
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d00a      	beq.n	800640a <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a25      	ldr	r2, [pc, #148]	@ (8006490 <HAL_ADC_Start_IT+0x1b8>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d136      	bne.n	800646c <HAL_ADC_Start_IT+0x194>
 80063fe:	4b21      	ldr	r3, [pc, #132]	@ (8006484 <HAL_ADC_Start_IT+0x1ac>)
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	f003 0310 	and.w	r3, r3, #16
 8006406:	2b00      	cmp	r3, #0
 8006408:	d130      	bne.n	800646c <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006414:	2b00      	cmp	r3, #0
 8006416:	d129      	bne.n	800646c <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	689a      	ldr	r2, [r3, #8]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8006426:	609a      	str	r2, [r3, #8]
 8006428:	e020      	b.n	800646c <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a16      	ldr	r2, [pc, #88]	@ (8006488 <HAL_ADC_Start_IT+0x1b0>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d11b      	bne.n	800646c <HAL_ADC_Start_IT+0x194>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800643e:	2b00      	cmp	r3, #0
 8006440:	d114      	bne.n	800646c <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	689a      	ldr	r2, [r3, #8]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8006450:	609a      	str	r2, [r3, #8]
 8006452:	e00b      	b.n	800646c <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006458:	f043 0210 	orr.w	r2, r3, #16
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006464:	f043 0201 	orr.w	r2, r3, #1
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800646c:	2300      	movs	r3, #0
}
 800646e:	4618      	mov	r0, r3
 8006470:	3714      	adds	r7, #20
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr
 800647a:	bf00      	nop
 800647c:	20000004 	.word	0x20000004
 8006480:	431bde83 	.word	0x431bde83
 8006484:	40012300 	.word	0x40012300
 8006488:	40012000 	.word	0x40012000
 800648c:	40012100 	.word	0x40012100
 8006490:	40012200 	.word	0x40012200

08006494 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b086      	sub	sp, #24
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800649c:	2300      	movs	r3, #0
 800649e:	617b      	str	r3, [r7, #20]
 80064a0:	2300      	movs	r3, #0
 80064a2:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f003 0302 	and.w	r3, r3, #2
 80064ba:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	f003 0320 	and.w	r3, r3, #32
 80064c2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d049      	beq.n	800655e <HAL_ADC_IRQHandler+0xca>
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d046      	beq.n	800655e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064d4:	f003 0310 	and.w	r3, r3, #16
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d105      	bne.n	80064e8 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064e0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d12b      	bne.n	800654e <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d127      	bne.n	800654e <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006504:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006508:	2b00      	cmp	r3, #0
 800650a:	d006      	beq.n	800651a <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006516:	2b00      	cmp	r3, #0
 8006518:	d119      	bne.n	800654e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	685a      	ldr	r2, [r3, #4]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f022 0220 	bic.w	r2, r2, #32
 8006528:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800652e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800653a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800653e:	2b00      	cmp	r3, #0
 8006540:	d105      	bne.n	800654e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006546:	f043 0201 	orr.w	r2, r3, #1
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f7fd f94c 	bl	80037ec <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f06f 0212 	mvn.w	r2, #18
 800655c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f003 0304 	and.w	r3, r3, #4
 8006564:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800656c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d057      	beq.n	8006624 <HAL_ADC_IRQHandler+0x190>
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d054      	beq.n	8006624 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800657e:	f003 0310 	and.w	r3, r3, #16
 8006582:	2b00      	cmp	r3, #0
 8006584:	d105      	bne.n	8006592 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800658a:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800659c:	2b00      	cmp	r3, #0
 800659e:	d139      	bne.n	8006614 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065a6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d006      	beq.n	80065bc <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d12b      	bne.n	8006614 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d124      	bne.n	8006614 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d11d      	bne.n	8006614 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d119      	bne.n	8006614 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	685a      	ldr	r2, [r3, #4]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80065ee:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065f4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006600:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006604:	2b00      	cmp	r3, #0
 8006606:	d105      	bne.n	8006614 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800660c:	f043 0201 	orr.w	r2, r3, #1
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f000 fa9d 	bl	8006b54 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f06f 020c 	mvn.w	r2, #12
 8006622:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f003 0301 	and.w	r3, r3, #1
 800662a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006632:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d017      	beq.n	800666a <HAL_ADC_IRQHandler+0x1d6>
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d014      	beq.n	800666a <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f003 0301 	and.w	r3, r3, #1
 800664a:	2b01      	cmp	r3, #1
 800664c:	d10d      	bne.n	800666a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006652:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 f837 	bl	80066ce <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f06f 0201 	mvn.w	r2, #1
 8006668:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f003 0320 	and.w	r3, r3, #32
 8006670:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006678:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d015      	beq.n	80066ac <HAL_ADC_IRQHandler+0x218>
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d012      	beq.n	80066ac <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800668a:	f043 0202 	orr.w	r2, r3, #2
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f06f 0220 	mvn.w	r2, #32
 800669a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 f820 	bl	80066e2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f06f 0220 	mvn.w	r2, #32
 80066aa:	601a      	str	r2, [r3, #0]
  }
}
 80066ac:	bf00      	nop
 80066ae:	3718      	adds	r7, #24
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	370c      	adds	r7, #12
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr

080066ce <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80066ce:	b480      	push	{r7}
 80066d0:	b083      	sub	sp, #12
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80066d6:	bf00      	nop
 80066d8:	370c      	adds	r7, #12
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr

080066e2 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80066e2:	b480      	push	{r7}
 80066e4:	b083      	sub	sp, #12
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80066ea:	bf00      	nop
 80066ec:	370c      	adds	r7, #12
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr
	...

080066f8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b085      	sub	sp, #20
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006702:	2300      	movs	r3, #0
 8006704:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800670c:	2b01      	cmp	r3, #1
 800670e:	d101      	bne.n	8006714 <HAL_ADC_ConfigChannel+0x1c>
 8006710:	2302      	movs	r3, #2
 8006712:	e113      	b.n	800693c <HAL_ADC_ConfigChannel+0x244>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2201      	movs	r2, #1
 8006718:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	2b09      	cmp	r3, #9
 8006722:	d925      	bls.n	8006770 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	68d9      	ldr	r1, [r3, #12]
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	b29b      	uxth	r3, r3
 8006730:	461a      	mov	r2, r3
 8006732:	4613      	mov	r3, r2
 8006734:	005b      	lsls	r3, r3, #1
 8006736:	4413      	add	r3, r2
 8006738:	3b1e      	subs	r3, #30
 800673a:	2207      	movs	r2, #7
 800673c:	fa02 f303 	lsl.w	r3, r2, r3
 8006740:	43da      	mvns	r2, r3
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	400a      	ands	r2, r1
 8006748:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68d9      	ldr	r1, [r3, #12]
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	689a      	ldr	r2, [r3, #8]
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	b29b      	uxth	r3, r3
 800675a:	4618      	mov	r0, r3
 800675c:	4603      	mov	r3, r0
 800675e:	005b      	lsls	r3, r3, #1
 8006760:	4403      	add	r3, r0
 8006762:	3b1e      	subs	r3, #30
 8006764:	409a      	lsls	r2, r3
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	430a      	orrs	r2, r1
 800676c:	60da      	str	r2, [r3, #12]
 800676e:	e022      	b.n	80067b6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	6919      	ldr	r1, [r3, #16]
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	b29b      	uxth	r3, r3
 800677c:	461a      	mov	r2, r3
 800677e:	4613      	mov	r3, r2
 8006780:	005b      	lsls	r3, r3, #1
 8006782:	4413      	add	r3, r2
 8006784:	2207      	movs	r2, #7
 8006786:	fa02 f303 	lsl.w	r3, r2, r3
 800678a:	43da      	mvns	r2, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	400a      	ands	r2, r1
 8006792:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	6919      	ldr	r1, [r3, #16]
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	689a      	ldr	r2, [r3, #8]
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	4618      	mov	r0, r3
 80067a6:	4603      	mov	r3, r0
 80067a8:	005b      	lsls	r3, r3, #1
 80067aa:	4403      	add	r3, r0
 80067ac:	409a      	lsls	r2, r3
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	430a      	orrs	r2, r1
 80067b4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	2b06      	cmp	r3, #6
 80067bc:	d824      	bhi.n	8006808 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	685a      	ldr	r2, [r3, #4]
 80067c8:	4613      	mov	r3, r2
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	4413      	add	r3, r2
 80067ce:	3b05      	subs	r3, #5
 80067d0:	221f      	movs	r2, #31
 80067d2:	fa02 f303 	lsl.w	r3, r2, r3
 80067d6:	43da      	mvns	r2, r3
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	400a      	ands	r2, r1
 80067de:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	4618      	mov	r0, r3
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	685a      	ldr	r2, [r3, #4]
 80067f2:	4613      	mov	r3, r2
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	4413      	add	r3, r2
 80067f8:	3b05      	subs	r3, #5
 80067fa:	fa00 f203 	lsl.w	r2, r0, r3
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	430a      	orrs	r2, r1
 8006804:	635a      	str	r2, [r3, #52]	@ 0x34
 8006806:	e04c      	b.n	80068a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	2b0c      	cmp	r3, #12
 800680e:	d824      	bhi.n	800685a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	685a      	ldr	r2, [r3, #4]
 800681a:	4613      	mov	r3, r2
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	4413      	add	r3, r2
 8006820:	3b23      	subs	r3, #35	@ 0x23
 8006822:	221f      	movs	r2, #31
 8006824:	fa02 f303 	lsl.w	r3, r2, r3
 8006828:	43da      	mvns	r2, r3
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	400a      	ands	r2, r1
 8006830:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	b29b      	uxth	r3, r3
 800683e:	4618      	mov	r0, r3
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	685a      	ldr	r2, [r3, #4]
 8006844:	4613      	mov	r3, r2
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	4413      	add	r3, r2
 800684a:	3b23      	subs	r3, #35	@ 0x23
 800684c:	fa00 f203 	lsl.w	r2, r0, r3
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	430a      	orrs	r2, r1
 8006856:	631a      	str	r2, [r3, #48]	@ 0x30
 8006858:	e023      	b.n	80068a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	685a      	ldr	r2, [r3, #4]
 8006864:	4613      	mov	r3, r2
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	4413      	add	r3, r2
 800686a:	3b41      	subs	r3, #65	@ 0x41
 800686c:	221f      	movs	r2, #31
 800686e:	fa02 f303 	lsl.w	r3, r2, r3
 8006872:	43da      	mvns	r2, r3
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	400a      	ands	r2, r1
 800687a:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	b29b      	uxth	r3, r3
 8006888:	4618      	mov	r0, r3
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	685a      	ldr	r2, [r3, #4]
 800688e:	4613      	mov	r3, r2
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	4413      	add	r3, r2
 8006894:	3b41      	subs	r3, #65	@ 0x41
 8006896:	fa00 f203 	lsl.w	r2, r0, r3
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	430a      	orrs	r2, r1
 80068a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80068a2:	4b29      	ldr	r3, [pc, #164]	@ (8006948 <HAL_ADC_ConfigChannel+0x250>)
 80068a4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a28      	ldr	r2, [pc, #160]	@ (800694c <HAL_ADC_ConfigChannel+0x254>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d10f      	bne.n	80068d0 <HAL_ADC_ConfigChannel+0x1d8>
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	2b12      	cmp	r3, #18
 80068b6:	d10b      	bne.n	80068d0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a1d      	ldr	r2, [pc, #116]	@ (800694c <HAL_ADC_ConfigChannel+0x254>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d12b      	bne.n	8006932 <HAL_ADC_ConfigChannel+0x23a>
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a1c      	ldr	r2, [pc, #112]	@ (8006950 <HAL_ADC_ConfigChannel+0x258>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d003      	beq.n	80068ec <HAL_ADC_ConfigChannel+0x1f4>
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	2b11      	cmp	r3, #17
 80068ea:	d122      	bne.n	8006932 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a11      	ldr	r2, [pc, #68]	@ (8006950 <HAL_ADC_ConfigChannel+0x258>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d111      	bne.n	8006932 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800690e:	4b11      	ldr	r3, [pc, #68]	@ (8006954 <HAL_ADC_ConfigChannel+0x25c>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a11      	ldr	r2, [pc, #68]	@ (8006958 <HAL_ADC_ConfigChannel+0x260>)
 8006914:	fba2 2303 	umull	r2, r3, r2, r3
 8006918:	0c9a      	lsrs	r2, r3, #18
 800691a:	4613      	mov	r3, r2
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	4413      	add	r3, r2
 8006920:	005b      	lsls	r3, r3, #1
 8006922:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006924:	e002      	b.n	800692c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	3b01      	subs	r3, #1
 800692a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d1f9      	bne.n	8006926 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800693a:	2300      	movs	r3, #0
}
 800693c:	4618      	mov	r0, r3
 800693e:	3714      	adds	r7, #20
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr
 8006948:	40012300 	.word	0x40012300
 800694c:	40012000 	.word	0x40012000
 8006950:	10000012 	.word	0x10000012
 8006954:	20000004 	.word	0x20000004
 8006958:	431bde83 	.word	0x431bde83

0800695c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800695c:	b480      	push	{r7}
 800695e:	b085      	sub	sp, #20
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006964:	4b79      	ldr	r3, [pc, #484]	@ (8006b4c <ADC_Init+0x1f0>)
 8006966:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	685a      	ldr	r2, [r3, #4]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	431a      	orrs	r2, r3
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	685a      	ldr	r2, [r3, #4]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006990:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	6859      	ldr	r1, [r3, #4]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	691b      	ldr	r3, [r3, #16]
 800699c:	021a      	lsls	r2, r3, #8
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	430a      	orrs	r2, r1
 80069a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	685a      	ldr	r2, [r3, #4]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80069b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	6859      	ldr	r1, [r3, #4]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	689a      	ldr	r2, [r3, #8]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	430a      	orrs	r2, r1
 80069c6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	689a      	ldr	r2, [r3, #8]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80069d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	6899      	ldr	r1, [r3, #8]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	68da      	ldr	r2, [r3, #12]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	430a      	orrs	r2, r1
 80069e8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069ee:	4a58      	ldr	r2, [pc, #352]	@ (8006b50 <ADC_Init+0x1f4>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d022      	beq.n	8006a3a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	689a      	ldr	r2, [r3, #8]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006a02:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	6899      	ldr	r1, [r3, #8]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	430a      	orrs	r2, r1
 8006a14:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	689a      	ldr	r2, [r3, #8]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006a24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	6899      	ldr	r1, [r3, #8]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	430a      	orrs	r2, r1
 8006a36:	609a      	str	r2, [r3, #8]
 8006a38:	e00f      	b.n	8006a5a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	689a      	ldr	r2, [r3, #8]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006a48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	689a      	ldr	r2, [r3, #8]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006a58:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	689a      	ldr	r2, [r3, #8]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f022 0202 	bic.w	r2, r2, #2
 8006a68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	6899      	ldr	r1, [r3, #8]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	7e1b      	ldrb	r3, [r3, #24]
 8006a74:	005a      	lsls	r2, r3, #1
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	430a      	orrs	r2, r1
 8006a7c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d01b      	beq.n	8006ac0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	685a      	ldr	r2, [r3, #4]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a96:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	685a      	ldr	r2, [r3, #4]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8006aa6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	6859      	ldr	r1, [r3, #4]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ab2:	3b01      	subs	r3, #1
 8006ab4:	035a      	lsls	r2, r3, #13
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	430a      	orrs	r2, r1
 8006abc:	605a      	str	r2, [r3, #4]
 8006abe:	e007      	b.n	8006ad0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	685a      	ldr	r2, [r3, #4]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006ace:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8006ade:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	69db      	ldr	r3, [r3, #28]
 8006aea:	3b01      	subs	r3, #1
 8006aec:	051a      	lsls	r2, r3, #20
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	430a      	orrs	r2, r1
 8006af4:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	689a      	ldr	r2, [r3, #8]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006b04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	6899      	ldr	r1, [r3, #8]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006b12:	025a      	lsls	r2, r3, #9
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	430a      	orrs	r2, r1
 8006b1a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	689a      	ldr	r2, [r3, #8]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	6899      	ldr	r1, [r3, #8]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	695b      	ldr	r3, [r3, #20]
 8006b36:	029a      	lsls	r2, r3, #10
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	430a      	orrs	r2, r1
 8006b3e:	609a      	str	r2, [r3, #8]
}
 8006b40:	bf00      	nop
 8006b42:	3714      	adds	r7, #20
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr
 8006b4c:	40012300 	.word	0x40012300
 8006b50:	0f000001 	.word	0x0f000001

08006b54 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8006b5c:	bf00      	nop
 8006b5e:	370c      	adds	r7, #12
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b085      	sub	sp, #20
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f003 0307 	and.w	r3, r3, #7
 8006b76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006b78:	4b0c      	ldr	r3, [pc, #48]	@ (8006bac <__NVIC_SetPriorityGrouping+0x44>)
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006b7e:	68ba      	ldr	r2, [r7, #8]
 8006b80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006b84:	4013      	ands	r3, r2
 8006b86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006b90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006b94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006b9a:	4a04      	ldr	r2, [pc, #16]	@ (8006bac <__NVIC_SetPriorityGrouping+0x44>)
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	60d3      	str	r3, [r2, #12]
}
 8006ba0:	bf00      	nop
 8006ba2:	3714      	adds	r7, #20
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr
 8006bac:	e000ed00 	.word	0xe000ed00

08006bb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006bb4:	4b04      	ldr	r3, [pc, #16]	@ (8006bc8 <__NVIC_GetPriorityGrouping+0x18>)
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	0a1b      	lsrs	r3, r3, #8
 8006bba:	f003 0307 	and.w	r3, r3, #7
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr
 8006bc8:	e000ed00 	.word	0xe000ed00

08006bcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b083      	sub	sp, #12
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	db0b      	blt.n	8006bf6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006bde:	79fb      	ldrb	r3, [r7, #7]
 8006be0:	f003 021f 	and.w	r2, r3, #31
 8006be4:	4907      	ldr	r1, [pc, #28]	@ (8006c04 <__NVIC_EnableIRQ+0x38>)
 8006be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bea:	095b      	lsrs	r3, r3, #5
 8006bec:	2001      	movs	r0, #1
 8006bee:	fa00 f202 	lsl.w	r2, r0, r2
 8006bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006bf6:	bf00      	nop
 8006bf8:	370c      	adds	r7, #12
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr
 8006c02:	bf00      	nop
 8006c04:	e000e100 	.word	0xe000e100

08006c08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	4603      	mov	r3, r0
 8006c10:	6039      	str	r1, [r7, #0]
 8006c12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	db0a      	blt.n	8006c32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	b2da      	uxtb	r2, r3
 8006c20:	490c      	ldr	r1, [pc, #48]	@ (8006c54 <__NVIC_SetPriority+0x4c>)
 8006c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c26:	0112      	lsls	r2, r2, #4
 8006c28:	b2d2      	uxtb	r2, r2
 8006c2a:	440b      	add	r3, r1
 8006c2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006c30:	e00a      	b.n	8006c48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	b2da      	uxtb	r2, r3
 8006c36:	4908      	ldr	r1, [pc, #32]	@ (8006c58 <__NVIC_SetPriority+0x50>)
 8006c38:	79fb      	ldrb	r3, [r7, #7]
 8006c3a:	f003 030f 	and.w	r3, r3, #15
 8006c3e:	3b04      	subs	r3, #4
 8006c40:	0112      	lsls	r2, r2, #4
 8006c42:	b2d2      	uxtb	r2, r2
 8006c44:	440b      	add	r3, r1
 8006c46:	761a      	strb	r2, [r3, #24]
}
 8006c48:	bf00      	nop
 8006c4a:	370c      	adds	r7, #12
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr
 8006c54:	e000e100 	.word	0xe000e100
 8006c58:	e000ed00 	.word	0xe000ed00

08006c5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b089      	sub	sp, #36	@ 0x24
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	60f8      	str	r0, [r7, #12]
 8006c64:	60b9      	str	r1, [r7, #8]
 8006c66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f003 0307 	and.w	r3, r3, #7
 8006c6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006c70:	69fb      	ldr	r3, [r7, #28]
 8006c72:	f1c3 0307 	rsb	r3, r3, #7
 8006c76:	2b04      	cmp	r3, #4
 8006c78:	bf28      	it	cs
 8006c7a:	2304      	movcs	r3, #4
 8006c7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006c7e:	69fb      	ldr	r3, [r7, #28]
 8006c80:	3304      	adds	r3, #4
 8006c82:	2b06      	cmp	r3, #6
 8006c84:	d902      	bls.n	8006c8c <NVIC_EncodePriority+0x30>
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	3b03      	subs	r3, #3
 8006c8a:	e000      	b.n	8006c8e <NVIC_EncodePriority+0x32>
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006c90:	f04f 32ff 	mov.w	r2, #4294967295
 8006c94:	69bb      	ldr	r3, [r7, #24]
 8006c96:	fa02 f303 	lsl.w	r3, r2, r3
 8006c9a:	43da      	mvns	r2, r3
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	401a      	ands	r2, r3
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006ca4:	f04f 31ff 	mov.w	r1, #4294967295
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	fa01 f303 	lsl.w	r3, r1, r3
 8006cae:	43d9      	mvns	r1, r3
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006cb4:	4313      	orrs	r3, r2
         );
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3724      	adds	r7, #36	@ 0x24
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr
	...

08006cc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b082      	sub	sp, #8
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	3b01      	subs	r3, #1
 8006cd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006cd4:	d301      	bcc.n	8006cda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e00f      	b.n	8006cfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006cda:	4a0a      	ldr	r2, [pc, #40]	@ (8006d04 <SysTick_Config+0x40>)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	3b01      	subs	r3, #1
 8006ce0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006ce2:	210f      	movs	r1, #15
 8006ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ce8:	f7ff ff8e 	bl	8006c08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006cec:	4b05      	ldr	r3, [pc, #20]	@ (8006d04 <SysTick_Config+0x40>)
 8006cee:	2200      	movs	r2, #0
 8006cf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006cf2:	4b04      	ldr	r3, [pc, #16]	@ (8006d04 <SysTick_Config+0x40>)
 8006cf4:	2207      	movs	r2, #7
 8006cf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3708      	adds	r7, #8
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	e000e010 	.word	0xe000e010

08006d08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f7ff ff29 	bl	8006b68 <__NVIC_SetPriorityGrouping>
}
 8006d16:	bf00      	nop
 8006d18:	3708      	adds	r7, #8
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}

08006d1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006d1e:	b580      	push	{r7, lr}
 8006d20:	b086      	sub	sp, #24
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	4603      	mov	r3, r0
 8006d26:	60b9      	str	r1, [r7, #8]
 8006d28:	607a      	str	r2, [r7, #4]
 8006d2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006d30:	f7ff ff3e 	bl	8006bb0 <__NVIC_GetPriorityGrouping>
 8006d34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	68b9      	ldr	r1, [r7, #8]
 8006d3a:	6978      	ldr	r0, [r7, #20]
 8006d3c:	f7ff ff8e 	bl	8006c5c <NVIC_EncodePriority>
 8006d40:	4602      	mov	r2, r0
 8006d42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d46:	4611      	mov	r1, r2
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f7ff ff5d 	bl	8006c08 <__NVIC_SetPriority>
}
 8006d4e:	bf00      	nop
 8006d50:	3718      	adds	r7, #24
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}

08006d56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006d56:	b580      	push	{r7, lr}
 8006d58:	b082      	sub	sp, #8
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d64:	4618      	mov	r0, r3
 8006d66:	f7ff ff31 	bl	8006bcc <__NVIC_EnableIRQ>
}
 8006d6a:	bf00      	nop
 8006d6c:	3708      	adds	r7, #8
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}

08006d72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006d72:	b580      	push	{r7, lr}
 8006d74:	b082      	sub	sp, #8
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f7ff ffa2 	bl	8006cc4 <SysTick_Config>
 8006d80:	4603      	mov	r3, r0
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3708      	adds	r7, #8
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}

08006d8a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006d8a:	b580      	push	{r7, lr}
 8006d8c:	b084      	sub	sp, #16
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d96:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006d98:	f7ff fa2a 	bl	80061f0 <HAL_GetTick>
 8006d9c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	d008      	beq.n	8006dbc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2280      	movs	r2, #128	@ 0x80
 8006dae:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8006db8:	2301      	movs	r3, #1
 8006dba:	e052      	b.n	8006e62 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f022 0216 	bic.w	r2, r2, #22
 8006dca:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	695a      	ldr	r2, [r3, #20]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006dda:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d103      	bne.n	8006dec <HAL_DMA_Abort+0x62>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d007      	beq.n	8006dfc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f022 0208 	bic.w	r2, r2, #8
 8006dfa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f022 0201 	bic.w	r2, r2, #1
 8006e0a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006e0c:	e013      	b.n	8006e36 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006e0e:	f7ff f9ef 	bl	80061f0 <HAL_GetTick>
 8006e12:	4602      	mov	r2, r0
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	1ad3      	subs	r3, r2, r3
 8006e18:	2b05      	cmp	r3, #5
 8006e1a:	d90c      	bls.n	8006e36 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2220      	movs	r2, #32
 8006e20:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2203      	movs	r2, #3
 8006e26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8006e32:	2303      	movs	r3, #3
 8006e34:	e015      	b.n	8006e62 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 0301 	and.w	r3, r3, #1
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d1e4      	bne.n	8006e0e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e48:	223f      	movs	r2, #63	@ 0x3f
 8006e4a:	409a      	lsls	r2, r3
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2201      	movs	r2, #1
 8006e54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8006e60:	2300      	movs	r3, #0
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3710      	adds	r7, #16
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006e6a:	b480      	push	{r7}
 8006e6c:	b083      	sub	sp, #12
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006e78:	b2db      	uxtb	r3, r3
 8006e7a:	2b02      	cmp	r3, #2
 8006e7c:	d004      	beq.n	8006e88 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2280      	movs	r2, #128	@ 0x80
 8006e82:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006e84:	2301      	movs	r3, #1
 8006e86:	e00c      	b.n	8006ea2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2205      	movs	r2, #5
 8006e8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f022 0201 	bic.w	r2, r2, #1
 8006e9e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	370c      	adds	r7, #12
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr
	...

08006eb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b089      	sub	sp, #36	@ 0x24
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	61fb      	str	r3, [r7, #28]
 8006eca:	e165      	b.n	8007198 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006ecc:	2201      	movs	r2, #1
 8006ece:	69fb      	ldr	r3, [r7, #28]
 8006ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ed4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	697a      	ldr	r2, [r7, #20]
 8006edc:	4013      	ands	r3, r2
 8006ede:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006ee0:	693a      	ldr	r2, [r7, #16]
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	f040 8154 	bne.w	8007192 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	f003 0303 	and.w	r3, r3, #3
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d005      	beq.n	8006f02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006efe:	2b02      	cmp	r3, #2
 8006f00:	d130      	bne.n	8006f64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	005b      	lsls	r3, r3, #1
 8006f0c:	2203      	movs	r2, #3
 8006f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f12:	43db      	mvns	r3, r3
 8006f14:	69ba      	ldr	r2, [r7, #24]
 8006f16:	4013      	ands	r3, r2
 8006f18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	68da      	ldr	r2, [r3, #12]
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	005b      	lsls	r3, r3, #1
 8006f22:	fa02 f303 	lsl.w	r3, r2, r3
 8006f26:	69ba      	ldr	r2, [r7, #24]
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	69ba      	ldr	r2, [r7, #24]
 8006f30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006f38:	2201      	movs	r2, #1
 8006f3a:	69fb      	ldr	r3, [r7, #28]
 8006f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f40:	43db      	mvns	r3, r3
 8006f42:	69ba      	ldr	r2, [r7, #24]
 8006f44:	4013      	ands	r3, r2
 8006f46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	091b      	lsrs	r3, r3, #4
 8006f4e:	f003 0201 	and.w	r2, r3, #1
 8006f52:	69fb      	ldr	r3, [r7, #28]
 8006f54:	fa02 f303 	lsl.w	r3, r2, r3
 8006f58:	69ba      	ldr	r2, [r7, #24]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	69ba      	ldr	r2, [r7, #24]
 8006f62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	f003 0303 	and.w	r3, r3, #3
 8006f6c:	2b03      	cmp	r3, #3
 8006f6e:	d017      	beq.n	8006fa0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	68db      	ldr	r3, [r3, #12]
 8006f74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006f76:	69fb      	ldr	r3, [r7, #28]
 8006f78:	005b      	lsls	r3, r3, #1
 8006f7a:	2203      	movs	r2, #3
 8006f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f80:	43db      	mvns	r3, r3
 8006f82:	69ba      	ldr	r2, [r7, #24]
 8006f84:	4013      	ands	r3, r2
 8006f86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	689a      	ldr	r2, [r3, #8]
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	005b      	lsls	r3, r3, #1
 8006f90:	fa02 f303 	lsl.w	r3, r2, r3
 8006f94:	69ba      	ldr	r2, [r7, #24]
 8006f96:	4313      	orrs	r3, r2
 8006f98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	69ba      	ldr	r2, [r7, #24]
 8006f9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	f003 0303 	and.w	r3, r3, #3
 8006fa8:	2b02      	cmp	r3, #2
 8006faa:	d123      	bne.n	8006ff4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006fac:	69fb      	ldr	r3, [r7, #28]
 8006fae:	08da      	lsrs	r2, r3, #3
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	3208      	adds	r2, #8
 8006fb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006fba:	69fb      	ldr	r3, [r7, #28]
 8006fbc:	f003 0307 	and.w	r3, r3, #7
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	220f      	movs	r2, #15
 8006fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8006fc8:	43db      	mvns	r3, r3
 8006fca:	69ba      	ldr	r2, [r7, #24]
 8006fcc:	4013      	ands	r3, r2
 8006fce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	691a      	ldr	r2, [r3, #16]
 8006fd4:	69fb      	ldr	r3, [r7, #28]
 8006fd6:	f003 0307 	and.w	r3, r3, #7
 8006fda:	009b      	lsls	r3, r3, #2
 8006fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8006fe0:	69ba      	ldr	r2, [r7, #24]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006fe6:	69fb      	ldr	r3, [r7, #28]
 8006fe8:	08da      	lsrs	r2, r3, #3
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	3208      	adds	r2, #8
 8006fee:	69b9      	ldr	r1, [r7, #24]
 8006ff0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006ffa:	69fb      	ldr	r3, [r7, #28]
 8006ffc:	005b      	lsls	r3, r3, #1
 8006ffe:	2203      	movs	r2, #3
 8007000:	fa02 f303 	lsl.w	r3, r2, r3
 8007004:	43db      	mvns	r3, r3
 8007006:	69ba      	ldr	r2, [r7, #24]
 8007008:	4013      	ands	r3, r2
 800700a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	f003 0203 	and.w	r2, r3, #3
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	005b      	lsls	r3, r3, #1
 8007018:	fa02 f303 	lsl.w	r3, r2, r3
 800701c:	69ba      	ldr	r2, [r7, #24]
 800701e:	4313      	orrs	r3, r2
 8007020:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	69ba      	ldr	r2, [r7, #24]
 8007026:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007030:	2b00      	cmp	r3, #0
 8007032:	f000 80ae 	beq.w	8007192 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007036:	2300      	movs	r3, #0
 8007038:	60fb      	str	r3, [r7, #12]
 800703a:	4b5d      	ldr	r3, [pc, #372]	@ (80071b0 <HAL_GPIO_Init+0x300>)
 800703c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800703e:	4a5c      	ldr	r2, [pc, #368]	@ (80071b0 <HAL_GPIO_Init+0x300>)
 8007040:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007044:	6453      	str	r3, [r2, #68]	@ 0x44
 8007046:	4b5a      	ldr	r3, [pc, #360]	@ (80071b0 <HAL_GPIO_Init+0x300>)
 8007048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800704a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800704e:	60fb      	str	r3, [r7, #12]
 8007050:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007052:	4a58      	ldr	r2, [pc, #352]	@ (80071b4 <HAL_GPIO_Init+0x304>)
 8007054:	69fb      	ldr	r3, [r7, #28]
 8007056:	089b      	lsrs	r3, r3, #2
 8007058:	3302      	adds	r3, #2
 800705a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800705e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007060:	69fb      	ldr	r3, [r7, #28]
 8007062:	f003 0303 	and.w	r3, r3, #3
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	220f      	movs	r2, #15
 800706a:	fa02 f303 	lsl.w	r3, r2, r3
 800706e:	43db      	mvns	r3, r3
 8007070:	69ba      	ldr	r2, [r7, #24]
 8007072:	4013      	ands	r3, r2
 8007074:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	4a4f      	ldr	r2, [pc, #316]	@ (80071b8 <HAL_GPIO_Init+0x308>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d025      	beq.n	80070ca <HAL_GPIO_Init+0x21a>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4a4e      	ldr	r2, [pc, #312]	@ (80071bc <HAL_GPIO_Init+0x30c>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d01f      	beq.n	80070c6 <HAL_GPIO_Init+0x216>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	4a4d      	ldr	r2, [pc, #308]	@ (80071c0 <HAL_GPIO_Init+0x310>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d019      	beq.n	80070c2 <HAL_GPIO_Init+0x212>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4a4c      	ldr	r2, [pc, #304]	@ (80071c4 <HAL_GPIO_Init+0x314>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d013      	beq.n	80070be <HAL_GPIO_Init+0x20e>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4a4b      	ldr	r2, [pc, #300]	@ (80071c8 <HAL_GPIO_Init+0x318>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d00d      	beq.n	80070ba <HAL_GPIO_Init+0x20a>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	4a4a      	ldr	r2, [pc, #296]	@ (80071cc <HAL_GPIO_Init+0x31c>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d007      	beq.n	80070b6 <HAL_GPIO_Init+0x206>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	4a49      	ldr	r2, [pc, #292]	@ (80071d0 <HAL_GPIO_Init+0x320>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d101      	bne.n	80070b2 <HAL_GPIO_Init+0x202>
 80070ae:	2306      	movs	r3, #6
 80070b0:	e00c      	b.n	80070cc <HAL_GPIO_Init+0x21c>
 80070b2:	2307      	movs	r3, #7
 80070b4:	e00a      	b.n	80070cc <HAL_GPIO_Init+0x21c>
 80070b6:	2305      	movs	r3, #5
 80070b8:	e008      	b.n	80070cc <HAL_GPIO_Init+0x21c>
 80070ba:	2304      	movs	r3, #4
 80070bc:	e006      	b.n	80070cc <HAL_GPIO_Init+0x21c>
 80070be:	2303      	movs	r3, #3
 80070c0:	e004      	b.n	80070cc <HAL_GPIO_Init+0x21c>
 80070c2:	2302      	movs	r3, #2
 80070c4:	e002      	b.n	80070cc <HAL_GPIO_Init+0x21c>
 80070c6:	2301      	movs	r3, #1
 80070c8:	e000      	b.n	80070cc <HAL_GPIO_Init+0x21c>
 80070ca:	2300      	movs	r3, #0
 80070cc:	69fa      	ldr	r2, [r7, #28]
 80070ce:	f002 0203 	and.w	r2, r2, #3
 80070d2:	0092      	lsls	r2, r2, #2
 80070d4:	4093      	lsls	r3, r2
 80070d6:	69ba      	ldr	r2, [r7, #24]
 80070d8:	4313      	orrs	r3, r2
 80070da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80070dc:	4935      	ldr	r1, [pc, #212]	@ (80071b4 <HAL_GPIO_Init+0x304>)
 80070de:	69fb      	ldr	r3, [r7, #28]
 80070e0:	089b      	lsrs	r3, r3, #2
 80070e2:	3302      	adds	r3, #2
 80070e4:	69ba      	ldr	r2, [r7, #24]
 80070e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80070ea:	4b3a      	ldr	r3, [pc, #232]	@ (80071d4 <HAL_GPIO_Init+0x324>)
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	43db      	mvns	r3, r3
 80070f4:	69ba      	ldr	r2, [r7, #24]
 80070f6:	4013      	ands	r3, r2
 80070f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007102:	2b00      	cmp	r3, #0
 8007104:	d003      	beq.n	800710e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8007106:	69ba      	ldr	r2, [r7, #24]
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	4313      	orrs	r3, r2
 800710c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800710e:	4a31      	ldr	r2, [pc, #196]	@ (80071d4 <HAL_GPIO_Init+0x324>)
 8007110:	69bb      	ldr	r3, [r7, #24]
 8007112:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007114:	4b2f      	ldr	r3, [pc, #188]	@ (80071d4 <HAL_GPIO_Init+0x324>)
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	43db      	mvns	r3, r3
 800711e:	69ba      	ldr	r2, [r7, #24]
 8007120:	4013      	ands	r3, r2
 8007122:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800712c:	2b00      	cmp	r3, #0
 800712e:	d003      	beq.n	8007138 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8007130:	69ba      	ldr	r2, [r7, #24]
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	4313      	orrs	r3, r2
 8007136:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007138:	4a26      	ldr	r2, [pc, #152]	@ (80071d4 <HAL_GPIO_Init+0x324>)
 800713a:	69bb      	ldr	r3, [r7, #24]
 800713c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800713e:	4b25      	ldr	r3, [pc, #148]	@ (80071d4 <HAL_GPIO_Init+0x324>)
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	43db      	mvns	r3, r3
 8007148:	69ba      	ldr	r2, [r7, #24]
 800714a:	4013      	ands	r3, r2
 800714c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007156:	2b00      	cmp	r3, #0
 8007158:	d003      	beq.n	8007162 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800715a:	69ba      	ldr	r2, [r7, #24]
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	4313      	orrs	r3, r2
 8007160:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007162:	4a1c      	ldr	r2, [pc, #112]	@ (80071d4 <HAL_GPIO_Init+0x324>)
 8007164:	69bb      	ldr	r3, [r7, #24]
 8007166:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007168:	4b1a      	ldr	r3, [pc, #104]	@ (80071d4 <HAL_GPIO_Init+0x324>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	43db      	mvns	r3, r3
 8007172:	69ba      	ldr	r2, [r7, #24]
 8007174:	4013      	ands	r3, r2
 8007176:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007180:	2b00      	cmp	r3, #0
 8007182:	d003      	beq.n	800718c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007184:	69ba      	ldr	r2, [r7, #24]
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	4313      	orrs	r3, r2
 800718a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800718c:	4a11      	ldr	r2, [pc, #68]	@ (80071d4 <HAL_GPIO_Init+0x324>)
 800718e:	69bb      	ldr	r3, [r7, #24]
 8007190:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007192:	69fb      	ldr	r3, [r7, #28]
 8007194:	3301      	adds	r3, #1
 8007196:	61fb      	str	r3, [r7, #28]
 8007198:	69fb      	ldr	r3, [r7, #28]
 800719a:	2b0f      	cmp	r3, #15
 800719c:	f67f ae96 	bls.w	8006ecc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80071a0:	bf00      	nop
 80071a2:	bf00      	nop
 80071a4:	3724      	adds	r7, #36	@ 0x24
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr
 80071ae:	bf00      	nop
 80071b0:	40023800 	.word	0x40023800
 80071b4:	40013800 	.word	0x40013800
 80071b8:	40020000 	.word	0x40020000
 80071bc:	40020400 	.word	0x40020400
 80071c0:	40020800 	.word	0x40020800
 80071c4:	40020c00 	.word	0x40020c00
 80071c8:	40021000 	.word	0x40021000
 80071cc:	40021400 	.word	0x40021400
 80071d0:	40021800 	.word	0x40021800
 80071d4:	40013c00 	.word	0x40013c00

080071d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80071d8:	b480      	push	{r7}
 80071da:	b085      	sub	sp, #20
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	460b      	mov	r3, r1
 80071e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	691a      	ldr	r2, [r3, #16]
 80071e8:	887b      	ldrh	r3, [r7, #2]
 80071ea:	4013      	ands	r3, r2
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d002      	beq.n	80071f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80071f0:	2301      	movs	r3, #1
 80071f2:	73fb      	strb	r3, [r7, #15]
 80071f4:	e001      	b.n	80071fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80071f6:	2300      	movs	r3, #0
 80071f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80071fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3714      	adds	r7, #20
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr

08007208 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	460b      	mov	r3, r1
 8007212:	807b      	strh	r3, [r7, #2]
 8007214:	4613      	mov	r3, r2
 8007216:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007218:	787b      	ldrb	r3, [r7, #1]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d003      	beq.n	8007226 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800721e:	887a      	ldrh	r2, [r7, #2]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007224:	e003      	b.n	800722e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007226:	887b      	ldrh	r3, [r7, #2]
 8007228:	041a      	lsls	r2, r3, #16
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	619a      	str	r2, [r3, #24]
}
 800722e:	bf00      	nop
 8007230:	370c      	adds	r7, #12
 8007232:	46bd      	mov	sp, r7
 8007234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007238:	4770      	bx	lr

0800723a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800723a:	b480      	push	{r7}
 800723c:	b085      	sub	sp, #20
 800723e:	af00      	add	r7, sp, #0
 8007240:	6078      	str	r0, [r7, #4]
 8007242:	460b      	mov	r3, r1
 8007244:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	695b      	ldr	r3, [r3, #20]
 800724a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800724c:	887a      	ldrh	r2, [r7, #2]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	4013      	ands	r3, r2
 8007252:	041a      	lsls	r2, r3, #16
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	43d9      	mvns	r1, r3
 8007258:	887b      	ldrh	r3, [r7, #2]
 800725a:	400b      	ands	r3, r1
 800725c:	431a      	orrs	r2, r3
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	619a      	str	r2, [r3, #24]
}
 8007262:	bf00      	nop
 8007264:	3714      	adds	r7, #20
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr
	...

08007270 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d101      	bne.n	8007282 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	e12b      	b.n	80074da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007288:	b2db      	uxtb	r3, r3
 800728a:	2b00      	cmp	r3, #0
 800728c:	d106      	bne.n	800729c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f7fe fb6c 	bl	8005974 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2224      	movs	r2, #36	@ 0x24
 80072a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f022 0201 	bic.w	r2, r2, #1
 80072b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80072c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80072d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80072d4:	f001 fcf2 	bl	8008cbc <HAL_RCC_GetPCLK1Freq>
 80072d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	4a81      	ldr	r2, [pc, #516]	@ (80074e4 <HAL_I2C_Init+0x274>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d807      	bhi.n	80072f4 <HAL_I2C_Init+0x84>
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	4a80      	ldr	r2, [pc, #512]	@ (80074e8 <HAL_I2C_Init+0x278>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	bf94      	ite	ls
 80072ec:	2301      	movls	r3, #1
 80072ee:	2300      	movhi	r3, #0
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	e006      	b.n	8007302 <HAL_I2C_Init+0x92>
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	4a7d      	ldr	r2, [pc, #500]	@ (80074ec <HAL_I2C_Init+0x27c>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	bf94      	ite	ls
 80072fc:	2301      	movls	r3, #1
 80072fe:	2300      	movhi	r3, #0
 8007300:	b2db      	uxtb	r3, r3
 8007302:	2b00      	cmp	r3, #0
 8007304:	d001      	beq.n	800730a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	e0e7      	b.n	80074da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	4a78      	ldr	r2, [pc, #480]	@ (80074f0 <HAL_I2C_Init+0x280>)
 800730e:	fba2 2303 	umull	r2, r3, r2, r3
 8007312:	0c9b      	lsrs	r3, r3, #18
 8007314:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	68ba      	ldr	r2, [r7, #8]
 8007326:	430a      	orrs	r2, r1
 8007328:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	6a1b      	ldr	r3, [r3, #32]
 8007330:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	4a6a      	ldr	r2, [pc, #424]	@ (80074e4 <HAL_I2C_Init+0x274>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d802      	bhi.n	8007344 <HAL_I2C_Init+0xd4>
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	3301      	adds	r3, #1
 8007342:	e009      	b.n	8007358 <HAL_I2C_Init+0xe8>
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800734a:	fb02 f303 	mul.w	r3, r2, r3
 800734e:	4a69      	ldr	r2, [pc, #420]	@ (80074f4 <HAL_I2C_Init+0x284>)
 8007350:	fba2 2303 	umull	r2, r3, r2, r3
 8007354:	099b      	lsrs	r3, r3, #6
 8007356:	3301      	adds	r3, #1
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	6812      	ldr	r2, [r2, #0]
 800735c:	430b      	orrs	r3, r1
 800735e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	69db      	ldr	r3, [r3, #28]
 8007366:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800736a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	495c      	ldr	r1, [pc, #368]	@ (80074e4 <HAL_I2C_Init+0x274>)
 8007374:	428b      	cmp	r3, r1
 8007376:	d819      	bhi.n	80073ac <HAL_I2C_Init+0x13c>
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	1e59      	subs	r1, r3, #1
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	005b      	lsls	r3, r3, #1
 8007382:	fbb1 f3f3 	udiv	r3, r1, r3
 8007386:	1c59      	adds	r1, r3, #1
 8007388:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800738c:	400b      	ands	r3, r1
 800738e:	2b00      	cmp	r3, #0
 8007390:	d00a      	beq.n	80073a8 <HAL_I2C_Init+0x138>
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	1e59      	subs	r1, r3, #1
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	005b      	lsls	r3, r3, #1
 800739c:	fbb1 f3f3 	udiv	r3, r1, r3
 80073a0:	3301      	adds	r3, #1
 80073a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073a6:	e051      	b.n	800744c <HAL_I2C_Init+0x1dc>
 80073a8:	2304      	movs	r3, #4
 80073aa:	e04f      	b.n	800744c <HAL_I2C_Init+0x1dc>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d111      	bne.n	80073d8 <HAL_I2C_Init+0x168>
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	1e58      	subs	r0, r3, #1
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6859      	ldr	r1, [r3, #4]
 80073bc:	460b      	mov	r3, r1
 80073be:	005b      	lsls	r3, r3, #1
 80073c0:	440b      	add	r3, r1
 80073c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80073c6:	3301      	adds	r3, #1
 80073c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	bf0c      	ite	eq
 80073d0:	2301      	moveq	r3, #1
 80073d2:	2300      	movne	r3, #0
 80073d4:	b2db      	uxtb	r3, r3
 80073d6:	e012      	b.n	80073fe <HAL_I2C_Init+0x18e>
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	1e58      	subs	r0, r3, #1
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6859      	ldr	r1, [r3, #4]
 80073e0:	460b      	mov	r3, r1
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	440b      	add	r3, r1
 80073e6:	0099      	lsls	r1, r3, #2
 80073e8:	440b      	add	r3, r1
 80073ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80073ee:	3301      	adds	r3, #1
 80073f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	bf0c      	ite	eq
 80073f8:	2301      	moveq	r3, #1
 80073fa:	2300      	movne	r3, #0
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d001      	beq.n	8007406 <HAL_I2C_Init+0x196>
 8007402:	2301      	movs	r3, #1
 8007404:	e022      	b.n	800744c <HAL_I2C_Init+0x1dc>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d10e      	bne.n	800742c <HAL_I2C_Init+0x1bc>
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	1e58      	subs	r0, r3, #1
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6859      	ldr	r1, [r3, #4]
 8007416:	460b      	mov	r3, r1
 8007418:	005b      	lsls	r3, r3, #1
 800741a:	440b      	add	r3, r1
 800741c:	fbb0 f3f3 	udiv	r3, r0, r3
 8007420:	3301      	adds	r3, #1
 8007422:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007426:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800742a:	e00f      	b.n	800744c <HAL_I2C_Init+0x1dc>
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	1e58      	subs	r0, r3, #1
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6859      	ldr	r1, [r3, #4]
 8007434:	460b      	mov	r3, r1
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	440b      	add	r3, r1
 800743a:	0099      	lsls	r1, r3, #2
 800743c:	440b      	add	r3, r1
 800743e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007442:	3301      	adds	r3, #1
 8007444:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007448:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800744c:	6879      	ldr	r1, [r7, #4]
 800744e:	6809      	ldr	r1, [r1, #0]
 8007450:	4313      	orrs	r3, r2
 8007452:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	69da      	ldr	r2, [r3, #28]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6a1b      	ldr	r3, [r3, #32]
 8007466:	431a      	orrs	r2, r3
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	430a      	orrs	r2, r1
 800746e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800747a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	6911      	ldr	r1, [r2, #16]
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	68d2      	ldr	r2, [r2, #12]
 8007486:	4311      	orrs	r1, r2
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	6812      	ldr	r2, [r2, #0]
 800748c:	430b      	orrs	r3, r1
 800748e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	68db      	ldr	r3, [r3, #12]
 8007496:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	695a      	ldr	r2, [r3, #20]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	699b      	ldr	r3, [r3, #24]
 80074a2:	431a      	orrs	r2, r3
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	430a      	orrs	r2, r1
 80074aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f042 0201 	orr.w	r2, r2, #1
 80074ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2220      	movs	r2, #32
 80074c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80074d8:	2300      	movs	r3, #0
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3710      	adds	r7, #16
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}
 80074e2:	bf00      	nop
 80074e4:	000186a0 	.word	0x000186a0
 80074e8:	001e847f 	.word	0x001e847f
 80074ec:	003d08ff 	.word	0x003d08ff
 80074f0:	431bde83 	.word	0x431bde83
 80074f4:	10624dd3 	.word	0x10624dd3

080074f8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b088      	sub	sp, #32
 80074fc:	af02      	add	r7, sp, #8
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	607a      	str	r2, [r7, #4]
 8007502:	461a      	mov	r2, r3
 8007504:	460b      	mov	r3, r1
 8007506:	817b      	strh	r3, [r7, #10]
 8007508:	4613      	mov	r3, r2
 800750a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800750c:	f7fe fe70 	bl	80061f0 <HAL_GetTick>
 8007510:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007518:	b2db      	uxtb	r3, r3
 800751a:	2b20      	cmp	r3, #32
 800751c:	f040 80e0 	bne.w	80076e0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	9300      	str	r3, [sp, #0]
 8007524:	2319      	movs	r3, #25
 8007526:	2201      	movs	r2, #1
 8007528:	4970      	ldr	r1, [pc, #448]	@ (80076ec <HAL_I2C_Master_Transmit+0x1f4>)
 800752a:	68f8      	ldr	r0, [r7, #12]
 800752c:	f001 f8f6 	bl	800871c <I2C_WaitOnFlagUntilTimeout>
 8007530:	4603      	mov	r3, r0
 8007532:	2b00      	cmp	r3, #0
 8007534:	d001      	beq.n	800753a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007536:	2302      	movs	r3, #2
 8007538:	e0d3      	b.n	80076e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007540:	2b01      	cmp	r3, #1
 8007542:	d101      	bne.n	8007548 <HAL_I2C_Master_Transmit+0x50>
 8007544:	2302      	movs	r3, #2
 8007546:	e0cc      	b.n	80076e2 <HAL_I2C_Master_Transmit+0x1ea>
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2201      	movs	r2, #1
 800754c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f003 0301 	and.w	r3, r3, #1
 800755a:	2b01      	cmp	r3, #1
 800755c:	d007      	beq.n	800756e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f042 0201 	orr.w	r2, r2, #1
 800756c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800757c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2221      	movs	r2, #33	@ 0x21
 8007582:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2210      	movs	r2, #16
 800758a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2200      	movs	r2, #0
 8007592:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	893a      	ldrh	r2, [r7, #8]
 800759e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075a4:	b29a      	uxth	r2, r3
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	4a50      	ldr	r2, [pc, #320]	@ (80076f0 <HAL_I2C_Master_Transmit+0x1f8>)
 80075ae:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80075b0:	8979      	ldrh	r1, [r7, #10]
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	6a3a      	ldr	r2, [r7, #32]
 80075b6:	68f8      	ldr	r0, [r7, #12]
 80075b8:	f000 fde2 	bl	8008180 <I2C_MasterRequestWrite>
 80075bc:	4603      	mov	r3, r0
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d001      	beq.n	80075c6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80075c2:	2301      	movs	r3, #1
 80075c4:	e08d      	b.n	80076e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075c6:	2300      	movs	r3, #0
 80075c8:	613b      	str	r3, [r7, #16]
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	695b      	ldr	r3, [r3, #20]
 80075d0:	613b      	str	r3, [r7, #16]
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	699b      	ldr	r3, [r3, #24]
 80075d8:	613b      	str	r3, [r7, #16]
 80075da:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80075dc:	e066      	b.n	80076ac <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80075de:	697a      	ldr	r2, [r7, #20]
 80075e0:	6a39      	ldr	r1, [r7, #32]
 80075e2:	68f8      	ldr	r0, [r7, #12]
 80075e4:	f001 f970 	bl	80088c8 <I2C_WaitOnTXEFlagUntilTimeout>
 80075e8:	4603      	mov	r3, r0
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d00d      	beq.n	800760a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075f2:	2b04      	cmp	r3, #4
 80075f4:	d107      	bne.n	8007606 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007604:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	e06b      	b.n	80076e2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800760e:	781a      	ldrb	r2, [r3, #0]
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800761a:	1c5a      	adds	r2, r3, #1
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007624:	b29b      	uxth	r3, r3
 8007626:	3b01      	subs	r3, #1
 8007628:	b29a      	uxth	r2, r3
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007632:	3b01      	subs	r3, #1
 8007634:	b29a      	uxth	r2, r3
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	695b      	ldr	r3, [r3, #20]
 8007640:	f003 0304 	and.w	r3, r3, #4
 8007644:	2b04      	cmp	r3, #4
 8007646:	d11b      	bne.n	8007680 <HAL_I2C_Master_Transmit+0x188>
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800764c:	2b00      	cmp	r3, #0
 800764e:	d017      	beq.n	8007680 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007654:	781a      	ldrb	r2, [r3, #0]
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007660:	1c5a      	adds	r2, r3, #1
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800766a:	b29b      	uxth	r3, r3
 800766c:	3b01      	subs	r3, #1
 800766e:	b29a      	uxth	r2, r3
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007678:	3b01      	subs	r3, #1
 800767a:	b29a      	uxth	r2, r3
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007680:	697a      	ldr	r2, [r7, #20]
 8007682:	6a39      	ldr	r1, [r7, #32]
 8007684:	68f8      	ldr	r0, [r7, #12]
 8007686:	f001 f960 	bl	800894a <I2C_WaitOnBTFFlagUntilTimeout>
 800768a:	4603      	mov	r3, r0
 800768c:	2b00      	cmp	r3, #0
 800768e:	d00d      	beq.n	80076ac <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007694:	2b04      	cmp	r3, #4
 8007696:	d107      	bne.n	80076a8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80076a6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80076a8:	2301      	movs	r3, #1
 80076aa:	e01a      	b.n	80076e2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d194      	bne.n	80075de <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80076c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2220      	movs	r2, #32
 80076c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2200      	movs	r2, #0
 80076d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2200      	movs	r2, #0
 80076d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80076dc:	2300      	movs	r3, #0
 80076de:	e000      	b.n	80076e2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80076e0:	2302      	movs	r3, #2
  }
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3718      	adds	r7, #24
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
 80076ea:	bf00      	nop
 80076ec:	00100002 	.word	0x00100002
 80076f0:	ffff0000 	.word	0xffff0000

080076f4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b08c      	sub	sp, #48	@ 0x30
 80076f8:	af02      	add	r7, sp, #8
 80076fa:	60f8      	str	r0, [r7, #12]
 80076fc:	607a      	str	r2, [r7, #4]
 80076fe:	461a      	mov	r2, r3
 8007700:	460b      	mov	r3, r1
 8007702:	817b      	strh	r3, [r7, #10]
 8007704:	4613      	mov	r3, r2
 8007706:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007708:	f7fe fd72 	bl	80061f0 <HAL_GetTick>
 800770c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007714:	b2db      	uxtb	r3, r3
 8007716:	2b20      	cmp	r3, #32
 8007718:	f040 820b 	bne.w	8007b32 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800771c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800771e:	9300      	str	r3, [sp, #0]
 8007720:	2319      	movs	r3, #25
 8007722:	2201      	movs	r2, #1
 8007724:	497c      	ldr	r1, [pc, #496]	@ (8007918 <HAL_I2C_Master_Receive+0x224>)
 8007726:	68f8      	ldr	r0, [r7, #12]
 8007728:	f000 fff8 	bl	800871c <I2C_WaitOnFlagUntilTimeout>
 800772c:	4603      	mov	r3, r0
 800772e:	2b00      	cmp	r3, #0
 8007730:	d001      	beq.n	8007736 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8007732:	2302      	movs	r3, #2
 8007734:	e1fe      	b.n	8007b34 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800773c:	2b01      	cmp	r3, #1
 800773e:	d101      	bne.n	8007744 <HAL_I2C_Master_Receive+0x50>
 8007740:	2302      	movs	r3, #2
 8007742:	e1f7      	b.n	8007b34 <HAL_I2C_Master_Receive+0x440>
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2201      	movs	r2, #1
 8007748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f003 0301 	and.w	r3, r3, #1
 8007756:	2b01      	cmp	r3, #1
 8007758:	d007      	beq.n	800776a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	681a      	ldr	r2, [r3, #0]
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f042 0201 	orr.w	r2, r2, #1
 8007768:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	681a      	ldr	r2, [r3, #0]
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007778:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2222      	movs	r2, #34	@ 0x22
 800777e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2210      	movs	r2, #16
 8007786:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2200      	movs	r2, #0
 800778e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	893a      	ldrh	r2, [r7, #8]
 800779a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077a0:	b29a      	uxth	r2, r3
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	4a5c      	ldr	r2, [pc, #368]	@ (800791c <HAL_I2C_Master_Receive+0x228>)
 80077aa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80077ac:	8979      	ldrh	r1, [r7, #10]
 80077ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077b2:	68f8      	ldr	r0, [r7, #12]
 80077b4:	f000 fd66 	bl	8008284 <I2C_MasterRequestRead>
 80077b8:	4603      	mov	r3, r0
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d001      	beq.n	80077c2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80077be:	2301      	movs	r3, #1
 80077c0:	e1b8      	b.n	8007b34 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d113      	bne.n	80077f2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077ca:	2300      	movs	r3, #0
 80077cc:	623b      	str	r3, [r7, #32]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	695b      	ldr	r3, [r3, #20]
 80077d4:	623b      	str	r3, [r7, #32]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	699b      	ldr	r3, [r3, #24]
 80077dc:	623b      	str	r3, [r7, #32]
 80077de:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80077ee:	601a      	str	r2, [r3, #0]
 80077f0:	e18c      	b.n	8007b0c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d11b      	bne.n	8007832 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	681a      	ldr	r2, [r3, #0]
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007808:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800780a:	2300      	movs	r3, #0
 800780c:	61fb      	str	r3, [r7, #28]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	695b      	ldr	r3, [r3, #20]
 8007814:	61fb      	str	r3, [r7, #28]
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	699b      	ldr	r3, [r3, #24]
 800781c:	61fb      	str	r3, [r7, #28]
 800781e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	681a      	ldr	r2, [r3, #0]
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800782e:	601a      	str	r2, [r3, #0]
 8007830:	e16c      	b.n	8007b0c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007836:	2b02      	cmp	r3, #2
 8007838:	d11b      	bne.n	8007872 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	681a      	ldr	r2, [r3, #0]
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007848:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	681a      	ldr	r2, [r3, #0]
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007858:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800785a:	2300      	movs	r3, #0
 800785c:	61bb      	str	r3, [r7, #24]
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	695b      	ldr	r3, [r3, #20]
 8007864:	61bb      	str	r3, [r7, #24]
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	699b      	ldr	r3, [r3, #24]
 800786c:	61bb      	str	r3, [r7, #24]
 800786e:	69bb      	ldr	r3, [r7, #24]
 8007870:	e14c      	b.n	8007b0c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007880:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007882:	2300      	movs	r3, #0
 8007884:	617b      	str	r3, [r7, #20]
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	695b      	ldr	r3, [r3, #20]
 800788c:	617b      	str	r3, [r7, #20]
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	699b      	ldr	r3, [r3, #24]
 8007894:	617b      	str	r3, [r7, #20]
 8007896:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007898:	e138      	b.n	8007b0c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800789e:	2b03      	cmp	r3, #3
 80078a0:	f200 80f1 	bhi.w	8007a86 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d123      	bne.n	80078f4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80078ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078ae:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80078b0:	68f8      	ldr	r0, [r7, #12]
 80078b2:	f001 f88b 	bl	80089cc <I2C_WaitOnRXNEFlagUntilTimeout>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d001      	beq.n	80078c0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	e139      	b.n	8007b34 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	691a      	ldr	r2, [r3, #16]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078ca:	b2d2      	uxtb	r2, r2
 80078cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078d2:	1c5a      	adds	r2, r3, #1
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078dc:	3b01      	subs	r3, #1
 80078de:	b29a      	uxth	r2, r3
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	3b01      	subs	r3, #1
 80078ec:	b29a      	uxth	r2, r3
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80078f2:	e10b      	b.n	8007b0c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078f8:	2b02      	cmp	r3, #2
 80078fa:	d14e      	bne.n	800799a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80078fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078fe:	9300      	str	r3, [sp, #0]
 8007900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007902:	2200      	movs	r2, #0
 8007904:	4906      	ldr	r1, [pc, #24]	@ (8007920 <HAL_I2C_Master_Receive+0x22c>)
 8007906:	68f8      	ldr	r0, [r7, #12]
 8007908:	f000 ff08 	bl	800871c <I2C_WaitOnFlagUntilTimeout>
 800790c:	4603      	mov	r3, r0
 800790e:	2b00      	cmp	r3, #0
 8007910:	d008      	beq.n	8007924 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	e10e      	b.n	8007b34 <HAL_I2C_Master_Receive+0x440>
 8007916:	bf00      	nop
 8007918:	00100002 	.word	0x00100002
 800791c:	ffff0000 	.word	0xffff0000
 8007920:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007932:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	691a      	ldr	r2, [r3, #16]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800793e:	b2d2      	uxtb	r2, r2
 8007940:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007946:	1c5a      	adds	r2, r3, #1
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007950:	3b01      	subs	r3, #1
 8007952:	b29a      	uxth	r2, r3
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800795c:	b29b      	uxth	r3, r3
 800795e:	3b01      	subs	r3, #1
 8007960:	b29a      	uxth	r2, r3
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	691a      	ldr	r2, [r3, #16]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007970:	b2d2      	uxtb	r2, r2
 8007972:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007978:	1c5a      	adds	r2, r3, #1
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007982:	3b01      	subs	r3, #1
 8007984:	b29a      	uxth	r2, r3
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800798e:	b29b      	uxth	r3, r3
 8007990:	3b01      	subs	r3, #1
 8007992:	b29a      	uxth	r2, r3
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007998:	e0b8      	b.n	8007b0c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800799a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800799c:	9300      	str	r3, [sp, #0]
 800799e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079a0:	2200      	movs	r2, #0
 80079a2:	4966      	ldr	r1, [pc, #408]	@ (8007b3c <HAL_I2C_Master_Receive+0x448>)
 80079a4:	68f8      	ldr	r0, [r7, #12]
 80079a6:	f000 feb9 	bl	800871c <I2C_WaitOnFlagUntilTimeout>
 80079aa:	4603      	mov	r3, r0
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d001      	beq.n	80079b4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80079b0:	2301      	movs	r3, #1
 80079b2:	e0bf      	b.n	8007b34 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80079c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	691a      	ldr	r2, [r3, #16]
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079ce:	b2d2      	uxtb	r2, r2
 80079d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079d6:	1c5a      	adds	r2, r3, #1
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079e0:	3b01      	subs	r3, #1
 80079e2:	b29a      	uxth	r2, r3
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	3b01      	subs	r3, #1
 80079f0:	b29a      	uxth	r2, r3
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80079f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079f8:	9300      	str	r3, [sp, #0]
 80079fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079fc:	2200      	movs	r2, #0
 80079fe:	494f      	ldr	r1, [pc, #316]	@ (8007b3c <HAL_I2C_Master_Receive+0x448>)
 8007a00:	68f8      	ldr	r0, [r7, #12]
 8007a02:	f000 fe8b 	bl	800871c <I2C_WaitOnFlagUntilTimeout>
 8007a06:	4603      	mov	r3, r0
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d001      	beq.n	8007a10 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	e091      	b.n	8007b34 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	681a      	ldr	r2, [r3, #0]
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	691a      	ldr	r2, [r3, #16]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a2a:	b2d2      	uxtb	r2, r2
 8007a2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a32:	1c5a      	adds	r2, r3, #1
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a3c:	3b01      	subs	r3, #1
 8007a3e:	b29a      	uxth	r2, r3
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	3b01      	subs	r3, #1
 8007a4c:	b29a      	uxth	r2, r3
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	691a      	ldr	r2, [r3, #16]
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a5c:	b2d2      	uxtb	r2, r2
 8007a5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a64:	1c5a      	adds	r2, r3, #1
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a6e:	3b01      	subs	r3, #1
 8007a70:	b29a      	uxth	r2, r3
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	3b01      	subs	r3, #1
 8007a7e:	b29a      	uxth	r2, r3
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007a84:	e042      	b.n	8007b0c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a88:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007a8a:	68f8      	ldr	r0, [r7, #12]
 8007a8c:	f000 ff9e 	bl	80089cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8007a90:	4603      	mov	r3, r0
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d001      	beq.n	8007a9a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8007a96:	2301      	movs	r3, #1
 8007a98:	e04c      	b.n	8007b34 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	691a      	ldr	r2, [r3, #16]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aa4:	b2d2      	uxtb	r2, r2
 8007aa6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aac:	1c5a      	adds	r2, r3, #1
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ab6:	3b01      	subs	r3, #1
 8007ab8:	b29a      	uxth	r2, r3
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	3b01      	subs	r3, #1
 8007ac6:	b29a      	uxth	r2, r3
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	695b      	ldr	r3, [r3, #20]
 8007ad2:	f003 0304 	and.w	r3, r3, #4
 8007ad6:	2b04      	cmp	r3, #4
 8007ad8:	d118      	bne.n	8007b0c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	691a      	ldr	r2, [r3, #16]
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ae4:	b2d2      	uxtb	r2, r2
 8007ae6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aec:	1c5a      	adds	r2, r3, #1
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007af6:	3b01      	subs	r3, #1
 8007af8:	b29a      	uxth	r2, r3
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	3b01      	subs	r3, #1
 8007b06:	b29a      	uxth	r2, r3
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	f47f aec2 	bne.w	800789a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2220      	movs	r2, #32
 8007b1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2200      	movs	r2, #0
 8007b22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	e000      	b.n	8007b34 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007b32:	2302      	movs	r3, #2
  }
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3728      	adds	r7, #40	@ 0x28
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}
 8007b3c:	00010004 	.word	0x00010004

08007b40 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b088      	sub	sp, #32
 8007b44:	af02      	add	r7, sp, #8
 8007b46:	60f8      	str	r0, [r7, #12]
 8007b48:	4608      	mov	r0, r1
 8007b4a:	4611      	mov	r1, r2
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	4603      	mov	r3, r0
 8007b50:	817b      	strh	r3, [r7, #10]
 8007b52:	460b      	mov	r3, r1
 8007b54:	813b      	strh	r3, [r7, #8]
 8007b56:	4613      	mov	r3, r2
 8007b58:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007b5a:	f7fe fb49 	bl	80061f0 <HAL_GetTick>
 8007b5e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b66:	b2db      	uxtb	r3, r3
 8007b68:	2b20      	cmp	r3, #32
 8007b6a:	f040 80d9 	bne.w	8007d20 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	9300      	str	r3, [sp, #0]
 8007b72:	2319      	movs	r3, #25
 8007b74:	2201      	movs	r2, #1
 8007b76:	496d      	ldr	r1, [pc, #436]	@ (8007d2c <HAL_I2C_Mem_Write+0x1ec>)
 8007b78:	68f8      	ldr	r0, [r7, #12]
 8007b7a:	f000 fdcf 	bl	800871c <I2C_WaitOnFlagUntilTimeout>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d001      	beq.n	8007b88 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007b84:	2302      	movs	r3, #2
 8007b86:	e0cc      	b.n	8007d22 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b8e:	2b01      	cmp	r3, #1
 8007b90:	d101      	bne.n	8007b96 <HAL_I2C_Mem_Write+0x56>
 8007b92:	2302      	movs	r3, #2
 8007b94:	e0c5      	b.n	8007d22 <HAL_I2C_Mem_Write+0x1e2>
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2201      	movs	r2, #1
 8007b9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f003 0301 	and.w	r3, r3, #1
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d007      	beq.n	8007bbc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	681a      	ldr	r2, [r3, #0]
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f042 0201 	orr.w	r2, r2, #1
 8007bba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007bca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2221      	movs	r2, #33	@ 0x21
 8007bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2240      	movs	r2, #64	@ 0x40
 8007bd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2200      	movs	r2, #0
 8007be0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	6a3a      	ldr	r2, [r7, #32]
 8007be6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007bec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bf2:	b29a      	uxth	r2, r3
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	4a4d      	ldr	r2, [pc, #308]	@ (8007d30 <HAL_I2C_Mem_Write+0x1f0>)
 8007bfc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007bfe:	88f8      	ldrh	r0, [r7, #6]
 8007c00:	893a      	ldrh	r2, [r7, #8]
 8007c02:	8979      	ldrh	r1, [r7, #10]
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	9301      	str	r3, [sp, #4]
 8007c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c0a:	9300      	str	r3, [sp, #0]
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	68f8      	ldr	r0, [r7, #12]
 8007c10:	f000 fc06 	bl	8008420 <I2C_RequestMemoryWrite>
 8007c14:	4603      	mov	r3, r0
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d052      	beq.n	8007cc0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	e081      	b.n	8007d22 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c1e:	697a      	ldr	r2, [r7, #20]
 8007c20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c22:	68f8      	ldr	r0, [r7, #12]
 8007c24:	f000 fe50 	bl	80088c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d00d      	beq.n	8007c4a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c32:	2b04      	cmp	r3, #4
 8007c34:	d107      	bne.n	8007c46 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	681a      	ldr	r2, [r3, #0]
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007c44:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	e06b      	b.n	8007d22 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c4e:	781a      	ldrb	r2, [r3, #0]
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c5a:	1c5a      	adds	r2, r3, #1
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c64:	3b01      	subs	r3, #1
 8007c66:	b29a      	uxth	r2, r3
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c70:	b29b      	uxth	r3, r3
 8007c72:	3b01      	subs	r3, #1
 8007c74:	b29a      	uxth	r2, r3
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	695b      	ldr	r3, [r3, #20]
 8007c80:	f003 0304 	and.w	r3, r3, #4
 8007c84:	2b04      	cmp	r3, #4
 8007c86:	d11b      	bne.n	8007cc0 <HAL_I2C_Mem_Write+0x180>
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d017      	beq.n	8007cc0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c94:	781a      	ldrb	r2, [r3, #0]
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ca0:	1c5a      	adds	r2, r3, #1
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007caa:	3b01      	subs	r3, #1
 8007cac:	b29a      	uxth	r2, r3
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	3b01      	subs	r3, #1
 8007cba:	b29a      	uxth	r2, r3
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d1aa      	bne.n	8007c1e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007cc8:	697a      	ldr	r2, [r7, #20]
 8007cca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007ccc:	68f8      	ldr	r0, [r7, #12]
 8007cce:	f000 fe3c 	bl	800894a <I2C_WaitOnBTFFlagUntilTimeout>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d00d      	beq.n	8007cf4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cdc:	2b04      	cmp	r3, #4
 8007cde:	d107      	bne.n	8007cf0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	681a      	ldr	r2, [r3, #0]
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007cee:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	e016      	b.n	8007d22 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	681a      	ldr	r2, [r3, #0]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007d02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2220      	movs	r2, #32
 8007d08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2200      	movs	r2, #0
 8007d18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	e000      	b.n	8007d22 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007d20:	2302      	movs	r3, #2
  }
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3718      	adds	r7, #24
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
 8007d2a:	bf00      	nop
 8007d2c:	00100002 	.word	0x00100002
 8007d30:	ffff0000 	.word	0xffff0000

08007d34 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b08c      	sub	sp, #48	@ 0x30
 8007d38:	af02      	add	r7, sp, #8
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	4608      	mov	r0, r1
 8007d3e:	4611      	mov	r1, r2
 8007d40:	461a      	mov	r2, r3
 8007d42:	4603      	mov	r3, r0
 8007d44:	817b      	strh	r3, [r7, #10]
 8007d46:	460b      	mov	r3, r1
 8007d48:	813b      	strh	r3, [r7, #8]
 8007d4a:	4613      	mov	r3, r2
 8007d4c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007d4e:	f7fe fa4f 	bl	80061f0 <HAL_GetTick>
 8007d52:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	2b20      	cmp	r3, #32
 8007d5e:	f040 8208 	bne.w	8008172 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d64:	9300      	str	r3, [sp, #0]
 8007d66:	2319      	movs	r3, #25
 8007d68:	2201      	movs	r2, #1
 8007d6a:	497b      	ldr	r1, [pc, #492]	@ (8007f58 <HAL_I2C_Mem_Read+0x224>)
 8007d6c:	68f8      	ldr	r0, [r7, #12]
 8007d6e:	f000 fcd5 	bl	800871c <I2C_WaitOnFlagUntilTimeout>
 8007d72:	4603      	mov	r3, r0
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d001      	beq.n	8007d7c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007d78:	2302      	movs	r3, #2
 8007d7a:	e1fb      	b.n	8008174 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d101      	bne.n	8007d8a <HAL_I2C_Mem_Read+0x56>
 8007d86:	2302      	movs	r3, #2
 8007d88:	e1f4      	b.n	8008174 <HAL_I2C_Mem_Read+0x440>
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f003 0301 	and.w	r3, r3, #1
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d007      	beq.n	8007db0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	681a      	ldr	r2, [r3, #0]
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f042 0201 	orr.w	r2, r2, #1
 8007dae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007dbe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2222      	movs	r2, #34	@ 0x22
 8007dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2240      	movs	r2, #64	@ 0x40
 8007dcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007dda:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8007de0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007de6:	b29a      	uxth	r2, r3
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	4a5b      	ldr	r2, [pc, #364]	@ (8007f5c <HAL_I2C_Mem_Read+0x228>)
 8007df0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007df2:	88f8      	ldrh	r0, [r7, #6]
 8007df4:	893a      	ldrh	r2, [r7, #8]
 8007df6:	8979      	ldrh	r1, [r7, #10]
 8007df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dfa:	9301      	str	r3, [sp, #4]
 8007dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dfe:	9300      	str	r3, [sp, #0]
 8007e00:	4603      	mov	r3, r0
 8007e02:	68f8      	ldr	r0, [r7, #12]
 8007e04:	f000 fba2 	bl	800854c <I2C_RequestMemoryRead>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d001      	beq.n	8007e12 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	e1b0      	b.n	8008174 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d113      	bne.n	8007e42 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	623b      	str	r3, [r7, #32]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	695b      	ldr	r3, [r3, #20]
 8007e24:	623b      	str	r3, [r7, #32]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	699b      	ldr	r3, [r3, #24]
 8007e2c:	623b      	str	r3, [r7, #32]
 8007e2e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	681a      	ldr	r2, [r3, #0]
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007e3e:	601a      	str	r2, [r3, #0]
 8007e40:	e184      	b.n	800814c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e46:	2b01      	cmp	r3, #1
 8007e48:	d11b      	bne.n	8007e82 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	681a      	ldr	r2, [r3, #0]
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e58:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	61fb      	str	r3, [r7, #28]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	695b      	ldr	r3, [r3, #20]
 8007e64:	61fb      	str	r3, [r7, #28]
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	699b      	ldr	r3, [r3, #24]
 8007e6c:	61fb      	str	r3, [r7, #28]
 8007e6e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	681a      	ldr	r2, [r3, #0]
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007e7e:	601a      	str	r2, [r3, #0]
 8007e80:	e164      	b.n	800814c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e86:	2b02      	cmp	r3, #2
 8007e88:	d11b      	bne.n	8007ec2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	681a      	ldr	r2, [r3, #0]
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e98:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	681a      	ldr	r2, [r3, #0]
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007ea8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007eaa:	2300      	movs	r3, #0
 8007eac:	61bb      	str	r3, [r7, #24]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	695b      	ldr	r3, [r3, #20]
 8007eb4:	61bb      	str	r3, [r7, #24]
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	699b      	ldr	r3, [r3, #24]
 8007ebc:	61bb      	str	r3, [r7, #24]
 8007ebe:	69bb      	ldr	r3, [r7, #24]
 8007ec0:	e144      	b.n	800814c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	617b      	str	r3, [r7, #20]
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	695b      	ldr	r3, [r3, #20]
 8007ecc:	617b      	str	r3, [r7, #20]
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	699b      	ldr	r3, [r3, #24]
 8007ed4:	617b      	str	r3, [r7, #20]
 8007ed6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007ed8:	e138      	b.n	800814c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ede:	2b03      	cmp	r3, #3
 8007ee0:	f200 80f1 	bhi.w	80080c6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d123      	bne.n	8007f34 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007eec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007eee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007ef0:	68f8      	ldr	r0, [r7, #12]
 8007ef2:	f000 fd6b 	bl	80089cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d001      	beq.n	8007f00 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007efc:	2301      	movs	r3, #1
 8007efe:	e139      	b.n	8008174 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	691a      	ldr	r2, [r3, #16]
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f0a:	b2d2      	uxtb	r2, r2
 8007f0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f12:	1c5a      	adds	r2, r3, #1
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f1c:	3b01      	subs	r3, #1
 8007f1e:	b29a      	uxth	r2, r3
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	3b01      	subs	r3, #1
 8007f2c:	b29a      	uxth	r2, r3
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007f32:	e10b      	b.n	800814c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f38:	2b02      	cmp	r3, #2
 8007f3a:	d14e      	bne.n	8007fda <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f3e:	9300      	str	r3, [sp, #0]
 8007f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f42:	2200      	movs	r2, #0
 8007f44:	4906      	ldr	r1, [pc, #24]	@ (8007f60 <HAL_I2C_Mem_Read+0x22c>)
 8007f46:	68f8      	ldr	r0, [r7, #12]
 8007f48:	f000 fbe8 	bl	800871c <I2C_WaitOnFlagUntilTimeout>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d008      	beq.n	8007f64 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007f52:	2301      	movs	r3, #1
 8007f54:	e10e      	b.n	8008174 <HAL_I2C_Mem_Read+0x440>
 8007f56:	bf00      	nop
 8007f58:	00100002 	.word	0x00100002
 8007f5c:	ffff0000 	.word	0xffff0000
 8007f60:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007f72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	691a      	ldr	r2, [r3, #16]
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f7e:	b2d2      	uxtb	r2, r2
 8007f80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f86:	1c5a      	adds	r2, r3, #1
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f90:	3b01      	subs	r3, #1
 8007f92:	b29a      	uxth	r2, r3
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	3b01      	subs	r3, #1
 8007fa0:	b29a      	uxth	r2, r3
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	691a      	ldr	r2, [r3, #16]
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fb0:	b2d2      	uxtb	r2, r2
 8007fb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fb8:	1c5a      	adds	r2, r3, #1
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007fc2:	3b01      	subs	r3, #1
 8007fc4:	b29a      	uxth	r2, r3
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	3b01      	subs	r3, #1
 8007fd2:	b29a      	uxth	r2, r3
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007fd8:	e0b8      	b.n	800814c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fdc:	9300      	str	r3, [sp, #0]
 8007fde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	4966      	ldr	r1, [pc, #408]	@ (800817c <HAL_I2C_Mem_Read+0x448>)
 8007fe4:	68f8      	ldr	r0, [r7, #12]
 8007fe6:	f000 fb99 	bl	800871c <I2C_WaitOnFlagUntilTimeout>
 8007fea:	4603      	mov	r3, r0
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d001      	beq.n	8007ff4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	e0bf      	b.n	8008174 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008002:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	691a      	ldr	r2, [r3, #16]
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800800e:	b2d2      	uxtb	r2, r2
 8008010:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008016:	1c5a      	adds	r2, r3, #1
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008020:	3b01      	subs	r3, #1
 8008022:	b29a      	uxth	r2, r3
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800802c:	b29b      	uxth	r3, r3
 800802e:	3b01      	subs	r3, #1
 8008030:	b29a      	uxth	r2, r3
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008038:	9300      	str	r3, [sp, #0]
 800803a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800803c:	2200      	movs	r2, #0
 800803e:	494f      	ldr	r1, [pc, #316]	@ (800817c <HAL_I2C_Mem_Read+0x448>)
 8008040:	68f8      	ldr	r0, [r7, #12]
 8008042:	f000 fb6b 	bl	800871c <I2C_WaitOnFlagUntilTimeout>
 8008046:	4603      	mov	r3, r0
 8008048:	2b00      	cmp	r3, #0
 800804a:	d001      	beq.n	8008050 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800804c:	2301      	movs	r3, #1
 800804e:	e091      	b.n	8008174 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	681a      	ldr	r2, [r3, #0]
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800805e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	691a      	ldr	r2, [r3, #16]
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800806a:	b2d2      	uxtb	r2, r2
 800806c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008072:	1c5a      	adds	r2, r3, #1
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800807c:	3b01      	subs	r3, #1
 800807e:	b29a      	uxth	r2, r3
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008088:	b29b      	uxth	r3, r3
 800808a:	3b01      	subs	r3, #1
 800808c:	b29a      	uxth	r2, r3
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	691a      	ldr	r2, [r3, #16]
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800809c:	b2d2      	uxtb	r2, r2
 800809e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080a4:	1c5a      	adds	r2, r3, #1
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080ae:	3b01      	subs	r3, #1
 80080b0:	b29a      	uxth	r2, r3
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080ba:	b29b      	uxth	r3, r3
 80080bc:	3b01      	subs	r3, #1
 80080be:	b29a      	uxth	r2, r3
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80080c4:	e042      	b.n	800814c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80080c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080c8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80080ca:	68f8      	ldr	r0, [r7, #12]
 80080cc:	f000 fc7e 	bl	80089cc <I2C_WaitOnRXNEFlagUntilTimeout>
 80080d0:	4603      	mov	r3, r0
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d001      	beq.n	80080da <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80080d6:	2301      	movs	r3, #1
 80080d8:	e04c      	b.n	8008174 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	691a      	ldr	r2, [r3, #16]
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080e4:	b2d2      	uxtb	r2, r2
 80080e6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080ec:	1c5a      	adds	r2, r3, #1
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080f6:	3b01      	subs	r3, #1
 80080f8:	b29a      	uxth	r2, r3
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008102:	b29b      	uxth	r3, r3
 8008104:	3b01      	subs	r3, #1
 8008106:	b29a      	uxth	r2, r3
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	695b      	ldr	r3, [r3, #20]
 8008112:	f003 0304 	and.w	r3, r3, #4
 8008116:	2b04      	cmp	r3, #4
 8008118:	d118      	bne.n	800814c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	691a      	ldr	r2, [r3, #16]
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008124:	b2d2      	uxtb	r2, r2
 8008126:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800812c:	1c5a      	adds	r2, r3, #1
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008136:	3b01      	subs	r3, #1
 8008138:	b29a      	uxth	r2, r3
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008142:	b29b      	uxth	r3, r3
 8008144:	3b01      	subs	r3, #1
 8008146:	b29a      	uxth	r2, r3
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008150:	2b00      	cmp	r3, #0
 8008152:	f47f aec2 	bne.w	8007eda <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2220      	movs	r2, #32
 800815a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2200      	movs	r2, #0
 8008162:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	2200      	movs	r2, #0
 800816a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800816e:	2300      	movs	r3, #0
 8008170:	e000      	b.n	8008174 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8008172:	2302      	movs	r3, #2
  }
}
 8008174:	4618      	mov	r0, r3
 8008176:	3728      	adds	r7, #40	@ 0x28
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}
 800817c:	00010004 	.word	0x00010004

08008180 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b088      	sub	sp, #32
 8008184:	af02      	add	r7, sp, #8
 8008186:	60f8      	str	r0, [r7, #12]
 8008188:	607a      	str	r2, [r7, #4]
 800818a:	603b      	str	r3, [r7, #0]
 800818c:	460b      	mov	r3, r1
 800818e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008194:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	2b08      	cmp	r3, #8
 800819a:	d006      	beq.n	80081aa <I2C_MasterRequestWrite+0x2a>
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	2b01      	cmp	r3, #1
 80081a0:	d003      	beq.n	80081aa <I2C_MasterRequestWrite+0x2a>
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80081a8:	d108      	bne.n	80081bc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80081b8:	601a      	str	r2, [r3, #0]
 80081ba:	e00b      	b.n	80081d4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081c0:	2b12      	cmp	r3, #18
 80081c2:	d107      	bne.n	80081d4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	681a      	ldr	r2, [r3, #0]
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80081d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	9300      	str	r3, [sp, #0]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2200      	movs	r2, #0
 80081dc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80081e0:	68f8      	ldr	r0, [r7, #12]
 80081e2:	f000 fa9b 	bl	800871c <I2C_WaitOnFlagUntilTimeout>
 80081e6:	4603      	mov	r3, r0
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d00d      	beq.n	8008208 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80081fa:	d103      	bne.n	8008204 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008202:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008204:	2303      	movs	r3, #3
 8008206:	e035      	b.n	8008274 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	691b      	ldr	r3, [r3, #16]
 800820c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008210:	d108      	bne.n	8008224 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008212:	897b      	ldrh	r3, [r7, #10]
 8008214:	b2db      	uxtb	r3, r3
 8008216:	461a      	mov	r2, r3
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008220:	611a      	str	r2, [r3, #16]
 8008222:	e01b      	b.n	800825c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008224:	897b      	ldrh	r3, [r7, #10]
 8008226:	11db      	asrs	r3, r3, #7
 8008228:	b2db      	uxtb	r3, r3
 800822a:	f003 0306 	and.w	r3, r3, #6
 800822e:	b2db      	uxtb	r3, r3
 8008230:	f063 030f 	orn	r3, r3, #15
 8008234:	b2da      	uxtb	r2, r3
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	687a      	ldr	r2, [r7, #4]
 8008240:	490e      	ldr	r1, [pc, #56]	@ (800827c <I2C_MasterRequestWrite+0xfc>)
 8008242:	68f8      	ldr	r0, [r7, #12]
 8008244:	f000 fac1 	bl	80087ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008248:	4603      	mov	r3, r0
 800824a:	2b00      	cmp	r3, #0
 800824c:	d001      	beq.n	8008252 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800824e:	2301      	movs	r3, #1
 8008250:	e010      	b.n	8008274 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008252:	897b      	ldrh	r3, [r7, #10]
 8008254:	b2da      	uxtb	r2, r3
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	687a      	ldr	r2, [r7, #4]
 8008260:	4907      	ldr	r1, [pc, #28]	@ (8008280 <I2C_MasterRequestWrite+0x100>)
 8008262:	68f8      	ldr	r0, [r7, #12]
 8008264:	f000 fab1 	bl	80087ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008268:	4603      	mov	r3, r0
 800826a:	2b00      	cmp	r3, #0
 800826c:	d001      	beq.n	8008272 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800826e:	2301      	movs	r3, #1
 8008270:	e000      	b.n	8008274 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8008272:	2300      	movs	r3, #0
}
 8008274:	4618      	mov	r0, r3
 8008276:	3718      	adds	r7, #24
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}
 800827c:	00010008 	.word	0x00010008
 8008280:	00010002 	.word	0x00010002

08008284 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b088      	sub	sp, #32
 8008288:	af02      	add	r7, sp, #8
 800828a:	60f8      	str	r0, [r7, #12]
 800828c:	607a      	str	r2, [r7, #4]
 800828e:	603b      	str	r3, [r7, #0]
 8008290:	460b      	mov	r3, r1
 8008292:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008298:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	681a      	ldr	r2, [r3, #0]
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80082a8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	2b08      	cmp	r3, #8
 80082ae:	d006      	beq.n	80082be <I2C_MasterRequestRead+0x3a>
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	d003      	beq.n	80082be <I2C_MasterRequestRead+0x3a>
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80082bc:	d108      	bne.n	80082d0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	681a      	ldr	r2, [r3, #0]
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80082cc:	601a      	str	r2, [r3, #0]
 80082ce:	e00b      	b.n	80082e8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082d4:	2b11      	cmp	r3, #17
 80082d6:	d107      	bne.n	80082e8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	681a      	ldr	r2, [r3, #0]
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80082e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	9300      	str	r3, [sp, #0]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2200      	movs	r2, #0
 80082f0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80082f4:	68f8      	ldr	r0, [r7, #12]
 80082f6:	f000 fa11 	bl	800871c <I2C_WaitOnFlagUntilTimeout>
 80082fa:	4603      	mov	r3, r0
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d00d      	beq.n	800831c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800830a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800830e:	d103      	bne.n	8008318 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008316:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008318:	2303      	movs	r3, #3
 800831a:	e079      	b.n	8008410 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	691b      	ldr	r3, [r3, #16]
 8008320:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008324:	d108      	bne.n	8008338 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008326:	897b      	ldrh	r3, [r7, #10]
 8008328:	b2db      	uxtb	r3, r3
 800832a:	f043 0301 	orr.w	r3, r3, #1
 800832e:	b2da      	uxtb	r2, r3
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	611a      	str	r2, [r3, #16]
 8008336:	e05f      	b.n	80083f8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008338:	897b      	ldrh	r3, [r7, #10]
 800833a:	11db      	asrs	r3, r3, #7
 800833c:	b2db      	uxtb	r3, r3
 800833e:	f003 0306 	and.w	r3, r3, #6
 8008342:	b2db      	uxtb	r3, r3
 8008344:	f063 030f 	orn	r3, r3, #15
 8008348:	b2da      	uxtb	r2, r3
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	4930      	ldr	r1, [pc, #192]	@ (8008418 <I2C_MasterRequestRead+0x194>)
 8008356:	68f8      	ldr	r0, [r7, #12]
 8008358:	f000 fa37 	bl	80087ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800835c:	4603      	mov	r3, r0
 800835e:	2b00      	cmp	r3, #0
 8008360:	d001      	beq.n	8008366 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8008362:	2301      	movs	r3, #1
 8008364:	e054      	b.n	8008410 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008366:	897b      	ldrh	r3, [r7, #10]
 8008368:	b2da      	uxtb	r2, r3
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	687a      	ldr	r2, [r7, #4]
 8008374:	4929      	ldr	r1, [pc, #164]	@ (800841c <I2C_MasterRequestRead+0x198>)
 8008376:	68f8      	ldr	r0, [r7, #12]
 8008378:	f000 fa27 	bl	80087ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800837c:	4603      	mov	r3, r0
 800837e:	2b00      	cmp	r3, #0
 8008380:	d001      	beq.n	8008386 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8008382:	2301      	movs	r3, #1
 8008384:	e044      	b.n	8008410 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008386:	2300      	movs	r3, #0
 8008388:	613b      	str	r3, [r7, #16]
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	695b      	ldr	r3, [r3, #20]
 8008390:	613b      	str	r3, [r7, #16]
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	699b      	ldr	r3, [r3, #24]
 8008398:	613b      	str	r3, [r7, #16]
 800839a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80083aa:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	9300      	str	r3, [sp, #0]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2200      	movs	r2, #0
 80083b4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80083b8:	68f8      	ldr	r0, [r7, #12]
 80083ba:	f000 f9af 	bl	800871c <I2C_WaitOnFlagUntilTimeout>
 80083be:	4603      	mov	r3, r0
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d00d      	beq.n	80083e0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083d2:	d103      	bne.n	80083dc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80083da:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80083dc:	2303      	movs	r3, #3
 80083de:	e017      	b.n	8008410 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80083e0:	897b      	ldrh	r3, [r7, #10]
 80083e2:	11db      	asrs	r3, r3, #7
 80083e4:	b2db      	uxtb	r3, r3
 80083e6:	f003 0306 	and.w	r3, r3, #6
 80083ea:	b2db      	uxtb	r3, r3
 80083ec:	f063 030e 	orn	r3, r3, #14
 80083f0:	b2da      	uxtb	r2, r3
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	687a      	ldr	r2, [r7, #4]
 80083fc:	4907      	ldr	r1, [pc, #28]	@ (800841c <I2C_MasterRequestRead+0x198>)
 80083fe:	68f8      	ldr	r0, [r7, #12]
 8008400:	f000 f9e3 	bl	80087ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008404:	4603      	mov	r3, r0
 8008406:	2b00      	cmp	r3, #0
 8008408:	d001      	beq.n	800840e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800840a:	2301      	movs	r3, #1
 800840c:	e000      	b.n	8008410 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800840e:	2300      	movs	r3, #0
}
 8008410:	4618      	mov	r0, r3
 8008412:	3718      	adds	r7, #24
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}
 8008418:	00010008 	.word	0x00010008
 800841c:	00010002 	.word	0x00010002

08008420 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b088      	sub	sp, #32
 8008424:	af02      	add	r7, sp, #8
 8008426:	60f8      	str	r0, [r7, #12]
 8008428:	4608      	mov	r0, r1
 800842a:	4611      	mov	r1, r2
 800842c:	461a      	mov	r2, r3
 800842e:	4603      	mov	r3, r0
 8008430:	817b      	strh	r3, [r7, #10]
 8008432:	460b      	mov	r3, r1
 8008434:	813b      	strh	r3, [r7, #8]
 8008436:	4613      	mov	r3, r2
 8008438:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	681a      	ldr	r2, [r3, #0]
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008448:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800844a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800844c:	9300      	str	r3, [sp, #0]
 800844e:	6a3b      	ldr	r3, [r7, #32]
 8008450:	2200      	movs	r2, #0
 8008452:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008456:	68f8      	ldr	r0, [r7, #12]
 8008458:	f000 f960 	bl	800871c <I2C_WaitOnFlagUntilTimeout>
 800845c:	4603      	mov	r3, r0
 800845e:	2b00      	cmp	r3, #0
 8008460:	d00d      	beq.n	800847e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800846c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008470:	d103      	bne.n	800847a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008478:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800847a:	2303      	movs	r3, #3
 800847c:	e05f      	b.n	800853e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800847e:	897b      	ldrh	r3, [r7, #10]
 8008480:	b2db      	uxtb	r3, r3
 8008482:	461a      	mov	r2, r3
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800848c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800848e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008490:	6a3a      	ldr	r2, [r7, #32]
 8008492:	492d      	ldr	r1, [pc, #180]	@ (8008548 <I2C_RequestMemoryWrite+0x128>)
 8008494:	68f8      	ldr	r0, [r7, #12]
 8008496:	f000 f998 	bl	80087ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800849a:	4603      	mov	r3, r0
 800849c:	2b00      	cmp	r3, #0
 800849e:	d001      	beq.n	80084a4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80084a0:	2301      	movs	r3, #1
 80084a2:	e04c      	b.n	800853e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80084a4:	2300      	movs	r3, #0
 80084a6:	617b      	str	r3, [r7, #20]
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	695b      	ldr	r3, [r3, #20]
 80084ae:	617b      	str	r3, [r7, #20]
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	699b      	ldr	r3, [r3, #24]
 80084b6:	617b      	str	r3, [r7, #20]
 80084b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80084ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084bc:	6a39      	ldr	r1, [r7, #32]
 80084be:	68f8      	ldr	r0, [r7, #12]
 80084c0:	f000 fa02 	bl	80088c8 <I2C_WaitOnTXEFlagUntilTimeout>
 80084c4:	4603      	mov	r3, r0
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d00d      	beq.n	80084e6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084ce:	2b04      	cmp	r3, #4
 80084d0:	d107      	bne.n	80084e2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80084e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80084e2:	2301      	movs	r3, #1
 80084e4:	e02b      	b.n	800853e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80084e6:	88fb      	ldrh	r3, [r7, #6]
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d105      	bne.n	80084f8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80084ec:	893b      	ldrh	r3, [r7, #8]
 80084ee:	b2da      	uxtb	r2, r3
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	611a      	str	r2, [r3, #16]
 80084f6:	e021      	b.n	800853c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80084f8:	893b      	ldrh	r3, [r7, #8]
 80084fa:	0a1b      	lsrs	r3, r3, #8
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	b2da      	uxtb	r2, r3
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008506:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008508:	6a39      	ldr	r1, [r7, #32]
 800850a:	68f8      	ldr	r0, [r7, #12]
 800850c:	f000 f9dc 	bl	80088c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8008510:	4603      	mov	r3, r0
 8008512:	2b00      	cmp	r3, #0
 8008514:	d00d      	beq.n	8008532 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800851a:	2b04      	cmp	r3, #4
 800851c:	d107      	bne.n	800852e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	681a      	ldr	r2, [r3, #0]
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800852c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800852e:	2301      	movs	r3, #1
 8008530:	e005      	b.n	800853e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008532:	893b      	ldrh	r3, [r7, #8]
 8008534:	b2da      	uxtb	r2, r3
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800853c:	2300      	movs	r3, #0
}
 800853e:	4618      	mov	r0, r3
 8008540:	3718      	adds	r7, #24
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}
 8008546:	bf00      	nop
 8008548:	00010002 	.word	0x00010002

0800854c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b088      	sub	sp, #32
 8008550:	af02      	add	r7, sp, #8
 8008552:	60f8      	str	r0, [r7, #12]
 8008554:	4608      	mov	r0, r1
 8008556:	4611      	mov	r1, r2
 8008558:	461a      	mov	r2, r3
 800855a:	4603      	mov	r3, r0
 800855c:	817b      	strh	r3, [r7, #10]
 800855e:	460b      	mov	r3, r1
 8008560:	813b      	strh	r3, [r7, #8]
 8008562:	4613      	mov	r3, r2
 8008564:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008574:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	681a      	ldr	r2, [r3, #0]
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008584:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008588:	9300      	str	r3, [sp, #0]
 800858a:	6a3b      	ldr	r3, [r7, #32]
 800858c:	2200      	movs	r2, #0
 800858e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008592:	68f8      	ldr	r0, [r7, #12]
 8008594:	f000 f8c2 	bl	800871c <I2C_WaitOnFlagUntilTimeout>
 8008598:	4603      	mov	r3, r0
 800859a:	2b00      	cmp	r3, #0
 800859c:	d00d      	beq.n	80085ba <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085ac:	d103      	bne.n	80085b6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80085b4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80085b6:	2303      	movs	r3, #3
 80085b8:	e0aa      	b.n	8008710 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80085ba:	897b      	ldrh	r3, [r7, #10]
 80085bc:	b2db      	uxtb	r3, r3
 80085be:	461a      	mov	r2, r3
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80085c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80085ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085cc:	6a3a      	ldr	r2, [r7, #32]
 80085ce:	4952      	ldr	r1, [pc, #328]	@ (8008718 <I2C_RequestMemoryRead+0x1cc>)
 80085d0:	68f8      	ldr	r0, [r7, #12]
 80085d2:	f000 f8fa 	bl	80087ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80085d6:	4603      	mov	r3, r0
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d001      	beq.n	80085e0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80085dc:	2301      	movs	r3, #1
 80085de:	e097      	b.n	8008710 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085e0:	2300      	movs	r3, #0
 80085e2:	617b      	str	r3, [r7, #20]
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	695b      	ldr	r3, [r3, #20]
 80085ea:	617b      	str	r3, [r7, #20]
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	699b      	ldr	r3, [r3, #24]
 80085f2:	617b      	str	r3, [r7, #20]
 80085f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80085f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085f8:	6a39      	ldr	r1, [r7, #32]
 80085fa:	68f8      	ldr	r0, [r7, #12]
 80085fc:	f000 f964 	bl	80088c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8008600:	4603      	mov	r3, r0
 8008602:	2b00      	cmp	r3, #0
 8008604:	d00d      	beq.n	8008622 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800860a:	2b04      	cmp	r3, #4
 800860c:	d107      	bne.n	800861e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	681a      	ldr	r2, [r3, #0]
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800861c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800861e:	2301      	movs	r3, #1
 8008620:	e076      	b.n	8008710 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008622:	88fb      	ldrh	r3, [r7, #6]
 8008624:	2b01      	cmp	r3, #1
 8008626:	d105      	bne.n	8008634 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008628:	893b      	ldrh	r3, [r7, #8]
 800862a:	b2da      	uxtb	r2, r3
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	611a      	str	r2, [r3, #16]
 8008632:	e021      	b.n	8008678 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008634:	893b      	ldrh	r3, [r7, #8]
 8008636:	0a1b      	lsrs	r3, r3, #8
 8008638:	b29b      	uxth	r3, r3
 800863a:	b2da      	uxtb	r2, r3
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008642:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008644:	6a39      	ldr	r1, [r7, #32]
 8008646:	68f8      	ldr	r0, [r7, #12]
 8008648:	f000 f93e 	bl	80088c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800864c:	4603      	mov	r3, r0
 800864e:	2b00      	cmp	r3, #0
 8008650:	d00d      	beq.n	800866e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008656:	2b04      	cmp	r3, #4
 8008658:	d107      	bne.n	800866a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	681a      	ldr	r2, [r3, #0]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008668:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800866a:	2301      	movs	r3, #1
 800866c:	e050      	b.n	8008710 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800866e:	893b      	ldrh	r3, [r7, #8]
 8008670:	b2da      	uxtb	r2, r3
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008678:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800867a:	6a39      	ldr	r1, [r7, #32]
 800867c:	68f8      	ldr	r0, [r7, #12]
 800867e:	f000 f923 	bl	80088c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8008682:	4603      	mov	r3, r0
 8008684:	2b00      	cmp	r3, #0
 8008686:	d00d      	beq.n	80086a4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800868c:	2b04      	cmp	r3, #4
 800868e:	d107      	bne.n	80086a0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	681a      	ldr	r2, [r3, #0]
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800869e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80086a0:	2301      	movs	r3, #1
 80086a2:	e035      	b.n	8008710 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	681a      	ldr	r2, [r3, #0]
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80086b2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80086b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086b6:	9300      	str	r3, [sp, #0]
 80086b8:	6a3b      	ldr	r3, [r7, #32]
 80086ba:	2200      	movs	r2, #0
 80086bc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80086c0:	68f8      	ldr	r0, [r7, #12]
 80086c2:	f000 f82b 	bl	800871c <I2C_WaitOnFlagUntilTimeout>
 80086c6:	4603      	mov	r3, r0
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d00d      	beq.n	80086e8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086da:	d103      	bne.n	80086e4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80086e2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80086e4:	2303      	movs	r3, #3
 80086e6:	e013      	b.n	8008710 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80086e8:	897b      	ldrh	r3, [r7, #10]
 80086ea:	b2db      	uxtb	r3, r3
 80086ec:	f043 0301 	orr.w	r3, r3, #1
 80086f0:	b2da      	uxtb	r2, r3
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80086f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086fa:	6a3a      	ldr	r2, [r7, #32]
 80086fc:	4906      	ldr	r1, [pc, #24]	@ (8008718 <I2C_RequestMemoryRead+0x1cc>)
 80086fe:	68f8      	ldr	r0, [r7, #12]
 8008700:	f000 f863 	bl	80087ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008704:	4603      	mov	r3, r0
 8008706:	2b00      	cmp	r3, #0
 8008708:	d001      	beq.n	800870e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800870a:	2301      	movs	r3, #1
 800870c:	e000      	b.n	8008710 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800870e:	2300      	movs	r3, #0
}
 8008710:	4618      	mov	r0, r3
 8008712:	3718      	adds	r7, #24
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}
 8008718:	00010002 	.word	0x00010002

0800871c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b084      	sub	sp, #16
 8008720:	af00      	add	r7, sp, #0
 8008722:	60f8      	str	r0, [r7, #12]
 8008724:	60b9      	str	r1, [r7, #8]
 8008726:	603b      	str	r3, [r7, #0]
 8008728:	4613      	mov	r3, r2
 800872a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800872c:	e025      	b.n	800877a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008734:	d021      	beq.n	800877a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008736:	f7fd fd5b 	bl	80061f0 <HAL_GetTick>
 800873a:	4602      	mov	r2, r0
 800873c:	69bb      	ldr	r3, [r7, #24]
 800873e:	1ad3      	subs	r3, r2, r3
 8008740:	683a      	ldr	r2, [r7, #0]
 8008742:	429a      	cmp	r2, r3
 8008744:	d302      	bcc.n	800874c <I2C_WaitOnFlagUntilTimeout+0x30>
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d116      	bne.n	800877a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2200      	movs	r2, #0
 8008750:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2220      	movs	r2, #32
 8008756:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2200      	movs	r2, #0
 800875e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008766:	f043 0220 	orr.w	r2, r3, #32
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2200      	movs	r2, #0
 8008772:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8008776:	2301      	movs	r3, #1
 8008778:	e023      	b.n	80087c2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	0c1b      	lsrs	r3, r3, #16
 800877e:	b2db      	uxtb	r3, r3
 8008780:	2b01      	cmp	r3, #1
 8008782:	d10d      	bne.n	80087a0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	695b      	ldr	r3, [r3, #20]
 800878a:	43da      	mvns	r2, r3
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	4013      	ands	r3, r2
 8008790:	b29b      	uxth	r3, r3
 8008792:	2b00      	cmp	r3, #0
 8008794:	bf0c      	ite	eq
 8008796:	2301      	moveq	r3, #1
 8008798:	2300      	movne	r3, #0
 800879a:	b2db      	uxtb	r3, r3
 800879c:	461a      	mov	r2, r3
 800879e:	e00c      	b.n	80087ba <I2C_WaitOnFlagUntilTimeout+0x9e>
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	699b      	ldr	r3, [r3, #24]
 80087a6:	43da      	mvns	r2, r3
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	4013      	ands	r3, r2
 80087ac:	b29b      	uxth	r3, r3
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	bf0c      	ite	eq
 80087b2:	2301      	moveq	r3, #1
 80087b4:	2300      	movne	r3, #0
 80087b6:	b2db      	uxtb	r3, r3
 80087b8:	461a      	mov	r2, r3
 80087ba:	79fb      	ldrb	r3, [r7, #7]
 80087bc:	429a      	cmp	r2, r3
 80087be:	d0b6      	beq.n	800872e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80087c0:	2300      	movs	r3, #0
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3710      	adds	r7, #16
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}

080087ca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80087ca:	b580      	push	{r7, lr}
 80087cc:	b084      	sub	sp, #16
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	60f8      	str	r0, [r7, #12]
 80087d2:	60b9      	str	r1, [r7, #8]
 80087d4:	607a      	str	r2, [r7, #4]
 80087d6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80087d8:	e051      	b.n	800887e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	695b      	ldr	r3, [r3, #20]
 80087e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80087e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087e8:	d123      	bne.n	8008832 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	681a      	ldr	r2, [r3, #0]
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80087f8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008802:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	2200      	movs	r2, #0
 8008808:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2220      	movs	r2, #32
 800880e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2200      	movs	r2, #0
 8008816:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800881e:	f043 0204 	orr.w	r2, r3, #4
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2200      	movs	r2, #0
 800882a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800882e:	2301      	movs	r3, #1
 8008830:	e046      	b.n	80088c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008838:	d021      	beq.n	800887e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800883a:	f7fd fcd9 	bl	80061f0 <HAL_GetTick>
 800883e:	4602      	mov	r2, r0
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	1ad3      	subs	r3, r2, r3
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	429a      	cmp	r2, r3
 8008848:	d302      	bcc.n	8008850 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d116      	bne.n	800887e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2200      	movs	r2, #0
 8008854:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2220      	movs	r2, #32
 800885a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2200      	movs	r2, #0
 8008862:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800886a:	f043 0220 	orr.w	r2, r3, #32
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	2200      	movs	r2, #0
 8008876:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800887a:	2301      	movs	r3, #1
 800887c:	e020      	b.n	80088c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	0c1b      	lsrs	r3, r3, #16
 8008882:	b2db      	uxtb	r3, r3
 8008884:	2b01      	cmp	r3, #1
 8008886:	d10c      	bne.n	80088a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	695b      	ldr	r3, [r3, #20]
 800888e:	43da      	mvns	r2, r3
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	4013      	ands	r3, r2
 8008894:	b29b      	uxth	r3, r3
 8008896:	2b00      	cmp	r3, #0
 8008898:	bf14      	ite	ne
 800889a:	2301      	movne	r3, #1
 800889c:	2300      	moveq	r3, #0
 800889e:	b2db      	uxtb	r3, r3
 80088a0:	e00b      	b.n	80088ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	699b      	ldr	r3, [r3, #24]
 80088a8:	43da      	mvns	r2, r3
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	4013      	ands	r3, r2
 80088ae:	b29b      	uxth	r3, r3
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	bf14      	ite	ne
 80088b4:	2301      	movne	r3, #1
 80088b6:	2300      	moveq	r3, #0
 80088b8:	b2db      	uxtb	r3, r3
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d18d      	bne.n	80087da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80088be:	2300      	movs	r3, #0
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3710      	adds	r7, #16
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b084      	sub	sp, #16
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	60f8      	str	r0, [r7, #12]
 80088d0:	60b9      	str	r1, [r7, #8]
 80088d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80088d4:	e02d      	b.n	8008932 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80088d6:	68f8      	ldr	r0, [r7, #12]
 80088d8:	f000 f8ce 	bl	8008a78 <I2C_IsAcknowledgeFailed>
 80088dc:	4603      	mov	r3, r0
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d001      	beq.n	80088e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80088e2:	2301      	movs	r3, #1
 80088e4:	e02d      	b.n	8008942 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088ec:	d021      	beq.n	8008932 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088ee:	f7fd fc7f 	bl	80061f0 <HAL_GetTick>
 80088f2:	4602      	mov	r2, r0
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	1ad3      	subs	r3, r2, r3
 80088f8:	68ba      	ldr	r2, [r7, #8]
 80088fa:	429a      	cmp	r2, r3
 80088fc:	d302      	bcc.n	8008904 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d116      	bne.n	8008932 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2200      	movs	r2, #0
 8008908:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2220      	movs	r2, #32
 800890e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2200      	movs	r2, #0
 8008916:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800891e:	f043 0220 	orr.w	r2, r3, #32
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2200      	movs	r2, #0
 800892a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800892e:	2301      	movs	r3, #1
 8008930:	e007      	b.n	8008942 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	695b      	ldr	r3, [r3, #20]
 8008938:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800893c:	2b80      	cmp	r3, #128	@ 0x80
 800893e:	d1ca      	bne.n	80088d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008940:	2300      	movs	r3, #0
}
 8008942:	4618      	mov	r0, r3
 8008944:	3710      	adds	r7, #16
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}

0800894a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800894a:	b580      	push	{r7, lr}
 800894c:	b084      	sub	sp, #16
 800894e:	af00      	add	r7, sp, #0
 8008950:	60f8      	str	r0, [r7, #12]
 8008952:	60b9      	str	r1, [r7, #8]
 8008954:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008956:	e02d      	b.n	80089b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008958:	68f8      	ldr	r0, [r7, #12]
 800895a:	f000 f88d 	bl	8008a78 <I2C_IsAcknowledgeFailed>
 800895e:	4603      	mov	r3, r0
 8008960:	2b00      	cmp	r3, #0
 8008962:	d001      	beq.n	8008968 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008964:	2301      	movs	r3, #1
 8008966:	e02d      	b.n	80089c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800896e:	d021      	beq.n	80089b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008970:	f7fd fc3e 	bl	80061f0 <HAL_GetTick>
 8008974:	4602      	mov	r2, r0
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	1ad3      	subs	r3, r2, r3
 800897a:	68ba      	ldr	r2, [r7, #8]
 800897c:	429a      	cmp	r2, r3
 800897e:	d302      	bcc.n	8008986 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d116      	bne.n	80089b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	2200      	movs	r2, #0
 800898a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2220      	movs	r2, #32
 8008990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2200      	movs	r2, #0
 8008998:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089a0:	f043 0220 	orr.w	r2, r3, #32
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2200      	movs	r2, #0
 80089ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80089b0:	2301      	movs	r3, #1
 80089b2:	e007      	b.n	80089c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	695b      	ldr	r3, [r3, #20]
 80089ba:	f003 0304 	and.w	r3, r3, #4
 80089be:	2b04      	cmp	r3, #4
 80089c0:	d1ca      	bne.n	8008958 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80089c2:	2300      	movs	r3, #0
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3710      	adds	r7, #16
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}

080089cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b084      	sub	sp, #16
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	60f8      	str	r0, [r7, #12]
 80089d4:	60b9      	str	r1, [r7, #8]
 80089d6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80089d8:	e042      	b.n	8008a60 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	695b      	ldr	r3, [r3, #20]
 80089e0:	f003 0310 	and.w	r3, r3, #16
 80089e4:	2b10      	cmp	r3, #16
 80089e6:	d119      	bne.n	8008a1c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f06f 0210 	mvn.w	r2, #16
 80089f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	2200      	movs	r2, #0
 80089f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2220      	movs	r2, #32
 80089fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2200      	movs	r2, #0
 8008a04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2200      	movs	r2, #0
 8008a14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008a18:	2301      	movs	r3, #1
 8008a1a:	e029      	b.n	8008a70 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a1c:	f7fd fbe8 	bl	80061f0 <HAL_GetTick>
 8008a20:	4602      	mov	r2, r0
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	1ad3      	subs	r3, r2, r3
 8008a26:	68ba      	ldr	r2, [r7, #8]
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d302      	bcc.n	8008a32 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d116      	bne.n	8008a60 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2200      	movs	r2, #0
 8008a36:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2220      	movs	r2, #32
 8008a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2200      	movs	r2, #0
 8008a44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a4c:	f043 0220 	orr.w	r2, r3, #32
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2200      	movs	r2, #0
 8008a58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	e007      	b.n	8008a70 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	695b      	ldr	r3, [r3, #20]
 8008a66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a6a:	2b40      	cmp	r3, #64	@ 0x40
 8008a6c:	d1b5      	bne.n	80089da <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008a6e:	2300      	movs	r3, #0
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3710      	adds	r7, #16
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}

08008a78 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b083      	sub	sp, #12
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	695b      	ldr	r3, [r3, #20]
 8008a86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008a8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a8e:	d11b      	bne.n	8008ac8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008a98:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2220      	movs	r2, #32
 8008aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ab4:	f043 0204 	orr.w	r2, r3, #4
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	e000      	b.n	8008aca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008ac8:	2300      	movs	r3, #0
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	370c      	adds	r7, #12
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad4:	4770      	bx	lr
	...

08008ad8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b084      	sub	sp, #16
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d101      	bne.n	8008aec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008ae8:	2301      	movs	r3, #1
 8008aea:	e0cc      	b.n	8008c86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008aec:	4b68      	ldr	r3, [pc, #416]	@ (8008c90 <HAL_RCC_ClockConfig+0x1b8>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f003 030f 	and.w	r3, r3, #15
 8008af4:	683a      	ldr	r2, [r7, #0]
 8008af6:	429a      	cmp	r2, r3
 8008af8:	d90c      	bls.n	8008b14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008afa:	4b65      	ldr	r3, [pc, #404]	@ (8008c90 <HAL_RCC_ClockConfig+0x1b8>)
 8008afc:	683a      	ldr	r2, [r7, #0]
 8008afe:	b2d2      	uxtb	r2, r2
 8008b00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b02:	4b63      	ldr	r3, [pc, #396]	@ (8008c90 <HAL_RCC_ClockConfig+0x1b8>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f003 030f 	and.w	r3, r3, #15
 8008b0a:	683a      	ldr	r2, [r7, #0]
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	d001      	beq.n	8008b14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008b10:	2301      	movs	r3, #1
 8008b12:	e0b8      	b.n	8008c86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f003 0302 	and.w	r3, r3, #2
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d020      	beq.n	8008b62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f003 0304 	and.w	r3, r3, #4
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d005      	beq.n	8008b38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008b2c:	4b59      	ldr	r3, [pc, #356]	@ (8008c94 <HAL_RCC_ClockConfig+0x1bc>)
 8008b2e:	689b      	ldr	r3, [r3, #8]
 8008b30:	4a58      	ldr	r2, [pc, #352]	@ (8008c94 <HAL_RCC_ClockConfig+0x1bc>)
 8008b32:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008b36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f003 0308 	and.w	r3, r3, #8
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d005      	beq.n	8008b50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008b44:	4b53      	ldr	r3, [pc, #332]	@ (8008c94 <HAL_RCC_ClockConfig+0x1bc>)
 8008b46:	689b      	ldr	r3, [r3, #8]
 8008b48:	4a52      	ldr	r2, [pc, #328]	@ (8008c94 <HAL_RCC_ClockConfig+0x1bc>)
 8008b4a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008b4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b50:	4b50      	ldr	r3, [pc, #320]	@ (8008c94 <HAL_RCC_ClockConfig+0x1bc>)
 8008b52:	689b      	ldr	r3, [r3, #8]
 8008b54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	689b      	ldr	r3, [r3, #8]
 8008b5c:	494d      	ldr	r1, [pc, #308]	@ (8008c94 <HAL_RCC_ClockConfig+0x1bc>)
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f003 0301 	and.w	r3, r3, #1
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d044      	beq.n	8008bf8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	685b      	ldr	r3, [r3, #4]
 8008b72:	2b01      	cmp	r3, #1
 8008b74:	d107      	bne.n	8008b86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b76:	4b47      	ldr	r3, [pc, #284]	@ (8008c94 <HAL_RCC_ClockConfig+0x1bc>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d119      	bne.n	8008bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b82:	2301      	movs	r3, #1
 8008b84:	e07f      	b.n	8008c86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	2b02      	cmp	r3, #2
 8008b8c:	d003      	beq.n	8008b96 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008b92:	2b03      	cmp	r3, #3
 8008b94:	d107      	bne.n	8008ba6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b96:	4b3f      	ldr	r3, [pc, #252]	@ (8008c94 <HAL_RCC_ClockConfig+0x1bc>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d109      	bne.n	8008bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	e06f      	b.n	8008c86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ba6:	4b3b      	ldr	r3, [pc, #236]	@ (8008c94 <HAL_RCC_ClockConfig+0x1bc>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f003 0302 	and.w	r3, r3, #2
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d101      	bne.n	8008bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	e067      	b.n	8008c86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008bb6:	4b37      	ldr	r3, [pc, #220]	@ (8008c94 <HAL_RCC_ClockConfig+0x1bc>)
 8008bb8:	689b      	ldr	r3, [r3, #8]
 8008bba:	f023 0203 	bic.w	r2, r3, #3
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	4934      	ldr	r1, [pc, #208]	@ (8008c94 <HAL_RCC_ClockConfig+0x1bc>)
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008bc8:	f7fd fb12 	bl	80061f0 <HAL_GetTick>
 8008bcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008bce:	e00a      	b.n	8008be6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008bd0:	f7fd fb0e 	bl	80061f0 <HAL_GetTick>
 8008bd4:	4602      	mov	r2, r0
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	1ad3      	subs	r3, r2, r3
 8008bda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d901      	bls.n	8008be6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008be2:	2303      	movs	r3, #3
 8008be4:	e04f      	b.n	8008c86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008be6:	4b2b      	ldr	r3, [pc, #172]	@ (8008c94 <HAL_RCC_ClockConfig+0x1bc>)
 8008be8:	689b      	ldr	r3, [r3, #8]
 8008bea:	f003 020c 	and.w	r2, r3, #12
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	685b      	ldr	r3, [r3, #4]
 8008bf2:	009b      	lsls	r3, r3, #2
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d1eb      	bne.n	8008bd0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008bf8:	4b25      	ldr	r3, [pc, #148]	@ (8008c90 <HAL_RCC_ClockConfig+0x1b8>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f003 030f 	and.w	r3, r3, #15
 8008c00:	683a      	ldr	r2, [r7, #0]
 8008c02:	429a      	cmp	r2, r3
 8008c04:	d20c      	bcs.n	8008c20 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c06:	4b22      	ldr	r3, [pc, #136]	@ (8008c90 <HAL_RCC_ClockConfig+0x1b8>)
 8008c08:	683a      	ldr	r2, [r7, #0]
 8008c0a:	b2d2      	uxtb	r2, r2
 8008c0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c0e:	4b20      	ldr	r3, [pc, #128]	@ (8008c90 <HAL_RCC_ClockConfig+0x1b8>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f003 030f 	and.w	r3, r3, #15
 8008c16:	683a      	ldr	r2, [r7, #0]
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d001      	beq.n	8008c20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	e032      	b.n	8008c86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f003 0304 	and.w	r3, r3, #4
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d008      	beq.n	8008c3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008c2c:	4b19      	ldr	r3, [pc, #100]	@ (8008c94 <HAL_RCC_ClockConfig+0x1bc>)
 8008c2e:	689b      	ldr	r3, [r3, #8]
 8008c30:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	68db      	ldr	r3, [r3, #12]
 8008c38:	4916      	ldr	r1, [pc, #88]	@ (8008c94 <HAL_RCC_ClockConfig+0x1bc>)
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f003 0308 	and.w	r3, r3, #8
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d009      	beq.n	8008c5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008c4a:	4b12      	ldr	r3, [pc, #72]	@ (8008c94 <HAL_RCC_ClockConfig+0x1bc>)
 8008c4c:	689b      	ldr	r3, [r3, #8]
 8008c4e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	691b      	ldr	r3, [r3, #16]
 8008c56:	00db      	lsls	r3, r3, #3
 8008c58:	490e      	ldr	r1, [pc, #56]	@ (8008c94 <HAL_RCC_ClockConfig+0x1bc>)
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008c5e:	f000 f855 	bl	8008d0c <HAL_RCC_GetSysClockFreq>
 8008c62:	4602      	mov	r2, r0
 8008c64:	4b0b      	ldr	r3, [pc, #44]	@ (8008c94 <HAL_RCC_ClockConfig+0x1bc>)
 8008c66:	689b      	ldr	r3, [r3, #8]
 8008c68:	091b      	lsrs	r3, r3, #4
 8008c6a:	f003 030f 	and.w	r3, r3, #15
 8008c6e:	490a      	ldr	r1, [pc, #40]	@ (8008c98 <HAL_RCC_ClockConfig+0x1c0>)
 8008c70:	5ccb      	ldrb	r3, [r1, r3]
 8008c72:	fa22 f303 	lsr.w	r3, r2, r3
 8008c76:	4a09      	ldr	r2, [pc, #36]	@ (8008c9c <HAL_RCC_ClockConfig+0x1c4>)
 8008c78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008c7a:	4b09      	ldr	r3, [pc, #36]	@ (8008ca0 <HAL_RCC_ClockConfig+0x1c8>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f7fd fa72 	bl	8006168 <HAL_InitTick>

  return HAL_OK;
 8008c84:	2300      	movs	r3, #0
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3710      	adds	r7, #16
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}
 8008c8e:	bf00      	nop
 8008c90:	40023c00 	.word	0x40023c00
 8008c94:	40023800 	.word	0x40023800
 8008c98:	0800f2c8 	.word	0x0800f2c8
 8008c9c:	20000004 	.word	0x20000004
 8008ca0:	20000008 	.word	0x20000008

08008ca4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008ca8:	4b03      	ldr	r3, [pc, #12]	@ (8008cb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8008caa:	681b      	ldr	r3, [r3, #0]
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb4:	4770      	bx	lr
 8008cb6:	bf00      	nop
 8008cb8:	20000004 	.word	0x20000004

08008cbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008cc0:	f7ff fff0 	bl	8008ca4 <HAL_RCC_GetHCLKFreq>
 8008cc4:	4602      	mov	r2, r0
 8008cc6:	4b05      	ldr	r3, [pc, #20]	@ (8008cdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8008cc8:	689b      	ldr	r3, [r3, #8]
 8008cca:	0a9b      	lsrs	r3, r3, #10
 8008ccc:	f003 0307 	and.w	r3, r3, #7
 8008cd0:	4903      	ldr	r1, [pc, #12]	@ (8008ce0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008cd2:	5ccb      	ldrb	r3, [r1, r3]
 8008cd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	bd80      	pop	{r7, pc}
 8008cdc:	40023800 	.word	0x40023800
 8008ce0:	0800f2d8 	.word	0x0800f2d8

08008ce4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008ce8:	f7ff ffdc 	bl	8008ca4 <HAL_RCC_GetHCLKFreq>
 8008cec:	4602      	mov	r2, r0
 8008cee:	4b05      	ldr	r3, [pc, #20]	@ (8008d04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008cf0:	689b      	ldr	r3, [r3, #8]
 8008cf2:	0b5b      	lsrs	r3, r3, #13
 8008cf4:	f003 0307 	and.w	r3, r3, #7
 8008cf8:	4903      	ldr	r1, [pc, #12]	@ (8008d08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008cfa:	5ccb      	ldrb	r3, [r1, r3]
 8008cfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	bd80      	pop	{r7, pc}
 8008d04:	40023800 	.word	0x40023800
 8008d08:	0800f2d8 	.word	0x0800f2d8

08008d0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008d0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d10:	b0ae      	sub	sp, #184	@ 0xb8
 8008d12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008d14:	2300      	movs	r3, #0
 8008d16:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8008d20:	2300      	movs	r3, #0
 8008d22:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8008d26:	2300      	movs	r3, #0
 8008d28:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008d32:	4bcb      	ldr	r3, [pc, #812]	@ (8009060 <HAL_RCC_GetSysClockFreq+0x354>)
 8008d34:	689b      	ldr	r3, [r3, #8]
 8008d36:	f003 030c 	and.w	r3, r3, #12
 8008d3a:	2b0c      	cmp	r3, #12
 8008d3c:	f200 8206 	bhi.w	800914c <HAL_RCC_GetSysClockFreq+0x440>
 8008d40:	a201      	add	r2, pc, #4	@ (adr r2, 8008d48 <HAL_RCC_GetSysClockFreq+0x3c>)
 8008d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d46:	bf00      	nop
 8008d48:	08008d7d 	.word	0x08008d7d
 8008d4c:	0800914d 	.word	0x0800914d
 8008d50:	0800914d 	.word	0x0800914d
 8008d54:	0800914d 	.word	0x0800914d
 8008d58:	08008d85 	.word	0x08008d85
 8008d5c:	0800914d 	.word	0x0800914d
 8008d60:	0800914d 	.word	0x0800914d
 8008d64:	0800914d 	.word	0x0800914d
 8008d68:	08008d8d 	.word	0x08008d8d
 8008d6c:	0800914d 	.word	0x0800914d
 8008d70:	0800914d 	.word	0x0800914d
 8008d74:	0800914d 	.word	0x0800914d
 8008d78:	08008f7d 	.word	0x08008f7d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008d7c:	4bb9      	ldr	r3, [pc, #740]	@ (8009064 <HAL_RCC_GetSysClockFreq+0x358>)
 8008d7e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8008d82:	e1e7      	b.n	8009154 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008d84:	4bb8      	ldr	r3, [pc, #736]	@ (8009068 <HAL_RCC_GetSysClockFreq+0x35c>)
 8008d86:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8008d8a:	e1e3      	b.n	8009154 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008d8c:	4bb4      	ldr	r3, [pc, #720]	@ (8009060 <HAL_RCC_GetSysClockFreq+0x354>)
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008d94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008d98:	4bb1      	ldr	r3, [pc, #708]	@ (8009060 <HAL_RCC_GetSysClockFreq+0x354>)
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d071      	beq.n	8008e88 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008da4:	4bae      	ldr	r3, [pc, #696]	@ (8009060 <HAL_RCC_GetSysClockFreq+0x354>)
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	099b      	lsrs	r3, r3, #6
 8008daa:	2200      	movs	r2, #0
 8008dac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008db0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8008db4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008db8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dbc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008dc6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008dca:	4622      	mov	r2, r4
 8008dcc:	462b      	mov	r3, r5
 8008dce:	f04f 0000 	mov.w	r0, #0
 8008dd2:	f04f 0100 	mov.w	r1, #0
 8008dd6:	0159      	lsls	r1, r3, #5
 8008dd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008ddc:	0150      	lsls	r0, r2, #5
 8008dde:	4602      	mov	r2, r0
 8008de0:	460b      	mov	r3, r1
 8008de2:	4621      	mov	r1, r4
 8008de4:	1a51      	subs	r1, r2, r1
 8008de6:	6439      	str	r1, [r7, #64]	@ 0x40
 8008de8:	4629      	mov	r1, r5
 8008dea:	eb63 0301 	sbc.w	r3, r3, r1
 8008dee:	647b      	str	r3, [r7, #68]	@ 0x44
 8008df0:	f04f 0200 	mov.w	r2, #0
 8008df4:	f04f 0300 	mov.w	r3, #0
 8008df8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8008dfc:	4649      	mov	r1, r9
 8008dfe:	018b      	lsls	r3, r1, #6
 8008e00:	4641      	mov	r1, r8
 8008e02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008e06:	4641      	mov	r1, r8
 8008e08:	018a      	lsls	r2, r1, #6
 8008e0a:	4641      	mov	r1, r8
 8008e0c:	1a51      	subs	r1, r2, r1
 8008e0e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008e10:	4649      	mov	r1, r9
 8008e12:	eb63 0301 	sbc.w	r3, r3, r1
 8008e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e18:	f04f 0200 	mov.w	r2, #0
 8008e1c:	f04f 0300 	mov.w	r3, #0
 8008e20:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8008e24:	4649      	mov	r1, r9
 8008e26:	00cb      	lsls	r3, r1, #3
 8008e28:	4641      	mov	r1, r8
 8008e2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e2e:	4641      	mov	r1, r8
 8008e30:	00ca      	lsls	r2, r1, #3
 8008e32:	4610      	mov	r0, r2
 8008e34:	4619      	mov	r1, r3
 8008e36:	4603      	mov	r3, r0
 8008e38:	4622      	mov	r2, r4
 8008e3a:	189b      	adds	r3, r3, r2
 8008e3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8008e3e:	462b      	mov	r3, r5
 8008e40:	460a      	mov	r2, r1
 8008e42:	eb42 0303 	adc.w	r3, r2, r3
 8008e46:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e48:	f04f 0200 	mov.w	r2, #0
 8008e4c:	f04f 0300 	mov.w	r3, #0
 8008e50:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8008e54:	4629      	mov	r1, r5
 8008e56:	024b      	lsls	r3, r1, #9
 8008e58:	4621      	mov	r1, r4
 8008e5a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008e5e:	4621      	mov	r1, r4
 8008e60:	024a      	lsls	r2, r1, #9
 8008e62:	4610      	mov	r0, r2
 8008e64:	4619      	mov	r1, r3
 8008e66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008e70:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008e74:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8008e78:	f7f7 ff6e 	bl	8000d58 <__aeabi_uldivmod>
 8008e7c:	4602      	mov	r2, r0
 8008e7e:	460b      	mov	r3, r1
 8008e80:	4613      	mov	r3, r2
 8008e82:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008e86:	e067      	b.n	8008f58 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008e88:	4b75      	ldr	r3, [pc, #468]	@ (8009060 <HAL_RCC_GetSysClockFreq+0x354>)
 8008e8a:	685b      	ldr	r3, [r3, #4]
 8008e8c:	099b      	lsrs	r3, r3, #6
 8008e8e:	2200      	movs	r2, #0
 8008e90:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008e94:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8008e98:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008e9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ea0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008ea6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8008eaa:	4622      	mov	r2, r4
 8008eac:	462b      	mov	r3, r5
 8008eae:	f04f 0000 	mov.w	r0, #0
 8008eb2:	f04f 0100 	mov.w	r1, #0
 8008eb6:	0159      	lsls	r1, r3, #5
 8008eb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008ebc:	0150      	lsls	r0, r2, #5
 8008ebe:	4602      	mov	r2, r0
 8008ec0:	460b      	mov	r3, r1
 8008ec2:	4621      	mov	r1, r4
 8008ec4:	1a51      	subs	r1, r2, r1
 8008ec6:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008ec8:	4629      	mov	r1, r5
 8008eca:	eb63 0301 	sbc.w	r3, r3, r1
 8008ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008ed0:	f04f 0200 	mov.w	r2, #0
 8008ed4:	f04f 0300 	mov.w	r3, #0
 8008ed8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8008edc:	4649      	mov	r1, r9
 8008ede:	018b      	lsls	r3, r1, #6
 8008ee0:	4641      	mov	r1, r8
 8008ee2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008ee6:	4641      	mov	r1, r8
 8008ee8:	018a      	lsls	r2, r1, #6
 8008eea:	4641      	mov	r1, r8
 8008eec:	ebb2 0a01 	subs.w	sl, r2, r1
 8008ef0:	4649      	mov	r1, r9
 8008ef2:	eb63 0b01 	sbc.w	fp, r3, r1
 8008ef6:	f04f 0200 	mov.w	r2, #0
 8008efa:	f04f 0300 	mov.w	r3, #0
 8008efe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008f02:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008f06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008f0a:	4692      	mov	sl, r2
 8008f0c:	469b      	mov	fp, r3
 8008f0e:	4623      	mov	r3, r4
 8008f10:	eb1a 0303 	adds.w	r3, sl, r3
 8008f14:	623b      	str	r3, [r7, #32]
 8008f16:	462b      	mov	r3, r5
 8008f18:	eb4b 0303 	adc.w	r3, fp, r3
 8008f1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f1e:	f04f 0200 	mov.w	r2, #0
 8008f22:	f04f 0300 	mov.w	r3, #0
 8008f26:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8008f2a:	4629      	mov	r1, r5
 8008f2c:	028b      	lsls	r3, r1, #10
 8008f2e:	4621      	mov	r1, r4
 8008f30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008f34:	4621      	mov	r1, r4
 8008f36:	028a      	lsls	r2, r1, #10
 8008f38:	4610      	mov	r0, r2
 8008f3a:	4619      	mov	r1, r3
 8008f3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f40:	2200      	movs	r2, #0
 8008f42:	673b      	str	r3, [r7, #112]	@ 0x70
 8008f44:	677a      	str	r2, [r7, #116]	@ 0x74
 8008f46:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8008f4a:	f7f7 ff05 	bl	8000d58 <__aeabi_uldivmod>
 8008f4e:	4602      	mov	r2, r0
 8008f50:	460b      	mov	r3, r1
 8008f52:	4613      	mov	r3, r2
 8008f54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008f58:	4b41      	ldr	r3, [pc, #260]	@ (8009060 <HAL_RCC_GetSysClockFreq+0x354>)
 8008f5a:	685b      	ldr	r3, [r3, #4]
 8008f5c:	0c1b      	lsrs	r3, r3, #16
 8008f5e:	f003 0303 	and.w	r3, r3, #3
 8008f62:	3301      	adds	r3, #1
 8008f64:	005b      	lsls	r3, r3, #1
 8008f66:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8008f6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008f6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f76:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8008f7a:	e0eb      	b.n	8009154 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008f7c:	4b38      	ldr	r3, [pc, #224]	@ (8009060 <HAL_RCC_GetSysClockFreq+0x354>)
 8008f7e:	685b      	ldr	r3, [r3, #4]
 8008f80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008f84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008f88:	4b35      	ldr	r3, [pc, #212]	@ (8009060 <HAL_RCC_GetSysClockFreq+0x354>)
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d06b      	beq.n	800906c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008f94:	4b32      	ldr	r3, [pc, #200]	@ (8009060 <HAL_RCC_GetSysClockFreq+0x354>)
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	099b      	lsrs	r3, r3, #6
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008f9e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008fa0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fa6:	663b      	str	r3, [r7, #96]	@ 0x60
 8008fa8:	2300      	movs	r3, #0
 8008faa:	667b      	str	r3, [r7, #100]	@ 0x64
 8008fac:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8008fb0:	4622      	mov	r2, r4
 8008fb2:	462b      	mov	r3, r5
 8008fb4:	f04f 0000 	mov.w	r0, #0
 8008fb8:	f04f 0100 	mov.w	r1, #0
 8008fbc:	0159      	lsls	r1, r3, #5
 8008fbe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008fc2:	0150      	lsls	r0, r2, #5
 8008fc4:	4602      	mov	r2, r0
 8008fc6:	460b      	mov	r3, r1
 8008fc8:	4621      	mov	r1, r4
 8008fca:	1a51      	subs	r1, r2, r1
 8008fcc:	61b9      	str	r1, [r7, #24]
 8008fce:	4629      	mov	r1, r5
 8008fd0:	eb63 0301 	sbc.w	r3, r3, r1
 8008fd4:	61fb      	str	r3, [r7, #28]
 8008fd6:	f04f 0200 	mov.w	r2, #0
 8008fda:	f04f 0300 	mov.w	r3, #0
 8008fde:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8008fe2:	4659      	mov	r1, fp
 8008fe4:	018b      	lsls	r3, r1, #6
 8008fe6:	4651      	mov	r1, sl
 8008fe8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008fec:	4651      	mov	r1, sl
 8008fee:	018a      	lsls	r2, r1, #6
 8008ff0:	4651      	mov	r1, sl
 8008ff2:	ebb2 0801 	subs.w	r8, r2, r1
 8008ff6:	4659      	mov	r1, fp
 8008ff8:	eb63 0901 	sbc.w	r9, r3, r1
 8008ffc:	f04f 0200 	mov.w	r2, #0
 8009000:	f04f 0300 	mov.w	r3, #0
 8009004:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009008:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800900c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009010:	4690      	mov	r8, r2
 8009012:	4699      	mov	r9, r3
 8009014:	4623      	mov	r3, r4
 8009016:	eb18 0303 	adds.w	r3, r8, r3
 800901a:	613b      	str	r3, [r7, #16]
 800901c:	462b      	mov	r3, r5
 800901e:	eb49 0303 	adc.w	r3, r9, r3
 8009022:	617b      	str	r3, [r7, #20]
 8009024:	f04f 0200 	mov.w	r2, #0
 8009028:	f04f 0300 	mov.w	r3, #0
 800902c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8009030:	4629      	mov	r1, r5
 8009032:	024b      	lsls	r3, r1, #9
 8009034:	4621      	mov	r1, r4
 8009036:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800903a:	4621      	mov	r1, r4
 800903c:	024a      	lsls	r2, r1, #9
 800903e:	4610      	mov	r0, r2
 8009040:	4619      	mov	r1, r3
 8009042:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009046:	2200      	movs	r2, #0
 8009048:	65bb      	str	r3, [r7, #88]	@ 0x58
 800904a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800904c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009050:	f7f7 fe82 	bl	8000d58 <__aeabi_uldivmod>
 8009054:	4602      	mov	r2, r0
 8009056:	460b      	mov	r3, r1
 8009058:	4613      	mov	r3, r2
 800905a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800905e:	e065      	b.n	800912c <HAL_RCC_GetSysClockFreq+0x420>
 8009060:	40023800 	.word	0x40023800
 8009064:	00f42400 	.word	0x00f42400
 8009068:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800906c:	4b3d      	ldr	r3, [pc, #244]	@ (8009164 <HAL_RCC_GetSysClockFreq+0x458>)
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	099b      	lsrs	r3, r3, #6
 8009072:	2200      	movs	r2, #0
 8009074:	4618      	mov	r0, r3
 8009076:	4611      	mov	r1, r2
 8009078:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800907c:	653b      	str	r3, [r7, #80]	@ 0x50
 800907e:	2300      	movs	r3, #0
 8009080:	657b      	str	r3, [r7, #84]	@ 0x54
 8009082:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8009086:	4642      	mov	r2, r8
 8009088:	464b      	mov	r3, r9
 800908a:	f04f 0000 	mov.w	r0, #0
 800908e:	f04f 0100 	mov.w	r1, #0
 8009092:	0159      	lsls	r1, r3, #5
 8009094:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009098:	0150      	lsls	r0, r2, #5
 800909a:	4602      	mov	r2, r0
 800909c:	460b      	mov	r3, r1
 800909e:	4641      	mov	r1, r8
 80090a0:	1a51      	subs	r1, r2, r1
 80090a2:	60b9      	str	r1, [r7, #8]
 80090a4:	4649      	mov	r1, r9
 80090a6:	eb63 0301 	sbc.w	r3, r3, r1
 80090aa:	60fb      	str	r3, [r7, #12]
 80090ac:	f04f 0200 	mov.w	r2, #0
 80090b0:	f04f 0300 	mov.w	r3, #0
 80090b4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80090b8:	4659      	mov	r1, fp
 80090ba:	018b      	lsls	r3, r1, #6
 80090bc:	4651      	mov	r1, sl
 80090be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80090c2:	4651      	mov	r1, sl
 80090c4:	018a      	lsls	r2, r1, #6
 80090c6:	4651      	mov	r1, sl
 80090c8:	1a54      	subs	r4, r2, r1
 80090ca:	4659      	mov	r1, fp
 80090cc:	eb63 0501 	sbc.w	r5, r3, r1
 80090d0:	f04f 0200 	mov.w	r2, #0
 80090d4:	f04f 0300 	mov.w	r3, #0
 80090d8:	00eb      	lsls	r3, r5, #3
 80090da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80090de:	00e2      	lsls	r2, r4, #3
 80090e0:	4614      	mov	r4, r2
 80090e2:	461d      	mov	r5, r3
 80090e4:	4643      	mov	r3, r8
 80090e6:	18e3      	adds	r3, r4, r3
 80090e8:	603b      	str	r3, [r7, #0]
 80090ea:	464b      	mov	r3, r9
 80090ec:	eb45 0303 	adc.w	r3, r5, r3
 80090f0:	607b      	str	r3, [r7, #4]
 80090f2:	f04f 0200 	mov.w	r2, #0
 80090f6:	f04f 0300 	mov.w	r3, #0
 80090fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80090fe:	4629      	mov	r1, r5
 8009100:	028b      	lsls	r3, r1, #10
 8009102:	4621      	mov	r1, r4
 8009104:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009108:	4621      	mov	r1, r4
 800910a:	028a      	lsls	r2, r1, #10
 800910c:	4610      	mov	r0, r2
 800910e:	4619      	mov	r1, r3
 8009110:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009114:	2200      	movs	r2, #0
 8009116:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009118:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800911a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800911e:	f7f7 fe1b 	bl	8000d58 <__aeabi_uldivmod>
 8009122:	4602      	mov	r2, r0
 8009124:	460b      	mov	r3, r1
 8009126:	4613      	mov	r3, r2
 8009128:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800912c:	4b0d      	ldr	r3, [pc, #52]	@ (8009164 <HAL_RCC_GetSysClockFreq+0x458>)
 800912e:	685b      	ldr	r3, [r3, #4]
 8009130:	0f1b      	lsrs	r3, r3, #28
 8009132:	f003 0307 	and.w	r3, r3, #7
 8009136:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 800913a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800913e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009142:	fbb2 f3f3 	udiv	r3, r2, r3
 8009146:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800914a:	e003      	b.n	8009154 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800914c:	4b06      	ldr	r3, [pc, #24]	@ (8009168 <HAL_RCC_GetSysClockFreq+0x45c>)
 800914e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8009152:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009154:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8009158:	4618      	mov	r0, r3
 800915a:	37b8      	adds	r7, #184	@ 0xb8
 800915c:	46bd      	mov	sp, r7
 800915e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009162:	bf00      	nop
 8009164:	40023800 	.word	0x40023800
 8009168:	00f42400 	.word	0x00f42400

0800916c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b086      	sub	sp, #24
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d101      	bne.n	800917e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800917a:	2301      	movs	r3, #1
 800917c:	e28d      	b.n	800969a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f003 0301 	and.w	r3, r3, #1
 8009186:	2b00      	cmp	r3, #0
 8009188:	f000 8083 	beq.w	8009292 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800918c:	4b94      	ldr	r3, [pc, #592]	@ (80093e0 <HAL_RCC_OscConfig+0x274>)
 800918e:	689b      	ldr	r3, [r3, #8]
 8009190:	f003 030c 	and.w	r3, r3, #12
 8009194:	2b04      	cmp	r3, #4
 8009196:	d019      	beq.n	80091cc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009198:	4b91      	ldr	r3, [pc, #580]	@ (80093e0 <HAL_RCC_OscConfig+0x274>)
 800919a:	689b      	ldr	r3, [r3, #8]
 800919c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80091a0:	2b08      	cmp	r3, #8
 80091a2:	d106      	bne.n	80091b2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80091a4:	4b8e      	ldr	r3, [pc, #568]	@ (80093e0 <HAL_RCC_OscConfig+0x274>)
 80091a6:	685b      	ldr	r3, [r3, #4]
 80091a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80091ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80091b0:	d00c      	beq.n	80091cc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80091b2:	4b8b      	ldr	r3, [pc, #556]	@ (80093e0 <HAL_RCC_OscConfig+0x274>)
 80091b4:	689b      	ldr	r3, [r3, #8]
 80091b6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80091ba:	2b0c      	cmp	r3, #12
 80091bc:	d112      	bne.n	80091e4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80091be:	4b88      	ldr	r3, [pc, #544]	@ (80093e0 <HAL_RCC_OscConfig+0x274>)
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80091c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80091ca:	d10b      	bne.n	80091e4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80091cc:	4b84      	ldr	r3, [pc, #528]	@ (80093e0 <HAL_RCC_OscConfig+0x274>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d05b      	beq.n	8009290 <HAL_RCC_OscConfig+0x124>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d157      	bne.n	8009290 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80091e0:	2301      	movs	r3, #1
 80091e2:	e25a      	b.n	800969a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	685b      	ldr	r3, [r3, #4]
 80091e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80091ec:	d106      	bne.n	80091fc <HAL_RCC_OscConfig+0x90>
 80091ee:	4b7c      	ldr	r3, [pc, #496]	@ (80093e0 <HAL_RCC_OscConfig+0x274>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4a7b      	ldr	r2, [pc, #492]	@ (80093e0 <HAL_RCC_OscConfig+0x274>)
 80091f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80091f8:	6013      	str	r3, [r2, #0]
 80091fa:	e01d      	b.n	8009238 <HAL_RCC_OscConfig+0xcc>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	685b      	ldr	r3, [r3, #4]
 8009200:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009204:	d10c      	bne.n	8009220 <HAL_RCC_OscConfig+0xb4>
 8009206:	4b76      	ldr	r3, [pc, #472]	@ (80093e0 <HAL_RCC_OscConfig+0x274>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4a75      	ldr	r2, [pc, #468]	@ (80093e0 <HAL_RCC_OscConfig+0x274>)
 800920c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009210:	6013      	str	r3, [r2, #0]
 8009212:	4b73      	ldr	r3, [pc, #460]	@ (80093e0 <HAL_RCC_OscConfig+0x274>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	4a72      	ldr	r2, [pc, #456]	@ (80093e0 <HAL_RCC_OscConfig+0x274>)
 8009218:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800921c:	6013      	str	r3, [r2, #0]
 800921e:	e00b      	b.n	8009238 <HAL_RCC_OscConfig+0xcc>
 8009220:	4b6f      	ldr	r3, [pc, #444]	@ (80093e0 <HAL_RCC_OscConfig+0x274>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	4a6e      	ldr	r2, [pc, #440]	@ (80093e0 <HAL_RCC_OscConfig+0x274>)
 8009226:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800922a:	6013      	str	r3, [r2, #0]
 800922c:	4b6c      	ldr	r3, [pc, #432]	@ (80093e0 <HAL_RCC_OscConfig+0x274>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4a6b      	ldr	r2, [pc, #428]	@ (80093e0 <HAL_RCC_OscConfig+0x274>)
 8009232:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009236:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	685b      	ldr	r3, [r3, #4]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d013      	beq.n	8009268 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009240:	f7fc ffd6 	bl	80061f0 <HAL_GetTick>
 8009244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009246:	e008      	b.n	800925a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009248:	f7fc ffd2 	bl	80061f0 <HAL_GetTick>
 800924c:	4602      	mov	r2, r0
 800924e:	693b      	ldr	r3, [r7, #16]
 8009250:	1ad3      	subs	r3, r2, r3
 8009252:	2b64      	cmp	r3, #100	@ 0x64
 8009254:	d901      	bls.n	800925a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8009256:	2303      	movs	r3, #3
 8009258:	e21f      	b.n	800969a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800925a:	4b61      	ldr	r3, [pc, #388]	@ (80093e0 <HAL_RCC_OscConfig+0x274>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009262:	2b00      	cmp	r3, #0
 8009264:	d0f0      	beq.n	8009248 <HAL_RCC_OscConfig+0xdc>
 8009266:	e014      	b.n	8009292 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009268:	f7fc ffc2 	bl	80061f0 <HAL_GetTick>
 800926c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800926e:	e008      	b.n	8009282 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009270:	f7fc ffbe 	bl	80061f0 <HAL_GetTick>
 8009274:	4602      	mov	r2, r0
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	1ad3      	subs	r3, r2, r3
 800927a:	2b64      	cmp	r3, #100	@ 0x64
 800927c:	d901      	bls.n	8009282 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800927e:	2303      	movs	r3, #3
 8009280:	e20b      	b.n	800969a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009282:	4b57      	ldr	r3, [pc, #348]	@ (80093e0 <HAL_RCC_OscConfig+0x274>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800928a:	2b00      	cmp	r3, #0
 800928c:	d1f0      	bne.n	8009270 <HAL_RCC_OscConfig+0x104>
 800928e:	e000      	b.n	8009292 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009290:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f003 0302 	and.w	r3, r3, #2
 800929a:	2b00      	cmp	r3, #0
 800929c:	d06f      	beq.n	800937e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800929e:	4b50      	ldr	r3, [pc, #320]	@ (80093e0 <HAL_RCC_OscConfig+0x274>)
 80092a0:	689b      	ldr	r3, [r3, #8]
 80092a2:	f003 030c 	and.w	r3, r3, #12
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d017      	beq.n	80092da <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80092aa:	4b4d      	ldr	r3, [pc, #308]	@ (80093e0 <HAL_RCC_OscConfig+0x274>)
 80092ac:	689b      	ldr	r3, [r3, #8]
 80092ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80092b2:	2b08      	cmp	r3, #8
 80092b4:	d105      	bne.n	80092c2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80092b6:	4b4a      	ldr	r3, [pc, #296]	@ (80093e0 <HAL_RCC_OscConfig+0x274>)
 80092b8:	685b      	ldr	r3, [r3, #4]
 80092ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d00b      	beq.n	80092da <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80092c2:	4b47      	ldr	r3, [pc, #284]	@ (80093e0 <HAL_RCC_OscConfig+0x274>)
 80092c4:	689b      	ldr	r3, [r3, #8]
 80092c6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80092ca:	2b0c      	cmp	r3, #12
 80092cc:	d11c      	bne.n	8009308 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80092ce:	4b44      	ldr	r3, [pc, #272]	@ (80093e0 <HAL_RCC_OscConfig+0x274>)
 80092d0:	685b      	ldr	r3, [r3, #4]
 80092d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d116      	bne.n	8009308 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80092da:	4b41      	ldr	r3, [pc, #260]	@ (80093e0 <HAL_RCC_OscConfig+0x274>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f003 0302 	and.w	r3, r3, #2
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d005      	beq.n	80092f2 <HAL_RCC_OscConfig+0x186>
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	68db      	ldr	r3, [r3, #12]
 80092ea:	2b01      	cmp	r3, #1
 80092ec:	d001      	beq.n	80092f2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80092ee:	2301      	movs	r3, #1
 80092f0:	e1d3      	b.n	800969a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80092f2:	4b3b      	ldr	r3, [pc, #236]	@ (80093e0 <HAL_RCC_OscConfig+0x274>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	691b      	ldr	r3, [r3, #16]
 80092fe:	00db      	lsls	r3, r3, #3
 8009300:	4937      	ldr	r1, [pc, #220]	@ (80093e0 <HAL_RCC_OscConfig+0x274>)
 8009302:	4313      	orrs	r3, r2
 8009304:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009306:	e03a      	b.n	800937e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	68db      	ldr	r3, [r3, #12]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d020      	beq.n	8009352 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009310:	4b34      	ldr	r3, [pc, #208]	@ (80093e4 <HAL_RCC_OscConfig+0x278>)
 8009312:	2201      	movs	r2, #1
 8009314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009316:	f7fc ff6b 	bl	80061f0 <HAL_GetTick>
 800931a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800931c:	e008      	b.n	8009330 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800931e:	f7fc ff67 	bl	80061f0 <HAL_GetTick>
 8009322:	4602      	mov	r2, r0
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	1ad3      	subs	r3, r2, r3
 8009328:	2b02      	cmp	r3, #2
 800932a:	d901      	bls.n	8009330 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800932c:	2303      	movs	r3, #3
 800932e:	e1b4      	b.n	800969a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009330:	4b2b      	ldr	r3, [pc, #172]	@ (80093e0 <HAL_RCC_OscConfig+0x274>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f003 0302 	and.w	r3, r3, #2
 8009338:	2b00      	cmp	r3, #0
 800933a:	d0f0      	beq.n	800931e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800933c:	4b28      	ldr	r3, [pc, #160]	@ (80093e0 <HAL_RCC_OscConfig+0x274>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	691b      	ldr	r3, [r3, #16]
 8009348:	00db      	lsls	r3, r3, #3
 800934a:	4925      	ldr	r1, [pc, #148]	@ (80093e0 <HAL_RCC_OscConfig+0x274>)
 800934c:	4313      	orrs	r3, r2
 800934e:	600b      	str	r3, [r1, #0]
 8009350:	e015      	b.n	800937e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009352:	4b24      	ldr	r3, [pc, #144]	@ (80093e4 <HAL_RCC_OscConfig+0x278>)
 8009354:	2200      	movs	r2, #0
 8009356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009358:	f7fc ff4a 	bl	80061f0 <HAL_GetTick>
 800935c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800935e:	e008      	b.n	8009372 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009360:	f7fc ff46 	bl	80061f0 <HAL_GetTick>
 8009364:	4602      	mov	r2, r0
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	1ad3      	subs	r3, r2, r3
 800936a:	2b02      	cmp	r3, #2
 800936c:	d901      	bls.n	8009372 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800936e:	2303      	movs	r3, #3
 8009370:	e193      	b.n	800969a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009372:	4b1b      	ldr	r3, [pc, #108]	@ (80093e0 <HAL_RCC_OscConfig+0x274>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f003 0302 	and.w	r3, r3, #2
 800937a:	2b00      	cmp	r3, #0
 800937c:	d1f0      	bne.n	8009360 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f003 0308 	and.w	r3, r3, #8
 8009386:	2b00      	cmp	r3, #0
 8009388:	d036      	beq.n	80093f8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	695b      	ldr	r3, [r3, #20]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d016      	beq.n	80093c0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009392:	4b15      	ldr	r3, [pc, #84]	@ (80093e8 <HAL_RCC_OscConfig+0x27c>)
 8009394:	2201      	movs	r2, #1
 8009396:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009398:	f7fc ff2a 	bl	80061f0 <HAL_GetTick>
 800939c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800939e:	e008      	b.n	80093b2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80093a0:	f7fc ff26 	bl	80061f0 <HAL_GetTick>
 80093a4:	4602      	mov	r2, r0
 80093a6:	693b      	ldr	r3, [r7, #16]
 80093a8:	1ad3      	subs	r3, r2, r3
 80093aa:	2b02      	cmp	r3, #2
 80093ac:	d901      	bls.n	80093b2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80093ae:	2303      	movs	r3, #3
 80093b0:	e173      	b.n	800969a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80093b2:	4b0b      	ldr	r3, [pc, #44]	@ (80093e0 <HAL_RCC_OscConfig+0x274>)
 80093b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80093b6:	f003 0302 	and.w	r3, r3, #2
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d0f0      	beq.n	80093a0 <HAL_RCC_OscConfig+0x234>
 80093be:	e01b      	b.n	80093f8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80093c0:	4b09      	ldr	r3, [pc, #36]	@ (80093e8 <HAL_RCC_OscConfig+0x27c>)
 80093c2:	2200      	movs	r2, #0
 80093c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093c6:	f7fc ff13 	bl	80061f0 <HAL_GetTick>
 80093ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80093cc:	e00e      	b.n	80093ec <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80093ce:	f7fc ff0f 	bl	80061f0 <HAL_GetTick>
 80093d2:	4602      	mov	r2, r0
 80093d4:	693b      	ldr	r3, [r7, #16]
 80093d6:	1ad3      	subs	r3, r2, r3
 80093d8:	2b02      	cmp	r3, #2
 80093da:	d907      	bls.n	80093ec <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80093dc:	2303      	movs	r3, #3
 80093de:	e15c      	b.n	800969a <HAL_RCC_OscConfig+0x52e>
 80093e0:	40023800 	.word	0x40023800
 80093e4:	42470000 	.word	0x42470000
 80093e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80093ec:	4b8a      	ldr	r3, [pc, #552]	@ (8009618 <HAL_RCC_OscConfig+0x4ac>)
 80093ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80093f0:	f003 0302 	and.w	r3, r3, #2
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d1ea      	bne.n	80093ce <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f003 0304 	and.w	r3, r3, #4
 8009400:	2b00      	cmp	r3, #0
 8009402:	f000 8097 	beq.w	8009534 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009406:	2300      	movs	r3, #0
 8009408:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800940a:	4b83      	ldr	r3, [pc, #524]	@ (8009618 <HAL_RCC_OscConfig+0x4ac>)
 800940c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800940e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009412:	2b00      	cmp	r3, #0
 8009414:	d10f      	bne.n	8009436 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009416:	2300      	movs	r3, #0
 8009418:	60bb      	str	r3, [r7, #8]
 800941a:	4b7f      	ldr	r3, [pc, #508]	@ (8009618 <HAL_RCC_OscConfig+0x4ac>)
 800941c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800941e:	4a7e      	ldr	r2, [pc, #504]	@ (8009618 <HAL_RCC_OscConfig+0x4ac>)
 8009420:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009424:	6413      	str	r3, [r2, #64]	@ 0x40
 8009426:	4b7c      	ldr	r3, [pc, #496]	@ (8009618 <HAL_RCC_OscConfig+0x4ac>)
 8009428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800942a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800942e:	60bb      	str	r3, [r7, #8]
 8009430:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009432:	2301      	movs	r3, #1
 8009434:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009436:	4b79      	ldr	r3, [pc, #484]	@ (800961c <HAL_RCC_OscConfig+0x4b0>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800943e:	2b00      	cmp	r3, #0
 8009440:	d118      	bne.n	8009474 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009442:	4b76      	ldr	r3, [pc, #472]	@ (800961c <HAL_RCC_OscConfig+0x4b0>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	4a75      	ldr	r2, [pc, #468]	@ (800961c <HAL_RCC_OscConfig+0x4b0>)
 8009448:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800944c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800944e:	f7fc fecf 	bl	80061f0 <HAL_GetTick>
 8009452:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009454:	e008      	b.n	8009468 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009456:	f7fc fecb 	bl	80061f0 <HAL_GetTick>
 800945a:	4602      	mov	r2, r0
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	1ad3      	subs	r3, r2, r3
 8009460:	2b02      	cmp	r3, #2
 8009462:	d901      	bls.n	8009468 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8009464:	2303      	movs	r3, #3
 8009466:	e118      	b.n	800969a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009468:	4b6c      	ldr	r3, [pc, #432]	@ (800961c <HAL_RCC_OscConfig+0x4b0>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009470:	2b00      	cmp	r3, #0
 8009472:	d0f0      	beq.n	8009456 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	689b      	ldr	r3, [r3, #8]
 8009478:	2b01      	cmp	r3, #1
 800947a:	d106      	bne.n	800948a <HAL_RCC_OscConfig+0x31e>
 800947c:	4b66      	ldr	r3, [pc, #408]	@ (8009618 <HAL_RCC_OscConfig+0x4ac>)
 800947e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009480:	4a65      	ldr	r2, [pc, #404]	@ (8009618 <HAL_RCC_OscConfig+0x4ac>)
 8009482:	f043 0301 	orr.w	r3, r3, #1
 8009486:	6713      	str	r3, [r2, #112]	@ 0x70
 8009488:	e01c      	b.n	80094c4 <HAL_RCC_OscConfig+0x358>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	689b      	ldr	r3, [r3, #8]
 800948e:	2b05      	cmp	r3, #5
 8009490:	d10c      	bne.n	80094ac <HAL_RCC_OscConfig+0x340>
 8009492:	4b61      	ldr	r3, [pc, #388]	@ (8009618 <HAL_RCC_OscConfig+0x4ac>)
 8009494:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009496:	4a60      	ldr	r2, [pc, #384]	@ (8009618 <HAL_RCC_OscConfig+0x4ac>)
 8009498:	f043 0304 	orr.w	r3, r3, #4
 800949c:	6713      	str	r3, [r2, #112]	@ 0x70
 800949e:	4b5e      	ldr	r3, [pc, #376]	@ (8009618 <HAL_RCC_OscConfig+0x4ac>)
 80094a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094a2:	4a5d      	ldr	r2, [pc, #372]	@ (8009618 <HAL_RCC_OscConfig+0x4ac>)
 80094a4:	f043 0301 	orr.w	r3, r3, #1
 80094a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80094aa:	e00b      	b.n	80094c4 <HAL_RCC_OscConfig+0x358>
 80094ac:	4b5a      	ldr	r3, [pc, #360]	@ (8009618 <HAL_RCC_OscConfig+0x4ac>)
 80094ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094b0:	4a59      	ldr	r2, [pc, #356]	@ (8009618 <HAL_RCC_OscConfig+0x4ac>)
 80094b2:	f023 0301 	bic.w	r3, r3, #1
 80094b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80094b8:	4b57      	ldr	r3, [pc, #348]	@ (8009618 <HAL_RCC_OscConfig+0x4ac>)
 80094ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094bc:	4a56      	ldr	r2, [pc, #344]	@ (8009618 <HAL_RCC_OscConfig+0x4ac>)
 80094be:	f023 0304 	bic.w	r3, r3, #4
 80094c2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	689b      	ldr	r3, [r3, #8]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d015      	beq.n	80094f8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094cc:	f7fc fe90 	bl	80061f0 <HAL_GetTick>
 80094d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80094d2:	e00a      	b.n	80094ea <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80094d4:	f7fc fe8c 	bl	80061f0 <HAL_GetTick>
 80094d8:	4602      	mov	r2, r0
 80094da:	693b      	ldr	r3, [r7, #16]
 80094dc:	1ad3      	subs	r3, r2, r3
 80094de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d901      	bls.n	80094ea <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80094e6:	2303      	movs	r3, #3
 80094e8:	e0d7      	b.n	800969a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80094ea:	4b4b      	ldr	r3, [pc, #300]	@ (8009618 <HAL_RCC_OscConfig+0x4ac>)
 80094ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094ee:	f003 0302 	and.w	r3, r3, #2
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d0ee      	beq.n	80094d4 <HAL_RCC_OscConfig+0x368>
 80094f6:	e014      	b.n	8009522 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094f8:	f7fc fe7a 	bl	80061f0 <HAL_GetTick>
 80094fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80094fe:	e00a      	b.n	8009516 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009500:	f7fc fe76 	bl	80061f0 <HAL_GetTick>
 8009504:	4602      	mov	r2, r0
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	1ad3      	subs	r3, r2, r3
 800950a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800950e:	4293      	cmp	r3, r2
 8009510:	d901      	bls.n	8009516 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8009512:	2303      	movs	r3, #3
 8009514:	e0c1      	b.n	800969a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009516:	4b40      	ldr	r3, [pc, #256]	@ (8009618 <HAL_RCC_OscConfig+0x4ac>)
 8009518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800951a:	f003 0302 	and.w	r3, r3, #2
 800951e:	2b00      	cmp	r3, #0
 8009520:	d1ee      	bne.n	8009500 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009522:	7dfb      	ldrb	r3, [r7, #23]
 8009524:	2b01      	cmp	r3, #1
 8009526:	d105      	bne.n	8009534 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009528:	4b3b      	ldr	r3, [pc, #236]	@ (8009618 <HAL_RCC_OscConfig+0x4ac>)
 800952a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800952c:	4a3a      	ldr	r2, [pc, #232]	@ (8009618 <HAL_RCC_OscConfig+0x4ac>)
 800952e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009532:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	699b      	ldr	r3, [r3, #24]
 8009538:	2b00      	cmp	r3, #0
 800953a:	f000 80ad 	beq.w	8009698 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800953e:	4b36      	ldr	r3, [pc, #216]	@ (8009618 <HAL_RCC_OscConfig+0x4ac>)
 8009540:	689b      	ldr	r3, [r3, #8]
 8009542:	f003 030c 	and.w	r3, r3, #12
 8009546:	2b08      	cmp	r3, #8
 8009548:	d060      	beq.n	800960c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	699b      	ldr	r3, [r3, #24]
 800954e:	2b02      	cmp	r3, #2
 8009550:	d145      	bne.n	80095de <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009552:	4b33      	ldr	r3, [pc, #204]	@ (8009620 <HAL_RCC_OscConfig+0x4b4>)
 8009554:	2200      	movs	r2, #0
 8009556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009558:	f7fc fe4a 	bl	80061f0 <HAL_GetTick>
 800955c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800955e:	e008      	b.n	8009572 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009560:	f7fc fe46 	bl	80061f0 <HAL_GetTick>
 8009564:	4602      	mov	r2, r0
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	1ad3      	subs	r3, r2, r3
 800956a:	2b02      	cmp	r3, #2
 800956c:	d901      	bls.n	8009572 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800956e:	2303      	movs	r3, #3
 8009570:	e093      	b.n	800969a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009572:	4b29      	ldr	r3, [pc, #164]	@ (8009618 <HAL_RCC_OscConfig+0x4ac>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800957a:	2b00      	cmp	r3, #0
 800957c:	d1f0      	bne.n	8009560 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	69da      	ldr	r2, [r3, #28]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6a1b      	ldr	r3, [r3, #32]
 8009586:	431a      	orrs	r2, r3
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800958c:	019b      	lsls	r3, r3, #6
 800958e:	431a      	orrs	r2, r3
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009594:	085b      	lsrs	r3, r3, #1
 8009596:	3b01      	subs	r3, #1
 8009598:	041b      	lsls	r3, r3, #16
 800959a:	431a      	orrs	r2, r3
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095a0:	061b      	lsls	r3, r3, #24
 80095a2:	431a      	orrs	r2, r3
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095a8:	071b      	lsls	r3, r3, #28
 80095aa:	491b      	ldr	r1, [pc, #108]	@ (8009618 <HAL_RCC_OscConfig+0x4ac>)
 80095ac:	4313      	orrs	r3, r2
 80095ae:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80095b0:	4b1b      	ldr	r3, [pc, #108]	@ (8009620 <HAL_RCC_OscConfig+0x4b4>)
 80095b2:	2201      	movs	r2, #1
 80095b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095b6:	f7fc fe1b 	bl	80061f0 <HAL_GetTick>
 80095ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80095bc:	e008      	b.n	80095d0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80095be:	f7fc fe17 	bl	80061f0 <HAL_GetTick>
 80095c2:	4602      	mov	r2, r0
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	1ad3      	subs	r3, r2, r3
 80095c8:	2b02      	cmp	r3, #2
 80095ca:	d901      	bls.n	80095d0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80095cc:	2303      	movs	r3, #3
 80095ce:	e064      	b.n	800969a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80095d0:	4b11      	ldr	r3, [pc, #68]	@ (8009618 <HAL_RCC_OscConfig+0x4ac>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d0f0      	beq.n	80095be <HAL_RCC_OscConfig+0x452>
 80095dc:	e05c      	b.n	8009698 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80095de:	4b10      	ldr	r3, [pc, #64]	@ (8009620 <HAL_RCC_OscConfig+0x4b4>)
 80095e0:	2200      	movs	r2, #0
 80095e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095e4:	f7fc fe04 	bl	80061f0 <HAL_GetTick>
 80095e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80095ea:	e008      	b.n	80095fe <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80095ec:	f7fc fe00 	bl	80061f0 <HAL_GetTick>
 80095f0:	4602      	mov	r2, r0
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	1ad3      	subs	r3, r2, r3
 80095f6:	2b02      	cmp	r3, #2
 80095f8:	d901      	bls.n	80095fe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80095fa:	2303      	movs	r3, #3
 80095fc:	e04d      	b.n	800969a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80095fe:	4b06      	ldr	r3, [pc, #24]	@ (8009618 <HAL_RCC_OscConfig+0x4ac>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009606:	2b00      	cmp	r3, #0
 8009608:	d1f0      	bne.n	80095ec <HAL_RCC_OscConfig+0x480>
 800960a:	e045      	b.n	8009698 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	699b      	ldr	r3, [r3, #24]
 8009610:	2b01      	cmp	r3, #1
 8009612:	d107      	bne.n	8009624 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8009614:	2301      	movs	r3, #1
 8009616:	e040      	b.n	800969a <HAL_RCC_OscConfig+0x52e>
 8009618:	40023800 	.word	0x40023800
 800961c:	40007000 	.word	0x40007000
 8009620:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009624:	4b1f      	ldr	r3, [pc, #124]	@ (80096a4 <HAL_RCC_OscConfig+0x538>)
 8009626:	685b      	ldr	r3, [r3, #4]
 8009628:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	699b      	ldr	r3, [r3, #24]
 800962e:	2b01      	cmp	r3, #1
 8009630:	d030      	beq.n	8009694 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800963c:	429a      	cmp	r2, r3
 800963e:	d129      	bne.n	8009694 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800964a:	429a      	cmp	r2, r3
 800964c:	d122      	bne.n	8009694 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800964e:	68fa      	ldr	r2, [r7, #12]
 8009650:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8009654:	4013      	ands	r3, r2
 8009656:	687a      	ldr	r2, [r7, #4]
 8009658:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800965a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800965c:	4293      	cmp	r3, r2
 800965e:	d119      	bne.n	8009694 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800966a:	085b      	lsrs	r3, r3, #1
 800966c:	3b01      	subs	r3, #1
 800966e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009670:	429a      	cmp	r2, r3
 8009672:	d10f      	bne.n	8009694 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800967e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009680:	429a      	cmp	r2, r3
 8009682:	d107      	bne.n	8009694 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800968e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009690:	429a      	cmp	r2, r3
 8009692:	d001      	beq.n	8009698 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8009694:	2301      	movs	r3, #1
 8009696:	e000      	b.n	800969a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8009698:	2300      	movs	r3, #0
}
 800969a:	4618      	mov	r0, r3
 800969c:	3718      	adds	r7, #24
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
 80096a2:	bf00      	nop
 80096a4:	40023800 	.word	0x40023800

080096a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b082      	sub	sp, #8
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d101      	bne.n	80096ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80096b6:	2301      	movs	r3, #1
 80096b8:	e07b      	b.n	80097b2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d108      	bne.n	80096d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	685b      	ldr	r3, [r3, #4]
 80096c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80096ca:	d009      	beq.n	80096e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2200      	movs	r2, #0
 80096d0:	61da      	str	r2, [r3, #28]
 80096d2:	e005      	b.n	80096e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2200      	movs	r2, #0
 80096d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2200      	movs	r2, #0
 80096de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2200      	movs	r2, #0
 80096e4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80096ec:	b2db      	uxtb	r3, r3
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d106      	bne.n	8009700 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2200      	movs	r2, #0
 80096f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f7fc f982 	bl	8005a04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2202      	movs	r2, #2
 8009704:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	681a      	ldr	r2, [r3, #0]
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009716:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	685b      	ldr	r3, [r3, #4]
 800971c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	689b      	ldr	r3, [r3, #8]
 8009724:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009728:	431a      	orrs	r2, r3
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	68db      	ldr	r3, [r3, #12]
 800972e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009732:	431a      	orrs	r2, r3
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	691b      	ldr	r3, [r3, #16]
 8009738:	f003 0302 	and.w	r3, r3, #2
 800973c:	431a      	orrs	r2, r3
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	695b      	ldr	r3, [r3, #20]
 8009742:	f003 0301 	and.w	r3, r3, #1
 8009746:	431a      	orrs	r2, r3
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	699b      	ldr	r3, [r3, #24]
 800974c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009750:	431a      	orrs	r2, r3
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	69db      	ldr	r3, [r3, #28]
 8009756:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800975a:	431a      	orrs	r2, r3
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6a1b      	ldr	r3, [r3, #32]
 8009760:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009764:	ea42 0103 	orr.w	r1, r2, r3
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800976c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	430a      	orrs	r2, r1
 8009776:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	699b      	ldr	r3, [r3, #24]
 800977c:	0c1b      	lsrs	r3, r3, #16
 800977e:	f003 0104 	and.w	r1, r3, #4
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009786:	f003 0210 	and.w	r2, r3, #16
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	430a      	orrs	r2, r1
 8009790:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	69da      	ldr	r2, [r3, #28]
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80097a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2200      	movs	r2, #0
 80097a6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2201      	movs	r2, #1
 80097ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80097b0:	2300      	movs	r3, #0
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	3708      	adds	r7, #8
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}

080097ba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80097ba:	b580      	push	{r7, lr}
 80097bc:	b082      	sub	sp, #8
 80097be:	af00      	add	r7, sp, #0
 80097c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d101      	bne.n	80097cc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80097c8:	2301      	movs	r3, #1
 80097ca:	e041      	b.n	8009850 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80097d2:	b2db      	uxtb	r3, r3
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d106      	bne.n	80097e6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2200      	movs	r2, #0
 80097dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f7fc f957 	bl	8005a94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2202      	movs	r2, #2
 80097ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681a      	ldr	r2, [r3, #0]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	3304      	adds	r3, #4
 80097f6:	4619      	mov	r1, r3
 80097f8:	4610      	mov	r0, r2
 80097fa:	f000 fb2b 	bl	8009e54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2201      	movs	r2, #1
 8009802:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2201      	movs	r2, #1
 800980a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2201      	movs	r2, #1
 8009812:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2201      	movs	r2, #1
 800981a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2201      	movs	r2, #1
 8009822:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2201      	movs	r2, #1
 800982a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2201      	movs	r2, #1
 8009832:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2201      	movs	r2, #1
 800983a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2201      	movs	r2, #1
 8009842:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2201      	movs	r2, #1
 800984a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800984e:	2300      	movs	r3, #0
}
 8009850:	4618      	mov	r0, r3
 8009852:	3708      	adds	r7, #8
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}

08009858 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009858:	b480      	push	{r7}
 800985a:	b085      	sub	sp, #20
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009866:	b2db      	uxtb	r3, r3
 8009868:	2b01      	cmp	r3, #1
 800986a:	d001      	beq.n	8009870 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800986c:	2301      	movs	r3, #1
 800986e:	e046      	b.n	80098fe <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2202      	movs	r2, #2
 8009874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	4a23      	ldr	r2, [pc, #140]	@ (800990c <HAL_TIM_Base_Start+0xb4>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d022      	beq.n	80098c8 <HAL_TIM_Base_Start+0x70>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800988a:	d01d      	beq.n	80098c8 <HAL_TIM_Base_Start+0x70>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	4a1f      	ldr	r2, [pc, #124]	@ (8009910 <HAL_TIM_Base_Start+0xb8>)
 8009892:	4293      	cmp	r3, r2
 8009894:	d018      	beq.n	80098c8 <HAL_TIM_Base_Start+0x70>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	4a1e      	ldr	r2, [pc, #120]	@ (8009914 <HAL_TIM_Base_Start+0xbc>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d013      	beq.n	80098c8 <HAL_TIM_Base_Start+0x70>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	4a1c      	ldr	r2, [pc, #112]	@ (8009918 <HAL_TIM_Base_Start+0xc0>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d00e      	beq.n	80098c8 <HAL_TIM_Base_Start+0x70>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4a1b      	ldr	r2, [pc, #108]	@ (800991c <HAL_TIM_Base_Start+0xc4>)
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d009      	beq.n	80098c8 <HAL_TIM_Base_Start+0x70>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	4a19      	ldr	r2, [pc, #100]	@ (8009920 <HAL_TIM_Base_Start+0xc8>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d004      	beq.n	80098c8 <HAL_TIM_Base_Start+0x70>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	4a18      	ldr	r2, [pc, #96]	@ (8009924 <HAL_TIM_Base_Start+0xcc>)
 80098c4:	4293      	cmp	r3, r2
 80098c6:	d111      	bne.n	80098ec <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	689b      	ldr	r3, [r3, #8]
 80098ce:	f003 0307 	and.w	r3, r3, #7
 80098d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	2b06      	cmp	r3, #6
 80098d8:	d010      	beq.n	80098fc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	681a      	ldr	r2, [r3, #0]
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f042 0201 	orr.w	r2, r2, #1
 80098e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098ea:	e007      	b.n	80098fc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	681a      	ldr	r2, [r3, #0]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f042 0201 	orr.w	r2, r2, #1
 80098fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80098fc:	2300      	movs	r3, #0
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3714      	adds	r7, #20
 8009902:	46bd      	mov	sp, r7
 8009904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009908:	4770      	bx	lr
 800990a:	bf00      	nop
 800990c:	40010000 	.word	0x40010000
 8009910:	40000400 	.word	0x40000400
 8009914:	40000800 	.word	0x40000800
 8009918:	40000c00 	.word	0x40000c00
 800991c:	40010400 	.word	0x40010400
 8009920:	40014000 	.word	0x40014000
 8009924:	40001800 	.word	0x40001800

08009928 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009928:	b480      	push	{r7}
 800992a:	b085      	sub	sp, #20
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009936:	b2db      	uxtb	r3, r3
 8009938:	2b01      	cmp	r3, #1
 800993a:	d001      	beq.n	8009940 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800993c:	2301      	movs	r3, #1
 800993e:	e04e      	b.n	80099de <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2202      	movs	r2, #2
 8009944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	68da      	ldr	r2, [r3, #12]
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f042 0201 	orr.w	r2, r2, #1
 8009956:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	4a23      	ldr	r2, [pc, #140]	@ (80099ec <HAL_TIM_Base_Start_IT+0xc4>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d022      	beq.n	80099a8 <HAL_TIM_Base_Start_IT+0x80>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800996a:	d01d      	beq.n	80099a8 <HAL_TIM_Base_Start_IT+0x80>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	4a1f      	ldr	r2, [pc, #124]	@ (80099f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8009972:	4293      	cmp	r3, r2
 8009974:	d018      	beq.n	80099a8 <HAL_TIM_Base_Start_IT+0x80>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	4a1e      	ldr	r2, [pc, #120]	@ (80099f4 <HAL_TIM_Base_Start_IT+0xcc>)
 800997c:	4293      	cmp	r3, r2
 800997e:	d013      	beq.n	80099a8 <HAL_TIM_Base_Start_IT+0x80>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	4a1c      	ldr	r2, [pc, #112]	@ (80099f8 <HAL_TIM_Base_Start_IT+0xd0>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d00e      	beq.n	80099a8 <HAL_TIM_Base_Start_IT+0x80>
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	4a1b      	ldr	r2, [pc, #108]	@ (80099fc <HAL_TIM_Base_Start_IT+0xd4>)
 8009990:	4293      	cmp	r3, r2
 8009992:	d009      	beq.n	80099a8 <HAL_TIM_Base_Start_IT+0x80>
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	4a19      	ldr	r2, [pc, #100]	@ (8009a00 <HAL_TIM_Base_Start_IT+0xd8>)
 800999a:	4293      	cmp	r3, r2
 800999c:	d004      	beq.n	80099a8 <HAL_TIM_Base_Start_IT+0x80>
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	4a18      	ldr	r2, [pc, #96]	@ (8009a04 <HAL_TIM_Base_Start_IT+0xdc>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d111      	bne.n	80099cc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	689b      	ldr	r3, [r3, #8]
 80099ae:	f003 0307 	and.w	r3, r3, #7
 80099b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	2b06      	cmp	r3, #6
 80099b8:	d010      	beq.n	80099dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	681a      	ldr	r2, [r3, #0]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f042 0201 	orr.w	r2, r2, #1
 80099c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099ca:	e007      	b.n	80099dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	681a      	ldr	r2, [r3, #0]
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f042 0201 	orr.w	r2, r2, #1
 80099da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80099dc:	2300      	movs	r3, #0
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3714      	adds	r7, #20
 80099e2:	46bd      	mov	sp, r7
 80099e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e8:	4770      	bx	lr
 80099ea:	bf00      	nop
 80099ec:	40010000 	.word	0x40010000
 80099f0:	40000400 	.word	0x40000400
 80099f4:	40000800 	.word	0x40000800
 80099f8:	40000c00 	.word	0x40000c00
 80099fc:	40010400 	.word	0x40010400
 8009a00:	40014000 	.word	0x40014000
 8009a04:	40001800 	.word	0x40001800

08009a08 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b083      	sub	sp, #12
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	68da      	ldr	r2, [r3, #12]
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f022 0201 	bic.w	r2, r2, #1
 8009a1e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	6a1a      	ldr	r2, [r3, #32]
 8009a26:	f241 1311 	movw	r3, #4369	@ 0x1111
 8009a2a:	4013      	ands	r3, r2
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d10f      	bne.n	8009a50 <HAL_TIM_Base_Stop_IT+0x48>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	6a1a      	ldr	r2, [r3, #32]
 8009a36:	f240 4344 	movw	r3, #1092	@ 0x444
 8009a3a:	4013      	ands	r3, r2
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d107      	bne.n	8009a50 <HAL_TIM_Base_Stop_IT+0x48>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	681a      	ldr	r2, [r3, #0]
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f022 0201 	bic.w	r2, r2, #1
 8009a4e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2201      	movs	r2, #1
 8009a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8009a58:	2300      	movs	r3, #0
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	370c      	adds	r7, #12
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a64:	4770      	bx	lr

08009a66 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009a66:	b580      	push	{r7, lr}
 8009a68:	b082      	sub	sp, #8
 8009a6a:	af00      	add	r7, sp, #0
 8009a6c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	691b      	ldr	r3, [r3, #16]
 8009a74:	f003 0302 	and.w	r3, r3, #2
 8009a78:	2b02      	cmp	r3, #2
 8009a7a:	d122      	bne.n	8009ac2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	68db      	ldr	r3, [r3, #12]
 8009a82:	f003 0302 	and.w	r3, r3, #2
 8009a86:	2b02      	cmp	r3, #2
 8009a88:	d11b      	bne.n	8009ac2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f06f 0202 	mvn.w	r2, #2
 8009a92:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2201      	movs	r2, #1
 8009a98:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	699b      	ldr	r3, [r3, #24]
 8009aa0:	f003 0303 	and.w	r3, r3, #3
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d003      	beq.n	8009ab0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f000 f9b5 	bl	8009e18 <HAL_TIM_IC_CaptureCallback>
 8009aae:	e005      	b.n	8009abc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f000 f9a7 	bl	8009e04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f000 f9b8 	bl	8009e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	691b      	ldr	r3, [r3, #16]
 8009ac8:	f003 0304 	and.w	r3, r3, #4
 8009acc:	2b04      	cmp	r3, #4
 8009ace:	d122      	bne.n	8009b16 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	68db      	ldr	r3, [r3, #12]
 8009ad6:	f003 0304 	and.w	r3, r3, #4
 8009ada:	2b04      	cmp	r3, #4
 8009adc:	d11b      	bne.n	8009b16 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f06f 0204 	mvn.w	r2, #4
 8009ae6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2202      	movs	r2, #2
 8009aec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	699b      	ldr	r3, [r3, #24]
 8009af4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d003      	beq.n	8009b04 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f000 f98b 	bl	8009e18 <HAL_TIM_IC_CaptureCallback>
 8009b02:	e005      	b.n	8009b10 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f000 f97d 	bl	8009e04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f000 f98e 	bl	8009e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2200      	movs	r2, #0
 8009b14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	691b      	ldr	r3, [r3, #16]
 8009b1c:	f003 0308 	and.w	r3, r3, #8
 8009b20:	2b08      	cmp	r3, #8
 8009b22:	d122      	bne.n	8009b6a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	68db      	ldr	r3, [r3, #12]
 8009b2a:	f003 0308 	and.w	r3, r3, #8
 8009b2e:	2b08      	cmp	r3, #8
 8009b30:	d11b      	bne.n	8009b6a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f06f 0208 	mvn.w	r2, #8
 8009b3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2204      	movs	r2, #4
 8009b40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	69db      	ldr	r3, [r3, #28]
 8009b48:	f003 0303 	and.w	r3, r3, #3
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d003      	beq.n	8009b58 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f000 f961 	bl	8009e18 <HAL_TIM_IC_CaptureCallback>
 8009b56:	e005      	b.n	8009b64 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f000 f953 	bl	8009e04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f000 f964 	bl	8009e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2200      	movs	r2, #0
 8009b68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	691b      	ldr	r3, [r3, #16]
 8009b70:	f003 0310 	and.w	r3, r3, #16
 8009b74:	2b10      	cmp	r3, #16
 8009b76:	d122      	bne.n	8009bbe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	68db      	ldr	r3, [r3, #12]
 8009b7e:	f003 0310 	and.w	r3, r3, #16
 8009b82:	2b10      	cmp	r3, #16
 8009b84:	d11b      	bne.n	8009bbe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f06f 0210 	mvn.w	r2, #16
 8009b8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2208      	movs	r2, #8
 8009b94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	69db      	ldr	r3, [r3, #28]
 8009b9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d003      	beq.n	8009bac <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f000 f937 	bl	8009e18 <HAL_TIM_IC_CaptureCallback>
 8009baa:	e005      	b.n	8009bb8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f000 f929 	bl	8009e04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f000 f93a 	bl	8009e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	691b      	ldr	r3, [r3, #16]
 8009bc4:	f003 0301 	and.w	r3, r3, #1
 8009bc8:	2b01      	cmp	r3, #1
 8009bca:	d10e      	bne.n	8009bea <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	68db      	ldr	r3, [r3, #12]
 8009bd2:	f003 0301 	and.w	r3, r3, #1
 8009bd6:	2b01      	cmp	r3, #1
 8009bd8:	d107      	bne.n	8009bea <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f06f 0201 	mvn.w	r2, #1
 8009be2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f7f9 fdbf 	bl	8003768 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	691b      	ldr	r3, [r3, #16]
 8009bf0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009bf4:	2b80      	cmp	r3, #128	@ 0x80
 8009bf6:	d10e      	bne.n	8009c16 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	68db      	ldr	r3, [r3, #12]
 8009bfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c02:	2b80      	cmp	r3, #128	@ 0x80
 8009c04:	d107      	bne.n	8009c16 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009c0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f000 fadf 	bl	800a1d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	691b      	ldr	r3, [r3, #16]
 8009c1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c20:	2b40      	cmp	r3, #64	@ 0x40
 8009c22:	d10e      	bne.n	8009c42 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	68db      	ldr	r3, [r3, #12]
 8009c2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c2e:	2b40      	cmp	r3, #64	@ 0x40
 8009c30:	d107      	bne.n	8009c42 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009c3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f000 f8ff 	bl	8009e40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	691b      	ldr	r3, [r3, #16]
 8009c48:	f003 0320 	and.w	r3, r3, #32
 8009c4c:	2b20      	cmp	r3, #32
 8009c4e:	d10e      	bne.n	8009c6e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	68db      	ldr	r3, [r3, #12]
 8009c56:	f003 0320 	and.w	r3, r3, #32
 8009c5a:	2b20      	cmp	r3, #32
 8009c5c:	d107      	bne.n	8009c6e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f06f 0220 	mvn.w	r2, #32
 8009c66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f000 faa9 	bl	800a1c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009c6e:	bf00      	nop
 8009c70:	3708      	adds	r7, #8
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}

08009c76 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009c76:	b580      	push	{r7, lr}
 8009c78:	b084      	sub	sp, #16
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	6078      	str	r0, [r7, #4]
 8009c7e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009c80:	2300      	movs	r3, #0
 8009c82:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009c8a:	2b01      	cmp	r3, #1
 8009c8c:	d101      	bne.n	8009c92 <HAL_TIM_ConfigClockSource+0x1c>
 8009c8e:	2302      	movs	r3, #2
 8009c90:	e0b4      	b.n	8009dfc <HAL_TIM_ConfigClockSource+0x186>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2201      	movs	r2, #1
 8009c96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2202      	movs	r2, #2
 8009c9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	689b      	ldr	r3, [r3, #8]
 8009ca8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009cb0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009cb8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	68ba      	ldr	r2, [r7, #8]
 8009cc0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009cca:	d03e      	beq.n	8009d4a <HAL_TIM_ConfigClockSource+0xd4>
 8009ccc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009cd0:	f200 8087 	bhi.w	8009de2 <HAL_TIM_ConfigClockSource+0x16c>
 8009cd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009cd8:	f000 8086 	beq.w	8009de8 <HAL_TIM_ConfigClockSource+0x172>
 8009cdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ce0:	d87f      	bhi.n	8009de2 <HAL_TIM_ConfigClockSource+0x16c>
 8009ce2:	2b70      	cmp	r3, #112	@ 0x70
 8009ce4:	d01a      	beq.n	8009d1c <HAL_TIM_ConfigClockSource+0xa6>
 8009ce6:	2b70      	cmp	r3, #112	@ 0x70
 8009ce8:	d87b      	bhi.n	8009de2 <HAL_TIM_ConfigClockSource+0x16c>
 8009cea:	2b60      	cmp	r3, #96	@ 0x60
 8009cec:	d050      	beq.n	8009d90 <HAL_TIM_ConfigClockSource+0x11a>
 8009cee:	2b60      	cmp	r3, #96	@ 0x60
 8009cf0:	d877      	bhi.n	8009de2 <HAL_TIM_ConfigClockSource+0x16c>
 8009cf2:	2b50      	cmp	r3, #80	@ 0x50
 8009cf4:	d03c      	beq.n	8009d70 <HAL_TIM_ConfigClockSource+0xfa>
 8009cf6:	2b50      	cmp	r3, #80	@ 0x50
 8009cf8:	d873      	bhi.n	8009de2 <HAL_TIM_ConfigClockSource+0x16c>
 8009cfa:	2b40      	cmp	r3, #64	@ 0x40
 8009cfc:	d058      	beq.n	8009db0 <HAL_TIM_ConfigClockSource+0x13a>
 8009cfe:	2b40      	cmp	r3, #64	@ 0x40
 8009d00:	d86f      	bhi.n	8009de2 <HAL_TIM_ConfigClockSource+0x16c>
 8009d02:	2b30      	cmp	r3, #48	@ 0x30
 8009d04:	d064      	beq.n	8009dd0 <HAL_TIM_ConfigClockSource+0x15a>
 8009d06:	2b30      	cmp	r3, #48	@ 0x30
 8009d08:	d86b      	bhi.n	8009de2 <HAL_TIM_ConfigClockSource+0x16c>
 8009d0a:	2b20      	cmp	r3, #32
 8009d0c:	d060      	beq.n	8009dd0 <HAL_TIM_ConfigClockSource+0x15a>
 8009d0e:	2b20      	cmp	r3, #32
 8009d10:	d867      	bhi.n	8009de2 <HAL_TIM_ConfigClockSource+0x16c>
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d05c      	beq.n	8009dd0 <HAL_TIM_ConfigClockSource+0x15a>
 8009d16:	2b10      	cmp	r3, #16
 8009d18:	d05a      	beq.n	8009dd0 <HAL_TIM_ConfigClockSource+0x15a>
 8009d1a:	e062      	b.n	8009de2 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6818      	ldr	r0, [r3, #0]
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	6899      	ldr	r1, [r3, #8]
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	685a      	ldr	r2, [r3, #4]
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	68db      	ldr	r3, [r3, #12]
 8009d2c:	f000 f9ac 	bl	800a088 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	689b      	ldr	r3, [r3, #8]
 8009d36:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009d3e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	68ba      	ldr	r2, [r7, #8]
 8009d46:	609a      	str	r2, [r3, #8]
      break;
 8009d48:	e04f      	b.n	8009dea <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6818      	ldr	r0, [r3, #0]
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	6899      	ldr	r1, [r3, #8]
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	685a      	ldr	r2, [r3, #4]
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	68db      	ldr	r3, [r3, #12]
 8009d5a:	f000 f995 	bl	800a088 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	689a      	ldr	r2, [r3, #8]
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009d6c:	609a      	str	r2, [r3, #8]
      break;
 8009d6e:	e03c      	b.n	8009dea <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6818      	ldr	r0, [r3, #0]
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	6859      	ldr	r1, [r3, #4]
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	68db      	ldr	r3, [r3, #12]
 8009d7c:	461a      	mov	r2, r3
 8009d7e:	f000 f909 	bl	8009f94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	2150      	movs	r1, #80	@ 0x50
 8009d88:	4618      	mov	r0, r3
 8009d8a:	f000 f962 	bl	800a052 <TIM_ITRx_SetConfig>
      break;
 8009d8e:	e02c      	b.n	8009dea <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6818      	ldr	r0, [r3, #0]
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	6859      	ldr	r1, [r3, #4]
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	68db      	ldr	r3, [r3, #12]
 8009d9c:	461a      	mov	r2, r3
 8009d9e:	f000 f928 	bl	8009ff2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	2160      	movs	r1, #96	@ 0x60
 8009da8:	4618      	mov	r0, r3
 8009daa:	f000 f952 	bl	800a052 <TIM_ITRx_SetConfig>
      break;
 8009dae:	e01c      	b.n	8009dea <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6818      	ldr	r0, [r3, #0]
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	6859      	ldr	r1, [r3, #4]
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	68db      	ldr	r3, [r3, #12]
 8009dbc:	461a      	mov	r2, r3
 8009dbe:	f000 f8e9 	bl	8009f94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	2140      	movs	r1, #64	@ 0x40
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f000 f942 	bl	800a052 <TIM_ITRx_SetConfig>
      break;
 8009dce:	e00c      	b.n	8009dea <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681a      	ldr	r2, [r3, #0]
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	4619      	mov	r1, r3
 8009dda:	4610      	mov	r0, r2
 8009ddc:	f000 f939 	bl	800a052 <TIM_ITRx_SetConfig>
      break;
 8009de0:	e003      	b.n	8009dea <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009de2:	2301      	movs	r3, #1
 8009de4:	73fb      	strb	r3, [r7, #15]
      break;
 8009de6:	e000      	b.n	8009dea <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009de8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2201      	movs	r2, #1
 8009dee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2200      	movs	r2, #0
 8009df6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	3710      	adds	r7, #16
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}

08009e04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b083      	sub	sp, #12
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009e0c:	bf00      	nop
 8009e0e:	370c      	adds	r7, #12
 8009e10:	46bd      	mov	sp, r7
 8009e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e16:	4770      	bx	lr

08009e18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b083      	sub	sp, #12
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009e20:	bf00      	nop
 8009e22:	370c      	adds	r7, #12
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr

08009e2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b083      	sub	sp, #12
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009e34:	bf00      	nop
 8009e36:	370c      	adds	r7, #12
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3e:	4770      	bx	lr

08009e40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009e40:	b480      	push	{r7}
 8009e42:	b083      	sub	sp, #12
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009e48:	bf00      	nop
 8009e4a:	370c      	adds	r7, #12
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e52:	4770      	bx	lr

08009e54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009e54:	b480      	push	{r7}
 8009e56:	b085      	sub	sp, #20
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	4a40      	ldr	r2, [pc, #256]	@ (8009f68 <TIM_Base_SetConfig+0x114>)
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d013      	beq.n	8009e94 <TIM_Base_SetConfig+0x40>
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e72:	d00f      	beq.n	8009e94 <TIM_Base_SetConfig+0x40>
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	4a3d      	ldr	r2, [pc, #244]	@ (8009f6c <TIM_Base_SetConfig+0x118>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d00b      	beq.n	8009e94 <TIM_Base_SetConfig+0x40>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	4a3c      	ldr	r2, [pc, #240]	@ (8009f70 <TIM_Base_SetConfig+0x11c>)
 8009e80:	4293      	cmp	r3, r2
 8009e82:	d007      	beq.n	8009e94 <TIM_Base_SetConfig+0x40>
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	4a3b      	ldr	r2, [pc, #236]	@ (8009f74 <TIM_Base_SetConfig+0x120>)
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	d003      	beq.n	8009e94 <TIM_Base_SetConfig+0x40>
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	4a3a      	ldr	r2, [pc, #232]	@ (8009f78 <TIM_Base_SetConfig+0x124>)
 8009e90:	4293      	cmp	r3, r2
 8009e92:	d108      	bne.n	8009ea6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	68fa      	ldr	r2, [r7, #12]
 8009ea2:	4313      	orrs	r3, r2
 8009ea4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	4a2f      	ldr	r2, [pc, #188]	@ (8009f68 <TIM_Base_SetConfig+0x114>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d02b      	beq.n	8009f06 <TIM_Base_SetConfig+0xb2>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009eb4:	d027      	beq.n	8009f06 <TIM_Base_SetConfig+0xb2>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	4a2c      	ldr	r2, [pc, #176]	@ (8009f6c <TIM_Base_SetConfig+0x118>)
 8009eba:	4293      	cmp	r3, r2
 8009ebc:	d023      	beq.n	8009f06 <TIM_Base_SetConfig+0xb2>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	4a2b      	ldr	r2, [pc, #172]	@ (8009f70 <TIM_Base_SetConfig+0x11c>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d01f      	beq.n	8009f06 <TIM_Base_SetConfig+0xb2>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	4a2a      	ldr	r2, [pc, #168]	@ (8009f74 <TIM_Base_SetConfig+0x120>)
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	d01b      	beq.n	8009f06 <TIM_Base_SetConfig+0xb2>
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	4a29      	ldr	r2, [pc, #164]	@ (8009f78 <TIM_Base_SetConfig+0x124>)
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d017      	beq.n	8009f06 <TIM_Base_SetConfig+0xb2>
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	4a28      	ldr	r2, [pc, #160]	@ (8009f7c <TIM_Base_SetConfig+0x128>)
 8009eda:	4293      	cmp	r3, r2
 8009edc:	d013      	beq.n	8009f06 <TIM_Base_SetConfig+0xb2>
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	4a27      	ldr	r2, [pc, #156]	@ (8009f80 <TIM_Base_SetConfig+0x12c>)
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d00f      	beq.n	8009f06 <TIM_Base_SetConfig+0xb2>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	4a26      	ldr	r2, [pc, #152]	@ (8009f84 <TIM_Base_SetConfig+0x130>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d00b      	beq.n	8009f06 <TIM_Base_SetConfig+0xb2>
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	4a25      	ldr	r2, [pc, #148]	@ (8009f88 <TIM_Base_SetConfig+0x134>)
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d007      	beq.n	8009f06 <TIM_Base_SetConfig+0xb2>
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	4a24      	ldr	r2, [pc, #144]	@ (8009f8c <TIM_Base_SetConfig+0x138>)
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d003      	beq.n	8009f06 <TIM_Base_SetConfig+0xb2>
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	4a23      	ldr	r2, [pc, #140]	@ (8009f90 <TIM_Base_SetConfig+0x13c>)
 8009f02:	4293      	cmp	r3, r2
 8009f04:	d108      	bne.n	8009f18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009f0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	68db      	ldr	r3, [r3, #12]
 8009f12:	68fa      	ldr	r2, [r7, #12]
 8009f14:	4313      	orrs	r3, r2
 8009f16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	695b      	ldr	r3, [r3, #20]
 8009f22:	4313      	orrs	r3, r2
 8009f24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	68fa      	ldr	r2, [r7, #12]
 8009f2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	689a      	ldr	r2, [r3, #8]
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	681a      	ldr	r2, [r3, #0]
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	4a0a      	ldr	r2, [pc, #40]	@ (8009f68 <TIM_Base_SetConfig+0x114>)
 8009f40:	4293      	cmp	r3, r2
 8009f42:	d003      	beq.n	8009f4c <TIM_Base_SetConfig+0xf8>
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	4a0c      	ldr	r2, [pc, #48]	@ (8009f78 <TIM_Base_SetConfig+0x124>)
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	d103      	bne.n	8009f54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	691a      	ldr	r2, [r3, #16]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2201      	movs	r2, #1
 8009f58:	615a      	str	r2, [r3, #20]
}
 8009f5a:	bf00      	nop
 8009f5c:	3714      	adds	r7, #20
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f64:	4770      	bx	lr
 8009f66:	bf00      	nop
 8009f68:	40010000 	.word	0x40010000
 8009f6c:	40000400 	.word	0x40000400
 8009f70:	40000800 	.word	0x40000800
 8009f74:	40000c00 	.word	0x40000c00
 8009f78:	40010400 	.word	0x40010400
 8009f7c:	40014000 	.word	0x40014000
 8009f80:	40014400 	.word	0x40014400
 8009f84:	40014800 	.word	0x40014800
 8009f88:	40001800 	.word	0x40001800
 8009f8c:	40001c00 	.word	0x40001c00
 8009f90:	40002000 	.word	0x40002000

08009f94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b087      	sub	sp, #28
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	60f8      	str	r0, [r7, #12]
 8009f9c:	60b9      	str	r1, [r7, #8]
 8009f9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	6a1b      	ldr	r3, [r3, #32]
 8009fa4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	6a1b      	ldr	r3, [r3, #32]
 8009faa:	f023 0201 	bic.w	r2, r3, #1
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	699b      	ldr	r3, [r3, #24]
 8009fb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009fb8:	693b      	ldr	r3, [r7, #16]
 8009fba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009fbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	011b      	lsls	r3, r3, #4
 8009fc4:	693a      	ldr	r2, [r7, #16]
 8009fc6:	4313      	orrs	r3, r2
 8009fc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009fca:	697b      	ldr	r3, [r7, #20]
 8009fcc:	f023 030a 	bic.w	r3, r3, #10
 8009fd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009fd2:	697a      	ldr	r2, [r7, #20]
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	4313      	orrs	r3, r2
 8009fd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	693a      	ldr	r2, [r7, #16]
 8009fde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	697a      	ldr	r2, [r7, #20]
 8009fe4:	621a      	str	r2, [r3, #32]
}
 8009fe6:	bf00      	nop
 8009fe8:	371c      	adds	r7, #28
 8009fea:	46bd      	mov	sp, r7
 8009fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff0:	4770      	bx	lr

08009ff2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ff2:	b480      	push	{r7}
 8009ff4:	b087      	sub	sp, #28
 8009ff6:	af00      	add	r7, sp, #0
 8009ff8:	60f8      	str	r0, [r7, #12]
 8009ffa:	60b9      	str	r1, [r7, #8]
 8009ffc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	6a1b      	ldr	r3, [r3, #32]
 800a002:	f023 0210 	bic.w	r2, r3, #16
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	699b      	ldr	r3, [r3, #24]
 800a00e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	6a1b      	ldr	r3, [r3, #32]
 800a014:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a016:	697b      	ldr	r3, [r7, #20]
 800a018:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a01c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	031b      	lsls	r3, r3, #12
 800a022:	697a      	ldr	r2, [r7, #20]
 800a024:	4313      	orrs	r3, r2
 800a026:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a028:	693b      	ldr	r3, [r7, #16]
 800a02a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a02e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	011b      	lsls	r3, r3, #4
 800a034:	693a      	ldr	r2, [r7, #16]
 800a036:	4313      	orrs	r3, r2
 800a038:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	697a      	ldr	r2, [r7, #20]
 800a03e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	693a      	ldr	r2, [r7, #16]
 800a044:	621a      	str	r2, [r3, #32]
}
 800a046:	bf00      	nop
 800a048:	371c      	adds	r7, #28
 800a04a:	46bd      	mov	sp, r7
 800a04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a050:	4770      	bx	lr

0800a052 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a052:	b480      	push	{r7}
 800a054:	b085      	sub	sp, #20
 800a056:	af00      	add	r7, sp, #0
 800a058:	6078      	str	r0, [r7, #4]
 800a05a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	689b      	ldr	r3, [r3, #8]
 800a060:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a068:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a06a:	683a      	ldr	r2, [r7, #0]
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	4313      	orrs	r3, r2
 800a070:	f043 0307 	orr.w	r3, r3, #7
 800a074:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	68fa      	ldr	r2, [r7, #12]
 800a07a:	609a      	str	r2, [r3, #8]
}
 800a07c:	bf00      	nop
 800a07e:	3714      	adds	r7, #20
 800a080:	46bd      	mov	sp, r7
 800a082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a086:	4770      	bx	lr

0800a088 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a088:	b480      	push	{r7}
 800a08a:	b087      	sub	sp, #28
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	60f8      	str	r0, [r7, #12]
 800a090:	60b9      	str	r1, [r7, #8]
 800a092:	607a      	str	r2, [r7, #4]
 800a094:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	689b      	ldr	r3, [r3, #8]
 800a09a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a0a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	021a      	lsls	r2, r3, #8
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	431a      	orrs	r2, r3
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	4313      	orrs	r3, r2
 800a0b0:	697a      	ldr	r2, [r7, #20]
 800a0b2:	4313      	orrs	r3, r2
 800a0b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	697a      	ldr	r2, [r7, #20]
 800a0ba:	609a      	str	r2, [r3, #8]
}
 800a0bc:	bf00      	nop
 800a0be:	371c      	adds	r7, #28
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr

0800a0c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b085      	sub	sp, #20
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
 800a0d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a0d8:	2b01      	cmp	r3, #1
 800a0da:	d101      	bne.n	800a0e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a0dc:	2302      	movs	r3, #2
 800a0de:	e05a      	b.n	800a196 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2202      	movs	r2, #2
 800a0ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	685b      	ldr	r3, [r3, #4]
 800a0f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	689b      	ldr	r3, [r3, #8]
 800a0fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a106:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	68fa      	ldr	r2, [r7, #12]
 800a10e:	4313      	orrs	r3, r2
 800a110:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	68fa      	ldr	r2, [r7, #12]
 800a118:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	4a21      	ldr	r2, [pc, #132]	@ (800a1a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a120:	4293      	cmp	r3, r2
 800a122:	d022      	beq.n	800a16a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a12c:	d01d      	beq.n	800a16a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	4a1d      	ldr	r2, [pc, #116]	@ (800a1a8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a134:	4293      	cmp	r3, r2
 800a136:	d018      	beq.n	800a16a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	4a1b      	ldr	r2, [pc, #108]	@ (800a1ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	d013      	beq.n	800a16a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	4a1a      	ldr	r2, [pc, #104]	@ (800a1b0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a148:	4293      	cmp	r3, r2
 800a14a:	d00e      	beq.n	800a16a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	4a18      	ldr	r2, [pc, #96]	@ (800a1b4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a152:	4293      	cmp	r3, r2
 800a154:	d009      	beq.n	800a16a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	4a17      	ldr	r2, [pc, #92]	@ (800a1b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a15c:	4293      	cmp	r3, r2
 800a15e:	d004      	beq.n	800a16a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	4a15      	ldr	r2, [pc, #84]	@ (800a1bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a166:	4293      	cmp	r3, r2
 800a168:	d10c      	bne.n	800a184 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a170:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	685b      	ldr	r3, [r3, #4]
 800a176:	68ba      	ldr	r2, [r7, #8]
 800a178:	4313      	orrs	r3, r2
 800a17a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	68ba      	ldr	r2, [r7, #8]
 800a182:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2201      	movs	r2, #1
 800a188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2200      	movs	r2, #0
 800a190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a194:	2300      	movs	r3, #0
}
 800a196:	4618      	mov	r0, r3
 800a198:	3714      	adds	r7, #20
 800a19a:	46bd      	mov	sp, r7
 800a19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a0:	4770      	bx	lr
 800a1a2:	bf00      	nop
 800a1a4:	40010000 	.word	0x40010000
 800a1a8:	40000400 	.word	0x40000400
 800a1ac:	40000800 	.word	0x40000800
 800a1b0:	40000c00 	.word	0x40000c00
 800a1b4:	40010400 	.word	0x40010400
 800a1b8:	40014000 	.word	0x40014000
 800a1bc:	40001800 	.word	0x40001800

0800a1c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b083      	sub	sp, #12
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a1c8:	bf00      	nop
 800a1ca:	370c      	adds	r7, #12
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d2:	4770      	bx	lr

0800a1d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b083      	sub	sp, #12
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a1dc:	bf00      	nop
 800a1de:	370c      	adds	r7, #12
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e6:	4770      	bx	lr

0800a1e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b082      	sub	sp, #8
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d101      	bne.n	800a1fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	e03f      	b.n	800a27a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a200:	b2db      	uxtb	r3, r3
 800a202:	2b00      	cmp	r3, #0
 800a204:	d106      	bne.n	800a214 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2200      	movs	r2, #0
 800a20a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f7fb fcde 	bl	8005bd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2224      	movs	r2, #36	@ 0x24
 800a218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	68da      	ldr	r2, [r3, #12]
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a22a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f000 fddf 	bl	800adf0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	691a      	ldr	r2, [r3, #16]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a240:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	695a      	ldr	r2, [r3, #20]
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a250:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	68da      	ldr	r2, [r3, #12]
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a260:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2200      	movs	r2, #0
 800a266:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2220      	movs	r2, #32
 800a26c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2220      	movs	r2, #32
 800a274:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800a278:	2300      	movs	r3, #0
}
 800a27a:	4618      	mov	r0, r3
 800a27c:	3708      	adds	r7, #8
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}

0800a282 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a282:	b580      	push	{r7, lr}
 800a284:	b08a      	sub	sp, #40	@ 0x28
 800a286:	af02      	add	r7, sp, #8
 800a288:	60f8      	str	r0, [r7, #12]
 800a28a:	60b9      	str	r1, [r7, #8]
 800a28c:	603b      	str	r3, [r7, #0]
 800a28e:	4613      	mov	r3, r2
 800a290:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a292:	2300      	movs	r3, #0
 800a294:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a29c:	b2db      	uxtb	r3, r3
 800a29e:	2b20      	cmp	r3, #32
 800a2a0:	d17c      	bne.n	800a39c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d002      	beq.n	800a2ae <HAL_UART_Transmit+0x2c>
 800a2a8:	88fb      	ldrh	r3, [r7, #6]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d101      	bne.n	800a2b2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	e075      	b.n	800a39e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a2b8:	2b01      	cmp	r3, #1
 800a2ba:	d101      	bne.n	800a2c0 <HAL_UART_Transmit+0x3e>
 800a2bc:	2302      	movs	r3, #2
 800a2be:	e06e      	b.n	800a39e <HAL_UART_Transmit+0x11c>
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	2221      	movs	r2, #33	@ 0x21
 800a2d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a2d6:	f7fb ff8b 	bl	80061f0 <HAL_GetTick>
 800a2da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	88fa      	ldrh	r2, [r7, #6]
 800a2e0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	88fa      	ldrh	r2, [r7, #6]
 800a2e6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	689b      	ldr	r3, [r3, #8]
 800a2ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a2f0:	d108      	bne.n	800a304 <HAL_UART_Transmit+0x82>
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	691b      	ldr	r3, [r3, #16]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d104      	bne.n	800a304 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	61bb      	str	r3, [r7, #24]
 800a302:	e003      	b.n	800a30c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a308:	2300      	movs	r3, #0
 800a30a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2200      	movs	r2, #0
 800a310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 800a314:	e02a      	b.n	800a36c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	9300      	str	r3, [sp, #0]
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	2200      	movs	r2, #0
 800a31e:	2180      	movs	r1, #128	@ 0x80
 800a320:	68f8      	ldr	r0, [r7, #12]
 800a322:	f000 fb1f 	bl	800a964 <UART_WaitOnFlagUntilTimeout>
 800a326:	4603      	mov	r3, r0
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d001      	beq.n	800a330 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a32c:	2303      	movs	r3, #3
 800a32e:	e036      	b.n	800a39e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a330:	69fb      	ldr	r3, [r7, #28]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d10b      	bne.n	800a34e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a336:	69bb      	ldr	r3, [r7, #24]
 800a338:	881b      	ldrh	r3, [r3, #0]
 800a33a:	461a      	mov	r2, r3
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a344:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a346:	69bb      	ldr	r3, [r7, #24]
 800a348:	3302      	adds	r3, #2
 800a34a:	61bb      	str	r3, [r7, #24]
 800a34c:	e007      	b.n	800a35e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a34e:	69fb      	ldr	r3, [r7, #28]
 800a350:	781a      	ldrb	r2, [r3, #0]
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a358:	69fb      	ldr	r3, [r7, #28]
 800a35a:	3301      	adds	r3, #1
 800a35c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a362:	b29b      	uxth	r3, r3
 800a364:	3b01      	subs	r3, #1
 800a366:	b29a      	uxth	r2, r3
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a370:	b29b      	uxth	r3, r3
 800a372:	2b00      	cmp	r3, #0
 800a374:	d1cf      	bne.n	800a316 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	9300      	str	r3, [sp, #0]
 800a37a:	697b      	ldr	r3, [r7, #20]
 800a37c:	2200      	movs	r2, #0
 800a37e:	2140      	movs	r1, #64	@ 0x40
 800a380:	68f8      	ldr	r0, [r7, #12]
 800a382:	f000 faef 	bl	800a964 <UART_WaitOnFlagUntilTimeout>
 800a386:	4603      	mov	r3, r0
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d001      	beq.n	800a390 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a38c:	2303      	movs	r3, #3
 800a38e:	e006      	b.n	800a39e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	2220      	movs	r2, #32
 800a394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800a398:	2300      	movs	r3, #0
 800a39a:	e000      	b.n	800a39e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a39c:	2302      	movs	r3, #2
  }
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3720      	adds	r7, #32
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}

0800a3a6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a3a6:	b580      	push	{r7, lr}
 800a3a8:	b084      	sub	sp, #16
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	60f8      	str	r0, [r7, #12]
 800a3ae:	60b9      	str	r1, [r7, #8]
 800a3b0:	4613      	mov	r3, r2
 800a3b2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a3ba:	b2db      	uxtb	r3, r3
 800a3bc:	2b20      	cmp	r3, #32
 800a3be:	d11d      	bne.n	800a3fc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d002      	beq.n	800a3cc <HAL_UART_Receive_IT+0x26>
 800a3c6:	88fb      	ldrh	r3, [r7, #6]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d101      	bne.n	800a3d0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	e016      	b.n	800a3fe <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a3d6:	2b01      	cmp	r3, #1
 800a3d8:	d101      	bne.n	800a3de <HAL_UART_Receive_IT+0x38>
 800a3da:	2302      	movs	r3, #2
 800a3dc:	e00f      	b.n	800a3fe <HAL_UART_Receive_IT+0x58>
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	2201      	movs	r2, #1
 800a3e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a3ec:	88fb      	ldrh	r3, [r7, #6]
 800a3ee:	461a      	mov	r2, r3
 800a3f0:	68b9      	ldr	r1, [r7, #8]
 800a3f2:	68f8      	ldr	r0, [r7, #12]
 800a3f4:	f000 fb24 	bl	800aa40 <UART_Start_Receive_IT>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	e000      	b.n	800a3fe <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a3fc:	2302      	movs	r3, #2
  }
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3710      	adds	r7, #16
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}
	...

0800a408 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b0ba      	sub	sp, #232	@ 0xe8
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	68db      	ldr	r3, [r3, #12]
 800a420:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	695b      	ldr	r3, [r3, #20]
 800a42a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800a42e:	2300      	movs	r3, #0
 800a430:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800a434:	2300      	movs	r3, #0
 800a436:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a43a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a43e:	f003 030f 	and.w	r3, r3, #15
 800a442:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800a446:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d10f      	bne.n	800a46e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a44e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a452:	f003 0320 	and.w	r3, r3, #32
 800a456:	2b00      	cmp	r3, #0
 800a458:	d009      	beq.n	800a46e <HAL_UART_IRQHandler+0x66>
 800a45a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a45e:	f003 0320 	and.w	r3, r3, #32
 800a462:	2b00      	cmp	r3, #0
 800a464:	d003      	beq.n	800a46e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f000 fc07 	bl	800ac7a <UART_Receive_IT>
      return;
 800a46c:	e256      	b.n	800a91c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a46e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a472:	2b00      	cmp	r3, #0
 800a474:	f000 80de 	beq.w	800a634 <HAL_UART_IRQHandler+0x22c>
 800a478:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a47c:	f003 0301 	and.w	r3, r3, #1
 800a480:	2b00      	cmp	r3, #0
 800a482:	d106      	bne.n	800a492 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a488:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	f000 80d1 	beq.w	800a634 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a496:	f003 0301 	and.w	r3, r3, #1
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d00b      	beq.n	800a4b6 <HAL_UART_IRQHandler+0xae>
 800a49e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a4a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d005      	beq.n	800a4b6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4ae:	f043 0201 	orr.w	r2, r3, #1
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a4b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a4ba:	f003 0304 	and.w	r3, r3, #4
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d00b      	beq.n	800a4da <HAL_UART_IRQHandler+0xd2>
 800a4c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a4c6:	f003 0301 	and.w	r3, r3, #1
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d005      	beq.n	800a4da <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4d2:	f043 0202 	orr.w	r2, r3, #2
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a4da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a4de:	f003 0302 	and.w	r3, r3, #2
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d00b      	beq.n	800a4fe <HAL_UART_IRQHandler+0xf6>
 800a4e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a4ea:	f003 0301 	and.w	r3, r3, #1
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d005      	beq.n	800a4fe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4f6:	f043 0204 	orr.w	r2, r3, #4
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a4fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a502:	f003 0308 	and.w	r3, r3, #8
 800a506:	2b00      	cmp	r3, #0
 800a508:	d011      	beq.n	800a52e <HAL_UART_IRQHandler+0x126>
 800a50a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a50e:	f003 0320 	and.w	r3, r3, #32
 800a512:	2b00      	cmp	r3, #0
 800a514:	d105      	bne.n	800a522 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a516:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a51a:	f003 0301 	and.w	r3, r3, #1
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d005      	beq.n	800a52e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a526:	f043 0208 	orr.w	r2, r3, #8
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a532:	2b00      	cmp	r3, #0
 800a534:	f000 81ed 	beq.w	800a912 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a538:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a53c:	f003 0320 	and.w	r3, r3, #32
 800a540:	2b00      	cmp	r3, #0
 800a542:	d008      	beq.n	800a556 <HAL_UART_IRQHandler+0x14e>
 800a544:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a548:	f003 0320 	and.w	r3, r3, #32
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d002      	beq.n	800a556 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f000 fb92 	bl	800ac7a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	695b      	ldr	r3, [r3, #20]
 800a55c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a560:	2b40      	cmp	r3, #64	@ 0x40
 800a562:	bf0c      	ite	eq
 800a564:	2301      	moveq	r3, #1
 800a566:	2300      	movne	r3, #0
 800a568:	b2db      	uxtb	r3, r3
 800a56a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a572:	f003 0308 	and.w	r3, r3, #8
 800a576:	2b00      	cmp	r3, #0
 800a578:	d103      	bne.n	800a582 <HAL_UART_IRQHandler+0x17a>
 800a57a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d04f      	beq.n	800a622 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f000 fa9a 	bl	800aabc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	695b      	ldr	r3, [r3, #20]
 800a58e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a592:	2b40      	cmp	r3, #64	@ 0x40
 800a594:	d141      	bne.n	800a61a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	3314      	adds	r3, #20
 800a59c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a5a4:	e853 3f00 	ldrex	r3, [r3]
 800a5a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a5ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a5b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a5b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	3314      	adds	r3, #20
 800a5be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a5c2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a5c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a5ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a5d2:	e841 2300 	strex	r3, r2, [r1]
 800a5d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a5da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d1d9      	bne.n	800a596 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d013      	beq.n	800a612 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5ee:	4a7d      	ldr	r2, [pc, #500]	@ (800a7e4 <HAL_UART_IRQHandler+0x3dc>)
 800a5f0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f7fc fc37 	bl	8006e6a <HAL_DMA_Abort_IT>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d016      	beq.n	800a630 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a606:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a608:	687a      	ldr	r2, [r7, #4]
 800a60a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800a60c:	4610      	mov	r0, r2
 800a60e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a610:	e00e      	b.n	800a630 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f000 f990 	bl	800a938 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a618:	e00a      	b.n	800a630 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	f000 f98c 	bl	800a938 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a620:	e006      	b.n	800a630 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f000 f988 	bl	800a938 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2200      	movs	r2, #0
 800a62c:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 800a62e:	e170      	b.n	800a912 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a630:	bf00      	nop
    return;
 800a632:	e16e      	b.n	800a912 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a638:	2b01      	cmp	r3, #1
 800a63a:	f040 814a 	bne.w	800a8d2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a63e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a642:	f003 0310 	and.w	r3, r3, #16
 800a646:	2b00      	cmp	r3, #0
 800a648:	f000 8143 	beq.w	800a8d2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a64c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a650:	f003 0310 	and.w	r3, r3, #16
 800a654:	2b00      	cmp	r3, #0
 800a656:	f000 813c 	beq.w	800a8d2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a65a:	2300      	movs	r3, #0
 800a65c:	60bb      	str	r3, [r7, #8]
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	60bb      	str	r3, [r7, #8]
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	685b      	ldr	r3, [r3, #4]
 800a66c:	60bb      	str	r3, [r7, #8]
 800a66e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	695b      	ldr	r3, [r3, #20]
 800a676:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a67a:	2b40      	cmp	r3, #64	@ 0x40
 800a67c:	f040 80b4 	bne.w	800a7e8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	685b      	ldr	r3, [r3, #4]
 800a688:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a68c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a690:	2b00      	cmp	r3, #0
 800a692:	f000 8140 	beq.w	800a916 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a69a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a69e:	429a      	cmp	r2, r3
 800a6a0:	f080 8139 	bcs.w	800a916 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a6aa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6b0:	69db      	ldr	r3, [r3, #28]
 800a6b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a6b6:	f000 8088 	beq.w	800a7ca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	330c      	adds	r3, #12
 800a6c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a6c8:	e853 3f00 	ldrex	r3, [r3]
 800a6cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a6d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a6d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a6d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	330c      	adds	r3, #12
 800a6e2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800a6e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a6ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a6f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a6f6:	e841 2300 	strex	r3, r2, [r1]
 800a6fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a6fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a702:	2b00      	cmp	r3, #0
 800a704:	d1d9      	bne.n	800a6ba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	3314      	adds	r3, #20
 800a70c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a70e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a710:	e853 3f00 	ldrex	r3, [r3]
 800a714:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a716:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a718:	f023 0301 	bic.w	r3, r3, #1
 800a71c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	3314      	adds	r3, #20
 800a726:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a72a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a72e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a730:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a732:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a736:	e841 2300 	strex	r3, r2, [r1]
 800a73a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a73c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d1e1      	bne.n	800a706 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	3314      	adds	r3, #20
 800a748:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a74a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a74c:	e853 3f00 	ldrex	r3, [r3]
 800a750:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a752:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a754:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a758:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	3314      	adds	r3, #20
 800a762:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a766:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a768:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a76a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a76c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a76e:	e841 2300 	strex	r3, r2, [r1]
 800a772:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a774:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a776:	2b00      	cmp	r3, #0
 800a778:	d1e3      	bne.n	800a742 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2220      	movs	r2, #32
 800a77e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2200      	movs	r2, #0
 800a786:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	330c      	adds	r3, #12
 800a78e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a790:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a792:	e853 3f00 	ldrex	r3, [r3]
 800a796:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a798:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a79a:	f023 0310 	bic.w	r3, r3, #16
 800a79e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	330c      	adds	r3, #12
 800a7a8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800a7ac:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a7ae:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7b0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a7b2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a7b4:	e841 2300 	strex	r3, r2, [r1]
 800a7b8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a7ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d1e3      	bne.n	800a788 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f7fc fae0 	bl	8006d8a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a7d2:	b29b      	uxth	r3, r3
 800a7d4:	1ad3      	subs	r3, r2, r3
 800a7d6:	b29b      	uxth	r3, r3
 800a7d8:	4619      	mov	r1, r3
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	f000 f8b6 	bl	800a94c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a7e0:	e099      	b.n	800a916 <HAL_UART_IRQHandler+0x50e>
 800a7e2:	bf00      	nop
 800a7e4:	0800ab83 	.word	0x0800ab83
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a7f0:	b29b      	uxth	r3, r3
 800a7f2:	1ad3      	subs	r3, r2, r3
 800a7f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a7fc:	b29b      	uxth	r3, r3
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	f000 808b 	beq.w	800a91a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a804:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a808:	2b00      	cmp	r3, #0
 800a80a:	f000 8086 	beq.w	800a91a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	330c      	adds	r3, #12
 800a814:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a818:	e853 3f00 	ldrex	r3, [r3]
 800a81c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a81e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a820:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a824:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	330c      	adds	r3, #12
 800a82e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800a832:	647a      	str	r2, [r7, #68]	@ 0x44
 800a834:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a836:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a838:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a83a:	e841 2300 	strex	r3, r2, [r1]
 800a83e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a840:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a842:	2b00      	cmp	r3, #0
 800a844:	d1e3      	bne.n	800a80e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	3314      	adds	r3, #20
 800a84c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a84e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a850:	e853 3f00 	ldrex	r3, [r3]
 800a854:	623b      	str	r3, [r7, #32]
   return(result);
 800a856:	6a3b      	ldr	r3, [r7, #32]
 800a858:	f023 0301 	bic.w	r3, r3, #1
 800a85c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	3314      	adds	r3, #20
 800a866:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a86a:	633a      	str	r2, [r7, #48]	@ 0x30
 800a86c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a86e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a870:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a872:	e841 2300 	strex	r3, r2, [r1]
 800a876:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d1e3      	bne.n	800a846 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2220      	movs	r2, #32
 800a882:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2200      	movs	r2, #0
 800a88a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	330c      	adds	r3, #12
 800a892:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a894:	693b      	ldr	r3, [r7, #16]
 800a896:	e853 3f00 	ldrex	r3, [r3]
 800a89a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	f023 0310 	bic.w	r3, r3, #16
 800a8a2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	330c      	adds	r3, #12
 800a8ac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800a8b0:	61fa      	str	r2, [r7, #28]
 800a8b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8b4:	69b9      	ldr	r1, [r7, #24]
 800a8b6:	69fa      	ldr	r2, [r7, #28]
 800a8b8:	e841 2300 	strex	r3, r2, [r1]
 800a8bc:	617b      	str	r3, [r7, #20]
   return(result);
 800a8be:	697b      	ldr	r3, [r7, #20]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d1e3      	bne.n	800a88c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a8c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a8c8:	4619      	mov	r1, r3
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f000 f83e 	bl	800a94c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a8d0:	e023      	b.n	800a91a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a8d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a8d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d009      	beq.n	800a8f2 <HAL_UART_IRQHandler+0x4ea>
 800a8de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a8e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d003      	beq.n	800a8f2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f000 f95d 	bl	800abaa <UART_Transmit_IT>
    return;
 800a8f0:	e014      	b.n	800a91c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a8f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a8f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d00e      	beq.n	800a91c <HAL_UART_IRQHandler+0x514>
 800a8fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a902:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a906:	2b00      	cmp	r3, #0
 800a908:	d008      	beq.n	800a91c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f000 f99d 	bl	800ac4a <UART_EndTransmit_IT>
    return;
 800a910:	e004      	b.n	800a91c <HAL_UART_IRQHandler+0x514>
    return;
 800a912:	bf00      	nop
 800a914:	e002      	b.n	800a91c <HAL_UART_IRQHandler+0x514>
      return;
 800a916:	bf00      	nop
 800a918:	e000      	b.n	800a91c <HAL_UART_IRQHandler+0x514>
      return;
 800a91a:	bf00      	nop
  }
}
 800a91c:	37e8      	adds	r7, #232	@ 0xe8
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}
 800a922:	bf00      	nop

0800a924 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a924:	b480      	push	{r7}
 800a926:	b083      	sub	sp, #12
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a92c:	bf00      	nop
 800a92e:	370c      	adds	r7, #12
 800a930:	46bd      	mov	sp, r7
 800a932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a936:	4770      	bx	lr

0800a938 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a938:	b480      	push	{r7}
 800a93a:	b083      	sub	sp, #12
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a940:	bf00      	nop
 800a942:	370c      	adds	r7, #12
 800a944:	46bd      	mov	sp, r7
 800a946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94a:	4770      	bx	lr

0800a94c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a94c:	b480      	push	{r7}
 800a94e:	b083      	sub	sp, #12
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
 800a954:	460b      	mov	r3, r1
 800a956:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a958:	bf00      	nop
 800a95a:	370c      	adds	r7, #12
 800a95c:	46bd      	mov	sp, r7
 800a95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a962:	4770      	bx	lr

0800a964 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b090      	sub	sp, #64	@ 0x40
 800a968:	af00      	add	r7, sp, #0
 800a96a:	60f8      	str	r0, [r7, #12]
 800a96c:	60b9      	str	r1, [r7, #8]
 800a96e:	603b      	str	r3, [r7, #0]
 800a970:	4613      	mov	r3, r2
 800a972:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a974:	e050      	b.n	800aa18 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a976:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a97c:	d04c      	beq.n	800aa18 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a97e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a980:	2b00      	cmp	r3, #0
 800a982:	d007      	beq.n	800a994 <UART_WaitOnFlagUntilTimeout+0x30>
 800a984:	f7fb fc34 	bl	80061f0 <HAL_GetTick>
 800a988:	4602      	mov	r2, r0
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	1ad3      	subs	r3, r2, r3
 800a98e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a990:	429a      	cmp	r2, r3
 800a992:	d241      	bcs.n	800aa18 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	330c      	adds	r3, #12
 800a99a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a99c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a99e:	e853 3f00 	ldrex	r3, [r3]
 800a9a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a9a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9a6:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800a9aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	330c      	adds	r3, #12
 800a9b2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a9b4:	637a      	str	r2, [r7, #52]	@ 0x34
 800a9b6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9b8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a9ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a9bc:	e841 2300 	strex	r3, r2, [r1]
 800a9c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a9c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d1e5      	bne.n	800a994 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	3314      	adds	r3, #20
 800a9ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9d0:	697b      	ldr	r3, [r7, #20]
 800a9d2:	e853 3f00 	ldrex	r3, [r3]
 800a9d6:	613b      	str	r3, [r7, #16]
   return(result);
 800a9d8:	693b      	ldr	r3, [r7, #16]
 800a9da:	f023 0301 	bic.w	r3, r3, #1
 800a9de:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	3314      	adds	r3, #20
 800a9e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a9e8:	623a      	str	r2, [r7, #32]
 800a9ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ec:	69f9      	ldr	r1, [r7, #28]
 800a9ee:	6a3a      	ldr	r2, [r7, #32]
 800a9f0:	e841 2300 	strex	r3, r2, [r1]
 800a9f4:	61bb      	str	r3, [r7, #24]
   return(result);
 800a9f6:	69bb      	ldr	r3, [r7, #24]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d1e5      	bne.n	800a9c8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	2220      	movs	r2, #32
 800aa00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	2220      	movs	r2, #32
 800aa08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	2200      	movs	r2, #0
 800aa10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 800aa14:	2303      	movs	r3, #3
 800aa16:	e00f      	b.n	800aa38 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	681a      	ldr	r2, [r3, #0]
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	4013      	ands	r3, r2
 800aa22:	68ba      	ldr	r2, [r7, #8]
 800aa24:	429a      	cmp	r2, r3
 800aa26:	bf0c      	ite	eq
 800aa28:	2301      	moveq	r3, #1
 800aa2a:	2300      	movne	r3, #0
 800aa2c:	b2db      	uxtb	r3, r3
 800aa2e:	461a      	mov	r2, r3
 800aa30:	79fb      	ldrb	r3, [r7, #7]
 800aa32:	429a      	cmp	r2, r3
 800aa34:	d09f      	beq.n	800a976 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800aa36:	2300      	movs	r3, #0
}
 800aa38:	4618      	mov	r0, r3
 800aa3a:	3740      	adds	r7, #64	@ 0x40
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}

0800aa40 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aa40:	b480      	push	{r7}
 800aa42:	b085      	sub	sp, #20
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	60f8      	str	r0, [r7, #12]
 800aa48:	60b9      	str	r1, [r7, #8]
 800aa4a:	4613      	mov	r3, r2
 800aa4c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	68ba      	ldr	r2, [r7, #8]
 800aa52:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	88fa      	ldrh	r2, [r7, #6]
 800aa58:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	88fa      	ldrh	r2, [r7, #6]
 800aa5e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	2200      	movs	r2, #0
 800aa64:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	2222      	movs	r2, #34	@ 0x22
 800aa6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	2200      	movs	r2, #0
 800aa72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	691b      	ldr	r3, [r3, #16]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d007      	beq.n	800aa8e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	68da      	ldr	r2, [r3, #12]
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800aa8c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	695a      	ldr	r2, [r3, #20]
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	f042 0201 	orr.w	r2, r2, #1
 800aa9c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	68da      	ldr	r2, [r3, #12]
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	f042 0220 	orr.w	r2, r2, #32
 800aaac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800aaae:	2300      	movs	r3, #0
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	3714      	adds	r7, #20
 800aab4:	46bd      	mov	sp, r7
 800aab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaba:	4770      	bx	lr

0800aabc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aabc:	b480      	push	{r7}
 800aabe:	b095      	sub	sp, #84	@ 0x54
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	330c      	adds	r3, #12
 800aaca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aacc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aace:	e853 3f00 	ldrex	r3, [r3]
 800aad2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800aad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aad6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aada:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	330c      	adds	r3, #12
 800aae2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800aae4:	643a      	str	r2, [r7, #64]	@ 0x40
 800aae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aae8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800aaea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800aaec:	e841 2300 	strex	r3, r2, [r1]
 800aaf0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800aaf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d1e5      	bne.n	800aac4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	3314      	adds	r3, #20
 800aafe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab00:	6a3b      	ldr	r3, [r7, #32]
 800ab02:	e853 3f00 	ldrex	r3, [r3]
 800ab06:	61fb      	str	r3, [r7, #28]
   return(result);
 800ab08:	69fb      	ldr	r3, [r7, #28]
 800ab0a:	f023 0301 	bic.w	r3, r3, #1
 800ab0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	3314      	adds	r3, #20
 800ab16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ab18:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ab1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ab1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ab20:	e841 2300 	strex	r3, r2, [r1]
 800ab24:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ab26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d1e5      	bne.n	800aaf8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab30:	2b01      	cmp	r3, #1
 800ab32:	d119      	bne.n	800ab68 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	330c      	adds	r3, #12
 800ab3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	e853 3f00 	ldrex	r3, [r3]
 800ab42:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	f023 0310 	bic.w	r3, r3, #16
 800ab4a:	647b      	str	r3, [r7, #68]	@ 0x44
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	330c      	adds	r3, #12
 800ab52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ab54:	61ba      	str	r2, [r7, #24]
 800ab56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab58:	6979      	ldr	r1, [r7, #20]
 800ab5a:	69ba      	ldr	r2, [r7, #24]
 800ab5c:	e841 2300 	strex	r3, r2, [r1]
 800ab60:	613b      	str	r3, [r7, #16]
   return(result);
 800ab62:	693b      	ldr	r3, [r7, #16]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d1e5      	bne.n	800ab34 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2220      	movs	r2, #32
 800ab6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2200      	movs	r2, #0
 800ab74:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800ab76:	bf00      	nop
 800ab78:	3754      	adds	r7, #84	@ 0x54
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab80:	4770      	bx	lr

0800ab82 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ab82:	b580      	push	{r7, lr}
 800ab84:	b084      	sub	sp, #16
 800ab86:	af00      	add	r7, sp, #0
 800ab88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab8e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	2200      	movs	r2, #0
 800ab94:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	2200      	movs	r2, #0
 800ab9a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ab9c:	68f8      	ldr	r0, [r7, #12]
 800ab9e:	f7ff fecb 	bl	800a938 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aba2:	bf00      	nop
 800aba4:	3710      	adds	r7, #16
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}

0800abaa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800abaa:	b480      	push	{r7}
 800abac:	b085      	sub	sp, #20
 800abae:	af00      	add	r7, sp, #0
 800abb0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800abb8:	b2db      	uxtb	r3, r3
 800abba:	2b21      	cmp	r3, #33	@ 0x21
 800abbc:	d13e      	bne.n	800ac3c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	689b      	ldr	r3, [r3, #8]
 800abc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800abc6:	d114      	bne.n	800abf2 <UART_Transmit_IT+0x48>
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	691b      	ldr	r3, [r3, #16]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d110      	bne.n	800abf2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	6a1b      	ldr	r3, [r3, #32]
 800abd4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	881b      	ldrh	r3, [r3, #0]
 800abda:	461a      	mov	r2, r3
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800abe4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6a1b      	ldr	r3, [r3, #32]
 800abea:	1c9a      	adds	r2, r3, #2
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	621a      	str	r2, [r3, #32]
 800abf0:	e008      	b.n	800ac04 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6a1b      	ldr	r3, [r3, #32]
 800abf6:	1c59      	adds	r1, r3, #1
 800abf8:	687a      	ldr	r2, [r7, #4]
 800abfa:	6211      	str	r1, [r2, #32]
 800abfc:	781a      	ldrb	r2, [r3, #0]
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800ac08:	b29b      	uxth	r3, r3
 800ac0a:	3b01      	subs	r3, #1
 800ac0c:	b29b      	uxth	r3, r3
 800ac0e:	687a      	ldr	r2, [r7, #4]
 800ac10:	4619      	mov	r1, r3
 800ac12:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d10f      	bne.n	800ac38 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	68da      	ldr	r2, [r3, #12]
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ac26:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	68da      	ldr	r2, [r3, #12]
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ac36:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ac38:	2300      	movs	r3, #0
 800ac3a:	e000      	b.n	800ac3e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ac3c:	2302      	movs	r3, #2
  }
}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	3714      	adds	r7, #20
 800ac42:	46bd      	mov	sp, r7
 800ac44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac48:	4770      	bx	lr

0800ac4a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ac4a:	b580      	push	{r7, lr}
 800ac4c:	b082      	sub	sp, #8
 800ac4e:	af00      	add	r7, sp, #0
 800ac50:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	68da      	ldr	r2, [r3, #12]
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ac60:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2220      	movs	r2, #32
 800ac66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	f7ff fe5a 	bl	800a924 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ac70:	2300      	movs	r3, #0
}
 800ac72:	4618      	mov	r0, r3
 800ac74:	3708      	adds	r7, #8
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}

0800ac7a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ac7a:	b580      	push	{r7, lr}
 800ac7c:	b08c      	sub	sp, #48	@ 0x30
 800ac7e:	af00      	add	r7, sp, #0
 800ac80:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ac88:	b2db      	uxtb	r3, r3
 800ac8a:	2b22      	cmp	r3, #34	@ 0x22
 800ac8c:	f040 80ab 	bne.w	800ade6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	689b      	ldr	r3, [r3, #8]
 800ac94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ac98:	d117      	bne.n	800acca <UART_Receive_IT+0x50>
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	691b      	ldr	r3, [r3, #16]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d113      	bne.n	800acca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800aca2:	2300      	movs	r3, #0
 800aca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acaa:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	685b      	ldr	r3, [r3, #4]
 800acb2:	b29b      	uxth	r3, r3
 800acb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acb8:	b29a      	uxth	r2, r3
 800acba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acbc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acc2:	1c9a      	adds	r2, r3, #2
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	629a      	str	r2, [r3, #40]	@ 0x28
 800acc8:	e026      	b.n	800ad18 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acce:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800acd0:	2300      	movs	r3, #0
 800acd2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	689b      	ldr	r3, [r3, #8]
 800acd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800acdc:	d007      	beq.n	800acee <UART_Receive_IT+0x74>
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	689b      	ldr	r3, [r3, #8]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d10a      	bne.n	800acfc <UART_Receive_IT+0x82>
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	691b      	ldr	r3, [r3, #16]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d106      	bne.n	800acfc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	685b      	ldr	r3, [r3, #4]
 800acf4:	b2da      	uxtb	r2, r3
 800acf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acf8:	701a      	strb	r2, [r3, #0]
 800acfa:	e008      	b.n	800ad0e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	685b      	ldr	r3, [r3, #4]
 800ad02:	b2db      	uxtb	r3, r3
 800ad04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad08:	b2da      	uxtb	r2, r3
 800ad0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad0c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad12:	1c5a      	adds	r2, r3, #1
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800ad1c:	b29b      	uxth	r3, r3
 800ad1e:	3b01      	subs	r3, #1
 800ad20:	b29b      	uxth	r3, r3
 800ad22:	687a      	ldr	r2, [r7, #4]
 800ad24:	4619      	mov	r1, r3
 800ad26:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d15a      	bne.n	800ade2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	68da      	ldr	r2, [r3, #12]
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	f022 0220 	bic.w	r2, r2, #32
 800ad3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	68da      	ldr	r2, [r3, #12]
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ad4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	695a      	ldr	r2, [r3, #20]
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	f022 0201 	bic.w	r2, r2, #1
 800ad5a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2220      	movs	r2, #32
 800ad60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad68:	2b01      	cmp	r3, #1
 800ad6a:	d135      	bne.n	800add8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	330c      	adds	r3, #12
 800ad78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad7a:	697b      	ldr	r3, [r7, #20]
 800ad7c:	e853 3f00 	ldrex	r3, [r3]
 800ad80:	613b      	str	r3, [r7, #16]
   return(result);
 800ad82:	693b      	ldr	r3, [r7, #16]
 800ad84:	f023 0310 	bic.w	r3, r3, #16
 800ad88:	627b      	str	r3, [r7, #36]	@ 0x24
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	330c      	adds	r3, #12
 800ad90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad92:	623a      	str	r2, [r7, #32]
 800ad94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad96:	69f9      	ldr	r1, [r7, #28]
 800ad98:	6a3a      	ldr	r2, [r7, #32]
 800ad9a:	e841 2300 	strex	r3, r2, [r1]
 800ad9e:	61bb      	str	r3, [r7, #24]
   return(result);
 800ada0:	69bb      	ldr	r3, [r7, #24]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d1e5      	bne.n	800ad72 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f003 0310 	and.w	r3, r3, #16
 800adb0:	2b10      	cmp	r3, #16
 800adb2:	d10a      	bne.n	800adca <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800adb4:	2300      	movs	r3, #0
 800adb6:	60fb      	str	r3, [r7, #12]
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	60fb      	str	r3, [r7, #12]
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	685b      	ldr	r3, [r3, #4]
 800adc6:	60fb      	str	r3, [r7, #12]
 800adc8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800adce:	4619      	mov	r1, r3
 800add0:	6878      	ldr	r0, [r7, #4]
 800add2:	f7ff fdbb 	bl	800a94c <HAL_UARTEx_RxEventCallback>
 800add6:	e002      	b.n	800adde <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800add8:	6878      	ldr	r0, [r7, #4]
 800adda:	f7f8 fc5b 	bl	8003694 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800adde:	2300      	movs	r3, #0
 800ade0:	e002      	b.n	800ade8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800ade2:	2300      	movs	r3, #0
 800ade4:	e000      	b.n	800ade8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800ade6:	2302      	movs	r3, #2
  }
}
 800ade8:	4618      	mov	r0, r3
 800adea:	3730      	adds	r7, #48	@ 0x30
 800adec:	46bd      	mov	sp, r7
 800adee:	bd80      	pop	{r7, pc}

0800adf0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800adf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800adf4:	b0c0      	sub	sp, #256	@ 0x100
 800adf6:	af00      	add	r7, sp, #0
 800adf8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800adfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	691b      	ldr	r3, [r3, #16]
 800ae04:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800ae08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae0c:	68d9      	ldr	r1, [r3, #12]
 800ae0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae12:	681a      	ldr	r2, [r3, #0]
 800ae14:	ea40 0301 	orr.w	r3, r0, r1
 800ae18:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ae1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae1e:	689a      	ldr	r2, [r3, #8]
 800ae20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae24:	691b      	ldr	r3, [r3, #16]
 800ae26:	431a      	orrs	r2, r3
 800ae28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae2c:	695b      	ldr	r3, [r3, #20]
 800ae2e:	431a      	orrs	r2, r3
 800ae30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae34:	69db      	ldr	r3, [r3, #28]
 800ae36:	4313      	orrs	r3, r2
 800ae38:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ae3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	68db      	ldr	r3, [r3, #12]
 800ae44:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800ae48:	f021 010c 	bic.w	r1, r1, #12
 800ae4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae50:	681a      	ldr	r2, [r3, #0]
 800ae52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800ae56:	430b      	orrs	r3, r1
 800ae58:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ae5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	695b      	ldr	r3, [r3, #20]
 800ae62:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800ae66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae6a:	6999      	ldr	r1, [r3, #24]
 800ae6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae70:	681a      	ldr	r2, [r3, #0]
 800ae72:	ea40 0301 	orr.w	r3, r0, r1
 800ae76:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ae78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae7c:	681a      	ldr	r2, [r3, #0]
 800ae7e:	4b8f      	ldr	r3, [pc, #572]	@ (800b0bc <UART_SetConfig+0x2cc>)
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d005      	beq.n	800ae90 <UART_SetConfig+0xa0>
 800ae84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae88:	681a      	ldr	r2, [r3, #0]
 800ae8a:	4b8d      	ldr	r3, [pc, #564]	@ (800b0c0 <UART_SetConfig+0x2d0>)
 800ae8c:	429a      	cmp	r2, r3
 800ae8e:	d104      	bne.n	800ae9a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ae90:	f7fd ff28 	bl	8008ce4 <HAL_RCC_GetPCLK2Freq>
 800ae94:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800ae98:	e003      	b.n	800aea2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ae9a:	f7fd ff0f 	bl	8008cbc <HAL_RCC_GetPCLK1Freq>
 800ae9e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aea6:	69db      	ldr	r3, [r3, #28]
 800aea8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aeac:	f040 810c 	bne.w	800b0c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800aeb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800aeba:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800aebe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800aec2:	4622      	mov	r2, r4
 800aec4:	462b      	mov	r3, r5
 800aec6:	1891      	adds	r1, r2, r2
 800aec8:	65b9      	str	r1, [r7, #88]	@ 0x58
 800aeca:	415b      	adcs	r3, r3
 800aecc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800aece:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800aed2:	4621      	mov	r1, r4
 800aed4:	eb12 0801 	adds.w	r8, r2, r1
 800aed8:	4629      	mov	r1, r5
 800aeda:	eb43 0901 	adc.w	r9, r3, r1
 800aede:	f04f 0200 	mov.w	r2, #0
 800aee2:	f04f 0300 	mov.w	r3, #0
 800aee6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800aeea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800aeee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800aef2:	4690      	mov	r8, r2
 800aef4:	4699      	mov	r9, r3
 800aef6:	4623      	mov	r3, r4
 800aef8:	eb18 0303 	adds.w	r3, r8, r3
 800aefc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800af00:	462b      	mov	r3, r5
 800af02:	eb49 0303 	adc.w	r3, r9, r3
 800af06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800af0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af0e:	685b      	ldr	r3, [r3, #4]
 800af10:	2200      	movs	r2, #0
 800af12:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800af16:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800af1a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800af1e:	460b      	mov	r3, r1
 800af20:	18db      	adds	r3, r3, r3
 800af22:	653b      	str	r3, [r7, #80]	@ 0x50
 800af24:	4613      	mov	r3, r2
 800af26:	eb42 0303 	adc.w	r3, r2, r3
 800af2a:	657b      	str	r3, [r7, #84]	@ 0x54
 800af2c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800af30:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800af34:	f7f5 ff10 	bl	8000d58 <__aeabi_uldivmod>
 800af38:	4602      	mov	r2, r0
 800af3a:	460b      	mov	r3, r1
 800af3c:	4b61      	ldr	r3, [pc, #388]	@ (800b0c4 <UART_SetConfig+0x2d4>)
 800af3e:	fba3 2302 	umull	r2, r3, r3, r2
 800af42:	095b      	lsrs	r3, r3, #5
 800af44:	011c      	lsls	r4, r3, #4
 800af46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800af4a:	2200      	movs	r2, #0
 800af4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800af50:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800af54:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800af58:	4642      	mov	r2, r8
 800af5a:	464b      	mov	r3, r9
 800af5c:	1891      	adds	r1, r2, r2
 800af5e:	64b9      	str	r1, [r7, #72]	@ 0x48
 800af60:	415b      	adcs	r3, r3
 800af62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800af64:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800af68:	4641      	mov	r1, r8
 800af6a:	eb12 0a01 	adds.w	sl, r2, r1
 800af6e:	4649      	mov	r1, r9
 800af70:	eb43 0b01 	adc.w	fp, r3, r1
 800af74:	f04f 0200 	mov.w	r2, #0
 800af78:	f04f 0300 	mov.w	r3, #0
 800af7c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800af80:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800af84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800af88:	4692      	mov	sl, r2
 800af8a:	469b      	mov	fp, r3
 800af8c:	4643      	mov	r3, r8
 800af8e:	eb1a 0303 	adds.w	r3, sl, r3
 800af92:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800af96:	464b      	mov	r3, r9
 800af98:	eb4b 0303 	adc.w	r3, fp, r3
 800af9c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800afa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800afa4:	685b      	ldr	r3, [r3, #4]
 800afa6:	2200      	movs	r2, #0
 800afa8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800afac:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800afb0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800afb4:	460b      	mov	r3, r1
 800afb6:	18db      	adds	r3, r3, r3
 800afb8:	643b      	str	r3, [r7, #64]	@ 0x40
 800afba:	4613      	mov	r3, r2
 800afbc:	eb42 0303 	adc.w	r3, r2, r3
 800afc0:	647b      	str	r3, [r7, #68]	@ 0x44
 800afc2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800afc6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800afca:	f7f5 fec5 	bl	8000d58 <__aeabi_uldivmod>
 800afce:	4602      	mov	r2, r0
 800afd0:	460b      	mov	r3, r1
 800afd2:	4611      	mov	r1, r2
 800afd4:	4b3b      	ldr	r3, [pc, #236]	@ (800b0c4 <UART_SetConfig+0x2d4>)
 800afd6:	fba3 2301 	umull	r2, r3, r3, r1
 800afda:	095b      	lsrs	r3, r3, #5
 800afdc:	2264      	movs	r2, #100	@ 0x64
 800afde:	fb02 f303 	mul.w	r3, r2, r3
 800afe2:	1acb      	subs	r3, r1, r3
 800afe4:	00db      	lsls	r3, r3, #3
 800afe6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800afea:	4b36      	ldr	r3, [pc, #216]	@ (800b0c4 <UART_SetConfig+0x2d4>)
 800afec:	fba3 2302 	umull	r2, r3, r3, r2
 800aff0:	095b      	lsrs	r3, r3, #5
 800aff2:	005b      	lsls	r3, r3, #1
 800aff4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800aff8:	441c      	add	r4, r3
 800affa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800affe:	2200      	movs	r2, #0
 800b000:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b004:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800b008:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800b00c:	4642      	mov	r2, r8
 800b00e:	464b      	mov	r3, r9
 800b010:	1891      	adds	r1, r2, r2
 800b012:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b014:	415b      	adcs	r3, r3
 800b016:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b018:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800b01c:	4641      	mov	r1, r8
 800b01e:	1851      	adds	r1, r2, r1
 800b020:	6339      	str	r1, [r7, #48]	@ 0x30
 800b022:	4649      	mov	r1, r9
 800b024:	414b      	adcs	r3, r1
 800b026:	637b      	str	r3, [r7, #52]	@ 0x34
 800b028:	f04f 0200 	mov.w	r2, #0
 800b02c:	f04f 0300 	mov.w	r3, #0
 800b030:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800b034:	4659      	mov	r1, fp
 800b036:	00cb      	lsls	r3, r1, #3
 800b038:	4651      	mov	r1, sl
 800b03a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b03e:	4651      	mov	r1, sl
 800b040:	00ca      	lsls	r2, r1, #3
 800b042:	4610      	mov	r0, r2
 800b044:	4619      	mov	r1, r3
 800b046:	4603      	mov	r3, r0
 800b048:	4642      	mov	r2, r8
 800b04a:	189b      	adds	r3, r3, r2
 800b04c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b050:	464b      	mov	r3, r9
 800b052:	460a      	mov	r2, r1
 800b054:	eb42 0303 	adc.w	r3, r2, r3
 800b058:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b05c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b060:	685b      	ldr	r3, [r3, #4]
 800b062:	2200      	movs	r2, #0
 800b064:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b068:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800b06c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b070:	460b      	mov	r3, r1
 800b072:	18db      	adds	r3, r3, r3
 800b074:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b076:	4613      	mov	r3, r2
 800b078:	eb42 0303 	adc.w	r3, r2, r3
 800b07c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b07e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800b082:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800b086:	f7f5 fe67 	bl	8000d58 <__aeabi_uldivmod>
 800b08a:	4602      	mov	r2, r0
 800b08c:	460b      	mov	r3, r1
 800b08e:	4b0d      	ldr	r3, [pc, #52]	@ (800b0c4 <UART_SetConfig+0x2d4>)
 800b090:	fba3 1302 	umull	r1, r3, r3, r2
 800b094:	095b      	lsrs	r3, r3, #5
 800b096:	2164      	movs	r1, #100	@ 0x64
 800b098:	fb01 f303 	mul.w	r3, r1, r3
 800b09c:	1ad3      	subs	r3, r2, r3
 800b09e:	00db      	lsls	r3, r3, #3
 800b0a0:	3332      	adds	r3, #50	@ 0x32
 800b0a2:	4a08      	ldr	r2, [pc, #32]	@ (800b0c4 <UART_SetConfig+0x2d4>)
 800b0a4:	fba2 2303 	umull	r2, r3, r2, r3
 800b0a8:	095b      	lsrs	r3, r3, #5
 800b0aa:	f003 0207 	and.w	r2, r3, #7
 800b0ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	4422      	add	r2, r4
 800b0b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b0b8:	e106      	b.n	800b2c8 <UART_SetConfig+0x4d8>
 800b0ba:	bf00      	nop
 800b0bc:	40011000 	.word	0x40011000
 800b0c0:	40011400 	.word	0x40011400
 800b0c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b0c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b0d2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800b0d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800b0da:	4642      	mov	r2, r8
 800b0dc:	464b      	mov	r3, r9
 800b0de:	1891      	adds	r1, r2, r2
 800b0e0:	6239      	str	r1, [r7, #32]
 800b0e2:	415b      	adcs	r3, r3
 800b0e4:	627b      	str	r3, [r7, #36]	@ 0x24
 800b0e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b0ea:	4641      	mov	r1, r8
 800b0ec:	1854      	adds	r4, r2, r1
 800b0ee:	4649      	mov	r1, r9
 800b0f0:	eb43 0501 	adc.w	r5, r3, r1
 800b0f4:	f04f 0200 	mov.w	r2, #0
 800b0f8:	f04f 0300 	mov.w	r3, #0
 800b0fc:	00eb      	lsls	r3, r5, #3
 800b0fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b102:	00e2      	lsls	r2, r4, #3
 800b104:	4614      	mov	r4, r2
 800b106:	461d      	mov	r5, r3
 800b108:	4643      	mov	r3, r8
 800b10a:	18e3      	adds	r3, r4, r3
 800b10c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b110:	464b      	mov	r3, r9
 800b112:	eb45 0303 	adc.w	r3, r5, r3
 800b116:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b11a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b11e:	685b      	ldr	r3, [r3, #4]
 800b120:	2200      	movs	r2, #0
 800b122:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b126:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b12a:	f04f 0200 	mov.w	r2, #0
 800b12e:	f04f 0300 	mov.w	r3, #0
 800b132:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800b136:	4629      	mov	r1, r5
 800b138:	008b      	lsls	r3, r1, #2
 800b13a:	4621      	mov	r1, r4
 800b13c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b140:	4621      	mov	r1, r4
 800b142:	008a      	lsls	r2, r1, #2
 800b144:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800b148:	f7f5 fe06 	bl	8000d58 <__aeabi_uldivmod>
 800b14c:	4602      	mov	r2, r0
 800b14e:	460b      	mov	r3, r1
 800b150:	4b60      	ldr	r3, [pc, #384]	@ (800b2d4 <UART_SetConfig+0x4e4>)
 800b152:	fba3 2302 	umull	r2, r3, r3, r2
 800b156:	095b      	lsrs	r3, r3, #5
 800b158:	011c      	lsls	r4, r3, #4
 800b15a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b15e:	2200      	movs	r2, #0
 800b160:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b164:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800b168:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800b16c:	4642      	mov	r2, r8
 800b16e:	464b      	mov	r3, r9
 800b170:	1891      	adds	r1, r2, r2
 800b172:	61b9      	str	r1, [r7, #24]
 800b174:	415b      	adcs	r3, r3
 800b176:	61fb      	str	r3, [r7, #28]
 800b178:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b17c:	4641      	mov	r1, r8
 800b17e:	1851      	adds	r1, r2, r1
 800b180:	6139      	str	r1, [r7, #16]
 800b182:	4649      	mov	r1, r9
 800b184:	414b      	adcs	r3, r1
 800b186:	617b      	str	r3, [r7, #20]
 800b188:	f04f 0200 	mov.w	r2, #0
 800b18c:	f04f 0300 	mov.w	r3, #0
 800b190:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b194:	4659      	mov	r1, fp
 800b196:	00cb      	lsls	r3, r1, #3
 800b198:	4651      	mov	r1, sl
 800b19a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b19e:	4651      	mov	r1, sl
 800b1a0:	00ca      	lsls	r2, r1, #3
 800b1a2:	4610      	mov	r0, r2
 800b1a4:	4619      	mov	r1, r3
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	4642      	mov	r2, r8
 800b1aa:	189b      	adds	r3, r3, r2
 800b1ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b1b0:	464b      	mov	r3, r9
 800b1b2:	460a      	mov	r2, r1
 800b1b4:	eb42 0303 	adc.w	r3, r2, r3
 800b1b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b1bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b1c0:	685b      	ldr	r3, [r3, #4]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b1c6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800b1c8:	f04f 0200 	mov.w	r2, #0
 800b1cc:	f04f 0300 	mov.w	r3, #0
 800b1d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800b1d4:	4649      	mov	r1, r9
 800b1d6:	008b      	lsls	r3, r1, #2
 800b1d8:	4641      	mov	r1, r8
 800b1da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b1de:	4641      	mov	r1, r8
 800b1e0:	008a      	lsls	r2, r1, #2
 800b1e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800b1e6:	f7f5 fdb7 	bl	8000d58 <__aeabi_uldivmod>
 800b1ea:	4602      	mov	r2, r0
 800b1ec:	460b      	mov	r3, r1
 800b1ee:	4611      	mov	r1, r2
 800b1f0:	4b38      	ldr	r3, [pc, #224]	@ (800b2d4 <UART_SetConfig+0x4e4>)
 800b1f2:	fba3 2301 	umull	r2, r3, r3, r1
 800b1f6:	095b      	lsrs	r3, r3, #5
 800b1f8:	2264      	movs	r2, #100	@ 0x64
 800b1fa:	fb02 f303 	mul.w	r3, r2, r3
 800b1fe:	1acb      	subs	r3, r1, r3
 800b200:	011b      	lsls	r3, r3, #4
 800b202:	3332      	adds	r3, #50	@ 0x32
 800b204:	4a33      	ldr	r2, [pc, #204]	@ (800b2d4 <UART_SetConfig+0x4e4>)
 800b206:	fba2 2303 	umull	r2, r3, r2, r3
 800b20a:	095b      	lsrs	r3, r3, #5
 800b20c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b210:	441c      	add	r4, r3
 800b212:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b216:	2200      	movs	r2, #0
 800b218:	673b      	str	r3, [r7, #112]	@ 0x70
 800b21a:	677a      	str	r2, [r7, #116]	@ 0x74
 800b21c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800b220:	4642      	mov	r2, r8
 800b222:	464b      	mov	r3, r9
 800b224:	1891      	adds	r1, r2, r2
 800b226:	60b9      	str	r1, [r7, #8]
 800b228:	415b      	adcs	r3, r3
 800b22a:	60fb      	str	r3, [r7, #12]
 800b22c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b230:	4641      	mov	r1, r8
 800b232:	1851      	adds	r1, r2, r1
 800b234:	6039      	str	r1, [r7, #0]
 800b236:	4649      	mov	r1, r9
 800b238:	414b      	adcs	r3, r1
 800b23a:	607b      	str	r3, [r7, #4]
 800b23c:	f04f 0200 	mov.w	r2, #0
 800b240:	f04f 0300 	mov.w	r3, #0
 800b244:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b248:	4659      	mov	r1, fp
 800b24a:	00cb      	lsls	r3, r1, #3
 800b24c:	4651      	mov	r1, sl
 800b24e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b252:	4651      	mov	r1, sl
 800b254:	00ca      	lsls	r2, r1, #3
 800b256:	4610      	mov	r0, r2
 800b258:	4619      	mov	r1, r3
 800b25a:	4603      	mov	r3, r0
 800b25c:	4642      	mov	r2, r8
 800b25e:	189b      	adds	r3, r3, r2
 800b260:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b262:	464b      	mov	r3, r9
 800b264:	460a      	mov	r2, r1
 800b266:	eb42 0303 	adc.w	r3, r2, r3
 800b26a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b26c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b270:	685b      	ldr	r3, [r3, #4]
 800b272:	2200      	movs	r2, #0
 800b274:	663b      	str	r3, [r7, #96]	@ 0x60
 800b276:	667a      	str	r2, [r7, #100]	@ 0x64
 800b278:	f04f 0200 	mov.w	r2, #0
 800b27c:	f04f 0300 	mov.w	r3, #0
 800b280:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800b284:	4649      	mov	r1, r9
 800b286:	008b      	lsls	r3, r1, #2
 800b288:	4641      	mov	r1, r8
 800b28a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b28e:	4641      	mov	r1, r8
 800b290:	008a      	lsls	r2, r1, #2
 800b292:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800b296:	f7f5 fd5f 	bl	8000d58 <__aeabi_uldivmod>
 800b29a:	4602      	mov	r2, r0
 800b29c:	460b      	mov	r3, r1
 800b29e:	4b0d      	ldr	r3, [pc, #52]	@ (800b2d4 <UART_SetConfig+0x4e4>)
 800b2a0:	fba3 1302 	umull	r1, r3, r3, r2
 800b2a4:	095b      	lsrs	r3, r3, #5
 800b2a6:	2164      	movs	r1, #100	@ 0x64
 800b2a8:	fb01 f303 	mul.w	r3, r1, r3
 800b2ac:	1ad3      	subs	r3, r2, r3
 800b2ae:	011b      	lsls	r3, r3, #4
 800b2b0:	3332      	adds	r3, #50	@ 0x32
 800b2b2:	4a08      	ldr	r2, [pc, #32]	@ (800b2d4 <UART_SetConfig+0x4e4>)
 800b2b4:	fba2 2303 	umull	r2, r3, r2, r3
 800b2b8:	095b      	lsrs	r3, r3, #5
 800b2ba:	f003 020f 	and.w	r2, r3, #15
 800b2be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	4422      	add	r2, r4
 800b2c6:	609a      	str	r2, [r3, #8]
}
 800b2c8:	bf00      	nop
 800b2ca:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b2d4:	51eb851f 	.word	0x51eb851f

0800b2d8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800b2dc:	4904      	ldr	r1, [pc, #16]	@ (800b2f0 <MX_FATFS_Init+0x18>)
 800b2de:	4805      	ldr	r0, [pc, #20]	@ (800b2f4 <MX_FATFS_Init+0x1c>)
 800b2e0:	f000 f8b0 	bl	800b444 <FATFS_LinkDriver>
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	461a      	mov	r2, r3
 800b2e8:	4b03      	ldr	r3, [pc, #12]	@ (800b2f8 <MX_FATFS_Init+0x20>)
 800b2ea:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b2ec:	bf00      	nop
 800b2ee:	bd80      	pop	{r7, pc}
 800b2f0:	20002678 	.word	0x20002678
 800b2f4:	20000010 	.word	0x20000010
 800b2f8:	20002674 	.word	0x20002674

0800b2fc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800b2fc:	b480      	push	{r7}
 800b2fe:	b083      	sub	sp, #12
 800b300:	af00      	add	r7, sp, #0
 800b302:	4603      	mov	r3, r0
 800b304:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800b306:	4b06      	ldr	r3, [pc, #24]	@ (800b320 <USER_initialize+0x24>)
 800b308:	2201      	movs	r2, #1
 800b30a:	701a      	strb	r2, [r3, #0]
    return Stat;
 800b30c:	4b04      	ldr	r3, [pc, #16]	@ (800b320 <USER_initialize+0x24>)
 800b30e:	781b      	ldrb	r3, [r3, #0]
 800b310:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800b312:	4618      	mov	r0, r3
 800b314:	370c      	adds	r7, #12
 800b316:	46bd      	mov	sp, r7
 800b318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31c:	4770      	bx	lr
 800b31e:	bf00      	nop
 800b320:	2000000d 	.word	0x2000000d

0800b324 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800b324:	b480      	push	{r7}
 800b326:	b083      	sub	sp, #12
 800b328:	af00      	add	r7, sp, #0
 800b32a:	4603      	mov	r3, r0
 800b32c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800b32e:	4b06      	ldr	r3, [pc, #24]	@ (800b348 <USER_status+0x24>)
 800b330:	2201      	movs	r2, #1
 800b332:	701a      	strb	r2, [r3, #0]
    return Stat;
 800b334:	4b04      	ldr	r3, [pc, #16]	@ (800b348 <USER_status+0x24>)
 800b336:	781b      	ldrb	r3, [r3, #0]
 800b338:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	370c      	adds	r7, #12
 800b33e:	46bd      	mov	sp, r7
 800b340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b344:	4770      	bx	lr
 800b346:	bf00      	nop
 800b348:	2000000d 	.word	0x2000000d

0800b34c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800b34c:	b480      	push	{r7}
 800b34e:	b085      	sub	sp, #20
 800b350:	af00      	add	r7, sp, #0
 800b352:	60b9      	str	r1, [r7, #8]
 800b354:	607a      	str	r2, [r7, #4]
 800b356:	603b      	str	r3, [r7, #0]
 800b358:	4603      	mov	r3, r0
 800b35a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800b35c:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800b35e:	4618      	mov	r0, r3
 800b360:	3714      	adds	r7, #20
 800b362:	46bd      	mov	sp, r7
 800b364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b368:	4770      	bx	lr

0800b36a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800b36a:	b480      	push	{r7}
 800b36c:	b085      	sub	sp, #20
 800b36e:	af00      	add	r7, sp, #0
 800b370:	60b9      	str	r1, [r7, #8]
 800b372:	607a      	str	r2, [r7, #4]
 800b374:	603b      	str	r3, [r7, #0]
 800b376:	4603      	mov	r3, r0
 800b378:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800b37a:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800b37c:	4618      	mov	r0, r3
 800b37e:	3714      	adds	r7, #20
 800b380:	46bd      	mov	sp, r7
 800b382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b386:	4770      	bx	lr

0800b388 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800b388:	b480      	push	{r7}
 800b38a:	b085      	sub	sp, #20
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	4603      	mov	r3, r0
 800b390:	603a      	str	r2, [r7, #0]
 800b392:	71fb      	strb	r3, [r7, #7]
 800b394:	460b      	mov	r3, r1
 800b396:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800b398:	2301      	movs	r3, #1
 800b39a:	73fb      	strb	r3, [r7, #15]
    return res;
 800b39c:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	3714      	adds	r7, #20
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a8:	4770      	bx	lr
	...

0800b3ac <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	b087      	sub	sp, #28
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	60f8      	str	r0, [r7, #12]
 800b3b4:	60b9      	str	r1, [r7, #8]
 800b3b6:	4613      	mov	r3, r2
 800b3b8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b3ba:	2301      	movs	r3, #1
 800b3bc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b3be:	2300      	movs	r3, #0
 800b3c0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b3c2:	4b1f      	ldr	r3, [pc, #124]	@ (800b440 <FATFS_LinkDriverEx+0x94>)
 800b3c4:	7a5b      	ldrb	r3, [r3, #9]
 800b3c6:	b2db      	uxtb	r3, r3
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d131      	bne.n	800b430 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b3cc:	4b1c      	ldr	r3, [pc, #112]	@ (800b440 <FATFS_LinkDriverEx+0x94>)
 800b3ce:	7a5b      	ldrb	r3, [r3, #9]
 800b3d0:	b2db      	uxtb	r3, r3
 800b3d2:	461a      	mov	r2, r3
 800b3d4:	4b1a      	ldr	r3, [pc, #104]	@ (800b440 <FATFS_LinkDriverEx+0x94>)
 800b3d6:	2100      	movs	r1, #0
 800b3d8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b3da:	4b19      	ldr	r3, [pc, #100]	@ (800b440 <FATFS_LinkDriverEx+0x94>)
 800b3dc:	7a5b      	ldrb	r3, [r3, #9]
 800b3de:	b2db      	uxtb	r3, r3
 800b3e0:	4a17      	ldr	r2, [pc, #92]	@ (800b440 <FATFS_LinkDriverEx+0x94>)
 800b3e2:	009b      	lsls	r3, r3, #2
 800b3e4:	4413      	add	r3, r2
 800b3e6:	68fa      	ldr	r2, [r7, #12]
 800b3e8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b3ea:	4b15      	ldr	r3, [pc, #84]	@ (800b440 <FATFS_LinkDriverEx+0x94>)
 800b3ec:	7a5b      	ldrb	r3, [r3, #9]
 800b3ee:	b2db      	uxtb	r3, r3
 800b3f0:	461a      	mov	r2, r3
 800b3f2:	4b13      	ldr	r3, [pc, #76]	@ (800b440 <FATFS_LinkDriverEx+0x94>)
 800b3f4:	4413      	add	r3, r2
 800b3f6:	79fa      	ldrb	r2, [r7, #7]
 800b3f8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b3fa:	4b11      	ldr	r3, [pc, #68]	@ (800b440 <FATFS_LinkDriverEx+0x94>)
 800b3fc:	7a5b      	ldrb	r3, [r3, #9]
 800b3fe:	b2db      	uxtb	r3, r3
 800b400:	1c5a      	adds	r2, r3, #1
 800b402:	b2d1      	uxtb	r1, r2
 800b404:	4a0e      	ldr	r2, [pc, #56]	@ (800b440 <FATFS_LinkDriverEx+0x94>)
 800b406:	7251      	strb	r1, [r2, #9]
 800b408:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b40a:	7dbb      	ldrb	r3, [r7, #22]
 800b40c:	3330      	adds	r3, #48	@ 0x30
 800b40e:	b2da      	uxtb	r2, r3
 800b410:	68bb      	ldr	r3, [r7, #8]
 800b412:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	3301      	adds	r3, #1
 800b418:	223a      	movs	r2, #58	@ 0x3a
 800b41a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b41c:	68bb      	ldr	r3, [r7, #8]
 800b41e:	3302      	adds	r3, #2
 800b420:	222f      	movs	r2, #47	@ 0x2f
 800b422:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b424:	68bb      	ldr	r3, [r7, #8]
 800b426:	3303      	adds	r3, #3
 800b428:	2200      	movs	r2, #0
 800b42a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b42c:	2300      	movs	r3, #0
 800b42e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b430:	7dfb      	ldrb	r3, [r7, #23]
}
 800b432:	4618      	mov	r0, r3
 800b434:	371c      	adds	r7, #28
 800b436:	46bd      	mov	sp, r7
 800b438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43c:	4770      	bx	lr
 800b43e:	bf00      	nop
 800b440:	2000267c 	.word	0x2000267c

0800b444 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b082      	sub	sp, #8
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
 800b44c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b44e:	2200      	movs	r2, #0
 800b450:	6839      	ldr	r1, [r7, #0]
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	f7ff ffaa 	bl	800b3ac <FATFS_LinkDriverEx>
 800b458:	4603      	mov	r3, r0
}
 800b45a:	4618      	mov	r0, r3
 800b45c:	3708      	adds	r7, #8
 800b45e:	46bd      	mov	sp, r7
 800b460:	bd80      	pop	{r7, pc}
	...

0800b464 <malloc>:
 800b464:	4b02      	ldr	r3, [pc, #8]	@ (800b470 <malloc+0xc>)
 800b466:	4601      	mov	r1, r0
 800b468:	6818      	ldr	r0, [r3, #0]
 800b46a:	f000 b82d 	b.w	800b4c8 <_malloc_r>
 800b46e:	bf00      	nop
 800b470:	2000019c 	.word	0x2000019c

0800b474 <free>:
 800b474:	4b02      	ldr	r3, [pc, #8]	@ (800b480 <free+0xc>)
 800b476:	4601      	mov	r1, r0
 800b478:	6818      	ldr	r0, [r3, #0]
 800b47a:	f001 b87d 	b.w	800c578 <_free_r>
 800b47e:	bf00      	nop
 800b480:	2000019c 	.word	0x2000019c

0800b484 <sbrk_aligned>:
 800b484:	b570      	push	{r4, r5, r6, lr}
 800b486:	4e0f      	ldr	r6, [pc, #60]	@ (800b4c4 <sbrk_aligned+0x40>)
 800b488:	460c      	mov	r4, r1
 800b48a:	6831      	ldr	r1, [r6, #0]
 800b48c:	4605      	mov	r5, r0
 800b48e:	b911      	cbnz	r1, 800b496 <sbrk_aligned+0x12>
 800b490:	f001 f80a 	bl	800c4a8 <_sbrk_r>
 800b494:	6030      	str	r0, [r6, #0]
 800b496:	4621      	mov	r1, r4
 800b498:	4628      	mov	r0, r5
 800b49a:	f001 f805 	bl	800c4a8 <_sbrk_r>
 800b49e:	1c43      	adds	r3, r0, #1
 800b4a0:	d103      	bne.n	800b4aa <sbrk_aligned+0x26>
 800b4a2:	f04f 34ff 	mov.w	r4, #4294967295
 800b4a6:	4620      	mov	r0, r4
 800b4a8:	bd70      	pop	{r4, r5, r6, pc}
 800b4aa:	1cc4      	adds	r4, r0, #3
 800b4ac:	f024 0403 	bic.w	r4, r4, #3
 800b4b0:	42a0      	cmp	r0, r4
 800b4b2:	d0f8      	beq.n	800b4a6 <sbrk_aligned+0x22>
 800b4b4:	1a21      	subs	r1, r4, r0
 800b4b6:	4628      	mov	r0, r5
 800b4b8:	f000 fff6 	bl	800c4a8 <_sbrk_r>
 800b4bc:	3001      	adds	r0, #1
 800b4be:	d1f2      	bne.n	800b4a6 <sbrk_aligned+0x22>
 800b4c0:	e7ef      	b.n	800b4a2 <sbrk_aligned+0x1e>
 800b4c2:	bf00      	nop
 800b4c4:	20002688 	.word	0x20002688

0800b4c8 <_malloc_r>:
 800b4c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4cc:	1ccd      	adds	r5, r1, #3
 800b4ce:	f025 0503 	bic.w	r5, r5, #3
 800b4d2:	3508      	adds	r5, #8
 800b4d4:	2d0c      	cmp	r5, #12
 800b4d6:	bf38      	it	cc
 800b4d8:	250c      	movcc	r5, #12
 800b4da:	2d00      	cmp	r5, #0
 800b4dc:	4606      	mov	r6, r0
 800b4de:	db01      	blt.n	800b4e4 <_malloc_r+0x1c>
 800b4e0:	42a9      	cmp	r1, r5
 800b4e2:	d904      	bls.n	800b4ee <_malloc_r+0x26>
 800b4e4:	230c      	movs	r3, #12
 800b4e6:	6033      	str	r3, [r6, #0]
 800b4e8:	2000      	movs	r0, #0
 800b4ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b5c4 <_malloc_r+0xfc>
 800b4f2:	f000 f869 	bl	800b5c8 <__malloc_lock>
 800b4f6:	f8d8 3000 	ldr.w	r3, [r8]
 800b4fa:	461c      	mov	r4, r3
 800b4fc:	bb44      	cbnz	r4, 800b550 <_malloc_r+0x88>
 800b4fe:	4629      	mov	r1, r5
 800b500:	4630      	mov	r0, r6
 800b502:	f7ff ffbf 	bl	800b484 <sbrk_aligned>
 800b506:	1c43      	adds	r3, r0, #1
 800b508:	4604      	mov	r4, r0
 800b50a:	d158      	bne.n	800b5be <_malloc_r+0xf6>
 800b50c:	f8d8 4000 	ldr.w	r4, [r8]
 800b510:	4627      	mov	r7, r4
 800b512:	2f00      	cmp	r7, #0
 800b514:	d143      	bne.n	800b59e <_malloc_r+0xd6>
 800b516:	2c00      	cmp	r4, #0
 800b518:	d04b      	beq.n	800b5b2 <_malloc_r+0xea>
 800b51a:	6823      	ldr	r3, [r4, #0]
 800b51c:	4639      	mov	r1, r7
 800b51e:	4630      	mov	r0, r6
 800b520:	eb04 0903 	add.w	r9, r4, r3
 800b524:	f000 ffc0 	bl	800c4a8 <_sbrk_r>
 800b528:	4581      	cmp	r9, r0
 800b52a:	d142      	bne.n	800b5b2 <_malloc_r+0xea>
 800b52c:	6821      	ldr	r1, [r4, #0]
 800b52e:	1a6d      	subs	r5, r5, r1
 800b530:	4629      	mov	r1, r5
 800b532:	4630      	mov	r0, r6
 800b534:	f7ff ffa6 	bl	800b484 <sbrk_aligned>
 800b538:	3001      	adds	r0, #1
 800b53a:	d03a      	beq.n	800b5b2 <_malloc_r+0xea>
 800b53c:	6823      	ldr	r3, [r4, #0]
 800b53e:	442b      	add	r3, r5
 800b540:	6023      	str	r3, [r4, #0]
 800b542:	f8d8 3000 	ldr.w	r3, [r8]
 800b546:	685a      	ldr	r2, [r3, #4]
 800b548:	bb62      	cbnz	r2, 800b5a4 <_malloc_r+0xdc>
 800b54a:	f8c8 7000 	str.w	r7, [r8]
 800b54e:	e00f      	b.n	800b570 <_malloc_r+0xa8>
 800b550:	6822      	ldr	r2, [r4, #0]
 800b552:	1b52      	subs	r2, r2, r5
 800b554:	d420      	bmi.n	800b598 <_malloc_r+0xd0>
 800b556:	2a0b      	cmp	r2, #11
 800b558:	d917      	bls.n	800b58a <_malloc_r+0xc2>
 800b55a:	1961      	adds	r1, r4, r5
 800b55c:	42a3      	cmp	r3, r4
 800b55e:	6025      	str	r5, [r4, #0]
 800b560:	bf18      	it	ne
 800b562:	6059      	strne	r1, [r3, #4]
 800b564:	6863      	ldr	r3, [r4, #4]
 800b566:	bf08      	it	eq
 800b568:	f8c8 1000 	streq.w	r1, [r8]
 800b56c:	5162      	str	r2, [r4, r5]
 800b56e:	604b      	str	r3, [r1, #4]
 800b570:	4630      	mov	r0, r6
 800b572:	f000 f82f 	bl	800b5d4 <__malloc_unlock>
 800b576:	f104 000b 	add.w	r0, r4, #11
 800b57a:	1d23      	adds	r3, r4, #4
 800b57c:	f020 0007 	bic.w	r0, r0, #7
 800b580:	1ac2      	subs	r2, r0, r3
 800b582:	bf1c      	itt	ne
 800b584:	1a1b      	subne	r3, r3, r0
 800b586:	50a3      	strne	r3, [r4, r2]
 800b588:	e7af      	b.n	800b4ea <_malloc_r+0x22>
 800b58a:	6862      	ldr	r2, [r4, #4]
 800b58c:	42a3      	cmp	r3, r4
 800b58e:	bf0c      	ite	eq
 800b590:	f8c8 2000 	streq.w	r2, [r8]
 800b594:	605a      	strne	r2, [r3, #4]
 800b596:	e7eb      	b.n	800b570 <_malloc_r+0xa8>
 800b598:	4623      	mov	r3, r4
 800b59a:	6864      	ldr	r4, [r4, #4]
 800b59c:	e7ae      	b.n	800b4fc <_malloc_r+0x34>
 800b59e:	463c      	mov	r4, r7
 800b5a0:	687f      	ldr	r7, [r7, #4]
 800b5a2:	e7b6      	b.n	800b512 <_malloc_r+0x4a>
 800b5a4:	461a      	mov	r2, r3
 800b5a6:	685b      	ldr	r3, [r3, #4]
 800b5a8:	42a3      	cmp	r3, r4
 800b5aa:	d1fb      	bne.n	800b5a4 <_malloc_r+0xdc>
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	6053      	str	r3, [r2, #4]
 800b5b0:	e7de      	b.n	800b570 <_malloc_r+0xa8>
 800b5b2:	230c      	movs	r3, #12
 800b5b4:	6033      	str	r3, [r6, #0]
 800b5b6:	4630      	mov	r0, r6
 800b5b8:	f000 f80c 	bl	800b5d4 <__malloc_unlock>
 800b5bc:	e794      	b.n	800b4e8 <_malloc_r+0x20>
 800b5be:	6005      	str	r5, [r0, #0]
 800b5c0:	e7d6      	b.n	800b570 <_malloc_r+0xa8>
 800b5c2:	bf00      	nop
 800b5c4:	2000268c 	.word	0x2000268c

0800b5c8 <__malloc_lock>:
 800b5c8:	4801      	ldr	r0, [pc, #4]	@ (800b5d0 <__malloc_lock+0x8>)
 800b5ca:	f000 bfba 	b.w	800c542 <__retarget_lock_acquire_recursive>
 800b5ce:	bf00      	nop
 800b5d0:	200027d0 	.word	0x200027d0

0800b5d4 <__malloc_unlock>:
 800b5d4:	4801      	ldr	r0, [pc, #4]	@ (800b5dc <__malloc_unlock+0x8>)
 800b5d6:	f000 bfb5 	b.w	800c544 <__retarget_lock_release_recursive>
 800b5da:	bf00      	nop
 800b5dc:	200027d0 	.word	0x200027d0

0800b5e0 <sulp>:
 800b5e0:	b570      	push	{r4, r5, r6, lr}
 800b5e2:	4604      	mov	r4, r0
 800b5e4:	460d      	mov	r5, r1
 800b5e6:	ec45 4b10 	vmov	d0, r4, r5
 800b5ea:	4616      	mov	r6, r2
 800b5ec:	f001 fece 	bl	800d38c <__ulp>
 800b5f0:	ec51 0b10 	vmov	r0, r1, d0
 800b5f4:	b17e      	cbz	r6, 800b616 <sulp+0x36>
 800b5f6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b5fa:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	dd09      	ble.n	800b616 <sulp+0x36>
 800b602:	051b      	lsls	r3, r3, #20
 800b604:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b608:	2400      	movs	r4, #0
 800b60a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b60e:	4622      	mov	r2, r4
 800b610:	462b      	mov	r3, r5
 800b612:	f7f5 f809 	bl	8000628 <__aeabi_dmul>
 800b616:	ec41 0b10 	vmov	d0, r0, r1
 800b61a:	bd70      	pop	{r4, r5, r6, pc}
 800b61c:	0000      	movs	r0, r0
	...

0800b620 <_strtod_l>:
 800b620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b624:	b09f      	sub	sp, #124	@ 0x7c
 800b626:	460c      	mov	r4, r1
 800b628:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b62a:	2200      	movs	r2, #0
 800b62c:	921a      	str	r2, [sp, #104]	@ 0x68
 800b62e:	9005      	str	r0, [sp, #20]
 800b630:	f04f 0a00 	mov.w	sl, #0
 800b634:	f04f 0b00 	mov.w	fp, #0
 800b638:	460a      	mov	r2, r1
 800b63a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b63c:	7811      	ldrb	r1, [r2, #0]
 800b63e:	292b      	cmp	r1, #43	@ 0x2b
 800b640:	d04a      	beq.n	800b6d8 <_strtod_l+0xb8>
 800b642:	d838      	bhi.n	800b6b6 <_strtod_l+0x96>
 800b644:	290d      	cmp	r1, #13
 800b646:	d832      	bhi.n	800b6ae <_strtod_l+0x8e>
 800b648:	2908      	cmp	r1, #8
 800b64a:	d832      	bhi.n	800b6b2 <_strtod_l+0x92>
 800b64c:	2900      	cmp	r1, #0
 800b64e:	d03b      	beq.n	800b6c8 <_strtod_l+0xa8>
 800b650:	2200      	movs	r2, #0
 800b652:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b654:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b656:	782a      	ldrb	r2, [r5, #0]
 800b658:	2a30      	cmp	r2, #48	@ 0x30
 800b65a:	f040 80b3 	bne.w	800b7c4 <_strtod_l+0x1a4>
 800b65e:	786a      	ldrb	r2, [r5, #1]
 800b660:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b664:	2a58      	cmp	r2, #88	@ 0x58
 800b666:	d16e      	bne.n	800b746 <_strtod_l+0x126>
 800b668:	9302      	str	r3, [sp, #8]
 800b66a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b66c:	9301      	str	r3, [sp, #4]
 800b66e:	ab1a      	add	r3, sp, #104	@ 0x68
 800b670:	9300      	str	r3, [sp, #0]
 800b672:	4a8e      	ldr	r2, [pc, #568]	@ (800b8ac <_strtod_l+0x28c>)
 800b674:	9805      	ldr	r0, [sp, #20]
 800b676:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b678:	a919      	add	r1, sp, #100	@ 0x64
 800b67a:	f001 f82f 	bl	800c6dc <__gethex>
 800b67e:	f010 060f 	ands.w	r6, r0, #15
 800b682:	4604      	mov	r4, r0
 800b684:	d005      	beq.n	800b692 <_strtod_l+0x72>
 800b686:	2e06      	cmp	r6, #6
 800b688:	d128      	bne.n	800b6dc <_strtod_l+0xbc>
 800b68a:	3501      	adds	r5, #1
 800b68c:	2300      	movs	r3, #0
 800b68e:	9519      	str	r5, [sp, #100]	@ 0x64
 800b690:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b692:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b694:	2b00      	cmp	r3, #0
 800b696:	f040 858e 	bne.w	800c1b6 <_strtod_l+0xb96>
 800b69a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b69c:	b1cb      	cbz	r3, 800b6d2 <_strtod_l+0xb2>
 800b69e:	4652      	mov	r2, sl
 800b6a0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800b6a4:	ec43 2b10 	vmov	d0, r2, r3
 800b6a8:	b01f      	add	sp, #124	@ 0x7c
 800b6aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6ae:	2920      	cmp	r1, #32
 800b6b0:	d1ce      	bne.n	800b650 <_strtod_l+0x30>
 800b6b2:	3201      	adds	r2, #1
 800b6b4:	e7c1      	b.n	800b63a <_strtod_l+0x1a>
 800b6b6:	292d      	cmp	r1, #45	@ 0x2d
 800b6b8:	d1ca      	bne.n	800b650 <_strtod_l+0x30>
 800b6ba:	2101      	movs	r1, #1
 800b6bc:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b6be:	1c51      	adds	r1, r2, #1
 800b6c0:	9119      	str	r1, [sp, #100]	@ 0x64
 800b6c2:	7852      	ldrb	r2, [r2, #1]
 800b6c4:	2a00      	cmp	r2, #0
 800b6c6:	d1c5      	bne.n	800b654 <_strtod_l+0x34>
 800b6c8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b6ca:	9419      	str	r4, [sp, #100]	@ 0x64
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	f040 8570 	bne.w	800c1b2 <_strtod_l+0xb92>
 800b6d2:	4652      	mov	r2, sl
 800b6d4:	465b      	mov	r3, fp
 800b6d6:	e7e5      	b.n	800b6a4 <_strtod_l+0x84>
 800b6d8:	2100      	movs	r1, #0
 800b6da:	e7ef      	b.n	800b6bc <_strtod_l+0x9c>
 800b6dc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b6de:	b13a      	cbz	r2, 800b6f0 <_strtod_l+0xd0>
 800b6e0:	2135      	movs	r1, #53	@ 0x35
 800b6e2:	a81c      	add	r0, sp, #112	@ 0x70
 800b6e4:	f001 ff4c 	bl	800d580 <__copybits>
 800b6e8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b6ea:	9805      	ldr	r0, [sp, #20]
 800b6ec:	f001 fb1a 	bl	800cd24 <_Bfree>
 800b6f0:	3e01      	subs	r6, #1
 800b6f2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b6f4:	2e04      	cmp	r6, #4
 800b6f6:	d806      	bhi.n	800b706 <_strtod_l+0xe6>
 800b6f8:	e8df f006 	tbb	[pc, r6]
 800b6fc:	201d0314 	.word	0x201d0314
 800b700:	14          	.byte	0x14
 800b701:	00          	.byte	0x00
 800b702:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b706:	05e1      	lsls	r1, r4, #23
 800b708:	bf48      	it	mi
 800b70a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b70e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b712:	0d1b      	lsrs	r3, r3, #20
 800b714:	051b      	lsls	r3, r3, #20
 800b716:	2b00      	cmp	r3, #0
 800b718:	d1bb      	bne.n	800b692 <_strtod_l+0x72>
 800b71a:	f000 fee7 	bl	800c4ec <__errno>
 800b71e:	2322      	movs	r3, #34	@ 0x22
 800b720:	6003      	str	r3, [r0, #0]
 800b722:	e7b6      	b.n	800b692 <_strtod_l+0x72>
 800b724:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b728:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b72c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b730:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b734:	e7e7      	b.n	800b706 <_strtod_l+0xe6>
 800b736:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800b8b4 <_strtod_l+0x294>
 800b73a:	e7e4      	b.n	800b706 <_strtod_l+0xe6>
 800b73c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b740:	f04f 3aff 	mov.w	sl, #4294967295
 800b744:	e7df      	b.n	800b706 <_strtod_l+0xe6>
 800b746:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b748:	1c5a      	adds	r2, r3, #1
 800b74a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b74c:	785b      	ldrb	r3, [r3, #1]
 800b74e:	2b30      	cmp	r3, #48	@ 0x30
 800b750:	d0f9      	beq.n	800b746 <_strtod_l+0x126>
 800b752:	2b00      	cmp	r3, #0
 800b754:	d09d      	beq.n	800b692 <_strtod_l+0x72>
 800b756:	2301      	movs	r3, #1
 800b758:	9309      	str	r3, [sp, #36]	@ 0x24
 800b75a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b75c:	930c      	str	r3, [sp, #48]	@ 0x30
 800b75e:	2300      	movs	r3, #0
 800b760:	9308      	str	r3, [sp, #32]
 800b762:	930a      	str	r3, [sp, #40]	@ 0x28
 800b764:	461f      	mov	r7, r3
 800b766:	220a      	movs	r2, #10
 800b768:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b76a:	7805      	ldrb	r5, [r0, #0]
 800b76c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b770:	b2d9      	uxtb	r1, r3
 800b772:	2909      	cmp	r1, #9
 800b774:	d928      	bls.n	800b7c8 <_strtod_l+0x1a8>
 800b776:	494e      	ldr	r1, [pc, #312]	@ (800b8b0 <_strtod_l+0x290>)
 800b778:	2201      	movs	r2, #1
 800b77a:	f000 fe4e 	bl	800c41a <strncmp>
 800b77e:	2800      	cmp	r0, #0
 800b780:	d032      	beq.n	800b7e8 <_strtod_l+0x1c8>
 800b782:	2000      	movs	r0, #0
 800b784:	462a      	mov	r2, r5
 800b786:	4681      	mov	r9, r0
 800b788:	463d      	mov	r5, r7
 800b78a:	4603      	mov	r3, r0
 800b78c:	2a65      	cmp	r2, #101	@ 0x65
 800b78e:	d001      	beq.n	800b794 <_strtod_l+0x174>
 800b790:	2a45      	cmp	r2, #69	@ 0x45
 800b792:	d114      	bne.n	800b7be <_strtod_l+0x19e>
 800b794:	b91d      	cbnz	r5, 800b79e <_strtod_l+0x17e>
 800b796:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b798:	4302      	orrs	r2, r0
 800b79a:	d095      	beq.n	800b6c8 <_strtod_l+0xa8>
 800b79c:	2500      	movs	r5, #0
 800b79e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b7a0:	1c62      	adds	r2, r4, #1
 800b7a2:	9219      	str	r2, [sp, #100]	@ 0x64
 800b7a4:	7862      	ldrb	r2, [r4, #1]
 800b7a6:	2a2b      	cmp	r2, #43	@ 0x2b
 800b7a8:	d077      	beq.n	800b89a <_strtod_l+0x27a>
 800b7aa:	2a2d      	cmp	r2, #45	@ 0x2d
 800b7ac:	d07b      	beq.n	800b8a6 <_strtod_l+0x286>
 800b7ae:	f04f 0c00 	mov.w	ip, #0
 800b7b2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b7b6:	2909      	cmp	r1, #9
 800b7b8:	f240 8082 	bls.w	800b8c0 <_strtod_l+0x2a0>
 800b7bc:	9419      	str	r4, [sp, #100]	@ 0x64
 800b7be:	f04f 0800 	mov.w	r8, #0
 800b7c2:	e0a2      	b.n	800b90a <_strtod_l+0x2ea>
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	e7c7      	b.n	800b758 <_strtod_l+0x138>
 800b7c8:	2f08      	cmp	r7, #8
 800b7ca:	bfd5      	itete	le
 800b7cc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800b7ce:	9908      	ldrgt	r1, [sp, #32]
 800b7d0:	fb02 3301 	mlale	r3, r2, r1, r3
 800b7d4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800b7d8:	f100 0001 	add.w	r0, r0, #1
 800b7dc:	bfd4      	ite	le
 800b7de:	930a      	strle	r3, [sp, #40]	@ 0x28
 800b7e0:	9308      	strgt	r3, [sp, #32]
 800b7e2:	3701      	adds	r7, #1
 800b7e4:	9019      	str	r0, [sp, #100]	@ 0x64
 800b7e6:	e7bf      	b.n	800b768 <_strtod_l+0x148>
 800b7e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b7ea:	1c5a      	adds	r2, r3, #1
 800b7ec:	9219      	str	r2, [sp, #100]	@ 0x64
 800b7ee:	785a      	ldrb	r2, [r3, #1]
 800b7f0:	b37f      	cbz	r7, 800b852 <_strtod_l+0x232>
 800b7f2:	4681      	mov	r9, r0
 800b7f4:	463d      	mov	r5, r7
 800b7f6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b7fa:	2b09      	cmp	r3, #9
 800b7fc:	d912      	bls.n	800b824 <_strtod_l+0x204>
 800b7fe:	2301      	movs	r3, #1
 800b800:	e7c4      	b.n	800b78c <_strtod_l+0x16c>
 800b802:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b804:	1c5a      	adds	r2, r3, #1
 800b806:	9219      	str	r2, [sp, #100]	@ 0x64
 800b808:	785a      	ldrb	r2, [r3, #1]
 800b80a:	3001      	adds	r0, #1
 800b80c:	2a30      	cmp	r2, #48	@ 0x30
 800b80e:	d0f8      	beq.n	800b802 <_strtod_l+0x1e2>
 800b810:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b814:	2b08      	cmp	r3, #8
 800b816:	f200 84d3 	bhi.w	800c1c0 <_strtod_l+0xba0>
 800b81a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b81c:	930c      	str	r3, [sp, #48]	@ 0x30
 800b81e:	4681      	mov	r9, r0
 800b820:	2000      	movs	r0, #0
 800b822:	4605      	mov	r5, r0
 800b824:	3a30      	subs	r2, #48	@ 0x30
 800b826:	f100 0301 	add.w	r3, r0, #1
 800b82a:	d02a      	beq.n	800b882 <_strtod_l+0x262>
 800b82c:	4499      	add	r9, r3
 800b82e:	eb00 0c05 	add.w	ip, r0, r5
 800b832:	462b      	mov	r3, r5
 800b834:	210a      	movs	r1, #10
 800b836:	4563      	cmp	r3, ip
 800b838:	d10d      	bne.n	800b856 <_strtod_l+0x236>
 800b83a:	1c69      	adds	r1, r5, #1
 800b83c:	4401      	add	r1, r0
 800b83e:	4428      	add	r0, r5
 800b840:	2808      	cmp	r0, #8
 800b842:	dc16      	bgt.n	800b872 <_strtod_l+0x252>
 800b844:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b846:	230a      	movs	r3, #10
 800b848:	fb03 2300 	mla	r3, r3, r0, r2
 800b84c:	930a      	str	r3, [sp, #40]	@ 0x28
 800b84e:	2300      	movs	r3, #0
 800b850:	e018      	b.n	800b884 <_strtod_l+0x264>
 800b852:	4638      	mov	r0, r7
 800b854:	e7da      	b.n	800b80c <_strtod_l+0x1ec>
 800b856:	2b08      	cmp	r3, #8
 800b858:	f103 0301 	add.w	r3, r3, #1
 800b85c:	dc03      	bgt.n	800b866 <_strtod_l+0x246>
 800b85e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b860:	434e      	muls	r6, r1
 800b862:	960a      	str	r6, [sp, #40]	@ 0x28
 800b864:	e7e7      	b.n	800b836 <_strtod_l+0x216>
 800b866:	2b10      	cmp	r3, #16
 800b868:	bfde      	ittt	le
 800b86a:	9e08      	ldrle	r6, [sp, #32]
 800b86c:	434e      	mulle	r6, r1
 800b86e:	9608      	strle	r6, [sp, #32]
 800b870:	e7e1      	b.n	800b836 <_strtod_l+0x216>
 800b872:	280f      	cmp	r0, #15
 800b874:	dceb      	bgt.n	800b84e <_strtod_l+0x22e>
 800b876:	9808      	ldr	r0, [sp, #32]
 800b878:	230a      	movs	r3, #10
 800b87a:	fb03 2300 	mla	r3, r3, r0, r2
 800b87e:	9308      	str	r3, [sp, #32]
 800b880:	e7e5      	b.n	800b84e <_strtod_l+0x22e>
 800b882:	4629      	mov	r1, r5
 800b884:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b886:	1c50      	adds	r0, r2, #1
 800b888:	9019      	str	r0, [sp, #100]	@ 0x64
 800b88a:	7852      	ldrb	r2, [r2, #1]
 800b88c:	4618      	mov	r0, r3
 800b88e:	460d      	mov	r5, r1
 800b890:	e7b1      	b.n	800b7f6 <_strtod_l+0x1d6>
 800b892:	f04f 0900 	mov.w	r9, #0
 800b896:	2301      	movs	r3, #1
 800b898:	e77d      	b.n	800b796 <_strtod_l+0x176>
 800b89a:	f04f 0c00 	mov.w	ip, #0
 800b89e:	1ca2      	adds	r2, r4, #2
 800b8a0:	9219      	str	r2, [sp, #100]	@ 0x64
 800b8a2:	78a2      	ldrb	r2, [r4, #2]
 800b8a4:	e785      	b.n	800b7b2 <_strtod_l+0x192>
 800b8a6:	f04f 0c01 	mov.w	ip, #1
 800b8aa:	e7f8      	b.n	800b89e <_strtod_l+0x27e>
 800b8ac:	0800f304 	.word	0x0800f304
 800b8b0:	0800f2e0 	.word	0x0800f2e0
 800b8b4:	7ff00000 	.word	0x7ff00000
 800b8b8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b8ba:	1c51      	adds	r1, r2, #1
 800b8bc:	9119      	str	r1, [sp, #100]	@ 0x64
 800b8be:	7852      	ldrb	r2, [r2, #1]
 800b8c0:	2a30      	cmp	r2, #48	@ 0x30
 800b8c2:	d0f9      	beq.n	800b8b8 <_strtod_l+0x298>
 800b8c4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b8c8:	2908      	cmp	r1, #8
 800b8ca:	f63f af78 	bhi.w	800b7be <_strtod_l+0x19e>
 800b8ce:	3a30      	subs	r2, #48	@ 0x30
 800b8d0:	920e      	str	r2, [sp, #56]	@ 0x38
 800b8d2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b8d4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b8d6:	f04f 080a 	mov.w	r8, #10
 800b8da:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b8dc:	1c56      	adds	r6, r2, #1
 800b8de:	9619      	str	r6, [sp, #100]	@ 0x64
 800b8e0:	7852      	ldrb	r2, [r2, #1]
 800b8e2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b8e6:	f1be 0f09 	cmp.w	lr, #9
 800b8ea:	d939      	bls.n	800b960 <_strtod_l+0x340>
 800b8ec:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b8ee:	1a76      	subs	r6, r6, r1
 800b8f0:	2e08      	cmp	r6, #8
 800b8f2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b8f6:	dc03      	bgt.n	800b900 <_strtod_l+0x2e0>
 800b8f8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b8fa:	4588      	cmp	r8, r1
 800b8fc:	bfa8      	it	ge
 800b8fe:	4688      	movge	r8, r1
 800b900:	f1bc 0f00 	cmp.w	ip, #0
 800b904:	d001      	beq.n	800b90a <_strtod_l+0x2ea>
 800b906:	f1c8 0800 	rsb	r8, r8, #0
 800b90a:	2d00      	cmp	r5, #0
 800b90c:	d14e      	bne.n	800b9ac <_strtod_l+0x38c>
 800b90e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b910:	4308      	orrs	r0, r1
 800b912:	f47f aebe 	bne.w	800b692 <_strtod_l+0x72>
 800b916:	2b00      	cmp	r3, #0
 800b918:	f47f aed6 	bne.w	800b6c8 <_strtod_l+0xa8>
 800b91c:	2a69      	cmp	r2, #105	@ 0x69
 800b91e:	d028      	beq.n	800b972 <_strtod_l+0x352>
 800b920:	dc25      	bgt.n	800b96e <_strtod_l+0x34e>
 800b922:	2a49      	cmp	r2, #73	@ 0x49
 800b924:	d025      	beq.n	800b972 <_strtod_l+0x352>
 800b926:	2a4e      	cmp	r2, #78	@ 0x4e
 800b928:	f47f aece 	bne.w	800b6c8 <_strtod_l+0xa8>
 800b92c:	499b      	ldr	r1, [pc, #620]	@ (800bb9c <_strtod_l+0x57c>)
 800b92e:	a819      	add	r0, sp, #100	@ 0x64
 800b930:	f001 f8f6 	bl	800cb20 <__match>
 800b934:	2800      	cmp	r0, #0
 800b936:	f43f aec7 	beq.w	800b6c8 <_strtod_l+0xa8>
 800b93a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b93c:	781b      	ldrb	r3, [r3, #0]
 800b93e:	2b28      	cmp	r3, #40	@ 0x28
 800b940:	d12e      	bne.n	800b9a0 <_strtod_l+0x380>
 800b942:	4997      	ldr	r1, [pc, #604]	@ (800bba0 <_strtod_l+0x580>)
 800b944:	aa1c      	add	r2, sp, #112	@ 0x70
 800b946:	a819      	add	r0, sp, #100	@ 0x64
 800b948:	f001 f8fe 	bl	800cb48 <__hexnan>
 800b94c:	2805      	cmp	r0, #5
 800b94e:	d127      	bne.n	800b9a0 <_strtod_l+0x380>
 800b950:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b952:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b956:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b95a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b95e:	e698      	b.n	800b692 <_strtod_l+0x72>
 800b960:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b962:	fb08 2101 	mla	r1, r8, r1, r2
 800b966:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b96a:	920e      	str	r2, [sp, #56]	@ 0x38
 800b96c:	e7b5      	b.n	800b8da <_strtod_l+0x2ba>
 800b96e:	2a6e      	cmp	r2, #110	@ 0x6e
 800b970:	e7da      	b.n	800b928 <_strtod_l+0x308>
 800b972:	498c      	ldr	r1, [pc, #560]	@ (800bba4 <_strtod_l+0x584>)
 800b974:	a819      	add	r0, sp, #100	@ 0x64
 800b976:	f001 f8d3 	bl	800cb20 <__match>
 800b97a:	2800      	cmp	r0, #0
 800b97c:	f43f aea4 	beq.w	800b6c8 <_strtod_l+0xa8>
 800b980:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b982:	4989      	ldr	r1, [pc, #548]	@ (800bba8 <_strtod_l+0x588>)
 800b984:	3b01      	subs	r3, #1
 800b986:	a819      	add	r0, sp, #100	@ 0x64
 800b988:	9319      	str	r3, [sp, #100]	@ 0x64
 800b98a:	f001 f8c9 	bl	800cb20 <__match>
 800b98e:	b910      	cbnz	r0, 800b996 <_strtod_l+0x376>
 800b990:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b992:	3301      	adds	r3, #1
 800b994:	9319      	str	r3, [sp, #100]	@ 0x64
 800b996:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800bbb8 <_strtod_l+0x598>
 800b99a:	f04f 0a00 	mov.w	sl, #0
 800b99e:	e678      	b.n	800b692 <_strtod_l+0x72>
 800b9a0:	4882      	ldr	r0, [pc, #520]	@ (800bbac <_strtod_l+0x58c>)
 800b9a2:	f000 fde1 	bl	800c568 <nan>
 800b9a6:	ec5b ab10 	vmov	sl, fp, d0
 800b9aa:	e672      	b.n	800b692 <_strtod_l+0x72>
 800b9ac:	eba8 0309 	sub.w	r3, r8, r9
 800b9b0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b9b2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b9b4:	2f00      	cmp	r7, #0
 800b9b6:	bf08      	it	eq
 800b9b8:	462f      	moveq	r7, r5
 800b9ba:	2d10      	cmp	r5, #16
 800b9bc:	462c      	mov	r4, r5
 800b9be:	bfa8      	it	ge
 800b9c0:	2410      	movge	r4, #16
 800b9c2:	f7f4 fdb7 	bl	8000534 <__aeabi_ui2d>
 800b9c6:	2d09      	cmp	r5, #9
 800b9c8:	4682      	mov	sl, r0
 800b9ca:	468b      	mov	fp, r1
 800b9cc:	dc13      	bgt.n	800b9f6 <_strtod_l+0x3d6>
 800b9ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	f43f ae5e 	beq.w	800b692 <_strtod_l+0x72>
 800b9d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9d8:	dd78      	ble.n	800bacc <_strtod_l+0x4ac>
 800b9da:	2b16      	cmp	r3, #22
 800b9dc:	dc5f      	bgt.n	800ba9e <_strtod_l+0x47e>
 800b9de:	4974      	ldr	r1, [pc, #464]	@ (800bbb0 <_strtod_l+0x590>)
 800b9e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b9e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b9e8:	4652      	mov	r2, sl
 800b9ea:	465b      	mov	r3, fp
 800b9ec:	f7f4 fe1c 	bl	8000628 <__aeabi_dmul>
 800b9f0:	4682      	mov	sl, r0
 800b9f2:	468b      	mov	fp, r1
 800b9f4:	e64d      	b.n	800b692 <_strtod_l+0x72>
 800b9f6:	4b6e      	ldr	r3, [pc, #440]	@ (800bbb0 <_strtod_l+0x590>)
 800b9f8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b9fc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ba00:	f7f4 fe12 	bl	8000628 <__aeabi_dmul>
 800ba04:	4682      	mov	sl, r0
 800ba06:	9808      	ldr	r0, [sp, #32]
 800ba08:	468b      	mov	fp, r1
 800ba0a:	f7f4 fd93 	bl	8000534 <__aeabi_ui2d>
 800ba0e:	4602      	mov	r2, r0
 800ba10:	460b      	mov	r3, r1
 800ba12:	4650      	mov	r0, sl
 800ba14:	4659      	mov	r1, fp
 800ba16:	f7f4 fc51 	bl	80002bc <__adddf3>
 800ba1a:	2d0f      	cmp	r5, #15
 800ba1c:	4682      	mov	sl, r0
 800ba1e:	468b      	mov	fp, r1
 800ba20:	ddd5      	ble.n	800b9ce <_strtod_l+0x3ae>
 800ba22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba24:	1b2c      	subs	r4, r5, r4
 800ba26:	441c      	add	r4, r3
 800ba28:	2c00      	cmp	r4, #0
 800ba2a:	f340 8096 	ble.w	800bb5a <_strtod_l+0x53a>
 800ba2e:	f014 030f 	ands.w	r3, r4, #15
 800ba32:	d00a      	beq.n	800ba4a <_strtod_l+0x42a>
 800ba34:	495e      	ldr	r1, [pc, #376]	@ (800bbb0 <_strtod_l+0x590>)
 800ba36:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ba3a:	4652      	mov	r2, sl
 800ba3c:	465b      	mov	r3, fp
 800ba3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba42:	f7f4 fdf1 	bl	8000628 <__aeabi_dmul>
 800ba46:	4682      	mov	sl, r0
 800ba48:	468b      	mov	fp, r1
 800ba4a:	f034 040f 	bics.w	r4, r4, #15
 800ba4e:	d073      	beq.n	800bb38 <_strtod_l+0x518>
 800ba50:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ba54:	dd48      	ble.n	800bae8 <_strtod_l+0x4c8>
 800ba56:	2400      	movs	r4, #0
 800ba58:	46a0      	mov	r8, r4
 800ba5a:	940a      	str	r4, [sp, #40]	@ 0x28
 800ba5c:	46a1      	mov	r9, r4
 800ba5e:	9a05      	ldr	r2, [sp, #20]
 800ba60:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800bbb8 <_strtod_l+0x598>
 800ba64:	2322      	movs	r3, #34	@ 0x22
 800ba66:	6013      	str	r3, [r2, #0]
 800ba68:	f04f 0a00 	mov.w	sl, #0
 800ba6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	f43f ae0f 	beq.w	800b692 <_strtod_l+0x72>
 800ba74:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ba76:	9805      	ldr	r0, [sp, #20]
 800ba78:	f001 f954 	bl	800cd24 <_Bfree>
 800ba7c:	9805      	ldr	r0, [sp, #20]
 800ba7e:	4649      	mov	r1, r9
 800ba80:	f001 f950 	bl	800cd24 <_Bfree>
 800ba84:	9805      	ldr	r0, [sp, #20]
 800ba86:	4641      	mov	r1, r8
 800ba88:	f001 f94c 	bl	800cd24 <_Bfree>
 800ba8c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ba8e:	9805      	ldr	r0, [sp, #20]
 800ba90:	f001 f948 	bl	800cd24 <_Bfree>
 800ba94:	9805      	ldr	r0, [sp, #20]
 800ba96:	4621      	mov	r1, r4
 800ba98:	f001 f944 	bl	800cd24 <_Bfree>
 800ba9c:	e5f9      	b.n	800b692 <_strtod_l+0x72>
 800ba9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800baa0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800baa4:	4293      	cmp	r3, r2
 800baa6:	dbbc      	blt.n	800ba22 <_strtod_l+0x402>
 800baa8:	4c41      	ldr	r4, [pc, #260]	@ (800bbb0 <_strtod_l+0x590>)
 800baaa:	f1c5 050f 	rsb	r5, r5, #15
 800baae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800bab2:	4652      	mov	r2, sl
 800bab4:	465b      	mov	r3, fp
 800bab6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800baba:	f7f4 fdb5 	bl	8000628 <__aeabi_dmul>
 800babe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bac0:	1b5d      	subs	r5, r3, r5
 800bac2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800bac6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800baca:	e78f      	b.n	800b9ec <_strtod_l+0x3cc>
 800bacc:	3316      	adds	r3, #22
 800bace:	dba8      	blt.n	800ba22 <_strtod_l+0x402>
 800bad0:	4b37      	ldr	r3, [pc, #220]	@ (800bbb0 <_strtod_l+0x590>)
 800bad2:	eba9 0808 	sub.w	r8, r9, r8
 800bad6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800bada:	e9d8 2300 	ldrd	r2, r3, [r8]
 800bade:	4650      	mov	r0, sl
 800bae0:	4659      	mov	r1, fp
 800bae2:	f7f4 fecb 	bl	800087c <__aeabi_ddiv>
 800bae6:	e783      	b.n	800b9f0 <_strtod_l+0x3d0>
 800bae8:	4b32      	ldr	r3, [pc, #200]	@ (800bbb4 <_strtod_l+0x594>)
 800baea:	9308      	str	r3, [sp, #32]
 800baec:	2300      	movs	r3, #0
 800baee:	1124      	asrs	r4, r4, #4
 800baf0:	4650      	mov	r0, sl
 800baf2:	4659      	mov	r1, fp
 800baf4:	461e      	mov	r6, r3
 800baf6:	2c01      	cmp	r4, #1
 800baf8:	dc21      	bgt.n	800bb3e <_strtod_l+0x51e>
 800bafa:	b10b      	cbz	r3, 800bb00 <_strtod_l+0x4e0>
 800bafc:	4682      	mov	sl, r0
 800bafe:	468b      	mov	fp, r1
 800bb00:	492c      	ldr	r1, [pc, #176]	@ (800bbb4 <_strtod_l+0x594>)
 800bb02:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800bb06:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800bb0a:	4652      	mov	r2, sl
 800bb0c:	465b      	mov	r3, fp
 800bb0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb12:	f7f4 fd89 	bl	8000628 <__aeabi_dmul>
 800bb16:	4b28      	ldr	r3, [pc, #160]	@ (800bbb8 <_strtod_l+0x598>)
 800bb18:	460a      	mov	r2, r1
 800bb1a:	400b      	ands	r3, r1
 800bb1c:	4927      	ldr	r1, [pc, #156]	@ (800bbbc <_strtod_l+0x59c>)
 800bb1e:	428b      	cmp	r3, r1
 800bb20:	4682      	mov	sl, r0
 800bb22:	d898      	bhi.n	800ba56 <_strtod_l+0x436>
 800bb24:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800bb28:	428b      	cmp	r3, r1
 800bb2a:	bf86      	itte	hi
 800bb2c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800bbc0 <_strtod_l+0x5a0>
 800bb30:	f04f 3aff 	movhi.w	sl, #4294967295
 800bb34:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800bb38:	2300      	movs	r3, #0
 800bb3a:	9308      	str	r3, [sp, #32]
 800bb3c:	e07a      	b.n	800bc34 <_strtod_l+0x614>
 800bb3e:	07e2      	lsls	r2, r4, #31
 800bb40:	d505      	bpl.n	800bb4e <_strtod_l+0x52e>
 800bb42:	9b08      	ldr	r3, [sp, #32]
 800bb44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb48:	f7f4 fd6e 	bl	8000628 <__aeabi_dmul>
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	9a08      	ldr	r2, [sp, #32]
 800bb50:	3208      	adds	r2, #8
 800bb52:	3601      	adds	r6, #1
 800bb54:	1064      	asrs	r4, r4, #1
 800bb56:	9208      	str	r2, [sp, #32]
 800bb58:	e7cd      	b.n	800baf6 <_strtod_l+0x4d6>
 800bb5a:	d0ed      	beq.n	800bb38 <_strtod_l+0x518>
 800bb5c:	4264      	negs	r4, r4
 800bb5e:	f014 020f 	ands.w	r2, r4, #15
 800bb62:	d00a      	beq.n	800bb7a <_strtod_l+0x55a>
 800bb64:	4b12      	ldr	r3, [pc, #72]	@ (800bbb0 <_strtod_l+0x590>)
 800bb66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb6a:	4650      	mov	r0, sl
 800bb6c:	4659      	mov	r1, fp
 800bb6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb72:	f7f4 fe83 	bl	800087c <__aeabi_ddiv>
 800bb76:	4682      	mov	sl, r0
 800bb78:	468b      	mov	fp, r1
 800bb7a:	1124      	asrs	r4, r4, #4
 800bb7c:	d0dc      	beq.n	800bb38 <_strtod_l+0x518>
 800bb7e:	2c1f      	cmp	r4, #31
 800bb80:	dd20      	ble.n	800bbc4 <_strtod_l+0x5a4>
 800bb82:	2400      	movs	r4, #0
 800bb84:	46a0      	mov	r8, r4
 800bb86:	940a      	str	r4, [sp, #40]	@ 0x28
 800bb88:	46a1      	mov	r9, r4
 800bb8a:	9a05      	ldr	r2, [sp, #20]
 800bb8c:	2322      	movs	r3, #34	@ 0x22
 800bb8e:	f04f 0a00 	mov.w	sl, #0
 800bb92:	f04f 0b00 	mov.w	fp, #0
 800bb96:	6013      	str	r3, [r2, #0]
 800bb98:	e768      	b.n	800ba6c <_strtod_l+0x44c>
 800bb9a:	bf00      	nop
 800bb9c:	0800f2eb 	.word	0x0800f2eb
 800bba0:	0800f2f0 	.word	0x0800f2f0
 800bba4:	0800f2e2 	.word	0x0800f2e2
 800bba8:	0800f2e5 	.word	0x0800f2e5
 800bbac:	0800f664 	.word	0x0800f664
 800bbb0:	0800f460 	.word	0x0800f460
 800bbb4:	0800f438 	.word	0x0800f438
 800bbb8:	7ff00000 	.word	0x7ff00000
 800bbbc:	7ca00000 	.word	0x7ca00000
 800bbc0:	7fefffff 	.word	0x7fefffff
 800bbc4:	f014 0310 	ands.w	r3, r4, #16
 800bbc8:	bf18      	it	ne
 800bbca:	236a      	movne	r3, #106	@ 0x6a
 800bbcc:	4ea9      	ldr	r6, [pc, #676]	@ (800be74 <_strtod_l+0x854>)
 800bbce:	9308      	str	r3, [sp, #32]
 800bbd0:	4650      	mov	r0, sl
 800bbd2:	4659      	mov	r1, fp
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	07e2      	lsls	r2, r4, #31
 800bbd8:	d504      	bpl.n	800bbe4 <_strtod_l+0x5c4>
 800bbda:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bbde:	f7f4 fd23 	bl	8000628 <__aeabi_dmul>
 800bbe2:	2301      	movs	r3, #1
 800bbe4:	1064      	asrs	r4, r4, #1
 800bbe6:	f106 0608 	add.w	r6, r6, #8
 800bbea:	d1f4      	bne.n	800bbd6 <_strtod_l+0x5b6>
 800bbec:	b10b      	cbz	r3, 800bbf2 <_strtod_l+0x5d2>
 800bbee:	4682      	mov	sl, r0
 800bbf0:	468b      	mov	fp, r1
 800bbf2:	9b08      	ldr	r3, [sp, #32]
 800bbf4:	b1b3      	cbz	r3, 800bc24 <_strtod_l+0x604>
 800bbf6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800bbfa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	4659      	mov	r1, fp
 800bc02:	dd0f      	ble.n	800bc24 <_strtod_l+0x604>
 800bc04:	2b1f      	cmp	r3, #31
 800bc06:	dd55      	ble.n	800bcb4 <_strtod_l+0x694>
 800bc08:	2b34      	cmp	r3, #52	@ 0x34
 800bc0a:	bfde      	ittt	le
 800bc0c:	f04f 33ff 	movle.w	r3, #4294967295
 800bc10:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800bc14:	4093      	lslle	r3, r2
 800bc16:	f04f 0a00 	mov.w	sl, #0
 800bc1a:	bfcc      	ite	gt
 800bc1c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800bc20:	ea03 0b01 	andle.w	fp, r3, r1
 800bc24:	2200      	movs	r2, #0
 800bc26:	2300      	movs	r3, #0
 800bc28:	4650      	mov	r0, sl
 800bc2a:	4659      	mov	r1, fp
 800bc2c:	f7f4 ff64 	bl	8000af8 <__aeabi_dcmpeq>
 800bc30:	2800      	cmp	r0, #0
 800bc32:	d1a6      	bne.n	800bb82 <_strtod_l+0x562>
 800bc34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc36:	9300      	str	r3, [sp, #0]
 800bc38:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800bc3a:	9805      	ldr	r0, [sp, #20]
 800bc3c:	462b      	mov	r3, r5
 800bc3e:	463a      	mov	r2, r7
 800bc40:	f001 f8d8 	bl	800cdf4 <__s2b>
 800bc44:	900a      	str	r0, [sp, #40]	@ 0x28
 800bc46:	2800      	cmp	r0, #0
 800bc48:	f43f af05 	beq.w	800ba56 <_strtod_l+0x436>
 800bc4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc4e:	2a00      	cmp	r2, #0
 800bc50:	eba9 0308 	sub.w	r3, r9, r8
 800bc54:	bfa8      	it	ge
 800bc56:	2300      	movge	r3, #0
 800bc58:	9312      	str	r3, [sp, #72]	@ 0x48
 800bc5a:	2400      	movs	r4, #0
 800bc5c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800bc60:	9316      	str	r3, [sp, #88]	@ 0x58
 800bc62:	46a0      	mov	r8, r4
 800bc64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc66:	9805      	ldr	r0, [sp, #20]
 800bc68:	6859      	ldr	r1, [r3, #4]
 800bc6a:	f001 f81b 	bl	800cca4 <_Balloc>
 800bc6e:	4681      	mov	r9, r0
 800bc70:	2800      	cmp	r0, #0
 800bc72:	f43f aef4 	beq.w	800ba5e <_strtod_l+0x43e>
 800bc76:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc78:	691a      	ldr	r2, [r3, #16]
 800bc7a:	3202      	adds	r2, #2
 800bc7c:	f103 010c 	add.w	r1, r3, #12
 800bc80:	0092      	lsls	r2, r2, #2
 800bc82:	300c      	adds	r0, #12
 800bc84:	f000 fc5f 	bl	800c546 <memcpy>
 800bc88:	ec4b ab10 	vmov	d0, sl, fp
 800bc8c:	9805      	ldr	r0, [sp, #20]
 800bc8e:	aa1c      	add	r2, sp, #112	@ 0x70
 800bc90:	a91b      	add	r1, sp, #108	@ 0x6c
 800bc92:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800bc96:	f001 fbe9 	bl	800d46c <__d2b>
 800bc9a:	901a      	str	r0, [sp, #104]	@ 0x68
 800bc9c:	2800      	cmp	r0, #0
 800bc9e:	f43f aede 	beq.w	800ba5e <_strtod_l+0x43e>
 800bca2:	9805      	ldr	r0, [sp, #20]
 800bca4:	2101      	movs	r1, #1
 800bca6:	f001 f93b 	bl	800cf20 <__i2b>
 800bcaa:	4680      	mov	r8, r0
 800bcac:	b948      	cbnz	r0, 800bcc2 <_strtod_l+0x6a2>
 800bcae:	f04f 0800 	mov.w	r8, #0
 800bcb2:	e6d4      	b.n	800ba5e <_strtod_l+0x43e>
 800bcb4:	f04f 32ff 	mov.w	r2, #4294967295
 800bcb8:	fa02 f303 	lsl.w	r3, r2, r3
 800bcbc:	ea03 0a0a 	and.w	sl, r3, sl
 800bcc0:	e7b0      	b.n	800bc24 <_strtod_l+0x604>
 800bcc2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800bcc4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800bcc6:	2d00      	cmp	r5, #0
 800bcc8:	bfab      	itete	ge
 800bcca:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800bccc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800bcce:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800bcd0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800bcd2:	bfac      	ite	ge
 800bcd4:	18ef      	addge	r7, r5, r3
 800bcd6:	1b5e      	sublt	r6, r3, r5
 800bcd8:	9b08      	ldr	r3, [sp, #32]
 800bcda:	1aed      	subs	r5, r5, r3
 800bcdc:	4415      	add	r5, r2
 800bcde:	4b66      	ldr	r3, [pc, #408]	@ (800be78 <_strtod_l+0x858>)
 800bce0:	3d01      	subs	r5, #1
 800bce2:	429d      	cmp	r5, r3
 800bce4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800bce8:	da50      	bge.n	800bd8c <_strtod_l+0x76c>
 800bcea:	1b5b      	subs	r3, r3, r5
 800bcec:	2b1f      	cmp	r3, #31
 800bcee:	eba2 0203 	sub.w	r2, r2, r3
 800bcf2:	f04f 0101 	mov.w	r1, #1
 800bcf6:	dc3d      	bgt.n	800bd74 <_strtod_l+0x754>
 800bcf8:	fa01 f303 	lsl.w	r3, r1, r3
 800bcfc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bcfe:	2300      	movs	r3, #0
 800bd00:	9310      	str	r3, [sp, #64]	@ 0x40
 800bd02:	18bd      	adds	r5, r7, r2
 800bd04:	9b08      	ldr	r3, [sp, #32]
 800bd06:	42af      	cmp	r7, r5
 800bd08:	4416      	add	r6, r2
 800bd0a:	441e      	add	r6, r3
 800bd0c:	463b      	mov	r3, r7
 800bd0e:	bfa8      	it	ge
 800bd10:	462b      	movge	r3, r5
 800bd12:	42b3      	cmp	r3, r6
 800bd14:	bfa8      	it	ge
 800bd16:	4633      	movge	r3, r6
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	bfc2      	ittt	gt
 800bd1c:	1aed      	subgt	r5, r5, r3
 800bd1e:	1af6      	subgt	r6, r6, r3
 800bd20:	1aff      	subgt	r7, r7, r3
 800bd22:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	dd16      	ble.n	800bd56 <_strtod_l+0x736>
 800bd28:	4641      	mov	r1, r8
 800bd2a:	9805      	ldr	r0, [sp, #20]
 800bd2c:	461a      	mov	r2, r3
 800bd2e:	f001 f9b7 	bl	800d0a0 <__pow5mult>
 800bd32:	4680      	mov	r8, r0
 800bd34:	2800      	cmp	r0, #0
 800bd36:	d0ba      	beq.n	800bcae <_strtod_l+0x68e>
 800bd38:	4601      	mov	r1, r0
 800bd3a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800bd3c:	9805      	ldr	r0, [sp, #20]
 800bd3e:	f001 f905 	bl	800cf4c <__multiply>
 800bd42:	900e      	str	r0, [sp, #56]	@ 0x38
 800bd44:	2800      	cmp	r0, #0
 800bd46:	f43f ae8a 	beq.w	800ba5e <_strtod_l+0x43e>
 800bd4a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bd4c:	9805      	ldr	r0, [sp, #20]
 800bd4e:	f000 ffe9 	bl	800cd24 <_Bfree>
 800bd52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd54:	931a      	str	r3, [sp, #104]	@ 0x68
 800bd56:	2d00      	cmp	r5, #0
 800bd58:	dc1d      	bgt.n	800bd96 <_strtod_l+0x776>
 800bd5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	dd23      	ble.n	800bda8 <_strtod_l+0x788>
 800bd60:	4649      	mov	r1, r9
 800bd62:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800bd64:	9805      	ldr	r0, [sp, #20]
 800bd66:	f001 f99b 	bl	800d0a0 <__pow5mult>
 800bd6a:	4681      	mov	r9, r0
 800bd6c:	b9e0      	cbnz	r0, 800bda8 <_strtod_l+0x788>
 800bd6e:	f04f 0900 	mov.w	r9, #0
 800bd72:	e674      	b.n	800ba5e <_strtod_l+0x43e>
 800bd74:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800bd78:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800bd7c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800bd80:	35e2      	adds	r5, #226	@ 0xe2
 800bd82:	fa01 f305 	lsl.w	r3, r1, r5
 800bd86:	9310      	str	r3, [sp, #64]	@ 0x40
 800bd88:	9113      	str	r1, [sp, #76]	@ 0x4c
 800bd8a:	e7ba      	b.n	800bd02 <_strtod_l+0x6e2>
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	9310      	str	r3, [sp, #64]	@ 0x40
 800bd90:	2301      	movs	r3, #1
 800bd92:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bd94:	e7b5      	b.n	800bd02 <_strtod_l+0x6e2>
 800bd96:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bd98:	9805      	ldr	r0, [sp, #20]
 800bd9a:	462a      	mov	r2, r5
 800bd9c:	f001 f9da 	bl	800d154 <__lshift>
 800bda0:	901a      	str	r0, [sp, #104]	@ 0x68
 800bda2:	2800      	cmp	r0, #0
 800bda4:	d1d9      	bne.n	800bd5a <_strtod_l+0x73a>
 800bda6:	e65a      	b.n	800ba5e <_strtod_l+0x43e>
 800bda8:	2e00      	cmp	r6, #0
 800bdaa:	dd07      	ble.n	800bdbc <_strtod_l+0x79c>
 800bdac:	4649      	mov	r1, r9
 800bdae:	9805      	ldr	r0, [sp, #20]
 800bdb0:	4632      	mov	r2, r6
 800bdb2:	f001 f9cf 	bl	800d154 <__lshift>
 800bdb6:	4681      	mov	r9, r0
 800bdb8:	2800      	cmp	r0, #0
 800bdba:	d0d8      	beq.n	800bd6e <_strtod_l+0x74e>
 800bdbc:	2f00      	cmp	r7, #0
 800bdbe:	dd08      	ble.n	800bdd2 <_strtod_l+0x7b2>
 800bdc0:	4641      	mov	r1, r8
 800bdc2:	9805      	ldr	r0, [sp, #20]
 800bdc4:	463a      	mov	r2, r7
 800bdc6:	f001 f9c5 	bl	800d154 <__lshift>
 800bdca:	4680      	mov	r8, r0
 800bdcc:	2800      	cmp	r0, #0
 800bdce:	f43f ae46 	beq.w	800ba5e <_strtod_l+0x43e>
 800bdd2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bdd4:	9805      	ldr	r0, [sp, #20]
 800bdd6:	464a      	mov	r2, r9
 800bdd8:	f001 fa44 	bl	800d264 <__mdiff>
 800bddc:	4604      	mov	r4, r0
 800bdde:	2800      	cmp	r0, #0
 800bde0:	f43f ae3d 	beq.w	800ba5e <_strtod_l+0x43e>
 800bde4:	68c3      	ldr	r3, [r0, #12]
 800bde6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bde8:	2300      	movs	r3, #0
 800bdea:	60c3      	str	r3, [r0, #12]
 800bdec:	4641      	mov	r1, r8
 800bdee:	f001 fa1d 	bl	800d22c <__mcmp>
 800bdf2:	2800      	cmp	r0, #0
 800bdf4:	da46      	bge.n	800be84 <_strtod_l+0x864>
 800bdf6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bdf8:	ea53 030a 	orrs.w	r3, r3, sl
 800bdfc:	d16c      	bne.n	800bed8 <_strtod_l+0x8b8>
 800bdfe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800be02:	2b00      	cmp	r3, #0
 800be04:	d168      	bne.n	800bed8 <_strtod_l+0x8b8>
 800be06:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800be0a:	0d1b      	lsrs	r3, r3, #20
 800be0c:	051b      	lsls	r3, r3, #20
 800be0e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800be12:	d961      	bls.n	800bed8 <_strtod_l+0x8b8>
 800be14:	6963      	ldr	r3, [r4, #20]
 800be16:	b913      	cbnz	r3, 800be1e <_strtod_l+0x7fe>
 800be18:	6923      	ldr	r3, [r4, #16]
 800be1a:	2b01      	cmp	r3, #1
 800be1c:	dd5c      	ble.n	800bed8 <_strtod_l+0x8b8>
 800be1e:	4621      	mov	r1, r4
 800be20:	2201      	movs	r2, #1
 800be22:	9805      	ldr	r0, [sp, #20]
 800be24:	f001 f996 	bl	800d154 <__lshift>
 800be28:	4641      	mov	r1, r8
 800be2a:	4604      	mov	r4, r0
 800be2c:	f001 f9fe 	bl	800d22c <__mcmp>
 800be30:	2800      	cmp	r0, #0
 800be32:	dd51      	ble.n	800bed8 <_strtod_l+0x8b8>
 800be34:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800be38:	9a08      	ldr	r2, [sp, #32]
 800be3a:	0d1b      	lsrs	r3, r3, #20
 800be3c:	051b      	lsls	r3, r3, #20
 800be3e:	2a00      	cmp	r2, #0
 800be40:	d06b      	beq.n	800bf1a <_strtod_l+0x8fa>
 800be42:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800be46:	d868      	bhi.n	800bf1a <_strtod_l+0x8fa>
 800be48:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800be4c:	f67f ae9d 	bls.w	800bb8a <_strtod_l+0x56a>
 800be50:	4b0a      	ldr	r3, [pc, #40]	@ (800be7c <_strtod_l+0x85c>)
 800be52:	4650      	mov	r0, sl
 800be54:	4659      	mov	r1, fp
 800be56:	2200      	movs	r2, #0
 800be58:	f7f4 fbe6 	bl	8000628 <__aeabi_dmul>
 800be5c:	4b08      	ldr	r3, [pc, #32]	@ (800be80 <_strtod_l+0x860>)
 800be5e:	400b      	ands	r3, r1
 800be60:	4682      	mov	sl, r0
 800be62:	468b      	mov	fp, r1
 800be64:	2b00      	cmp	r3, #0
 800be66:	f47f ae05 	bne.w	800ba74 <_strtod_l+0x454>
 800be6a:	9a05      	ldr	r2, [sp, #20]
 800be6c:	2322      	movs	r3, #34	@ 0x22
 800be6e:	6013      	str	r3, [r2, #0]
 800be70:	e600      	b.n	800ba74 <_strtod_l+0x454>
 800be72:	bf00      	nop
 800be74:	0800f318 	.word	0x0800f318
 800be78:	fffffc02 	.word	0xfffffc02
 800be7c:	39500000 	.word	0x39500000
 800be80:	7ff00000 	.word	0x7ff00000
 800be84:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800be88:	d165      	bne.n	800bf56 <_strtod_l+0x936>
 800be8a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800be8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800be90:	b35a      	cbz	r2, 800beea <_strtod_l+0x8ca>
 800be92:	4a9f      	ldr	r2, [pc, #636]	@ (800c110 <_strtod_l+0xaf0>)
 800be94:	4293      	cmp	r3, r2
 800be96:	d12b      	bne.n	800bef0 <_strtod_l+0x8d0>
 800be98:	9b08      	ldr	r3, [sp, #32]
 800be9a:	4651      	mov	r1, sl
 800be9c:	b303      	cbz	r3, 800bee0 <_strtod_l+0x8c0>
 800be9e:	4b9d      	ldr	r3, [pc, #628]	@ (800c114 <_strtod_l+0xaf4>)
 800bea0:	465a      	mov	r2, fp
 800bea2:	4013      	ands	r3, r2
 800bea4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800bea8:	f04f 32ff 	mov.w	r2, #4294967295
 800beac:	d81b      	bhi.n	800bee6 <_strtod_l+0x8c6>
 800beae:	0d1b      	lsrs	r3, r3, #20
 800beb0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800beb4:	fa02 f303 	lsl.w	r3, r2, r3
 800beb8:	4299      	cmp	r1, r3
 800beba:	d119      	bne.n	800bef0 <_strtod_l+0x8d0>
 800bebc:	4b96      	ldr	r3, [pc, #600]	@ (800c118 <_strtod_l+0xaf8>)
 800bebe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bec0:	429a      	cmp	r2, r3
 800bec2:	d102      	bne.n	800beca <_strtod_l+0x8aa>
 800bec4:	3101      	adds	r1, #1
 800bec6:	f43f adca 	beq.w	800ba5e <_strtod_l+0x43e>
 800beca:	4b92      	ldr	r3, [pc, #584]	@ (800c114 <_strtod_l+0xaf4>)
 800becc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bece:	401a      	ands	r2, r3
 800bed0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800bed4:	f04f 0a00 	mov.w	sl, #0
 800bed8:	9b08      	ldr	r3, [sp, #32]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d1b8      	bne.n	800be50 <_strtod_l+0x830>
 800bede:	e5c9      	b.n	800ba74 <_strtod_l+0x454>
 800bee0:	f04f 33ff 	mov.w	r3, #4294967295
 800bee4:	e7e8      	b.n	800beb8 <_strtod_l+0x898>
 800bee6:	4613      	mov	r3, r2
 800bee8:	e7e6      	b.n	800beb8 <_strtod_l+0x898>
 800beea:	ea53 030a 	orrs.w	r3, r3, sl
 800beee:	d0a1      	beq.n	800be34 <_strtod_l+0x814>
 800bef0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bef2:	b1db      	cbz	r3, 800bf2c <_strtod_l+0x90c>
 800bef4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bef6:	4213      	tst	r3, r2
 800bef8:	d0ee      	beq.n	800bed8 <_strtod_l+0x8b8>
 800befa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800befc:	9a08      	ldr	r2, [sp, #32]
 800befe:	4650      	mov	r0, sl
 800bf00:	4659      	mov	r1, fp
 800bf02:	b1bb      	cbz	r3, 800bf34 <_strtod_l+0x914>
 800bf04:	f7ff fb6c 	bl	800b5e0 <sulp>
 800bf08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bf0c:	ec53 2b10 	vmov	r2, r3, d0
 800bf10:	f7f4 f9d4 	bl	80002bc <__adddf3>
 800bf14:	4682      	mov	sl, r0
 800bf16:	468b      	mov	fp, r1
 800bf18:	e7de      	b.n	800bed8 <_strtod_l+0x8b8>
 800bf1a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800bf1e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bf22:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bf26:	f04f 3aff 	mov.w	sl, #4294967295
 800bf2a:	e7d5      	b.n	800bed8 <_strtod_l+0x8b8>
 800bf2c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bf2e:	ea13 0f0a 	tst.w	r3, sl
 800bf32:	e7e1      	b.n	800bef8 <_strtod_l+0x8d8>
 800bf34:	f7ff fb54 	bl	800b5e0 <sulp>
 800bf38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bf3c:	ec53 2b10 	vmov	r2, r3, d0
 800bf40:	f7f4 f9ba 	bl	80002b8 <__aeabi_dsub>
 800bf44:	2200      	movs	r2, #0
 800bf46:	2300      	movs	r3, #0
 800bf48:	4682      	mov	sl, r0
 800bf4a:	468b      	mov	fp, r1
 800bf4c:	f7f4 fdd4 	bl	8000af8 <__aeabi_dcmpeq>
 800bf50:	2800      	cmp	r0, #0
 800bf52:	d0c1      	beq.n	800bed8 <_strtod_l+0x8b8>
 800bf54:	e619      	b.n	800bb8a <_strtod_l+0x56a>
 800bf56:	4641      	mov	r1, r8
 800bf58:	4620      	mov	r0, r4
 800bf5a:	f001 fadf 	bl	800d51c <__ratio>
 800bf5e:	ec57 6b10 	vmov	r6, r7, d0
 800bf62:	2200      	movs	r2, #0
 800bf64:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800bf68:	4630      	mov	r0, r6
 800bf6a:	4639      	mov	r1, r7
 800bf6c:	f7f4 fdd8 	bl	8000b20 <__aeabi_dcmple>
 800bf70:	2800      	cmp	r0, #0
 800bf72:	d06f      	beq.n	800c054 <_strtod_l+0xa34>
 800bf74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d17a      	bne.n	800c070 <_strtod_l+0xa50>
 800bf7a:	f1ba 0f00 	cmp.w	sl, #0
 800bf7e:	d158      	bne.n	800c032 <_strtod_l+0xa12>
 800bf80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d15a      	bne.n	800c040 <_strtod_l+0xa20>
 800bf8a:	4b64      	ldr	r3, [pc, #400]	@ (800c11c <_strtod_l+0xafc>)
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	4630      	mov	r0, r6
 800bf90:	4639      	mov	r1, r7
 800bf92:	f7f4 fdbb 	bl	8000b0c <__aeabi_dcmplt>
 800bf96:	2800      	cmp	r0, #0
 800bf98:	d159      	bne.n	800c04e <_strtod_l+0xa2e>
 800bf9a:	4630      	mov	r0, r6
 800bf9c:	4639      	mov	r1, r7
 800bf9e:	4b60      	ldr	r3, [pc, #384]	@ (800c120 <_strtod_l+0xb00>)
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	f7f4 fb41 	bl	8000628 <__aeabi_dmul>
 800bfa6:	4606      	mov	r6, r0
 800bfa8:	460f      	mov	r7, r1
 800bfaa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800bfae:	9606      	str	r6, [sp, #24]
 800bfb0:	9307      	str	r3, [sp, #28]
 800bfb2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bfb6:	4d57      	ldr	r5, [pc, #348]	@ (800c114 <_strtod_l+0xaf4>)
 800bfb8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bfbc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bfbe:	401d      	ands	r5, r3
 800bfc0:	4b58      	ldr	r3, [pc, #352]	@ (800c124 <_strtod_l+0xb04>)
 800bfc2:	429d      	cmp	r5, r3
 800bfc4:	f040 80b2 	bne.w	800c12c <_strtod_l+0xb0c>
 800bfc8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bfca:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800bfce:	ec4b ab10 	vmov	d0, sl, fp
 800bfd2:	f001 f9db 	bl	800d38c <__ulp>
 800bfd6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bfda:	ec51 0b10 	vmov	r0, r1, d0
 800bfde:	f7f4 fb23 	bl	8000628 <__aeabi_dmul>
 800bfe2:	4652      	mov	r2, sl
 800bfe4:	465b      	mov	r3, fp
 800bfe6:	f7f4 f969 	bl	80002bc <__adddf3>
 800bfea:	460b      	mov	r3, r1
 800bfec:	4949      	ldr	r1, [pc, #292]	@ (800c114 <_strtod_l+0xaf4>)
 800bfee:	4a4e      	ldr	r2, [pc, #312]	@ (800c128 <_strtod_l+0xb08>)
 800bff0:	4019      	ands	r1, r3
 800bff2:	4291      	cmp	r1, r2
 800bff4:	4682      	mov	sl, r0
 800bff6:	d942      	bls.n	800c07e <_strtod_l+0xa5e>
 800bff8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bffa:	4b47      	ldr	r3, [pc, #284]	@ (800c118 <_strtod_l+0xaf8>)
 800bffc:	429a      	cmp	r2, r3
 800bffe:	d103      	bne.n	800c008 <_strtod_l+0x9e8>
 800c000:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c002:	3301      	adds	r3, #1
 800c004:	f43f ad2b 	beq.w	800ba5e <_strtod_l+0x43e>
 800c008:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800c118 <_strtod_l+0xaf8>
 800c00c:	f04f 3aff 	mov.w	sl, #4294967295
 800c010:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c012:	9805      	ldr	r0, [sp, #20]
 800c014:	f000 fe86 	bl	800cd24 <_Bfree>
 800c018:	9805      	ldr	r0, [sp, #20]
 800c01a:	4649      	mov	r1, r9
 800c01c:	f000 fe82 	bl	800cd24 <_Bfree>
 800c020:	9805      	ldr	r0, [sp, #20]
 800c022:	4641      	mov	r1, r8
 800c024:	f000 fe7e 	bl	800cd24 <_Bfree>
 800c028:	9805      	ldr	r0, [sp, #20]
 800c02a:	4621      	mov	r1, r4
 800c02c:	f000 fe7a 	bl	800cd24 <_Bfree>
 800c030:	e618      	b.n	800bc64 <_strtod_l+0x644>
 800c032:	f1ba 0f01 	cmp.w	sl, #1
 800c036:	d103      	bne.n	800c040 <_strtod_l+0xa20>
 800c038:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	f43f ada5 	beq.w	800bb8a <_strtod_l+0x56a>
 800c040:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800c0f0 <_strtod_l+0xad0>
 800c044:	4f35      	ldr	r7, [pc, #212]	@ (800c11c <_strtod_l+0xafc>)
 800c046:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c04a:	2600      	movs	r6, #0
 800c04c:	e7b1      	b.n	800bfb2 <_strtod_l+0x992>
 800c04e:	4f34      	ldr	r7, [pc, #208]	@ (800c120 <_strtod_l+0xb00>)
 800c050:	2600      	movs	r6, #0
 800c052:	e7aa      	b.n	800bfaa <_strtod_l+0x98a>
 800c054:	4b32      	ldr	r3, [pc, #200]	@ (800c120 <_strtod_l+0xb00>)
 800c056:	4630      	mov	r0, r6
 800c058:	4639      	mov	r1, r7
 800c05a:	2200      	movs	r2, #0
 800c05c:	f7f4 fae4 	bl	8000628 <__aeabi_dmul>
 800c060:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c062:	4606      	mov	r6, r0
 800c064:	460f      	mov	r7, r1
 800c066:	2b00      	cmp	r3, #0
 800c068:	d09f      	beq.n	800bfaa <_strtod_l+0x98a>
 800c06a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c06e:	e7a0      	b.n	800bfb2 <_strtod_l+0x992>
 800c070:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800c0f8 <_strtod_l+0xad8>
 800c074:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c078:	ec57 6b17 	vmov	r6, r7, d7
 800c07c:	e799      	b.n	800bfb2 <_strtod_l+0x992>
 800c07e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800c082:	9b08      	ldr	r3, [sp, #32]
 800c084:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d1c1      	bne.n	800c010 <_strtod_l+0x9f0>
 800c08c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c090:	0d1b      	lsrs	r3, r3, #20
 800c092:	051b      	lsls	r3, r3, #20
 800c094:	429d      	cmp	r5, r3
 800c096:	d1bb      	bne.n	800c010 <_strtod_l+0x9f0>
 800c098:	4630      	mov	r0, r6
 800c09a:	4639      	mov	r1, r7
 800c09c:	f7f4 fe74 	bl	8000d88 <__aeabi_d2lz>
 800c0a0:	f7f4 fa94 	bl	80005cc <__aeabi_l2d>
 800c0a4:	4602      	mov	r2, r0
 800c0a6:	460b      	mov	r3, r1
 800c0a8:	4630      	mov	r0, r6
 800c0aa:	4639      	mov	r1, r7
 800c0ac:	f7f4 f904 	bl	80002b8 <__aeabi_dsub>
 800c0b0:	460b      	mov	r3, r1
 800c0b2:	4602      	mov	r2, r0
 800c0b4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c0b8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800c0bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c0be:	ea46 060a 	orr.w	r6, r6, sl
 800c0c2:	431e      	orrs	r6, r3
 800c0c4:	d06f      	beq.n	800c1a6 <_strtod_l+0xb86>
 800c0c6:	a30e      	add	r3, pc, #56	@ (adr r3, 800c100 <_strtod_l+0xae0>)
 800c0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0cc:	f7f4 fd1e 	bl	8000b0c <__aeabi_dcmplt>
 800c0d0:	2800      	cmp	r0, #0
 800c0d2:	f47f accf 	bne.w	800ba74 <_strtod_l+0x454>
 800c0d6:	a30c      	add	r3, pc, #48	@ (adr r3, 800c108 <_strtod_l+0xae8>)
 800c0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c0e0:	f7f4 fd32 	bl	8000b48 <__aeabi_dcmpgt>
 800c0e4:	2800      	cmp	r0, #0
 800c0e6:	d093      	beq.n	800c010 <_strtod_l+0x9f0>
 800c0e8:	e4c4      	b.n	800ba74 <_strtod_l+0x454>
 800c0ea:	bf00      	nop
 800c0ec:	f3af 8000 	nop.w
 800c0f0:	00000000 	.word	0x00000000
 800c0f4:	bff00000 	.word	0xbff00000
 800c0f8:	00000000 	.word	0x00000000
 800c0fc:	3ff00000 	.word	0x3ff00000
 800c100:	94a03595 	.word	0x94a03595
 800c104:	3fdfffff 	.word	0x3fdfffff
 800c108:	35afe535 	.word	0x35afe535
 800c10c:	3fe00000 	.word	0x3fe00000
 800c110:	000fffff 	.word	0x000fffff
 800c114:	7ff00000 	.word	0x7ff00000
 800c118:	7fefffff 	.word	0x7fefffff
 800c11c:	3ff00000 	.word	0x3ff00000
 800c120:	3fe00000 	.word	0x3fe00000
 800c124:	7fe00000 	.word	0x7fe00000
 800c128:	7c9fffff 	.word	0x7c9fffff
 800c12c:	9b08      	ldr	r3, [sp, #32]
 800c12e:	b323      	cbz	r3, 800c17a <_strtod_l+0xb5a>
 800c130:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800c134:	d821      	bhi.n	800c17a <_strtod_l+0xb5a>
 800c136:	a328      	add	r3, pc, #160	@ (adr r3, 800c1d8 <_strtod_l+0xbb8>)
 800c138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c13c:	4630      	mov	r0, r6
 800c13e:	4639      	mov	r1, r7
 800c140:	f7f4 fcee 	bl	8000b20 <__aeabi_dcmple>
 800c144:	b1a0      	cbz	r0, 800c170 <_strtod_l+0xb50>
 800c146:	4639      	mov	r1, r7
 800c148:	4630      	mov	r0, r6
 800c14a:	f7f4 fd45 	bl	8000bd8 <__aeabi_d2uiz>
 800c14e:	2801      	cmp	r0, #1
 800c150:	bf38      	it	cc
 800c152:	2001      	movcc	r0, #1
 800c154:	f7f4 f9ee 	bl	8000534 <__aeabi_ui2d>
 800c158:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c15a:	4606      	mov	r6, r0
 800c15c:	460f      	mov	r7, r1
 800c15e:	b9fb      	cbnz	r3, 800c1a0 <_strtod_l+0xb80>
 800c160:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c164:	9014      	str	r0, [sp, #80]	@ 0x50
 800c166:	9315      	str	r3, [sp, #84]	@ 0x54
 800c168:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800c16c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c170:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c172:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800c176:	1b5b      	subs	r3, r3, r5
 800c178:	9311      	str	r3, [sp, #68]	@ 0x44
 800c17a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c17e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800c182:	f001 f903 	bl	800d38c <__ulp>
 800c186:	4650      	mov	r0, sl
 800c188:	ec53 2b10 	vmov	r2, r3, d0
 800c18c:	4659      	mov	r1, fp
 800c18e:	f7f4 fa4b 	bl	8000628 <__aeabi_dmul>
 800c192:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c196:	f7f4 f891 	bl	80002bc <__adddf3>
 800c19a:	4682      	mov	sl, r0
 800c19c:	468b      	mov	fp, r1
 800c19e:	e770      	b.n	800c082 <_strtod_l+0xa62>
 800c1a0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800c1a4:	e7e0      	b.n	800c168 <_strtod_l+0xb48>
 800c1a6:	a30e      	add	r3, pc, #56	@ (adr r3, 800c1e0 <_strtod_l+0xbc0>)
 800c1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ac:	f7f4 fcae 	bl	8000b0c <__aeabi_dcmplt>
 800c1b0:	e798      	b.n	800c0e4 <_strtod_l+0xac4>
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c1b6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c1b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c1ba:	6013      	str	r3, [r2, #0]
 800c1bc:	f7ff ba6d 	b.w	800b69a <_strtod_l+0x7a>
 800c1c0:	2a65      	cmp	r2, #101	@ 0x65
 800c1c2:	f43f ab66 	beq.w	800b892 <_strtod_l+0x272>
 800c1c6:	2a45      	cmp	r2, #69	@ 0x45
 800c1c8:	f43f ab63 	beq.w	800b892 <_strtod_l+0x272>
 800c1cc:	2301      	movs	r3, #1
 800c1ce:	f7ff bb9e 	b.w	800b90e <_strtod_l+0x2ee>
 800c1d2:	bf00      	nop
 800c1d4:	f3af 8000 	nop.w
 800c1d8:	ffc00000 	.word	0xffc00000
 800c1dc:	41dfffff 	.word	0x41dfffff
 800c1e0:	94a03595 	.word	0x94a03595
 800c1e4:	3fcfffff 	.word	0x3fcfffff

0800c1e8 <strtod>:
 800c1e8:	460a      	mov	r2, r1
 800c1ea:	4601      	mov	r1, r0
 800c1ec:	4802      	ldr	r0, [pc, #8]	@ (800c1f8 <strtod+0x10>)
 800c1ee:	4b03      	ldr	r3, [pc, #12]	@ (800c1fc <strtod+0x14>)
 800c1f0:	6800      	ldr	r0, [r0, #0]
 800c1f2:	f7ff ba15 	b.w	800b620 <_strtod_l>
 800c1f6:	bf00      	nop
 800c1f8:	2000019c 	.word	0x2000019c
 800c1fc:	20000030 	.word	0x20000030

0800c200 <std>:
 800c200:	2300      	movs	r3, #0
 800c202:	b510      	push	{r4, lr}
 800c204:	4604      	mov	r4, r0
 800c206:	e9c0 3300 	strd	r3, r3, [r0]
 800c20a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c20e:	6083      	str	r3, [r0, #8]
 800c210:	8181      	strh	r1, [r0, #12]
 800c212:	6643      	str	r3, [r0, #100]	@ 0x64
 800c214:	81c2      	strh	r2, [r0, #14]
 800c216:	6183      	str	r3, [r0, #24]
 800c218:	4619      	mov	r1, r3
 800c21a:	2208      	movs	r2, #8
 800c21c:	305c      	adds	r0, #92	@ 0x5c
 800c21e:	f000 f8f4 	bl	800c40a <memset>
 800c222:	4b0d      	ldr	r3, [pc, #52]	@ (800c258 <std+0x58>)
 800c224:	6263      	str	r3, [r4, #36]	@ 0x24
 800c226:	4b0d      	ldr	r3, [pc, #52]	@ (800c25c <std+0x5c>)
 800c228:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c22a:	4b0d      	ldr	r3, [pc, #52]	@ (800c260 <std+0x60>)
 800c22c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c22e:	4b0d      	ldr	r3, [pc, #52]	@ (800c264 <std+0x64>)
 800c230:	6323      	str	r3, [r4, #48]	@ 0x30
 800c232:	4b0d      	ldr	r3, [pc, #52]	@ (800c268 <std+0x68>)
 800c234:	6224      	str	r4, [r4, #32]
 800c236:	429c      	cmp	r4, r3
 800c238:	d006      	beq.n	800c248 <std+0x48>
 800c23a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c23e:	4294      	cmp	r4, r2
 800c240:	d002      	beq.n	800c248 <std+0x48>
 800c242:	33d0      	adds	r3, #208	@ 0xd0
 800c244:	429c      	cmp	r4, r3
 800c246:	d105      	bne.n	800c254 <std+0x54>
 800c248:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c24c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c250:	f000 b976 	b.w	800c540 <__retarget_lock_init_recursive>
 800c254:	bd10      	pop	{r4, pc}
 800c256:	bf00      	nop
 800c258:	0800c385 	.word	0x0800c385
 800c25c:	0800c3a7 	.word	0x0800c3a7
 800c260:	0800c3df 	.word	0x0800c3df
 800c264:	0800c403 	.word	0x0800c403
 800c268:	20002690 	.word	0x20002690

0800c26c <stdio_exit_handler>:
 800c26c:	4a02      	ldr	r2, [pc, #8]	@ (800c278 <stdio_exit_handler+0xc>)
 800c26e:	4903      	ldr	r1, [pc, #12]	@ (800c27c <stdio_exit_handler+0x10>)
 800c270:	4803      	ldr	r0, [pc, #12]	@ (800c280 <stdio_exit_handler+0x14>)
 800c272:	f000 b869 	b.w	800c348 <_fwalk_sglue>
 800c276:	bf00      	nop
 800c278:	20000024 	.word	0x20000024
 800c27c:	0800d72d 	.word	0x0800d72d
 800c280:	200001a0 	.word	0x200001a0

0800c284 <cleanup_stdio>:
 800c284:	6841      	ldr	r1, [r0, #4]
 800c286:	4b0c      	ldr	r3, [pc, #48]	@ (800c2b8 <cleanup_stdio+0x34>)
 800c288:	4299      	cmp	r1, r3
 800c28a:	b510      	push	{r4, lr}
 800c28c:	4604      	mov	r4, r0
 800c28e:	d001      	beq.n	800c294 <cleanup_stdio+0x10>
 800c290:	f001 fa4c 	bl	800d72c <_fflush_r>
 800c294:	68a1      	ldr	r1, [r4, #8]
 800c296:	4b09      	ldr	r3, [pc, #36]	@ (800c2bc <cleanup_stdio+0x38>)
 800c298:	4299      	cmp	r1, r3
 800c29a:	d002      	beq.n	800c2a2 <cleanup_stdio+0x1e>
 800c29c:	4620      	mov	r0, r4
 800c29e:	f001 fa45 	bl	800d72c <_fflush_r>
 800c2a2:	68e1      	ldr	r1, [r4, #12]
 800c2a4:	4b06      	ldr	r3, [pc, #24]	@ (800c2c0 <cleanup_stdio+0x3c>)
 800c2a6:	4299      	cmp	r1, r3
 800c2a8:	d004      	beq.n	800c2b4 <cleanup_stdio+0x30>
 800c2aa:	4620      	mov	r0, r4
 800c2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2b0:	f001 ba3c 	b.w	800d72c <_fflush_r>
 800c2b4:	bd10      	pop	{r4, pc}
 800c2b6:	bf00      	nop
 800c2b8:	20002690 	.word	0x20002690
 800c2bc:	200026f8 	.word	0x200026f8
 800c2c0:	20002760 	.word	0x20002760

0800c2c4 <global_stdio_init.part.0>:
 800c2c4:	b510      	push	{r4, lr}
 800c2c6:	4b0b      	ldr	r3, [pc, #44]	@ (800c2f4 <global_stdio_init.part.0+0x30>)
 800c2c8:	4c0b      	ldr	r4, [pc, #44]	@ (800c2f8 <global_stdio_init.part.0+0x34>)
 800c2ca:	4a0c      	ldr	r2, [pc, #48]	@ (800c2fc <global_stdio_init.part.0+0x38>)
 800c2cc:	601a      	str	r2, [r3, #0]
 800c2ce:	4620      	mov	r0, r4
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	2104      	movs	r1, #4
 800c2d4:	f7ff ff94 	bl	800c200 <std>
 800c2d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c2dc:	2201      	movs	r2, #1
 800c2de:	2109      	movs	r1, #9
 800c2e0:	f7ff ff8e 	bl	800c200 <std>
 800c2e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c2e8:	2202      	movs	r2, #2
 800c2ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2ee:	2112      	movs	r1, #18
 800c2f0:	f7ff bf86 	b.w	800c200 <std>
 800c2f4:	200027c8 	.word	0x200027c8
 800c2f8:	20002690 	.word	0x20002690
 800c2fc:	0800c26d 	.word	0x0800c26d

0800c300 <__sfp_lock_acquire>:
 800c300:	4801      	ldr	r0, [pc, #4]	@ (800c308 <__sfp_lock_acquire+0x8>)
 800c302:	f000 b91e 	b.w	800c542 <__retarget_lock_acquire_recursive>
 800c306:	bf00      	nop
 800c308:	200027d1 	.word	0x200027d1

0800c30c <__sfp_lock_release>:
 800c30c:	4801      	ldr	r0, [pc, #4]	@ (800c314 <__sfp_lock_release+0x8>)
 800c30e:	f000 b919 	b.w	800c544 <__retarget_lock_release_recursive>
 800c312:	bf00      	nop
 800c314:	200027d1 	.word	0x200027d1

0800c318 <__sinit>:
 800c318:	b510      	push	{r4, lr}
 800c31a:	4604      	mov	r4, r0
 800c31c:	f7ff fff0 	bl	800c300 <__sfp_lock_acquire>
 800c320:	6a23      	ldr	r3, [r4, #32]
 800c322:	b11b      	cbz	r3, 800c32c <__sinit+0x14>
 800c324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c328:	f7ff bff0 	b.w	800c30c <__sfp_lock_release>
 800c32c:	4b04      	ldr	r3, [pc, #16]	@ (800c340 <__sinit+0x28>)
 800c32e:	6223      	str	r3, [r4, #32]
 800c330:	4b04      	ldr	r3, [pc, #16]	@ (800c344 <__sinit+0x2c>)
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d1f5      	bne.n	800c324 <__sinit+0xc>
 800c338:	f7ff ffc4 	bl	800c2c4 <global_stdio_init.part.0>
 800c33c:	e7f2      	b.n	800c324 <__sinit+0xc>
 800c33e:	bf00      	nop
 800c340:	0800c285 	.word	0x0800c285
 800c344:	200027c8 	.word	0x200027c8

0800c348 <_fwalk_sglue>:
 800c348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c34c:	4607      	mov	r7, r0
 800c34e:	4688      	mov	r8, r1
 800c350:	4614      	mov	r4, r2
 800c352:	2600      	movs	r6, #0
 800c354:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c358:	f1b9 0901 	subs.w	r9, r9, #1
 800c35c:	d505      	bpl.n	800c36a <_fwalk_sglue+0x22>
 800c35e:	6824      	ldr	r4, [r4, #0]
 800c360:	2c00      	cmp	r4, #0
 800c362:	d1f7      	bne.n	800c354 <_fwalk_sglue+0xc>
 800c364:	4630      	mov	r0, r6
 800c366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c36a:	89ab      	ldrh	r3, [r5, #12]
 800c36c:	2b01      	cmp	r3, #1
 800c36e:	d907      	bls.n	800c380 <_fwalk_sglue+0x38>
 800c370:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c374:	3301      	adds	r3, #1
 800c376:	d003      	beq.n	800c380 <_fwalk_sglue+0x38>
 800c378:	4629      	mov	r1, r5
 800c37a:	4638      	mov	r0, r7
 800c37c:	47c0      	blx	r8
 800c37e:	4306      	orrs	r6, r0
 800c380:	3568      	adds	r5, #104	@ 0x68
 800c382:	e7e9      	b.n	800c358 <_fwalk_sglue+0x10>

0800c384 <__sread>:
 800c384:	b510      	push	{r4, lr}
 800c386:	460c      	mov	r4, r1
 800c388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c38c:	f000 f87a 	bl	800c484 <_read_r>
 800c390:	2800      	cmp	r0, #0
 800c392:	bfab      	itete	ge
 800c394:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c396:	89a3      	ldrhlt	r3, [r4, #12]
 800c398:	181b      	addge	r3, r3, r0
 800c39a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c39e:	bfac      	ite	ge
 800c3a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c3a2:	81a3      	strhlt	r3, [r4, #12]
 800c3a4:	bd10      	pop	{r4, pc}

0800c3a6 <__swrite>:
 800c3a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3aa:	461f      	mov	r7, r3
 800c3ac:	898b      	ldrh	r3, [r1, #12]
 800c3ae:	05db      	lsls	r3, r3, #23
 800c3b0:	4605      	mov	r5, r0
 800c3b2:	460c      	mov	r4, r1
 800c3b4:	4616      	mov	r6, r2
 800c3b6:	d505      	bpl.n	800c3c4 <__swrite+0x1e>
 800c3b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3bc:	2302      	movs	r3, #2
 800c3be:	2200      	movs	r2, #0
 800c3c0:	f000 f84e 	bl	800c460 <_lseek_r>
 800c3c4:	89a3      	ldrh	r3, [r4, #12]
 800c3c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c3ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c3ce:	81a3      	strh	r3, [r4, #12]
 800c3d0:	4632      	mov	r2, r6
 800c3d2:	463b      	mov	r3, r7
 800c3d4:	4628      	mov	r0, r5
 800c3d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c3da:	f000 b875 	b.w	800c4c8 <_write_r>

0800c3de <__sseek>:
 800c3de:	b510      	push	{r4, lr}
 800c3e0:	460c      	mov	r4, r1
 800c3e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3e6:	f000 f83b 	bl	800c460 <_lseek_r>
 800c3ea:	1c43      	adds	r3, r0, #1
 800c3ec:	89a3      	ldrh	r3, [r4, #12]
 800c3ee:	bf15      	itete	ne
 800c3f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c3f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c3f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c3fa:	81a3      	strheq	r3, [r4, #12]
 800c3fc:	bf18      	it	ne
 800c3fe:	81a3      	strhne	r3, [r4, #12]
 800c400:	bd10      	pop	{r4, pc}

0800c402 <__sclose>:
 800c402:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c406:	f000 b81b 	b.w	800c440 <_close_r>

0800c40a <memset>:
 800c40a:	4402      	add	r2, r0
 800c40c:	4603      	mov	r3, r0
 800c40e:	4293      	cmp	r3, r2
 800c410:	d100      	bne.n	800c414 <memset+0xa>
 800c412:	4770      	bx	lr
 800c414:	f803 1b01 	strb.w	r1, [r3], #1
 800c418:	e7f9      	b.n	800c40e <memset+0x4>

0800c41a <strncmp>:
 800c41a:	b510      	push	{r4, lr}
 800c41c:	b16a      	cbz	r2, 800c43a <strncmp+0x20>
 800c41e:	3901      	subs	r1, #1
 800c420:	1884      	adds	r4, r0, r2
 800c422:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c426:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c42a:	429a      	cmp	r2, r3
 800c42c:	d103      	bne.n	800c436 <strncmp+0x1c>
 800c42e:	42a0      	cmp	r0, r4
 800c430:	d001      	beq.n	800c436 <strncmp+0x1c>
 800c432:	2a00      	cmp	r2, #0
 800c434:	d1f5      	bne.n	800c422 <strncmp+0x8>
 800c436:	1ad0      	subs	r0, r2, r3
 800c438:	bd10      	pop	{r4, pc}
 800c43a:	4610      	mov	r0, r2
 800c43c:	e7fc      	b.n	800c438 <strncmp+0x1e>
	...

0800c440 <_close_r>:
 800c440:	b538      	push	{r3, r4, r5, lr}
 800c442:	4d06      	ldr	r5, [pc, #24]	@ (800c45c <_close_r+0x1c>)
 800c444:	2300      	movs	r3, #0
 800c446:	4604      	mov	r4, r0
 800c448:	4608      	mov	r0, r1
 800c44a:	602b      	str	r3, [r5, #0]
 800c44c:	f7f9 fdc4 	bl	8005fd8 <_close>
 800c450:	1c43      	adds	r3, r0, #1
 800c452:	d102      	bne.n	800c45a <_close_r+0x1a>
 800c454:	682b      	ldr	r3, [r5, #0]
 800c456:	b103      	cbz	r3, 800c45a <_close_r+0x1a>
 800c458:	6023      	str	r3, [r4, #0]
 800c45a:	bd38      	pop	{r3, r4, r5, pc}
 800c45c:	200027cc 	.word	0x200027cc

0800c460 <_lseek_r>:
 800c460:	b538      	push	{r3, r4, r5, lr}
 800c462:	4d07      	ldr	r5, [pc, #28]	@ (800c480 <_lseek_r+0x20>)
 800c464:	4604      	mov	r4, r0
 800c466:	4608      	mov	r0, r1
 800c468:	4611      	mov	r1, r2
 800c46a:	2200      	movs	r2, #0
 800c46c:	602a      	str	r2, [r5, #0]
 800c46e:	461a      	mov	r2, r3
 800c470:	f7f9 fdd9 	bl	8006026 <_lseek>
 800c474:	1c43      	adds	r3, r0, #1
 800c476:	d102      	bne.n	800c47e <_lseek_r+0x1e>
 800c478:	682b      	ldr	r3, [r5, #0]
 800c47a:	b103      	cbz	r3, 800c47e <_lseek_r+0x1e>
 800c47c:	6023      	str	r3, [r4, #0]
 800c47e:	bd38      	pop	{r3, r4, r5, pc}
 800c480:	200027cc 	.word	0x200027cc

0800c484 <_read_r>:
 800c484:	b538      	push	{r3, r4, r5, lr}
 800c486:	4d07      	ldr	r5, [pc, #28]	@ (800c4a4 <_read_r+0x20>)
 800c488:	4604      	mov	r4, r0
 800c48a:	4608      	mov	r0, r1
 800c48c:	4611      	mov	r1, r2
 800c48e:	2200      	movs	r2, #0
 800c490:	602a      	str	r2, [r5, #0]
 800c492:	461a      	mov	r2, r3
 800c494:	f7f9 fd67 	bl	8005f66 <_read>
 800c498:	1c43      	adds	r3, r0, #1
 800c49a:	d102      	bne.n	800c4a2 <_read_r+0x1e>
 800c49c:	682b      	ldr	r3, [r5, #0]
 800c49e:	b103      	cbz	r3, 800c4a2 <_read_r+0x1e>
 800c4a0:	6023      	str	r3, [r4, #0]
 800c4a2:	bd38      	pop	{r3, r4, r5, pc}
 800c4a4:	200027cc 	.word	0x200027cc

0800c4a8 <_sbrk_r>:
 800c4a8:	b538      	push	{r3, r4, r5, lr}
 800c4aa:	4d06      	ldr	r5, [pc, #24]	@ (800c4c4 <_sbrk_r+0x1c>)
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	4604      	mov	r4, r0
 800c4b0:	4608      	mov	r0, r1
 800c4b2:	602b      	str	r3, [r5, #0]
 800c4b4:	f7f9 fdc4 	bl	8006040 <_sbrk>
 800c4b8:	1c43      	adds	r3, r0, #1
 800c4ba:	d102      	bne.n	800c4c2 <_sbrk_r+0x1a>
 800c4bc:	682b      	ldr	r3, [r5, #0]
 800c4be:	b103      	cbz	r3, 800c4c2 <_sbrk_r+0x1a>
 800c4c0:	6023      	str	r3, [r4, #0]
 800c4c2:	bd38      	pop	{r3, r4, r5, pc}
 800c4c4:	200027cc 	.word	0x200027cc

0800c4c8 <_write_r>:
 800c4c8:	b538      	push	{r3, r4, r5, lr}
 800c4ca:	4d07      	ldr	r5, [pc, #28]	@ (800c4e8 <_write_r+0x20>)
 800c4cc:	4604      	mov	r4, r0
 800c4ce:	4608      	mov	r0, r1
 800c4d0:	4611      	mov	r1, r2
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	602a      	str	r2, [r5, #0]
 800c4d6:	461a      	mov	r2, r3
 800c4d8:	f7f9 fd62 	bl	8005fa0 <_write>
 800c4dc:	1c43      	adds	r3, r0, #1
 800c4de:	d102      	bne.n	800c4e6 <_write_r+0x1e>
 800c4e0:	682b      	ldr	r3, [r5, #0]
 800c4e2:	b103      	cbz	r3, 800c4e6 <_write_r+0x1e>
 800c4e4:	6023      	str	r3, [r4, #0]
 800c4e6:	bd38      	pop	{r3, r4, r5, pc}
 800c4e8:	200027cc 	.word	0x200027cc

0800c4ec <__errno>:
 800c4ec:	4b01      	ldr	r3, [pc, #4]	@ (800c4f4 <__errno+0x8>)
 800c4ee:	6818      	ldr	r0, [r3, #0]
 800c4f0:	4770      	bx	lr
 800c4f2:	bf00      	nop
 800c4f4:	2000019c 	.word	0x2000019c

0800c4f8 <__libc_init_array>:
 800c4f8:	b570      	push	{r4, r5, r6, lr}
 800c4fa:	4d0d      	ldr	r5, [pc, #52]	@ (800c530 <__libc_init_array+0x38>)
 800c4fc:	4c0d      	ldr	r4, [pc, #52]	@ (800c534 <__libc_init_array+0x3c>)
 800c4fe:	1b64      	subs	r4, r4, r5
 800c500:	10a4      	asrs	r4, r4, #2
 800c502:	2600      	movs	r6, #0
 800c504:	42a6      	cmp	r6, r4
 800c506:	d109      	bne.n	800c51c <__libc_init_array+0x24>
 800c508:	4d0b      	ldr	r5, [pc, #44]	@ (800c538 <__libc_init_array+0x40>)
 800c50a:	4c0c      	ldr	r4, [pc, #48]	@ (800c53c <__libc_init_array+0x44>)
 800c50c:	f002 fea8 	bl	800f260 <_init>
 800c510:	1b64      	subs	r4, r4, r5
 800c512:	10a4      	asrs	r4, r4, #2
 800c514:	2600      	movs	r6, #0
 800c516:	42a6      	cmp	r6, r4
 800c518:	d105      	bne.n	800c526 <__libc_init_array+0x2e>
 800c51a:	bd70      	pop	{r4, r5, r6, pc}
 800c51c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c520:	4798      	blx	r3
 800c522:	3601      	adds	r6, #1
 800c524:	e7ee      	b.n	800c504 <__libc_init_array+0xc>
 800c526:	f855 3b04 	ldr.w	r3, [r5], #4
 800c52a:	4798      	blx	r3
 800c52c:	3601      	adds	r6, #1
 800c52e:	e7f2      	b.n	800c516 <__libc_init_array+0x1e>
 800c530:	0800f708 	.word	0x0800f708
 800c534:	0800f708 	.word	0x0800f708
 800c538:	0800f708 	.word	0x0800f708
 800c53c:	0800f70c 	.word	0x0800f70c

0800c540 <__retarget_lock_init_recursive>:
 800c540:	4770      	bx	lr

0800c542 <__retarget_lock_acquire_recursive>:
 800c542:	4770      	bx	lr

0800c544 <__retarget_lock_release_recursive>:
 800c544:	4770      	bx	lr

0800c546 <memcpy>:
 800c546:	440a      	add	r2, r1
 800c548:	4291      	cmp	r1, r2
 800c54a:	f100 33ff 	add.w	r3, r0, #4294967295
 800c54e:	d100      	bne.n	800c552 <memcpy+0xc>
 800c550:	4770      	bx	lr
 800c552:	b510      	push	{r4, lr}
 800c554:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c558:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c55c:	4291      	cmp	r1, r2
 800c55e:	d1f9      	bne.n	800c554 <memcpy+0xe>
 800c560:	bd10      	pop	{r4, pc}
 800c562:	0000      	movs	r0, r0
 800c564:	0000      	movs	r0, r0
	...

0800c568 <nan>:
 800c568:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c570 <nan+0x8>
 800c56c:	4770      	bx	lr
 800c56e:	bf00      	nop
 800c570:	00000000 	.word	0x00000000
 800c574:	7ff80000 	.word	0x7ff80000

0800c578 <_free_r>:
 800c578:	b538      	push	{r3, r4, r5, lr}
 800c57a:	4605      	mov	r5, r0
 800c57c:	2900      	cmp	r1, #0
 800c57e:	d041      	beq.n	800c604 <_free_r+0x8c>
 800c580:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c584:	1f0c      	subs	r4, r1, #4
 800c586:	2b00      	cmp	r3, #0
 800c588:	bfb8      	it	lt
 800c58a:	18e4      	addlt	r4, r4, r3
 800c58c:	f7ff f81c 	bl	800b5c8 <__malloc_lock>
 800c590:	4a1d      	ldr	r2, [pc, #116]	@ (800c608 <_free_r+0x90>)
 800c592:	6813      	ldr	r3, [r2, #0]
 800c594:	b933      	cbnz	r3, 800c5a4 <_free_r+0x2c>
 800c596:	6063      	str	r3, [r4, #4]
 800c598:	6014      	str	r4, [r2, #0]
 800c59a:	4628      	mov	r0, r5
 800c59c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c5a0:	f7ff b818 	b.w	800b5d4 <__malloc_unlock>
 800c5a4:	42a3      	cmp	r3, r4
 800c5a6:	d908      	bls.n	800c5ba <_free_r+0x42>
 800c5a8:	6820      	ldr	r0, [r4, #0]
 800c5aa:	1821      	adds	r1, r4, r0
 800c5ac:	428b      	cmp	r3, r1
 800c5ae:	bf01      	itttt	eq
 800c5b0:	6819      	ldreq	r1, [r3, #0]
 800c5b2:	685b      	ldreq	r3, [r3, #4]
 800c5b4:	1809      	addeq	r1, r1, r0
 800c5b6:	6021      	streq	r1, [r4, #0]
 800c5b8:	e7ed      	b.n	800c596 <_free_r+0x1e>
 800c5ba:	461a      	mov	r2, r3
 800c5bc:	685b      	ldr	r3, [r3, #4]
 800c5be:	b10b      	cbz	r3, 800c5c4 <_free_r+0x4c>
 800c5c0:	42a3      	cmp	r3, r4
 800c5c2:	d9fa      	bls.n	800c5ba <_free_r+0x42>
 800c5c4:	6811      	ldr	r1, [r2, #0]
 800c5c6:	1850      	adds	r0, r2, r1
 800c5c8:	42a0      	cmp	r0, r4
 800c5ca:	d10b      	bne.n	800c5e4 <_free_r+0x6c>
 800c5cc:	6820      	ldr	r0, [r4, #0]
 800c5ce:	4401      	add	r1, r0
 800c5d0:	1850      	adds	r0, r2, r1
 800c5d2:	4283      	cmp	r3, r0
 800c5d4:	6011      	str	r1, [r2, #0]
 800c5d6:	d1e0      	bne.n	800c59a <_free_r+0x22>
 800c5d8:	6818      	ldr	r0, [r3, #0]
 800c5da:	685b      	ldr	r3, [r3, #4]
 800c5dc:	6053      	str	r3, [r2, #4]
 800c5de:	4408      	add	r0, r1
 800c5e0:	6010      	str	r0, [r2, #0]
 800c5e2:	e7da      	b.n	800c59a <_free_r+0x22>
 800c5e4:	d902      	bls.n	800c5ec <_free_r+0x74>
 800c5e6:	230c      	movs	r3, #12
 800c5e8:	602b      	str	r3, [r5, #0]
 800c5ea:	e7d6      	b.n	800c59a <_free_r+0x22>
 800c5ec:	6820      	ldr	r0, [r4, #0]
 800c5ee:	1821      	adds	r1, r4, r0
 800c5f0:	428b      	cmp	r3, r1
 800c5f2:	bf04      	itt	eq
 800c5f4:	6819      	ldreq	r1, [r3, #0]
 800c5f6:	685b      	ldreq	r3, [r3, #4]
 800c5f8:	6063      	str	r3, [r4, #4]
 800c5fa:	bf04      	itt	eq
 800c5fc:	1809      	addeq	r1, r1, r0
 800c5fe:	6021      	streq	r1, [r4, #0]
 800c600:	6054      	str	r4, [r2, #4]
 800c602:	e7ca      	b.n	800c59a <_free_r+0x22>
 800c604:	bd38      	pop	{r3, r4, r5, pc}
 800c606:	bf00      	nop
 800c608:	2000268c 	.word	0x2000268c

0800c60c <rshift>:
 800c60c:	6903      	ldr	r3, [r0, #16]
 800c60e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c612:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c616:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c61a:	f100 0414 	add.w	r4, r0, #20
 800c61e:	dd45      	ble.n	800c6ac <rshift+0xa0>
 800c620:	f011 011f 	ands.w	r1, r1, #31
 800c624:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c628:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c62c:	d10c      	bne.n	800c648 <rshift+0x3c>
 800c62e:	f100 0710 	add.w	r7, r0, #16
 800c632:	4629      	mov	r1, r5
 800c634:	42b1      	cmp	r1, r6
 800c636:	d334      	bcc.n	800c6a2 <rshift+0x96>
 800c638:	1a9b      	subs	r3, r3, r2
 800c63a:	009b      	lsls	r3, r3, #2
 800c63c:	1eea      	subs	r2, r5, #3
 800c63e:	4296      	cmp	r6, r2
 800c640:	bf38      	it	cc
 800c642:	2300      	movcc	r3, #0
 800c644:	4423      	add	r3, r4
 800c646:	e015      	b.n	800c674 <rshift+0x68>
 800c648:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c64c:	f1c1 0820 	rsb	r8, r1, #32
 800c650:	40cf      	lsrs	r7, r1
 800c652:	f105 0e04 	add.w	lr, r5, #4
 800c656:	46a1      	mov	r9, r4
 800c658:	4576      	cmp	r6, lr
 800c65a:	46f4      	mov	ip, lr
 800c65c:	d815      	bhi.n	800c68a <rshift+0x7e>
 800c65e:	1a9a      	subs	r2, r3, r2
 800c660:	0092      	lsls	r2, r2, #2
 800c662:	3a04      	subs	r2, #4
 800c664:	3501      	adds	r5, #1
 800c666:	42ae      	cmp	r6, r5
 800c668:	bf38      	it	cc
 800c66a:	2200      	movcc	r2, #0
 800c66c:	18a3      	adds	r3, r4, r2
 800c66e:	50a7      	str	r7, [r4, r2]
 800c670:	b107      	cbz	r7, 800c674 <rshift+0x68>
 800c672:	3304      	adds	r3, #4
 800c674:	1b1a      	subs	r2, r3, r4
 800c676:	42a3      	cmp	r3, r4
 800c678:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c67c:	bf08      	it	eq
 800c67e:	2300      	moveq	r3, #0
 800c680:	6102      	str	r2, [r0, #16]
 800c682:	bf08      	it	eq
 800c684:	6143      	streq	r3, [r0, #20]
 800c686:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c68a:	f8dc c000 	ldr.w	ip, [ip]
 800c68e:	fa0c fc08 	lsl.w	ip, ip, r8
 800c692:	ea4c 0707 	orr.w	r7, ip, r7
 800c696:	f849 7b04 	str.w	r7, [r9], #4
 800c69a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c69e:	40cf      	lsrs	r7, r1
 800c6a0:	e7da      	b.n	800c658 <rshift+0x4c>
 800c6a2:	f851 cb04 	ldr.w	ip, [r1], #4
 800c6a6:	f847 cf04 	str.w	ip, [r7, #4]!
 800c6aa:	e7c3      	b.n	800c634 <rshift+0x28>
 800c6ac:	4623      	mov	r3, r4
 800c6ae:	e7e1      	b.n	800c674 <rshift+0x68>

0800c6b0 <__hexdig_fun>:
 800c6b0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c6b4:	2b09      	cmp	r3, #9
 800c6b6:	d802      	bhi.n	800c6be <__hexdig_fun+0xe>
 800c6b8:	3820      	subs	r0, #32
 800c6ba:	b2c0      	uxtb	r0, r0
 800c6bc:	4770      	bx	lr
 800c6be:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c6c2:	2b05      	cmp	r3, #5
 800c6c4:	d801      	bhi.n	800c6ca <__hexdig_fun+0x1a>
 800c6c6:	3847      	subs	r0, #71	@ 0x47
 800c6c8:	e7f7      	b.n	800c6ba <__hexdig_fun+0xa>
 800c6ca:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c6ce:	2b05      	cmp	r3, #5
 800c6d0:	d801      	bhi.n	800c6d6 <__hexdig_fun+0x26>
 800c6d2:	3827      	subs	r0, #39	@ 0x27
 800c6d4:	e7f1      	b.n	800c6ba <__hexdig_fun+0xa>
 800c6d6:	2000      	movs	r0, #0
 800c6d8:	4770      	bx	lr
	...

0800c6dc <__gethex>:
 800c6dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6e0:	b085      	sub	sp, #20
 800c6e2:	468a      	mov	sl, r1
 800c6e4:	9302      	str	r3, [sp, #8]
 800c6e6:	680b      	ldr	r3, [r1, #0]
 800c6e8:	9001      	str	r0, [sp, #4]
 800c6ea:	4690      	mov	r8, r2
 800c6ec:	1c9c      	adds	r4, r3, #2
 800c6ee:	46a1      	mov	r9, r4
 800c6f0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c6f4:	2830      	cmp	r0, #48	@ 0x30
 800c6f6:	d0fa      	beq.n	800c6ee <__gethex+0x12>
 800c6f8:	eba9 0303 	sub.w	r3, r9, r3
 800c6fc:	f1a3 0b02 	sub.w	fp, r3, #2
 800c700:	f7ff ffd6 	bl	800c6b0 <__hexdig_fun>
 800c704:	4605      	mov	r5, r0
 800c706:	2800      	cmp	r0, #0
 800c708:	d168      	bne.n	800c7dc <__gethex+0x100>
 800c70a:	49a0      	ldr	r1, [pc, #640]	@ (800c98c <__gethex+0x2b0>)
 800c70c:	2201      	movs	r2, #1
 800c70e:	4648      	mov	r0, r9
 800c710:	f7ff fe83 	bl	800c41a <strncmp>
 800c714:	4607      	mov	r7, r0
 800c716:	2800      	cmp	r0, #0
 800c718:	d167      	bne.n	800c7ea <__gethex+0x10e>
 800c71a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c71e:	4626      	mov	r6, r4
 800c720:	f7ff ffc6 	bl	800c6b0 <__hexdig_fun>
 800c724:	2800      	cmp	r0, #0
 800c726:	d062      	beq.n	800c7ee <__gethex+0x112>
 800c728:	4623      	mov	r3, r4
 800c72a:	7818      	ldrb	r0, [r3, #0]
 800c72c:	2830      	cmp	r0, #48	@ 0x30
 800c72e:	4699      	mov	r9, r3
 800c730:	f103 0301 	add.w	r3, r3, #1
 800c734:	d0f9      	beq.n	800c72a <__gethex+0x4e>
 800c736:	f7ff ffbb 	bl	800c6b0 <__hexdig_fun>
 800c73a:	fab0 f580 	clz	r5, r0
 800c73e:	096d      	lsrs	r5, r5, #5
 800c740:	f04f 0b01 	mov.w	fp, #1
 800c744:	464a      	mov	r2, r9
 800c746:	4616      	mov	r6, r2
 800c748:	3201      	adds	r2, #1
 800c74a:	7830      	ldrb	r0, [r6, #0]
 800c74c:	f7ff ffb0 	bl	800c6b0 <__hexdig_fun>
 800c750:	2800      	cmp	r0, #0
 800c752:	d1f8      	bne.n	800c746 <__gethex+0x6a>
 800c754:	498d      	ldr	r1, [pc, #564]	@ (800c98c <__gethex+0x2b0>)
 800c756:	2201      	movs	r2, #1
 800c758:	4630      	mov	r0, r6
 800c75a:	f7ff fe5e 	bl	800c41a <strncmp>
 800c75e:	2800      	cmp	r0, #0
 800c760:	d13f      	bne.n	800c7e2 <__gethex+0x106>
 800c762:	b944      	cbnz	r4, 800c776 <__gethex+0x9a>
 800c764:	1c74      	adds	r4, r6, #1
 800c766:	4622      	mov	r2, r4
 800c768:	4616      	mov	r6, r2
 800c76a:	3201      	adds	r2, #1
 800c76c:	7830      	ldrb	r0, [r6, #0]
 800c76e:	f7ff ff9f 	bl	800c6b0 <__hexdig_fun>
 800c772:	2800      	cmp	r0, #0
 800c774:	d1f8      	bne.n	800c768 <__gethex+0x8c>
 800c776:	1ba4      	subs	r4, r4, r6
 800c778:	00a7      	lsls	r7, r4, #2
 800c77a:	7833      	ldrb	r3, [r6, #0]
 800c77c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c780:	2b50      	cmp	r3, #80	@ 0x50
 800c782:	d13e      	bne.n	800c802 <__gethex+0x126>
 800c784:	7873      	ldrb	r3, [r6, #1]
 800c786:	2b2b      	cmp	r3, #43	@ 0x2b
 800c788:	d033      	beq.n	800c7f2 <__gethex+0x116>
 800c78a:	2b2d      	cmp	r3, #45	@ 0x2d
 800c78c:	d034      	beq.n	800c7f8 <__gethex+0x11c>
 800c78e:	1c71      	adds	r1, r6, #1
 800c790:	2400      	movs	r4, #0
 800c792:	7808      	ldrb	r0, [r1, #0]
 800c794:	f7ff ff8c 	bl	800c6b0 <__hexdig_fun>
 800c798:	1e43      	subs	r3, r0, #1
 800c79a:	b2db      	uxtb	r3, r3
 800c79c:	2b18      	cmp	r3, #24
 800c79e:	d830      	bhi.n	800c802 <__gethex+0x126>
 800c7a0:	f1a0 0210 	sub.w	r2, r0, #16
 800c7a4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c7a8:	f7ff ff82 	bl	800c6b0 <__hexdig_fun>
 800c7ac:	f100 3cff 	add.w	ip, r0, #4294967295
 800c7b0:	fa5f fc8c 	uxtb.w	ip, ip
 800c7b4:	f1bc 0f18 	cmp.w	ip, #24
 800c7b8:	f04f 030a 	mov.w	r3, #10
 800c7bc:	d91e      	bls.n	800c7fc <__gethex+0x120>
 800c7be:	b104      	cbz	r4, 800c7c2 <__gethex+0xe6>
 800c7c0:	4252      	negs	r2, r2
 800c7c2:	4417      	add	r7, r2
 800c7c4:	f8ca 1000 	str.w	r1, [sl]
 800c7c8:	b1ed      	cbz	r5, 800c806 <__gethex+0x12a>
 800c7ca:	f1bb 0f00 	cmp.w	fp, #0
 800c7ce:	bf0c      	ite	eq
 800c7d0:	2506      	moveq	r5, #6
 800c7d2:	2500      	movne	r5, #0
 800c7d4:	4628      	mov	r0, r5
 800c7d6:	b005      	add	sp, #20
 800c7d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7dc:	2500      	movs	r5, #0
 800c7de:	462c      	mov	r4, r5
 800c7e0:	e7b0      	b.n	800c744 <__gethex+0x68>
 800c7e2:	2c00      	cmp	r4, #0
 800c7e4:	d1c7      	bne.n	800c776 <__gethex+0x9a>
 800c7e6:	4627      	mov	r7, r4
 800c7e8:	e7c7      	b.n	800c77a <__gethex+0x9e>
 800c7ea:	464e      	mov	r6, r9
 800c7ec:	462f      	mov	r7, r5
 800c7ee:	2501      	movs	r5, #1
 800c7f0:	e7c3      	b.n	800c77a <__gethex+0x9e>
 800c7f2:	2400      	movs	r4, #0
 800c7f4:	1cb1      	adds	r1, r6, #2
 800c7f6:	e7cc      	b.n	800c792 <__gethex+0xb6>
 800c7f8:	2401      	movs	r4, #1
 800c7fa:	e7fb      	b.n	800c7f4 <__gethex+0x118>
 800c7fc:	fb03 0002 	mla	r0, r3, r2, r0
 800c800:	e7ce      	b.n	800c7a0 <__gethex+0xc4>
 800c802:	4631      	mov	r1, r6
 800c804:	e7de      	b.n	800c7c4 <__gethex+0xe8>
 800c806:	eba6 0309 	sub.w	r3, r6, r9
 800c80a:	3b01      	subs	r3, #1
 800c80c:	4629      	mov	r1, r5
 800c80e:	2b07      	cmp	r3, #7
 800c810:	dc0a      	bgt.n	800c828 <__gethex+0x14c>
 800c812:	9801      	ldr	r0, [sp, #4]
 800c814:	f000 fa46 	bl	800cca4 <_Balloc>
 800c818:	4604      	mov	r4, r0
 800c81a:	b940      	cbnz	r0, 800c82e <__gethex+0x152>
 800c81c:	4b5c      	ldr	r3, [pc, #368]	@ (800c990 <__gethex+0x2b4>)
 800c81e:	4602      	mov	r2, r0
 800c820:	21e4      	movs	r1, #228	@ 0xe4
 800c822:	485c      	ldr	r0, [pc, #368]	@ (800c994 <__gethex+0x2b8>)
 800c824:	f000 ffaa 	bl	800d77c <__assert_func>
 800c828:	3101      	adds	r1, #1
 800c82a:	105b      	asrs	r3, r3, #1
 800c82c:	e7ef      	b.n	800c80e <__gethex+0x132>
 800c82e:	f100 0a14 	add.w	sl, r0, #20
 800c832:	2300      	movs	r3, #0
 800c834:	4655      	mov	r5, sl
 800c836:	469b      	mov	fp, r3
 800c838:	45b1      	cmp	r9, r6
 800c83a:	d337      	bcc.n	800c8ac <__gethex+0x1d0>
 800c83c:	f845 bb04 	str.w	fp, [r5], #4
 800c840:	eba5 050a 	sub.w	r5, r5, sl
 800c844:	10ad      	asrs	r5, r5, #2
 800c846:	6125      	str	r5, [r4, #16]
 800c848:	4658      	mov	r0, fp
 800c84a:	f000 fb1d 	bl	800ce88 <__hi0bits>
 800c84e:	016d      	lsls	r5, r5, #5
 800c850:	f8d8 6000 	ldr.w	r6, [r8]
 800c854:	1a2d      	subs	r5, r5, r0
 800c856:	42b5      	cmp	r5, r6
 800c858:	dd54      	ble.n	800c904 <__gethex+0x228>
 800c85a:	1bad      	subs	r5, r5, r6
 800c85c:	4629      	mov	r1, r5
 800c85e:	4620      	mov	r0, r4
 800c860:	f000 feb1 	bl	800d5c6 <__any_on>
 800c864:	4681      	mov	r9, r0
 800c866:	b178      	cbz	r0, 800c888 <__gethex+0x1ac>
 800c868:	1e6b      	subs	r3, r5, #1
 800c86a:	1159      	asrs	r1, r3, #5
 800c86c:	f003 021f 	and.w	r2, r3, #31
 800c870:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c874:	f04f 0901 	mov.w	r9, #1
 800c878:	fa09 f202 	lsl.w	r2, r9, r2
 800c87c:	420a      	tst	r2, r1
 800c87e:	d003      	beq.n	800c888 <__gethex+0x1ac>
 800c880:	454b      	cmp	r3, r9
 800c882:	dc36      	bgt.n	800c8f2 <__gethex+0x216>
 800c884:	f04f 0902 	mov.w	r9, #2
 800c888:	4629      	mov	r1, r5
 800c88a:	4620      	mov	r0, r4
 800c88c:	f7ff febe 	bl	800c60c <rshift>
 800c890:	442f      	add	r7, r5
 800c892:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c896:	42bb      	cmp	r3, r7
 800c898:	da42      	bge.n	800c920 <__gethex+0x244>
 800c89a:	9801      	ldr	r0, [sp, #4]
 800c89c:	4621      	mov	r1, r4
 800c89e:	f000 fa41 	bl	800cd24 <_Bfree>
 800c8a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	6013      	str	r3, [r2, #0]
 800c8a8:	25a3      	movs	r5, #163	@ 0xa3
 800c8aa:	e793      	b.n	800c7d4 <__gethex+0xf8>
 800c8ac:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c8b0:	2a2e      	cmp	r2, #46	@ 0x2e
 800c8b2:	d012      	beq.n	800c8da <__gethex+0x1fe>
 800c8b4:	2b20      	cmp	r3, #32
 800c8b6:	d104      	bne.n	800c8c2 <__gethex+0x1e6>
 800c8b8:	f845 bb04 	str.w	fp, [r5], #4
 800c8bc:	f04f 0b00 	mov.w	fp, #0
 800c8c0:	465b      	mov	r3, fp
 800c8c2:	7830      	ldrb	r0, [r6, #0]
 800c8c4:	9303      	str	r3, [sp, #12]
 800c8c6:	f7ff fef3 	bl	800c6b0 <__hexdig_fun>
 800c8ca:	9b03      	ldr	r3, [sp, #12]
 800c8cc:	f000 000f 	and.w	r0, r0, #15
 800c8d0:	4098      	lsls	r0, r3
 800c8d2:	ea4b 0b00 	orr.w	fp, fp, r0
 800c8d6:	3304      	adds	r3, #4
 800c8d8:	e7ae      	b.n	800c838 <__gethex+0x15c>
 800c8da:	45b1      	cmp	r9, r6
 800c8dc:	d8ea      	bhi.n	800c8b4 <__gethex+0x1d8>
 800c8de:	492b      	ldr	r1, [pc, #172]	@ (800c98c <__gethex+0x2b0>)
 800c8e0:	9303      	str	r3, [sp, #12]
 800c8e2:	2201      	movs	r2, #1
 800c8e4:	4630      	mov	r0, r6
 800c8e6:	f7ff fd98 	bl	800c41a <strncmp>
 800c8ea:	9b03      	ldr	r3, [sp, #12]
 800c8ec:	2800      	cmp	r0, #0
 800c8ee:	d1e1      	bne.n	800c8b4 <__gethex+0x1d8>
 800c8f0:	e7a2      	b.n	800c838 <__gethex+0x15c>
 800c8f2:	1ea9      	subs	r1, r5, #2
 800c8f4:	4620      	mov	r0, r4
 800c8f6:	f000 fe66 	bl	800d5c6 <__any_on>
 800c8fa:	2800      	cmp	r0, #0
 800c8fc:	d0c2      	beq.n	800c884 <__gethex+0x1a8>
 800c8fe:	f04f 0903 	mov.w	r9, #3
 800c902:	e7c1      	b.n	800c888 <__gethex+0x1ac>
 800c904:	da09      	bge.n	800c91a <__gethex+0x23e>
 800c906:	1b75      	subs	r5, r6, r5
 800c908:	4621      	mov	r1, r4
 800c90a:	9801      	ldr	r0, [sp, #4]
 800c90c:	462a      	mov	r2, r5
 800c90e:	f000 fc21 	bl	800d154 <__lshift>
 800c912:	1b7f      	subs	r7, r7, r5
 800c914:	4604      	mov	r4, r0
 800c916:	f100 0a14 	add.w	sl, r0, #20
 800c91a:	f04f 0900 	mov.w	r9, #0
 800c91e:	e7b8      	b.n	800c892 <__gethex+0x1b6>
 800c920:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c924:	42bd      	cmp	r5, r7
 800c926:	dd6f      	ble.n	800ca08 <__gethex+0x32c>
 800c928:	1bed      	subs	r5, r5, r7
 800c92a:	42ae      	cmp	r6, r5
 800c92c:	dc34      	bgt.n	800c998 <__gethex+0x2bc>
 800c92e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c932:	2b02      	cmp	r3, #2
 800c934:	d022      	beq.n	800c97c <__gethex+0x2a0>
 800c936:	2b03      	cmp	r3, #3
 800c938:	d024      	beq.n	800c984 <__gethex+0x2a8>
 800c93a:	2b01      	cmp	r3, #1
 800c93c:	d115      	bne.n	800c96a <__gethex+0x28e>
 800c93e:	42ae      	cmp	r6, r5
 800c940:	d113      	bne.n	800c96a <__gethex+0x28e>
 800c942:	2e01      	cmp	r6, #1
 800c944:	d10b      	bne.n	800c95e <__gethex+0x282>
 800c946:	9a02      	ldr	r2, [sp, #8]
 800c948:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c94c:	6013      	str	r3, [r2, #0]
 800c94e:	2301      	movs	r3, #1
 800c950:	6123      	str	r3, [r4, #16]
 800c952:	f8ca 3000 	str.w	r3, [sl]
 800c956:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c958:	2562      	movs	r5, #98	@ 0x62
 800c95a:	601c      	str	r4, [r3, #0]
 800c95c:	e73a      	b.n	800c7d4 <__gethex+0xf8>
 800c95e:	1e71      	subs	r1, r6, #1
 800c960:	4620      	mov	r0, r4
 800c962:	f000 fe30 	bl	800d5c6 <__any_on>
 800c966:	2800      	cmp	r0, #0
 800c968:	d1ed      	bne.n	800c946 <__gethex+0x26a>
 800c96a:	9801      	ldr	r0, [sp, #4]
 800c96c:	4621      	mov	r1, r4
 800c96e:	f000 f9d9 	bl	800cd24 <_Bfree>
 800c972:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c974:	2300      	movs	r3, #0
 800c976:	6013      	str	r3, [r2, #0]
 800c978:	2550      	movs	r5, #80	@ 0x50
 800c97a:	e72b      	b.n	800c7d4 <__gethex+0xf8>
 800c97c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d1f3      	bne.n	800c96a <__gethex+0x28e>
 800c982:	e7e0      	b.n	800c946 <__gethex+0x26a>
 800c984:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c986:	2b00      	cmp	r3, #0
 800c988:	d1dd      	bne.n	800c946 <__gethex+0x26a>
 800c98a:	e7ee      	b.n	800c96a <__gethex+0x28e>
 800c98c:	0800f2e0 	.word	0x0800f2e0
 800c990:	0800f348 	.word	0x0800f348
 800c994:	0800f359 	.word	0x0800f359
 800c998:	1e6f      	subs	r7, r5, #1
 800c99a:	f1b9 0f00 	cmp.w	r9, #0
 800c99e:	d130      	bne.n	800ca02 <__gethex+0x326>
 800c9a0:	b127      	cbz	r7, 800c9ac <__gethex+0x2d0>
 800c9a2:	4639      	mov	r1, r7
 800c9a4:	4620      	mov	r0, r4
 800c9a6:	f000 fe0e 	bl	800d5c6 <__any_on>
 800c9aa:	4681      	mov	r9, r0
 800c9ac:	117a      	asrs	r2, r7, #5
 800c9ae:	2301      	movs	r3, #1
 800c9b0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c9b4:	f007 071f 	and.w	r7, r7, #31
 800c9b8:	40bb      	lsls	r3, r7
 800c9ba:	4213      	tst	r3, r2
 800c9bc:	4629      	mov	r1, r5
 800c9be:	4620      	mov	r0, r4
 800c9c0:	bf18      	it	ne
 800c9c2:	f049 0902 	orrne.w	r9, r9, #2
 800c9c6:	f7ff fe21 	bl	800c60c <rshift>
 800c9ca:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c9ce:	1b76      	subs	r6, r6, r5
 800c9d0:	2502      	movs	r5, #2
 800c9d2:	f1b9 0f00 	cmp.w	r9, #0
 800c9d6:	d047      	beq.n	800ca68 <__gethex+0x38c>
 800c9d8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c9dc:	2b02      	cmp	r3, #2
 800c9de:	d015      	beq.n	800ca0c <__gethex+0x330>
 800c9e0:	2b03      	cmp	r3, #3
 800c9e2:	d017      	beq.n	800ca14 <__gethex+0x338>
 800c9e4:	2b01      	cmp	r3, #1
 800c9e6:	d109      	bne.n	800c9fc <__gethex+0x320>
 800c9e8:	f019 0f02 	tst.w	r9, #2
 800c9ec:	d006      	beq.n	800c9fc <__gethex+0x320>
 800c9ee:	f8da 3000 	ldr.w	r3, [sl]
 800c9f2:	ea49 0903 	orr.w	r9, r9, r3
 800c9f6:	f019 0f01 	tst.w	r9, #1
 800c9fa:	d10e      	bne.n	800ca1a <__gethex+0x33e>
 800c9fc:	f045 0510 	orr.w	r5, r5, #16
 800ca00:	e032      	b.n	800ca68 <__gethex+0x38c>
 800ca02:	f04f 0901 	mov.w	r9, #1
 800ca06:	e7d1      	b.n	800c9ac <__gethex+0x2d0>
 800ca08:	2501      	movs	r5, #1
 800ca0a:	e7e2      	b.n	800c9d2 <__gethex+0x2f6>
 800ca0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca0e:	f1c3 0301 	rsb	r3, r3, #1
 800ca12:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ca14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d0f0      	beq.n	800c9fc <__gethex+0x320>
 800ca1a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ca1e:	f104 0314 	add.w	r3, r4, #20
 800ca22:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ca26:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ca2a:	f04f 0c00 	mov.w	ip, #0
 800ca2e:	4618      	mov	r0, r3
 800ca30:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca34:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ca38:	d01b      	beq.n	800ca72 <__gethex+0x396>
 800ca3a:	3201      	adds	r2, #1
 800ca3c:	6002      	str	r2, [r0, #0]
 800ca3e:	2d02      	cmp	r5, #2
 800ca40:	f104 0314 	add.w	r3, r4, #20
 800ca44:	d13c      	bne.n	800cac0 <__gethex+0x3e4>
 800ca46:	f8d8 2000 	ldr.w	r2, [r8]
 800ca4a:	3a01      	subs	r2, #1
 800ca4c:	42b2      	cmp	r2, r6
 800ca4e:	d109      	bne.n	800ca64 <__gethex+0x388>
 800ca50:	1171      	asrs	r1, r6, #5
 800ca52:	2201      	movs	r2, #1
 800ca54:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ca58:	f006 061f 	and.w	r6, r6, #31
 800ca5c:	fa02 f606 	lsl.w	r6, r2, r6
 800ca60:	421e      	tst	r6, r3
 800ca62:	d13a      	bne.n	800cada <__gethex+0x3fe>
 800ca64:	f045 0520 	orr.w	r5, r5, #32
 800ca68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ca6a:	601c      	str	r4, [r3, #0]
 800ca6c:	9b02      	ldr	r3, [sp, #8]
 800ca6e:	601f      	str	r7, [r3, #0]
 800ca70:	e6b0      	b.n	800c7d4 <__gethex+0xf8>
 800ca72:	4299      	cmp	r1, r3
 800ca74:	f843 cc04 	str.w	ip, [r3, #-4]
 800ca78:	d8d9      	bhi.n	800ca2e <__gethex+0x352>
 800ca7a:	68a3      	ldr	r3, [r4, #8]
 800ca7c:	459b      	cmp	fp, r3
 800ca7e:	db17      	blt.n	800cab0 <__gethex+0x3d4>
 800ca80:	6861      	ldr	r1, [r4, #4]
 800ca82:	9801      	ldr	r0, [sp, #4]
 800ca84:	3101      	adds	r1, #1
 800ca86:	f000 f90d 	bl	800cca4 <_Balloc>
 800ca8a:	4681      	mov	r9, r0
 800ca8c:	b918      	cbnz	r0, 800ca96 <__gethex+0x3ba>
 800ca8e:	4b1a      	ldr	r3, [pc, #104]	@ (800caf8 <__gethex+0x41c>)
 800ca90:	4602      	mov	r2, r0
 800ca92:	2184      	movs	r1, #132	@ 0x84
 800ca94:	e6c5      	b.n	800c822 <__gethex+0x146>
 800ca96:	6922      	ldr	r2, [r4, #16]
 800ca98:	3202      	adds	r2, #2
 800ca9a:	f104 010c 	add.w	r1, r4, #12
 800ca9e:	0092      	lsls	r2, r2, #2
 800caa0:	300c      	adds	r0, #12
 800caa2:	f7ff fd50 	bl	800c546 <memcpy>
 800caa6:	4621      	mov	r1, r4
 800caa8:	9801      	ldr	r0, [sp, #4]
 800caaa:	f000 f93b 	bl	800cd24 <_Bfree>
 800caae:	464c      	mov	r4, r9
 800cab0:	6923      	ldr	r3, [r4, #16]
 800cab2:	1c5a      	adds	r2, r3, #1
 800cab4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cab8:	6122      	str	r2, [r4, #16]
 800caba:	2201      	movs	r2, #1
 800cabc:	615a      	str	r2, [r3, #20]
 800cabe:	e7be      	b.n	800ca3e <__gethex+0x362>
 800cac0:	6922      	ldr	r2, [r4, #16]
 800cac2:	455a      	cmp	r2, fp
 800cac4:	dd0b      	ble.n	800cade <__gethex+0x402>
 800cac6:	2101      	movs	r1, #1
 800cac8:	4620      	mov	r0, r4
 800caca:	f7ff fd9f 	bl	800c60c <rshift>
 800cace:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cad2:	3701      	adds	r7, #1
 800cad4:	42bb      	cmp	r3, r7
 800cad6:	f6ff aee0 	blt.w	800c89a <__gethex+0x1be>
 800cada:	2501      	movs	r5, #1
 800cadc:	e7c2      	b.n	800ca64 <__gethex+0x388>
 800cade:	f016 061f 	ands.w	r6, r6, #31
 800cae2:	d0fa      	beq.n	800cada <__gethex+0x3fe>
 800cae4:	4453      	add	r3, sl
 800cae6:	f1c6 0620 	rsb	r6, r6, #32
 800caea:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800caee:	f000 f9cb 	bl	800ce88 <__hi0bits>
 800caf2:	42b0      	cmp	r0, r6
 800caf4:	dbe7      	blt.n	800cac6 <__gethex+0x3ea>
 800caf6:	e7f0      	b.n	800cada <__gethex+0x3fe>
 800caf8:	0800f348 	.word	0x0800f348

0800cafc <L_shift>:
 800cafc:	f1c2 0208 	rsb	r2, r2, #8
 800cb00:	0092      	lsls	r2, r2, #2
 800cb02:	b570      	push	{r4, r5, r6, lr}
 800cb04:	f1c2 0620 	rsb	r6, r2, #32
 800cb08:	6843      	ldr	r3, [r0, #4]
 800cb0a:	6804      	ldr	r4, [r0, #0]
 800cb0c:	fa03 f506 	lsl.w	r5, r3, r6
 800cb10:	432c      	orrs	r4, r5
 800cb12:	40d3      	lsrs	r3, r2
 800cb14:	6004      	str	r4, [r0, #0]
 800cb16:	f840 3f04 	str.w	r3, [r0, #4]!
 800cb1a:	4288      	cmp	r0, r1
 800cb1c:	d3f4      	bcc.n	800cb08 <L_shift+0xc>
 800cb1e:	bd70      	pop	{r4, r5, r6, pc}

0800cb20 <__match>:
 800cb20:	b530      	push	{r4, r5, lr}
 800cb22:	6803      	ldr	r3, [r0, #0]
 800cb24:	3301      	adds	r3, #1
 800cb26:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb2a:	b914      	cbnz	r4, 800cb32 <__match+0x12>
 800cb2c:	6003      	str	r3, [r0, #0]
 800cb2e:	2001      	movs	r0, #1
 800cb30:	bd30      	pop	{r4, r5, pc}
 800cb32:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb36:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800cb3a:	2d19      	cmp	r5, #25
 800cb3c:	bf98      	it	ls
 800cb3e:	3220      	addls	r2, #32
 800cb40:	42a2      	cmp	r2, r4
 800cb42:	d0f0      	beq.n	800cb26 <__match+0x6>
 800cb44:	2000      	movs	r0, #0
 800cb46:	e7f3      	b.n	800cb30 <__match+0x10>

0800cb48 <__hexnan>:
 800cb48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb4c:	680b      	ldr	r3, [r1, #0]
 800cb4e:	6801      	ldr	r1, [r0, #0]
 800cb50:	115e      	asrs	r6, r3, #5
 800cb52:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cb56:	f013 031f 	ands.w	r3, r3, #31
 800cb5a:	b087      	sub	sp, #28
 800cb5c:	bf18      	it	ne
 800cb5e:	3604      	addne	r6, #4
 800cb60:	2500      	movs	r5, #0
 800cb62:	1f37      	subs	r7, r6, #4
 800cb64:	4682      	mov	sl, r0
 800cb66:	4690      	mov	r8, r2
 800cb68:	9301      	str	r3, [sp, #4]
 800cb6a:	f846 5c04 	str.w	r5, [r6, #-4]
 800cb6e:	46b9      	mov	r9, r7
 800cb70:	463c      	mov	r4, r7
 800cb72:	9502      	str	r5, [sp, #8]
 800cb74:	46ab      	mov	fp, r5
 800cb76:	784a      	ldrb	r2, [r1, #1]
 800cb78:	1c4b      	adds	r3, r1, #1
 800cb7a:	9303      	str	r3, [sp, #12]
 800cb7c:	b342      	cbz	r2, 800cbd0 <__hexnan+0x88>
 800cb7e:	4610      	mov	r0, r2
 800cb80:	9105      	str	r1, [sp, #20]
 800cb82:	9204      	str	r2, [sp, #16]
 800cb84:	f7ff fd94 	bl	800c6b0 <__hexdig_fun>
 800cb88:	2800      	cmp	r0, #0
 800cb8a:	d151      	bne.n	800cc30 <__hexnan+0xe8>
 800cb8c:	9a04      	ldr	r2, [sp, #16]
 800cb8e:	9905      	ldr	r1, [sp, #20]
 800cb90:	2a20      	cmp	r2, #32
 800cb92:	d818      	bhi.n	800cbc6 <__hexnan+0x7e>
 800cb94:	9b02      	ldr	r3, [sp, #8]
 800cb96:	459b      	cmp	fp, r3
 800cb98:	dd13      	ble.n	800cbc2 <__hexnan+0x7a>
 800cb9a:	454c      	cmp	r4, r9
 800cb9c:	d206      	bcs.n	800cbac <__hexnan+0x64>
 800cb9e:	2d07      	cmp	r5, #7
 800cba0:	dc04      	bgt.n	800cbac <__hexnan+0x64>
 800cba2:	462a      	mov	r2, r5
 800cba4:	4649      	mov	r1, r9
 800cba6:	4620      	mov	r0, r4
 800cba8:	f7ff ffa8 	bl	800cafc <L_shift>
 800cbac:	4544      	cmp	r4, r8
 800cbae:	d952      	bls.n	800cc56 <__hexnan+0x10e>
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	f1a4 0904 	sub.w	r9, r4, #4
 800cbb6:	f844 3c04 	str.w	r3, [r4, #-4]
 800cbba:	f8cd b008 	str.w	fp, [sp, #8]
 800cbbe:	464c      	mov	r4, r9
 800cbc0:	461d      	mov	r5, r3
 800cbc2:	9903      	ldr	r1, [sp, #12]
 800cbc4:	e7d7      	b.n	800cb76 <__hexnan+0x2e>
 800cbc6:	2a29      	cmp	r2, #41	@ 0x29
 800cbc8:	d157      	bne.n	800cc7a <__hexnan+0x132>
 800cbca:	3102      	adds	r1, #2
 800cbcc:	f8ca 1000 	str.w	r1, [sl]
 800cbd0:	f1bb 0f00 	cmp.w	fp, #0
 800cbd4:	d051      	beq.n	800cc7a <__hexnan+0x132>
 800cbd6:	454c      	cmp	r4, r9
 800cbd8:	d206      	bcs.n	800cbe8 <__hexnan+0xa0>
 800cbda:	2d07      	cmp	r5, #7
 800cbdc:	dc04      	bgt.n	800cbe8 <__hexnan+0xa0>
 800cbde:	462a      	mov	r2, r5
 800cbe0:	4649      	mov	r1, r9
 800cbe2:	4620      	mov	r0, r4
 800cbe4:	f7ff ff8a 	bl	800cafc <L_shift>
 800cbe8:	4544      	cmp	r4, r8
 800cbea:	d936      	bls.n	800cc5a <__hexnan+0x112>
 800cbec:	f1a8 0204 	sub.w	r2, r8, #4
 800cbf0:	4623      	mov	r3, r4
 800cbf2:	f853 1b04 	ldr.w	r1, [r3], #4
 800cbf6:	f842 1f04 	str.w	r1, [r2, #4]!
 800cbfa:	429f      	cmp	r7, r3
 800cbfc:	d2f9      	bcs.n	800cbf2 <__hexnan+0xaa>
 800cbfe:	1b3b      	subs	r3, r7, r4
 800cc00:	f023 0303 	bic.w	r3, r3, #3
 800cc04:	3304      	adds	r3, #4
 800cc06:	3401      	adds	r4, #1
 800cc08:	3e03      	subs	r6, #3
 800cc0a:	42b4      	cmp	r4, r6
 800cc0c:	bf88      	it	hi
 800cc0e:	2304      	movhi	r3, #4
 800cc10:	4443      	add	r3, r8
 800cc12:	2200      	movs	r2, #0
 800cc14:	f843 2b04 	str.w	r2, [r3], #4
 800cc18:	429f      	cmp	r7, r3
 800cc1a:	d2fb      	bcs.n	800cc14 <__hexnan+0xcc>
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	b91b      	cbnz	r3, 800cc28 <__hexnan+0xe0>
 800cc20:	4547      	cmp	r7, r8
 800cc22:	d128      	bne.n	800cc76 <__hexnan+0x12e>
 800cc24:	2301      	movs	r3, #1
 800cc26:	603b      	str	r3, [r7, #0]
 800cc28:	2005      	movs	r0, #5
 800cc2a:	b007      	add	sp, #28
 800cc2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc30:	3501      	adds	r5, #1
 800cc32:	2d08      	cmp	r5, #8
 800cc34:	f10b 0b01 	add.w	fp, fp, #1
 800cc38:	dd06      	ble.n	800cc48 <__hexnan+0x100>
 800cc3a:	4544      	cmp	r4, r8
 800cc3c:	d9c1      	bls.n	800cbc2 <__hexnan+0x7a>
 800cc3e:	2300      	movs	r3, #0
 800cc40:	f844 3c04 	str.w	r3, [r4, #-4]
 800cc44:	2501      	movs	r5, #1
 800cc46:	3c04      	subs	r4, #4
 800cc48:	6822      	ldr	r2, [r4, #0]
 800cc4a:	f000 000f 	and.w	r0, r0, #15
 800cc4e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800cc52:	6020      	str	r0, [r4, #0]
 800cc54:	e7b5      	b.n	800cbc2 <__hexnan+0x7a>
 800cc56:	2508      	movs	r5, #8
 800cc58:	e7b3      	b.n	800cbc2 <__hexnan+0x7a>
 800cc5a:	9b01      	ldr	r3, [sp, #4]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d0dd      	beq.n	800cc1c <__hexnan+0xd4>
 800cc60:	f1c3 0320 	rsb	r3, r3, #32
 800cc64:	f04f 32ff 	mov.w	r2, #4294967295
 800cc68:	40da      	lsrs	r2, r3
 800cc6a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800cc6e:	4013      	ands	r3, r2
 800cc70:	f846 3c04 	str.w	r3, [r6, #-4]
 800cc74:	e7d2      	b.n	800cc1c <__hexnan+0xd4>
 800cc76:	3f04      	subs	r7, #4
 800cc78:	e7d0      	b.n	800cc1c <__hexnan+0xd4>
 800cc7a:	2004      	movs	r0, #4
 800cc7c:	e7d5      	b.n	800cc2a <__hexnan+0xe2>

0800cc7e <__ascii_mbtowc>:
 800cc7e:	b082      	sub	sp, #8
 800cc80:	b901      	cbnz	r1, 800cc84 <__ascii_mbtowc+0x6>
 800cc82:	a901      	add	r1, sp, #4
 800cc84:	b142      	cbz	r2, 800cc98 <__ascii_mbtowc+0x1a>
 800cc86:	b14b      	cbz	r3, 800cc9c <__ascii_mbtowc+0x1e>
 800cc88:	7813      	ldrb	r3, [r2, #0]
 800cc8a:	600b      	str	r3, [r1, #0]
 800cc8c:	7812      	ldrb	r2, [r2, #0]
 800cc8e:	1e10      	subs	r0, r2, #0
 800cc90:	bf18      	it	ne
 800cc92:	2001      	movne	r0, #1
 800cc94:	b002      	add	sp, #8
 800cc96:	4770      	bx	lr
 800cc98:	4610      	mov	r0, r2
 800cc9a:	e7fb      	b.n	800cc94 <__ascii_mbtowc+0x16>
 800cc9c:	f06f 0001 	mvn.w	r0, #1
 800cca0:	e7f8      	b.n	800cc94 <__ascii_mbtowc+0x16>
	...

0800cca4 <_Balloc>:
 800cca4:	b570      	push	{r4, r5, r6, lr}
 800cca6:	69c6      	ldr	r6, [r0, #28]
 800cca8:	4604      	mov	r4, r0
 800ccaa:	460d      	mov	r5, r1
 800ccac:	b976      	cbnz	r6, 800cccc <_Balloc+0x28>
 800ccae:	2010      	movs	r0, #16
 800ccb0:	f7fe fbd8 	bl	800b464 <malloc>
 800ccb4:	4602      	mov	r2, r0
 800ccb6:	61e0      	str	r0, [r4, #28]
 800ccb8:	b920      	cbnz	r0, 800ccc4 <_Balloc+0x20>
 800ccba:	4b18      	ldr	r3, [pc, #96]	@ (800cd1c <_Balloc+0x78>)
 800ccbc:	4818      	ldr	r0, [pc, #96]	@ (800cd20 <_Balloc+0x7c>)
 800ccbe:	216b      	movs	r1, #107	@ 0x6b
 800ccc0:	f000 fd5c 	bl	800d77c <__assert_func>
 800ccc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ccc8:	6006      	str	r6, [r0, #0]
 800ccca:	60c6      	str	r6, [r0, #12]
 800cccc:	69e6      	ldr	r6, [r4, #28]
 800ccce:	68f3      	ldr	r3, [r6, #12]
 800ccd0:	b183      	cbz	r3, 800ccf4 <_Balloc+0x50>
 800ccd2:	69e3      	ldr	r3, [r4, #28]
 800ccd4:	68db      	ldr	r3, [r3, #12]
 800ccd6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ccda:	b9b8      	cbnz	r0, 800cd0c <_Balloc+0x68>
 800ccdc:	2101      	movs	r1, #1
 800ccde:	fa01 f605 	lsl.w	r6, r1, r5
 800cce2:	1d72      	adds	r2, r6, #5
 800cce4:	0092      	lsls	r2, r2, #2
 800cce6:	4620      	mov	r0, r4
 800cce8:	f000 fd66 	bl	800d7b8 <_calloc_r>
 800ccec:	b160      	cbz	r0, 800cd08 <_Balloc+0x64>
 800ccee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ccf2:	e00e      	b.n	800cd12 <_Balloc+0x6e>
 800ccf4:	2221      	movs	r2, #33	@ 0x21
 800ccf6:	2104      	movs	r1, #4
 800ccf8:	4620      	mov	r0, r4
 800ccfa:	f000 fd5d 	bl	800d7b8 <_calloc_r>
 800ccfe:	69e3      	ldr	r3, [r4, #28]
 800cd00:	60f0      	str	r0, [r6, #12]
 800cd02:	68db      	ldr	r3, [r3, #12]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d1e4      	bne.n	800ccd2 <_Balloc+0x2e>
 800cd08:	2000      	movs	r0, #0
 800cd0a:	bd70      	pop	{r4, r5, r6, pc}
 800cd0c:	6802      	ldr	r2, [r0, #0]
 800cd0e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cd12:	2300      	movs	r3, #0
 800cd14:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cd18:	e7f7      	b.n	800cd0a <_Balloc+0x66>
 800cd1a:	bf00      	nop
 800cd1c:	0800f3b9 	.word	0x0800f3b9
 800cd20:	0800f3d0 	.word	0x0800f3d0

0800cd24 <_Bfree>:
 800cd24:	b570      	push	{r4, r5, r6, lr}
 800cd26:	69c6      	ldr	r6, [r0, #28]
 800cd28:	4605      	mov	r5, r0
 800cd2a:	460c      	mov	r4, r1
 800cd2c:	b976      	cbnz	r6, 800cd4c <_Bfree+0x28>
 800cd2e:	2010      	movs	r0, #16
 800cd30:	f7fe fb98 	bl	800b464 <malloc>
 800cd34:	4602      	mov	r2, r0
 800cd36:	61e8      	str	r0, [r5, #28]
 800cd38:	b920      	cbnz	r0, 800cd44 <_Bfree+0x20>
 800cd3a:	4b09      	ldr	r3, [pc, #36]	@ (800cd60 <_Bfree+0x3c>)
 800cd3c:	4809      	ldr	r0, [pc, #36]	@ (800cd64 <_Bfree+0x40>)
 800cd3e:	218f      	movs	r1, #143	@ 0x8f
 800cd40:	f000 fd1c 	bl	800d77c <__assert_func>
 800cd44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cd48:	6006      	str	r6, [r0, #0]
 800cd4a:	60c6      	str	r6, [r0, #12]
 800cd4c:	b13c      	cbz	r4, 800cd5e <_Bfree+0x3a>
 800cd4e:	69eb      	ldr	r3, [r5, #28]
 800cd50:	6862      	ldr	r2, [r4, #4]
 800cd52:	68db      	ldr	r3, [r3, #12]
 800cd54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cd58:	6021      	str	r1, [r4, #0]
 800cd5a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cd5e:	bd70      	pop	{r4, r5, r6, pc}
 800cd60:	0800f3b9 	.word	0x0800f3b9
 800cd64:	0800f3d0 	.word	0x0800f3d0

0800cd68 <__multadd>:
 800cd68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd6c:	690d      	ldr	r5, [r1, #16]
 800cd6e:	4607      	mov	r7, r0
 800cd70:	460c      	mov	r4, r1
 800cd72:	461e      	mov	r6, r3
 800cd74:	f101 0c14 	add.w	ip, r1, #20
 800cd78:	2000      	movs	r0, #0
 800cd7a:	f8dc 3000 	ldr.w	r3, [ip]
 800cd7e:	b299      	uxth	r1, r3
 800cd80:	fb02 6101 	mla	r1, r2, r1, r6
 800cd84:	0c1e      	lsrs	r6, r3, #16
 800cd86:	0c0b      	lsrs	r3, r1, #16
 800cd88:	fb02 3306 	mla	r3, r2, r6, r3
 800cd8c:	b289      	uxth	r1, r1
 800cd8e:	3001      	adds	r0, #1
 800cd90:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cd94:	4285      	cmp	r5, r0
 800cd96:	f84c 1b04 	str.w	r1, [ip], #4
 800cd9a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cd9e:	dcec      	bgt.n	800cd7a <__multadd+0x12>
 800cda0:	b30e      	cbz	r6, 800cde6 <__multadd+0x7e>
 800cda2:	68a3      	ldr	r3, [r4, #8]
 800cda4:	42ab      	cmp	r3, r5
 800cda6:	dc19      	bgt.n	800cddc <__multadd+0x74>
 800cda8:	6861      	ldr	r1, [r4, #4]
 800cdaa:	4638      	mov	r0, r7
 800cdac:	3101      	adds	r1, #1
 800cdae:	f7ff ff79 	bl	800cca4 <_Balloc>
 800cdb2:	4680      	mov	r8, r0
 800cdb4:	b928      	cbnz	r0, 800cdc2 <__multadd+0x5a>
 800cdb6:	4602      	mov	r2, r0
 800cdb8:	4b0c      	ldr	r3, [pc, #48]	@ (800cdec <__multadd+0x84>)
 800cdba:	480d      	ldr	r0, [pc, #52]	@ (800cdf0 <__multadd+0x88>)
 800cdbc:	21ba      	movs	r1, #186	@ 0xba
 800cdbe:	f000 fcdd 	bl	800d77c <__assert_func>
 800cdc2:	6922      	ldr	r2, [r4, #16]
 800cdc4:	3202      	adds	r2, #2
 800cdc6:	f104 010c 	add.w	r1, r4, #12
 800cdca:	0092      	lsls	r2, r2, #2
 800cdcc:	300c      	adds	r0, #12
 800cdce:	f7ff fbba 	bl	800c546 <memcpy>
 800cdd2:	4621      	mov	r1, r4
 800cdd4:	4638      	mov	r0, r7
 800cdd6:	f7ff ffa5 	bl	800cd24 <_Bfree>
 800cdda:	4644      	mov	r4, r8
 800cddc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cde0:	3501      	adds	r5, #1
 800cde2:	615e      	str	r6, [r3, #20]
 800cde4:	6125      	str	r5, [r4, #16]
 800cde6:	4620      	mov	r0, r4
 800cde8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdec:	0800f348 	.word	0x0800f348
 800cdf0:	0800f3d0 	.word	0x0800f3d0

0800cdf4 <__s2b>:
 800cdf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cdf8:	460c      	mov	r4, r1
 800cdfa:	4615      	mov	r5, r2
 800cdfc:	461f      	mov	r7, r3
 800cdfe:	2209      	movs	r2, #9
 800ce00:	3308      	adds	r3, #8
 800ce02:	4606      	mov	r6, r0
 800ce04:	fb93 f3f2 	sdiv	r3, r3, r2
 800ce08:	2100      	movs	r1, #0
 800ce0a:	2201      	movs	r2, #1
 800ce0c:	429a      	cmp	r2, r3
 800ce0e:	db09      	blt.n	800ce24 <__s2b+0x30>
 800ce10:	4630      	mov	r0, r6
 800ce12:	f7ff ff47 	bl	800cca4 <_Balloc>
 800ce16:	b940      	cbnz	r0, 800ce2a <__s2b+0x36>
 800ce18:	4602      	mov	r2, r0
 800ce1a:	4b19      	ldr	r3, [pc, #100]	@ (800ce80 <__s2b+0x8c>)
 800ce1c:	4819      	ldr	r0, [pc, #100]	@ (800ce84 <__s2b+0x90>)
 800ce1e:	21d3      	movs	r1, #211	@ 0xd3
 800ce20:	f000 fcac 	bl	800d77c <__assert_func>
 800ce24:	0052      	lsls	r2, r2, #1
 800ce26:	3101      	adds	r1, #1
 800ce28:	e7f0      	b.n	800ce0c <__s2b+0x18>
 800ce2a:	9b08      	ldr	r3, [sp, #32]
 800ce2c:	6143      	str	r3, [r0, #20]
 800ce2e:	2d09      	cmp	r5, #9
 800ce30:	f04f 0301 	mov.w	r3, #1
 800ce34:	6103      	str	r3, [r0, #16]
 800ce36:	dd16      	ble.n	800ce66 <__s2b+0x72>
 800ce38:	f104 0909 	add.w	r9, r4, #9
 800ce3c:	46c8      	mov	r8, r9
 800ce3e:	442c      	add	r4, r5
 800ce40:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ce44:	4601      	mov	r1, r0
 800ce46:	3b30      	subs	r3, #48	@ 0x30
 800ce48:	220a      	movs	r2, #10
 800ce4a:	4630      	mov	r0, r6
 800ce4c:	f7ff ff8c 	bl	800cd68 <__multadd>
 800ce50:	45a0      	cmp	r8, r4
 800ce52:	d1f5      	bne.n	800ce40 <__s2b+0x4c>
 800ce54:	f1a5 0408 	sub.w	r4, r5, #8
 800ce58:	444c      	add	r4, r9
 800ce5a:	1b2d      	subs	r5, r5, r4
 800ce5c:	1963      	adds	r3, r4, r5
 800ce5e:	42bb      	cmp	r3, r7
 800ce60:	db04      	blt.n	800ce6c <__s2b+0x78>
 800ce62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce66:	340a      	adds	r4, #10
 800ce68:	2509      	movs	r5, #9
 800ce6a:	e7f6      	b.n	800ce5a <__s2b+0x66>
 800ce6c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ce70:	4601      	mov	r1, r0
 800ce72:	3b30      	subs	r3, #48	@ 0x30
 800ce74:	220a      	movs	r2, #10
 800ce76:	4630      	mov	r0, r6
 800ce78:	f7ff ff76 	bl	800cd68 <__multadd>
 800ce7c:	e7ee      	b.n	800ce5c <__s2b+0x68>
 800ce7e:	bf00      	nop
 800ce80:	0800f348 	.word	0x0800f348
 800ce84:	0800f3d0 	.word	0x0800f3d0

0800ce88 <__hi0bits>:
 800ce88:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ce8c:	4603      	mov	r3, r0
 800ce8e:	bf36      	itet	cc
 800ce90:	0403      	lslcc	r3, r0, #16
 800ce92:	2000      	movcs	r0, #0
 800ce94:	2010      	movcc	r0, #16
 800ce96:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ce9a:	bf3c      	itt	cc
 800ce9c:	021b      	lslcc	r3, r3, #8
 800ce9e:	3008      	addcc	r0, #8
 800cea0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cea4:	bf3c      	itt	cc
 800cea6:	011b      	lslcc	r3, r3, #4
 800cea8:	3004      	addcc	r0, #4
 800ceaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ceae:	bf3c      	itt	cc
 800ceb0:	009b      	lslcc	r3, r3, #2
 800ceb2:	3002      	addcc	r0, #2
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	db05      	blt.n	800cec4 <__hi0bits+0x3c>
 800ceb8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cebc:	f100 0001 	add.w	r0, r0, #1
 800cec0:	bf08      	it	eq
 800cec2:	2020      	moveq	r0, #32
 800cec4:	4770      	bx	lr

0800cec6 <__lo0bits>:
 800cec6:	6803      	ldr	r3, [r0, #0]
 800cec8:	4602      	mov	r2, r0
 800ceca:	f013 0007 	ands.w	r0, r3, #7
 800cece:	d00b      	beq.n	800cee8 <__lo0bits+0x22>
 800ced0:	07d9      	lsls	r1, r3, #31
 800ced2:	d421      	bmi.n	800cf18 <__lo0bits+0x52>
 800ced4:	0798      	lsls	r0, r3, #30
 800ced6:	bf49      	itett	mi
 800ced8:	085b      	lsrmi	r3, r3, #1
 800ceda:	089b      	lsrpl	r3, r3, #2
 800cedc:	2001      	movmi	r0, #1
 800cede:	6013      	strmi	r3, [r2, #0]
 800cee0:	bf5c      	itt	pl
 800cee2:	6013      	strpl	r3, [r2, #0]
 800cee4:	2002      	movpl	r0, #2
 800cee6:	4770      	bx	lr
 800cee8:	b299      	uxth	r1, r3
 800ceea:	b909      	cbnz	r1, 800cef0 <__lo0bits+0x2a>
 800ceec:	0c1b      	lsrs	r3, r3, #16
 800ceee:	2010      	movs	r0, #16
 800cef0:	b2d9      	uxtb	r1, r3
 800cef2:	b909      	cbnz	r1, 800cef8 <__lo0bits+0x32>
 800cef4:	3008      	adds	r0, #8
 800cef6:	0a1b      	lsrs	r3, r3, #8
 800cef8:	0719      	lsls	r1, r3, #28
 800cefa:	bf04      	itt	eq
 800cefc:	091b      	lsreq	r3, r3, #4
 800cefe:	3004      	addeq	r0, #4
 800cf00:	0799      	lsls	r1, r3, #30
 800cf02:	bf04      	itt	eq
 800cf04:	089b      	lsreq	r3, r3, #2
 800cf06:	3002      	addeq	r0, #2
 800cf08:	07d9      	lsls	r1, r3, #31
 800cf0a:	d403      	bmi.n	800cf14 <__lo0bits+0x4e>
 800cf0c:	085b      	lsrs	r3, r3, #1
 800cf0e:	f100 0001 	add.w	r0, r0, #1
 800cf12:	d003      	beq.n	800cf1c <__lo0bits+0x56>
 800cf14:	6013      	str	r3, [r2, #0]
 800cf16:	4770      	bx	lr
 800cf18:	2000      	movs	r0, #0
 800cf1a:	4770      	bx	lr
 800cf1c:	2020      	movs	r0, #32
 800cf1e:	4770      	bx	lr

0800cf20 <__i2b>:
 800cf20:	b510      	push	{r4, lr}
 800cf22:	460c      	mov	r4, r1
 800cf24:	2101      	movs	r1, #1
 800cf26:	f7ff febd 	bl	800cca4 <_Balloc>
 800cf2a:	4602      	mov	r2, r0
 800cf2c:	b928      	cbnz	r0, 800cf3a <__i2b+0x1a>
 800cf2e:	4b05      	ldr	r3, [pc, #20]	@ (800cf44 <__i2b+0x24>)
 800cf30:	4805      	ldr	r0, [pc, #20]	@ (800cf48 <__i2b+0x28>)
 800cf32:	f240 1145 	movw	r1, #325	@ 0x145
 800cf36:	f000 fc21 	bl	800d77c <__assert_func>
 800cf3a:	2301      	movs	r3, #1
 800cf3c:	6144      	str	r4, [r0, #20]
 800cf3e:	6103      	str	r3, [r0, #16]
 800cf40:	bd10      	pop	{r4, pc}
 800cf42:	bf00      	nop
 800cf44:	0800f348 	.word	0x0800f348
 800cf48:	0800f3d0 	.word	0x0800f3d0

0800cf4c <__multiply>:
 800cf4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf50:	4614      	mov	r4, r2
 800cf52:	690a      	ldr	r2, [r1, #16]
 800cf54:	6923      	ldr	r3, [r4, #16]
 800cf56:	429a      	cmp	r2, r3
 800cf58:	bfa8      	it	ge
 800cf5a:	4623      	movge	r3, r4
 800cf5c:	460f      	mov	r7, r1
 800cf5e:	bfa4      	itt	ge
 800cf60:	460c      	movge	r4, r1
 800cf62:	461f      	movge	r7, r3
 800cf64:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800cf68:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800cf6c:	68a3      	ldr	r3, [r4, #8]
 800cf6e:	6861      	ldr	r1, [r4, #4]
 800cf70:	eb0a 0609 	add.w	r6, sl, r9
 800cf74:	42b3      	cmp	r3, r6
 800cf76:	b085      	sub	sp, #20
 800cf78:	bfb8      	it	lt
 800cf7a:	3101      	addlt	r1, #1
 800cf7c:	f7ff fe92 	bl	800cca4 <_Balloc>
 800cf80:	b930      	cbnz	r0, 800cf90 <__multiply+0x44>
 800cf82:	4602      	mov	r2, r0
 800cf84:	4b44      	ldr	r3, [pc, #272]	@ (800d098 <__multiply+0x14c>)
 800cf86:	4845      	ldr	r0, [pc, #276]	@ (800d09c <__multiply+0x150>)
 800cf88:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cf8c:	f000 fbf6 	bl	800d77c <__assert_func>
 800cf90:	f100 0514 	add.w	r5, r0, #20
 800cf94:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cf98:	462b      	mov	r3, r5
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	4543      	cmp	r3, r8
 800cf9e:	d321      	bcc.n	800cfe4 <__multiply+0x98>
 800cfa0:	f107 0114 	add.w	r1, r7, #20
 800cfa4:	f104 0214 	add.w	r2, r4, #20
 800cfa8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800cfac:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800cfb0:	9302      	str	r3, [sp, #8]
 800cfb2:	1b13      	subs	r3, r2, r4
 800cfb4:	3b15      	subs	r3, #21
 800cfb6:	f023 0303 	bic.w	r3, r3, #3
 800cfba:	3304      	adds	r3, #4
 800cfbc:	f104 0715 	add.w	r7, r4, #21
 800cfc0:	42ba      	cmp	r2, r7
 800cfc2:	bf38      	it	cc
 800cfc4:	2304      	movcc	r3, #4
 800cfc6:	9301      	str	r3, [sp, #4]
 800cfc8:	9b02      	ldr	r3, [sp, #8]
 800cfca:	9103      	str	r1, [sp, #12]
 800cfcc:	428b      	cmp	r3, r1
 800cfce:	d80c      	bhi.n	800cfea <__multiply+0x9e>
 800cfd0:	2e00      	cmp	r6, #0
 800cfd2:	dd03      	ble.n	800cfdc <__multiply+0x90>
 800cfd4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d05b      	beq.n	800d094 <__multiply+0x148>
 800cfdc:	6106      	str	r6, [r0, #16]
 800cfde:	b005      	add	sp, #20
 800cfe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfe4:	f843 2b04 	str.w	r2, [r3], #4
 800cfe8:	e7d8      	b.n	800cf9c <__multiply+0x50>
 800cfea:	f8b1 a000 	ldrh.w	sl, [r1]
 800cfee:	f1ba 0f00 	cmp.w	sl, #0
 800cff2:	d024      	beq.n	800d03e <__multiply+0xf2>
 800cff4:	f104 0e14 	add.w	lr, r4, #20
 800cff8:	46a9      	mov	r9, r5
 800cffa:	f04f 0c00 	mov.w	ip, #0
 800cffe:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d002:	f8d9 3000 	ldr.w	r3, [r9]
 800d006:	fa1f fb87 	uxth.w	fp, r7
 800d00a:	b29b      	uxth	r3, r3
 800d00c:	fb0a 330b 	mla	r3, sl, fp, r3
 800d010:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d014:	f8d9 7000 	ldr.w	r7, [r9]
 800d018:	4463      	add	r3, ip
 800d01a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d01e:	fb0a c70b 	mla	r7, sl, fp, ip
 800d022:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d026:	b29b      	uxth	r3, r3
 800d028:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d02c:	4572      	cmp	r2, lr
 800d02e:	f849 3b04 	str.w	r3, [r9], #4
 800d032:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d036:	d8e2      	bhi.n	800cffe <__multiply+0xb2>
 800d038:	9b01      	ldr	r3, [sp, #4]
 800d03a:	f845 c003 	str.w	ip, [r5, r3]
 800d03e:	9b03      	ldr	r3, [sp, #12]
 800d040:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d044:	3104      	adds	r1, #4
 800d046:	f1b9 0f00 	cmp.w	r9, #0
 800d04a:	d021      	beq.n	800d090 <__multiply+0x144>
 800d04c:	682b      	ldr	r3, [r5, #0]
 800d04e:	f104 0c14 	add.w	ip, r4, #20
 800d052:	46ae      	mov	lr, r5
 800d054:	f04f 0a00 	mov.w	sl, #0
 800d058:	f8bc b000 	ldrh.w	fp, [ip]
 800d05c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d060:	fb09 770b 	mla	r7, r9, fp, r7
 800d064:	4457      	add	r7, sl
 800d066:	b29b      	uxth	r3, r3
 800d068:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d06c:	f84e 3b04 	str.w	r3, [lr], #4
 800d070:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d074:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d078:	f8be 3000 	ldrh.w	r3, [lr]
 800d07c:	fb09 330a 	mla	r3, r9, sl, r3
 800d080:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d084:	4562      	cmp	r2, ip
 800d086:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d08a:	d8e5      	bhi.n	800d058 <__multiply+0x10c>
 800d08c:	9f01      	ldr	r7, [sp, #4]
 800d08e:	51eb      	str	r3, [r5, r7]
 800d090:	3504      	adds	r5, #4
 800d092:	e799      	b.n	800cfc8 <__multiply+0x7c>
 800d094:	3e01      	subs	r6, #1
 800d096:	e79b      	b.n	800cfd0 <__multiply+0x84>
 800d098:	0800f348 	.word	0x0800f348
 800d09c:	0800f3d0 	.word	0x0800f3d0

0800d0a0 <__pow5mult>:
 800d0a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0a4:	4615      	mov	r5, r2
 800d0a6:	f012 0203 	ands.w	r2, r2, #3
 800d0aa:	4607      	mov	r7, r0
 800d0ac:	460e      	mov	r6, r1
 800d0ae:	d007      	beq.n	800d0c0 <__pow5mult+0x20>
 800d0b0:	4c25      	ldr	r4, [pc, #148]	@ (800d148 <__pow5mult+0xa8>)
 800d0b2:	3a01      	subs	r2, #1
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d0ba:	f7ff fe55 	bl	800cd68 <__multadd>
 800d0be:	4606      	mov	r6, r0
 800d0c0:	10ad      	asrs	r5, r5, #2
 800d0c2:	d03d      	beq.n	800d140 <__pow5mult+0xa0>
 800d0c4:	69fc      	ldr	r4, [r7, #28]
 800d0c6:	b97c      	cbnz	r4, 800d0e8 <__pow5mult+0x48>
 800d0c8:	2010      	movs	r0, #16
 800d0ca:	f7fe f9cb 	bl	800b464 <malloc>
 800d0ce:	4602      	mov	r2, r0
 800d0d0:	61f8      	str	r0, [r7, #28]
 800d0d2:	b928      	cbnz	r0, 800d0e0 <__pow5mult+0x40>
 800d0d4:	4b1d      	ldr	r3, [pc, #116]	@ (800d14c <__pow5mult+0xac>)
 800d0d6:	481e      	ldr	r0, [pc, #120]	@ (800d150 <__pow5mult+0xb0>)
 800d0d8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d0dc:	f000 fb4e 	bl	800d77c <__assert_func>
 800d0e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d0e4:	6004      	str	r4, [r0, #0]
 800d0e6:	60c4      	str	r4, [r0, #12]
 800d0e8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d0ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d0f0:	b94c      	cbnz	r4, 800d106 <__pow5mult+0x66>
 800d0f2:	f240 2171 	movw	r1, #625	@ 0x271
 800d0f6:	4638      	mov	r0, r7
 800d0f8:	f7ff ff12 	bl	800cf20 <__i2b>
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	f8c8 0008 	str.w	r0, [r8, #8]
 800d102:	4604      	mov	r4, r0
 800d104:	6003      	str	r3, [r0, #0]
 800d106:	f04f 0900 	mov.w	r9, #0
 800d10a:	07eb      	lsls	r3, r5, #31
 800d10c:	d50a      	bpl.n	800d124 <__pow5mult+0x84>
 800d10e:	4631      	mov	r1, r6
 800d110:	4622      	mov	r2, r4
 800d112:	4638      	mov	r0, r7
 800d114:	f7ff ff1a 	bl	800cf4c <__multiply>
 800d118:	4631      	mov	r1, r6
 800d11a:	4680      	mov	r8, r0
 800d11c:	4638      	mov	r0, r7
 800d11e:	f7ff fe01 	bl	800cd24 <_Bfree>
 800d122:	4646      	mov	r6, r8
 800d124:	106d      	asrs	r5, r5, #1
 800d126:	d00b      	beq.n	800d140 <__pow5mult+0xa0>
 800d128:	6820      	ldr	r0, [r4, #0]
 800d12a:	b938      	cbnz	r0, 800d13c <__pow5mult+0x9c>
 800d12c:	4622      	mov	r2, r4
 800d12e:	4621      	mov	r1, r4
 800d130:	4638      	mov	r0, r7
 800d132:	f7ff ff0b 	bl	800cf4c <__multiply>
 800d136:	6020      	str	r0, [r4, #0]
 800d138:	f8c0 9000 	str.w	r9, [r0]
 800d13c:	4604      	mov	r4, r0
 800d13e:	e7e4      	b.n	800d10a <__pow5mult+0x6a>
 800d140:	4630      	mov	r0, r6
 800d142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d146:	bf00      	nop
 800d148:	0800f42c 	.word	0x0800f42c
 800d14c:	0800f3b9 	.word	0x0800f3b9
 800d150:	0800f3d0 	.word	0x0800f3d0

0800d154 <__lshift>:
 800d154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d158:	460c      	mov	r4, r1
 800d15a:	6849      	ldr	r1, [r1, #4]
 800d15c:	6923      	ldr	r3, [r4, #16]
 800d15e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d162:	68a3      	ldr	r3, [r4, #8]
 800d164:	4607      	mov	r7, r0
 800d166:	4691      	mov	r9, r2
 800d168:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d16c:	f108 0601 	add.w	r6, r8, #1
 800d170:	42b3      	cmp	r3, r6
 800d172:	db0b      	blt.n	800d18c <__lshift+0x38>
 800d174:	4638      	mov	r0, r7
 800d176:	f7ff fd95 	bl	800cca4 <_Balloc>
 800d17a:	4605      	mov	r5, r0
 800d17c:	b948      	cbnz	r0, 800d192 <__lshift+0x3e>
 800d17e:	4602      	mov	r2, r0
 800d180:	4b28      	ldr	r3, [pc, #160]	@ (800d224 <__lshift+0xd0>)
 800d182:	4829      	ldr	r0, [pc, #164]	@ (800d228 <__lshift+0xd4>)
 800d184:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d188:	f000 faf8 	bl	800d77c <__assert_func>
 800d18c:	3101      	adds	r1, #1
 800d18e:	005b      	lsls	r3, r3, #1
 800d190:	e7ee      	b.n	800d170 <__lshift+0x1c>
 800d192:	2300      	movs	r3, #0
 800d194:	f100 0114 	add.w	r1, r0, #20
 800d198:	f100 0210 	add.w	r2, r0, #16
 800d19c:	4618      	mov	r0, r3
 800d19e:	4553      	cmp	r3, sl
 800d1a0:	db33      	blt.n	800d20a <__lshift+0xb6>
 800d1a2:	6920      	ldr	r0, [r4, #16]
 800d1a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d1a8:	f104 0314 	add.w	r3, r4, #20
 800d1ac:	f019 091f 	ands.w	r9, r9, #31
 800d1b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d1b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d1b8:	d02b      	beq.n	800d212 <__lshift+0xbe>
 800d1ba:	f1c9 0e20 	rsb	lr, r9, #32
 800d1be:	468a      	mov	sl, r1
 800d1c0:	2200      	movs	r2, #0
 800d1c2:	6818      	ldr	r0, [r3, #0]
 800d1c4:	fa00 f009 	lsl.w	r0, r0, r9
 800d1c8:	4310      	orrs	r0, r2
 800d1ca:	f84a 0b04 	str.w	r0, [sl], #4
 800d1ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1d2:	459c      	cmp	ip, r3
 800d1d4:	fa22 f20e 	lsr.w	r2, r2, lr
 800d1d8:	d8f3      	bhi.n	800d1c2 <__lshift+0x6e>
 800d1da:	ebac 0304 	sub.w	r3, ip, r4
 800d1de:	3b15      	subs	r3, #21
 800d1e0:	f023 0303 	bic.w	r3, r3, #3
 800d1e4:	3304      	adds	r3, #4
 800d1e6:	f104 0015 	add.w	r0, r4, #21
 800d1ea:	4584      	cmp	ip, r0
 800d1ec:	bf38      	it	cc
 800d1ee:	2304      	movcc	r3, #4
 800d1f0:	50ca      	str	r2, [r1, r3]
 800d1f2:	b10a      	cbz	r2, 800d1f8 <__lshift+0xa4>
 800d1f4:	f108 0602 	add.w	r6, r8, #2
 800d1f8:	3e01      	subs	r6, #1
 800d1fa:	4638      	mov	r0, r7
 800d1fc:	612e      	str	r6, [r5, #16]
 800d1fe:	4621      	mov	r1, r4
 800d200:	f7ff fd90 	bl	800cd24 <_Bfree>
 800d204:	4628      	mov	r0, r5
 800d206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d20a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d20e:	3301      	adds	r3, #1
 800d210:	e7c5      	b.n	800d19e <__lshift+0x4a>
 800d212:	3904      	subs	r1, #4
 800d214:	f853 2b04 	ldr.w	r2, [r3], #4
 800d218:	f841 2f04 	str.w	r2, [r1, #4]!
 800d21c:	459c      	cmp	ip, r3
 800d21e:	d8f9      	bhi.n	800d214 <__lshift+0xc0>
 800d220:	e7ea      	b.n	800d1f8 <__lshift+0xa4>
 800d222:	bf00      	nop
 800d224:	0800f348 	.word	0x0800f348
 800d228:	0800f3d0 	.word	0x0800f3d0

0800d22c <__mcmp>:
 800d22c:	690a      	ldr	r2, [r1, #16]
 800d22e:	4603      	mov	r3, r0
 800d230:	6900      	ldr	r0, [r0, #16]
 800d232:	1a80      	subs	r0, r0, r2
 800d234:	b530      	push	{r4, r5, lr}
 800d236:	d10e      	bne.n	800d256 <__mcmp+0x2a>
 800d238:	3314      	adds	r3, #20
 800d23a:	3114      	adds	r1, #20
 800d23c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d240:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d244:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d248:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d24c:	4295      	cmp	r5, r2
 800d24e:	d003      	beq.n	800d258 <__mcmp+0x2c>
 800d250:	d205      	bcs.n	800d25e <__mcmp+0x32>
 800d252:	f04f 30ff 	mov.w	r0, #4294967295
 800d256:	bd30      	pop	{r4, r5, pc}
 800d258:	42a3      	cmp	r3, r4
 800d25a:	d3f3      	bcc.n	800d244 <__mcmp+0x18>
 800d25c:	e7fb      	b.n	800d256 <__mcmp+0x2a>
 800d25e:	2001      	movs	r0, #1
 800d260:	e7f9      	b.n	800d256 <__mcmp+0x2a>
	...

0800d264 <__mdiff>:
 800d264:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d268:	4689      	mov	r9, r1
 800d26a:	4606      	mov	r6, r0
 800d26c:	4611      	mov	r1, r2
 800d26e:	4648      	mov	r0, r9
 800d270:	4614      	mov	r4, r2
 800d272:	f7ff ffdb 	bl	800d22c <__mcmp>
 800d276:	1e05      	subs	r5, r0, #0
 800d278:	d112      	bne.n	800d2a0 <__mdiff+0x3c>
 800d27a:	4629      	mov	r1, r5
 800d27c:	4630      	mov	r0, r6
 800d27e:	f7ff fd11 	bl	800cca4 <_Balloc>
 800d282:	4602      	mov	r2, r0
 800d284:	b928      	cbnz	r0, 800d292 <__mdiff+0x2e>
 800d286:	4b3f      	ldr	r3, [pc, #252]	@ (800d384 <__mdiff+0x120>)
 800d288:	f240 2137 	movw	r1, #567	@ 0x237
 800d28c:	483e      	ldr	r0, [pc, #248]	@ (800d388 <__mdiff+0x124>)
 800d28e:	f000 fa75 	bl	800d77c <__assert_func>
 800d292:	2301      	movs	r3, #1
 800d294:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d298:	4610      	mov	r0, r2
 800d29a:	b003      	add	sp, #12
 800d29c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2a0:	bfbc      	itt	lt
 800d2a2:	464b      	movlt	r3, r9
 800d2a4:	46a1      	movlt	r9, r4
 800d2a6:	4630      	mov	r0, r6
 800d2a8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d2ac:	bfba      	itte	lt
 800d2ae:	461c      	movlt	r4, r3
 800d2b0:	2501      	movlt	r5, #1
 800d2b2:	2500      	movge	r5, #0
 800d2b4:	f7ff fcf6 	bl	800cca4 <_Balloc>
 800d2b8:	4602      	mov	r2, r0
 800d2ba:	b918      	cbnz	r0, 800d2c4 <__mdiff+0x60>
 800d2bc:	4b31      	ldr	r3, [pc, #196]	@ (800d384 <__mdiff+0x120>)
 800d2be:	f240 2145 	movw	r1, #581	@ 0x245
 800d2c2:	e7e3      	b.n	800d28c <__mdiff+0x28>
 800d2c4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d2c8:	6926      	ldr	r6, [r4, #16]
 800d2ca:	60c5      	str	r5, [r0, #12]
 800d2cc:	f109 0310 	add.w	r3, r9, #16
 800d2d0:	f109 0514 	add.w	r5, r9, #20
 800d2d4:	f104 0e14 	add.w	lr, r4, #20
 800d2d8:	f100 0b14 	add.w	fp, r0, #20
 800d2dc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d2e0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d2e4:	9301      	str	r3, [sp, #4]
 800d2e6:	46d9      	mov	r9, fp
 800d2e8:	f04f 0c00 	mov.w	ip, #0
 800d2ec:	9b01      	ldr	r3, [sp, #4]
 800d2ee:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d2f2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d2f6:	9301      	str	r3, [sp, #4]
 800d2f8:	fa1f f38a 	uxth.w	r3, sl
 800d2fc:	4619      	mov	r1, r3
 800d2fe:	b283      	uxth	r3, r0
 800d300:	1acb      	subs	r3, r1, r3
 800d302:	0c00      	lsrs	r0, r0, #16
 800d304:	4463      	add	r3, ip
 800d306:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d30a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d30e:	b29b      	uxth	r3, r3
 800d310:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d314:	4576      	cmp	r6, lr
 800d316:	f849 3b04 	str.w	r3, [r9], #4
 800d31a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d31e:	d8e5      	bhi.n	800d2ec <__mdiff+0x88>
 800d320:	1b33      	subs	r3, r6, r4
 800d322:	3b15      	subs	r3, #21
 800d324:	f023 0303 	bic.w	r3, r3, #3
 800d328:	3415      	adds	r4, #21
 800d32a:	3304      	adds	r3, #4
 800d32c:	42a6      	cmp	r6, r4
 800d32e:	bf38      	it	cc
 800d330:	2304      	movcc	r3, #4
 800d332:	441d      	add	r5, r3
 800d334:	445b      	add	r3, fp
 800d336:	461e      	mov	r6, r3
 800d338:	462c      	mov	r4, r5
 800d33a:	4544      	cmp	r4, r8
 800d33c:	d30e      	bcc.n	800d35c <__mdiff+0xf8>
 800d33e:	f108 0103 	add.w	r1, r8, #3
 800d342:	1b49      	subs	r1, r1, r5
 800d344:	f021 0103 	bic.w	r1, r1, #3
 800d348:	3d03      	subs	r5, #3
 800d34a:	45a8      	cmp	r8, r5
 800d34c:	bf38      	it	cc
 800d34e:	2100      	movcc	r1, #0
 800d350:	440b      	add	r3, r1
 800d352:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d356:	b191      	cbz	r1, 800d37e <__mdiff+0x11a>
 800d358:	6117      	str	r7, [r2, #16]
 800d35a:	e79d      	b.n	800d298 <__mdiff+0x34>
 800d35c:	f854 1b04 	ldr.w	r1, [r4], #4
 800d360:	46e6      	mov	lr, ip
 800d362:	0c08      	lsrs	r0, r1, #16
 800d364:	fa1c fc81 	uxtah	ip, ip, r1
 800d368:	4471      	add	r1, lr
 800d36a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d36e:	b289      	uxth	r1, r1
 800d370:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d374:	f846 1b04 	str.w	r1, [r6], #4
 800d378:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d37c:	e7dd      	b.n	800d33a <__mdiff+0xd6>
 800d37e:	3f01      	subs	r7, #1
 800d380:	e7e7      	b.n	800d352 <__mdiff+0xee>
 800d382:	bf00      	nop
 800d384:	0800f348 	.word	0x0800f348
 800d388:	0800f3d0 	.word	0x0800f3d0

0800d38c <__ulp>:
 800d38c:	b082      	sub	sp, #8
 800d38e:	ed8d 0b00 	vstr	d0, [sp]
 800d392:	9a01      	ldr	r2, [sp, #4]
 800d394:	4b0f      	ldr	r3, [pc, #60]	@ (800d3d4 <__ulp+0x48>)
 800d396:	4013      	ands	r3, r2
 800d398:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	dc08      	bgt.n	800d3b2 <__ulp+0x26>
 800d3a0:	425b      	negs	r3, r3
 800d3a2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d3a6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d3aa:	da04      	bge.n	800d3b6 <__ulp+0x2a>
 800d3ac:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d3b0:	4113      	asrs	r3, r2
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	e008      	b.n	800d3c8 <__ulp+0x3c>
 800d3b6:	f1a2 0314 	sub.w	r3, r2, #20
 800d3ba:	2b1e      	cmp	r3, #30
 800d3bc:	bfda      	itte	le
 800d3be:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d3c2:	40da      	lsrle	r2, r3
 800d3c4:	2201      	movgt	r2, #1
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	4619      	mov	r1, r3
 800d3ca:	4610      	mov	r0, r2
 800d3cc:	ec41 0b10 	vmov	d0, r0, r1
 800d3d0:	b002      	add	sp, #8
 800d3d2:	4770      	bx	lr
 800d3d4:	7ff00000 	.word	0x7ff00000

0800d3d8 <__b2d>:
 800d3d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3dc:	6906      	ldr	r6, [r0, #16]
 800d3de:	f100 0814 	add.w	r8, r0, #20
 800d3e2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d3e6:	1f37      	subs	r7, r6, #4
 800d3e8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d3ec:	4610      	mov	r0, r2
 800d3ee:	f7ff fd4b 	bl	800ce88 <__hi0bits>
 800d3f2:	f1c0 0320 	rsb	r3, r0, #32
 800d3f6:	280a      	cmp	r0, #10
 800d3f8:	600b      	str	r3, [r1, #0]
 800d3fa:	491b      	ldr	r1, [pc, #108]	@ (800d468 <__b2d+0x90>)
 800d3fc:	dc15      	bgt.n	800d42a <__b2d+0x52>
 800d3fe:	f1c0 0c0b 	rsb	ip, r0, #11
 800d402:	fa22 f30c 	lsr.w	r3, r2, ip
 800d406:	45b8      	cmp	r8, r7
 800d408:	ea43 0501 	orr.w	r5, r3, r1
 800d40c:	bf34      	ite	cc
 800d40e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d412:	2300      	movcs	r3, #0
 800d414:	3015      	adds	r0, #21
 800d416:	fa02 f000 	lsl.w	r0, r2, r0
 800d41a:	fa23 f30c 	lsr.w	r3, r3, ip
 800d41e:	4303      	orrs	r3, r0
 800d420:	461c      	mov	r4, r3
 800d422:	ec45 4b10 	vmov	d0, r4, r5
 800d426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d42a:	45b8      	cmp	r8, r7
 800d42c:	bf3a      	itte	cc
 800d42e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d432:	f1a6 0708 	subcc.w	r7, r6, #8
 800d436:	2300      	movcs	r3, #0
 800d438:	380b      	subs	r0, #11
 800d43a:	d012      	beq.n	800d462 <__b2d+0x8a>
 800d43c:	f1c0 0120 	rsb	r1, r0, #32
 800d440:	fa23 f401 	lsr.w	r4, r3, r1
 800d444:	4082      	lsls	r2, r0
 800d446:	4322      	orrs	r2, r4
 800d448:	4547      	cmp	r7, r8
 800d44a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d44e:	bf8c      	ite	hi
 800d450:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d454:	2200      	movls	r2, #0
 800d456:	4083      	lsls	r3, r0
 800d458:	40ca      	lsrs	r2, r1
 800d45a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d45e:	4313      	orrs	r3, r2
 800d460:	e7de      	b.n	800d420 <__b2d+0x48>
 800d462:	ea42 0501 	orr.w	r5, r2, r1
 800d466:	e7db      	b.n	800d420 <__b2d+0x48>
 800d468:	3ff00000 	.word	0x3ff00000

0800d46c <__d2b>:
 800d46c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d470:	460f      	mov	r7, r1
 800d472:	2101      	movs	r1, #1
 800d474:	ec59 8b10 	vmov	r8, r9, d0
 800d478:	4616      	mov	r6, r2
 800d47a:	f7ff fc13 	bl	800cca4 <_Balloc>
 800d47e:	4604      	mov	r4, r0
 800d480:	b930      	cbnz	r0, 800d490 <__d2b+0x24>
 800d482:	4602      	mov	r2, r0
 800d484:	4b23      	ldr	r3, [pc, #140]	@ (800d514 <__d2b+0xa8>)
 800d486:	4824      	ldr	r0, [pc, #144]	@ (800d518 <__d2b+0xac>)
 800d488:	f240 310f 	movw	r1, #783	@ 0x30f
 800d48c:	f000 f976 	bl	800d77c <__assert_func>
 800d490:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d494:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d498:	b10d      	cbz	r5, 800d49e <__d2b+0x32>
 800d49a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d49e:	9301      	str	r3, [sp, #4]
 800d4a0:	f1b8 0300 	subs.w	r3, r8, #0
 800d4a4:	d023      	beq.n	800d4ee <__d2b+0x82>
 800d4a6:	4668      	mov	r0, sp
 800d4a8:	9300      	str	r3, [sp, #0]
 800d4aa:	f7ff fd0c 	bl	800cec6 <__lo0bits>
 800d4ae:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d4b2:	b1d0      	cbz	r0, 800d4ea <__d2b+0x7e>
 800d4b4:	f1c0 0320 	rsb	r3, r0, #32
 800d4b8:	fa02 f303 	lsl.w	r3, r2, r3
 800d4bc:	430b      	orrs	r3, r1
 800d4be:	40c2      	lsrs	r2, r0
 800d4c0:	6163      	str	r3, [r4, #20]
 800d4c2:	9201      	str	r2, [sp, #4]
 800d4c4:	9b01      	ldr	r3, [sp, #4]
 800d4c6:	61a3      	str	r3, [r4, #24]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	bf0c      	ite	eq
 800d4cc:	2201      	moveq	r2, #1
 800d4ce:	2202      	movne	r2, #2
 800d4d0:	6122      	str	r2, [r4, #16]
 800d4d2:	b1a5      	cbz	r5, 800d4fe <__d2b+0x92>
 800d4d4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d4d8:	4405      	add	r5, r0
 800d4da:	603d      	str	r5, [r7, #0]
 800d4dc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d4e0:	6030      	str	r0, [r6, #0]
 800d4e2:	4620      	mov	r0, r4
 800d4e4:	b003      	add	sp, #12
 800d4e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d4ea:	6161      	str	r1, [r4, #20]
 800d4ec:	e7ea      	b.n	800d4c4 <__d2b+0x58>
 800d4ee:	a801      	add	r0, sp, #4
 800d4f0:	f7ff fce9 	bl	800cec6 <__lo0bits>
 800d4f4:	9b01      	ldr	r3, [sp, #4]
 800d4f6:	6163      	str	r3, [r4, #20]
 800d4f8:	3020      	adds	r0, #32
 800d4fa:	2201      	movs	r2, #1
 800d4fc:	e7e8      	b.n	800d4d0 <__d2b+0x64>
 800d4fe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d502:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d506:	6038      	str	r0, [r7, #0]
 800d508:	6918      	ldr	r0, [r3, #16]
 800d50a:	f7ff fcbd 	bl	800ce88 <__hi0bits>
 800d50e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d512:	e7e5      	b.n	800d4e0 <__d2b+0x74>
 800d514:	0800f348 	.word	0x0800f348
 800d518:	0800f3d0 	.word	0x0800f3d0

0800d51c <__ratio>:
 800d51c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d520:	b085      	sub	sp, #20
 800d522:	e9cd 1000 	strd	r1, r0, [sp]
 800d526:	a902      	add	r1, sp, #8
 800d528:	f7ff ff56 	bl	800d3d8 <__b2d>
 800d52c:	9800      	ldr	r0, [sp, #0]
 800d52e:	a903      	add	r1, sp, #12
 800d530:	ec55 4b10 	vmov	r4, r5, d0
 800d534:	f7ff ff50 	bl	800d3d8 <__b2d>
 800d538:	9b01      	ldr	r3, [sp, #4]
 800d53a:	6919      	ldr	r1, [r3, #16]
 800d53c:	9b00      	ldr	r3, [sp, #0]
 800d53e:	691b      	ldr	r3, [r3, #16]
 800d540:	1ac9      	subs	r1, r1, r3
 800d542:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d546:	1a9b      	subs	r3, r3, r2
 800d548:	ec5b ab10 	vmov	sl, fp, d0
 800d54c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d550:	2b00      	cmp	r3, #0
 800d552:	bfce      	itee	gt
 800d554:	462a      	movgt	r2, r5
 800d556:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d55a:	465a      	movle	r2, fp
 800d55c:	462f      	mov	r7, r5
 800d55e:	46d9      	mov	r9, fp
 800d560:	bfcc      	ite	gt
 800d562:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d566:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d56a:	464b      	mov	r3, r9
 800d56c:	4652      	mov	r2, sl
 800d56e:	4620      	mov	r0, r4
 800d570:	4639      	mov	r1, r7
 800d572:	f7f3 f983 	bl	800087c <__aeabi_ddiv>
 800d576:	ec41 0b10 	vmov	d0, r0, r1
 800d57a:	b005      	add	sp, #20
 800d57c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d580 <__copybits>:
 800d580:	3901      	subs	r1, #1
 800d582:	b570      	push	{r4, r5, r6, lr}
 800d584:	1149      	asrs	r1, r1, #5
 800d586:	6914      	ldr	r4, [r2, #16]
 800d588:	3101      	adds	r1, #1
 800d58a:	f102 0314 	add.w	r3, r2, #20
 800d58e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d592:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d596:	1f05      	subs	r5, r0, #4
 800d598:	42a3      	cmp	r3, r4
 800d59a:	d30c      	bcc.n	800d5b6 <__copybits+0x36>
 800d59c:	1aa3      	subs	r3, r4, r2
 800d59e:	3b11      	subs	r3, #17
 800d5a0:	f023 0303 	bic.w	r3, r3, #3
 800d5a4:	3211      	adds	r2, #17
 800d5a6:	42a2      	cmp	r2, r4
 800d5a8:	bf88      	it	hi
 800d5aa:	2300      	movhi	r3, #0
 800d5ac:	4418      	add	r0, r3
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	4288      	cmp	r0, r1
 800d5b2:	d305      	bcc.n	800d5c0 <__copybits+0x40>
 800d5b4:	bd70      	pop	{r4, r5, r6, pc}
 800d5b6:	f853 6b04 	ldr.w	r6, [r3], #4
 800d5ba:	f845 6f04 	str.w	r6, [r5, #4]!
 800d5be:	e7eb      	b.n	800d598 <__copybits+0x18>
 800d5c0:	f840 3b04 	str.w	r3, [r0], #4
 800d5c4:	e7f4      	b.n	800d5b0 <__copybits+0x30>

0800d5c6 <__any_on>:
 800d5c6:	f100 0214 	add.w	r2, r0, #20
 800d5ca:	6900      	ldr	r0, [r0, #16]
 800d5cc:	114b      	asrs	r3, r1, #5
 800d5ce:	4298      	cmp	r0, r3
 800d5d0:	b510      	push	{r4, lr}
 800d5d2:	db11      	blt.n	800d5f8 <__any_on+0x32>
 800d5d4:	dd0a      	ble.n	800d5ec <__any_on+0x26>
 800d5d6:	f011 011f 	ands.w	r1, r1, #31
 800d5da:	d007      	beq.n	800d5ec <__any_on+0x26>
 800d5dc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d5e0:	fa24 f001 	lsr.w	r0, r4, r1
 800d5e4:	fa00 f101 	lsl.w	r1, r0, r1
 800d5e8:	428c      	cmp	r4, r1
 800d5ea:	d10b      	bne.n	800d604 <__any_on+0x3e>
 800d5ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d5f0:	4293      	cmp	r3, r2
 800d5f2:	d803      	bhi.n	800d5fc <__any_on+0x36>
 800d5f4:	2000      	movs	r0, #0
 800d5f6:	bd10      	pop	{r4, pc}
 800d5f8:	4603      	mov	r3, r0
 800d5fa:	e7f7      	b.n	800d5ec <__any_on+0x26>
 800d5fc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d600:	2900      	cmp	r1, #0
 800d602:	d0f5      	beq.n	800d5f0 <__any_on+0x2a>
 800d604:	2001      	movs	r0, #1
 800d606:	e7f6      	b.n	800d5f6 <__any_on+0x30>

0800d608 <__ascii_wctomb>:
 800d608:	4603      	mov	r3, r0
 800d60a:	4608      	mov	r0, r1
 800d60c:	b141      	cbz	r1, 800d620 <__ascii_wctomb+0x18>
 800d60e:	2aff      	cmp	r2, #255	@ 0xff
 800d610:	d904      	bls.n	800d61c <__ascii_wctomb+0x14>
 800d612:	228a      	movs	r2, #138	@ 0x8a
 800d614:	601a      	str	r2, [r3, #0]
 800d616:	f04f 30ff 	mov.w	r0, #4294967295
 800d61a:	4770      	bx	lr
 800d61c:	700a      	strb	r2, [r1, #0]
 800d61e:	2001      	movs	r0, #1
 800d620:	4770      	bx	lr
	...

0800d624 <__sflush_r>:
 800d624:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d62c:	0716      	lsls	r6, r2, #28
 800d62e:	4605      	mov	r5, r0
 800d630:	460c      	mov	r4, r1
 800d632:	d454      	bmi.n	800d6de <__sflush_r+0xba>
 800d634:	684b      	ldr	r3, [r1, #4]
 800d636:	2b00      	cmp	r3, #0
 800d638:	dc02      	bgt.n	800d640 <__sflush_r+0x1c>
 800d63a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	dd48      	ble.n	800d6d2 <__sflush_r+0xae>
 800d640:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d642:	2e00      	cmp	r6, #0
 800d644:	d045      	beq.n	800d6d2 <__sflush_r+0xae>
 800d646:	2300      	movs	r3, #0
 800d648:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d64c:	682f      	ldr	r7, [r5, #0]
 800d64e:	6a21      	ldr	r1, [r4, #32]
 800d650:	602b      	str	r3, [r5, #0]
 800d652:	d030      	beq.n	800d6b6 <__sflush_r+0x92>
 800d654:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d656:	89a3      	ldrh	r3, [r4, #12]
 800d658:	0759      	lsls	r1, r3, #29
 800d65a:	d505      	bpl.n	800d668 <__sflush_r+0x44>
 800d65c:	6863      	ldr	r3, [r4, #4]
 800d65e:	1ad2      	subs	r2, r2, r3
 800d660:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d662:	b10b      	cbz	r3, 800d668 <__sflush_r+0x44>
 800d664:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d666:	1ad2      	subs	r2, r2, r3
 800d668:	2300      	movs	r3, #0
 800d66a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d66c:	6a21      	ldr	r1, [r4, #32]
 800d66e:	4628      	mov	r0, r5
 800d670:	47b0      	blx	r6
 800d672:	1c43      	adds	r3, r0, #1
 800d674:	89a3      	ldrh	r3, [r4, #12]
 800d676:	d106      	bne.n	800d686 <__sflush_r+0x62>
 800d678:	6829      	ldr	r1, [r5, #0]
 800d67a:	291d      	cmp	r1, #29
 800d67c:	d82b      	bhi.n	800d6d6 <__sflush_r+0xb2>
 800d67e:	4a2a      	ldr	r2, [pc, #168]	@ (800d728 <__sflush_r+0x104>)
 800d680:	410a      	asrs	r2, r1
 800d682:	07d6      	lsls	r6, r2, #31
 800d684:	d427      	bmi.n	800d6d6 <__sflush_r+0xb2>
 800d686:	2200      	movs	r2, #0
 800d688:	6062      	str	r2, [r4, #4]
 800d68a:	04d9      	lsls	r1, r3, #19
 800d68c:	6922      	ldr	r2, [r4, #16]
 800d68e:	6022      	str	r2, [r4, #0]
 800d690:	d504      	bpl.n	800d69c <__sflush_r+0x78>
 800d692:	1c42      	adds	r2, r0, #1
 800d694:	d101      	bne.n	800d69a <__sflush_r+0x76>
 800d696:	682b      	ldr	r3, [r5, #0]
 800d698:	b903      	cbnz	r3, 800d69c <__sflush_r+0x78>
 800d69a:	6560      	str	r0, [r4, #84]	@ 0x54
 800d69c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d69e:	602f      	str	r7, [r5, #0]
 800d6a0:	b1b9      	cbz	r1, 800d6d2 <__sflush_r+0xae>
 800d6a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d6a6:	4299      	cmp	r1, r3
 800d6a8:	d002      	beq.n	800d6b0 <__sflush_r+0x8c>
 800d6aa:	4628      	mov	r0, r5
 800d6ac:	f7fe ff64 	bl	800c578 <_free_r>
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	6363      	str	r3, [r4, #52]	@ 0x34
 800d6b4:	e00d      	b.n	800d6d2 <__sflush_r+0xae>
 800d6b6:	2301      	movs	r3, #1
 800d6b8:	4628      	mov	r0, r5
 800d6ba:	47b0      	blx	r6
 800d6bc:	4602      	mov	r2, r0
 800d6be:	1c50      	adds	r0, r2, #1
 800d6c0:	d1c9      	bne.n	800d656 <__sflush_r+0x32>
 800d6c2:	682b      	ldr	r3, [r5, #0]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d0c6      	beq.n	800d656 <__sflush_r+0x32>
 800d6c8:	2b1d      	cmp	r3, #29
 800d6ca:	d001      	beq.n	800d6d0 <__sflush_r+0xac>
 800d6cc:	2b16      	cmp	r3, #22
 800d6ce:	d11e      	bne.n	800d70e <__sflush_r+0xea>
 800d6d0:	602f      	str	r7, [r5, #0]
 800d6d2:	2000      	movs	r0, #0
 800d6d4:	e022      	b.n	800d71c <__sflush_r+0xf8>
 800d6d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d6da:	b21b      	sxth	r3, r3
 800d6dc:	e01b      	b.n	800d716 <__sflush_r+0xf2>
 800d6de:	690f      	ldr	r7, [r1, #16]
 800d6e0:	2f00      	cmp	r7, #0
 800d6e2:	d0f6      	beq.n	800d6d2 <__sflush_r+0xae>
 800d6e4:	0793      	lsls	r3, r2, #30
 800d6e6:	680e      	ldr	r6, [r1, #0]
 800d6e8:	bf08      	it	eq
 800d6ea:	694b      	ldreq	r3, [r1, #20]
 800d6ec:	600f      	str	r7, [r1, #0]
 800d6ee:	bf18      	it	ne
 800d6f0:	2300      	movne	r3, #0
 800d6f2:	eba6 0807 	sub.w	r8, r6, r7
 800d6f6:	608b      	str	r3, [r1, #8]
 800d6f8:	f1b8 0f00 	cmp.w	r8, #0
 800d6fc:	dde9      	ble.n	800d6d2 <__sflush_r+0xae>
 800d6fe:	6a21      	ldr	r1, [r4, #32]
 800d700:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d702:	4643      	mov	r3, r8
 800d704:	463a      	mov	r2, r7
 800d706:	4628      	mov	r0, r5
 800d708:	47b0      	blx	r6
 800d70a:	2800      	cmp	r0, #0
 800d70c:	dc08      	bgt.n	800d720 <__sflush_r+0xfc>
 800d70e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d712:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d716:	81a3      	strh	r3, [r4, #12]
 800d718:	f04f 30ff 	mov.w	r0, #4294967295
 800d71c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d720:	4407      	add	r7, r0
 800d722:	eba8 0800 	sub.w	r8, r8, r0
 800d726:	e7e7      	b.n	800d6f8 <__sflush_r+0xd4>
 800d728:	dfbffffe 	.word	0xdfbffffe

0800d72c <_fflush_r>:
 800d72c:	b538      	push	{r3, r4, r5, lr}
 800d72e:	690b      	ldr	r3, [r1, #16]
 800d730:	4605      	mov	r5, r0
 800d732:	460c      	mov	r4, r1
 800d734:	b913      	cbnz	r3, 800d73c <_fflush_r+0x10>
 800d736:	2500      	movs	r5, #0
 800d738:	4628      	mov	r0, r5
 800d73a:	bd38      	pop	{r3, r4, r5, pc}
 800d73c:	b118      	cbz	r0, 800d746 <_fflush_r+0x1a>
 800d73e:	6a03      	ldr	r3, [r0, #32]
 800d740:	b90b      	cbnz	r3, 800d746 <_fflush_r+0x1a>
 800d742:	f7fe fde9 	bl	800c318 <__sinit>
 800d746:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d0f3      	beq.n	800d736 <_fflush_r+0xa>
 800d74e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d750:	07d0      	lsls	r0, r2, #31
 800d752:	d404      	bmi.n	800d75e <_fflush_r+0x32>
 800d754:	0599      	lsls	r1, r3, #22
 800d756:	d402      	bmi.n	800d75e <_fflush_r+0x32>
 800d758:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d75a:	f7fe fef2 	bl	800c542 <__retarget_lock_acquire_recursive>
 800d75e:	4628      	mov	r0, r5
 800d760:	4621      	mov	r1, r4
 800d762:	f7ff ff5f 	bl	800d624 <__sflush_r>
 800d766:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d768:	07da      	lsls	r2, r3, #31
 800d76a:	4605      	mov	r5, r0
 800d76c:	d4e4      	bmi.n	800d738 <_fflush_r+0xc>
 800d76e:	89a3      	ldrh	r3, [r4, #12]
 800d770:	059b      	lsls	r3, r3, #22
 800d772:	d4e1      	bmi.n	800d738 <_fflush_r+0xc>
 800d774:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d776:	f7fe fee5 	bl	800c544 <__retarget_lock_release_recursive>
 800d77a:	e7dd      	b.n	800d738 <_fflush_r+0xc>

0800d77c <__assert_func>:
 800d77c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d77e:	4614      	mov	r4, r2
 800d780:	461a      	mov	r2, r3
 800d782:	4b09      	ldr	r3, [pc, #36]	@ (800d7a8 <__assert_func+0x2c>)
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	4605      	mov	r5, r0
 800d788:	68d8      	ldr	r0, [r3, #12]
 800d78a:	b954      	cbnz	r4, 800d7a2 <__assert_func+0x26>
 800d78c:	4b07      	ldr	r3, [pc, #28]	@ (800d7ac <__assert_func+0x30>)
 800d78e:	461c      	mov	r4, r3
 800d790:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d794:	9100      	str	r1, [sp, #0]
 800d796:	462b      	mov	r3, r5
 800d798:	4905      	ldr	r1, [pc, #20]	@ (800d7b0 <__assert_func+0x34>)
 800d79a:	f000 f821 	bl	800d7e0 <fiprintf>
 800d79e:	f000 f831 	bl	800d804 <abort>
 800d7a2:	4b04      	ldr	r3, [pc, #16]	@ (800d7b4 <__assert_func+0x38>)
 800d7a4:	e7f4      	b.n	800d790 <__assert_func+0x14>
 800d7a6:	bf00      	nop
 800d7a8:	2000019c 	.word	0x2000019c
 800d7ac:	0800f664 	.word	0x0800f664
 800d7b0:	0800f636 	.word	0x0800f636
 800d7b4:	0800f629 	.word	0x0800f629

0800d7b8 <_calloc_r>:
 800d7b8:	b570      	push	{r4, r5, r6, lr}
 800d7ba:	fba1 5402 	umull	r5, r4, r1, r2
 800d7be:	b93c      	cbnz	r4, 800d7d0 <_calloc_r+0x18>
 800d7c0:	4629      	mov	r1, r5
 800d7c2:	f7fd fe81 	bl	800b4c8 <_malloc_r>
 800d7c6:	4606      	mov	r6, r0
 800d7c8:	b928      	cbnz	r0, 800d7d6 <_calloc_r+0x1e>
 800d7ca:	2600      	movs	r6, #0
 800d7cc:	4630      	mov	r0, r6
 800d7ce:	bd70      	pop	{r4, r5, r6, pc}
 800d7d0:	220c      	movs	r2, #12
 800d7d2:	6002      	str	r2, [r0, #0]
 800d7d4:	e7f9      	b.n	800d7ca <_calloc_r+0x12>
 800d7d6:	462a      	mov	r2, r5
 800d7d8:	4621      	mov	r1, r4
 800d7da:	f7fe fe16 	bl	800c40a <memset>
 800d7de:	e7f5      	b.n	800d7cc <_calloc_r+0x14>

0800d7e0 <fiprintf>:
 800d7e0:	b40e      	push	{r1, r2, r3}
 800d7e2:	b503      	push	{r0, r1, lr}
 800d7e4:	4601      	mov	r1, r0
 800d7e6:	ab03      	add	r3, sp, #12
 800d7e8:	4805      	ldr	r0, [pc, #20]	@ (800d800 <fiprintf+0x20>)
 800d7ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800d7ee:	6800      	ldr	r0, [r0, #0]
 800d7f0:	9301      	str	r3, [sp, #4]
 800d7f2:	f000 f837 	bl	800d864 <_vfiprintf_r>
 800d7f6:	b002      	add	sp, #8
 800d7f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d7fc:	b003      	add	sp, #12
 800d7fe:	4770      	bx	lr
 800d800:	2000019c 	.word	0x2000019c

0800d804 <abort>:
 800d804:	b508      	push	{r3, lr}
 800d806:	2006      	movs	r0, #6
 800d808:	f000 fb8e 	bl	800df28 <raise>
 800d80c:	2001      	movs	r0, #1
 800d80e:	f7f8 fb9f 	bl	8005f50 <_exit>

0800d812 <__sfputc_r>:
 800d812:	6893      	ldr	r3, [r2, #8]
 800d814:	3b01      	subs	r3, #1
 800d816:	2b00      	cmp	r3, #0
 800d818:	b410      	push	{r4}
 800d81a:	6093      	str	r3, [r2, #8]
 800d81c:	da08      	bge.n	800d830 <__sfputc_r+0x1e>
 800d81e:	6994      	ldr	r4, [r2, #24]
 800d820:	42a3      	cmp	r3, r4
 800d822:	db01      	blt.n	800d828 <__sfputc_r+0x16>
 800d824:	290a      	cmp	r1, #10
 800d826:	d103      	bne.n	800d830 <__sfputc_r+0x1e>
 800d828:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d82c:	f000 bac0 	b.w	800ddb0 <__swbuf_r>
 800d830:	6813      	ldr	r3, [r2, #0]
 800d832:	1c58      	adds	r0, r3, #1
 800d834:	6010      	str	r0, [r2, #0]
 800d836:	7019      	strb	r1, [r3, #0]
 800d838:	4608      	mov	r0, r1
 800d83a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d83e:	4770      	bx	lr

0800d840 <__sfputs_r>:
 800d840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d842:	4606      	mov	r6, r0
 800d844:	460f      	mov	r7, r1
 800d846:	4614      	mov	r4, r2
 800d848:	18d5      	adds	r5, r2, r3
 800d84a:	42ac      	cmp	r4, r5
 800d84c:	d101      	bne.n	800d852 <__sfputs_r+0x12>
 800d84e:	2000      	movs	r0, #0
 800d850:	e007      	b.n	800d862 <__sfputs_r+0x22>
 800d852:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d856:	463a      	mov	r2, r7
 800d858:	4630      	mov	r0, r6
 800d85a:	f7ff ffda 	bl	800d812 <__sfputc_r>
 800d85e:	1c43      	adds	r3, r0, #1
 800d860:	d1f3      	bne.n	800d84a <__sfputs_r+0xa>
 800d862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d864 <_vfiprintf_r>:
 800d864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d868:	460d      	mov	r5, r1
 800d86a:	b09d      	sub	sp, #116	@ 0x74
 800d86c:	4614      	mov	r4, r2
 800d86e:	4698      	mov	r8, r3
 800d870:	4606      	mov	r6, r0
 800d872:	b118      	cbz	r0, 800d87c <_vfiprintf_r+0x18>
 800d874:	6a03      	ldr	r3, [r0, #32]
 800d876:	b90b      	cbnz	r3, 800d87c <_vfiprintf_r+0x18>
 800d878:	f7fe fd4e 	bl	800c318 <__sinit>
 800d87c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d87e:	07d9      	lsls	r1, r3, #31
 800d880:	d405      	bmi.n	800d88e <_vfiprintf_r+0x2a>
 800d882:	89ab      	ldrh	r3, [r5, #12]
 800d884:	059a      	lsls	r2, r3, #22
 800d886:	d402      	bmi.n	800d88e <_vfiprintf_r+0x2a>
 800d888:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d88a:	f7fe fe5a 	bl	800c542 <__retarget_lock_acquire_recursive>
 800d88e:	89ab      	ldrh	r3, [r5, #12]
 800d890:	071b      	lsls	r3, r3, #28
 800d892:	d501      	bpl.n	800d898 <_vfiprintf_r+0x34>
 800d894:	692b      	ldr	r3, [r5, #16]
 800d896:	b99b      	cbnz	r3, 800d8c0 <_vfiprintf_r+0x5c>
 800d898:	4629      	mov	r1, r5
 800d89a:	4630      	mov	r0, r6
 800d89c:	f000 fac6 	bl	800de2c <__swsetup_r>
 800d8a0:	b170      	cbz	r0, 800d8c0 <_vfiprintf_r+0x5c>
 800d8a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d8a4:	07dc      	lsls	r4, r3, #31
 800d8a6:	d504      	bpl.n	800d8b2 <_vfiprintf_r+0x4e>
 800d8a8:	f04f 30ff 	mov.w	r0, #4294967295
 800d8ac:	b01d      	add	sp, #116	@ 0x74
 800d8ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8b2:	89ab      	ldrh	r3, [r5, #12]
 800d8b4:	0598      	lsls	r0, r3, #22
 800d8b6:	d4f7      	bmi.n	800d8a8 <_vfiprintf_r+0x44>
 800d8b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d8ba:	f7fe fe43 	bl	800c544 <__retarget_lock_release_recursive>
 800d8be:	e7f3      	b.n	800d8a8 <_vfiprintf_r+0x44>
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d8c4:	2320      	movs	r3, #32
 800d8c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d8ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800d8ce:	2330      	movs	r3, #48	@ 0x30
 800d8d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800da80 <_vfiprintf_r+0x21c>
 800d8d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d8d8:	f04f 0901 	mov.w	r9, #1
 800d8dc:	4623      	mov	r3, r4
 800d8de:	469a      	mov	sl, r3
 800d8e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d8e4:	b10a      	cbz	r2, 800d8ea <_vfiprintf_r+0x86>
 800d8e6:	2a25      	cmp	r2, #37	@ 0x25
 800d8e8:	d1f9      	bne.n	800d8de <_vfiprintf_r+0x7a>
 800d8ea:	ebba 0b04 	subs.w	fp, sl, r4
 800d8ee:	d00b      	beq.n	800d908 <_vfiprintf_r+0xa4>
 800d8f0:	465b      	mov	r3, fp
 800d8f2:	4622      	mov	r2, r4
 800d8f4:	4629      	mov	r1, r5
 800d8f6:	4630      	mov	r0, r6
 800d8f8:	f7ff ffa2 	bl	800d840 <__sfputs_r>
 800d8fc:	3001      	adds	r0, #1
 800d8fe:	f000 80a7 	beq.w	800da50 <_vfiprintf_r+0x1ec>
 800d902:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d904:	445a      	add	r2, fp
 800d906:	9209      	str	r2, [sp, #36]	@ 0x24
 800d908:	f89a 3000 	ldrb.w	r3, [sl]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	f000 809f 	beq.w	800da50 <_vfiprintf_r+0x1ec>
 800d912:	2300      	movs	r3, #0
 800d914:	f04f 32ff 	mov.w	r2, #4294967295
 800d918:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d91c:	f10a 0a01 	add.w	sl, sl, #1
 800d920:	9304      	str	r3, [sp, #16]
 800d922:	9307      	str	r3, [sp, #28]
 800d924:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d928:	931a      	str	r3, [sp, #104]	@ 0x68
 800d92a:	4654      	mov	r4, sl
 800d92c:	2205      	movs	r2, #5
 800d92e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d932:	4853      	ldr	r0, [pc, #332]	@ (800da80 <_vfiprintf_r+0x21c>)
 800d934:	f7f2 fc6c 	bl	8000210 <memchr>
 800d938:	9a04      	ldr	r2, [sp, #16]
 800d93a:	b9d8      	cbnz	r0, 800d974 <_vfiprintf_r+0x110>
 800d93c:	06d1      	lsls	r1, r2, #27
 800d93e:	bf44      	itt	mi
 800d940:	2320      	movmi	r3, #32
 800d942:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d946:	0713      	lsls	r3, r2, #28
 800d948:	bf44      	itt	mi
 800d94a:	232b      	movmi	r3, #43	@ 0x2b
 800d94c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d950:	f89a 3000 	ldrb.w	r3, [sl]
 800d954:	2b2a      	cmp	r3, #42	@ 0x2a
 800d956:	d015      	beq.n	800d984 <_vfiprintf_r+0x120>
 800d958:	9a07      	ldr	r2, [sp, #28]
 800d95a:	4654      	mov	r4, sl
 800d95c:	2000      	movs	r0, #0
 800d95e:	f04f 0c0a 	mov.w	ip, #10
 800d962:	4621      	mov	r1, r4
 800d964:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d968:	3b30      	subs	r3, #48	@ 0x30
 800d96a:	2b09      	cmp	r3, #9
 800d96c:	d94b      	bls.n	800da06 <_vfiprintf_r+0x1a2>
 800d96e:	b1b0      	cbz	r0, 800d99e <_vfiprintf_r+0x13a>
 800d970:	9207      	str	r2, [sp, #28]
 800d972:	e014      	b.n	800d99e <_vfiprintf_r+0x13a>
 800d974:	eba0 0308 	sub.w	r3, r0, r8
 800d978:	fa09 f303 	lsl.w	r3, r9, r3
 800d97c:	4313      	orrs	r3, r2
 800d97e:	9304      	str	r3, [sp, #16]
 800d980:	46a2      	mov	sl, r4
 800d982:	e7d2      	b.n	800d92a <_vfiprintf_r+0xc6>
 800d984:	9b03      	ldr	r3, [sp, #12]
 800d986:	1d19      	adds	r1, r3, #4
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	9103      	str	r1, [sp, #12]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	bfbb      	ittet	lt
 800d990:	425b      	neglt	r3, r3
 800d992:	f042 0202 	orrlt.w	r2, r2, #2
 800d996:	9307      	strge	r3, [sp, #28]
 800d998:	9307      	strlt	r3, [sp, #28]
 800d99a:	bfb8      	it	lt
 800d99c:	9204      	strlt	r2, [sp, #16]
 800d99e:	7823      	ldrb	r3, [r4, #0]
 800d9a0:	2b2e      	cmp	r3, #46	@ 0x2e
 800d9a2:	d10a      	bne.n	800d9ba <_vfiprintf_r+0x156>
 800d9a4:	7863      	ldrb	r3, [r4, #1]
 800d9a6:	2b2a      	cmp	r3, #42	@ 0x2a
 800d9a8:	d132      	bne.n	800da10 <_vfiprintf_r+0x1ac>
 800d9aa:	9b03      	ldr	r3, [sp, #12]
 800d9ac:	1d1a      	adds	r2, r3, #4
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	9203      	str	r2, [sp, #12]
 800d9b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d9b6:	3402      	adds	r4, #2
 800d9b8:	9305      	str	r3, [sp, #20]
 800d9ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800da90 <_vfiprintf_r+0x22c>
 800d9be:	7821      	ldrb	r1, [r4, #0]
 800d9c0:	2203      	movs	r2, #3
 800d9c2:	4650      	mov	r0, sl
 800d9c4:	f7f2 fc24 	bl	8000210 <memchr>
 800d9c8:	b138      	cbz	r0, 800d9da <_vfiprintf_r+0x176>
 800d9ca:	9b04      	ldr	r3, [sp, #16]
 800d9cc:	eba0 000a 	sub.w	r0, r0, sl
 800d9d0:	2240      	movs	r2, #64	@ 0x40
 800d9d2:	4082      	lsls	r2, r0
 800d9d4:	4313      	orrs	r3, r2
 800d9d6:	3401      	adds	r4, #1
 800d9d8:	9304      	str	r3, [sp, #16]
 800d9da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9de:	4829      	ldr	r0, [pc, #164]	@ (800da84 <_vfiprintf_r+0x220>)
 800d9e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d9e4:	2206      	movs	r2, #6
 800d9e6:	f7f2 fc13 	bl	8000210 <memchr>
 800d9ea:	2800      	cmp	r0, #0
 800d9ec:	d03f      	beq.n	800da6e <_vfiprintf_r+0x20a>
 800d9ee:	4b26      	ldr	r3, [pc, #152]	@ (800da88 <_vfiprintf_r+0x224>)
 800d9f0:	bb1b      	cbnz	r3, 800da3a <_vfiprintf_r+0x1d6>
 800d9f2:	9b03      	ldr	r3, [sp, #12]
 800d9f4:	3307      	adds	r3, #7
 800d9f6:	f023 0307 	bic.w	r3, r3, #7
 800d9fa:	3308      	adds	r3, #8
 800d9fc:	9303      	str	r3, [sp, #12]
 800d9fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da00:	443b      	add	r3, r7
 800da02:	9309      	str	r3, [sp, #36]	@ 0x24
 800da04:	e76a      	b.n	800d8dc <_vfiprintf_r+0x78>
 800da06:	fb0c 3202 	mla	r2, ip, r2, r3
 800da0a:	460c      	mov	r4, r1
 800da0c:	2001      	movs	r0, #1
 800da0e:	e7a8      	b.n	800d962 <_vfiprintf_r+0xfe>
 800da10:	2300      	movs	r3, #0
 800da12:	3401      	adds	r4, #1
 800da14:	9305      	str	r3, [sp, #20]
 800da16:	4619      	mov	r1, r3
 800da18:	f04f 0c0a 	mov.w	ip, #10
 800da1c:	4620      	mov	r0, r4
 800da1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da22:	3a30      	subs	r2, #48	@ 0x30
 800da24:	2a09      	cmp	r2, #9
 800da26:	d903      	bls.n	800da30 <_vfiprintf_r+0x1cc>
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d0c6      	beq.n	800d9ba <_vfiprintf_r+0x156>
 800da2c:	9105      	str	r1, [sp, #20]
 800da2e:	e7c4      	b.n	800d9ba <_vfiprintf_r+0x156>
 800da30:	fb0c 2101 	mla	r1, ip, r1, r2
 800da34:	4604      	mov	r4, r0
 800da36:	2301      	movs	r3, #1
 800da38:	e7f0      	b.n	800da1c <_vfiprintf_r+0x1b8>
 800da3a:	ab03      	add	r3, sp, #12
 800da3c:	9300      	str	r3, [sp, #0]
 800da3e:	462a      	mov	r2, r5
 800da40:	4b12      	ldr	r3, [pc, #72]	@ (800da8c <_vfiprintf_r+0x228>)
 800da42:	a904      	add	r1, sp, #16
 800da44:	4630      	mov	r0, r6
 800da46:	f3af 8000 	nop.w
 800da4a:	4607      	mov	r7, r0
 800da4c:	1c78      	adds	r0, r7, #1
 800da4e:	d1d6      	bne.n	800d9fe <_vfiprintf_r+0x19a>
 800da50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800da52:	07d9      	lsls	r1, r3, #31
 800da54:	d405      	bmi.n	800da62 <_vfiprintf_r+0x1fe>
 800da56:	89ab      	ldrh	r3, [r5, #12]
 800da58:	059a      	lsls	r2, r3, #22
 800da5a:	d402      	bmi.n	800da62 <_vfiprintf_r+0x1fe>
 800da5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800da5e:	f7fe fd71 	bl	800c544 <__retarget_lock_release_recursive>
 800da62:	89ab      	ldrh	r3, [r5, #12]
 800da64:	065b      	lsls	r3, r3, #25
 800da66:	f53f af1f 	bmi.w	800d8a8 <_vfiprintf_r+0x44>
 800da6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800da6c:	e71e      	b.n	800d8ac <_vfiprintf_r+0x48>
 800da6e:	ab03      	add	r3, sp, #12
 800da70:	9300      	str	r3, [sp, #0]
 800da72:	462a      	mov	r2, r5
 800da74:	4b05      	ldr	r3, [pc, #20]	@ (800da8c <_vfiprintf_r+0x228>)
 800da76:	a904      	add	r1, sp, #16
 800da78:	4630      	mov	r0, r6
 800da7a:	f000 f879 	bl	800db70 <_printf_i>
 800da7e:	e7e4      	b.n	800da4a <_vfiprintf_r+0x1e6>
 800da80:	0800f665 	.word	0x0800f665
 800da84:	0800f66f 	.word	0x0800f66f
 800da88:	00000000 	.word	0x00000000
 800da8c:	0800d841 	.word	0x0800d841
 800da90:	0800f66b 	.word	0x0800f66b

0800da94 <_printf_common>:
 800da94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da98:	4616      	mov	r6, r2
 800da9a:	4698      	mov	r8, r3
 800da9c:	688a      	ldr	r2, [r1, #8]
 800da9e:	690b      	ldr	r3, [r1, #16]
 800daa0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800daa4:	4293      	cmp	r3, r2
 800daa6:	bfb8      	it	lt
 800daa8:	4613      	movlt	r3, r2
 800daaa:	6033      	str	r3, [r6, #0]
 800daac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800dab0:	4607      	mov	r7, r0
 800dab2:	460c      	mov	r4, r1
 800dab4:	b10a      	cbz	r2, 800daba <_printf_common+0x26>
 800dab6:	3301      	adds	r3, #1
 800dab8:	6033      	str	r3, [r6, #0]
 800daba:	6823      	ldr	r3, [r4, #0]
 800dabc:	0699      	lsls	r1, r3, #26
 800dabe:	bf42      	ittt	mi
 800dac0:	6833      	ldrmi	r3, [r6, #0]
 800dac2:	3302      	addmi	r3, #2
 800dac4:	6033      	strmi	r3, [r6, #0]
 800dac6:	6825      	ldr	r5, [r4, #0]
 800dac8:	f015 0506 	ands.w	r5, r5, #6
 800dacc:	d106      	bne.n	800dadc <_printf_common+0x48>
 800dace:	f104 0a19 	add.w	sl, r4, #25
 800dad2:	68e3      	ldr	r3, [r4, #12]
 800dad4:	6832      	ldr	r2, [r6, #0]
 800dad6:	1a9b      	subs	r3, r3, r2
 800dad8:	42ab      	cmp	r3, r5
 800dada:	dc26      	bgt.n	800db2a <_printf_common+0x96>
 800dadc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800dae0:	6822      	ldr	r2, [r4, #0]
 800dae2:	3b00      	subs	r3, #0
 800dae4:	bf18      	it	ne
 800dae6:	2301      	movne	r3, #1
 800dae8:	0692      	lsls	r2, r2, #26
 800daea:	d42b      	bmi.n	800db44 <_printf_common+0xb0>
 800daec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800daf0:	4641      	mov	r1, r8
 800daf2:	4638      	mov	r0, r7
 800daf4:	47c8      	blx	r9
 800daf6:	3001      	adds	r0, #1
 800daf8:	d01e      	beq.n	800db38 <_printf_common+0xa4>
 800dafa:	6823      	ldr	r3, [r4, #0]
 800dafc:	6922      	ldr	r2, [r4, #16]
 800dafe:	f003 0306 	and.w	r3, r3, #6
 800db02:	2b04      	cmp	r3, #4
 800db04:	bf02      	ittt	eq
 800db06:	68e5      	ldreq	r5, [r4, #12]
 800db08:	6833      	ldreq	r3, [r6, #0]
 800db0a:	1aed      	subeq	r5, r5, r3
 800db0c:	68a3      	ldr	r3, [r4, #8]
 800db0e:	bf0c      	ite	eq
 800db10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800db14:	2500      	movne	r5, #0
 800db16:	4293      	cmp	r3, r2
 800db18:	bfc4      	itt	gt
 800db1a:	1a9b      	subgt	r3, r3, r2
 800db1c:	18ed      	addgt	r5, r5, r3
 800db1e:	2600      	movs	r6, #0
 800db20:	341a      	adds	r4, #26
 800db22:	42b5      	cmp	r5, r6
 800db24:	d11a      	bne.n	800db5c <_printf_common+0xc8>
 800db26:	2000      	movs	r0, #0
 800db28:	e008      	b.n	800db3c <_printf_common+0xa8>
 800db2a:	2301      	movs	r3, #1
 800db2c:	4652      	mov	r2, sl
 800db2e:	4641      	mov	r1, r8
 800db30:	4638      	mov	r0, r7
 800db32:	47c8      	blx	r9
 800db34:	3001      	adds	r0, #1
 800db36:	d103      	bne.n	800db40 <_printf_common+0xac>
 800db38:	f04f 30ff 	mov.w	r0, #4294967295
 800db3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db40:	3501      	adds	r5, #1
 800db42:	e7c6      	b.n	800dad2 <_printf_common+0x3e>
 800db44:	18e1      	adds	r1, r4, r3
 800db46:	1c5a      	adds	r2, r3, #1
 800db48:	2030      	movs	r0, #48	@ 0x30
 800db4a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800db4e:	4422      	add	r2, r4
 800db50:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800db54:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800db58:	3302      	adds	r3, #2
 800db5a:	e7c7      	b.n	800daec <_printf_common+0x58>
 800db5c:	2301      	movs	r3, #1
 800db5e:	4622      	mov	r2, r4
 800db60:	4641      	mov	r1, r8
 800db62:	4638      	mov	r0, r7
 800db64:	47c8      	blx	r9
 800db66:	3001      	adds	r0, #1
 800db68:	d0e6      	beq.n	800db38 <_printf_common+0xa4>
 800db6a:	3601      	adds	r6, #1
 800db6c:	e7d9      	b.n	800db22 <_printf_common+0x8e>
	...

0800db70 <_printf_i>:
 800db70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800db74:	7e0f      	ldrb	r7, [r1, #24]
 800db76:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800db78:	2f78      	cmp	r7, #120	@ 0x78
 800db7a:	4691      	mov	r9, r2
 800db7c:	4680      	mov	r8, r0
 800db7e:	460c      	mov	r4, r1
 800db80:	469a      	mov	sl, r3
 800db82:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800db86:	d807      	bhi.n	800db98 <_printf_i+0x28>
 800db88:	2f62      	cmp	r7, #98	@ 0x62
 800db8a:	d80a      	bhi.n	800dba2 <_printf_i+0x32>
 800db8c:	2f00      	cmp	r7, #0
 800db8e:	f000 80d2 	beq.w	800dd36 <_printf_i+0x1c6>
 800db92:	2f58      	cmp	r7, #88	@ 0x58
 800db94:	f000 80b9 	beq.w	800dd0a <_printf_i+0x19a>
 800db98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800db9c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800dba0:	e03a      	b.n	800dc18 <_printf_i+0xa8>
 800dba2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800dba6:	2b15      	cmp	r3, #21
 800dba8:	d8f6      	bhi.n	800db98 <_printf_i+0x28>
 800dbaa:	a101      	add	r1, pc, #4	@ (adr r1, 800dbb0 <_printf_i+0x40>)
 800dbac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dbb0:	0800dc09 	.word	0x0800dc09
 800dbb4:	0800dc1d 	.word	0x0800dc1d
 800dbb8:	0800db99 	.word	0x0800db99
 800dbbc:	0800db99 	.word	0x0800db99
 800dbc0:	0800db99 	.word	0x0800db99
 800dbc4:	0800db99 	.word	0x0800db99
 800dbc8:	0800dc1d 	.word	0x0800dc1d
 800dbcc:	0800db99 	.word	0x0800db99
 800dbd0:	0800db99 	.word	0x0800db99
 800dbd4:	0800db99 	.word	0x0800db99
 800dbd8:	0800db99 	.word	0x0800db99
 800dbdc:	0800dd1d 	.word	0x0800dd1d
 800dbe0:	0800dc47 	.word	0x0800dc47
 800dbe4:	0800dcd7 	.word	0x0800dcd7
 800dbe8:	0800db99 	.word	0x0800db99
 800dbec:	0800db99 	.word	0x0800db99
 800dbf0:	0800dd3f 	.word	0x0800dd3f
 800dbf4:	0800db99 	.word	0x0800db99
 800dbf8:	0800dc47 	.word	0x0800dc47
 800dbfc:	0800db99 	.word	0x0800db99
 800dc00:	0800db99 	.word	0x0800db99
 800dc04:	0800dcdf 	.word	0x0800dcdf
 800dc08:	6833      	ldr	r3, [r6, #0]
 800dc0a:	1d1a      	adds	r2, r3, #4
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	6032      	str	r2, [r6, #0]
 800dc10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dc14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800dc18:	2301      	movs	r3, #1
 800dc1a:	e09d      	b.n	800dd58 <_printf_i+0x1e8>
 800dc1c:	6833      	ldr	r3, [r6, #0]
 800dc1e:	6820      	ldr	r0, [r4, #0]
 800dc20:	1d19      	adds	r1, r3, #4
 800dc22:	6031      	str	r1, [r6, #0]
 800dc24:	0606      	lsls	r6, r0, #24
 800dc26:	d501      	bpl.n	800dc2c <_printf_i+0xbc>
 800dc28:	681d      	ldr	r5, [r3, #0]
 800dc2a:	e003      	b.n	800dc34 <_printf_i+0xc4>
 800dc2c:	0645      	lsls	r5, r0, #25
 800dc2e:	d5fb      	bpl.n	800dc28 <_printf_i+0xb8>
 800dc30:	f9b3 5000 	ldrsh.w	r5, [r3]
 800dc34:	2d00      	cmp	r5, #0
 800dc36:	da03      	bge.n	800dc40 <_printf_i+0xd0>
 800dc38:	232d      	movs	r3, #45	@ 0x2d
 800dc3a:	426d      	negs	r5, r5
 800dc3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dc40:	4859      	ldr	r0, [pc, #356]	@ (800dda8 <_printf_i+0x238>)
 800dc42:	230a      	movs	r3, #10
 800dc44:	e011      	b.n	800dc6a <_printf_i+0xfa>
 800dc46:	6821      	ldr	r1, [r4, #0]
 800dc48:	6833      	ldr	r3, [r6, #0]
 800dc4a:	0608      	lsls	r0, r1, #24
 800dc4c:	f853 5b04 	ldr.w	r5, [r3], #4
 800dc50:	d402      	bmi.n	800dc58 <_printf_i+0xe8>
 800dc52:	0649      	lsls	r1, r1, #25
 800dc54:	bf48      	it	mi
 800dc56:	b2ad      	uxthmi	r5, r5
 800dc58:	2f6f      	cmp	r7, #111	@ 0x6f
 800dc5a:	4853      	ldr	r0, [pc, #332]	@ (800dda8 <_printf_i+0x238>)
 800dc5c:	6033      	str	r3, [r6, #0]
 800dc5e:	bf14      	ite	ne
 800dc60:	230a      	movne	r3, #10
 800dc62:	2308      	moveq	r3, #8
 800dc64:	2100      	movs	r1, #0
 800dc66:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800dc6a:	6866      	ldr	r6, [r4, #4]
 800dc6c:	60a6      	str	r6, [r4, #8]
 800dc6e:	2e00      	cmp	r6, #0
 800dc70:	bfa2      	ittt	ge
 800dc72:	6821      	ldrge	r1, [r4, #0]
 800dc74:	f021 0104 	bicge.w	r1, r1, #4
 800dc78:	6021      	strge	r1, [r4, #0]
 800dc7a:	b90d      	cbnz	r5, 800dc80 <_printf_i+0x110>
 800dc7c:	2e00      	cmp	r6, #0
 800dc7e:	d04b      	beq.n	800dd18 <_printf_i+0x1a8>
 800dc80:	4616      	mov	r6, r2
 800dc82:	fbb5 f1f3 	udiv	r1, r5, r3
 800dc86:	fb03 5711 	mls	r7, r3, r1, r5
 800dc8a:	5dc7      	ldrb	r7, [r0, r7]
 800dc8c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dc90:	462f      	mov	r7, r5
 800dc92:	42bb      	cmp	r3, r7
 800dc94:	460d      	mov	r5, r1
 800dc96:	d9f4      	bls.n	800dc82 <_printf_i+0x112>
 800dc98:	2b08      	cmp	r3, #8
 800dc9a:	d10b      	bne.n	800dcb4 <_printf_i+0x144>
 800dc9c:	6823      	ldr	r3, [r4, #0]
 800dc9e:	07df      	lsls	r7, r3, #31
 800dca0:	d508      	bpl.n	800dcb4 <_printf_i+0x144>
 800dca2:	6923      	ldr	r3, [r4, #16]
 800dca4:	6861      	ldr	r1, [r4, #4]
 800dca6:	4299      	cmp	r1, r3
 800dca8:	bfde      	ittt	le
 800dcaa:	2330      	movle	r3, #48	@ 0x30
 800dcac:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dcb0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800dcb4:	1b92      	subs	r2, r2, r6
 800dcb6:	6122      	str	r2, [r4, #16]
 800dcb8:	f8cd a000 	str.w	sl, [sp]
 800dcbc:	464b      	mov	r3, r9
 800dcbe:	aa03      	add	r2, sp, #12
 800dcc0:	4621      	mov	r1, r4
 800dcc2:	4640      	mov	r0, r8
 800dcc4:	f7ff fee6 	bl	800da94 <_printf_common>
 800dcc8:	3001      	adds	r0, #1
 800dcca:	d14a      	bne.n	800dd62 <_printf_i+0x1f2>
 800dccc:	f04f 30ff 	mov.w	r0, #4294967295
 800dcd0:	b004      	add	sp, #16
 800dcd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcd6:	6823      	ldr	r3, [r4, #0]
 800dcd8:	f043 0320 	orr.w	r3, r3, #32
 800dcdc:	6023      	str	r3, [r4, #0]
 800dcde:	4833      	ldr	r0, [pc, #204]	@ (800ddac <_printf_i+0x23c>)
 800dce0:	2778      	movs	r7, #120	@ 0x78
 800dce2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dce6:	6823      	ldr	r3, [r4, #0]
 800dce8:	6831      	ldr	r1, [r6, #0]
 800dcea:	061f      	lsls	r7, r3, #24
 800dcec:	f851 5b04 	ldr.w	r5, [r1], #4
 800dcf0:	d402      	bmi.n	800dcf8 <_printf_i+0x188>
 800dcf2:	065f      	lsls	r7, r3, #25
 800dcf4:	bf48      	it	mi
 800dcf6:	b2ad      	uxthmi	r5, r5
 800dcf8:	6031      	str	r1, [r6, #0]
 800dcfa:	07d9      	lsls	r1, r3, #31
 800dcfc:	bf44      	itt	mi
 800dcfe:	f043 0320 	orrmi.w	r3, r3, #32
 800dd02:	6023      	strmi	r3, [r4, #0]
 800dd04:	b11d      	cbz	r5, 800dd0e <_printf_i+0x19e>
 800dd06:	2310      	movs	r3, #16
 800dd08:	e7ac      	b.n	800dc64 <_printf_i+0xf4>
 800dd0a:	4827      	ldr	r0, [pc, #156]	@ (800dda8 <_printf_i+0x238>)
 800dd0c:	e7e9      	b.n	800dce2 <_printf_i+0x172>
 800dd0e:	6823      	ldr	r3, [r4, #0]
 800dd10:	f023 0320 	bic.w	r3, r3, #32
 800dd14:	6023      	str	r3, [r4, #0]
 800dd16:	e7f6      	b.n	800dd06 <_printf_i+0x196>
 800dd18:	4616      	mov	r6, r2
 800dd1a:	e7bd      	b.n	800dc98 <_printf_i+0x128>
 800dd1c:	6833      	ldr	r3, [r6, #0]
 800dd1e:	6825      	ldr	r5, [r4, #0]
 800dd20:	6961      	ldr	r1, [r4, #20]
 800dd22:	1d18      	adds	r0, r3, #4
 800dd24:	6030      	str	r0, [r6, #0]
 800dd26:	062e      	lsls	r6, r5, #24
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	d501      	bpl.n	800dd30 <_printf_i+0x1c0>
 800dd2c:	6019      	str	r1, [r3, #0]
 800dd2e:	e002      	b.n	800dd36 <_printf_i+0x1c6>
 800dd30:	0668      	lsls	r0, r5, #25
 800dd32:	d5fb      	bpl.n	800dd2c <_printf_i+0x1bc>
 800dd34:	8019      	strh	r1, [r3, #0]
 800dd36:	2300      	movs	r3, #0
 800dd38:	6123      	str	r3, [r4, #16]
 800dd3a:	4616      	mov	r6, r2
 800dd3c:	e7bc      	b.n	800dcb8 <_printf_i+0x148>
 800dd3e:	6833      	ldr	r3, [r6, #0]
 800dd40:	1d1a      	adds	r2, r3, #4
 800dd42:	6032      	str	r2, [r6, #0]
 800dd44:	681e      	ldr	r6, [r3, #0]
 800dd46:	6862      	ldr	r2, [r4, #4]
 800dd48:	2100      	movs	r1, #0
 800dd4a:	4630      	mov	r0, r6
 800dd4c:	f7f2 fa60 	bl	8000210 <memchr>
 800dd50:	b108      	cbz	r0, 800dd56 <_printf_i+0x1e6>
 800dd52:	1b80      	subs	r0, r0, r6
 800dd54:	6060      	str	r0, [r4, #4]
 800dd56:	6863      	ldr	r3, [r4, #4]
 800dd58:	6123      	str	r3, [r4, #16]
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dd60:	e7aa      	b.n	800dcb8 <_printf_i+0x148>
 800dd62:	6923      	ldr	r3, [r4, #16]
 800dd64:	4632      	mov	r2, r6
 800dd66:	4649      	mov	r1, r9
 800dd68:	4640      	mov	r0, r8
 800dd6a:	47d0      	blx	sl
 800dd6c:	3001      	adds	r0, #1
 800dd6e:	d0ad      	beq.n	800dccc <_printf_i+0x15c>
 800dd70:	6823      	ldr	r3, [r4, #0]
 800dd72:	079b      	lsls	r3, r3, #30
 800dd74:	d413      	bmi.n	800dd9e <_printf_i+0x22e>
 800dd76:	68e0      	ldr	r0, [r4, #12]
 800dd78:	9b03      	ldr	r3, [sp, #12]
 800dd7a:	4298      	cmp	r0, r3
 800dd7c:	bfb8      	it	lt
 800dd7e:	4618      	movlt	r0, r3
 800dd80:	e7a6      	b.n	800dcd0 <_printf_i+0x160>
 800dd82:	2301      	movs	r3, #1
 800dd84:	4632      	mov	r2, r6
 800dd86:	4649      	mov	r1, r9
 800dd88:	4640      	mov	r0, r8
 800dd8a:	47d0      	blx	sl
 800dd8c:	3001      	adds	r0, #1
 800dd8e:	d09d      	beq.n	800dccc <_printf_i+0x15c>
 800dd90:	3501      	adds	r5, #1
 800dd92:	68e3      	ldr	r3, [r4, #12]
 800dd94:	9903      	ldr	r1, [sp, #12]
 800dd96:	1a5b      	subs	r3, r3, r1
 800dd98:	42ab      	cmp	r3, r5
 800dd9a:	dcf2      	bgt.n	800dd82 <_printf_i+0x212>
 800dd9c:	e7eb      	b.n	800dd76 <_printf_i+0x206>
 800dd9e:	2500      	movs	r5, #0
 800dda0:	f104 0619 	add.w	r6, r4, #25
 800dda4:	e7f5      	b.n	800dd92 <_printf_i+0x222>
 800dda6:	bf00      	nop
 800dda8:	0800f676 	.word	0x0800f676
 800ddac:	0800f687 	.word	0x0800f687

0800ddb0 <__swbuf_r>:
 800ddb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddb2:	460e      	mov	r6, r1
 800ddb4:	4614      	mov	r4, r2
 800ddb6:	4605      	mov	r5, r0
 800ddb8:	b118      	cbz	r0, 800ddc2 <__swbuf_r+0x12>
 800ddba:	6a03      	ldr	r3, [r0, #32]
 800ddbc:	b90b      	cbnz	r3, 800ddc2 <__swbuf_r+0x12>
 800ddbe:	f7fe faab 	bl	800c318 <__sinit>
 800ddc2:	69a3      	ldr	r3, [r4, #24]
 800ddc4:	60a3      	str	r3, [r4, #8]
 800ddc6:	89a3      	ldrh	r3, [r4, #12]
 800ddc8:	071a      	lsls	r2, r3, #28
 800ddca:	d501      	bpl.n	800ddd0 <__swbuf_r+0x20>
 800ddcc:	6923      	ldr	r3, [r4, #16]
 800ddce:	b943      	cbnz	r3, 800dde2 <__swbuf_r+0x32>
 800ddd0:	4621      	mov	r1, r4
 800ddd2:	4628      	mov	r0, r5
 800ddd4:	f000 f82a 	bl	800de2c <__swsetup_r>
 800ddd8:	b118      	cbz	r0, 800dde2 <__swbuf_r+0x32>
 800ddda:	f04f 37ff 	mov.w	r7, #4294967295
 800ddde:	4638      	mov	r0, r7
 800dde0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dde2:	6823      	ldr	r3, [r4, #0]
 800dde4:	6922      	ldr	r2, [r4, #16]
 800dde6:	1a98      	subs	r0, r3, r2
 800dde8:	6963      	ldr	r3, [r4, #20]
 800ddea:	b2f6      	uxtb	r6, r6
 800ddec:	4283      	cmp	r3, r0
 800ddee:	4637      	mov	r7, r6
 800ddf0:	dc05      	bgt.n	800ddfe <__swbuf_r+0x4e>
 800ddf2:	4621      	mov	r1, r4
 800ddf4:	4628      	mov	r0, r5
 800ddf6:	f7ff fc99 	bl	800d72c <_fflush_r>
 800ddfa:	2800      	cmp	r0, #0
 800ddfc:	d1ed      	bne.n	800ddda <__swbuf_r+0x2a>
 800ddfe:	68a3      	ldr	r3, [r4, #8]
 800de00:	3b01      	subs	r3, #1
 800de02:	60a3      	str	r3, [r4, #8]
 800de04:	6823      	ldr	r3, [r4, #0]
 800de06:	1c5a      	adds	r2, r3, #1
 800de08:	6022      	str	r2, [r4, #0]
 800de0a:	701e      	strb	r6, [r3, #0]
 800de0c:	6962      	ldr	r2, [r4, #20]
 800de0e:	1c43      	adds	r3, r0, #1
 800de10:	429a      	cmp	r2, r3
 800de12:	d004      	beq.n	800de1e <__swbuf_r+0x6e>
 800de14:	89a3      	ldrh	r3, [r4, #12]
 800de16:	07db      	lsls	r3, r3, #31
 800de18:	d5e1      	bpl.n	800ddde <__swbuf_r+0x2e>
 800de1a:	2e0a      	cmp	r6, #10
 800de1c:	d1df      	bne.n	800ddde <__swbuf_r+0x2e>
 800de1e:	4621      	mov	r1, r4
 800de20:	4628      	mov	r0, r5
 800de22:	f7ff fc83 	bl	800d72c <_fflush_r>
 800de26:	2800      	cmp	r0, #0
 800de28:	d0d9      	beq.n	800ddde <__swbuf_r+0x2e>
 800de2a:	e7d6      	b.n	800ddda <__swbuf_r+0x2a>

0800de2c <__swsetup_r>:
 800de2c:	b538      	push	{r3, r4, r5, lr}
 800de2e:	4b29      	ldr	r3, [pc, #164]	@ (800ded4 <__swsetup_r+0xa8>)
 800de30:	4605      	mov	r5, r0
 800de32:	6818      	ldr	r0, [r3, #0]
 800de34:	460c      	mov	r4, r1
 800de36:	b118      	cbz	r0, 800de40 <__swsetup_r+0x14>
 800de38:	6a03      	ldr	r3, [r0, #32]
 800de3a:	b90b      	cbnz	r3, 800de40 <__swsetup_r+0x14>
 800de3c:	f7fe fa6c 	bl	800c318 <__sinit>
 800de40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de44:	0719      	lsls	r1, r3, #28
 800de46:	d422      	bmi.n	800de8e <__swsetup_r+0x62>
 800de48:	06da      	lsls	r2, r3, #27
 800de4a:	d407      	bmi.n	800de5c <__swsetup_r+0x30>
 800de4c:	2209      	movs	r2, #9
 800de4e:	602a      	str	r2, [r5, #0]
 800de50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de54:	81a3      	strh	r3, [r4, #12]
 800de56:	f04f 30ff 	mov.w	r0, #4294967295
 800de5a:	e033      	b.n	800dec4 <__swsetup_r+0x98>
 800de5c:	0758      	lsls	r0, r3, #29
 800de5e:	d512      	bpl.n	800de86 <__swsetup_r+0x5a>
 800de60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800de62:	b141      	cbz	r1, 800de76 <__swsetup_r+0x4a>
 800de64:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800de68:	4299      	cmp	r1, r3
 800de6a:	d002      	beq.n	800de72 <__swsetup_r+0x46>
 800de6c:	4628      	mov	r0, r5
 800de6e:	f7fe fb83 	bl	800c578 <_free_r>
 800de72:	2300      	movs	r3, #0
 800de74:	6363      	str	r3, [r4, #52]	@ 0x34
 800de76:	89a3      	ldrh	r3, [r4, #12]
 800de78:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800de7c:	81a3      	strh	r3, [r4, #12]
 800de7e:	2300      	movs	r3, #0
 800de80:	6063      	str	r3, [r4, #4]
 800de82:	6923      	ldr	r3, [r4, #16]
 800de84:	6023      	str	r3, [r4, #0]
 800de86:	89a3      	ldrh	r3, [r4, #12]
 800de88:	f043 0308 	orr.w	r3, r3, #8
 800de8c:	81a3      	strh	r3, [r4, #12]
 800de8e:	6923      	ldr	r3, [r4, #16]
 800de90:	b94b      	cbnz	r3, 800dea6 <__swsetup_r+0x7a>
 800de92:	89a3      	ldrh	r3, [r4, #12]
 800de94:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800de98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800de9c:	d003      	beq.n	800dea6 <__swsetup_r+0x7a>
 800de9e:	4621      	mov	r1, r4
 800dea0:	4628      	mov	r0, r5
 800dea2:	f000 f883 	bl	800dfac <__smakebuf_r>
 800dea6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800deaa:	f013 0201 	ands.w	r2, r3, #1
 800deae:	d00a      	beq.n	800dec6 <__swsetup_r+0x9a>
 800deb0:	2200      	movs	r2, #0
 800deb2:	60a2      	str	r2, [r4, #8]
 800deb4:	6962      	ldr	r2, [r4, #20]
 800deb6:	4252      	negs	r2, r2
 800deb8:	61a2      	str	r2, [r4, #24]
 800deba:	6922      	ldr	r2, [r4, #16]
 800debc:	b942      	cbnz	r2, 800ded0 <__swsetup_r+0xa4>
 800debe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800dec2:	d1c5      	bne.n	800de50 <__swsetup_r+0x24>
 800dec4:	bd38      	pop	{r3, r4, r5, pc}
 800dec6:	0799      	lsls	r1, r3, #30
 800dec8:	bf58      	it	pl
 800deca:	6962      	ldrpl	r2, [r4, #20]
 800decc:	60a2      	str	r2, [r4, #8]
 800dece:	e7f4      	b.n	800deba <__swsetup_r+0x8e>
 800ded0:	2000      	movs	r0, #0
 800ded2:	e7f7      	b.n	800dec4 <__swsetup_r+0x98>
 800ded4:	2000019c 	.word	0x2000019c

0800ded8 <_raise_r>:
 800ded8:	291f      	cmp	r1, #31
 800deda:	b538      	push	{r3, r4, r5, lr}
 800dedc:	4605      	mov	r5, r0
 800dede:	460c      	mov	r4, r1
 800dee0:	d904      	bls.n	800deec <_raise_r+0x14>
 800dee2:	2316      	movs	r3, #22
 800dee4:	6003      	str	r3, [r0, #0]
 800dee6:	f04f 30ff 	mov.w	r0, #4294967295
 800deea:	bd38      	pop	{r3, r4, r5, pc}
 800deec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800deee:	b112      	cbz	r2, 800def6 <_raise_r+0x1e>
 800def0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800def4:	b94b      	cbnz	r3, 800df0a <_raise_r+0x32>
 800def6:	4628      	mov	r0, r5
 800def8:	f000 f830 	bl	800df5c <_getpid_r>
 800defc:	4622      	mov	r2, r4
 800defe:	4601      	mov	r1, r0
 800df00:	4628      	mov	r0, r5
 800df02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df06:	f000 b817 	b.w	800df38 <_kill_r>
 800df0a:	2b01      	cmp	r3, #1
 800df0c:	d00a      	beq.n	800df24 <_raise_r+0x4c>
 800df0e:	1c59      	adds	r1, r3, #1
 800df10:	d103      	bne.n	800df1a <_raise_r+0x42>
 800df12:	2316      	movs	r3, #22
 800df14:	6003      	str	r3, [r0, #0]
 800df16:	2001      	movs	r0, #1
 800df18:	e7e7      	b.n	800deea <_raise_r+0x12>
 800df1a:	2100      	movs	r1, #0
 800df1c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800df20:	4620      	mov	r0, r4
 800df22:	4798      	blx	r3
 800df24:	2000      	movs	r0, #0
 800df26:	e7e0      	b.n	800deea <_raise_r+0x12>

0800df28 <raise>:
 800df28:	4b02      	ldr	r3, [pc, #8]	@ (800df34 <raise+0xc>)
 800df2a:	4601      	mov	r1, r0
 800df2c:	6818      	ldr	r0, [r3, #0]
 800df2e:	f7ff bfd3 	b.w	800ded8 <_raise_r>
 800df32:	bf00      	nop
 800df34:	2000019c 	.word	0x2000019c

0800df38 <_kill_r>:
 800df38:	b538      	push	{r3, r4, r5, lr}
 800df3a:	4d07      	ldr	r5, [pc, #28]	@ (800df58 <_kill_r+0x20>)
 800df3c:	2300      	movs	r3, #0
 800df3e:	4604      	mov	r4, r0
 800df40:	4608      	mov	r0, r1
 800df42:	4611      	mov	r1, r2
 800df44:	602b      	str	r3, [r5, #0]
 800df46:	f7f7 fff3 	bl	8005f30 <_kill>
 800df4a:	1c43      	adds	r3, r0, #1
 800df4c:	d102      	bne.n	800df54 <_kill_r+0x1c>
 800df4e:	682b      	ldr	r3, [r5, #0]
 800df50:	b103      	cbz	r3, 800df54 <_kill_r+0x1c>
 800df52:	6023      	str	r3, [r4, #0]
 800df54:	bd38      	pop	{r3, r4, r5, pc}
 800df56:	bf00      	nop
 800df58:	200027cc 	.word	0x200027cc

0800df5c <_getpid_r>:
 800df5c:	f7f7 bfe0 	b.w	8005f20 <_getpid>

0800df60 <__swhatbuf_r>:
 800df60:	b570      	push	{r4, r5, r6, lr}
 800df62:	460c      	mov	r4, r1
 800df64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df68:	2900      	cmp	r1, #0
 800df6a:	b096      	sub	sp, #88	@ 0x58
 800df6c:	4615      	mov	r5, r2
 800df6e:	461e      	mov	r6, r3
 800df70:	da0d      	bge.n	800df8e <__swhatbuf_r+0x2e>
 800df72:	89a3      	ldrh	r3, [r4, #12]
 800df74:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800df78:	f04f 0100 	mov.w	r1, #0
 800df7c:	bf14      	ite	ne
 800df7e:	2340      	movne	r3, #64	@ 0x40
 800df80:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800df84:	2000      	movs	r0, #0
 800df86:	6031      	str	r1, [r6, #0]
 800df88:	602b      	str	r3, [r5, #0]
 800df8a:	b016      	add	sp, #88	@ 0x58
 800df8c:	bd70      	pop	{r4, r5, r6, pc}
 800df8e:	466a      	mov	r2, sp
 800df90:	f000 f848 	bl	800e024 <_fstat_r>
 800df94:	2800      	cmp	r0, #0
 800df96:	dbec      	blt.n	800df72 <__swhatbuf_r+0x12>
 800df98:	9901      	ldr	r1, [sp, #4]
 800df9a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800df9e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800dfa2:	4259      	negs	r1, r3
 800dfa4:	4159      	adcs	r1, r3
 800dfa6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dfaa:	e7eb      	b.n	800df84 <__swhatbuf_r+0x24>

0800dfac <__smakebuf_r>:
 800dfac:	898b      	ldrh	r3, [r1, #12]
 800dfae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dfb0:	079d      	lsls	r5, r3, #30
 800dfb2:	4606      	mov	r6, r0
 800dfb4:	460c      	mov	r4, r1
 800dfb6:	d507      	bpl.n	800dfc8 <__smakebuf_r+0x1c>
 800dfb8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800dfbc:	6023      	str	r3, [r4, #0]
 800dfbe:	6123      	str	r3, [r4, #16]
 800dfc0:	2301      	movs	r3, #1
 800dfc2:	6163      	str	r3, [r4, #20]
 800dfc4:	b003      	add	sp, #12
 800dfc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dfc8:	ab01      	add	r3, sp, #4
 800dfca:	466a      	mov	r2, sp
 800dfcc:	f7ff ffc8 	bl	800df60 <__swhatbuf_r>
 800dfd0:	9f00      	ldr	r7, [sp, #0]
 800dfd2:	4605      	mov	r5, r0
 800dfd4:	4639      	mov	r1, r7
 800dfd6:	4630      	mov	r0, r6
 800dfd8:	f7fd fa76 	bl	800b4c8 <_malloc_r>
 800dfdc:	b948      	cbnz	r0, 800dff2 <__smakebuf_r+0x46>
 800dfde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dfe2:	059a      	lsls	r2, r3, #22
 800dfe4:	d4ee      	bmi.n	800dfc4 <__smakebuf_r+0x18>
 800dfe6:	f023 0303 	bic.w	r3, r3, #3
 800dfea:	f043 0302 	orr.w	r3, r3, #2
 800dfee:	81a3      	strh	r3, [r4, #12]
 800dff0:	e7e2      	b.n	800dfb8 <__smakebuf_r+0xc>
 800dff2:	89a3      	ldrh	r3, [r4, #12]
 800dff4:	6020      	str	r0, [r4, #0]
 800dff6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dffa:	81a3      	strh	r3, [r4, #12]
 800dffc:	9b01      	ldr	r3, [sp, #4]
 800dffe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e002:	b15b      	cbz	r3, 800e01c <__smakebuf_r+0x70>
 800e004:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e008:	4630      	mov	r0, r6
 800e00a:	f000 f81d 	bl	800e048 <_isatty_r>
 800e00e:	b128      	cbz	r0, 800e01c <__smakebuf_r+0x70>
 800e010:	89a3      	ldrh	r3, [r4, #12]
 800e012:	f023 0303 	bic.w	r3, r3, #3
 800e016:	f043 0301 	orr.w	r3, r3, #1
 800e01a:	81a3      	strh	r3, [r4, #12]
 800e01c:	89a3      	ldrh	r3, [r4, #12]
 800e01e:	431d      	orrs	r5, r3
 800e020:	81a5      	strh	r5, [r4, #12]
 800e022:	e7cf      	b.n	800dfc4 <__smakebuf_r+0x18>

0800e024 <_fstat_r>:
 800e024:	b538      	push	{r3, r4, r5, lr}
 800e026:	4d07      	ldr	r5, [pc, #28]	@ (800e044 <_fstat_r+0x20>)
 800e028:	2300      	movs	r3, #0
 800e02a:	4604      	mov	r4, r0
 800e02c:	4608      	mov	r0, r1
 800e02e:	4611      	mov	r1, r2
 800e030:	602b      	str	r3, [r5, #0]
 800e032:	f7f7 ffdd 	bl	8005ff0 <_fstat>
 800e036:	1c43      	adds	r3, r0, #1
 800e038:	d102      	bne.n	800e040 <_fstat_r+0x1c>
 800e03a:	682b      	ldr	r3, [r5, #0]
 800e03c:	b103      	cbz	r3, 800e040 <_fstat_r+0x1c>
 800e03e:	6023      	str	r3, [r4, #0]
 800e040:	bd38      	pop	{r3, r4, r5, pc}
 800e042:	bf00      	nop
 800e044:	200027cc 	.word	0x200027cc

0800e048 <_isatty_r>:
 800e048:	b538      	push	{r3, r4, r5, lr}
 800e04a:	4d06      	ldr	r5, [pc, #24]	@ (800e064 <_isatty_r+0x1c>)
 800e04c:	2300      	movs	r3, #0
 800e04e:	4604      	mov	r4, r0
 800e050:	4608      	mov	r0, r1
 800e052:	602b      	str	r3, [r5, #0]
 800e054:	f7f7 ffdc 	bl	8006010 <_isatty>
 800e058:	1c43      	adds	r3, r0, #1
 800e05a:	d102      	bne.n	800e062 <_isatty_r+0x1a>
 800e05c:	682b      	ldr	r3, [r5, #0]
 800e05e:	b103      	cbz	r3, 800e062 <_isatty_r+0x1a>
 800e060:	6023      	str	r3, [r4, #0]
 800e062:	bd38      	pop	{r3, r4, r5, pc}
 800e064:	200027cc 	.word	0x200027cc

0800e068 <pow>:
 800e068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e06a:	ed2d 8b02 	vpush	{d8}
 800e06e:	eeb0 8a40 	vmov.f32	s16, s0
 800e072:	eef0 8a60 	vmov.f32	s17, s1
 800e076:	ec55 4b11 	vmov	r4, r5, d1
 800e07a:	f000 f975 	bl	800e368 <__ieee754_pow>
 800e07e:	4622      	mov	r2, r4
 800e080:	462b      	mov	r3, r5
 800e082:	4620      	mov	r0, r4
 800e084:	4629      	mov	r1, r5
 800e086:	ec57 6b10 	vmov	r6, r7, d0
 800e08a:	f7f2 fd67 	bl	8000b5c <__aeabi_dcmpun>
 800e08e:	2800      	cmp	r0, #0
 800e090:	d13b      	bne.n	800e10a <pow+0xa2>
 800e092:	ec51 0b18 	vmov	r0, r1, d8
 800e096:	2200      	movs	r2, #0
 800e098:	2300      	movs	r3, #0
 800e09a:	f7f2 fd2d 	bl	8000af8 <__aeabi_dcmpeq>
 800e09e:	b1b8      	cbz	r0, 800e0d0 <pow+0x68>
 800e0a0:	2200      	movs	r2, #0
 800e0a2:	2300      	movs	r3, #0
 800e0a4:	4620      	mov	r0, r4
 800e0a6:	4629      	mov	r1, r5
 800e0a8:	f7f2 fd26 	bl	8000af8 <__aeabi_dcmpeq>
 800e0ac:	2800      	cmp	r0, #0
 800e0ae:	d146      	bne.n	800e13e <pow+0xd6>
 800e0b0:	ec45 4b10 	vmov	d0, r4, r5
 800e0b4:	f000 f86f 	bl	800e196 <finite>
 800e0b8:	b338      	cbz	r0, 800e10a <pow+0xa2>
 800e0ba:	2200      	movs	r2, #0
 800e0bc:	2300      	movs	r3, #0
 800e0be:	4620      	mov	r0, r4
 800e0c0:	4629      	mov	r1, r5
 800e0c2:	f7f2 fd23 	bl	8000b0c <__aeabi_dcmplt>
 800e0c6:	b300      	cbz	r0, 800e10a <pow+0xa2>
 800e0c8:	f7fe fa10 	bl	800c4ec <__errno>
 800e0cc:	2322      	movs	r3, #34	@ 0x22
 800e0ce:	e01b      	b.n	800e108 <pow+0xa0>
 800e0d0:	ec47 6b10 	vmov	d0, r6, r7
 800e0d4:	f000 f85f 	bl	800e196 <finite>
 800e0d8:	b9e0      	cbnz	r0, 800e114 <pow+0xac>
 800e0da:	eeb0 0a48 	vmov.f32	s0, s16
 800e0de:	eef0 0a68 	vmov.f32	s1, s17
 800e0e2:	f000 f858 	bl	800e196 <finite>
 800e0e6:	b1a8      	cbz	r0, 800e114 <pow+0xac>
 800e0e8:	ec45 4b10 	vmov	d0, r4, r5
 800e0ec:	f000 f853 	bl	800e196 <finite>
 800e0f0:	b180      	cbz	r0, 800e114 <pow+0xac>
 800e0f2:	4632      	mov	r2, r6
 800e0f4:	463b      	mov	r3, r7
 800e0f6:	4630      	mov	r0, r6
 800e0f8:	4639      	mov	r1, r7
 800e0fa:	f7f2 fd2f 	bl	8000b5c <__aeabi_dcmpun>
 800e0fe:	2800      	cmp	r0, #0
 800e100:	d0e2      	beq.n	800e0c8 <pow+0x60>
 800e102:	f7fe f9f3 	bl	800c4ec <__errno>
 800e106:	2321      	movs	r3, #33	@ 0x21
 800e108:	6003      	str	r3, [r0, #0]
 800e10a:	ecbd 8b02 	vpop	{d8}
 800e10e:	ec47 6b10 	vmov	d0, r6, r7
 800e112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e114:	2200      	movs	r2, #0
 800e116:	2300      	movs	r3, #0
 800e118:	4630      	mov	r0, r6
 800e11a:	4639      	mov	r1, r7
 800e11c:	f7f2 fcec 	bl	8000af8 <__aeabi_dcmpeq>
 800e120:	2800      	cmp	r0, #0
 800e122:	d0f2      	beq.n	800e10a <pow+0xa2>
 800e124:	eeb0 0a48 	vmov.f32	s0, s16
 800e128:	eef0 0a68 	vmov.f32	s1, s17
 800e12c:	f000 f833 	bl	800e196 <finite>
 800e130:	2800      	cmp	r0, #0
 800e132:	d0ea      	beq.n	800e10a <pow+0xa2>
 800e134:	ec45 4b10 	vmov	d0, r4, r5
 800e138:	f000 f82d 	bl	800e196 <finite>
 800e13c:	e7c3      	b.n	800e0c6 <pow+0x5e>
 800e13e:	4f01      	ldr	r7, [pc, #4]	@ (800e144 <pow+0xdc>)
 800e140:	2600      	movs	r6, #0
 800e142:	e7e2      	b.n	800e10a <pow+0xa2>
 800e144:	3ff00000 	.word	0x3ff00000

0800e148 <atan2f>:
 800e148:	f000 be5a 	b.w	800ee00 <__ieee754_atan2f>

0800e14c <sqrtf>:
 800e14c:	b508      	push	{r3, lr}
 800e14e:	ed2d 8b02 	vpush	{d8}
 800e152:	eeb0 8a40 	vmov.f32	s16, s0
 800e156:	f000 f903 	bl	800e360 <__ieee754_sqrtf>
 800e15a:	eeb4 8a48 	vcmp.f32	s16, s16
 800e15e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e162:	d60c      	bvs.n	800e17e <sqrtf+0x32>
 800e164:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800e184 <sqrtf+0x38>
 800e168:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800e16c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e170:	d505      	bpl.n	800e17e <sqrtf+0x32>
 800e172:	f7fe f9bb 	bl	800c4ec <__errno>
 800e176:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800e17a:	2321      	movs	r3, #33	@ 0x21
 800e17c:	6003      	str	r3, [r0, #0]
 800e17e:	ecbd 8b02 	vpop	{d8}
 800e182:	bd08      	pop	{r3, pc}
 800e184:	00000000 	.word	0x00000000

0800e188 <fabsf>:
 800e188:	ee10 3a10 	vmov	r3, s0
 800e18c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e190:	ee00 3a10 	vmov	s0, r3
 800e194:	4770      	bx	lr

0800e196 <finite>:
 800e196:	b082      	sub	sp, #8
 800e198:	ed8d 0b00 	vstr	d0, [sp]
 800e19c:	9801      	ldr	r0, [sp, #4]
 800e19e:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800e1a2:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800e1a6:	0fc0      	lsrs	r0, r0, #31
 800e1a8:	b002      	add	sp, #8
 800e1aa:	4770      	bx	lr

0800e1ac <__ieee754_sqrt>:
 800e1ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1b0:	4a68      	ldr	r2, [pc, #416]	@ (800e354 <__ieee754_sqrt+0x1a8>)
 800e1b2:	ec55 4b10 	vmov	r4, r5, d0
 800e1b6:	43aa      	bics	r2, r5
 800e1b8:	462b      	mov	r3, r5
 800e1ba:	4621      	mov	r1, r4
 800e1bc:	d110      	bne.n	800e1e0 <__ieee754_sqrt+0x34>
 800e1be:	4622      	mov	r2, r4
 800e1c0:	4620      	mov	r0, r4
 800e1c2:	4629      	mov	r1, r5
 800e1c4:	f7f2 fa30 	bl	8000628 <__aeabi_dmul>
 800e1c8:	4602      	mov	r2, r0
 800e1ca:	460b      	mov	r3, r1
 800e1cc:	4620      	mov	r0, r4
 800e1ce:	4629      	mov	r1, r5
 800e1d0:	f7f2 f874 	bl	80002bc <__adddf3>
 800e1d4:	4604      	mov	r4, r0
 800e1d6:	460d      	mov	r5, r1
 800e1d8:	ec45 4b10 	vmov	d0, r4, r5
 800e1dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1e0:	2d00      	cmp	r5, #0
 800e1e2:	dc0e      	bgt.n	800e202 <__ieee754_sqrt+0x56>
 800e1e4:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800e1e8:	4322      	orrs	r2, r4
 800e1ea:	d0f5      	beq.n	800e1d8 <__ieee754_sqrt+0x2c>
 800e1ec:	b19d      	cbz	r5, 800e216 <__ieee754_sqrt+0x6a>
 800e1ee:	4622      	mov	r2, r4
 800e1f0:	4620      	mov	r0, r4
 800e1f2:	4629      	mov	r1, r5
 800e1f4:	f7f2 f860 	bl	80002b8 <__aeabi_dsub>
 800e1f8:	4602      	mov	r2, r0
 800e1fa:	460b      	mov	r3, r1
 800e1fc:	f7f2 fb3e 	bl	800087c <__aeabi_ddiv>
 800e200:	e7e8      	b.n	800e1d4 <__ieee754_sqrt+0x28>
 800e202:	152a      	asrs	r2, r5, #20
 800e204:	d115      	bne.n	800e232 <__ieee754_sqrt+0x86>
 800e206:	2000      	movs	r0, #0
 800e208:	e009      	b.n	800e21e <__ieee754_sqrt+0x72>
 800e20a:	0acb      	lsrs	r3, r1, #11
 800e20c:	3a15      	subs	r2, #21
 800e20e:	0549      	lsls	r1, r1, #21
 800e210:	2b00      	cmp	r3, #0
 800e212:	d0fa      	beq.n	800e20a <__ieee754_sqrt+0x5e>
 800e214:	e7f7      	b.n	800e206 <__ieee754_sqrt+0x5a>
 800e216:	462a      	mov	r2, r5
 800e218:	e7fa      	b.n	800e210 <__ieee754_sqrt+0x64>
 800e21a:	005b      	lsls	r3, r3, #1
 800e21c:	3001      	adds	r0, #1
 800e21e:	02dc      	lsls	r4, r3, #11
 800e220:	d5fb      	bpl.n	800e21a <__ieee754_sqrt+0x6e>
 800e222:	1e44      	subs	r4, r0, #1
 800e224:	1b12      	subs	r2, r2, r4
 800e226:	f1c0 0420 	rsb	r4, r0, #32
 800e22a:	fa21 f404 	lsr.w	r4, r1, r4
 800e22e:	4323      	orrs	r3, r4
 800e230:	4081      	lsls	r1, r0
 800e232:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e236:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800e23a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e23e:	07d2      	lsls	r2, r2, #31
 800e240:	bf5c      	itt	pl
 800e242:	005b      	lslpl	r3, r3, #1
 800e244:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800e248:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e24c:	bf58      	it	pl
 800e24e:	0049      	lslpl	r1, r1, #1
 800e250:	2600      	movs	r6, #0
 800e252:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800e256:	106d      	asrs	r5, r5, #1
 800e258:	0049      	lsls	r1, r1, #1
 800e25a:	2016      	movs	r0, #22
 800e25c:	4632      	mov	r2, r6
 800e25e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800e262:	1917      	adds	r7, r2, r4
 800e264:	429f      	cmp	r7, r3
 800e266:	bfde      	ittt	le
 800e268:	193a      	addle	r2, r7, r4
 800e26a:	1bdb      	suble	r3, r3, r7
 800e26c:	1936      	addle	r6, r6, r4
 800e26e:	0fcf      	lsrs	r7, r1, #31
 800e270:	3801      	subs	r0, #1
 800e272:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800e276:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e27a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800e27e:	d1f0      	bne.n	800e262 <__ieee754_sqrt+0xb6>
 800e280:	4604      	mov	r4, r0
 800e282:	2720      	movs	r7, #32
 800e284:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800e288:	429a      	cmp	r2, r3
 800e28a:	eb00 0e0c 	add.w	lr, r0, ip
 800e28e:	db02      	blt.n	800e296 <__ieee754_sqrt+0xea>
 800e290:	d113      	bne.n	800e2ba <__ieee754_sqrt+0x10e>
 800e292:	458e      	cmp	lr, r1
 800e294:	d811      	bhi.n	800e2ba <__ieee754_sqrt+0x10e>
 800e296:	f1be 0f00 	cmp.w	lr, #0
 800e29a:	eb0e 000c 	add.w	r0, lr, ip
 800e29e:	da42      	bge.n	800e326 <__ieee754_sqrt+0x17a>
 800e2a0:	2800      	cmp	r0, #0
 800e2a2:	db40      	blt.n	800e326 <__ieee754_sqrt+0x17a>
 800e2a4:	f102 0801 	add.w	r8, r2, #1
 800e2a8:	1a9b      	subs	r3, r3, r2
 800e2aa:	458e      	cmp	lr, r1
 800e2ac:	bf88      	it	hi
 800e2ae:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800e2b2:	eba1 010e 	sub.w	r1, r1, lr
 800e2b6:	4464      	add	r4, ip
 800e2b8:	4642      	mov	r2, r8
 800e2ba:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800e2be:	3f01      	subs	r7, #1
 800e2c0:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800e2c4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e2c8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800e2cc:	d1dc      	bne.n	800e288 <__ieee754_sqrt+0xdc>
 800e2ce:	4319      	orrs	r1, r3
 800e2d0:	d01b      	beq.n	800e30a <__ieee754_sqrt+0x15e>
 800e2d2:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800e358 <__ieee754_sqrt+0x1ac>
 800e2d6:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800e35c <__ieee754_sqrt+0x1b0>
 800e2da:	e9da 0100 	ldrd	r0, r1, [sl]
 800e2de:	e9db 2300 	ldrd	r2, r3, [fp]
 800e2e2:	f7f1 ffe9 	bl	80002b8 <__aeabi_dsub>
 800e2e6:	e9da 8900 	ldrd	r8, r9, [sl]
 800e2ea:	4602      	mov	r2, r0
 800e2ec:	460b      	mov	r3, r1
 800e2ee:	4640      	mov	r0, r8
 800e2f0:	4649      	mov	r1, r9
 800e2f2:	f7f2 fc15 	bl	8000b20 <__aeabi_dcmple>
 800e2f6:	b140      	cbz	r0, 800e30a <__ieee754_sqrt+0x15e>
 800e2f8:	f1b4 3fff 	cmp.w	r4, #4294967295
 800e2fc:	e9da 0100 	ldrd	r0, r1, [sl]
 800e300:	e9db 2300 	ldrd	r2, r3, [fp]
 800e304:	d111      	bne.n	800e32a <__ieee754_sqrt+0x17e>
 800e306:	3601      	adds	r6, #1
 800e308:	463c      	mov	r4, r7
 800e30a:	1072      	asrs	r2, r6, #1
 800e30c:	0863      	lsrs	r3, r4, #1
 800e30e:	07f1      	lsls	r1, r6, #31
 800e310:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800e314:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800e318:	bf48      	it	mi
 800e31a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800e31e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800e322:	4618      	mov	r0, r3
 800e324:	e756      	b.n	800e1d4 <__ieee754_sqrt+0x28>
 800e326:	4690      	mov	r8, r2
 800e328:	e7be      	b.n	800e2a8 <__ieee754_sqrt+0xfc>
 800e32a:	f7f1 ffc7 	bl	80002bc <__adddf3>
 800e32e:	e9da 8900 	ldrd	r8, r9, [sl]
 800e332:	4602      	mov	r2, r0
 800e334:	460b      	mov	r3, r1
 800e336:	4640      	mov	r0, r8
 800e338:	4649      	mov	r1, r9
 800e33a:	f7f2 fbe7 	bl	8000b0c <__aeabi_dcmplt>
 800e33e:	b120      	cbz	r0, 800e34a <__ieee754_sqrt+0x19e>
 800e340:	1ca0      	adds	r0, r4, #2
 800e342:	bf08      	it	eq
 800e344:	3601      	addeq	r6, #1
 800e346:	3402      	adds	r4, #2
 800e348:	e7df      	b.n	800e30a <__ieee754_sqrt+0x15e>
 800e34a:	1c63      	adds	r3, r4, #1
 800e34c:	f023 0401 	bic.w	r4, r3, #1
 800e350:	e7db      	b.n	800e30a <__ieee754_sqrt+0x15e>
 800e352:	bf00      	nop
 800e354:	7ff00000 	.word	0x7ff00000
 800e358:	200001f8 	.word	0x200001f8
 800e35c:	200001f0 	.word	0x200001f0

0800e360 <__ieee754_sqrtf>:
 800e360:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800e364:	4770      	bx	lr
	...

0800e368 <__ieee754_pow>:
 800e368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e36c:	b091      	sub	sp, #68	@ 0x44
 800e36e:	ed8d 1b00 	vstr	d1, [sp]
 800e372:	e9dd 1900 	ldrd	r1, r9, [sp]
 800e376:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800e37a:	ea5a 0001 	orrs.w	r0, sl, r1
 800e37e:	ec57 6b10 	vmov	r6, r7, d0
 800e382:	d113      	bne.n	800e3ac <__ieee754_pow+0x44>
 800e384:	19b3      	adds	r3, r6, r6
 800e386:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800e38a:	4152      	adcs	r2, r2
 800e38c:	4298      	cmp	r0, r3
 800e38e:	4b98      	ldr	r3, [pc, #608]	@ (800e5f0 <__ieee754_pow+0x288>)
 800e390:	4193      	sbcs	r3, r2
 800e392:	f080 84ea 	bcs.w	800ed6a <__ieee754_pow+0xa02>
 800e396:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e39a:	4630      	mov	r0, r6
 800e39c:	4639      	mov	r1, r7
 800e39e:	f7f1 ff8d 	bl	80002bc <__adddf3>
 800e3a2:	ec41 0b10 	vmov	d0, r0, r1
 800e3a6:	b011      	add	sp, #68	@ 0x44
 800e3a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3ac:	4a91      	ldr	r2, [pc, #580]	@ (800e5f4 <__ieee754_pow+0x28c>)
 800e3ae:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800e3b2:	4590      	cmp	r8, r2
 800e3b4:	463d      	mov	r5, r7
 800e3b6:	4633      	mov	r3, r6
 800e3b8:	d806      	bhi.n	800e3c8 <__ieee754_pow+0x60>
 800e3ba:	d101      	bne.n	800e3c0 <__ieee754_pow+0x58>
 800e3bc:	2e00      	cmp	r6, #0
 800e3be:	d1ea      	bne.n	800e396 <__ieee754_pow+0x2e>
 800e3c0:	4592      	cmp	sl, r2
 800e3c2:	d801      	bhi.n	800e3c8 <__ieee754_pow+0x60>
 800e3c4:	d10e      	bne.n	800e3e4 <__ieee754_pow+0x7c>
 800e3c6:	b169      	cbz	r1, 800e3e4 <__ieee754_pow+0x7c>
 800e3c8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800e3cc:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800e3d0:	431d      	orrs	r5, r3
 800e3d2:	d1e0      	bne.n	800e396 <__ieee754_pow+0x2e>
 800e3d4:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e3d8:	18db      	adds	r3, r3, r3
 800e3da:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800e3de:	4152      	adcs	r2, r2
 800e3e0:	429d      	cmp	r5, r3
 800e3e2:	e7d4      	b.n	800e38e <__ieee754_pow+0x26>
 800e3e4:	2d00      	cmp	r5, #0
 800e3e6:	46c3      	mov	fp, r8
 800e3e8:	da3a      	bge.n	800e460 <__ieee754_pow+0xf8>
 800e3ea:	4a83      	ldr	r2, [pc, #524]	@ (800e5f8 <__ieee754_pow+0x290>)
 800e3ec:	4592      	cmp	sl, r2
 800e3ee:	d84d      	bhi.n	800e48c <__ieee754_pow+0x124>
 800e3f0:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800e3f4:	4592      	cmp	sl, r2
 800e3f6:	f240 84c7 	bls.w	800ed88 <__ieee754_pow+0xa20>
 800e3fa:	ea4f 522a 	mov.w	r2, sl, asr #20
 800e3fe:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800e402:	2a14      	cmp	r2, #20
 800e404:	dd0f      	ble.n	800e426 <__ieee754_pow+0xbe>
 800e406:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800e40a:	fa21 f402 	lsr.w	r4, r1, r2
 800e40e:	fa04 f202 	lsl.w	r2, r4, r2
 800e412:	428a      	cmp	r2, r1
 800e414:	f040 84b8 	bne.w	800ed88 <__ieee754_pow+0xa20>
 800e418:	f004 0401 	and.w	r4, r4, #1
 800e41c:	f1c4 0402 	rsb	r4, r4, #2
 800e420:	2900      	cmp	r1, #0
 800e422:	d158      	bne.n	800e4d6 <__ieee754_pow+0x16e>
 800e424:	e00e      	b.n	800e444 <__ieee754_pow+0xdc>
 800e426:	2900      	cmp	r1, #0
 800e428:	d154      	bne.n	800e4d4 <__ieee754_pow+0x16c>
 800e42a:	f1c2 0214 	rsb	r2, r2, #20
 800e42e:	fa4a f402 	asr.w	r4, sl, r2
 800e432:	fa04 f202 	lsl.w	r2, r4, r2
 800e436:	4552      	cmp	r2, sl
 800e438:	f040 84a3 	bne.w	800ed82 <__ieee754_pow+0xa1a>
 800e43c:	f004 0401 	and.w	r4, r4, #1
 800e440:	f1c4 0402 	rsb	r4, r4, #2
 800e444:	4a6d      	ldr	r2, [pc, #436]	@ (800e5fc <__ieee754_pow+0x294>)
 800e446:	4592      	cmp	sl, r2
 800e448:	d12e      	bne.n	800e4a8 <__ieee754_pow+0x140>
 800e44a:	f1b9 0f00 	cmp.w	r9, #0
 800e44e:	f280 8494 	bge.w	800ed7a <__ieee754_pow+0xa12>
 800e452:	496a      	ldr	r1, [pc, #424]	@ (800e5fc <__ieee754_pow+0x294>)
 800e454:	4632      	mov	r2, r6
 800e456:	463b      	mov	r3, r7
 800e458:	2000      	movs	r0, #0
 800e45a:	f7f2 fa0f 	bl	800087c <__aeabi_ddiv>
 800e45e:	e7a0      	b.n	800e3a2 <__ieee754_pow+0x3a>
 800e460:	2400      	movs	r4, #0
 800e462:	bbc1      	cbnz	r1, 800e4d6 <__ieee754_pow+0x16e>
 800e464:	4a63      	ldr	r2, [pc, #396]	@ (800e5f4 <__ieee754_pow+0x28c>)
 800e466:	4592      	cmp	sl, r2
 800e468:	d1ec      	bne.n	800e444 <__ieee754_pow+0xdc>
 800e46a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800e46e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800e472:	431a      	orrs	r2, r3
 800e474:	f000 8479 	beq.w	800ed6a <__ieee754_pow+0xa02>
 800e478:	4b61      	ldr	r3, [pc, #388]	@ (800e600 <__ieee754_pow+0x298>)
 800e47a:	4598      	cmp	r8, r3
 800e47c:	d908      	bls.n	800e490 <__ieee754_pow+0x128>
 800e47e:	f1b9 0f00 	cmp.w	r9, #0
 800e482:	f2c0 8476 	blt.w	800ed72 <__ieee754_pow+0xa0a>
 800e486:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e48a:	e78a      	b.n	800e3a2 <__ieee754_pow+0x3a>
 800e48c:	2402      	movs	r4, #2
 800e48e:	e7e8      	b.n	800e462 <__ieee754_pow+0xfa>
 800e490:	f1b9 0f00 	cmp.w	r9, #0
 800e494:	f04f 0000 	mov.w	r0, #0
 800e498:	f04f 0100 	mov.w	r1, #0
 800e49c:	da81      	bge.n	800e3a2 <__ieee754_pow+0x3a>
 800e49e:	e9dd 0300 	ldrd	r0, r3, [sp]
 800e4a2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800e4a6:	e77c      	b.n	800e3a2 <__ieee754_pow+0x3a>
 800e4a8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800e4ac:	d106      	bne.n	800e4bc <__ieee754_pow+0x154>
 800e4ae:	4632      	mov	r2, r6
 800e4b0:	463b      	mov	r3, r7
 800e4b2:	4630      	mov	r0, r6
 800e4b4:	4639      	mov	r1, r7
 800e4b6:	f7f2 f8b7 	bl	8000628 <__aeabi_dmul>
 800e4ba:	e772      	b.n	800e3a2 <__ieee754_pow+0x3a>
 800e4bc:	4a51      	ldr	r2, [pc, #324]	@ (800e604 <__ieee754_pow+0x29c>)
 800e4be:	4591      	cmp	r9, r2
 800e4c0:	d109      	bne.n	800e4d6 <__ieee754_pow+0x16e>
 800e4c2:	2d00      	cmp	r5, #0
 800e4c4:	db07      	blt.n	800e4d6 <__ieee754_pow+0x16e>
 800e4c6:	ec47 6b10 	vmov	d0, r6, r7
 800e4ca:	b011      	add	sp, #68	@ 0x44
 800e4cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4d0:	f7ff be6c 	b.w	800e1ac <__ieee754_sqrt>
 800e4d4:	2400      	movs	r4, #0
 800e4d6:	ec47 6b10 	vmov	d0, r6, r7
 800e4da:	9302      	str	r3, [sp, #8]
 800e4dc:	f000 fc88 	bl	800edf0 <fabs>
 800e4e0:	9b02      	ldr	r3, [sp, #8]
 800e4e2:	ec51 0b10 	vmov	r0, r1, d0
 800e4e6:	bb53      	cbnz	r3, 800e53e <__ieee754_pow+0x1d6>
 800e4e8:	4b44      	ldr	r3, [pc, #272]	@ (800e5fc <__ieee754_pow+0x294>)
 800e4ea:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800e4ee:	429a      	cmp	r2, r3
 800e4f0:	d002      	beq.n	800e4f8 <__ieee754_pow+0x190>
 800e4f2:	f1b8 0f00 	cmp.w	r8, #0
 800e4f6:	d122      	bne.n	800e53e <__ieee754_pow+0x1d6>
 800e4f8:	f1b9 0f00 	cmp.w	r9, #0
 800e4fc:	da05      	bge.n	800e50a <__ieee754_pow+0x1a2>
 800e4fe:	4602      	mov	r2, r0
 800e500:	460b      	mov	r3, r1
 800e502:	2000      	movs	r0, #0
 800e504:	493d      	ldr	r1, [pc, #244]	@ (800e5fc <__ieee754_pow+0x294>)
 800e506:	f7f2 f9b9 	bl	800087c <__aeabi_ddiv>
 800e50a:	2d00      	cmp	r5, #0
 800e50c:	f6bf af49 	bge.w	800e3a2 <__ieee754_pow+0x3a>
 800e510:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800e514:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800e518:	ea58 0804 	orrs.w	r8, r8, r4
 800e51c:	d108      	bne.n	800e530 <__ieee754_pow+0x1c8>
 800e51e:	4602      	mov	r2, r0
 800e520:	460b      	mov	r3, r1
 800e522:	4610      	mov	r0, r2
 800e524:	4619      	mov	r1, r3
 800e526:	f7f1 fec7 	bl	80002b8 <__aeabi_dsub>
 800e52a:	4602      	mov	r2, r0
 800e52c:	460b      	mov	r3, r1
 800e52e:	e794      	b.n	800e45a <__ieee754_pow+0xf2>
 800e530:	2c01      	cmp	r4, #1
 800e532:	f47f af36 	bne.w	800e3a2 <__ieee754_pow+0x3a>
 800e536:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e53a:	4619      	mov	r1, r3
 800e53c:	e731      	b.n	800e3a2 <__ieee754_pow+0x3a>
 800e53e:	0feb      	lsrs	r3, r5, #31
 800e540:	3b01      	subs	r3, #1
 800e542:	ea53 0204 	orrs.w	r2, r3, r4
 800e546:	d102      	bne.n	800e54e <__ieee754_pow+0x1e6>
 800e548:	4632      	mov	r2, r6
 800e54a:	463b      	mov	r3, r7
 800e54c:	e7e9      	b.n	800e522 <__ieee754_pow+0x1ba>
 800e54e:	3c01      	subs	r4, #1
 800e550:	431c      	orrs	r4, r3
 800e552:	d016      	beq.n	800e582 <__ieee754_pow+0x21a>
 800e554:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800e5e0 <__ieee754_pow+0x278>
 800e558:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800e55c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e560:	f240 8112 	bls.w	800e788 <__ieee754_pow+0x420>
 800e564:	4b28      	ldr	r3, [pc, #160]	@ (800e608 <__ieee754_pow+0x2a0>)
 800e566:	459a      	cmp	sl, r3
 800e568:	4b25      	ldr	r3, [pc, #148]	@ (800e600 <__ieee754_pow+0x298>)
 800e56a:	d916      	bls.n	800e59a <__ieee754_pow+0x232>
 800e56c:	4598      	cmp	r8, r3
 800e56e:	d80b      	bhi.n	800e588 <__ieee754_pow+0x220>
 800e570:	f1b9 0f00 	cmp.w	r9, #0
 800e574:	da0b      	bge.n	800e58e <__ieee754_pow+0x226>
 800e576:	2000      	movs	r0, #0
 800e578:	b011      	add	sp, #68	@ 0x44
 800e57a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e57e:	f000 be67 	b.w	800f250 <__math_oflow>
 800e582:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800e5e8 <__ieee754_pow+0x280>
 800e586:	e7e7      	b.n	800e558 <__ieee754_pow+0x1f0>
 800e588:	f1b9 0f00 	cmp.w	r9, #0
 800e58c:	dcf3      	bgt.n	800e576 <__ieee754_pow+0x20e>
 800e58e:	2000      	movs	r0, #0
 800e590:	b011      	add	sp, #68	@ 0x44
 800e592:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e596:	f000 be53 	b.w	800f240 <__math_uflow>
 800e59a:	4598      	cmp	r8, r3
 800e59c:	d20c      	bcs.n	800e5b8 <__ieee754_pow+0x250>
 800e59e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e5a2:	2200      	movs	r2, #0
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	f7f2 fab1 	bl	8000b0c <__aeabi_dcmplt>
 800e5aa:	3800      	subs	r0, #0
 800e5ac:	bf18      	it	ne
 800e5ae:	2001      	movne	r0, #1
 800e5b0:	f1b9 0f00 	cmp.w	r9, #0
 800e5b4:	daec      	bge.n	800e590 <__ieee754_pow+0x228>
 800e5b6:	e7df      	b.n	800e578 <__ieee754_pow+0x210>
 800e5b8:	4b10      	ldr	r3, [pc, #64]	@ (800e5fc <__ieee754_pow+0x294>)
 800e5ba:	4598      	cmp	r8, r3
 800e5bc:	f04f 0200 	mov.w	r2, #0
 800e5c0:	d924      	bls.n	800e60c <__ieee754_pow+0x2a4>
 800e5c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e5c6:	2300      	movs	r3, #0
 800e5c8:	f7f2 faa0 	bl	8000b0c <__aeabi_dcmplt>
 800e5cc:	3800      	subs	r0, #0
 800e5ce:	bf18      	it	ne
 800e5d0:	2001      	movne	r0, #1
 800e5d2:	f1b9 0f00 	cmp.w	r9, #0
 800e5d6:	dccf      	bgt.n	800e578 <__ieee754_pow+0x210>
 800e5d8:	e7da      	b.n	800e590 <__ieee754_pow+0x228>
 800e5da:	bf00      	nop
 800e5dc:	f3af 8000 	nop.w
 800e5e0:	00000000 	.word	0x00000000
 800e5e4:	3ff00000 	.word	0x3ff00000
 800e5e8:	00000000 	.word	0x00000000
 800e5ec:	bff00000 	.word	0xbff00000
 800e5f0:	fff00000 	.word	0xfff00000
 800e5f4:	7ff00000 	.word	0x7ff00000
 800e5f8:	433fffff 	.word	0x433fffff
 800e5fc:	3ff00000 	.word	0x3ff00000
 800e600:	3fefffff 	.word	0x3fefffff
 800e604:	3fe00000 	.word	0x3fe00000
 800e608:	43f00000 	.word	0x43f00000
 800e60c:	4b5a      	ldr	r3, [pc, #360]	@ (800e778 <__ieee754_pow+0x410>)
 800e60e:	f7f1 fe53 	bl	80002b8 <__aeabi_dsub>
 800e612:	a351      	add	r3, pc, #324	@ (adr r3, 800e758 <__ieee754_pow+0x3f0>)
 800e614:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e618:	4604      	mov	r4, r0
 800e61a:	460d      	mov	r5, r1
 800e61c:	f7f2 f804 	bl	8000628 <__aeabi_dmul>
 800e620:	a34f      	add	r3, pc, #316	@ (adr r3, 800e760 <__ieee754_pow+0x3f8>)
 800e622:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e626:	4606      	mov	r6, r0
 800e628:	460f      	mov	r7, r1
 800e62a:	4620      	mov	r0, r4
 800e62c:	4629      	mov	r1, r5
 800e62e:	f7f1 fffb 	bl	8000628 <__aeabi_dmul>
 800e632:	4b52      	ldr	r3, [pc, #328]	@ (800e77c <__ieee754_pow+0x414>)
 800e634:	4682      	mov	sl, r0
 800e636:	468b      	mov	fp, r1
 800e638:	2200      	movs	r2, #0
 800e63a:	4620      	mov	r0, r4
 800e63c:	4629      	mov	r1, r5
 800e63e:	f7f1 fff3 	bl	8000628 <__aeabi_dmul>
 800e642:	4602      	mov	r2, r0
 800e644:	460b      	mov	r3, r1
 800e646:	a148      	add	r1, pc, #288	@ (adr r1, 800e768 <__ieee754_pow+0x400>)
 800e648:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e64c:	f7f1 fe34 	bl	80002b8 <__aeabi_dsub>
 800e650:	4622      	mov	r2, r4
 800e652:	462b      	mov	r3, r5
 800e654:	f7f1 ffe8 	bl	8000628 <__aeabi_dmul>
 800e658:	4602      	mov	r2, r0
 800e65a:	460b      	mov	r3, r1
 800e65c:	2000      	movs	r0, #0
 800e65e:	4948      	ldr	r1, [pc, #288]	@ (800e780 <__ieee754_pow+0x418>)
 800e660:	f7f1 fe2a 	bl	80002b8 <__aeabi_dsub>
 800e664:	4622      	mov	r2, r4
 800e666:	4680      	mov	r8, r0
 800e668:	4689      	mov	r9, r1
 800e66a:	462b      	mov	r3, r5
 800e66c:	4620      	mov	r0, r4
 800e66e:	4629      	mov	r1, r5
 800e670:	f7f1 ffda 	bl	8000628 <__aeabi_dmul>
 800e674:	4602      	mov	r2, r0
 800e676:	460b      	mov	r3, r1
 800e678:	4640      	mov	r0, r8
 800e67a:	4649      	mov	r1, r9
 800e67c:	f7f1 ffd4 	bl	8000628 <__aeabi_dmul>
 800e680:	a33b      	add	r3, pc, #236	@ (adr r3, 800e770 <__ieee754_pow+0x408>)
 800e682:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e686:	f7f1 ffcf 	bl	8000628 <__aeabi_dmul>
 800e68a:	4602      	mov	r2, r0
 800e68c:	460b      	mov	r3, r1
 800e68e:	4650      	mov	r0, sl
 800e690:	4659      	mov	r1, fp
 800e692:	f7f1 fe11 	bl	80002b8 <__aeabi_dsub>
 800e696:	4602      	mov	r2, r0
 800e698:	460b      	mov	r3, r1
 800e69a:	4680      	mov	r8, r0
 800e69c:	4689      	mov	r9, r1
 800e69e:	4630      	mov	r0, r6
 800e6a0:	4639      	mov	r1, r7
 800e6a2:	f7f1 fe0b 	bl	80002bc <__adddf3>
 800e6a6:	2400      	movs	r4, #0
 800e6a8:	4632      	mov	r2, r6
 800e6aa:	463b      	mov	r3, r7
 800e6ac:	4620      	mov	r0, r4
 800e6ae:	460d      	mov	r5, r1
 800e6b0:	f7f1 fe02 	bl	80002b8 <__aeabi_dsub>
 800e6b4:	4602      	mov	r2, r0
 800e6b6:	460b      	mov	r3, r1
 800e6b8:	4640      	mov	r0, r8
 800e6ba:	4649      	mov	r1, r9
 800e6bc:	f7f1 fdfc 	bl	80002b8 <__aeabi_dsub>
 800e6c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e6c4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e6c8:	2300      	movs	r3, #0
 800e6ca:	9304      	str	r3, [sp, #16]
 800e6cc:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800e6d0:	4606      	mov	r6, r0
 800e6d2:	460f      	mov	r7, r1
 800e6d4:	4652      	mov	r2, sl
 800e6d6:	465b      	mov	r3, fp
 800e6d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e6dc:	f7f1 fdec 	bl	80002b8 <__aeabi_dsub>
 800e6e0:	4622      	mov	r2, r4
 800e6e2:	462b      	mov	r3, r5
 800e6e4:	f7f1 ffa0 	bl	8000628 <__aeabi_dmul>
 800e6e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e6ec:	4680      	mov	r8, r0
 800e6ee:	4689      	mov	r9, r1
 800e6f0:	4630      	mov	r0, r6
 800e6f2:	4639      	mov	r1, r7
 800e6f4:	f7f1 ff98 	bl	8000628 <__aeabi_dmul>
 800e6f8:	4602      	mov	r2, r0
 800e6fa:	460b      	mov	r3, r1
 800e6fc:	4640      	mov	r0, r8
 800e6fe:	4649      	mov	r1, r9
 800e700:	f7f1 fddc 	bl	80002bc <__adddf3>
 800e704:	4652      	mov	r2, sl
 800e706:	465b      	mov	r3, fp
 800e708:	4606      	mov	r6, r0
 800e70a:	460f      	mov	r7, r1
 800e70c:	4620      	mov	r0, r4
 800e70e:	4629      	mov	r1, r5
 800e710:	f7f1 ff8a 	bl	8000628 <__aeabi_dmul>
 800e714:	460b      	mov	r3, r1
 800e716:	4602      	mov	r2, r0
 800e718:	4680      	mov	r8, r0
 800e71a:	4689      	mov	r9, r1
 800e71c:	4630      	mov	r0, r6
 800e71e:	4639      	mov	r1, r7
 800e720:	f7f1 fdcc 	bl	80002bc <__adddf3>
 800e724:	4b17      	ldr	r3, [pc, #92]	@ (800e784 <__ieee754_pow+0x41c>)
 800e726:	4299      	cmp	r1, r3
 800e728:	4604      	mov	r4, r0
 800e72a:	460d      	mov	r5, r1
 800e72c:	468a      	mov	sl, r1
 800e72e:	468b      	mov	fp, r1
 800e730:	f340 82ef 	ble.w	800ed12 <__ieee754_pow+0x9aa>
 800e734:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800e738:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800e73c:	4303      	orrs	r3, r0
 800e73e:	f000 81e8 	beq.w	800eb12 <__ieee754_pow+0x7aa>
 800e742:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e746:	2200      	movs	r2, #0
 800e748:	2300      	movs	r3, #0
 800e74a:	f7f2 f9df 	bl	8000b0c <__aeabi_dcmplt>
 800e74e:	3800      	subs	r0, #0
 800e750:	bf18      	it	ne
 800e752:	2001      	movne	r0, #1
 800e754:	e710      	b.n	800e578 <__ieee754_pow+0x210>
 800e756:	bf00      	nop
 800e758:	60000000 	.word	0x60000000
 800e75c:	3ff71547 	.word	0x3ff71547
 800e760:	f85ddf44 	.word	0xf85ddf44
 800e764:	3e54ae0b 	.word	0x3e54ae0b
 800e768:	55555555 	.word	0x55555555
 800e76c:	3fd55555 	.word	0x3fd55555
 800e770:	652b82fe 	.word	0x652b82fe
 800e774:	3ff71547 	.word	0x3ff71547
 800e778:	3ff00000 	.word	0x3ff00000
 800e77c:	3fd00000 	.word	0x3fd00000
 800e780:	3fe00000 	.word	0x3fe00000
 800e784:	408fffff 	.word	0x408fffff
 800e788:	4bd5      	ldr	r3, [pc, #852]	@ (800eae0 <__ieee754_pow+0x778>)
 800e78a:	402b      	ands	r3, r5
 800e78c:	2200      	movs	r2, #0
 800e78e:	b92b      	cbnz	r3, 800e79c <__ieee754_pow+0x434>
 800e790:	4bd4      	ldr	r3, [pc, #848]	@ (800eae4 <__ieee754_pow+0x77c>)
 800e792:	f7f1 ff49 	bl	8000628 <__aeabi_dmul>
 800e796:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800e79a:	468b      	mov	fp, r1
 800e79c:	ea4f 532b 	mov.w	r3, fp, asr #20
 800e7a0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800e7a4:	4413      	add	r3, r2
 800e7a6:	930a      	str	r3, [sp, #40]	@ 0x28
 800e7a8:	4bcf      	ldr	r3, [pc, #828]	@ (800eae8 <__ieee754_pow+0x780>)
 800e7aa:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800e7ae:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800e7b2:	459b      	cmp	fp, r3
 800e7b4:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e7b8:	dd08      	ble.n	800e7cc <__ieee754_pow+0x464>
 800e7ba:	4bcc      	ldr	r3, [pc, #816]	@ (800eaec <__ieee754_pow+0x784>)
 800e7bc:	459b      	cmp	fp, r3
 800e7be:	f340 81a5 	ble.w	800eb0c <__ieee754_pow+0x7a4>
 800e7c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e7c4:	3301      	adds	r3, #1
 800e7c6:	930a      	str	r3, [sp, #40]	@ 0x28
 800e7c8:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800e7cc:	f04f 0a00 	mov.w	sl, #0
 800e7d0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800e7d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e7d6:	4bc6      	ldr	r3, [pc, #792]	@ (800eaf0 <__ieee754_pow+0x788>)
 800e7d8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e7dc:	ed93 7b00 	vldr	d7, [r3]
 800e7e0:	4629      	mov	r1, r5
 800e7e2:	ec53 2b17 	vmov	r2, r3, d7
 800e7e6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e7ea:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e7ee:	f7f1 fd63 	bl	80002b8 <__aeabi_dsub>
 800e7f2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e7f6:	4606      	mov	r6, r0
 800e7f8:	460f      	mov	r7, r1
 800e7fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e7fe:	f7f1 fd5d 	bl	80002bc <__adddf3>
 800e802:	4602      	mov	r2, r0
 800e804:	460b      	mov	r3, r1
 800e806:	2000      	movs	r0, #0
 800e808:	49ba      	ldr	r1, [pc, #744]	@ (800eaf4 <__ieee754_pow+0x78c>)
 800e80a:	f7f2 f837 	bl	800087c <__aeabi_ddiv>
 800e80e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800e812:	4602      	mov	r2, r0
 800e814:	460b      	mov	r3, r1
 800e816:	4630      	mov	r0, r6
 800e818:	4639      	mov	r1, r7
 800e81a:	f7f1 ff05 	bl	8000628 <__aeabi_dmul>
 800e81e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e822:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800e826:	106d      	asrs	r5, r5, #1
 800e828:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800e82c:	f04f 0b00 	mov.w	fp, #0
 800e830:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800e834:	4661      	mov	r1, ip
 800e836:	2200      	movs	r2, #0
 800e838:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800e83c:	4658      	mov	r0, fp
 800e83e:	46e1      	mov	r9, ip
 800e840:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800e844:	4614      	mov	r4, r2
 800e846:	461d      	mov	r5, r3
 800e848:	f7f1 feee 	bl	8000628 <__aeabi_dmul>
 800e84c:	4602      	mov	r2, r0
 800e84e:	460b      	mov	r3, r1
 800e850:	4630      	mov	r0, r6
 800e852:	4639      	mov	r1, r7
 800e854:	f7f1 fd30 	bl	80002b8 <__aeabi_dsub>
 800e858:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e85c:	4606      	mov	r6, r0
 800e85e:	460f      	mov	r7, r1
 800e860:	4620      	mov	r0, r4
 800e862:	4629      	mov	r1, r5
 800e864:	f7f1 fd28 	bl	80002b8 <__aeabi_dsub>
 800e868:	4602      	mov	r2, r0
 800e86a:	460b      	mov	r3, r1
 800e86c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e870:	f7f1 fd22 	bl	80002b8 <__aeabi_dsub>
 800e874:	465a      	mov	r2, fp
 800e876:	464b      	mov	r3, r9
 800e878:	f7f1 fed6 	bl	8000628 <__aeabi_dmul>
 800e87c:	4602      	mov	r2, r0
 800e87e:	460b      	mov	r3, r1
 800e880:	4630      	mov	r0, r6
 800e882:	4639      	mov	r1, r7
 800e884:	f7f1 fd18 	bl	80002b8 <__aeabi_dsub>
 800e888:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e88c:	f7f1 fecc 	bl	8000628 <__aeabi_dmul>
 800e890:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e894:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e898:	4610      	mov	r0, r2
 800e89a:	4619      	mov	r1, r3
 800e89c:	f7f1 fec4 	bl	8000628 <__aeabi_dmul>
 800e8a0:	a37d      	add	r3, pc, #500	@ (adr r3, 800ea98 <__ieee754_pow+0x730>)
 800e8a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8a6:	4604      	mov	r4, r0
 800e8a8:	460d      	mov	r5, r1
 800e8aa:	f7f1 febd 	bl	8000628 <__aeabi_dmul>
 800e8ae:	a37c      	add	r3, pc, #496	@ (adr r3, 800eaa0 <__ieee754_pow+0x738>)
 800e8b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8b4:	f7f1 fd02 	bl	80002bc <__adddf3>
 800e8b8:	4622      	mov	r2, r4
 800e8ba:	462b      	mov	r3, r5
 800e8bc:	f7f1 feb4 	bl	8000628 <__aeabi_dmul>
 800e8c0:	a379      	add	r3, pc, #484	@ (adr r3, 800eaa8 <__ieee754_pow+0x740>)
 800e8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8c6:	f7f1 fcf9 	bl	80002bc <__adddf3>
 800e8ca:	4622      	mov	r2, r4
 800e8cc:	462b      	mov	r3, r5
 800e8ce:	f7f1 feab 	bl	8000628 <__aeabi_dmul>
 800e8d2:	a377      	add	r3, pc, #476	@ (adr r3, 800eab0 <__ieee754_pow+0x748>)
 800e8d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8d8:	f7f1 fcf0 	bl	80002bc <__adddf3>
 800e8dc:	4622      	mov	r2, r4
 800e8de:	462b      	mov	r3, r5
 800e8e0:	f7f1 fea2 	bl	8000628 <__aeabi_dmul>
 800e8e4:	a374      	add	r3, pc, #464	@ (adr r3, 800eab8 <__ieee754_pow+0x750>)
 800e8e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8ea:	f7f1 fce7 	bl	80002bc <__adddf3>
 800e8ee:	4622      	mov	r2, r4
 800e8f0:	462b      	mov	r3, r5
 800e8f2:	f7f1 fe99 	bl	8000628 <__aeabi_dmul>
 800e8f6:	a372      	add	r3, pc, #456	@ (adr r3, 800eac0 <__ieee754_pow+0x758>)
 800e8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8fc:	f7f1 fcde 	bl	80002bc <__adddf3>
 800e900:	4622      	mov	r2, r4
 800e902:	4606      	mov	r6, r0
 800e904:	460f      	mov	r7, r1
 800e906:	462b      	mov	r3, r5
 800e908:	4620      	mov	r0, r4
 800e90a:	4629      	mov	r1, r5
 800e90c:	f7f1 fe8c 	bl	8000628 <__aeabi_dmul>
 800e910:	4602      	mov	r2, r0
 800e912:	460b      	mov	r3, r1
 800e914:	4630      	mov	r0, r6
 800e916:	4639      	mov	r1, r7
 800e918:	f7f1 fe86 	bl	8000628 <__aeabi_dmul>
 800e91c:	465a      	mov	r2, fp
 800e91e:	4604      	mov	r4, r0
 800e920:	460d      	mov	r5, r1
 800e922:	464b      	mov	r3, r9
 800e924:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e928:	f7f1 fcc8 	bl	80002bc <__adddf3>
 800e92c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e930:	f7f1 fe7a 	bl	8000628 <__aeabi_dmul>
 800e934:	4622      	mov	r2, r4
 800e936:	462b      	mov	r3, r5
 800e938:	f7f1 fcc0 	bl	80002bc <__adddf3>
 800e93c:	465a      	mov	r2, fp
 800e93e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e942:	464b      	mov	r3, r9
 800e944:	4658      	mov	r0, fp
 800e946:	4649      	mov	r1, r9
 800e948:	f7f1 fe6e 	bl	8000628 <__aeabi_dmul>
 800e94c:	4b6a      	ldr	r3, [pc, #424]	@ (800eaf8 <__ieee754_pow+0x790>)
 800e94e:	2200      	movs	r2, #0
 800e950:	4606      	mov	r6, r0
 800e952:	460f      	mov	r7, r1
 800e954:	f7f1 fcb2 	bl	80002bc <__adddf3>
 800e958:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e95c:	f7f1 fcae 	bl	80002bc <__adddf3>
 800e960:	46d8      	mov	r8, fp
 800e962:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800e966:	460d      	mov	r5, r1
 800e968:	465a      	mov	r2, fp
 800e96a:	460b      	mov	r3, r1
 800e96c:	4640      	mov	r0, r8
 800e96e:	4649      	mov	r1, r9
 800e970:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800e974:	f7f1 fe58 	bl	8000628 <__aeabi_dmul>
 800e978:	465c      	mov	r4, fp
 800e97a:	4680      	mov	r8, r0
 800e97c:	4689      	mov	r9, r1
 800e97e:	4b5e      	ldr	r3, [pc, #376]	@ (800eaf8 <__ieee754_pow+0x790>)
 800e980:	2200      	movs	r2, #0
 800e982:	4620      	mov	r0, r4
 800e984:	4629      	mov	r1, r5
 800e986:	f7f1 fc97 	bl	80002b8 <__aeabi_dsub>
 800e98a:	4632      	mov	r2, r6
 800e98c:	463b      	mov	r3, r7
 800e98e:	f7f1 fc93 	bl	80002b8 <__aeabi_dsub>
 800e992:	4602      	mov	r2, r0
 800e994:	460b      	mov	r3, r1
 800e996:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e99a:	f7f1 fc8d 	bl	80002b8 <__aeabi_dsub>
 800e99e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e9a2:	f7f1 fe41 	bl	8000628 <__aeabi_dmul>
 800e9a6:	4622      	mov	r2, r4
 800e9a8:	4606      	mov	r6, r0
 800e9aa:	460f      	mov	r7, r1
 800e9ac:	462b      	mov	r3, r5
 800e9ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e9b2:	f7f1 fe39 	bl	8000628 <__aeabi_dmul>
 800e9b6:	4602      	mov	r2, r0
 800e9b8:	460b      	mov	r3, r1
 800e9ba:	4630      	mov	r0, r6
 800e9bc:	4639      	mov	r1, r7
 800e9be:	f7f1 fc7d 	bl	80002bc <__adddf3>
 800e9c2:	4606      	mov	r6, r0
 800e9c4:	460f      	mov	r7, r1
 800e9c6:	4602      	mov	r2, r0
 800e9c8:	460b      	mov	r3, r1
 800e9ca:	4640      	mov	r0, r8
 800e9cc:	4649      	mov	r1, r9
 800e9ce:	f7f1 fc75 	bl	80002bc <__adddf3>
 800e9d2:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800e9d6:	a33c      	add	r3, pc, #240	@ (adr r3, 800eac8 <__ieee754_pow+0x760>)
 800e9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9dc:	4658      	mov	r0, fp
 800e9de:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800e9e2:	460d      	mov	r5, r1
 800e9e4:	f7f1 fe20 	bl	8000628 <__aeabi_dmul>
 800e9e8:	465c      	mov	r4, fp
 800e9ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e9ee:	4642      	mov	r2, r8
 800e9f0:	464b      	mov	r3, r9
 800e9f2:	4620      	mov	r0, r4
 800e9f4:	4629      	mov	r1, r5
 800e9f6:	f7f1 fc5f 	bl	80002b8 <__aeabi_dsub>
 800e9fa:	4602      	mov	r2, r0
 800e9fc:	460b      	mov	r3, r1
 800e9fe:	4630      	mov	r0, r6
 800ea00:	4639      	mov	r1, r7
 800ea02:	f7f1 fc59 	bl	80002b8 <__aeabi_dsub>
 800ea06:	a332      	add	r3, pc, #200	@ (adr r3, 800ead0 <__ieee754_pow+0x768>)
 800ea08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea0c:	f7f1 fe0c 	bl	8000628 <__aeabi_dmul>
 800ea10:	a331      	add	r3, pc, #196	@ (adr r3, 800ead8 <__ieee754_pow+0x770>)
 800ea12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea16:	4606      	mov	r6, r0
 800ea18:	460f      	mov	r7, r1
 800ea1a:	4620      	mov	r0, r4
 800ea1c:	4629      	mov	r1, r5
 800ea1e:	f7f1 fe03 	bl	8000628 <__aeabi_dmul>
 800ea22:	4602      	mov	r2, r0
 800ea24:	460b      	mov	r3, r1
 800ea26:	4630      	mov	r0, r6
 800ea28:	4639      	mov	r1, r7
 800ea2a:	f7f1 fc47 	bl	80002bc <__adddf3>
 800ea2e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ea30:	4b32      	ldr	r3, [pc, #200]	@ (800eafc <__ieee754_pow+0x794>)
 800ea32:	4413      	add	r3, r2
 800ea34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea38:	f7f1 fc40 	bl	80002bc <__adddf3>
 800ea3c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ea40:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ea42:	f7f1 fd87 	bl	8000554 <__aeabi_i2d>
 800ea46:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ea48:	4b2d      	ldr	r3, [pc, #180]	@ (800eb00 <__ieee754_pow+0x798>)
 800ea4a:	4413      	add	r3, r2
 800ea4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ea50:	4606      	mov	r6, r0
 800ea52:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ea56:	460f      	mov	r7, r1
 800ea58:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ea5c:	f7f1 fc2e 	bl	80002bc <__adddf3>
 800ea60:	4642      	mov	r2, r8
 800ea62:	464b      	mov	r3, r9
 800ea64:	f7f1 fc2a 	bl	80002bc <__adddf3>
 800ea68:	4632      	mov	r2, r6
 800ea6a:	463b      	mov	r3, r7
 800ea6c:	f7f1 fc26 	bl	80002bc <__adddf3>
 800ea70:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800ea74:	4632      	mov	r2, r6
 800ea76:	463b      	mov	r3, r7
 800ea78:	4658      	mov	r0, fp
 800ea7a:	460d      	mov	r5, r1
 800ea7c:	f7f1 fc1c 	bl	80002b8 <__aeabi_dsub>
 800ea80:	4642      	mov	r2, r8
 800ea82:	464b      	mov	r3, r9
 800ea84:	f7f1 fc18 	bl	80002b8 <__aeabi_dsub>
 800ea88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ea8c:	f7f1 fc14 	bl	80002b8 <__aeabi_dsub>
 800ea90:	465c      	mov	r4, fp
 800ea92:	4602      	mov	r2, r0
 800ea94:	e036      	b.n	800eb04 <__ieee754_pow+0x79c>
 800ea96:	bf00      	nop
 800ea98:	4a454eef 	.word	0x4a454eef
 800ea9c:	3fca7e28 	.word	0x3fca7e28
 800eaa0:	93c9db65 	.word	0x93c9db65
 800eaa4:	3fcd864a 	.word	0x3fcd864a
 800eaa8:	a91d4101 	.word	0xa91d4101
 800eaac:	3fd17460 	.word	0x3fd17460
 800eab0:	518f264d 	.word	0x518f264d
 800eab4:	3fd55555 	.word	0x3fd55555
 800eab8:	db6fabff 	.word	0xdb6fabff
 800eabc:	3fdb6db6 	.word	0x3fdb6db6
 800eac0:	33333303 	.word	0x33333303
 800eac4:	3fe33333 	.word	0x3fe33333
 800eac8:	e0000000 	.word	0xe0000000
 800eacc:	3feec709 	.word	0x3feec709
 800ead0:	dc3a03fd 	.word	0xdc3a03fd
 800ead4:	3feec709 	.word	0x3feec709
 800ead8:	145b01f5 	.word	0x145b01f5
 800eadc:	be3e2fe0 	.word	0xbe3e2fe0
 800eae0:	7ff00000 	.word	0x7ff00000
 800eae4:	43400000 	.word	0x43400000
 800eae8:	0003988e 	.word	0x0003988e
 800eaec:	000bb679 	.word	0x000bb679
 800eaf0:	0800f6b8 	.word	0x0800f6b8
 800eaf4:	3ff00000 	.word	0x3ff00000
 800eaf8:	40080000 	.word	0x40080000
 800eafc:	0800f698 	.word	0x0800f698
 800eb00:	0800f6a8 	.word	0x0800f6a8
 800eb04:	460b      	mov	r3, r1
 800eb06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eb0a:	e5d7      	b.n	800e6bc <__ieee754_pow+0x354>
 800eb0c:	f04f 0a01 	mov.w	sl, #1
 800eb10:	e65e      	b.n	800e7d0 <__ieee754_pow+0x468>
 800eb12:	a3b4      	add	r3, pc, #720	@ (adr r3, 800ede4 <__ieee754_pow+0xa7c>)
 800eb14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb18:	4630      	mov	r0, r6
 800eb1a:	4639      	mov	r1, r7
 800eb1c:	f7f1 fbce 	bl	80002bc <__adddf3>
 800eb20:	4642      	mov	r2, r8
 800eb22:	e9cd 0100 	strd	r0, r1, [sp]
 800eb26:	464b      	mov	r3, r9
 800eb28:	4620      	mov	r0, r4
 800eb2a:	4629      	mov	r1, r5
 800eb2c:	f7f1 fbc4 	bl	80002b8 <__aeabi_dsub>
 800eb30:	4602      	mov	r2, r0
 800eb32:	460b      	mov	r3, r1
 800eb34:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eb38:	f7f2 f806 	bl	8000b48 <__aeabi_dcmpgt>
 800eb3c:	2800      	cmp	r0, #0
 800eb3e:	f47f ae00 	bne.w	800e742 <__ieee754_pow+0x3da>
 800eb42:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800eb46:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800eb4a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800eb4e:	fa43 fa0a 	asr.w	sl, r3, sl
 800eb52:	44da      	add	sl, fp
 800eb54:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800eb58:	489d      	ldr	r0, [pc, #628]	@ (800edd0 <__ieee754_pow+0xa68>)
 800eb5a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800eb5e:	4108      	asrs	r0, r1
 800eb60:	ea00 030a 	and.w	r3, r0, sl
 800eb64:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800eb68:	f1c1 0114 	rsb	r1, r1, #20
 800eb6c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800eb70:	fa4a fa01 	asr.w	sl, sl, r1
 800eb74:	f1bb 0f00 	cmp.w	fp, #0
 800eb78:	4640      	mov	r0, r8
 800eb7a:	4649      	mov	r1, r9
 800eb7c:	f04f 0200 	mov.w	r2, #0
 800eb80:	bfb8      	it	lt
 800eb82:	f1ca 0a00 	rsblt	sl, sl, #0
 800eb86:	f7f1 fb97 	bl	80002b8 <__aeabi_dsub>
 800eb8a:	4680      	mov	r8, r0
 800eb8c:	4689      	mov	r9, r1
 800eb8e:	4632      	mov	r2, r6
 800eb90:	463b      	mov	r3, r7
 800eb92:	4640      	mov	r0, r8
 800eb94:	4649      	mov	r1, r9
 800eb96:	f7f1 fb91 	bl	80002bc <__adddf3>
 800eb9a:	2400      	movs	r4, #0
 800eb9c:	a37c      	add	r3, pc, #496	@ (adr r3, 800ed90 <__ieee754_pow+0xa28>)
 800eb9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eba2:	4620      	mov	r0, r4
 800eba4:	460d      	mov	r5, r1
 800eba6:	f7f1 fd3f 	bl	8000628 <__aeabi_dmul>
 800ebaa:	4642      	mov	r2, r8
 800ebac:	e9cd 0100 	strd	r0, r1, [sp]
 800ebb0:	464b      	mov	r3, r9
 800ebb2:	4620      	mov	r0, r4
 800ebb4:	4629      	mov	r1, r5
 800ebb6:	f7f1 fb7f 	bl	80002b8 <__aeabi_dsub>
 800ebba:	4602      	mov	r2, r0
 800ebbc:	460b      	mov	r3, r1
 800ebbe:	4630      	mov	r0, r6
 800ebc0:	4639      	mov	r1, r7
 800ebc2:	f7f1 fb79 	bl	80002b8 <__aeabi_dsub>
 800ebc6:	a374      	add	r3, pc, #464	@ (adr r3, 800ed98 <__ieee754_pow+0xa30>)
 800ebc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebcc:	f7f1 fd2c 	bl	8000628 <__aeabi_dmul>
 800ebd0:	a373      	add	r3, pc, #460	@ (adr r3, 800eda0 <__ieee754_pow+0xa38>)
 800ebd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebd6:	4680      	mov	r8, r0
 800ebd8:	4689      	mov	r9, r1
 800ebda:	4620      	mov	r0, r4
 800ebdc:	4629      	mov	r1, r5
 800ebde:	f7f1 fd23 	bl	8000628 <__aeabi_dmul>
 800ebe2:	4602      	mov	r2, r0
 800ebe4:	460b      	mov	r3, r1
 800ebe6:	4640      	mov	r0, r8
 800ebe8:	4649      	mov	r1, r9
 800ebea:	f7f1 fb67 	bl	80002bc <__adddf3>
 800ebee:	4604      	mov	r4, r0
 800ebf0:	460d      	mov	r5, r1
 800ebf2:	4602      	mov	r2, r0
 800ebf4:	460b      	mov	r3, r1
 800ebf6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ebfa:	f7f1 fb5f 	bl	80002bc <__adddf3>
 800ebfe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ec02:	4680      	mov	r8, r0
 800ec04:	4689      	mov	r9, r1
 800ec06:	f7f1 fb57 	bl	80002b8 <__aeabi_dsub>
 800ec0a:	4602      	mov	r2, r0
 800ec0c:	460b      	mov	r3, r1
 800ec0e:	4620      	mov	r0, r4
 800ec10:	4629      	mov	r1, r5
 800ec12:	f7f1 fb51 	bl	80002b8 <__aeabi_dsub>
 800ec16:	4642      	mov	r2, r8
 800ec18:	4606      	mov	r6, r0
 800ec1a:	460f      	mov	r7, r1
 800ec1c:	464b      	mov	r3, r9
 800ec1e:	4640      	mov	r0, r8
 800ec20:	4649      	mov	r1, r9
 800ec22:	f7f1 fd01 	bl	8000628 <__aeabi_dmul>
 800ec26:	a360      	add	r3, pc, #384	@ (adr r3, 800eda8 <__ieee754_pow+0xa40>)
 800ec28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec2c:	4604      	mov	r4, r0
 800ec2e:	460d      	mov	r5, r1
 800ec30:	f7f1 fcfa 	bl	8000628 <__aeabi_dmul>
 800ec34:	a35e      	add	r3, pc, #376	@ (adr r3, 800edb0 <__ieee754_pow+0xa48>)
 800ec36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec3a:	f7f1 fb3d 	bl	80002b8 <__aeabi_dsub>
 800ec3e:	4622      	mov	r2, r4
 800ec40:	462b      	mov	r3, r5
 800ec42:	f7f1 fcf1 	bl	8000628 <__aeabi_dmul>
 800ec46:	a35c      	add	r3, pc, #368	@ (adr r3, 800edb8 <__ieee754_pow+0xa50>)
 800ec48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec4c:	f7f1 fb36 	bl	80002bc <__adddf3>
 800ec50:	4622      	mov	r2, r4
 800ec52:	462b      	mov	r3, r5
 800ec54:	f7f1 fce8 	bl	8000628 <__aeabi_dmul>
 800ec58:	a359      	add	r3, pc, #356	@ (adr r3, 800edc0 <__ieee754_pow+0xa58>)
 800ec5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec5e:	f7f1 fb2b 	bl	80002b8 <__aeabi_dsub>
 800ec62:	4622      	mov	r2, r4
 800ec64:	462b      	mov	r3, r5
 800ec66:	f7f1 fcdf 	bl	8000628 <__aeabi_dmul>
 800ec6a:	a357      	add	r3, pc, #348	@ (adr r3, 800edc8 <__ieee754_pow+0xa60>)
 800ec6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec70:	f7f1 fb24 	bl	80002bc <__adddf3>
 800ec74:	4622      	mov	r2, r4
 800ec76:	462b      	mov	r3, r5
 800ec78:	f7f1 fcd6 	bl	8000628 <__aeabi_dmul>
 800ec7c:	4602      	mov	r2, r0
 800ec7e:	460b      	mov	r3, r1
 800ec80:	4640      	mov	r0, r8
 800ec82:	4649      	mov	r1, r9
 800ec84:	f7f1 fb18 	bl	80002b8 <__aeabi_dsub>
 800ec88:	4604      	mov	r4, r0
 800ec8a:	460d      	mov	r5, r1
 800ec8c:	4602      	mov	r2, r0
 800ec8e:	460b      	mov	r3, r1
 800ec90:	4640      	mov	r0, r8
 800ec92:	4649      	mov	r1, r9
 800ec94:	f7f1 fcc8 	bl	8000628 <__aeabi_dmul>
 800ec98:	2200      	movs	r2, #0
 800ec9a:	e9cd 0100 	strd	r0, r1, [sp]
 800ec9e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800eca2:	4620      	mov	r0, r4
 800eca4:	4629      	mov	r1, r5
 800eca6:	f7f1 fb07 	bl	80002b8 <__aeabi_dsub>
 800ecaa:	4602      	mov	r2, r0
 800ecac:	460b      	mov	r3, r1
 800ecae:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ecb2:	f7f1 fde3 	bl	800087c <__aeabi_ddiv>
 800ecb6:	4632      	mov	r2, r6
 800ecb8:	4604      	mov	r4, r0
 800ecba:	460d      	mov	r5, r1
 800ecbc:	463b      	mov	r3, r7
 800ecbe:	4640      	mov	r0, r8
 800ecc0:	4649      	mov	r1, r9
 800ecc2:	f7f1 fcb1 	bl	8000628 <__aeabi_dmul>
 800ecc6:	4632      	mov	r2, r6
 800ecc8:	463b      	mov	r3, r7
 800ecca:	f7f1 faf7 	bl	80002bc <__adddf3>
 800ecce:	4602      	mov	r2, r0
 800ecd0:	460b      	mov	r3, r1
 800ecd2:	4620      	mov	r0, r4
 800ecd4:	4629      	mov	r1, r5
 800ecd6:	f7f1 faef 	bl	80002b8 <__aeabi_dsub>
 800ecda:	4642      	mov	r2, r8
 800ecdc:	464b      	mov	r3, r9
 800ecde:	f7f1 faeb 	bl	80002b8 <__aeabi_dsub>
 800ece2:	460b      	mov	r3, r1
 800ece4:	4602      	mov	r2, r0
 800ece6:	493b      	ldr	r1, [pc, #236]	@ (800edd4 <__ieee754_pow+0xa6c>)
 800ece8:	2000      	movs	r0, #0
 800ecea:	f7f1 fae5 	bl	80002b8 <__aeabi_dsub>
 800ecee:	ec41 0b10 	vmov	d0, r0, r1
 800ecf2:	ee10 3a90 	vmov	r3, s1
 800ecf6:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800ecfa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ecfe:	da30      	bge.n	800ed62 <__ieee754_pow+0x9fa>
 800ed00:	4650      	mov	r0, sl
 800ed02:	f000 f9f1 	bl	800f0e8 <scalbn>
 800ed06:	ec51 0b10 	vmov	r0, r1, d0
 800ed0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ed0e:	f7ff bbd2 	b.w	800e4b6 <__ieee754_pow+0x14e>
 800ed12:	4c31      	ldr	r4, [pc, #196]	@ (800edd8 <__ieee754_pow+0xa70>)
 800ed14:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ed18:	42a3      	cmp	r3, r4
 800ed1a:	d91a      	bls.n	800ed52 <__ieee754_pow+0x9ea>
 800ed1c:	4b2f      	ldr	r3, [pc, #188]	@ (800eddc <__ieee754_pow+0xa74>)
 800ed1e:	440b      	add	r3, r1
 800ed20:	4303      	orrs	r3, r0
 800ed22:	d009      	beq.n	800ed38 <__ieee754_pow+0x9d0>
 800ed24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ed28:	2200      	movs	r2, #0
 800ed2a:	2300      	movs	r3, #0
 800ed2c:	f7f1 feee 	bl	8000b0c <__aeabi_dcmplt>
 800ed30:	3800      	subs	r0, #0
 800ed32:	bf18      	it	ne
 800ed34:	2001      	movne	r0, #1
 800ed36:	e42b      	b.n	800e590 <__ieee754_pow+0x228>
 800ed38:	4642      	mov	r2, r8
 800ed3a:	464b      	mov	r3, r9
 800ed3c:	f7f1 fabc 	bl	80002b8 <__aeabi_dsub>
 800ed40:	4632      	mov	r2, r6
 800ed42:	463b      	mov	r3, r7
 800ed44:	f7f1 fef6 	bl	8000b34 <__aeabi_dcmpge>
 800ed48:	2800      	cmp	r0, #0
 800ed4a:	d1eb      	bne.n	800ed24 <__ieee754_pow+0x9bc>
 800ed4c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800edec <__ieee754_pow+0xa84>
 800ed50:	e6f7      	b.n	800eb42 <__ieee754_pow+0x7da>
 800ed52:	469a      	mov	sl, r3
 800ed54:	4b22      	ldr	r3, [pc, #136]	@ (800ede0 <__ieee754_pow+0xa78>)
 800ed56:	459a      	cmp	sl, r3
 800ed58:	f63f aef3 	bhi.w	800eb42 <__ieee754_pow+0x7da>
 800ed5c:	f8dd a010 	ldr.w	sl, [sp, #16]
 800ed60:	e715      	b.n	800eb8e <__ieee754_pow+0x826>
 800ed62:	ec51 0b10 	vmov	r0, r1, d0
 800ed66:	4619      	mov	r1, r3
 800ed68:	e7cf      	b.n	800ed0a <__ieee754_pow+0x9a2>
 800ed6a:	491a      	ldr	r1, [pc, #104]	@ (800edd4 <__ieee754_pow+0xa6c>)
 800ed6c:	2000      	movs	r0, #0
 800ed6e:	f7ff bb18 	b.w	800e3a2 <__ieee754_pow+0x3a>
 800ed72:	2000      	movs	r0, #0
 800ed74:	2100      	movs	r1, #0
 800ed76:	f7ff bb14 	b.w	800e3a2 <__ieee754_pow+0x3a>
 800ed7a:	4630      	mov	r0, r6
 800ed7c:	4639      	mov	r1, r7
 800ed7e:	f7ff bb10 	b.w	800e3a2 <__ieee754_pow+0x3a>
 800ed82:	460c      	mov	r4, r1
 800ed84:	f7ff bb5e 	b.w	800e444 <__ieee754_pow+0xdc>
 800ed88:	2400      	movs	r4, #0
 800ed8a:	f7ff bb49 	b.w	800e420 <__ieee754_pow+0xb8>
 800ed8e:	bf00      	nop
 800ed90:	00000000 	.word	0x00000000
 800ed94:	3fe62e43 	.word	0x3fe62e43
 800ed98:	fefa39ef 	.word	0xfefa39ef
 800ed9c:	3fe62e42 	.word	0x3fe62e42
 800eda0:	0ca86c39 	.word	0x0ca86c39
 800eda4:	be205c61 	.word	0xbe205c61
 800eda8:	72bea4d0 	.word	0x72bea4d0
 800edac:	3e663769 	.word	0x3e663769
 800edb0:	c5d26bf1 	.word	0xc5d26bf1
 800edb4:	3ebbbd41 	.word	0x3ebbbd41
 800edb8:	af25de2c 	.word	0xaf25de2c
 800edbc:	3f11566a 	.word	0x3f11566a
 800edc0:	16bebd93 	.word	0x16bebd93
 800edc4:	3f66c16c 	.word	0x3f66c16c
 800edc8:	5555553e 	.word	0x5555553e
 800edcc:	3fc55555 	.word	0x3fc55555
 800edd0:	fff00000 	.word	0xfff00000
 800edd4:	3ff00000 	.word	0x3ff00000
 800edd8:	4090cbff 	.word	0x4090cbff
 800eddc:	3f6f3400 	.word	0x3f6f3400
 800ede0:	3fe00000 	.word	0x3fe00000
 800ede4:	652b82fe 	.word	0x652b82fe
 800ede8:	3c971547 	.word	0x3c971547
 800edec:	4090cc00 	.word	0x4090cc00

0800edf0 <fabs>:
 800edf0:	ec51 0b10 	vmov	r0, r1, d0
 800edf4:	4602      	mov	r2, r0
 800edf6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800edfa:	ec43 2b10 	vmov	d0, r2, r3
 800edfe:	4770      	bx	lr

0800ee00 <__ieee754_atan2f>:
 800ee00:	ee10 2a90 	vmov	r2, s1
 800ee04:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800ee08:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800ee0c:	b510      	push	{r4, lr}
 800ee0e:	eef0 7a40 	vmov.f32	s15, s0
 800ee12:	d806      	bhi.n	800ee22 <__ieee754_atan2f+0x22>
 800ee14:	ee10 0a10 	vmov	r0, s0
 800ee18:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800ee1c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800ee20:	d904      	bls.n	800ee2c <__ieee754_atan2f+0x2c>
 800ee22:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800ee26:	eeb0 0a67 	vmov.f32	s0, s15
 800ee2a:	bd10      	pop	{r4, pc}
 800ee2c:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800ee30:	d103      	bne.n	800ee3a <__ieee754_atan2f+0x3a>
 800ee32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee36:	f000 b883 	b.w	800ef40 <atanf>
 800ee3a:	1794      	asrs	r4, r2, #30
 800ee3c:	f004 0402 	and.w	r4, r4, #2
 800ee40:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800ee44:	b943      	cbnz	r3, 800ee58 <__ieee754_atan2f+0x58>
 800ee46:	2c02      	cmp	r4, #2
 800ee48:	d05e      	beq.n	800ef08 <__ieee754_atan2f+0x108>
 800ee4a:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800ef1c <__ieee754_atan2f+0x11c>
 800ee4e:	2c03      	cmp	r4, #3
 800ee50:	bf08      	it	eq
 800ee52:	eef0 7a47 	vmoveq.f32	s15, s14
 800ee56:	e7e6      	b.n	800ee26 <__ieee754_atan2f+0x26>
 800ee58:	b941      	cbnz	r1, 800ee6c <__ieee754_atan2f+0x6c>
 800ee5a:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800ef20 <__ieee754_atan2f+0x120>
 800ee5e:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800ef24 <__ieee754_atan2f+0x124>
 800ee62:	2800      	cmp	r0, #0
 800ee64:	bfb8      	it	lt
 800ee66:	eef0 7a47 	vmovlt.f32	s15, s14
 800ee6a:	e7dc      	b.n	800ee26 <__ieee754_atan2f+0x26>
 800ee6c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800ee70:	d110      	bne.n	800ee94 <__ieee754_atan2f+0x94>
 800ee72:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800ee76:	f104 34ff 	add.w	r4, r4, #4294967295
 800ee7a:	d107      	bne.n	800ee8c <__ieee754_atan2f+0x8c>
 800ee7c:	2c02      	cmp	r4, #2
 800ee7e:	d846      	bhi.n	800ef0e <__ieee754_atan2f+0x10e>
 800ee80:	4b29      	ldr	r3, [pc, #164]	@ (800ef28 <__ieee754_atan2f+0x128>)
 800ee82:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ee86:	edd3 7a00 	vldr	s15, [r3]
 800ee8a:	e7cc      	b.n	800ee26 <__ieee754_atan2f+0x26>
 800ee8c:	2c02      	cmp	r4, #2
 800ee8e:	d841      	bhi.n	800ef14 <__ieee754_atan2f+0x114>
 800ee90:	4b26      	ldr	r3, [pc, #152]	@ (800ef2c <__ieee754_atan2f+0x12c>)
 800ee92:	e7f6      	b.n	800ee82 <__ieee754_atan2f+0x82>
 800ee94:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800ee98:	d0df      	beq.n	800ee5a <__ieee754_atan2f+0x5a>
 800ee9a:	1a5b      	subs	r3, r3, r1
 800ee9c:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800eea0:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800eea4:	da1a      	bge.n	800eedc <__ieee754_atan2f+0xdc>
 800eea6:	2a00      	cmp	r2, #0
 800eea8:	da01      	bge.n	800eeae <__ieee754_atan2f+0xae>
 800eeaa:	313c      	adds	r1, #60	@ 0x3c
 800eeac:	db19      	blt.n	800eee2 <__ieee754_atan2f+0xe2>
 800eeae:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800eeb2:	f7ff f969 	bl	800e188 <fabsf>
 800eeb6:	f000 f843 	bl	800ef40 <atanf>
 800eeba:	eef0 7a40 	vmov.f32	s15, s0
 800eebe:	2c01      	cmp	r4, #1
 800eec0:	d012      	beq.n	800eee8 <__ieee754_atan2f+0xe8>
 800eec2:	2c02      	cmp	r4, #2
 800eec4:	d017      	beq.n	800eef6 <__ieee754_atan2f+0xf6>
 800eec6:	2c00      	cmp	r4, #0
 800eec8:	d0ad      	beq.n	800ee26 <__ieee754_atan2f+0x26>
 800eeca:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800ef30 <__ieee754_atan2f+0x130>
 800eece:	ee77 7a87 	vadd.f32	s15, s15, s14
 800eed2:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800ef34 <__ieee754_atan2f+0x134>
 800eed6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800eeda:	e7a4      	b.n	800ee26 <__ieee754_atan2f+0x26>
 800eedc:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800ef20 <__ieee754_atan2f+0x120>
 800eee0:	e7ed      	b.n	800eebe <__ieee754_atan2f+0xbe>
 800eee2:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800ef38 <__ieee754_atan2f+0x138>
 800eee6:	e7ea      	b.n	800eebe <__ieee754_atan2f+0xbe>
 800eee8:	ee17 3a90 	vmov	r3, s15
 800eeec:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800eef0:	ee07 3a90 	vmov	s15, r3
 800eef4:	e797      	b.n	800ee26 <__ieee754_atan2f+0x26>
 800eef6:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800ef30 <__ieee754_atan2f+0x130>
 800eefa:	ee77 7a87 	vadd.f32	s15, s15, s14
 800eefe:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800ef34 <__ieee754_atan2f+0x134>
 800ef02:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ef06:	e78e      	b.n	800ee26 <__ieee754_atan2f+0x26>
 800ef08:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800ef34 <__ieee754_atan2f+0x134>
 800ef0c:	e78b      	b.n	800ee26 <__ieee754_atan2f+0x26>
 800ef0e:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800ef3c <__ieee754_atan2f+0x13c>
 800ef12:	e788      	b.n	800ee26 <__ieee754_atan2f+0x26>
 800ef14:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800ef38 <__ieee754_atan2f+0x138>
 800ef18:	e785      	b.n	800ee26 <__ieee754_atan2f+0x26>
 800ef1a:	bf00      	nop
 800ef1c:	c0490fdb 	.word	0xc0490fdb
 800ef20:	3fc90fdb 	.word	0x3fc90fdb
 800ef24:	bfc90fdb 	.word	0xbfc90fdb
 800ef28:	0800f6d4 	.word	0x0800f6d4
 800ef2c:	0800f6c8 	.word	0x0800f6c8
 800ef30:	33bbbd2e 	.word	0x33bbbd2e
 800ef34:	40490fdb 	.word	0x40490fdb
 800ef38:	00000000 	.word	0x00000000
 800ef3c:	3f490fdb 	.word	0x3f490fdb

0800ef40 <atanf>:
 800ef40:	b538      	push	{r3, r4, r5, lr}
 800ef42:	ee10 5a10 	vmov	r5, s0
 800ef46:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800ef4a:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800ef4e:	eef0 7a40 	vmov.f32	s15, s0
 800ef52:	d310      	bcc.n	800ef76 <atanf+0x36>
 800ef54:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800ef58:	d904      	bls.n	800ef64 <atanf+0x24>
 800ef5a:	ee70 7a00 	vadd.f32	s15, s0, s0
 800ef5e:	eeb0 0a67 	vmov.f32	s0, s15
 800ef62:	bd38      	pop	{r3, r4, r5, pc}
 800ef64:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800f09c <atanf+0x15c>
 800ef68:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800f0a0 <atanf+0x160>
 800ef6c:	2d00      	cmp	r5, #0
 800ef6e:	bfc8      	it	gt
 800ef70:	eef0 7a47 	vmovgt.f32	s15, s14
 800ef74:	e7f3      	b.n	800ef5e <atanf+0x1e>
 800ef76:	4b4b      	ldr	r3, [pc, #300]	@ (800f0a4 <atanf+0x164>)
 800ef78:	429c      	cmp	r4, r3
 800ef7a:	d810      	bhi.n	800ef9e <atanf+0x5e>
 800ef7c:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800ef80:	d20a      	bcs.n	800ef98 <atanf+0x58>
 800ef82:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800f0a8 <atanf+0x168>
 800ef86:	ee30 7a07 	vadd.f32	s14, s0, s14
 800ef8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ef8e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800ef92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef96:	dce2      	bgt.n	800ef5e <atanf+0x1e>
 800ef98:	f04f 33ff 	mov.w	r3, #4294967295
 800ef9c:	e013      	b.n	800efc6 <atanf+0x86>
 800ef9e:	f7ff f8f3 	bl	800e188 <fabsf>
 800efa2:	4b42      	ldr	r3, [pc, #264]	@ (800f0ac <atanf+0x16c>)
 800efa4:	429c      	cmp	r4, r3
 800efa6:	d84f      	bhi.n	800f048 <atanf+0x108>
 800efa8:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800efac:	429c      	cmp	r4, r3
 800efae:	d841      	bhi.n	800f034 <atanf+0xf4>
 800efb0:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800efb4:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800efb8:	eea0 7a27 	vfma.f32	s14, s0, s15
 800efbc:	2300      	movs	r3, #0
 800efbe:	ee30 0a27 	vadd.f32	s0, s0, s15
 800efc2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800efc6:	1c5a      	adds	r2, r3, #1
 800efc8:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800efcc:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800f0b0 <atanf+0x170>
 800efd0:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800f0b4 <atanf+0x174>
 800efd4:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800f0b8 <atanf+0x178>
 800efd8:	ee66 6a06 	vmul.f32	s13, s12, s12
 800efdc:	eee6 5a87 	vfma.f32	s11, s13, s14
 800efe0:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800f0bc <atanf+0x17c>
 800efe4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800efe8:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800f0c0 <atanf+0x180>
 800efec:	eee7 5a26 	vfma.f32	s11, s14, s13
 800eff0:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800f0c4 <atanf+0x184>
 800eff4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800eff8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800f0c8 <atanf+0x188>
 800effc:	eee7 5a26 	vfma.f32	s11, s14, s13
 800f000:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800f0cc <atanf+0x18c>
 800f004:	eea6 5a87 	vfma.f32	s10, s13, s14
 800f008:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800f0d0 <atanf+0x190>
 800f00c:	eea5 7a26 	vfma.f32	s14, s10, s13
 800f010:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800f0d4 <atanf+0x194>
 800f014:	eea7 5a26 	vfma.f32	s10, s14, s13
 800f018:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800f0d8 <atanf+0x198>
 800f01c:	eea5 7a26 	vfma.f32	s14, s10, s13
 800f020:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f024:	eea5 7a86 	vfma.f32	s14, s11, s12
 800f028:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f02c:	d121      	bne.n	800f072 <atanf+0x132>
 800f02e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f032:	e794      	b.n	800ef5e <atanf+0x1e>
 800f034:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800f038:	ee30 7a67 	vsub.f32	s14, s0, s15
 800f03c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f040:	2301      	movs	r3, #1
 800f042:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f046:	e7be      	b.n	800efc6 <atanf+0x86>
 800f048:	4b24      	ldr	r3, [pc, #144]	@ (800f0dc <atanf+0x19c>)
 800f04a:	429c      	cmp	r4, r3
 800f04c:	d80b      	bhi.n	800f066 <atanf+0x126>
 800f04e:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800f052:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f056:	eea0 7a27 	vfma.f32	s14, s0, s15
 800f05a:	2302      	movs	r3, #2
 800f05c:	ee70 6a67 	vsub.f32	s13, s0, s15
 800f060:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f064:	e7af      	b.n	800efc6 <atanf+0x86>
 800f066:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800f06a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f06e:	2303      	movs	r3, #3
 800f070:	e7a9      	b.n	800efc6 <atanf+0x86>
 800f072:	4a1b      	ldr	r2, [pc, #108]	@ (800f0e0 <atanf+0x1a0>)
 800f074:	491b      	ldr	r1, [pc, #108]	@ (800f0e4 <atanf+0x1a4>)
 800f076:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800f07a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800f07e:	edd3 6a00 	vldr	s13, [r3]
 800f082:	ee37 7a66 	vsub.f32	s14, s14, s13
 800f086:	2d00      	cmp	r5, #0
 800f088:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f08c:	edd2 7a00 	vldr	s15, [r2]
 800f090:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f094:	bfb8      	it	lt
 800f096:	eef1 7a67 	vneglt.f32	s15, s15
 800f09a:	e760      	b.n	800ef5e <atanf+0x1e>
 800f09c:	bfc90fdb 	.word	0xbfc90fdb
 800f0a0:	3fc90fdb 	.word	0x3fc90fdb
 800f0a4:	3edfffff 	.word	0x3edfffff
 800f0a8:	7149f2ca 	.word	0x7149f2ca
 800f0ac:	3f97ffff 	.word	0x3f97ffff
 800f0b0:	3c8569d7 	.word	0x3c8569d7
 800f0b4:	3d4bda59 	.word	0x3d4bda59
 800f0b8:	bd6ef16b 	.word	0xbd6ef16b
 800f0bc:	3d886b35 	.word	0x3d886b35
 800f0c0:	3dba2e6e 	.word	0x3dba2e6e
 800f0c4:	3e124925 	.word	0x3e124925
 800f0c8:	3eaaaaab 	.word	0x3eaaaaab
 800f0cc:	bd15a221 	.word	0xbd15a221
 800f0d0:	bd9d8795 	.word	0xbd9d8795
 800f0d4:	bde38e38 	.word	0xbde38e38
 800f0d8:	be4ccccd 	.word	0xbe4ccccd
 800f0dc:	401bffff 	.word	0x401bffff
 800f0e0:	0800f6f0 	.word	0x0800f6f0
 800f0e4:	0800f6e0 	.word	0x0800f6e0

0800f0e8 <scalbn>:
 800f0e8:	b570      	push	{r4, r5, r6, lr}
 800f0ea:	ec55 4b10 	vmov	r4, r5, d0
 800f0ee:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800f0f2:	4606      	mov	r6, r0
 800f0f4:	462b      	mov	r3, r5
 800f0f6:	b991      	cbnz	r1, 800f11e <scalbn+0x36>
 800f0f8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800f0fc:	4323      	orrs	r3, r4
 800f0fe:	d03d      	beq.n	800f17c <scalbn+0x94>
 800f100:	4b35      	ldr	r3, [pc, #212]	@ (800f1d8 <scalbn+0xf0>)
 800f102:	4620      	mov	r0, r4
 800f104:	4629      	mov	r1, r5
 800f106:	2200      	movs	r2, #0
 800f108:	f7f1 fa8e 	bl	8000628 <__aeabi_dmul>
 800f10c:	4b33      	ldr	r3, [pc, #204]	@ (800f1dc <scalbn+0xf4>)
 800f10e:	429e      	cmp	r6, r3
 800f110:	4604      	mov	r4, r0
 800f112:	460d      	mov	r5, r1
 800f114:	da0f      	bge.n	800f136 <scalbn+0x4e>
 800f116:	a328      	add	r3, pc, #160	@ (adr r3, 800f1b8 <scalbn+0xd0>)
 800f118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f11c:	e01e      	b.n	800f15c <scalbn+0x74>
 800f11e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800f122:	4291      	cmp	r1, r2
 800f124:	d10b      	bne.n	800f13e <scalbn+0x56>
 800f126:	4622      	mov	r2, r4
 800f128:	4620      	mov	r0, r4
 800f12a:	4629      	mov	r1, r5
 800f12c:	f7f1 f8c6 	bl	80002bc <__adddf3>
 800f130:	4604      	mov	r4, r0
 800f132:	460d      	mov	r5, r1
 800f134:	e022      	b.n	800f17c <scalbn+0x94>
 800f136:	460b      	mov	r3, r1
 800f138:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800f13c:	3936      	subs	r1, #54	@ 0x36
 800f13e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800f142:	4296      	cmp	r6, r2
 800f144:	dd0d      	ble.n	800f162 <scalbn+0x7a>
 800f146:	2d00      	cmp	r5, #0
 800f148:	a11d      	add	r1, pc, #116	@ (adr r1, 800f1c0 <scalbn+0xd8>)
 800f14a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f14e:	da02      	bge.n	800f156 <scalbn+0x6e>
 800f150:	a11d      	add	r1, pc, #116	@ (adr r1, 800f1c8 <scalbn+0xe0>)
 800f152:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f156:	a31a      	add	r3, pc, #104	@ (adr r3, 800f1c0 <scalbn+0xd8>)
 800f158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f15c:	f7f1 fa64 	bl	8000628 <__aeabi_dmul>
 800f160:	e7e6      	b.n	800f130 <scalbn+0x48>
 800f162:	1872      	adds	r2, r6, r1
 800f164:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800f168:	428a      	cmp	r2, r1
 800f16a:	dcec      	bgt.n	800f146 <scalbn+0x5e>
 800f16c:	2a00      	cmp	r2, #0
 800f16e:	dd08      	ble.n	800f182 <scalbn+0x9a>
 800f170:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800f174:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800f178:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f17c:	ec45 4b10 	vmov	d0, r4, r5
 800f180:	bd70      	pop	{r4, r5, r6, pc}
 800f182:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800f186:	da08      	bge.n	800f19a <scalbn+0xb2>
 800f188:	2d00      	cmp	r5, #0
 800f18a:	a10b      	add	r1, pc, #44	@ (adr r1, 800f1b8 <scalbn+0xd0>)
 800f18c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f190:	dac1      	bge.n	800f116 <scalbn+0x2e>
 800f192:	a10f      	add	r1, pc, #60	@ (adr r1, 800f1d0 <scalbn+0xe8>)
 800f194:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f198:	e7bd      	b.n	800f116 <scalbn+0x2e>
 800f19a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800f19e:	3236      	adds	r2, #54	@ 0x36
 800f1a0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800f1a4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f1a8:	4620      	mov	r0, r4
 800f1aa:	4b0d      	ldr	r3, [pc, #52]	@ (800f1e0 <scalbn+0xf8>)
 800f1ac:	4629      	mov	r1, r5
 800f1ae:	2200      	movs	r2, #0
 800f1b0:	e7d4      	b.n	800f15c <scalbn+0x74>
 800f1b2:	bf00      	nop
 800f1b4:	f3af 8000 	nop.w
 800f1b8:	c2f8f359 	.word	0xc2f8f359
 800f1bc:	01a56e1f 	.word	0x01a56e1f
 800f1c0:	8800759c 	.word	0x8800759c
 800f1c4:	7e37e43c 	.word	0x7e37e43c
 800f1c8:	8800759c 	.word	0x8800759c
 800f1cc:	fe37e43c 	.word	0xfe37e43c
 800f1d0:	c2f8f359 	.word	0xc2f8f359
 800f1d4:	81a56e1f 	.word	0x81a56e1f
 800f1d8:	43500000 	.word	0x43500000
 800f1dc:	ffff3cb0 	.word	0xffff3cb0
 800f1e0:	3c900000 	.word	0x3c900000

0800f1e4 <with_errno>:
 800f1e4:	b510      	push	{r4, lr}
 800f1e6:	ed2d 8b02 	vpush	{d8}
 800f1ea:	eeb0 8a40 	vmov.f32	s16, s0
 800f1ee:	eef0 8a60 	vmov.f32	s17, s1
 800f1f2:	4604      	mov	r4, r0
 800f1f4:	f7fd f97a 	bl	800c4ec <__errno>
 800f1f8:	eeb0 0a48 	vmov.f32	s0, s16
 800f1fc:	eef0 0a68 	vmov.f32	s1, s17
 800f200:	ecbd 8b02 	vpop	{d8}
 800f204:	6004      	str	r4, [r0, #0]
 800f206:	bd10      	pop	{r4, pc}

0800f208 <xflow>:
 800f208:	4603      	mov	r3, r0
 800f20a:	b507      	push	{r0, r1, r2, lr}
 800f20c:	ec51 0b10 	vmov	r0, r1, d0
 800f210:	b183      	cbz	r3, 800f234 <xflow+0x2c>
 800f212:	4602      	mov	r2, r0
 800f214:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f218:	e9cd 2300 	strd	r2, r3, [sp]
 800f21c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f220:	f7f1 fa02 	bl	8000628 <__aeabi_dmul>
 800f224:	ec41 0b10 	vmov	d0, r0, r1
 800f228:	2022      	movs	r0, #34	@ 0x22
 800f22a:	b003      	add	sp, #12
 800f22c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f230:	f7ff bfd8 	b.w	800f1e4 <with_errno>
 800f234:	4602      	mov	r2, r0
 800f236:	460b      	mov	r3, r1
 800f238:	e7ee      	b.n	800f218 <xflow+0x10>
 800f23a:	0000      	movs	r0, r0
 800f23c:	0000      	movs	r0, r0
	...

0800f240 <__math_uflow>:
 800f240:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f248 <__math_uflow+0x8>
 800f244:	f7ff bfe0 	b.w	800f208 <xflow>
 800f248:	00000000 	.word	0x00000000
 800f24c:	10000000 	.word	0x10000000

0800f250 <__math_oflow>:
 800f250:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f258 <__math_oflow+0x8>
 800f254:	f7ff bfd8 	b.w	800f208 <xflow>
 800f258:	00000000 	.word	0x00000000
 800f25c:	70000000 	.word	0x70000000

0800f260 <_init>:
 800f260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f262:	bf00      	nop
 800f264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f266:	bc08      	pop	{r3}
 800f268:	469e      	mov	lr, r3
 800f26a:	4770      	bx	lr

0800f26c <_fini>:
 800f26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f26e:	bf00      	nop
 800f270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f272:	bc08      	pop	{r3}
 800f274:	469e      	mov	lr, r3
 800f276:	4770      	bx	lr
